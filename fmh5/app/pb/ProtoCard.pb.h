// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoCard.proto

#ifndef PROTOBUF_ProtoCard_2eproto__INCLUDED
#define PROTOBUF_ProtoCard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "DataCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoCard {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoCard_2eproto();
void protobuf_AssignDesc_ProtoCard_2eproto();
void protobuf_ShutdownFile_ProtoCard_2eproto();

class MonthCardCPP;
class LifeCardCPP;
class GetCardReq;
class GetCardResp;
class PushBuyMonthCardMsg;
class PushBuyLifeCardMsg;
class RewardMonthCardReq;
class RewardMonthCardResp;
class RewardLifeCardReq;
class RewardLifeCardResp;

// ===================================================================

class MonthCardCPP : public ::google::protobuf::Message {
 public:
  MonthCardCPP();
  virtual ~MonthCardCPP();
  
  MonthCardCPP(const MonthCardCPP& from);
  
  inline MonthCardCPP& operator=(const MonthCardCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonthCardCPP& default_instance();
  
  void Swap(MonthCardCPP* other);
  
  // implements Message ----------------------------------------------
  
  MonthCardCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonthCardCPP& from);
  void MergeFrom(const MonthCardCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 isHaveMonthCard = 1;
  inline bool has_ishavemonthcard() const;
  inline void clear_ishavemonthcard();
  static const int kIsHaveMonthCardFieldNumber = 1;
  inline ::google::protobuf::uint32 ishavemonthcard() const;
  inline void set_ishavemonthcard(::google::protobuf::uint32 value);
  
  // optional uint32 isReward = 2;
  inline bool has_isreward() const;
  inline void clear_isreward();
  static const int kIsRewardFieldNumber = 2;
  inline ::google::protobuf::uint32 isreward() const;
  inline void set_isreward(::google::protobuf::uint32 value);
  
  // optional uint32 monthCardEndTs = 3;
  inline bool has_monthcardendts() const;
  inline void clear_monthcardendts();
  static const int kMonthCardEndTsFieldNumber = 3;
  inline ::google::protobuf::uint32 monthcardendts() const;
  inline void set_monthcardendts(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoCard.MonthCardCPP)
 private:
  inline void set_has_ishavemonthcard();
  inline void clear_has_ishavemonthcard();
  inline void set_has_isreward();
  inline void clear_has_isreward();
  inline void set_has_monthcardendts();
  inline void clear_has_monthcardendts();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ishavemonthcard_;
  ::google::protobuf::uint32 isreward_;
  ::google::protobuf::uint32 monthcardendts_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static MonthCardCPP* default_instance_;
};
// -------------------------------------------------------------------

class LifeCardCPP : public ::google::protobuf::Message {
 public:
  LifeCardCPP();
  virtual ~LifeCardCPP();
  
  LifeCardCPP(const LifeCardCPP& from);
  
  inline LifeCardCPP& operator=(const LifeCardCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LifeCardCPP& default_instance();
  
  void Swap(LifeCardCPP* other);
  
  // implements Message ----------------------------------------------
  
  LifeCardCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LifeCardCPP& from);
  void MergeFrom(const LifeCardCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 isHaveLifeCard = 1;
  inline bool has_ishavelifecard() const;
  inline void clear_ishavelifecard();
  static const int kIsHaveLifeCardFieldNumber = 1;
  inline ::google::protobuf::uint32 ishavelifecard() const;
  inline void set_ishavelifecard(::google::protobuf::uint32 value);
  
  // optional uint32 isReward = 2;
  inline bool has_isreward() const;
  inline void clear_isreward();
  static const int kIsRewardFieldNumber = 2;
  inline ::google::protobuf::uint32 isreward() const;
  inline void set_isreward(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoCard.LifeCardCPP)
 private:
  inline void set_has_ishavelifecard();
  inline void clear_has_ishavelifecard();
  inline void set_has_isreward();
  inline void clear_has_isreward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ishavelifecard_;
  ::google::protobuf::uint32 isreward_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static LifeCardCPP* default_instance_;
};
// -------------------------------------------------------------------

class GetCardReq : public ::google::protobuf::Message {
 public:
  GetCardReq();
  virtual ~GetCardReq();
  
  GetCardReq(const GetCardReq& from);
  
  inline GetCardReq& operator=(const GetCardReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCardReq& default_instance();
  
  void Swap(GetCardReq* other);
  
  // implements Message ----------------------------------------------
  
  GetCardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCardReq& from);
  void MergeFrom(const GetCardReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ProtoCard.GetCardReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static GetCardReq* default_instance_;
};
// -------------------------------------------------------------------

class GetCardResp : public ::google::protobuf::Message {
 public:
  GetCardResp();
  virtual ~GetCardResp();
  
  GetCardResp(const GetCardResp& from);
  
  inline GetCardResp& operator=(const GetCardResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCardResp& default_instance();
  
  void Swap(GetCardResp* other);
  
  // implements Message ----------------------------------------------
  
  GetCardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCardResp& from);
  void MergeFrom(const GetCardResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ProtoCard.MonthCardCPP monthCard = 1;
  inline bool has_monthcard() const;
  inline void clear_monthcard();
  static const int kMonthCardFieldNumber = 1;
  inline const ::ProtoCard::MonthCardCPP& monthcard() const;
  inline ::ProtoCard::MonthCardCPP* mutable_monthcard();
  inline ::ProtoCard::MonthCardCPP* release_monthcard();
  
  // required .ProtoCard.LifeCardCPP lifeCard = 2;
  inline bool has_lifecard() const;
  inline void clear_lifecard();
  static const int kLifeCardFieldNumber = 2;
  inline const ::ProtoCard::LifeCardCPP& lifecard() const;
  inline ::ProtoCard::LifeCardCPP* mutable_lifecard();
  inline ::ProtoCard::LifeCardCPP* release_lifecard();
  
  // @@protoc_insertion_point(class_scope:ProtoCard.GetCardResp)
 private:
  inline void set_has_monthcard();
  inline void clear_has_monthcard();
  inline void set_has_lifecard();
  inline void clear_has_lifecard();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoCard::MonthCardCPP* monthcard_;
  ::ProtoCard::LifeCardCPP* lifecard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static GetCardResp* default_instance_;
};
// -------------------------------------------------------------------

class PushBuyMonthCardMsg : public ::google::protobuf::Message {
 public:
  PushBuyMonthCardMsg();
  virtual ~PushBuyMonthCardMsg();
  
  PushBuyMonthCardMsg(const PushBuyMonthCardMsg& from);
  
  inline PushBuyMonthCardMsg& operator=(const PushBuyMonthCardMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushBuyMonthCardMsg& default_instance();
  
  void Swap(PushBuyMonthCardMsg* other);
  
  // implements Message ----------------------------------------------
  
  PushBuyMonthCardMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushBuyMonthCardMsg& from);
  void MergeFrom(const PushBuyMonthCardMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ProtoCard.MonthCardCPP monthCard = 1;
  inline bool has_monthcard() const;
  inline void clear_monthcard();
  static const int kMonthCardFieldNumber = 1;
  inline const ::ProtoCard::MonthCardCPP& monthcard() const;
  inline ::ProtoCard::MonthCardCPP* mutable_monthcard();
  inline ::ProtoCard::MonthCardCPP* release_monthcard();
  
  // @@protoc_insertion_point(class_scope:ProtoCard.PushBuyMonthCardMsg)
 private:
  inline void set_has_monthcard();
  inline void clear_has_monthcard();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoCard::MonthCardCPP* monthcard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static PushBuyMonthCardMsg* default_instance_;
};
// -------------------------------------------------------------------

class PushBuyLifeCardMsg : public ::google::protobuf::Message {
 public:
  PushBuyLifeCardMsg();
  virtual ~PushBuyLifeCardMsg();
  
  PushBuyLifeCardMsg(const PushBuyLifeCardMsg& from);
  
  inline PushBuyLifeCardMsg& operator=(const PushBuyLifeCardMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushBuyLifeCardMsg& default_instance();
  
  void Swap(PushBuyLifeCardMsg* other);
  
  // implements Message ----------------------------------------------
  
  PushBuyLifeCardMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushBuyLifeCardMsg& from);
  void MergeFrom(const PushBuyLifeCardMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ProtoCard.LifeCardCPP lifeCard = 1;
  inline bool has_lifecard() const;
  inline void clear_lifecard();
  static const int kLifeCardFieldNumber = 1;
  inline const ::ProtoCard::LifeCardCPP& lifecard() const;
  inline ::ProtoCard::LifeCardCPP* mutable_lifecard();
  inline ::ProtoCard::LifeCardCPP* release_lifecard();
  
  // @@protoc_insertion_point(class_scope:ProtoCard.PushBuyLifeCardMsg)
 private:
  inline void set_has_lifecard();
  inline void clear_has_lifecard();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoCard::LifeCardCPP* lifecard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static PushBuyLifeCardMsg* default_instance_;
};
// -------------------------------------------------------------------

class RewardMonthCardReq : public ::google::protobuf::Message {
 public:
  RewardMonthCardReq();
  virtual ~RewardMonthCardReq();
  
  RewardMonthCardReq(const RewardMonthCardReq& from);
  
  inline RewardMonthCardReq& operator=(const RewardMonthCardReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardMonthCardReq& default_instance();
  
  void Swap(RewardMonthCardReq* other);
  
  // implements Message ----------------------------------------------
  
  RewardMonthCardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardMonthCardReq& from);
  void MergeFrom(const RewardMonthCardReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ProtoCard.RewardMonthCardReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static RewardMonthCardReq* default_instance_;
};
// -------------------------------------------------------------------

class RewardMonthCardResp : public ::google::protobuf::Message {
 public:
  RewardMonthCardResp();
  virtual ~RewardMonthCardResp();
  
  RewardMonthCardResp(const RewardMonthCardResp& from);
  
  inline RewardMonthCardResp& operator=(const RewardMonthCardResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardMonthCardResp& default_instance();
  
  void Swap(RewardMonthCardResp* other);
  
  // implements Message ----------------------------------------------
  
  RewardMonthCardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardMonthCardResp& from);
  void MergeFrom(const RewardMonthCardResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .DataCommon.CommonItemsCPP commons = 1;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 1;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  
  // required .ProtoCard.MonthCardCPP monthCard = 2;
  inline bool has_monthcard() const;
  inline void clear_monthcard();
  static const int kMonthCardFieldNumber = 2;
  inline const ::ProtoCard::MonthCardCPP& monthcard() const;
  inline ::ProtoCard::MonthCardCPP* mutable_monthcard();
  inline ::ProtoCard::MonthCardCPP* release_monthcard();
  
  // @@protoc_insertion_point(class_scope:ProtoCard.RewardMonthCardResp)
 private:
  inline void set_has_commons();
  inline void clear_has_commons();
  inline void set_has_monthcard();
  inline void clear_has_monthcard();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DataCommon::CommonItemsCPP* commons_;
  ::ProtoCard::MonthCardCPP* monthcard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static RewardMonthCardResp* default_instance_;
};
// -------------------------------------------------------------------

class RewardLifeCardReq : public ::google::protobuf::Message {
 public:
  RewardLifeCardReq();
  virtual ~RewardLifeCardReq();
  
  RewardLifeCardReq(const RewardLifeCardReq& from);
  
  inline RewardLifeCardReq& operator=(const RewardLifeCardReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardLifeCardReq& default_instance();
  
  void Swap(RewardLifeCardReq* other);
  
  // implements Message ----------------------------------------------
  
  RewardLifeCardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardLifeCardReq& from);
  void MergeFrom(const RewardLifeCardReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ProtoCard.RewardLifeCardReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static RewardLifeCardReq* default_instance_;
};
// -------------------------------------------------------------------

class RewardLifeCardResp : public ::google::protobuf::Message {
 public:
  RewardLifeCardResp();
  virtual ~RewardLifeCardResp();
  
  RewardLifeCardResp(const RewardLifeCardResp& from);
  
  inline RewardLifeCardResp& operator=(const RewardLifeCardResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardLifeCardResp& default_instance();
  
  void Swap(RewardLifeCardResp* other);
  
  // implements Message ----------------------------------------------
  
  RewardLifeCardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardLifeCardResp& from);
  void MergeFrom(const RewardLifeCardResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .DataCommon.CommonItemsCPP commons = 1;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 1;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  
  // required .ProtoCard.LifeCardCPP lifeCard = 2;
  inline bool has_lifecard() const;
  inline void clear_lifecard();
  static const int kLifeCardFieldNumber = 2;
  inline const ::ProtoCard::LifeCardCPP& lifecard() const;
  inline ::ProtoCard::LifeCardCPP* mutable_lifecard();
  inline ::ProtoCard::LifeCardCPP* release_lifecard();
  
  // @@protoc_insertion_point(class_scope:ProtoCard.RewardLifeCardResp)
 private:
  inline void set_has_commons();
  inline void clear_has_commons();
  inline void set_has_lifecard();
  inline void clear_has_lifecard();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DataCommon::CommonItemsCPP* commons_;
  ::ProtoCard::LifeCardCPP* lifecard_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoCard_2eproto();
  friend void protobuf_AssignDesc_ProtoCard_2eproto();
  friend void protobuf_ShutdownFile_ProtoCard_2eproto();
  
  void InitAsDefaultInstance();
  static RewardLifeCardResp* default_instance_;
};
// ===================================================================


// ===================================================================

// MonthCardCPP

// required uint32 isHaveMonthCard = 1;
inline bool MonthCardCPP::has_ishavemonthcard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonthCardCPP::set_has_ishavemonthcard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonthCardCPP::clear_has_ishavemonthcard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonthCardCPP::clear_ishavemonthcard() {
  ishavemonthcard_ = 0u;
  clear_has_ishavemonthcard();
}
inline ::google::protobuf::uint32 MonthCardCPP::ishavemonthcard() const {
  return ishavemonthcard_;
}
inline void MonthCardCPP::set_ishavemonthcard(::google::protobuf::uint32 value) {
  set_has_ishavemonthcard();
  ishavemonthcard_ = value;
}

// optional uint32 isReward = 2;
inline bool MonthCardCPP::has_isreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonthCardCPP::set_has_isreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonthCardCPP::clear_has_isreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonthCardCPP::clear_isreward() {
  isreward_ = 0u;
  clear_has_isreward();
}
inline ::google::protobuf::uint32 MonthCardCPP::isreward() const {
  return isreward_;
}
inline void MonthCardCPP::set_isreward(::google::protobuf::uint32 value) {
  set_has_isreward();
  isreward_ = value;
}

// optional uint32 monthCardEndTs = 3;
inline bool MonthCardCPP::has_monthcardendts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonthCardCPP::set_has_monthcardendts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonthCardCPP::clear_has_monthcardendts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonthCardCPP::clear_monthcardendts() {
  monthcardendts_ = 0u;
  clear_has_monthcardendts();
}
inline ::google::protobuf::uint32 MonthCardCPP::monthcardendts() const {
  return monthcardendts_;
}
inline void MonthCardCPP::set_monthcardendts(::google::protobuf::uint32 value) {
  set_has_monthcardendts();
  monthcardendts_ = value;
}

// -------------------------------------------------------------------

// LifeCardCPP

// required uint32 isHaveLifeCard = 1;
inline bool LifeCardCPP::has_ishavelifecard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LifeCardCPP::set_has_ishavelifecard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LifeCardCPP::clear_has_ishavelifecard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LifeCardCPP::clear_ishavelifecard() {
  ishavelifecard_ = 0u;
  clear_has_ishavelifecard();
}
inline ::google::protobuf::uint32 LifeCardCPP::ishavelifecard() const {
  return ishavelifecard_;
}
inline void LifeCardCPP::set_ishavelifecard(::google::protobuf::uint32 value) {
  set_has_ishavelifecard();
  ishavelifecard_ = value;
}

// optional uint32 isReward = 2;
inline bool LifeCardCPP::has_isreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LifeCardCPP::set_has_isreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LifeCardCPP::clear_has_isreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LifeCardCPP::clear_isreward() {
  isreward_ = 0u;
  clear_has_isreward();
}
inline ::google::protobuf::uint32 LifeCardCPP::isreward() const {
  return isreward_;
}
inline void LifeCardCPP::set_isreward(::google::protobuf::uint32 value) {
  set_has_isreward();
  isreward_ = value;
}

// -------------------------------------------------------------------

// GetCardReq

// -------------------------------------------------------------------

// GetCardResp

// required .ProtoCard.MonthCardCPP monthCard = 1;
inline bool GetCardResp::has_monthcard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCardResp::set_has_monthcard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCardResp::clear_has_monthcard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCardResp::clear_monthcard() {
  if (monthcard_ != NULL) monthcard_->::ProtoCard::MonthCardCPP::Clear();
  clear_has_monthcard();
}
inline const ::ProtoCard::MonthCardCPP& GetCardResp::monthcard() const {
  return monthcard_ != NULL ? *monthcard_ : *default_instance_->monthcard_;
}
inline ::ProtoCard::MonthCardCPP* GetCardResp::mutable_monthcard() {
  set_has_monthcard();
  if (monthcard_ == NULL) monthcard_ = new ::ProtoCard::MonthCardCPP;
  return monthcard_;
}
inline ::ProtoCard::MonthCardCPP* GetCardResp::release_monthcard() {
  clear_has_monthcard();
  ::ProtoCard::MonthCardCPP* temp = monthcard_;
  monthcard_ = NULL;
  return temp;
}

// required .ProtoCard.LifeCardCPP lifeCard = 2;
inline bool GetCardResp::has_lifecard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetCardResp::set_has_lifecard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetCardResp::clear_has_lifecard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetCardResp::clear_lifecard() {
  if (lifecard_ != NULL) lifecard_->::ProtoCard::LifeCardCPP::Clear();
  clear_has_lifecard();
}
inline const ::ProtoCard::LifeCardCPP& GetCardResp::lifecard() const {
  return lifecard_ != NULL ? *lifecard_ : *default_instance_->lifecard_;
}
inline ::ProtoCard::LifeCardCPP* GetCardResp::mutable_lifecard() {
  set_has_lifecard();
  if (lifecard_ == NULL) lifecard_ = new ::ProtoCard::LifeCardCPP;
  return lifecard_;
}
inline ::ProtoCard::LifeCardCPP* GetCardResp::release_lifecard() {
  clear_has_lifecard();
  ::ProtoCard::LifeCardCPP* temp = lifecard_;
  lifecard_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PushBuyMonthCardMsg

// required .ProtoCard.MonthCardCPP monthCard = 1;
inline bool PushBuyMonthCardMsg::has_monthcard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushBuyMonthCardMsg::set_has_monthcard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushBuyMonthCardMsg::clear_has_monthcard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushBuyMonthCardMsg::clear_monthcard() {
  if (monthcard_ != NULL) monthcard_->::ProtoCard::MonthCardCPP::Clear();
  clear_has_monthcard();
}
inline const ::ProtoCard::MonthCardCPP& PushBuyMonthCardMsg::monthcard() const {
  return monthcard_ != NULL ? *monthcard_ : *default_instance_->monthcard_;
}
inline ::ProtoCard::MonthCardCPP* PushBuyMonthCardMsg::mutable_monthcard() {
  set_has_monthcard();
  if (monthcard_ == NULL) monthcard_ = new ::ProtoCard::MonthCardCPP;
  return monthcard_;
}
inline ::ProtoCard::MonthCardCPP* PushBuyMonthCardMsg::release_monthcard() {
  clear_has_monthcard();
  ::ProtoCard::MonthCardCPP* temp = monthcard_;
  monthcard_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PushBuyLifeCardMsg

// required .ProtoCard.LifeCardCPP lifeCard = 1;
inline bool PushBuyLifeCardMsg::has_lifecard() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushBuyLifeCardMsg::set_has_lifecard() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushBuyLifeCardMsg::clear_has_lifecard() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushBuyLifeCardMsg::clear_lifecard() {
  if (lifecard_ != NULL) lifecard_->::ProtoCard::LifeCardCPP::Clear();
  clear_has_lifecard();
}
inline const ::ProtoCard::LifeCardCPP& PushBuyLifeCardMsg::lifecard() const {
  return lifecard_ != NULL ? *lifecard_ : *default_instance_->lifecard_;
}
inline ::ProtoCard::LifeCardCPP* PushBuyLifeCardMsg::mutable_lifecard() {
  set_has_lifecard();
  if (lifecard_ == NULL) lifecard_ = new ::ProtoCard::LifeCardCPP;
  return lifecard_;
}
inline ::ProtoCard::LifeCardCPP* PushBuyLifeCardMsg::release_lifecard() {
  clear_has_lifecard();
  ::ProtoCard::LifeCardCPP* temp = lifecard_;
  lifecard_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RewardMonthCardReq

// -------------------------------------------------------------------

// RewardMonthCardResp

// required .DataCommon.CommonItemsCPP commons = 1;
inline bool RewardMonthCardResp::has_commons() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardMonthCardResp::set_has_commons() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardMonthCardResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardMonthCardResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& RewardMonthCardResp::commons() const {
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* RewardMonthCardResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* RewardMonthCardResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}

// required .ProtoCard.MonthCardCPP monthCard = 2;
inline bool RewardMonthCardResp::has_monthcard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardMonthCardResp::set_has_monthcard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardMonthCardResp::clear_has_monthcard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardMonthCardResp::clear_monthcard() {
  if (monthcard_ != NULL) monthcard_->::ProtoCard::MonthCardCPP::Clear();
  clear_has_monthcard();
}
inline const ::ProtoCard::MonthCardCPP& RewardMonthCardResp::monthcard() const {
  return monthcard_ != NULL ? *monthcard_ : *default_instance_->monthcard_;
}
inline ::ProtoCard::MonthCardCPP* RewardMonthCardResp::mutable_monthcard() {
  set_has_monthcard();
  if (monthcard_ == NULL) monthcard_ = new ::ProtoCard::MonthCardCPP;
  return monthcard_;
}
inline ::ProtoCard::MonthCardCPP* RewardMonthCardResp::release_monthcard() {
  clear_has_monthcard();
  ::ProtoCard::MonthCardCPP* temp = monthcard_;
  monthcard_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RewardLifeCardReq

// -------------------------------------------------------------------

// RewardLifeCardResp

// required .DataCommon.CommonItemsCPP commons = 1;
inline bool RewardLifeCardResp::has_commons() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardLifeCardResp::set_has_commons() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardLifeCardResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardLifeCardResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& RewardLifeCardResp::commons() const {
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* RewardLifeCardResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* RewardLifeCardResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}

// required .ProtoCard.LifeCardCPP lifeCard = 2;
inline bool RewardLifeCardResp::has_lifecard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardLifeCardResp::set_has_lifecard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardLifeCardResp::clear_has_lifecard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardLifeCardResp::clear_lifecard() {
  if (lifecard_ != NULL) lifecard_->::ProtoCard::LifeCardCPP::Clear();
  clear_has_lifecard();
}
inline const ::ProtoCard::LifeCardCPP& RewardLifeCardResp::lifecard() const {
  return lifecard_ != NULL ? *lifecard_ : *default_instance_->lifecard_;
}
inline ::ProtoCard::LifeCardCPP* RewardLifeCardResp::mutable_lifecard() {
  set_has_lifecard();
  if (lifecard_ == NULL) lifecard_ = new ::ProtoCard::LifeCardCPP;
  return lifecard_;
}
inline ::ProtoCard::LifeCardCPP* RewardLifeCardResp::release_lifecard() {
  clear_has_lifecard();
  ::ProtoCard::LifeCardCPP* temp = lifecard_;
  lifecard_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCard

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoCard_2eproto__INCLUDED
