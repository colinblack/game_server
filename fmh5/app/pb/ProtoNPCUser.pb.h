// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoNPCUser.proto

#ifndef PROTOBUF_ProtoNPCUser_2eproto__INCLUDED
#define PROTOBUF_ProtoNPCUser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "DataCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoNPCUser {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoNPCUser_2eproto();
void protobuf_AssignDesc_ProtoNPCUser_2eproto();
void protobuf_ShutdownFile_ProtoNPCUser_2eproto();

class Base;
class BuildingCPP;
class CropLandCPP;
class OthProduceCPP;
class AnimalCPP;
class EquipmentStarCPP;
class FruitCPP;
class ShippingCPP;
class ShippingBoxCPP;
class NPCShopCPP;
class FriendlyTreeBasicCPP;
class FriendlyTreeStatusCPP;
class FriendlyTreeCPP;
class RequestNPCUser;
class NPCUser;
class GetNPCShopReq;
class GetNPCShopResp;
class PurchaseReq;
class PurchaseResp;

// ===================================================================

class Base : public ::google::protobuf::Message {
 public:
  Base();
  virtual ~Base();
  
  Base(const Base& from);
  
  inline Base& operator=(const Base& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Base& default_instance();
  
  void Swap(Base* other);
  
  // implements Message ----------------------------------------------
  
  Base* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Base& from);
  void MergeFrom(const Base& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 registerPlatform = 2;
  inline bool has_registerplatform() const;
  inline void clear_registerplatform();
  static const int kRegisterPlatformFieldNumber = 2;
  inline ::google::protobuf::uint32 registerplatform() const;
  inline void set_registerplatform(::google::protobuf::uint32 value);
  
  // required uint32 registerTime = 3;
  inline bool has_registertime() const;
  inline void clear_registertime();
  static const int kRegisterTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 registertime() const;
  inline void set_registertime(::google::protobuf::uint32 value);
  
  // required uint32 lastLoginPlatform = 4;
  inline bool has_lastloginplatform() const;
  inline void clear_lastloginplatform();
  static const int kLastLoginPlatformFieldNumber = 4;
  inline ::google::protobuf::uint32 lastloginplatform() const;
  inline void set_lastloginplatform(::google::protobuf::uint32 value);
  
  // required uint32 lastLoginTime = 5;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::uint32 value);
  
  // required uint32 loginTimes = 6;
  inline bool has_logintimes() const;
  inline void clear_logintimes();
  static const int kLoginTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 logintimes() const;
  inline void set_logintimes(::google::protobuf::uint32 value);
  
  // required uint32 loginDays = 7;
  inline bool has_logindays() const;
  inline void clear_logindays();
  static const int kLoginDaysFieldNumber = 7;
  inline ::google::protobuf::uint32 logindays() const;
  inline void set_logindays(::google::protobuf::uint32 value);
  
  // required uint32 lastActiveTime = 8;
  inline bool has_lastactivetime() const;
  inline void clear_lastactivetime();
  static const int kLastActiveTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 lastactivetime() const;
  inline void set_lastactivetime(::google::protobuf::uint32 value);
  
  // required uint32 lastOffTime = 9;
  inline bool has_lastofftime() const;
  inline void clear_lastofftime();
  static const int kLastOffTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 lastofftime() const;
  inline void set_lastofftime(::google::protobuf::uint32 value);
  
  // required uint32 forbidTs = 10;
  inline bool has_forbidts() const;
  inline void clear_forbidts();
  static const int kForbidTsFieldNumber = 10;
  inline ::google::protobuf::uint32 forbidts() const;
  inline void set_forbidts(::google::protobuf::uint32 value);
  
  // required bytes forbidReason = 11;
  inline bool has_forbidreason() const;
  inline void clear_forbidreason();
  static const int kForbidReasonFieldNumber = 11;
  inline const ::std::string& forbidreason() const;
  inline void set_forbidreason(const ::std::string& value);
  inline void set_forbidreason(const char* value);
  inline void set_forbidreason(const void* value, size_t size);
  inline ::std::string* mutable_forbidreason();
  inline ::std::string* release_forbidreason();
  
  // required uint32 tutorialStage = 12;
  inline bool has_tutorialstage() const;
  inline void clear_tutorialstage();
  static const int kTutorialStageFieldNumber = 12;
  inline ::google::protobuf::uint32 tutorialstage() const;
  inline void set_tutorialstage(::google::protobuf::uint32 value);
  
  // required bytes name = 13;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 13;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bytes fig = 14;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 14;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  
  // required uint64 exp = 15;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 15;
  inline ::google::protobuf::uint64 exp() const;
  inline void set_exp(::google::protobuf::uint64 value);
  
  // required uint32 level = 16;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 16;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // required uint32 acccharge = 17;
  inline bool has_acccharge() const;
  inline void clear_acccharge();
  static const int kAccchargeFieldNumber = 17;
  inline ::google::protobuf::uint32 acccharge() const;
  inline void set_acccharge(::google::protobuf::uint32 value);
  
  // required uint32 viplevel = 18;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 18;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);
  
  // required uint32 cash = 19;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 19;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);
  
  // required uint32 coin = 20;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 20;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);
  
  // required uint32 firstRecharge = 21;
  inline bool has_firstrecharge() const;
  inline void clear_firstrecharge();
  static const int kFirstRechargeFieldNumber = 21;
  inline ::google::protobuf::uint32 firstrecharge() const;
  inline void set_firstrecharge(::google::protobuf::uint32 value);
  
  // required uint32 allianceId = 22;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 22;
  inline ::google::protobuf::uint32 allianceid() const;
  inline void set_allianceid(::google::protobuf::uint32 value);
  
  // required bytes barrier = 23;
  inline bool has_barrier() const;
  inline void clear_barrier();
  static const int kBarrierFieldNumber = 23;
  inline const ::std::string& barrier() const;
  inline void set_barrier(const ::std::string& value);
  inline void set_barrier(const char* value);
  inline void set_barrier(const void* value, size_t size);
  inline ::std::string* mutable_barrier();
  inline ::std::string* release_barrier();
  
  // required uint32 lastcreateadts = 24;
  inline bool has_lastcreateadts() const;
  inline void clear_lastcreateadts();
  static const int kLastcreateadtsFieldNumber = 24;
  inline ::google::protobuf::uint32 lastcreateadts() const;
  inline void set_lastcreateadts(::google::protobuf::uint32 value);
  
  // required uint32 allianAllowTs = 25;
  inline bool has_allianallowts() const;
  inline void clear_allianallowts();
  static const int kAllianAllowTsFieldNumber = 25;
  inline ::google::protobuf::uint32 allianallowts() const;
  inline void set_allianallowts(::google::protobuf::uint32 value);
  
  // required uint32 nextDonationTs = 26;
  inline bool has_nextdonationts() const;
  inline void clear_nextdonationts();
  static const int kNextDonationTsFieldNumber = 26;
  inline ::google::protobuf::uint32 nextdonationts() const;
  inline void set_nextdonationts(::google::protobuf::uint32 value);
  
  // required uint32 helptimes = 27;
  inline bool has_helptimes() const;
  inline void clear_helptimes();
  static const int kHelptimesFieldNumber = 27;
  inline ::google::protobuf::uint32 helptimes() const;
  inline void set_helptimes(::google::protobuf::uint32 value);
  
  // required uint32 viprewarddailygiftts = 28;
  inline bool has_viprewarddailygiftts() const;
  inline void clear_viprewarddailygiftts();
  static const int kViprewarddailygifttsFieldNumber = 28;
  inline ::google::protobuf::uint32 viprewarddailygiftts() const;
  inline void set_viprewarddailygiftts(::google::protobuf::uint32 value);
  
  // required uint32 vipdailyspeedproductcnt = 29;
  inline bool has_vipdailyspeedproductcnt() const;
  inline void clear_vipdailyspeedproductcnt();
  static const int kVipdailyspeedproductcntFieldNumber = 29;
  inline ::google::protobuf::uint32 vipdailyspeedproductcnt() const;
  inline void set_vipdailyspeedproductcnt(::google::protobuf::uint32 value);
  
  // required uint32 vipdailyremoveordercdcnt = 30;
  inline bool has_vipdailyremoveordercdcnt() const;
  inline void clear_vipdailyremoveordercdcnt();
  static const int kVipdailyremoveordercdcntFieldNumber = 30;
  inline ::google::protobuf::uint32 vipdailyremoveordercdcnt() const;
  inline void set_vipdailyremoveordercdcnt(::google::protobuf::uint32 value);
  
  // required uint32 switchStatus = 31;
  inline bool has_switchstatus() const;
  inline void clear_switchstatus();
  static const int kSwitchStatusFieldNumber = 31;
  inline ::google::protobuf::uint32 switchstatus() const;
  inline void set_switchstatus(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.Base)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_registerplatform();
  inline void clear_has_registerplatform();
  inline void set_has_registertime();
  inline void clear_has_registertime();
  inline void set_has_lastloginplatform();
  inline void clear_has_lastloginplatform();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_logintimes();
  inline void clear_has_logintimes();
  inline void set_has_logindays();
  inline void clear_has_logindays();
  inline void set_has_lastactivetime();
  inline void clear_has_lastactivetime();
  inline void set_has_lastofftime();
  inline void clear_has_lastofftime();
  inline void set_has_forbidts();
  inline void clear_has_forbidts();
  inline void set_has_forbidreason();
  inline void clear_has_forbidreason();
  inline void set_has_tutorialstage();
  inline void clear_has_tutorialstage();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_acccharge();
  inline void clear_has_acccharge();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_firstrecharge();
  inline void clear_has_firstrecharge();
  inline void set_has_allianceid();
  inline void clear_has_allianceid();
  inline void set_has_barrier();
  inline void clear_has_barrier();
  inline void set_has_lastcreateadts();
  inline void clear_has_lastcreateadts();
  inline void set_has_allianallowts();
  inline void clear_has_allianallowts();
  inline void set_has_nextdonationts();
  inline void clear_has_nextdonationts();
  inline void set_has_helptimes();
  inline void clear_has_helptimes();
  inline void set_has_viprewarddailygiftts();
  inline void clear_has_viprewarddailygiftts();
  inline void set_has_vipdailyspeedproductcnt();
  inline void clear_has_vipdailyspeedproductcnt();
  inline void set_has_vipdailyremoveordercdcnt();
  inline void clear_has_vipdailyremoveordercdcnt();
  inline void set_has_switchstatus();
  inline void clear_has_switchstatus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 registerplatform_;
  ::google::protobuf::uint32 registertime_;
  ::google::protobuf::uint32 lastloginplatform_;
  ::google::protobuf::uint32 lastlogintime_;
  ::google::protobuf::uint32 logintimes_;
  ::google::protobuf::uint32 logindays_;
  ::google::protobuf::uint32 lastactivetime_;
  ::google::protobuf::uint32 lastofftime_;
  ::google::protobuf::uint32 forbidts_;
  ::std::string* forbidreason_;
  ::std::string* name_;
  ::std::string* fig_;
  ::google::protobuf::uint32 tutorialstage_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 exp_;
  ::google::protobuf::uint32 acccharge_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 firstrecharge_;
  ::google::protobuf::uint32 allianceid_;
  ::std::string* barrier_;
  ::google::protobuf::uint32 lastcreateadts_;
  ::google::protobuf::uint32 allianallowts_;
  ::google::protobuf::uint32 nextdonationts_;
  ::google::protobuf::uint32 helptimes_;
  ::google::protobuf::uint32 viprewarddailygiftts_;
  ::google::protobuf::uint32 vipdailyspeedproductcnt_;
  ::google::protobuf::uint32 vipdailyremoveordercdcnt_;
  ::google::protobuf::uint32 switchstatus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static Base* default_instance_;
};
// -------------------------------------------------------------------

class BuildingCPP : public ::google::protobuf::Message {
 public:
  BuildingCPP();
  virtual ~BuildingCPP();
  
  BuildingCPP(const BuildingCPP& from);
  
  inline BuildingCPP& operator=(const BuildingCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildingCPP& default_instance();
  
  void Swap(BuildingCPP* other);
  
  // implements Message ----------------------------------------------
  
  BuildingCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildingCPP& from);
  void MergeFrom(const BuildingCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);
  
  // required uint32 buildId = 2;
  inline bool has_buildid() const;
  inline void clear_buildid();
  static const int kBuildIdFieldNumber = 2;
  inline ::google::protobuf::uint32 buildid() const;
  inline void set_buildid(::google::protobuf::uint32 value);
  
  // repeated uint32 position = 3;
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::uint32 position(int index) const;
  inline void set_position(int index, ::google::protobuf::uint32 value);
  inline void add_position(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      position() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_position();
  
  // required uint32 direct = 4;
  inline bool has_direct() const;
  inline void clear_direct();
  static const int kDirectFieldNumber = 4;
  inline ::google::protobuf::uint32 direct() const;
  inline void set_direct(::google::protobuf::uint32 value);
  
  // required uint32 doneTime = 5;
  inline bool has_donetime() const;
  inline void clear_donetime();
  static const int kDoneTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 donetime() const;
  inline void set_donetime(::google::protobuf::uint32 value);
  
  // required uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.BuildingCPP)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_buildid();
  inline void clear_has_buildid();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_donetime();
  inline void clear_has_donetime();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 buildid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > position_;
  ::google::protobuf::uint32 direct_;
  ::google::protobuf::uint32 donetime_;
  ::google::protobuf::uint32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static BuildingCPP* default_instance_;
};
// -------------------------------------------------------------------

class CropLandCPP : public ::google::protobuf::Message {
 public:
  CropLandCPP();
  virtual ~CropLandCPP();
  
  CropLandCPP(const CropLandCPP& from);
  
  inline CropLandCPP& operator=(const CropLandCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CropLandCPP& default_instance();
  
  void Swap(CropLandCPP* other);
  
  // implements Message ----------------------------------------------
  
  CropLandCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CropLandCPP& from);
  void MergeFrom(const CropLandCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);
  
  // required uint32 plant = 2;
  inline bool has_plant() const;
  inline void clear_plant();
  static const int kPlantFieldNumber = 2;
  inline ::google::protobuf::uint32 plant() const;
  inline void set_plant(::google::protobuf::uint32 value);
  
  // required uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required uint32 harvestTime = 4;
  inline bool has_harvesttime() const;
  inline void clear_harvesttime();
  static const int kHarvestTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 harvesttime() const;
  inline void set_harvesttime(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.CropLandCPP)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_plant();
  inline void clear_has_plant();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_harvesttime();
  inline void clear_has_harvesttime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 plant_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 harvesttime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static CropLandCPP* default_instance_;
};
// -------------------------------------------------------------------

class OthProduceCPP : public ::google::protobuf::Message {
 public:
  OthProduceCPP();
  virtual ~OthProduceCPP();
  
  OthProduceCPP(const OthProduceCPP& from);
  
  inline OthProduceCPP& operator=(const OthProduceCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OthProduceCPP& default_instance();
  
  void Swap(OthProduceCPP* other);
  
  // implements Message ----------------------------------------------
  
  OthProduceCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OthProduceCPP& from);
  void MergeFrom(const OthProduceCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);
  
  // required uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.OthProduceCPP)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static OthProduceCPP* default_instance_;
};
// -------------------------------------------------------------------

class AnimalCPP : public ::google::protobuf::Message {
 public:
  AnimalCPP();
  virtual ~AnimalCPP();
  
  AnimalCPP(const AnimalCPP& from);
  
  inline AnimalCPP& operator=(const AnimalCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimalCPP& default_instance();
  
  void Swap(AnimalCPP* other);
  
  // implements Message ----------------------------------------------
  
  AnimalCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnimalCPP& from);
  void MergeFrom(const AnimalCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);
  
  // required uint32 residenceUd = 2;
  inline bool has_residenceud() const;
  inline void clear_residenceud();
  static const int kResidenceUdFieldNumber = 2;
  inline ::google::protobuf::uint32 residenceud() const;
  inline void set_residenceud(::google::protobuf::uint32 value);
  
  // required uint32 animalId = 3;
  inline bool has_animalid() const;
  inline void clear_animalid();
  static const int kAnimalIdFieldNumber = 3;
  inline ::google::protobuf::uint32 animalid() const;
  inline void set_animalid(::google::protobuf::uint32 value);
  
  // required uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required uint32 fullTime = 5;
  inline bool has_fulltime() const;
  inline void clear_fulltime();
  static const int kFullTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 fulltime() const;
  inline void set_fulltime(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.AnimalCPP)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_residenceud();
  inline void clear_has_residenceud();
  inline void set_has_animalid();
  inline void clear_has_animalid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_fulltime();
  inline void clear_has_fulltime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 residenceud_;
  ::google::protobuf::uint32 animalid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 fulltime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static AnimalCPP* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentStarCPP : public ::google::protobuf::Message {
 public:
  EquipmentStarCPP();
  virtual ~EquipmentStarCPP();
  
  EquipmentStarCPP(const EquipmentStarCPP& from);
  
  inline EquipmentStarCPP& operator=(const EquipmentStarCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentStarCPP& default_instance();
  
  void Swap(EquipmentStarCPP* other);
  
  // implements Message ----------------------------------------------
  
  EquipmentStarCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentStarCPP& from);
  void MergeFrom(const EquipmentStarCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);
  
  // required uint32 usedtime = 3;
  inline bool has_usedtime() const;
  inline void clear_usedtime();
  static const int kUsedtimeFieldNumber = 3;
  inline ::google::protobuf::uint32 usedtime() const;
  inline void set_usedtime(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.EquipmentStarCPP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_usedtime();
  inline void clear_has_usedtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 usedtime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static EquipmentStarCPP* default_instance_;
};
// -------------------------------------------------------------------

class FruitCPP : public ::google::protobuf::Message {
 public:
  FruitCPP();
  virtual ~FruitCPP();
  
  FruitCPP(const FruitCPP& from);
  
  inline FruitCPP& operator=(const FruitCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FruitCPP& default_instance();
  
  void Swap(FruitCPP* other);
  
  // implements Message ----------------------------------------------
  
  FruitCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FruitCPP& from);
  void MergeFrom(const FruitCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);
  
  // required uint32 treeid = 2;
  inline bool has_treeid() const;
  inline void clear_treeid();
  static const int kTreeidFieldNumber = 2;
  inline ::google::protobuf::uint32 treeid() const;
  inline void set_treeid(::google::protobuf::uint32 value);
  
  // required uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required uint32 stage = 4;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);
  
  // required uint32 fruitLeftNum = 5;
  inline bool has_fruitleftnum() const;
  inline void clear_fruitleftnum();
  static const int kFruitLeftNumFieldNumber = 5;
  inline ::google::protobuf::uint32 fruitleftnum() const;
  inline void set_fruitleftnum(::google::protobuf::uint32 value);
  
  // required uint32 harvestTime = 6;
  inline bool has_harvesttime() const;
  inline void clear_harvesttime();
  static const int kHarvestTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 harvesttime() const;
  inline void set_harvesttime(::google::protobuf::uint32 value);
  
  // optional bytes name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bytes fig = 8;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 8;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.FruitCPP)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_treeid();
  inline void clear_has_treeid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_fruitleftnum();
  inline void clear_has_fruitleftnum();
  inline void set_has_harvesttime();
  inline void clear_has_harvesttime();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 treeid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 stage_;
  ::google::protobuf::uint32 fruitleftnum_;
  ::google::protobuf::uint32 harvesttime_;
  ::std::string* name_;
  ::std::string* fig_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static FruitCPP* default_instance_;
};
// -------------------------------------------------------------------

class ShippingCPP : public ::google::protobuf::Message {
 public:
  ShippingCPP();
  virtual ~ShippingCPP();
  
  ShippingCPP(const ShippingCPP& from);
  
  inline ShippingCPP& operator=(const ShippingCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShippingCPP& default_instance();
  
  void Swap(ShippingCPP* other);
  
  // implements Message ----------------------------------------------
  
  ShippingCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShippingCPP& from);
  void MergeFrom(const ShippingCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 badge = 1;
  inline bool has_badge() const;
  inline void clear_badge();
  static const int kBadgeFieldNumber = 1;
  inline ::google::protobuf::uint32 badge() const;
  inline void set_badge(::google::protobuf::uint32 value);
  
  // required uint32 unlockEndts = 2;
  inline bool has_unlockendts() const;
  inline void clear_unlockendts();
  static const int kUnlockEndtsFieldNumber = 2;
  inline ::google::protobuf::uint32 unlockendts() const;
  inline void set_unlockendts(::google::protobuf::uint32 value);
  
  // required uint32 arriveTs = 3;
  inline bool has_arrivets() const;
  inline void clear_arrivets();
  static const int kArriveTsFieldNumber = 3;
  inline ::google::protobuf::uint32 arrivets() const;
  inline void set_arrivets(::google::protobuf::uint32 value);
  
  // required uint32 publicAidTimes = 4;
  inline bool has_publicaidtimes() const;
  inline void clear_publicaidtimes();
  static const int kPublicAidTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 publicaidtimes() const;
  inline void set_publicaidtimes(::google::protobuf::uint32 value);
  
  // required uint32 commercialAidTimes = 5;
  inline bool has_commercialaidtimes() const;
  inline void clear_commercialaidtimes();
  static const int kCommercialAidTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 commercialaidtimes() const;
  inline void set_commercialaidtimes(::google::protobuf::uint32 value);
  
  // required uint32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required uint32 playStatus = 7;
  inline bool has_playstatus() const;
  inline void clear_playstatus();
  static const int kPlayStatusFieldNumber = 7;
  inline ::google::protobuf::uint32 playstatus() const;
  inline void set_playstatus(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.ShippingCPP)
 private:
  inline void set_has_badge();
  inline void clear_has_badge();
  inline void set_has_unlockendts();
  inline void clear_has_unlockendts();
  inline void set_has_arrivets();
  inline void clear_has_arrivets();
  inline void set_has_publicaidtimes();
  inline void clear_has_publicaidtimes();
  inline void set_has_commercialaidtimes();
  inline void clear_has_commercialaidtimes();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_playstatus();
  inline void clear_has_playstatus();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 badge_;
  ::google::protobuf::uint32 unlockendts_;
  ::google::protobuf::uint32 arrivets_;
  ::google::protobuf::uint32 publicaidtimes_;
  ::google::protobuf::uint32 commercialaidtimes_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 playstatus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static ShippingCPP* default_instance_;
};
// -------------------------------------------------------------------

class ShippingBoxCPP : public ::google::protobuf::Message {
 public:
  ShippingBoxCPP();
  virtual ~ShippingBoxCPP();
  
  ShippingBoxCPP(const ShippingBoxCPP& from);
  
  inline ShippingBoxCPP& operator=(const ShippingBoxCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShippingBoxCPP& default_instance();
  
  void Swap(ShippingBoxCPP* other);
  
  // implements Message ----------------------------------------------
  
  ShippingBoxCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShippingBoxCPP& from);
  void MergeFrom(const ShippingBoxCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 boxid = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxidFieldNumber = 1;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);
  
  // required uint32 propsid = 2;
  inline bool has_propsid() const;
  inline void clear_propsid();
  static const int kPropsidFieldNumber = 2;
  inline ::google::protobuf::uint32 propsid() const;
  inline void set_propsid(::google::protobuf::uint32 value);
  
  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // required uint32 aidStatus = 4;
  inline bool has_aidstatus() const;
  inline void clear_aidstatus();
  static const int kAidStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 aidstatus() const;
  inline void set_aidstatus(::google::protobuf::uint32 value);
  
  // required uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);
  
  // required uint32 coin = 6;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 6;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);
  
  // required uint32 exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);
  
  // optional bytes fig = 8;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 8;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  
  // optional bytes name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.ShippingBoxCPP)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_propsid();
  inline void clear_has_propsid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_aidstatus();
  inline void clear_has_aidstatus();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_fig();
  inline void clear_has_fig();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 boxid_;
  ::google::protobuf::uint32 propsid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 aidstatus_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 coin_;
  ::std::string* fig_;
  ::std::string* name_;
  ::google::protobuf::uint32 exp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static ShippingBoxCPP* default_instance_;
};
// -------------------------------------------------------------------

class NPCShopCPP : public ::google::protobuf::Message {
 public:
  NPCShopCPP();
  virtual ~NPCShopCPP();
  
  NPCShopCPP(const NPCShopCPP& from);
  
  inline NPCShopCPP& operator=(const NPCShopCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCShopCPP& default_instance();
  
  void Swap(NPCShopCPP* other);
  
  // implements Message ----------------------------------------------
  
  NPCShopCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCShopCPP& from);
  void MergeFrom(const NPCShopCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);
  
  // required uint32 propsid = 2;
  inline bool has_propsid() const;
  inline void clear_propsid();
  static const int kPropsidFieldNumber = 2;
  inline ::google::protobuf::uint32 propsid() const;
  inline void set_propsid(::google::protobuf::uint32 value);
  
  // required uint32 propscnt = 3;
  inline bool has_propscnt() const;
  inline void clear_propscnt();
  static const int kPropscntFieldNumber = 3;
  inline ::google::protobuf::uint32 propscnt() const;
  inline void set_propscnt(::google::protobuf::uint32 value);
  
  // required uint32 sellflag = 4;
  inline bool has_sellflag() const;
  inline void clear_sellflag();
  static const int kSellflagFieldNumber = 4;
  inline ::google::protobuf::uint32 sellflag() const;
  inline void set_sellflag(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.NPCShopCPP)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_propsid();
  inline void clear_has_propsid();
  inline void set_has_propscnt();
  inline void clear_has_propscnt();
  inline void set_has_sellflag();
  inline void clear_has_sellflag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 propsid_;
  ::google::protobuf::uint32 propscnt_;
  ::google::protobuf::uint32 sellflag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static NPCShopCPP* default_instance_;
};
// -------------------------------------------------------------------

class FriendlyTreeBasicCPP : public ::google::protobuf::Message {
 public:
  FriendlyTreeBasicCPP();
  virtual ~FriendlyTreeBasicCPP();
  
  FriendlyTreeBasicCPP(const FriendlyTreeBasicCPP& from);
  
  inline FriendlyTreeBasicCPP& operator=(const FriendlyTreeBasicCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendlyTreeBasicCPP& default_instance();
  
  void Swap(FriendlyTreeBasicCPP* other);
  
  // implements Message ----------------------------------------------
  
  FriendlyTreeBasicCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendlyTreeBasicCPP& from);
  void MergeFrom(const FriendlyTreeBasicCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 othuid = 2;
  inline bool has_othuid() const;
  inline void clear_othuid();
  static const int kOthuidFieldNumber = 2;
  inline ::google::protobuf::uint32 othuid() const;
  inline void set_othuid(::google::protobuf::uint32 value);
  
  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bytes head = 4;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 4;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const void* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  
  // required uint32 ts = 5;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 5;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.FriendlyTreeBasicCPP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_othuid();
  inline void clear_has_othuid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_ts();
  inline void clear_has_ts();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 othuid_;
  ::std::string* name_;
  ::std::string* head_;
  ::google::protobuf::uint32 ts_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static FriendlyTreeBasicCPP* default_instance_;
};
// -------------------------------------------------------------------

class FriendlyTreeStatusCPP : public ::google::protobuf::Message {
 public:
  FriendlyTreeStatusCPP();
  virtual ~FriendlyTreeStatusCPP();
  
  FriendlyTreeStatusCPP(const FriendlyTreeStatusCPP& from);
  
  inline FriendlyTreeStatusCPP& operator=(const FriendlyTreeStatusCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendlyTreeStatusCPP& default_instance();
  
  void Swap(FriendlyTreeStatusCPP* other);
  
  // implements Message ----------------------------------------------
  
  FriendlyTreeStatusCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendlyTreeStatusCPP& from);
  void MergeFrom(const FriendlyTreeStatusCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 treestatus = 1;
  inline bool has_treestatus() const;
  inline void clear_treestatus();
  static const int kTreestatusFieldNumber = 1;
  inline ::google::protobuf::uint32 treestatus() const;
  inline void set_treestatus(::google::protobuf::uint32 value);
  
  // optional uint32 nextwaterts = 2;
  inline bool has_nextwaterts() const;
  inline void clear_nextwaterts();
  static const int kNextwatertsFieldNumber = 2;
  inline ::google::protobuf::uint32 nextwaterts() const;
  inline void set_nextwaterts(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.FriendlyTreeStatusCPP)
 private:
  inline void set_has_treestatus();
  inline void clear_has_treestatus();
  inline void set_has_nextwaterts();
  inline void clear_has_nextwaterts();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 treestatus_;
  ::google::protobuf::uint32 nextwaterts_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static FriendlyTreeStatusCPP* default_instance_;
};
// -------------------------------------------------------------------

class FriendlyTreeCPP : public ::google::protobuf::Message {
 public:
  FriendlyTreeCPP();
  virtual ~FriendlyTreeCPP();
  
  FriendlyTreeCPP(const FriendlyTreeCPP& from);
  
  inline FriendlyTreeCPP& operator=(const FriendlyTreeCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendlyTreeCPP& default_instance();
  
  void Swap(FriendlyTreeCPP* other);
  
  // implements Message ----------------------------------------------
  
  FriendlyTreeCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendlyTreeCPP& from);
  void MergeFrom(const FriendlyTreeCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoNPCUser.FriendlyTreeBasicCPP basictreeinfo = 1;
  inline int basictreeinfo_size() const;
  inline void clear_basictreeinfo();
  static const int kBasictreeinfoFieldNumber = 1;
  inline const ::ProtoNPCUser::FriendlyTreeBasicCPP& basictreeinfo(int index) const;
  inline ::ProtoNPCUser::FriendlyTreeBasicCPP* mutable_basictreeinfo(int index);
  inline ::ProtoNPCUser::FriendlyTreeBasicCPP* add_basictreeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FriendlyTreeBasicCPP >&
      basictreeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FriendlyTreeBasicCPP >*
      mutable_basictreeinfo();
  
  // required .ProtoNPCUser.FriendlyTreeStatusCPP statustreeinfo = 2;
  inline bool has_statustreeinfo() const;
  inline void clear_statustreeinfo();
  static const int kStatustreeinfoFieldNumber = 2;
  inline const ::ProtoNPCUser::FriendlyTreeStatusCPP& statustreeinfo() const;
  inline ::ProtoNPCUser::FriendlyTreeStatusCPP* mutable_statustreeinfo();
  inline ::ProtoNPCUser::FriendlyTreeStatusCPP* release_statustreeinfo();
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.FriendlyTreeCPP)
 private:
  inline void set_has_statustreeinfo();
  inline void clear_has_statustreeinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FriendlyTreeBasicCPP > basictreeinfo_;
  ::ProtoNPCUser::FriendlyTreeStatusCPP* statustreeinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static FriendlyTreeCPP* default_instance_;
};
// -------------------------------------------------------------------

class RequestNPCUser : public ::google::protobuf::Message {
 public:
  RequestNPCUser();
  virtual ~RequestNPCUser();
  
  RequestNPCUser(const RequestNPCUser& from);
  
  inline RequestNPCUser& operator=(const RequestNPCUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestNPCUser& default_instance();
  
  void Swap(RequestNPCUser* other);
  
  // implements Message ----------------------------------------------
  
  RequestNPCUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestNPCUser& from);
  void MergeFrom(const RequestNPCUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.RequestNPCUser)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static RequestNPCUser* default_instance_;
};
// -------------------------------------------------------------------

class NPCUser : public ::google::protobuf::Message {
 public:
  NPCUser();
  virtual ~NPCUser();
  
  NPCUser(const NPCUser& from);
  
  inline NPCUser& operator=(const NPCUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCUser& default_instance();
  
  void Swap(NPCUser* other);
  
  // implements Message ----------------------------------------------
  
  NPCUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCUser& from);
  void MergeFrom(const NPCUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ProtoNPCUser.Base base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::ProtoNPCUser::Base& base() const;
  inline ::ProtoNPCUser::Base* mutable_base();
  inline ::ProtoNPCUser::Base* release_base();
  
  // repeated .ProtoNPCUser.BuildingCPP builds = 2;
  inline int builds_size() const;
  inline void clear_builds();
  static const int kBuildsFieldNumber = 2;
  inline const ::ProtoNPCUser::BuildingCPP& builds(int index) const;
  inline ::ProtoNPCUser::BuildingCPP* mutable_builds(int index);
  inline ::ProtoNPCUser::BuildingCPP* add_builds();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::BuildingCPP >&
      builds() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::BuildingCPP >*
      mutable_builds();
  
  // repeated .ProtoNPCUser.CropLandCPP cropland = 3;
  inline int cropland_size() const;
  inline void clear_cropland();
  static const int kCroplandFieldNumber = 3;
  inline const ::ProtoNPCUser::CropLandCPP& cropland(int index) const;
  inline ::ProtoNPCUser::CropLandCPP* mutable_cropland(int index);
  inline ::ProtoNPCUser::CropLandCPP* add_cropland();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::CropLandCPP >&
      cropland() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::CropLandCPP >*
      mutable_cropland();
  
  // repeated .ProtoNPCUser.OthProduceCPP equipments = 4;
  inline int equipments_size() const;
  inline void clear_equipments();
  static const int kEquipmentsFieldNumber = 4;
  inline const ::ProtoNPCUser::OthProduceCPP& equipments(int index) const;
  inline ::ProtoNPCUser::OthProduceCPP* mutable_equipments(int index);
  inline ::ProtoNPCUser::OthProduceCPP* add_equipments();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::OthProduceCPP >&
      equipments() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::OthProduceCPP >*
      mutable_equipments();
  
  // repeated .ProtoNPCUser.AnimalCPP animals = 5;
  inline int animals_size() const;
  inline void clear_animals();
  static const int kAnimalsFieldNumber = 5;
  inline const ::ProtoNPCUser::AnimalCPP& animals(int index) const;
  inline ::ProtoNPCUser::AnimalCPP* mutable_animals(int index);
  inline ::ProtoNPCUser::AnimalCPP* add_animals();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::AnimalCPP >&
      animals() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::AnimalCPP >*
      mutable_animals();
  
  // repeated .ProtoNPCUser.EquipmentStarCPP equipmentstars = 6;
  inline int equipmentstars_size() const;
  inline void clear_equipmentstars();
  static const int kEquipmentstarsFieldNumber = 6;
  inline const ::ProtoNPCUser::EquipmentStarCPP& equipmentstars(int index) const;
  inline ::ProtoNPCUser::EquipmentStarCPP* mutable_equipmentstars(int index);
  inline ::ProtoNPCUser::EquipmentStarCPP* add_equipmentstars();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::EquipmentStarCPP >&
      equipmentstars() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::EquipmentStarCPP >*
      mutable_equipmentstars();
  
  // repeated .ProtoNPCUser.FruitCPP fruits = 7;
  inline int fruits_size() const;
  inline void clear_fruits();
  static const int kFruitsFieldNumber = 7;
  inline const ::ProtoNPCUser::FruitCPP& fruits(int index) const;
  inline ::ProtoNPCUser::FruitCPP* mutable_fruits(int index);
  inline ::ProtoNPCUser::FruitCPP* add_fruits();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FruitCPP >&
      fruits() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FruitCPP >*
      mutable_fruits();
  
  // required uint32 shopStatus = 8;
  inline bool has_shopstatus() const;
  inline void clear_shopstatus();
  static const int kShopStatusFieldNumber = 8;
  inline ::google::protobuf::uint32 shopstatus() const;
  inline void set_shopstatus(::google::protobuf::uint32 value);
  
  // optional .ProtoNPCUser.ShippingCPP shipping = 9;
  inline bool has_shipping() const;
  inline void clear_shipping();
  static const int kShippingFieldNumber = 9;
  inline const ::ProtoNPCUser::ShippingCPP& shipping() const;
  inline ::ProtoNPCUser::ShippingCPP* mutable_shipping();
  inline ::ProtoNPCUser::ShippingCPP* release_shipping();
  
  // repeated .ProtoNPCUser.ShippingBoxCPP shipboxes = 10;
  inline int shipboxes_size() const;
  inline void clear_shipboxes();
  static const int kShipboxesFieldNumber = 10;
  inline const ::ProtoNPCUser::ShippingBoxCPP& shipboxes(int index) const;
  inline ::ProtoNPCUser::ShippingBoxCPP* mutable_shipboxes(int index);
  inline ::ProtoNPCUser::ShippingBoxCPP* add_shipboxes();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::ShippingBoxCPP >&
      shipboxes() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::ShippingBoxCPP >*
      mutable_shipboxes();
  
  // required .ProtoNPCUser.FriendlyTreeCPP friendlytree = 11;
  inline bool has_friendlytree() const;
  inline void clear_friendlytree();
  static const int kFriendlytreeFieldNumber = 11;
  inline const ::ProtoNPCUser::FriendlyTreeCPP& friendlytree() const;
  inline ::ProtoNPCUser::FriendlyTreeCPP* mutable_friendlytree();
  inline ::ProtoNPCUser::FriendlyTreeCPP* release_friendlytree();
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.NPCUser)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_shopstatus();
  inline void clear_has_shopstatus();
  inline void set_has_shipping();
  inline void clear_has_shipping();
  inline void set_has_friendlytree();
  inline void clear_has_friendlytree();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoNPCUser::Base* base_;
  ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::BuildingCPP > builds_;
  ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::CropLandCPP > cropland_;
  ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::OthProduceCPP > equipments_;
  ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::AnimalCPP > animals_;
  ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::EquipmentStarCPP > equipmentstars_;
  ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FruitCPP > fruits_;
  ::ProtoNPCUser::ShippingCPP* shipping_;
  ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::ShippingBoxCPP > shipboxes_;
  ::ProtoNPCUser::FriendlyTreeCPP* friendlytree_;
  ::google::protobuf::uint32 shopstatus_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static NPCUser* default_instance_;
};
// -------------------------------------------------------------------

class GetNPCShopReq : public ::google::protobuf::Message {
 public:
  GetNPCShopReq();
  virtual ~GetNPCShopReq();
  
  GetNPCShopReq(const GetNPCShopReq& from);
  
  inline GetNPCShopReq& operator=(const GetNPCShopReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNPCShopReq& default_instance();
  
  void Swap(GetNPCShopReq* other);
  
  // implements Message ----------------------------------------------
  
  GetNPCShopReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetNPCShopReq& from);
  void MergeFrom(const GetNPCShopReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.GetNPCShopReq)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static GetNPCShopReq* default_instance_;
};
// -------------------------------------------------------------------

class GetNPCShopResp : public ::google::protobuf::Message {
 public:
  GetNPCShopResp();
  virtual ~GetNPCShopResp();
  
  GetNPCShopResp(const GetNPCShopResp& from);
  
  inline GetNPCShopResp& operator=(const GetNPCShopResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNPCShopResp& default_instance();
  
  void Swap(GetNPCShopResp* other);
  
  // implements Message ----------------------------------------------
  
  GetNPCShopResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetNPCShopResp& from);
  void MergeFrom(const GetNPCShopResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoNPCUser.NPCShopCPP shop = 1;
  inline int shop_size() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 1;
  inline const ::ProtoNPCUser::NPCShopCPP& shop(int index) const;
  inline ::ProtoNPCUser::NPCShopCPP* mutable_shop(int index);
  inline ::ProtoNPCUser::NPCShopCPP* add_shop();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::NPCShopCPP >&
      shop() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::NPCShopCPP >*
      mutable_shop();
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.GetNPCShopResp)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::NPCShopCPP > shop_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static GetNPCShopResp* default_instance_;
};
// -------------------------------------------------------------------

class PurchaseReq : public ::google::protobuf::Message {
 public:
  PurchaseReq();
  virtual ~PurchaseReq();
  
  PurchaseReq(const PurchaseReq& from);
  
  inline PurchaseReq& operator=(const PurchaseReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PurchaseReq& default_instance();
  
  void Swap(PurchaseReq* other);
  
  // implements Message ----------------------------------------------
  
  PurchaseReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PurchaseReq& from);
  void MergeFrom(const PurchaseReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.PurchaseReq)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 ud_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static PurchaseReq* default_instance_;
};
// -------------------------------------------------------------------

class PurchaseResp : public ::google::protobuf::Message {
 public:
  PurchaseResp();
  virtual ~PurchaseResp();
  
  PurchaseResp(const PurchaseResp& from);
  
  inline PurchaseResp& operator=(const PurchaseResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PurchaseResp& default_instance();
  
  void Swap(PurchaseResp* other);
  
  // implements Message ----------------------------------------------
  
  PurchaseResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PurchaseResp& from);
  void MergeFrom(const PurchaseResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .DataCommon.CommonItemsCPP commons = 1;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 1;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  
  // required .ProtoNPCUser.NPCShopCPP npcshop = 2;
  inline bool has_npcshop() const;
  inline void clear_npcshop();
  static const int kNpcshopFieldNumber = 2;
  inline const ::ProtoNPCUser::NPCShopCPP& npcshop() const;
  inline ::ProtoNPCUser::NPCShopCPP* mutable_npcshop();
  inline ::ProtoNPCUser::NPCShopCPP* release_npcshop();
  
  // @@protoc_insertion_point(class_scope:ProtoNPCUser.PurchaseResp)
 private:
  inline void set_has_commons();
  inline void clear_has_commons();
  inline void set_has_npcshop();
  inline void clear_has_npcshop();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DataCommon::CommonItemsCPP* commons_;
  ::ProtoNPCUser::NPCShopCPP* npcshop_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoNPCUser_2eproto();
  friend void protobuf_AssignDesc_ProtoNPCUser_2eproto();
  friend void protobuf_ShutdownFile_ProtoNPCUser_2eproto();
  
  void InitAsDefaultInstance();
  static PurchaseResp* default_instance_;
};
// ===================================================================


// ===================================================================

// Base

// required uint32 uid = 1;
inline bool Base::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Base::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Base::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Base::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Base::uid() const {
  return uid_;
}
inline void Base::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 registerPlatform = 2;
inline bool Base::has_registerplatform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Base::set_has_registerplatform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Base::clear_has_registerplatform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Base::clear_registerplatform() {
  registerplatform_ = 0u;
  clear_has_registerplatform();
}
inline ::google::protobuf::uint32 Base::registerplatform() const {
  return registerplatform_;
}
inline void Base::set_registerplatform(::google::protobuf::uint32 value) {
  set_has_registerplatform();
  registerplatform_ = value;
}

// required uint32 registerTime = 3;
inline bool Base::has_registertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Base::set_has_registertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Base::clear_has_registertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Base::clear_registertime() {
  registertime_ = 0u;
  clear_has_registertime();
}
inline ::google::protobuf::uint32 Base::registertime() const {
  return registertime_;
}
inline void Base::set_registertime(::google::protobuf::uint32 value) {
  set_has_registertime();
  registertime_ = value;
}

// required uint32 lastLoginPlatform = 4;
inline bool Base::has_lastloginplatform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Base::set_has_lastloginplatform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Base::clear_has_lastloginplatform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Base::clear_lastloginplatform() {
  lastloginplatform_ = 0u;
  clear_has_lastloginplatform();
}
inline ::google::protobuf::uint32 Base::lastloginplatform() const {
  return lastloginplatform_;
}
inline void Base::set_lastloginplatform(::google::protobuf::uint32 value) {
  set_has_lastloginplatform();
  lastloginplatform_ = value;
}

// required uint32 lastLoginTime = 5;
inline bool Base::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Base::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Base::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Base::clear_lastlogintime() {
  lastlogintime_ = 0u;
  clear_has_lastlogintime();
}
inline ::google::protobuf::uint32 Base::lastlogintime() const {
  return lastlogintime_;
}
inline void Base::set_lastlogintime(::google::protobuf::uint32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// required uint32 loginTimes = 6;
inline bool Base::has_logintimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Base::set_has_logintimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Base::clear_has_logintimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Base::clear_logintimes() {
  logintimes_ = 0u;
  clear_has_logintimes();
}
inline ::google::protobuf::uint32 Base::logintimes() const {
  return logintimes_;
}
inline void Base::set_logintimes(::google::protobuf::uint32 value) {
  set_has_logintimes();
  logintimes_ = value;
}

// required uint32 loginDays = 7;
inline bool Base::has_logindays() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Base::set_has_logindays() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Base::clear_has_logindays() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Base::clear_logindays() {
  logindays_ = 0u;
  clear_has_logindays();
}
inline ::google::protobuf::uint32 Base::logindays() const {
  return logindays_;
}
inline void Base::set_logindays(::google::protobuf::uint32 value) {
  set_has_logindays();
  logindays_ = value;
}

// required uint32 lastActiveTime = 8;
inline bool Base::has_lastactivetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Base::set_has_lastactivetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Base::clear_has_lastactivetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Base::clear_lastactivetime() {
  lastactivetime_ = 0u;
  clear_has_lastactivetime();
}
inline ::google::protobuf::uint32 Base::lastactivetime() const {
  return lastactivetime_;
}
inline void Base::set_lastactivetime(::google::protobuf::uint32 value) {
  set_has_lastactivetime();
  lastactivetime_ = value;
}

// required uint32 lastOffTime = 9;
inline bool Base::has_lastofftime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Base::set_has_lastofftime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Base::clear_has_lastofftime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Base::clear_lastofftime() {
  lastofftime_ = 0u;
  clear_has_lastofftime();
}
inline ::google::protobuf::uint32 Base::lastofftime() const {
  return lastofftime_;
}
inline void Base::set_lastofftime(::google::protobuf::uint32 value) {
  set_has_lastofftime();
  lastofftime_ = value;
}

// required uint32 forbidTs = 10;
inline bool Base::has_forbidts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Base::set_has_forbidts() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Base::clear_has_forbidts() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Base::clear_forbidts() {
  forbidts_ = 0u;
  clear_has_forbidts();
}
inline ::google::protobuf::uint32 Base::forbidts() const {
  return forbidts_;
}
inline void Base::set_forbidts(::google::protobuf::uint32 value) {
  set_has_forbidts();
  forbidts_ = value;
}

// required bytes forbidReason = 11;
inline bool Base::has_forbidreason() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Base::set_has_forbidreason() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Base::clear_has_forbidreason() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Base::clear_forbidreason() {
  if (forbidreason_ != &::google::protobuf::internal::kEmptyString) {
    forbidreason_->clear();
  }
  clear_has_forbidreason();
}
inline const ::std::string& Base::forbidreason() const {
  return *forbidreason_;
}
inline void Base::set_forbidreason(const ::std::string& value) {
  set_has_forbidreason();
  if (forbidreason_ == &::google::protobuf::internal::kEmptyString) {
    forbidreason_ = new ::std::string;
  }
  forbidreason_->assign(value);
}
inline void Base::set_forbidreason(const char* value) {
  set_has_forbidreason();
  if (forbidreason_ == &::google::protobuf::internal::kEmptyString) {
    forbidreason_ = new ::std::string;
  }
  forbidreason_->assign(value);
}
inline void Base::set_forbidreason(const void* value, size_t size) {
  set_has_forbidreason();
  if (forbidreason_ == &::google::protobuf::internal::kEmptyString) {
    forbidreason_ = new ::std::string;
  }
  forbidreason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Base::mutable_forbidreason() {
  set_has_forbidreason();
  if (forbidreason_ == &::google::protobuf::internal::kEmptyString) {
    forbidreason_ = new ::std::string;
  }
  return forbidreason_;
}
inline ::std::string* Base::release_forbidreason() {
  clear_has_forbidreason();
  if (forbidreason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = forbidreason_;
    forbidreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 tutorialStage = 12;
inline bool Base::has_tutorialstage() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Base::set_has_tutorialstage() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Base::clear_has_tutorialstage() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Base::clear_tutorialstage() {
  tutorialstage_ = 0u;
  clear_has_tutorialstage();
}
inline ::google::protobuf::uint32 Base::tutorialstage() const {
  return tutorialstage_;
}
inline void Base::set_tutorialstage(::google::protobuf::uint32 value) {
  set_has_tutorialstage();
  tutorialstage_ = value;
}

// required bytes name = 13;
inline bool Base::has_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Base::set_has_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Base::clear_has_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Base::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Base::name() const {
  return *name_;
}
inline void Base::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Base::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Base::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Base::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Base::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes fig = 14;
inline bool Base::has_fig() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Base::set_has_fig() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Base::clear_has_fig() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Base::clear_fig() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& Base::fig() const {
  return *fig_;
}
inline void Base::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void Base::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void Base::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Base::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  return fig_;
}
inline ::std::string* Base::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 exp = 15;
inline bool Base::has_exp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Base::set_has_exp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Base::clear_has_exp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Base::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 Base::exp() const {
  return exp_;
}
inline void Base::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 level = 16;
inline bool Base::has_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Base::set_has_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Base::clear_has_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Base::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Base::level() const {
  return level_;
}
inline void Base::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 acccharge = 17;
inline bool Base::has_acccharge() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Base::set_has_acccharge() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Base::clear_has_acccharge() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Base::clear_acccharge() {
  acccharge_ = 0u;
  clear_has_acccharge();
}
inline ::google::protobuf::uint32 Base::acccharge() const {
  return acccharge_;
}
inline void Base::set_acccharge(::google::protobuf::uint32 value) {
  set_has_acccharge();
  acccharge_ = value;
}

// required uint32 viplevel = 18;
inline bool Base::has_viplevel() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Base::set_has_viplevel() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Base::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Base::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 Base::viplevel() const {
  return viplevel_;
}
inline void Base::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// required uint32 cash = 19;
inline bool Base::has_cash() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Base::set_has_cash() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Base::clear_has_cash() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Base::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 Base::cash() const {
  return cash_;
}
inline void Base::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
}

// required uint32 coin = 20;
inline bool Base::has_coin() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Base::set_has_coin() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Base::clear_has_coin() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Base::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 Base::coin() const {
  return coin_;
}
inline void Base::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// required uint32 firstRecharge = 21;
inline bool Base::has_firstrecharge() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Base::set_has_firstrecharge() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Base::clear_has_firstrecharge() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Base::clear_firstrecharge() {
  firstrecharge_ = 0u;
  clear_has_firstrecharge();
}
inline ::google::protobuf::uint32 Base::firstrecharge() const {
  return firstrecharge_;
}
inline void Base::set_firstrecharge(::google::protobuf::uint32 value) {
  set_has_firstrecharge();
  firstrecharge_ = value;
}

// required uint32 allianceId = 22;
inline bool Base::has_allianceid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Base::set_has_allianceid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Base::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Base::clear_allianceid() {
  allianceid_ = 0u;
  clear_has_allianceid();
}
inline ::google::protobuf::uint32 Base::allianceid() const {
  return allianceid_;
}
inline void Base::set_allianceid(::google::protobuf::uint32 value) {
  set_has_allianceid();
  allianceid_ = value;
}

// required bytes barrier = 23;
inline bool Base::has_barrier() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Base::set_has_barrier() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Base::clear_has_barrier() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Base::clear_barrier() {
  if (barrier_ != &::google::protobuf::internal::kEmptyString) {
    barrier_->clear();
  }
  clear_has_barrier();
}
inline const ::std::string& Base::barrier() const {
  return *barrier_;
}
inline void Base::set_barrier(const ::std::string& value) {
  set_has_barrier();
  if (barrier_ == &::google::protobuf::internal::kEmptyString) {
    barrier_ = new ::std::string;
  }
  barrier_->assign(value);
}
inline void Base::set_barrier(const char* value) {
  set_has_barrier();
  if (barrier_ == &::google::protobuf::internal::kEmptyString) {
    barrier_ = new ::std::string;
  }
  barrier_->assign(value);
}
inline void Base::set_barrier(const void* value, size_t size) {
  set_has_barrier();
  if (barrier_ == &::google::protobuf::internal::kEmptyString) {
    barrier_ = new ::std::string;
  }
  barrier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Base::mutable_barrier() {
  set_has_barrier();
  if (barrier_ == &::google::protobuf::internal::kEmptyString) {
    barrier_ = new ::std::string;
  }
  return barrier_;
}
inline ::std::string* Base::release_barrier() {
  clear_has_barrier();
  if (barrier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = barrier_;
    barrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 lastcreateadts = 24;
inline bool Base::has_lastcreateadts() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Base::set_has_lastcreateadts() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Base::clear_has_lastcreateadts() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Base::clear_lastcreateadts() {
  lastcreateadts_ = 0u;
  clear_has_lastcreateadts();
}
inline ::google::protobuf::uint32 Base::lastcreateadts() const {
  return lastcreateadts_;
}
inline void Base::set_lastcreateadts(::google::protobuf::uint32 value) {
  set_has_lastcreateadts();
  lastcreateadts_ = value;
}

// required uint32 allianAllowTs = 25;
inline bool Base::has_allianallowts() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Base::set_has_allianallowts() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Base::clear_has_allianallowts() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Base::clear_allianallowts() {
  allianallowts_ = 0u;
  clear_has_allianallowts();
}
inline ::google::protobuf::uint32 Base::allianallowts() const {
  return allianallowts_;
}
inline void Base::set_allianallowts(::google::protobuf::uint32 value) {
  set_has_allianallowts();
  allianallowts_ = value;
}

// required uint32 nextDonationTs = 26;
inline bool Base::has_nextdonationts() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Base::set_has_nextdonationts() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Base::clear_has_nextdonationts() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Base::clear_nextdonationts() {
  nextdonationts_ = 0u;
  clear_has_nextdonationts();
}
inline ::google::protobuf::uint32 Base::nextdonationts() const {
  return nextdonationts_;
}
inline void Base::set_nextdonationts(::google::protobuf::uint32 value) {
  set_has_nextdonationts();
  nextdonationts_ = value;
}

// required uint32 helptimes = 27;
inline bool Base::has_helptimes() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Base::set_has_helptimes() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Base::clear_has_helptimes() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Base::clear_helptimes() {
  helptimes_ = 0u;
  clear_has_helptimes();
}
inline ::google::protobuf::uint32 Base::helptimes() const {
  return helptimes_;
}
inline void Base::set_helptimes(::google::protobuf::uint32 value) {
  set_has_helptimes();
  helptimes_ = value;
}

// required uint32 viprewarddailygiftts = 28;
inline bool Base::has_viprewarddailygiftts() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Base::set_has_viprewarddailygiftts() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Base::clear_has_viprewarddailygiftts() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Base::clear_viprewarddailygiftts() {
  viprewarddailygiftts_ = 0u;
  clear_has_viprewarddailygiftts();
}
inline ::google::protobuf::uint32 Base::viprewarddailygiftts() const {
  return viprewarddailygiftts_;
}
inline void Base::set_viprewarddailygiftts(::google::protobuf::uint32 value) {
  set_has_viprewarddailygiftts();
  viprewarddailygiftts_ = value;
}

// required uint32 vipdailyspeedproductcnt = 29;
inline bool Base::has_vipdailyspeedproductcnt() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Base::set_has_vipdailyspeedproductcnt() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Base::clear_has_vipdailyspeedproductcnt() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Base::clear_vipdailyspeedproductcnt() {
  vipdailyspeedproductcnt_ = 0u;
  clear_has_vipdailyspeedproductcnt();
}
inline ::google::protobuf::uint32 Base::vipdailyspeedproductcnt() const {
  return vipdailyspeedproductcnt_;
}
inline void Base::set_vipdailyspeedproductcnt(::google::protobuf::uint32 value) {
  set_has_vipdailyspeedproductcnt();
  vipdailyspeedproductcnt_ = value;
}

// required uint32 vipdailyremoveordercdcnt = 30;
inline bool Base::has_vipdailyremoveordercdcnt() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Base::set_has_vipdailyremoveordercdcnt() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Base::clear_has_vipdailyremoveordercdcnt() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Base::clear_vipdailyremoveordercdcnt() {
  vipdailyremoveordercdcnt_ = 0u;
  clear_has_vipdailyremoveordercdcnt();
}
inline ::google::protobuf::uint32 Base::vipdailyremoveordercdcnt() const {
  return vipdailyremoveordercdcnt_;
}
inline void Base::set_vipdailyremoveordercdcnt(::google::protobuf::uint32 value) {
  set_has_vipdailyremoveordercdcnt();
  vipdailyremoveordercdcnt_ = value;
}

// required uint32 switchStatus = 31;
inline bool Base::has_switchstatus() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Base::set_has_switchstatus() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Base::clear_has_switchstatus() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Base::clear_switchstatus() {
  switchstatus_ = 0u;
  clear_has_switchstatus();
}
inline ::google::protobuf::uint32 Base::switchstatus() const {
  return switchstatus_;
}
inline void Base::set_switchstatus(::google::protobuf::uint32 value) {
  set_has_switchstatus();
  switchstatus_ = value;
}

// -------------------------------------------------------------------

// BuildingCPP

// required uint32 ud = 1;
inline bool BuildingCPP::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildingCPP::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildingCPP::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildingCPP::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 BuildingCPP::ud() const {
  return ud_;
}
inline void BuildingCPP::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
}

// required uint32 buildId = 2;
inline bool BuildingCPP::has_buildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildingCPP::set_has_buildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildingCPP::clear_has_buildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildingCPP::clear_buildid() {
  buildid_ = 0u;
  clear_has_buildid();
}
inline ::google::protobuf::uint32 BuildingCPP::buildid() const {
  return buildid_;
}
inline void BuildingCPP::set_buildid(::google::protobuf::uint32 value) {
  set_has_buildid();
  buildid_ = value;
}

// repeated uint32 position = 3;
inline int BuildingCPP::position_size() const {
  return position_.size();
}
inline void BuildingCPP::clear_position() {
  position_.Clear();
}
inline ::google::protobuf::uint32 BuildingCPP::position(int index) const {
  return position_.Get(index);
}
inline void BuildingCPP::set_position(int index, ::google::protobuf::uint32 value) {
  position_.Set(index, value);
}
inline void BuildingCPP::add_position(::google::protobuf::uint32 value) {
  position_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BuildingCPP::position() const {
  return position_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BuildingCPP::mutable_position() {
  return &position_;
}

// required uint32 direct = 4;
inline bool BuildingCPP::has_direct() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuildingCPP::set_has_direct() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuildingCPP::clear_has_direct() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuildingCPP::clear_direct() {
  direct_ = 0u;
  clear_has_direct();
}
inline ::google::protobuf::uint32 BuildingCPP::direct() const {
  return direct_;
}
inline void BuildingCPP::set_direct(::google::protobuf::uint32 value) {
  set_has_direct();
  direct_ = value;
}

// required uint32 doneTime = 5;
inline bool BuildingCPP::has_donetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuildingCPP::set_has_donetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuildingCPP::clear_has_donetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuildingCPP::clear_donetime() {
  donetime_ = 0u;
  clear_has_donetime();
}
inline ::google::protobuf::uint32 BuildingCPP::donetime() const {
  return donetime_;
}
inline void BuildingCPP::set_donetime(::google::protobuf::uint32 value) {
  set_has_donetime();
  donetime_ = value;
}

// required uint32 level = 6;
inline bool BuildingCPP::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuildingCPP::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuildingCPP::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuildingCPP::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 BuildingCPP::level() const {
  return level_;
}
inline void BuildingCPP::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// CropLandCPP

// required uint32 ud = 1;
inline bool CropLandCPP::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropLandCPP::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropLandCPP::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropLandCPP::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 CropLandCPP::ud() const {
  return ud_;
}
inline void CropLandCPP::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
}

// required uint32 plant = 2;
inline bool CropLandCPP::has_plant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CropLandCPP::set_has_plant() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CropLandCPP::clear_has_plant() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CropLandCPP::clear_plant() {
  plant_ = 0u;
  clear_has_plant();
}
inline ::google::protobuf::uint32 CropLandCPP::plant() const {
  return plant_;
}
inline void CropLandCPP::set_plant(::google::protobuf::uint32 value) {
  set_has_plant();
  plant_ = value;
}

// required uint32 status = 3;
inline bool CropLandCPP::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CropLandCPP::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CropLandCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CropLandCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CropLandCPP::status() const {
  return status_;
}
inline void CropLandCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 harvestTime = 4;
inline bool CropLandCPP::has_harvesttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CropLandCPP::set_has_harvesttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CropLandCPP::clear_has_harvesttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CropLandCPP::clear_harvesttime() {
  harvesttime_ = 0u;
  clear_has_harvesttime();
}
inline ::google::protobuf::uint32 CropLandCPP::harvesttime() const {
  return harvesttime_;
}
inline void CropLandCPP::set_harvesttime(::google::protobuf::uint32 value) {
  set_has_harvesttime();
  harvesttime_ = value;
}

// -------------------------------------------------------------------

// OthProduceCPP

// required uint32 ud = 1;
inline bool OthProduceCPP::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OthProduceCPP::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OthProduceCPP::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OthProduceCPP::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 OthProduceCPP::ud() const {
  return ud_;
}
inline void OthProduceCPP::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
}

// required uint32 status = 2;
inline bool OthProduceCPP::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OthProduceCPP::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OthProduceCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OthProduceCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 OthProduceCPP::status() const {
  return status_;
}
inline void OthProduceCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// AnimalCPP

// required uint32 ud = 1;
inline bool AnimalCPP::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnimalCPP::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnimalCPP::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnimalCPP::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 AnimalCPP::ud() const {
  return ud_;
}
inline void AnimalCPP::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
}

// required uint32 residenceUd = 2;
inline bool AnimalCPP::has_residenceud() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnimalCPP::set_has_residenceud() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnimalCPP::clear_has_residenceud() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnimalCPP::clear_residenceud() {
  residenceud_ = 0u;
  clear_has_residenceud();
}
inline ::google::protobuf::uint32 AnimalCPP::residenceud() const {
  return residenceud_;
}
inline void AnimalCPP::set_residenceud(::google::protobuf::uint32 value) {
  set_has_residenceud();
  residenceud_ = value;
}

// required uint32 animalId = 3;
inline bool AnimalCPP::has_animalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnimalCPP::set_has_animalid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnimalCPP::clear_has_animalid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnimalCPP::clear_animalid() {
  animalid_ = 0u;
  clear_has_animalid();
}
inline ::google::protobuf::uint32 AnimalCPP::animalid() const {
  return animalid_;
}
inline void AnimalCPP::set_animalid(::google::protobuf::uint32 value) {
  set_has_animalid();
  animalid_ = value;
}

// required uint32 status = 4;
inline bool AnimalCPP::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnimalCPP::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnimalCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnimalCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 AnimalCPP::status() const {
  return status_;
}
inline void AnimalCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 fullTime = 5;
inline bool AnimalCPP::has_fulltime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnimalCPP::set_has_fulltime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnimalCPP::clear_has_fulltime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnimalCPP::clear_fulltime() {
  fulltime_ = 0u;
  clear_has_fulltime();
}
inline ::google::protobuf::uint32 AnimalCPP::fulltime() const {
  return fulltime_;
}
inline void AnimalCPP::set_fulltime(::google::protobuf::uint32 value) {
  set_has_fulltime();
  fulltime_ = value;
}

// -------------------------------------------------------------------

// EquipmentStarCPP

// required uint32 id = 1;
inline bool EquipmentStarCPP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentStarCPP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentStarCPP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentStarCPP::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 EquipmentStarCPP::id() const {
  return id_;
}
inline void EquipmentStarCPP::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 star = 2;
inline bool EquipmentStarCPP::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentStarCPP::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentStarCPP::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentStarCPP::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 EquipmentStarCPP::star() const {
  return star_;
}
inline void EquipmentStarCPP::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 usedtime = 3;
inline bool EquipmentStarCPP::has_usedtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipmentStarCPP::set_has_usedtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipmentStarCPP::clear_has_usedtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipmentStarCPP::clear_usedtime() {
  usedtime_ = 0u;
  clear_has_usedtime();
}
inline ::google::protobuf::uint32 EquipmentStarCPP::usedtime() const {
  return usedtime_;
}
inline void EquipmentStarCPP::set_usedtime(::google::protobuf::uint32 value) {
  set_has_usedtime();
  usedtime_ = value;
}

// -------------------------------------------------------------------

// FruitCPP

// required uint32 ud = 1;
inline bool FruitCPP::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FruitCPP::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FruitCPP::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FruitCPP::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 FruitCPP::ud() const {
  return ud_;
}
inline void FruitCPP::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
}

// required uint32 treeid = 2;
inline bool FruitCPP::has_treeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FruitCPP::set_has_treeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FruitCPP::clear_has_treeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FruitCPP::clear_treeid() {
  treeid_ = 0u;
  clear_has_treeid();
}
inline ::google::protobuf::uint32 FruitCPP::treeid() const {
  return treeid_;
}
inline void FruitCPP::set_treeid(::google::protobuf::uint32 value) {
  set_has_treeid();
  treeid_ = value;
}

// required uint32 status = 3;
inline bool FruitCPP::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FruitCPP::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FruitCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FruitCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 FruitCPP::status() const {
  return status_;
}
inline void FruitCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 stage = 4;
inline bool FruitCPP::has_stage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FruitCPP::set_has_stage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FruitCPP::clear_has_stage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FruitCPP::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 FruitCPP::stage() const {
  return stage_;
}
inline void FruitCPP::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// required uint32 fruitLeftNum = 5;
inline bool FruitCPP::has_fruitleftnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FruitCPP::set_has_fruitleftnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FruitCPP::clear_has_fruitleftnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FruitCPP::clear_fruitleftnum() {
  fruitleftnum_ = 0u;
  clear_has_fruitleftnum();
}
inline ::google::protobuf::uint32 FruitCPP::fruitleftnum() const {
  return fruitleftnum_;
}
inline void FruitCPP::set_fruitleftnum(::google::protobuf::uint32 value) {
  set_has_fruitleftnum();
  fruitleftnum_ = value;
}

// required uint32 harvestTime = 6;
inline bool FruitCPP::has_harvesttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FruitCPP::set_has_harvesttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FruitCPP::clear_has_harvesttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FruitCPP::clear_harvesttime() {
  harvesttime_ = 0u;
  clear_has_harvesttime();
}
inline ::google::protobuf::uint32 FruitCPP::harvesttime() const {
  return harvesttime_;
}
inline void FruitCPP::set_harvesttime(::google::protobuf::uint32 value) {
  set_has_harvesttime();
  harvesttime_ = value;
}

// optional bytes name = 7;
inline bool FruitCPP::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FruitCPP::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FruitCPP::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FruitCPP::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FruitCPP::name() const {
  return *name_;
}
inline void FruitCPP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FruitCPP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FruitCPP::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FruitCPP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FruitCPP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes fig = 8;
inline bool FruitCPP::has_fig() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FruitCPP::set_has_fig() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FruitCPP::clear_has_fig() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FruitCPP::clear_fig() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& FruitCPP::fig() const {
  return *fig_;
}
inline void FruitCPP::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void FruitCPP::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void FruitCPP::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FruitCPP::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  return fig_;
}
inline ::std::string* FruitCPP::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ShippingCPP

// required uint32 badge = 1;
inline bool ShippingCPP::has_badge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShippingCPP::set_has_badge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShippingCPP::clear_has_badge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShippingCPP::clear_badge() {
  badge_ = 0u;
  clear_has_badge();
}
inline ::google::protobuf::uint32 ShippingCPP::badge() const {
  return badge_;
}
inline void ShippingCPP::set_badge(::google::protobuf::uint32 value) {
  set_has_badge();
  badge_ = value;
}

// required uint32 unlockEndts = 2;
inline bool ShippingCPP::has_unlockendts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShippingCPP::set_has_unlockendts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShippingCPP::clear_has_unlockendts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShippingCPP::clear_unlockendts() {
  unlockendts_ = 0u;
  clear_has_unlockendts();
}
inline ::google::protobuf::uint32 ShippingCPP::unlockendts() const {
  return unlockendts_;
}
inline void ShippingCPP::set_unlockendts(::google::protobuf::uint32 value) {
  set_has_unlockendts();
  unlockendts_ = value;
}

// required uint32 arriveTs = 3;
inline bool ShippingCPP::has_arrivets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShippingCPP::set_has_arrivets() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShippingCPP::clear_has_arrivets() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShippingCPP::clear_arrivets() {
  arrivets_ = 0u;
  clear_has_arrivets();
}
inline ::google::protobuf::uint32 ShippingCPP::arrivets() const {
  return arrivets_;
}
inline void ShippingCPP::set_arrivets(::google::protobuf::uint32 value) {
  set_has_arrivets();
  arrivets_ = value;
}

// required uint32 publicAidTimes = 4;
inline bool ShippingCPP::has_publicaidtimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShippingCPP::set_has_publicaidtimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShippingCPP::clear_has_publicaidtimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShippingCPP::clear_publicaidtimes() {
  publicaidtimes_ = 0u;
  clear_has_publicaidtimes();
}
inline ::google::protobuf::uint32 ShippingCPP::publicaidtimes() const {
  return publicaidtimes_;
}
inline void ShippingCPP::set_publicaidtimes(::google::protobuf::uint32 value) {
  set_has_publicaidtimes();
  publicaidtimes_ = value;
}

// required uint32 commercialAidTimes = 5;
inline bool ShippingCPP::has_commercialaidtimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShippingCPP::set_has_commercialaidtimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShippingCPP::clear_has_commercialaidtimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShippingCPP::clear_commercialaidtimes() {
  commercialaidtimes_ = 0u;
  clear_has_commercialaidtimes();
}
inline ::google::protobuf::uint32 ShippingCPP::commercialaidtimes() const {
  return commercialaidtimes_;
}
inline void ShippingCPP::set_commercialaidtimes(::google::protobuf::uint32 value) {
  set_has_commercialaidtimes();
  commercialaidtimes_ = value;
}

// required uint32 status = 6;
inline bool ShippingCPP::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShippingCPP::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShippingCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShippingCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 ShippingCPP::status() const {
  return status_;
}
inline void ShippingCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 playStatus = 7;
inline bool ShippingCPP::has_playstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShippingCPP::set_has_playstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShippingCPP::clear_has_playstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShippingCPP::clear_playstatus() {
  playstatus_ = 0u;
  clear_has_playstatus();
}
inline ::google::protobuf::uint32 ShippingCPP::playstatus() const {
  return playstatus_;
}
inline void ShippingCPP::set_playstatus(::google::protobuf::uint32 value) {
  set_has_playstatus();
  playstatus_ = value;
}

// -------------------------------------------------------------------

// ShippingBoxCPP

// required uint32 boxid = 1;
inline bool ShippingBoxCPP::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShippingBoxCPP::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShippingBoxCPP::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShippingBoxCPP::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 ShippingBoxCPP::boxid() const {
  return boxid_;
}
inline void ShippingBoxCPP::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// required uint32 propsid = 2;
inline bool ShippingBoxCPP::has_propsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShippingBoxCPP::set_has_propsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShippingBoxCPP::clear_has_propsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShippingBoxCPP::clear_propsid() {
  propsid_ = 0u;
  clear_has_propsid();
}
inline ::google::protobuf::uint32 ShippingBoxCPP::propsid() const {
  return propsid_;
}
inline void ShippingBoxCPP::set_propsid(::google::protobuf::uint32 value) {
  set_has_propsid();
  propsid_ = value;
}

// required uint32 count = 3;
inline bool ShippingBoxCPP::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShippingBoxCPP::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShippingBoxCPP::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShippingBoxCPP::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ShippingBoxCPP::count() const {
  return count_;
}
inline void ShippingBoxCPP::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required uint32 aidStatus = 4;
inline bool ShippingBoxCPP::has_aidstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShippingBoxCPP::set_has_aidstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShippingBoxCPP::clear_has_aidstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShippingBoxCPP::clear_aidstatus() {
  aidstatus_ = 0u;
  clear_has_aidstatus();
}
inline ::google::protobuf::uint32 ShippingBoxCPP::aidstatus() const {
  return aidstatus_;
}
inline void ShippingBoxCPP::set_aidstatus(::google::protobuf::uint32 value) {
  set_has_aidstatus();
  aidstatus_ = value;
}

// required uint32 status = 5;
inline bool ShippingBoxCPP::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShippingBoxCPP::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShippingBoxCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShippingBoxCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 ShippingBoxCPP::status() const {
  return status_;
}
inline void ShippingBoxCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// required uint32 coin = 6;
inline bool ShippingBoxCPP::has_coin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShippingBoxCPP::set_has_coin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShippingBoxCPP::clear_has_coin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShippingBoxCPP::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 ShippingBoxCPP::coin() const {
  return coin_;
}
inline void ShippingBoxCPP::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// required uint32 exp = 7;
inline bool ShippingBoxCPP::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShippingBoxCPP::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShippingBoxCPP::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShippingBoxCPP::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 ShippingBoxCPP::exp() const {
  return exp_;
}
inline void ShippingBoxCPP::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional bytes fig = 8;
inline bool ShippingBoxCPP::has_fig() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShippingBoxCPP::set_has_fig() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShippingBoxCPP::clear_has_fig() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShippingBoxCPP::clear_fig() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& ShippingBoxCPP::fig() const {
  return *fig_;
}
inline void ShippingBoxCPP::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void ShippingBoxCPP::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void ShippingBoxCPP::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShippingBoxCPP::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  return fig_;
}
inline ::std::string* ShippingBoxCPP::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes name = 9;
inline bool ShippingBoxCPP::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShippingBoxCPP::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShippingBoxCPP::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShippingBoxCPP::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ShippingBoxCPP::name() const {
  return *name_;
}
inline void ShippingBoxCPP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ShippingBoxCPP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ShippingBoxCPP::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShippingBoxCPP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ShippingBoxCPP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NPCShopCPP

// required uint32 ud = 1;
inline bool NPCShopCPP::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NPCShopCPP::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NPCShopCPP::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NPCShopCPP::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 NPCShopCPP::ud() const {
  return ud_;
}
inline void NPCShopCPP::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
}

// required uint32 propsid = 2;
inline bool NPCShopCPP::has_propsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NPCShopCPP::set_has_propsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NPCShopCPP::clear_has_propsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NPCShopCPP::clear_propsid() {
  propsid_ = 0u;
  clear_has_propsid();
}
inline ::google::protobuf::uint32 NPCShopCPP::propsid() const {
  return propsid_;
}
inline void NPCShopCPP::set_propsid(::google::protobuf::uint32 value) {
  set_has_propsid();
  propsid_ = value;
}

// required uint32 propscnt = 3;
inline bool NPCShopCPP::has_propscnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NPCShopCPP::set_has_propscnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NPCShopCPP::clear_has_propscnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NPCShopCPP::clear_propscnt() {
  propscnt_ = 0u;
  clear_has_propscnt();
}
inline ::google::protobuf::uint32 NPCShopCPP::propscnt() const {
  return propscnt_;
}
inline void NPCShopCPP::set_propscnt(::google::protobuf::uint32 value) {
  set_has_propscnt();
  propscnt_ = value;
}

// required uint32 sellflag = 4;
inline bool NPCShopCPP::has_sellflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NPCShopCPP::set_has_sellflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NPCShopCPP::clear_has_sellflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NPCShopCPP::clear_sellflag() {
  sellflag_ = 0u;
  clear_has_sellflag();
}
inline ::google::protobuf::uint32 NPCShopCPP::sellflag() const {
  return sellflag_;
}
inline void NPCShopCPP::set_sellflag(::google::protobuf::uint32 value) {
  set_has_sellflag();
  sellflag_ = value;
}

// -------------------------------------------------------------------

// FriendlyTreeBasicCPP

// required uint32 id = 1;
inline bool FriendlyTreeBasicCPP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendlyTreeBasicCPP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendlyTreeBasicCPP::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FriendlyTreeBasicCPP::id() const {
  return id_;
}
inline void FriendlyTreeBasicCPP::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 othuid = 2;
inline bool FriendlyTreeBasicCPP::has_othuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_othuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendlyTreeBasicCPP::clear_has_othuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendlyTreeBasicCPP::clear_othuid() {
  othuid_ = 0u;
  clear_has_othuid();
}
inline ::google::protobuf::uint32 FriendlyTreeBasicCPP::othuid() const {
  return othuid_;
}
inline void FriendlyTreeBasicCPP::set_othuid(::google::protobuf::uint32 value) {
  set_has_othuid();
  othuid_ = value;
}

// required bytes name = 3;
inline bool FriendlyTreeBasicCPP::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendlyTreeBasicCPP::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendlyTreeBasicCPP::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FriendlyTreeBasicCPP::name() const {
  return *name_;
}
inline void FriendlyTreeBasicCPP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendlyTreeBasicCPP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FriendlyTreeBasicCPP::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendlyTreeBasicCPP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FriendlyTreeBasicCPP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes head = 4;
inline bool FriendlyTreeBasicCPP::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_head() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendlyTreeBasicCPP::clear_has_head() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendlyTreeBasicCPP::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& FriendlyTreeBasicCPP::head() const {
  return *head_;
}
inline void FriendlyTreeBasicCPP::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void FriendlyTreeBasicCPP::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void FriendlyTreeBasicCPP::set_head(const void* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendlyTreeBasicCPP::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* FriendlyTreeBasicCPP::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 ts = 5;
inline bool FriendlyTreeBasicCPP::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FriendlyTreeBasicCPP::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FriendlyTreeBasicCPP::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FriendlyTreeBasicCPP::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 FriendlyTreeBasicCPP::ts() const {
  return ts_;
}
inline void FriendlyTreeBasicCPP::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
}

// -------------------------------------------------------------------

// FriendlyTreeStatusCPP

// required uint32 treestatus = 1;
inline bool FriendlyTreeStatusCPP::has_treestatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendlyTreeStatusCPP::set_has_treestatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendlyTreeStatusCPP::clear_has_treestatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendlyTreeStatusCPP::clear_treestatus() {
  treestatus_ = 0u;
  clear_has_treestatus();
}
inline ::google::protobuf::uint32 FriendlyTreeStatusCPP::treestatus() const {
  return treestatus_;
}
inline void FriendlyTreeStatusCPP::set_treestatus(::google::protobuf::uint32 value) {
  set_has_treestatus();
  treestatus_ = value;
}

// optional uint32 nextwaterts = 2;
inline bool FriendlyTreeStatusCPP::has_nextwaterts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendlyTreeStatusCPP::set_has_nextwaterts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendlyTreeStatusCPP::clear_has_nextwaterts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendlyTreeStatusCPP::clear_nextwaterts() {
  nextwaterts_ = 0u;
  clear_has_nextwaterts();
}
inline ::google::protobuf::uint32 FriendlyTreeStatusCPP::nextwaterts() const {
  return nextwaterts_;
}
inline void FriendlyTreeStatusCPP::set_nextwaterts(::google::protobuf::uint32 value) {
  set_has_nextwaterts();
  nextwaterts_ = value;
}

// -------------------------------------------------------------------

// FriendlyTreeCPP

// repeated .ProtoNPCUser.FriendlyTreeBasicCPP basictreeinfo = 1;
inline int FriendlyTreeCPP::basictreeinfo_size() const {
  return basictreeinfo_.size();
}
inline void FriendlyTreeCPP::clear_basictreeinfo() {
  basictreeinfo_.Clear();
}
inline const ::ProtoNPCUser::FriendlyTreeBasicCPP& FriendlyTreeCPP::basictreeinfo(int index) const {
  return basictreeinfo_.Get(index);
}
inline ::ProtoNPCUser::FriendlyTreeBasicCPP* FriendlyTreeCPP::mutable_basictreeinfo(int index) {
  return basictreeinfo_.Mutable(index);
}
inline ::ProtoNPCUser::FriendlyTreeBasicCPP* FriendlyTreeCPP::add_basictreeinfo() {
  return basictreeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FriendlyTreeBasicCPP >&
FriendlyTreeCPP::basictreeinfo() const {
  return basictreeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FriendlyTreeBasicCPP >*
FriendlyTreeCPP::mutable_basictreeinfo() {
  return &basictreeinfo_;
}

// required .ProtoNPCUser.FriendlyTreeStatusCPP statustreeinfo = 2;
inline bool FriendlyTreeCPP::has_statustreeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendlyTreeCPP::set_has_statustreeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendlyTreeCPP::clear_has_statustreeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendlyTreeCPP::clear_statustreeinfo() {
  if (statustreeinfo_ != NULL) statustreeinfo_->::ProtoNPCUser::FriendlyTreeStatusCPP::Clear();
  clear_has_statustreeinfo();
}
inline const ::ProtoNPCUser::FriendlyTreeStatusCPP& FriendlyTreeCPP::statustreeinfo() const {
  return statustreeinfo_ != NULL ? *statustreeinfo_ : *default_instance_->statustreeinfo_;
}
inline ::ProtoNPCUser::FriendlyTreeStatusCPP* FriendlyTreeCPP::mutable_statustreeinfo() {
  set_has_statustreeinfo();
  if (statustreeinfo_ == NULL) statustreeinfo_ = new ::ProtoNPCUser::FriendlyTreeStatusCPP;
  return statustreeinfo_;
}
inline ::ProtoNPCUser::FriendlyTreeStatusCPP* FriendlyTreeCPP::release_statustreeinfo() {
  clear_has_statustreeinfo();
  ::ProtoNPCUser::FriendlyTreeStatusCPP* temp = statustreeinfo_;
  statustreeinfo_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// RequestNPCUser

// -------------------------------------------------------------------

// NPCUser

// required .ProtoNPCUser.Base base = 1;
inline bool NPCUser::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NPCUser::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NPCUser::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NPCUser::clear_base() {
  if (base_ != NULL) base_->::ProtoNPCUser::Base::Clear();
  clear_has_base();
}
inline const ::ProtoNPCUser::Base& NPCUser::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::ProtoNPCUser::Base* NPCUser::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::ProtoNPCUser::Base;
  return base_;
}
inline ::ProtoNPCUser::Base* NPCUser::release_base() {
  clear_has_base();
  ::ProtoNPCUser::Base* temp = base_;
  base_ = NULL;
  return temp;
}

// repeated .ProtoNPCUser.BuildingCPP builds = 2;
inline int NPCUser::builds_size() const {
  return builds_.size();
}
inline void NPCUser::clear_builds() {
  builds_.Clear();
}
inline const ::ProtoNPCUser::BuildingCPP& NPCUser::builds(int index) const {
  return builds_.Get(index);
}
inline ::ProtoNPCUser::BuildingCPP* NPCUser::mutable_builds(int index) {
  return builds_.Mutable(index);
}
inline ::ProtoNPCUser::BuildingCPP* NPCUser::add_builds() {
  return builds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::BuildingCPP >&
NPCUser::builds() const {
  return builds_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::BuildingCPP >*
NPCUser::mutable_builds() {
  return &builds_;
}

// repeated .ProtoNPCUser.CropLandCPP cropland = 3;
inline int NPCUser::cropland_size() const {
  return cropland_.size();
}
inline void NPCUser::clear_cropland() {
  cropland_.Clear();
}
inline const ::ProtoNPCUser::CropLandCPP& NPCUser::cropland(int index) const {
  return cropland_.Get(index);
}
inline ::ProtoNPCUser::CropLandCPP* NPCUser::mutable_cropland(int index) {
  return cropland_.Mutable(index);
}
inline ::ProtoNPCUser::CropLandCPP* NPCUser::add_cropland() {
  return cropland_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::CropLandCPP >&
NPCUser::cropland() const {
  return cropland_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::CropLandCPP >*
NPCUser::mutable_cropland() {
  return &cropland_;
}

// repeated .ProtoNPCUser.OthProduceCPP equipments = 4;
inline int NPCUser::equipments_size() const {
  return equipments_.size();
}
inline void NPCUser::clear_equipments() {
  equipments_.Clear();
}
inline const ::ProtoNPCUser::OthProduceCPP& NPCUser::equipments(int index) const {
  return equipments_.Get(index);
}
inline ::ProtoNPCUser::OthProduceCPP* NPCUser::mutable_equipments(int index) {
  return equipments_.Mutable(index);
}
inline ::ProtoNPCUser::OthProduceCPP* NPCUser::add_equipments() {
  return equipments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::OthProduceCPP >&
NPCUser::equipments() const {
  return equipments_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::OthProduceCPP >*
NPCUser::mutable_equipments() {
  return &equipments_;
}

// repeated .ProtoNPCUser.AnimalCPP animals = 5;
inline int NPCUser::animals_size() const {
  return animals_.size();
}
inline void NPCUser::clear_animals() {
  animals_.Clear();
}
inline const ::ProtoNPCUser::AnimalCPP& NPCUser::animals(int index) const {
  return animals_.Get(index);
}
inline ::ProtoNPCUser::AnimalCPP* NPCUser::mutable_animals(int index) {
  return animals_.Mutable(index);
}
inline ::ProtoNPCUser::AnimalCPP* NPCUser::add_animals() {
  return animals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::AnimalCPP >&
NPCUser::animals() const {
  return animals_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::AnimalCPP >*
NPCUser::mutable_animals() {
  return &animals_;
}

// repeated .ProtoNPCUser.EquipmentStarCPP equipmentstars = 6;
inline int NPCUser::equipmentstars_size() const {
  return equipmentstars_.size();
}
inline void NPCUser::clear_equipmentstars() {
  equipmentstars_.Clear();
}
inline const ::ProtoNPCUser::EquipmentStarCPP& NPCUser::equipmentstars(int index) const {
  return equipmentstars_.Get(index);
}
inline ::ProtoNPCUser::EquipmentStarCPP* NPCUser::mutable_equipmentstars(int index) {
  return equipmentstars_.Mutable(index);
}
inline ::ProtoNPCUser::EquipmentStarCPP* NPCUser::add_equipmentstars() {
  return equipmentstars_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::EquipmentStarCPP >&
NPCUser::equipmentstars() const {
  return equipmentstars_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::EquipmentStarCPP >*
NPCUser::mutable_equipmentstars() {
  return &equipmentstars_;
}

// repeated .ProtoNPCUser.FruitCPP fruits = 7;
inline int NPCUser::fruits_size() const {
  return fruits_.size();
}
inline void NPCUser::clear_fruits() {
  fruits_.Clear();
}
inline const ::ProtoNPCUser::FruitCPP& NPCUser::fruits(int index) const {
  return fruits_.Get(index);
}
inline ::ProtoNPCUser::FruitCPP* NPCUser::mutable_fruits(int index) {
  return fruits_.Mutable(index);
}
inline ::ProtoNPCUser::FruitCPP* NPCUser::add_fruits() {
  return fruits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FruitCPP >&
NPCUser::fruits() const {
  return fruits_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::FruitCPP >*
NPCUser::mutable_fruits() {
  return &fruits_;
}

// required uint32 shopStatus = 8;
inline bool NPCUser::has_shopstatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NPCUser::set_has_shopstatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NPCUser::clear_has_shopstatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NPCUser::clear_shopstatus() {
  shopstatus_ = 0u;
  clear_has_shopstatus();
}
inline ::google::protobuf::uint32 NPCUser::shopstatus() const {
  return shopstatus_;
}
inline void NPCUser::set_shopstatus(::google::protobuf::uint32 value) {
  set_has_shopstatus();
  shopstatus_ = value;
}

// optional .ProtoNPCUser.ShippingCPP shipping = 9;
inline bool NPCUser::has_shipping() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NPCUser::set_has_shipping() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NPCUser::clear_has_shipping() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NPCUser::clear_shipping() {
  if (shipping_ != NULL) shipping_->::ProtoNPCUser::ShippingCPP::Clear();
  clear_has_shipping();
}
inline const ::ProtoNPCUser::ShippingCPP& NPCUser::shipping() const {
  return shipping_ != NULL ? *shipping_ : *default_instance_->shipping_;
}
inline ::ProtoNPCUser::ShippingCPP* NPCUser::mutable_shipping() {
  set_has_shipping();
  if (shipping_ == NULL) shipping_ = new ::ProtoNPCUser::ShippingCPP;
  return shipping_;
}
inline ::ProtoNPCUser::ShippingCPP* NPCUser::release_shipping() {
  clear_has_shipping();
  ::ProtoNPCUser::ShippingCPP* temp = shipping_;
  shipping_ = NULL;
  return temp;
}

// repeated .ProtoNPCUser.ShippingBoxCPP shipboxes = 10;
inline int NPCUser::shipboxes_size() const {
  return shipboxes_.size();
}
inline void NPCUser::clear_shipboxes() {
  shipboxes_.Clear();
}
inline const ::ProtoNPCUser::ShippingBoxCPP& NPCUser::shipboxes(int index) const {
  return shipboxes_.Get(index);
}
inline ::ProtoNPCUser::ShippingBoxCPP* NPCUser::mutable_shipboxes(int index) {
  return shipboxes_.Mutable(index);
}
inline ::ProtoNPCUser::ShippingBoxCPP* NPCUser::add_shipboxes() {
  return shipboxes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::ShippingBoxCPP >&
NPCUser::shipboxes() const {
  return shipboxes_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::ShippingBoxCPP >*
NPCUser::mutable_shipboxes() {
  return &shipboxes_;
}

// required .ProtoNPCUser.FriendlyTreeCPP friendlytree = 11;
inline bool NPCUser::has_friendlytree() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NPCUser::set_has_friendlytree() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NPCUser::clear_has_friendlytree() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NPCUser::clear_friendlytree() {
  if (friendlytree_ != NULL) friendlytree_->::ProtoNPCUser::FriendlyTreeCPP::Clear();
  clear_has_friendlytree();
}
inline const ::ProtoNPCUser::FriendlyTreeCPP& NPCUser::friendlytree() const {
  return friendlytree_ != NULL ? *friendlytree_ : *default_instance_->friendlytree_;
}
inline ::ProtoNPCUser::FriendlyTreeCPP* NPCUser::mutable_friendlytree() {
  set_has_friendlytree();
  if (friendlytree_ == NULL) friendlytree_ = new ::ProtoNPCUser::FriendlyTreeCPP;
  return friendlytree_;
}
inline ::ProtoNPCUser::FriendlyTreeCPP* NPCUser::release_friendlytree() {
  clear_has_friendlytree();
  ::ProtoNPCUser::FriendlyTreeCPP* temp = friendlytree_;
  friendlytree_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GetNPCShopReq

// -------------------------------------------------------------------

// GetNPCShopResp

// repeated .ProtoNPCUser.NPCShopCPP shop = 1;
inline int GetNPCShopResp::shop_size() const {
  return shop_.size();
}
inline void GetNPCShopResp::clear_shop() {
  shop_.Clear();
}
inline const ::ProtoNPCUser::NPCShopCPP& GetNPCShopResp::shop(int index) const {
  return shop_.Get(index);
}
inline ::ProtoNPCUser::NPCShopCPP* GetNPCShopResp::mutable_shop(int index) {
  return shop_.Mutable(index);
}
inline ::ProtoNPCUser::NPCShopCPP* GetNPCShopResp::add_shop() {
  return shop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::NPCShopCPP >&
GetNPCShopResp::shop() const {
  return shop_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoNPCUser::NPCShopCPP >*
GetNPCShopResp::mutable_shop() {
  return &shop_;
}

// -------------------------------------------------------------------

// PurchaseReq

// required uint32 ud = 1;
inline bool PurchaseReq::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PurchaseReq::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PurchaseReq::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PurchaseReq::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 PurchaseReq::ud() const {
  return ud_;
}
inline void PurchaseReq::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
}

// -------------------------------------------------------------------

// PurchaseResp

// required .DataCommon.CommonItemsCPP commons = 1;
inline bool PurchaseResp::has_commons() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PurchaseResp::set_has_commons() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PurchaseResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PurchaseResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& PurchaseResp::commons() const {
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* PurchaseResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* PurchaseResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}

// required .ProtoNPCUser.NPCShopCPP npcshop = 2;
inline bool PurchaseResp::has_npcshop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PurchaseResp::set_has_npcshop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PurchaseResp::clear_has_npcshop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PurchaseResp::clear_npcshop() {
  if (npcshop_ != NULL) npcshop_->::ProtoNPCUser::NPCShopCPP::Clear();
  clear_has_npcshop();
}
inline const ::ProtoNPCUser::NPCShopCPP& PurchaseResp::npcshop() const {
  return npcshop_ != NULL ? *npcshop_ : *default_instance_->npcshop_;
}
inline ::ProtoNPCUser::NPCShopCPP* PurchaseResp::mutable_npcshop() {
  set_has_npcshop();
  if (npcshop_ == NULL) npcshop_ = new ::ProtoNPCUser::NPCShopCPP;
  return npcshop_;
}
inline ::ProtoNPCUser::NPCShopCPP* PurchaseResp::release_npcshop() {
  clear_has_npcshop();
  ::ProtoNPCUser::NPCShopCPP* temp = npcshop_;
  npcshop_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoNPCUser

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoNPCUser_2eproto__INCLUDED
