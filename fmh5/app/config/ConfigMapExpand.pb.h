// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigMapExpand.proto

#ifndef PROTOBUF_ConfigMapExpand_2eproto__INCLUDED
#define PROTOBUF_ConfigMapExpand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "CommonGiftConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace ConfigMapExpand {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConfigMapExpand_2eproto();
void protobuf_AssignDesc_ConfigMapExpand_2eproto();
void protobuf_ShutdownFile_ConfigMapExpand_2eproto();

class UnLockLandCPP;
class MapExpandCPP;
class UnlockLandCostCPP;
class MapExpandInfo;

// ===================================================================

class UnLockLandCPP : public ::google::protobuf::Message {
 public:
  UnLockLandCPP();
  virtual ~UnLockLandCPP();
  
  UnLockLandCPP(const UnLockLandCPP& from);
  
  inline UnLockLandCPP& operator=(const UnLockLandCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnLockLandCPP& default_instance();
  
  void Swap(UnLockLandCPP* other);
  
  // implements Message ----------------------------------------------
  
  UnLockLandCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnLockLandCPP& from);
  void MergeFrom(const UnLockLandCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // repeated uint32 pos = 2;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos(int index) const;
  inline void set_pos(int index, ::google::protobuf::uint32 value);
  inline void add_pos(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pos();
  
  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // repeated uint32 footprint = 4;
  inline int footprint_size() const;
  inline void clear_footprint();
  static const int kFootprintFieldNumber = 4;
  inline ::google::protobuf::uint32 footprint(int index) const;
  inline void set_footprint(int index, ::google::protobuf::uint32 value);
  inline void add_footprint(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      footprint() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_footprint();
  
  // @@protoc_insertion_point(class_scope:ConfigMapExpand.UnLockLandCPP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pos_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > footprint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ConfigMapExpand_2eproto();
  friend void protobuf_AssignDesc_ConfigMapExpand_2eproto();
  friend void protobuf_ShutdownFile_ConfigMapExpand_2eproto();
  
  void InitAsDefaultInstance();
  static UnLockLandCPP* default_instance_;
};
// -------------------------------------------------------------------

class MapExpandCPP : public ::google::protobuf::Message {
 public:
  MapExpandCPP();
  virtual ~MapExpandCPP();
  
  MapExpandCPP(const MapExpandCPP& from);
  
  inline MapExpandCPP& operator=(const MapExpandCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapExpandCPP& default_instance();
  
  void Swap(MapExpandCPP* other);
  
  // implements Message ----------------------------------------------
  
  MapExpandCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapExpandCPP& from);
  void MergeFrom(const MapExpandCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 unLockLevel = 1;
  inline bool has_unlocklevel() const;
  inline void clear_unlocklevel();
  static const int kUnLockLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 unlocklevel() const;
  inline void set_unlocklevel(::google::protobuf::uint32 value);
  
  // repeated .ConfigMapExpand.UnLockLandCPP land = 2;
  inline int land_size() const;
  inline void clear_land();
  static const int kLandFieldNumber = 2;
  inline const ::ConfigMapExpand::UnLockLandCPP& land(int index) const;
  inline ::ConfigMapExpand::UnLockLandCPP* mutable_land(int index);
  inline ::ConfigMapExpand::UnLockLandCPP* add_land();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnLockLandCPP >&
      land() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnLockLandCPP >*
      mutable_land();
  
  // @@protoc_insertion_point(class_scope:ConfigMapExpand.MapExpandCPP)
 private:
  inline void set_has_unlocklevel();
  inline void clear_has_unlocklevel();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnLockLandCPP > land_;
  ::google::protobuf::uint32 unlocklevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ConfigMapExpand_2eproto();
  friend void protobuf_AssignDesc_ConfigMapExpand_2eproto();
  friend void protobuf_ShutdownFile_ConfigMapExpand_2eproto();
  
  void InitAsDefaultInstance();
  static MapExpandCPP* default_instance_;
};
// -------------------------------------------------------------------

class UnlockLandCostCPP : public ::google::protobuf::Message {
 public:
  UnlockLandCostCPP();
  virtual ~UnlockLandCostCPP();
  
  UnlockLandCostCPP(const UnlockLandCostCPP& from);
  
  inline UnlockLandCostCPP& operator=(const UnlockLandCostCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockLandCostCPP& default_instance();
  
  void Swap(UnlockLandCostCPP* other);
  
  // implements Message ----------------------------------------------
  
  UnlockLandCostCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockLandCostCPP& from);
  void MergeFrom(const UnlockLandCostCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline const ::CommonGiftConfig::CommonModifyItem& cost() const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_cost();
  inline ::CommonGiftConfig::CommonModifyItem* release_cost();
  
  // @@protoc_insertion_point(class_scope:ConfigMapExpand.UnlockLandCostCPP)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cost();
  inline void clear_has_cost();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CommonGiftConfig::CommonModifyItem* cost_;
  ::google::protobuf::uint32 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ConfigMapExpand_2eproto();
  friend void protobuf_AssignDesc_ConfigMapExpand_2eproto();
  friend void protobuf_ShutdownFile_ConfigMapExpand_2eproto();
  
  void InitAsDefaultInstance();
  static UnlockLandCostCPP* default_instance_;
};
// -------------------------------------------------------------------

class MapExpandInfo : public ::google::protobuf::Message {
 public:
  MapExpandInfo();
  virtual ~MapExpandInfo();
  
  MapExpandInfo(const MapExpandInfo& from);
  
  inline MapExpandInfo& operator=(const MapExpandInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapExpandInfo& default_instance();
  
  void Swap(MapExpandInfo* other);
  
  // implements Message ----------------------------------------------
  
  MapExpandInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapExpandInfo& from);
  void MergeFrom(const MapExpandInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ConfigMapExpand.MapExpandCPP landInfo = 1;
  inline bool has_landinfo() const;
  inline void clear_landinfo();
  static const int kLandInfoFieldNumber = 1;
  inline const ::ConfigMapExpand::MapExpandCPP& landinfo() const;
  inline ::ConfigMapExpand::MapExpandCPP* mutable_landinfo();
  inline ::ConfigMapExpand::MapExpandCPP* release_landinfo();
  
  // repeated .ConfigMapExpand.UnlockLandCostCPP unLockCost = 2;
  inline int unlockcost_size() const;
  inline void clear_unlockcost();
  static const int kUnLockCostFieldNumber = 2;
  inline const ::ConfigMapExpand::UnlockLandCostCPP& unlockcost(int index) const;
  inline ::ConfigMapExpand::UnlockLandCostCPP* mutable_unlockcost(int index);
  inline ::ConfigMapExpand::UnlockLandCostCPP* add_unlockcost();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnlockLandCostCPP >&
      unlockcost() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnlockLandCostCPP >*
      mutable_unlockcost();
  
  // @@protoc_insertion_point(class_scope:ConfigMapExpand.MapExpandInfo)
 private:
  inline void set_has_landinfo();
  inline void clear_has_landinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ConfigMapExpand::MapExpandCPP* landinfo_;
  ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnlockLandCostCPP > unlockcost_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ConfigMapExpand_2eproto();
  friend void protobuf_AssignDesc_ConfigMapExpand_2eproto();
  friend void protobuf_ShutdownFile_ConfigMapExpand_2eproto();
  
  void InitAsDefaultInstance();
  static MapExpandInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// UnLockLandCPP

// required uint32 id = 1;
inline bool UnLockLandCPP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnLockLandCPP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnLockLandCPP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnLockLandCPP::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UnLockLandCPP::id() const {
  return id_;
}
inline void UnLockLandCPP::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated uint32 pos = 2;
inline int UnLockLandCPP::pos_size() const {
  return pos_.size();
}
inline void UnLockLandCPP::clear_pos() {
  pos_.Clear();
}
inline ::google::protobuf::uint32 UnLockLandCPP::pos(int index) const {
  return pos_.Get(index);
}
inline void UnLockLandCPP::set_pos(int index, ::google::protobuf::uint32 value) {
  pos_.Set(index, value);
}
inline void UnLockLandCPP::add_pos(::google::protobuf::uint32 value) {
  pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UnLockLandCPP::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UnLockLandCPP::mutable_pos() {
  return &pos_;
}

// required uint32 type = 3;
inline bool UnLockLandCPP::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnLockLandCPP::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnLockLandCPP::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnLockLandCPP::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 UnLockLandCPP::type() const {
  return type_;
}
inline void UnLockLandCPP::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated uint32 footprint = 4;
inline int UnLockLandCPP::footprint_size() const {
  return footprint_.size();
}
inline void UnLockLandCPP::clear_footprint() {
  footprint_.Clear();
}
inline ::google::protobuf::uint32 UnLockLandCPP::footprint(int index) const {
  return footprint_.Get(index);
}
inline void UnLockLandCPP::set_footprint(int index, ::google::protobuf::uint32 value) {
  footprint_.Set(index, value);
}
inline void UnLockLandCPP::add_footprint(::google::protobuf::uint32 value) {
  footprint_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UnLockLandCPP::footprint() const {
  return footprint_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UnLockLandCPP::mutable_footprint() {
  return &footprint_;
}

// -------------------------------------------------------------------

// MapExpandCPP

// required uint32 unLockLevel = 1;
inline bool MapExpandCPP::has_unlocklevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapExpandCPP::set_has_unlocklevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapExpandCPP::clear_has_unlocklevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapExpandCPP::clear_unlocklevel() {
  unlocklevel_ = 0u;
  clear_has_unlocklevel();
}
inline ::google::protobuf::uint32 MapExpandCPP::unlocklevel() const {
  return unlocklevel_;
}
inline void MapExpandCPP::set_unlocklevel(::google::protobuf::uint32 value) {
  set_has_unlocklevel();
  unlocklevel_ = value;
}

// repeated .ConfigMapExpand.UnLockLandCPP land = 2;
inline int MapExpandCPP::land_size() const {
  return land_.size();
}
inline void MapExpandCPP::clear_land() {
  land_.Clear();
}
inline const ::ConfigMapExpand::UnLockLandCPP& MapExpandCPP::land(int index) const {
  return land_.Get(index);
}
inline ::ConfigMapExpand::UnLockLandCPP* MapExpandCPP::mutable_land(int index) {
  return land_.Mutable(index);
}
inline ::ConfigMapExpand::UnLockLandCPP* MapExpandCPP::add_land() {
  return land_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnLockLandCPP >&
MapExpandCPP::land() const {
  return land_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnLockLandCPP >*
MapExpandCPP::mutable_land() {
  return &land_;
}

// -------------------------------------------------------------------

// UnlockLandCostCPP

// required uint32 type = 1;
inline bool UnlockLandCostCPP::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockLandCostCPP::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockLandCostCPP::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockLandCostCPP::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 UnlockLandCostCPP::type() const {
  return type_;
}
inline void UnlockLandCostCPP::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required .CommonGiftConfig.CommonModifyItem cost = 2;
inline bool UnlockLandCostCPP::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockLandCostCPP::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockLandCostCPP::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockLandCostCPP::clear_cost() {
  if (cost_ != NULL) cost_->::CommonGiftConfig::CommonModifyItem::Clear();
  clear_has_cost();
}
inline const ::CommonGiftConfig::CommonModifyItem& UnlockLandCostCPP::cost() const {
  return cost_ != NULL ? *cost_ : *default_instance_->cost_;
}
inline ::CommonGiftConfig::CommonModifyItem* UnlockLandCostCPP::mutable_cost() {
  set_has_cost();
  if (cost_ == NULL) cost_ = new ::CommonGiftConfig::CommonModifyItem;
  return cost_;
}
inline ::CommonGiftConfig::CommonModifyItem* UnlockLandCostCPP::release_cost() {
  clear_has_cost();
  ::CommonGiftConfig::CommonModifyItem* temp = cost_;
  cost_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MapExpandInfo

// required .ConfigMapExpand.MapExpandCPP landInfo = 1;
inline bool MapExpandInfo::has_landinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapExpandInfo::set_has_landinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapExpandInfo::clear_has_landinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapExpandInfo::clear_landinfo() {
  if (landinfo_ != NULL) landinfo_->::ConfigMapExpand::MapExpandCPP::Clear();
  clear_has_landinfo();
}
inline const ::ConfigMapExpand::MapExpandCPP& MapExpandInfo::landinfo() const {
  return landinfo_ != NULL ? *landinfo_ : *default_instance_->landinfo_;
}
inline ::ConfigMapExpand::MapExpandCPP* MapExpandInfo::mutable_landinfo() {
  set_has_landinfo();
  if (landinfo_ == NULL) landinfo_ = new ::ConfigMapExpand::MapExpandCPP;
  return landinfo_;
}
inline ::ConfigMapExpand::MapExpandCPP* MapExpandInfo::release_landinfo() {
  clear_has_landinfo();
  ::ConfigMapExpand::MapExpandCPP* temp = landinfo_;
  landinfo_ = NULL;
  return temp;
}

// repeated .ConfigMapExpand.UnlockLandCostCPP unLockCost = 2;
inline int MapExpandInfo::unlockcost_size() const {
  return unlockcost_.size();
}
inline void MapExpandInfo::clear_unlockcost() {
  unlockcost_.Clear();
}
inline const ::ConfigMapExpand::UnlockLandCostCPP& MapExpandInfo::unlockcost(int index) const {
  return unlockcost_.Get(index);
}
inline ::ConfigMapExpand::UnlockLandCostCPP* MapExpandInfo::mutable_unlockcost(int index) {
  return unlockcost_.Mutable(index);
}
inline ::ConfigMapExpand::UnlockLandCostCPP* MapExpandInfo::add_unlockcost() {
  return unlockcost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnlockLandCostCPP >&
MapExpandInfo::unlockcost() const {
  return unlockcost_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigMapExpand::UnlockLandCostCPP >*
MapExpandInfo::mutable_unlockcost() {
  return &unlockcost_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigMapExpand

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConfigMapExpand_2eproto__INCLUDED
