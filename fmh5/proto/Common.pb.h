// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef PROTOBUF_Common_2eproto__INCLUDED
#define PROTOBUF_Common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Common_2eproto();
void protobuf_AssignDesc_Common_2eproto();
void protobuf_ShutdownFile_Common_2eproto();

class Login;
class Kick;
class ChangeName;
class ReplyChangeName;
class Pay;
class ReplyPay;
class NoticePay;
class ShutDown;

// ===================================================================

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();
  
  Login(const Login& from);
  
  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();
  
  void Swap(Login* other);
  
  // implements Message ----------------------------------------------
  
  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  
  // required string openkey = 3;
  inline bool has_openkey() const;
  inline void clear_openkey();
  static const int kOpenkeyFieldNumber = 3;
  inline const ::std::string& openkey() const;
  inline void set_openkey(const ::std::string& value);
  inline void set_openkey(const char* value);
  inline void set_openkey(const char* value, size_t size);
  inline ::std::string* mutable_openkey();
  inline ::std::string* release_openkey();
  
  // required uint32 ts = 4;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 4;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);
  
  // required string sig = 5;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 5;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  
  // required bool isnew = 6;
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsnewFieldNumber = 6;
  inline bool isnew() const;
  inline void set_isnew(bool value);
  
  // required uint32 platform = 7;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 7;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);
  
  // optional bytes fig = 8;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 8;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  
  // optional bytes name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 isBlueVip = 10;
  inline bool has_isbluevip() const;
  inline void clear_isbluevip();
  static const int kIsBlueVipFieldNumber = 10;
  inline ::google::protobuf::uint32 isbluevip() const;
  inline void set_isbluevip(::google::protobuf::uint32 value);
  
  // optional uint32 isBlueYearVip = 11;
  inline bool has_isblueyearvip() const;
  inline void clear_isblueyearvip();
  static const int kIsBlueYearVipFieldNumber = 11;
  inline ::google::protobuf::uint32 isblueyearvip() const;
  inline void set_isblueyearvip(::google::protobuf::uint32 value);
  
  // optional uint32 isSuperBlueVip = 12;
  inline bool has_issuperbluevip() const;
  inline void clear_issuperbluevip();
  static const int kIsSuperBlueVipFieldNumber = 12;
  inline ::google::protobuf::uint32 issuperbluevip() const;
  inline void set_issuperbluevip(::google::protobuf::uint32 value);
  
  // optional uint32 blueVipLevel = 13;
  inline bool has_blueviplevel() const;
  inline void clear_blueviplevel();
  static const int kBlueVipLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 blueviplevel() const;
  inline void set_blueviplevel(::google::protobuf::uint32 value);
  
  // optional bytes wxChannel = 14;
  inline bool has_wxchannel() const;
  inline void clear_wxchannel();
  static const int kWxChannelFieldNumber = 14;
  inline const ::std::string& wxchannel() const;
  inline void set_wxchannel(const ::std::string& value);
  inline void set_wxchannel(const char* value);
  inline void set_wxchannel(const void* value, size_t size);
  inline ::std::string* mutable_wxchannel();
  inline ::std::string* release_wxchannel();
  
  // @@protoc_insertion_point(class_scope:Common.Login)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_openkey();
  inline void clear_has_openkey();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_sig();
  inline void clear_has_sig();
  inline void set_has_isnew();
  inline void clear_has_isnew();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_fig();
  inline void clear_has_fig();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_isbluevip();
  inline void clear_has_isbluevip();
  inline void set_has_isblueyearvip();
  inline void clear_has_isblueyearvip();
  inline void set_has_issuperbluevip();
  inline void clear_has_issuperbluevip();
  inline void set_has_blueviplevel();
  inline void clear_has_blueviplevel();
  inline void set_has_wxchannel();
  inline void clear_has_wxchannel();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* openid_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 ts_;
  ::std::string* openkey_;
  ::std::string* sig_;
  bool isnew_;
  ::google::protobuf::uint32 platform_;
  ::std::string* fig_;
  ::std::string* name_;
  ::google::protobuf::uint32 isbluevip_;
  ::google::protobuf::uint32 isblueyearvip_;
  ::google::protobuf::uint32 issuperbluevip_;
  ::google::protobuf::uint32 blueviplevel_;
  ::std::string* wxchannel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();
  
  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class Kick : public ::google::protobuf::Message {
 public:
  Kick();
  virtual ~Kick();
  
  Kick(const Kick& from);
  
  inline Kick& operator=(const Kick& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Kick& default_instance();
  
  void Swap(Kick* other);
  
  // implements Message ----------------------------------------------
  
  Kick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Kick& from);
  void MergeFrom(const Kick& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  
  // @@protoc_insertion_point(class_scope:Common.Kick)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();
  
  void InitAsDefaultInstance();
  static Kick* default_instance_;
};
// -------------------------------------------------------------------

class ChangeName : public ::google::protobuf::Message {
 public:
  ChangeName();
  virtual ~ChangeName();
  
  ChangeName(const ChangeName& from);
  
  inline ChangeName& operator=(const ChangeName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeName& default_instance();
  
  void Swap(ChangeName* other);
  
  // implements Message ----------------------------------------------
  
  ChangeName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeName& from);
  void MergeFrom(const ChangeName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bytes fig = 3;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 3;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  
  // @@protoc_insertion_point(class_scope:Common.ChangeName)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* fig_;
  ::google::protobuf::uint32 uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();
  
  void InitAsDefaultInstance();
  static ChangeName* default_instance_;
};
// -------------------------------------------------------------------

class ReplyChangeName : public ::google::protobuf::Message {
 public:
  ReplyChangeName();
  virtual ~ReplyChangeName();
  
  ReplyChangeName(const ReplyChangeName& from);
  
  inline ReplyChangeName& operator=(const ReplyChangeName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyChangeName& default_instance();
  
  void Swap(ReplyChangeName* other);
  
  // implements Message ----------------------------------------------
  
  ReplyChangeName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyChangeName& from);
  void MergeFrom(const ReplyChangeName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bytes fig = 2;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 2;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  
  // @@protoc_insertion_point(class_scope:Common.ReplyChangeName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* fig_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();
  
  void InitAsDefaultInstance();
  static ReplyChangeName* default_instance_;
};
// -------------------------------------------------------------------

class Pay : public ::google::protobuf::Message {
 public:
  Pay();
  virtual ~Pay();
  
  Pay(const Pay& from);
  
  inline Pay& operator=(const Pay& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pay& default_instance();
  
  void Swap(Pay* other);
  
  // implements Message ----------------------------------------------
  
  Pay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pay& from);
  void MergeFrom(const Pay& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 cash = 2;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 2;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);
  
  // required uint32 ts = 3;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 3;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);
  
  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);
  
  // optional uint32 currency = 5;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 5;
  inline ::google::protobuf::uint32 currency() const;
  inline void set_currency(::google::protobuf::uint32 value);
  
  // optional bytes tradeNo = 6;
  inline bool has_tradeno() const;
  inline void clear_tradeno();
  static const int kTradeNoFieldNumber = 6;
  inline const ::std::string& tradeno() const;
  inline void set_tradeno(const ::std::string& value);
  inline void set_tradeno(const char* value);
  inline void set_tradeno(const void* value, size_t size);
  inline ::std::string* mutable_tradeno();
  inline ::std::string* release_tradeno();
  
  // optional bytes channelTradeNo = 7;
  inline bool has_channeltradeno() const;
  inline void clear_channeltradeno();
  static const int kChannelTradeNoFieldNumber = 7;
  inline const ::std::string& channeltradeno() const;
  inline void set_channeltradeno(const ::std::string& value);
  inline void set_channeltradeno(const char* value);
  inline void set_channeltradeno(const void* value, size_t size);
  inline ::std::string* mutable_channeltradeno();
  inline ::std::string* release_channeltradeno();
  
  // @@protoc_insertion_point(class_scope:Common.Pay)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_tradeno();
  inline void clear_has_tradeno();
  inline void set_has_channeltradeno();
  inline void clear_has_channeltradeno();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint32 ts_;
  ::google::protobuf::uint32 itemid_;
  ::std::string* tradeno_;
  ::std::string* channeltradeno_;
  ::google::protobuf::uint32 currency_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();
  
  void InitAsDefaultInstance();
  static Pay* default_instance_;
};
// -------------------------------------------------------------------

class ReplyPay : public ::google::protobuf::Message {
 public:
  ReplyPay();
  virtual ~ReplyPay();
  
  ReplyPay(const ReplyPay& from);
  
  inline ReplyPay& operator=(const ReplyPay& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyPay& default_instance();
  
  void Swap(ReplyPay* other);
  
  // implements Message ----------------------------------------------
  
  ReplyPay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyPay& from);
  void MergeFrom(const ReplyPay& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);
  
  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:Common.ReplyPay)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 ret_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();
  
  void InitAsDefaultInstance();
  static ReplyPay* default_instance_;
};
// -------------------------------------------------------------------

class NoticePay : public ::google::protobuf::Message {
 public:
  NoticePay();
  virtual ~NoticePay();
  
  NoticePay(const NoticePay& from);
  
  inline NoticePay& operator=(const NoticePay& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticePay& default_instance();
  
  void Swap(NoticePay* other);
  
  // implements Message ----------------------------------------------
  
  NoticePay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticePay& from);
  void MergeFrom(const NoticePay& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 cash = 1;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 1;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);
  
  // required uint32 viplevel = 2;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 2;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);
  
  // required uint32 accrecharge = 3;
  inline bool has_accrecharge() const;
  inline void clear_accrecharge();
  static const int kAccrechargeFieldNumber = 3;
  inline ::google::protobuf::uint32 accrecharge() const;
  inline void set_accrecharge(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Common.NoticePay)
 private:
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_accrecharge();
  inline void clear_has_accrecharge();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 accrecharge_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();
  
  void InitAsDefaultInstance();
  static NoticePay* default_instance_;
};
// -------------------------------------------------------------------

class ShutDown : public ::google::protobuf::Message {
 public:
  ShutDown();
  virtual ~ShutDown();
  
  ShutDown(const ShutDown& from);
  
  inline ShutDown& operator=(const ShutDown& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShutDown& default_instance();
  
  void Swap(ShutDown* other);
  
  // implements Message ----------------------------------------------
  
  ShutDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShutDown& from);
  void MergeFrom(const ShutDown& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 ts = 1;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 1;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);
  
  // required string sign = 2;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 2;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  
  // @@protoc_insertion_point(class_scope:Common.ShutDown)
 private:
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_sign();
  inline void clear_has_sign();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sign_;
  ::google::protobuf::uint32 ts_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();
  
  void InitAsDefaultInstance();
  static ShutDown* default_instance_;
};
// ===================================================================


// ===================================================================

// Login

// required uint32 uid = 1;
inline bool Login::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Login::uid() const {
  return uid_;
}
inline void Login::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required string openid = 2;
inline bool Login::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Login::openid() const {
  return *openid_;
}
inline void Login::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Login::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Login::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* Login::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string openkey = 3;
inline bool Login::has_openkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login::set_has_openkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login::clear_has_openkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login::clear_openkey() {
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    openkey_->clear();
  }
  clear_has_openkey();
}
inline const ::std::string& Login::openkey() const {
  return *openkey_;
}
inline void Login::set_openkey(const ::std::string& value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void Login::set_openkey(const char* value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void Login::set_openkey(const char* value, size_t size) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_openkey() {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  return openkey_;
}
inline ::std::string* Login::release_openkey() {
  clear_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openkey_;
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 ts = 4;
inline bool Login::has_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Login::set_has_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Login::clear_has_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Login::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 Login::ts() const {
  return ts_;
}
inline void Login::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
}

// required string sig = 5;
inline bool Login::has_sig() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Login::set_has_sig() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Login::clear_has_sig() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Login::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& Login::sig() const {
  return *sig_;
}
inline void Login::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void Login::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void Login::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* Login::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isnew = 6;
inline bool Login::has_isnew() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Login::set_has_isnew() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Login::clear_has_isnew() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Login::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
inline bool Login::isnew() const {
  return isnew_;
}
inline void Login::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
}

// required uint32 platform = 7;
inline bool Login::has_platform() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Login::set_has_platform() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Login::clear_has_platform() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Login::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 Login::platform() const {
  return platform_;
}
inline void Login::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
}

// optional bytes fig = 8;
inline bool Login::has_fig() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Login::set_has_fig() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Login::clear_has_fig() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Login::clear_fig() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& Login::fig() const {
  return *fig_;
}
inline void Login::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void Login::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void Login::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  return fig_;
}
inline ::std::string* Login::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes name = 9;
inline bool Login::has_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Login::set_has_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Login::clear_has_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Login::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Login::name() const {
  return *name_;
}
inline void Login::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Login::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Login::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Login::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 isBlueVip = 10;
inline bool Login::has_isbluevip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Login::set_has_isbluevip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Login::clear_has_isbluevip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Login::clear_isbluevip() {
  isbluevip_ = 0u;
  clear_has_isbluevip();
}
inline ::google::protobuf::uint32 Login::isbluevip() const {
  return isbluevip_;
}
inline void Login::set_isbluevip(::google::protobuf::uint32 value) {
  set_has_isbluevip();
  isbluevip_ = value;
}

// optional uint32 isBlueYearVip = 11;
inline bool Login::has_isblueyearvip() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Login::set_has_isblueyearvip() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Login::clear_has_isblueyearvip() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Login::clear_isblueyearvip() {
  isblueyearvip_ = 0u;
  clear_has_isblueyearvip();
}
inline ::google::protobuf::uint32 Login::isblueyearvip() const {
  return isblueyearvip_;
}
inline void Login::set_isblueyearvip(::google::protobuf::uint32 value) {
  set_has_isblueyearvip();
  isblueyearvip_ = value;
}

// optional uint32 isSuperBlueVip = 12;
inline bool Login::has_issuperbluevip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Login::set_has_issuperbluevip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Login::clear_has_issuperbluevip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Login::clear_issuperbluevip() {
  issuperbluevip_ = 0u;
  clear_has_issuperbluevip();
}
inline ::google::protobuf::uint32 Login::issuperbluevip() const {
  return issuperbluevip_;
}
inline void Login::set_issuperbluevip(::google::protobuf::uint32 value) {
  set_has_issuperbluevip();
  issuperbluevip_ = value;
}

// optional uint32 blueVipLevel = 13;
inline bool Login::has_blueviplevel() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Login::set_has_blueviplevel() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Login::clear_has_blueviplevel() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Login::clear_blueviplevel() {
  blueviplevel_ = 0u;
  clear_has_blueviplevel();
}
inline ::google::protobuf::uint32 Login::blueviplevel() const {
  return blueviplevel_;
}
inline void Login::set_blueviplevel(::google::protobuf::uint32 value) {
  set_has_blueviplevel();
  blueviplevel_ = value;
}

// optional bytes wxChannel = 14;
inline bool Login::has_wxchannel() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Login::set_has_wxchannel() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Login::clear_has_wxchannel() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Login::clear_wxchannel() {
  if (wxchannel_ != &::google::protobuf::internal::kEmptyString) {
    wxchannel_->clear();
  }
  clear_has_wxchannel();
}
inline const ::std::string& Login::wxchannel() const {
  return *wxchannel_;
}
inline void Login::set_wxchannel(const ::std::string& value) {
  set_has_wxchannel();
  if (wxchannel_ == &::google::protobuf::internal::kEmptyString) {
    wxchannel_ = new ::std::string;
  }
  wxchannel_->assign(value);
}
inline void Login::set_wxchannel(const char* value) {
  set_has_wxchannel();
  if (wxchannel_ == &::google::protobuf::internal::kEmptyString) {
    wxchannel_ = new ::std::string;
  }
  wxchannel_->assign(value);
}
inline void Login::set_wxchannel(const void* value, size_t size) {
  set_has_wxchannel();
  if (wxchannel_ == &::google::protobuf::internal::kEmptyString) {
    wxchannel_ = new ::std::string;
  }
  wxchannel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Login::mutable_wxchannel() {
  set_has_wxchannel();
  if (wxchannel_ == &::google::protobuf::internal::kEmptyString) {
    wxchannel_ = new ::std::string;
  }
  return wxchannel_;
}
inline ::std::string* Login::release_wxchannel() {
  clear_has_wxchannel();
  if (wxchannel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wxchannel_;
    wxchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Kick

// required string reason = 1;
inline bool Kick::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Kick::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Kick::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Kick::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& Kick::reason() const {
  return *reason_;
}
inline void Kick::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void Kick::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void Kick::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Kick::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* Kick::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ChangeName

// required uint32 uid = 1;
inline bool ChangeName::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeName::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeName::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeName::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 ChangeName::uid() const {
  return uid_;
}
inline void ChangeName::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required bytes name = 2;
inline bool ChangeName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChangeName::name() const {
  return *name_;
}
inline void ChangeName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChangeName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ChangeName::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangeName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ChangeName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes fig = 3;
inline bool ChangeName::has_fig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeName::set_has_fig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeName::clear_has_fig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeName::clear_fig() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& ChangeName::fig() const {
  return *fig_;
}
inline void ChangeName::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void ChangeName::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void ChangeName::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChangeName::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  return fig_;
}
inline ::std::string* ChangeName::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReplyChangeName

// required bytes name = 1;
inline bool ReplyChangeName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyChangeName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyChangeName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyChangeName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReplyChangeName::name() const {
  return *name_;
}
inline void ReplyChangeName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReplyChangeName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReplyChangeName::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyChangeName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ReplyChangeName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes fig = 2;
inline bool ReplyChangeName::has_fig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyChangeName::set_has_fig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyChangeName::clear_has_fig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyChangeName::clear_fig() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& ReplyChangeName::fig() const {
  return *fig_;
}
inline void ReplyChangeName::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void ReplyChangeName::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void ReplyChangeName::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyChangeName::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  return fig_;
}
inline ::std::string* ReplyChangeName::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Pay

// required uint32 uid = 1;
inline bool Pay::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pay::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pay::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pay::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Pay::uid() const {
  return uid_;
}
inline void Pay::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 cash = 2;
inline bool Pay::has_cash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pay::set_has_cash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pay::clear_has_cash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pay::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 Pay::cash() const {
  return cash_;
}
inline void Pay::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
}

// required uint32 ts = 3;
inline bool Pay::has_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pay::set_has_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pay::clear_has_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pay::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 Pay::ts() const {
  return ts_;
}
inline void Pay::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
}

// optional uint32 itemid = 4;
inline bool Pay::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pay::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pay::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pay::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 Pay::itemid() const {
  return itemid_;
}
inline void Pay::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 currency = 5;
inline bool Pay::has_currency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pay::set_has_currency() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pay::clear_has_currency() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pay::clear_currency() {
  currency_ = 0u;
  clear_has_currency();
}
inline ::google::protobuf::uint32 Pay::currency() const {
  return currency_;
}
inline void Pay::set_currency(::google::protobuf::uint32 value) {
  set_has_currency();
  currency_ = value;
}

// optional bytes tradeNo = 6;
inline bool Pay::has_tradeno() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pay::set_has_tradeno() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pay::clear_has_tradeno() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pay::clear_tradeno() {
  if (tradeno_ != &::google::protobuf::internal::kEmptyString) {
    tradeno_->clear();
  }
  clear_has_tradeno();
}
inline const ::std::string& Pay::tradeno() const {
  return *tradeno_;
}
inline void Pay::set_tradeno(const ::std::string& value) {
  set_has_tradeno();
  if (tradeno_ == &::google::protobuf::internal::kEmptyString) {
    tradeno_ = new ::std::string;
  }
  tradeno_->assign(value);
}
inline void Pay::set_tradeno(const char* value) {
  set_has_tradeno();
  if (tradeno_ == &::google::protobuf::internal::kEmptyString) {
    tradeno_ = new ::std::string;
  }
  tradeno_->assign(value);
}
inline void Pay::set_tradeno(const void* value, size_t size) {
  set_has_tradeno();
  if (tradeno_ == &::google::protobuf::internal::kEmptyString) {
    tradeno_ = new ::std::string;
  }
  tradeno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pay::mutable_tradeno() {
  set_has_tradeno();
  if (tradeno_ == &::google::protobuf::internal::kEmptyString) {
    tradeno_ = new ::std::string;
  }
  return tradeno_;
}
inline ::std::string* Pay::release_tradeno() {
  clear_has_tradeno();
  if (tradeno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tradeno_;
    tradeno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes channelTradeNo = 7;
inline bool Pay::has_channeltradeno() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pay::set_has_channeltradeno() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Pay::clear_has_channeltradeno() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Pay::clear_channeltradeno() {
  if (channeltradeno_ != &::google::protobuf::internal::kEmptyString) {
    channeltradeno_->clear();
  }
  clear_has_channeltradeno();
}
inline const ::std::string& Pay::channeltradeno() const {
  return *channeltradeno_;
}
inline void Pay::set_channeltradeno(const ::std::string& value) {
  set_has_channeltradeno();
  if (channeltradeno_ == &::google::protobuf::internal::kEmptyString) {
    channeltradeno_ = new ::std::string;
  }
  channeltradeno_->assign(value);
}
inline void Pay::set_channeltradeno(const char* value) {
  set_has_channeltradeno();
  if (channeltradeno_ == &::google::protobuf::internal::kEmptyString) {
    channeltradeno_ = new ::std::string;
  }
  channeltradeno_->assign(value);
}
inline void Pay::set_channeltradeno(const void* value, size_t size) {
  set_has_channeltradeno();
  if (channeltradeno_ == &::google::protobuf::internal::kEmptyString) {
    channeltradeno_ = new ::std::string;
  }
  channeltradeno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pay::mutable_channeltradeno() {
  set_has_channeltradeno();
  if (channeltradeno_ == &::google::protobuf::internal::kEmptyString) {
    channeltradeno_ = new ::std::string;
  }
  return channeltradeno_;
}
inline ::std::string* Pay::release_channeltradeno() {
  clear_has_channeltradeno();
  if (channeltradeno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channeltradeno_;
    channeltradeno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReplyPay

// required uint32 ret = 1;
inline bool ReplyPay::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyPay::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyPay::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyPay::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ReplyPay::ret() const {
  return ret_;
}
inline void ReplyPay::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional bytes name = 2;
inline bool ReplyPay::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyPay::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyPay::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyPay::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReplyPay::name() const {
  return *name_;
}
inline void ReplyPay::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReplyPay::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReplyPay::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReplyPay::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ReplyPay::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NoticePay

// required uint32 cash = 1;
inline bool NoticePay::has_cash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticePay::set_has_cash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticePay::clear_has_cash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticePay::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 NoticePay::cash() const {
  return cash_;
}
inline void NoticePay::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
}

// required uint32 viplevel = 2;
inline bool NoticePay::has_viplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticePay::set_has_viplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoticePay::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoticePay::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 NoticePay::viplevel() const {
  return viplevel_;
}
inline void NoticePay::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// required uint32 accrecharge = 3;
inline bool NoticePay::has_accrecharge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoticePay::set_has_accrecharge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoticePay::clear_has_accrecharge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoticePay::clear_accrecharge() {
  accrecharge_ = 0u;
  clear_has_accrecharge();
}
inline ::google::protobuf::uint32 NoticePay::accrecharge() const {
  return accrecharge_;
}
inline void NoticePay::set_accrecharge(::google::protobuf::uint32 value) {
  set_has_accrecharge();
  accrecharge_ = value;
}

// -------------------------------------------------------------------

// ShutDown

// required uint32 ts = 1;
inline bool ShutDown::has_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShutDown::set_has_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShutDown::clear_has_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShutDown::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 ShutDown::ts() const {
  return ts_;
}
inline void ShutDown::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
}

// required string sign = 2;
inline bool ShutDown::has_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShutDown::set_has_sign() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShutDown::clear_has_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShutDown::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& ShutDown::sign() const {
  return *sign_;
}
inline void ShutDown::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void ShutDown::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void ShutDown::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShutDown::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* ShutDown::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Common_2eproto__INCLUDED
