/* soapC.cpp
   Generated by gSOAP 2.8.3 from pockpay.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.3 2011-08-03 08:24:34 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__ArrayOfString:
		return soap_in_ns1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__CommitTransactionNTDResponse:
		return soap_in_PointerTo_ns1__CommitTransactionNTDResponse(soap, NULL, NULL, "ns1:CommitTransactionNTDResponse");
	case SOAP_TYPE_PointerTo_ns1__CommitTransactionNTD:
		return soap_in_PointerTo_ns1__CommitTransactionNTD(soap, NULL, NULL, "ns1:CommitTransactionNTD");
	case SOAP_TYPE_PointerTo_ns1__CommitTransactionResponse:
		return soap_in_PointerTo_ns1__CommitTransactionResponse(soap, NULL, NULL, "ns1:CommitTransactionResponse");
	case SOAP_TYPE_PointerTo_ns1__CommitTransaction:
		return soap_in_PointerTo_ns1__CommitTransaction(soap, NULL, NULL, "ns1:CommitTransaction");
	case SOAP_TYPE_PointerTo_ns1__CheckTransactionWithCurrencyResponse:
		return soap_in_PointerTo_ns1__CheckTransactionWithCurrencyResponse(soap, NULL, NULL, "ns1:CheckTransactionWithCurrencyResponse");
	case SOAP_TYPE_PointerTo_ns1__CheckTransactionWithCurrency:
		return soap_in_PointerTo_ns1__CheckTransactionWithCurrency(soap, NULL, NULL, "ns1:CheckTransactionWithCurrency");
	case SOAP_TYPE_PointerTo_ns1__CheckTransactionResponse:
		return soap_in_PointerTo_ns1__CheckTransactionResponse(soap, NULL, NULL, "ns1:CheckTransactionResponse");
	case SOAP_TYPE_PointerTo_ns1__CheckTransaction:
		return soap_in_PointerTo_ns1__CheckTransaction(soap, NULL, NULL, "ns1:CheckTransaction");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_in_PointerTons1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfString"))
		{	*type = SOAP_TYPE_ns1__ArrayOfString;
			return soap_in_ns1__ArrayOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:CommitTransactionNTDResponse"))
		{	*type = SOAP_TYPE__ns1__CommitTransactionNTDResponse;
			return soap_in__ns1__CommitTransactionNTDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CommitTransactionNTD"))
		{	*type = SOAP_TYPE__ns1__CommitTransactionNTD;
			return soap_in__ns1__CommitTransactionNTD(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CommitTransactionResponse"))
		{	*type = SOAP_TYPE__ns1__CommitTransactionResponse;
			return soap_in__ns1__CommitTransactionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CommitTransaction"))
		{	*type = SOAP_TYPE__ns1__CommitTransaction;
			return soap_in__ns1__CommitTransaction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CheckTransactionWithCurrencyResponse"))
		{	*type = SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse;
			return soap_in__ns1__CheckTransactionWithCurrencyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CheckTransactionWithCurrency"))
		{	*type = SOAP_TYPE__ns1__CheckTransactionWithCurrency;
			return soap_in__ns1__CheckTransactionWithCurrency(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CheckTransactionResponse"))
		{	*type = SOAP_TYPE__ns1__CheckTransactionResponse;
			return soap_in__ns1__CheckTransactionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CheckTransaction"))
		{	*type = SOAP_TYPE__ns1__CheckTransaction;
			return soap_in__ns1__CheckTransaction(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__CommitTransactionNTDResponse:
		return ((_ns1__CommitTransactionNTDResponse *)ptr)->soap_out(soap, "ns1:CommitTransactionNTDResponse", id, NULL);
	case SOAP_TYPE__ns1__CommitTransactionNTD:
		return ((_ns1__CommitTransactionNTD *)ptr)->soap_out(soap, "ns1:CommitTransactionNTD", id, NULL);
	case SOAP_TYPE__ns1__CommitTransactionResponse:
		return ((_ns1__CommitTransactionResponse *)ptr)->soap_out(soap, "ns1:CommitTransactionResponse", id, NULL);
	case SOAP_TYPE__ns1__CommitTransaction:
		return ((_ns1__CommitTransaction *)ptr)->soap_out(soap, "ns1:CommitTransaction", id, NULL);
	case SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse:
		return ((_ns1__CheckTransactionWithCurrencyResponse *)ptr)->soap_out(soap, "ns1:CheckTransactionWithCurrencyResponse", id, NULL);
	case SOAP_TYPE__ns1__CheckTransactionWithCurrency:
		return ((_ns1__CheckTransactionWithCurrency *)ptr)->soap_out(soap, "ns1:CheckTransactionWithCurrency", id, NULL);
	case SOAP_TYPE__ns1__CheckTransactionResponse:
		return ((_ns1__CheckTransactionResponse *)ptr)->soap_out(soap, "ns1:CheckTransactionResponse", id, NULL);
	case SOAP_TYPE__ns1__CheckTransaction:
		return ((_ns1__CheckTransaction *)ptr)->soap_out(soap, "ns1:CheckTransaction", id, NULL);
	case SOAP_TYPE_ns1__ArrayOfString:
		return ((ns1__ArrayOfString *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__CommitTransactionNTDResponse:
		return soap_out_PointerTo_ns1__CommitTransactionNTDResponse(soap, tag, id, (_ns1__CommitTransactionNTDResponse *const*)ptr, "ns1:CommitTransactionNTDResponse");
	case SOAP_TYPE_PointerTo_ns1__CommitTransactionNTD:
		return soap_out_PointerTo_ns1__CommitTransactionNTD(soap, tag, id, (_ns1__CommitTransactionNTD *const*)ptr, "ns1:CommitTransactionNTD");
	case SOAP_TYPE_PointerTo_ns1__CommitTransactionResponse:
		return soap_out_PointerTo_ns1__CommitTransactionResponse(soap, tag, id, (_ns1__CommitTransactionResponse *const*)ptr, "ns1:CommitTransactionResponse");
	case SOAP_TYPE_PointerTo_ns1__CommitTransaction:
		return soap_out_PointerTo_ns1__CommitTransaction(soap, tag, id, (_ns1__CommitTransaction *const*)ptr, "ns1:CommitTransaction");
	case SOAP_TYPE_PointerTo_ns1__CheckTransactionWithCurrencyResponse:
		return soap_out_PointerTo_ns1__CheckTransactionWithCurrencyResponse(soap, tag, id, (_ns1__CheckTransactionWithCurrencyResponse *const*)ptr, "ns1:CheckTransactionWithCurrencyResponse");
	case SOAP_TYPE_PointerTo_ns1__CheckTransactionWithCurrency:
		return soap_out_PointerTo_ns1__CheckTransactionWithCurrency(soap, tag, id, (_ns1__CheckTransactionWithCurrency *const*)ptr, "ns1:CheckTransactionWithCurrency");
	case SOAP_TYPE_PointerTo_ns1__CheckTransactionResponse:
		return soap_out_PointerTo_ns1__CheckTransactionResponse(soap, tag, id, (_ns1__CheckTransactionResponse *const*)ptr, "ns1:CheckTransactionResponse");
	case SOAP_TYPE_PointerTo_ns1__CheckTransaction:
		return soap_out_PointerTo_ns1__CheckTransaction(soap, tag, id, (_ns1__CheckTransaction *const*)ptr, "ns1:CheckTransaction");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_out_PointerTons1__ArrayOfString(soap, tag, id, (ns1__ArrayOfString *const*)ptr, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__CommitTransactionNTDResponse:
		((_ns1__CommitTransactionNTDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CommitTransactionNTD:
		((_ns1__CommitTransactionNTD *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CommitTransactionResponse:
		((_ns1__CommitTransactionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CommitTransaction:
		((_ns1__CommitTransaction *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse:
		((_ns1__CheckTransactionWithCurrencyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CheckTransactionWithCurrency:
		((_ns1__CheckTransactionWithCurrency *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CheckTransactionResponse:
		((_ns1__CheckTransactionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CheckTransaction:
		((_ns1__CheckTransaction *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfString:
		((ns1__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns3__CommitTransactionNTD:
		soap_serialize___ns3__CommitTransactionNTD(soap, (const struct __ns3__CommitTransactionNTD *)ptr);
		break;
	case SOAP_TYPE___ns3__CommitTransaction:
		soap_serialize___ns3__CommitTransaction(soap, (const struct __ns3__CommitTransaction *)ptr);
		break;
	case SOAP_TYPE___ns3__CheckTransactionWithCurrency:
		soap_serialize___ns3__CheckTransactionWithCurrency(soap, (const struct __ns3__CheckTransactionWithCurrency *)ptr);
		break;
	case SOAP_TYPE___ns3__CheckTransaction:
		soap_serialize___ns3__CheckTransaction(soap, (const struct __ns3__CheckTransaction *)ptr);
		break;
	case SOAP_TYPE___ns2__CommitTransactionNTD:
		soap_serialize___ns2__CommitTransactionNTD(soap, (const struct __ns2__CommitTransactionNTD *)ptr);
		break;
	case SOAP_TYPE___ns2__CommitTransaction:
		soap_serialize___ns2__CommitTransaction(soap, (const struct __ns2__CommitTransaction *)ptr);
		break;
	case SOAP_TYPE___ns2__CheckTransactionWithCurrency:
		soap_serialize___ns2__CheckTransactionWithCurrency(soap, (const struct __ns2__CheckTransactionWithCurrency *)ptr);
		break;
	case SOAP_TYPE___ns2__CheckTransaction:
		soap_serialize___ns2__CheckTransaction(soap, (const struct __ns2__CheckTransaction *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CommitTransactionNTDResponse:
		soap_serialize_PointerTo_ns1__CommitTransactionNTDResponse(soap, (_ns1__CommitTransactionNTDResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CommitTransactionNTD:
		soap_serialize_PointerTo_ns1__CommitTransactionNTD(soap, (_ns1__CommitTransactionNTD *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CommitTransactionResponse:
		soap_serialize_PointerTo_ns1__CommitTransactionResponse(soap, (_ns1__CommitTransactionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CommitTransaction:
		soap_serialize_PointerTo_ns1__CommitTransaction(soap, (_ns1__CommitTransaction *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CheckTransactionWithCurrencyResponse:
		soap_serialize_PointerTo_ns1__CheckTransactionWithCurrencyResponse(soap, (_ns1__CheckTransactionWithCurrencyResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CheckTransactionWithCurrency:
		soap_serialize_PointerTo_ns1__CheckTransactionWithCurrency(soap, (_ns1__CheckTransactionWithCurrency *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CheckTransactionResponse:
		soap_serialize_PointerTo_ns1__CheckTransactionResponse(soap, (_ns1__CheckTransactionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CheckTransaction:
		soap_serialize_PointerTo_ns1__CheckTransaction(soap, (_ns1__CheckTransaction *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		soap_serialize_PointerTons1__ArrayOfString(soap, (ns1__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfString:
		return (void*)soap_instantiate_ns1__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CheckTransaction:
		return (void*)soap_instantiate__ns1__CheckTransaction(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CheckTransactionResponse:
		return (void*)soap_instantiate__ns1__CheckTransactionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CheckTransactionWithCurrency:
		return (void*)soap_instantiate__ns1__CheckTransactionWithCurrency(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse:
		return (void*)soap_instantiate__ns1__CheckTransactionWithCurrencyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CommitTransaction:
		return (void*)soap_instantiate__ns1__CommitTransaction(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CommitTransactionResponse:
		return (void*)soap_instantiate__ns1__CommitTransactionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CommitTransactionNTD:
		return (void*)soap_instantiate__ns1__CommitTransactionNTD(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CommitTransactionNTDResponse:
		return (void*)soap_instantiate__ns1__CommitTransactionNTDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__CheckTransaction:
		return (void*)soap_instantiate___ns2__CheckTransaction(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__CheckTransactionWithCurrency:
		return (void*)soap_instantiate___ns2__CheckTransactionWithCurrency(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__CommitTransaction:
		return (void*)soap_instantiate___ns2__CommitTransaction(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__CommitTransactionNTD:
		return (void*)soap_instantiate___ns2__CommitTransactionNTD(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__CheckTransaction:
		return (void*)soap_instantiate___ns3__CheckTransaction(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__CheckTransactionWithCurrency:
		return (void*)soap_instantiate___ns3__CheckTransactionWithCurrency(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__CommitTransaction:
		return (void*)soap_instantiate___ns3__CommitTransaction(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__CommitTransactionNTD:
		return (void*)soap_instantiate___ns3__CommitTransactionNTD(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns1__ArrayOfString:
		if (p->size < 0)
			SOAP_DELETE((ns1__ArrayOfString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__ArrayOfString*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CheckTransaction:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CheckTransaction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CheckTransaction*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CheckTransactionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CheckTransactionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CheckTransactionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CheckTransactionWithCurrency:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CheckTransactionWithCurrency*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CheckTransactionWithCurrency*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CheckTransactionWithCurrencyResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CheckTransactionWithCurrencyResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CommitTransaction:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CommitTransaction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CommitTransaction*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CommitTransactionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CommitTransactionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CommitTransactionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CommitTransactionNTD:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CommitTransactionNTD*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CommitTransactionNTD*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CommitTransactionNTDResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CommitTransactionNTDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CommitTransactionNTDResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns2__CheckTransaction:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__CheckTransaction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__CheckTransaction*)p->ptr);
		break;
	case SOAP_TYPE___ns2__CheckTransactionWithCurrency:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__CheckTransactionWithCurrency*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__CheckTransactionWithCurrency*)p->ptr);
		break;
	case SOAP_TYPE___ns2__CommitTransaction:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__CommitTransaction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__CommitTransaction*)p->ptr);
		break;
	case SOAP_TYPE___ns2__CommitTransactionNTD:
		if (p->size < 0)
			SOAP_DELETE((struct __ns2__CommitTransactionNTD*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns2__CommitTransactionNTD*)p->ptr);
		break;
	case SOAP_TYPE___ns3__CheckTransaction:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__CheckTransaction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__CheckTransaction*)p->ptr);
		break;
	case SOAP_TYPE___ns3__CheckTransactionWithCurrency:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__CheckTransactionWithCurrency*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__CheckTransactionWithCurrency*)p->ptr);
		break;
	case SOAP_TYPE___ns3__CommitTransaction:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__CommitTransaction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__CommitTransaction*)p->ptr);
		break;
	case SOAP_TYPE___ns3__CommitTransactionNTD:
		if (p->size < 0)
			SOAP_DELETE((struct __ns3__CommitTransactionNTD*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns3__CommitTransactionNTD*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::string >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__CommitTransactionNTDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CommitTransactionNTDResponse::CommitTransactionNTDResult = NULL;
	/* transient soap skipped */
}

void _ns1__CommitTransactionNTDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__CommitTransactionNTDResponse::CommitTransactionNTDResult);
	/* transient soap skipped */
}

int _ns1__CommitTransactionNTDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CommitTransactionNTDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CommitTransactionNTDResponse(struct soap *soap, const char *tag, int id, const _ns1__CommitTransactionNTDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CommitTransactionNTDResponse), type))
		return soap->error;
	if (a->CommitTransactionNTDResult)
		soap_element_result(soap, "ns1:CommitTransactionNTDResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:CommitTransactionNTDResult", -1, &(a->_ns1__CommitTransactionNTDResponse::CommitTransactionNTDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CommitTransactionNTDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CommitTransactionNTDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CommitTransactionNTDResponse * SOAP_FMAC4 soap_in__ns1__CommitTransactionNTDResponse(struct soap *soap, const char *tag, _ns1__CommitTransactionNTDResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CommitTransactionNTDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CommitTransactionNTDResponse, sizeof(_ns1__CommitTransactionNTDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CommitTransactionNTDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CommitTransactionNTDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CommitTransactionNTDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CommitTransactionNTDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:CommitTransactionNTDResult", &(a->_ns1__CommitTransactionNTDResponse::CommitTransactionNTDResult), "ns1:ArrayOfString"))
				{	soap_flag_CommitTransactionNTDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CommitTransactionNTDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CommitTransactionNTDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CommitTransactionNTDResponse, 0, sizeof(_ns1__CommitTransactionNTDResponse), 0, soap_copy__ns1__CommitTransactionNTDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CommitTransactionNTDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CommitTransactionNTDResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CommitTransactionNTDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CommitTransactionNTDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CommitTransactionNTDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CommitTransactionNTDResponse * SOAP_FMAC4 soap_get__ns1__CommitTransactionNTDResponse(struct soap *soap, _ns1__CommitTransactionNTDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CommitTransactionNTDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CommitTransactionNTDResponse * SOAP_FMAC2 soap_instantiate__ns1__CommitTransactionNTDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CommitTransactionNTDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CommitTransactionNTDResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CommitTransactionNTDResponse);
		if (size)
			*size = sizeof(_ns1__CommitTransactionNTDResponse);
		((_ns1__CommitTransactionNTDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CommitTransactionNTDResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CommitTransactionNTDResponse);
		for (int i = 0; i < n; i++)
			((_ns1__CommitTransactionNTDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CommitTransactionNTDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CommitTransactionNTDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CommitTransactionNTDResponse %p -> %p\n", q, p));
	*(_ns1__CommitTransactionNTDResponse*)p = *(_ns1__CommitTransactionNTDResponse*)q;
}

void _ns1__CommitTransactionNTD::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CommitTransactionNTD::app_USCOREid = NULL;
	this->_ns1__CommitTransactionNTD::transaction_USCOREid = NULL;
	this->_ns1__CommitTransactionNTD::verify_USCOREcode = NULL;
	/* transient soap skipped */
}

void _ns1__CommitTransactionNTD::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CommitTransactionNTD::app_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CommitTransactionNTD::transaction_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CommitTransactionNTD::verify_USCOREcode);
	/* transient soap skipped */
}

int _ns1__CommitTransactionNTD::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CommitTransactionNTD(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CommitTransactionNTD(struct soap *soap, const char *tag, int id, const _ns1__CommitTransactionNTD *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CommitTransactionNTD), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:app_id", -1, &(a->_ns1__CommitTransactionNTD::app_USCOREid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:transaction_id", -1, &(a->_ns1__CommitTransactionNTD::transaction_USCOREid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:verify_code", -1, &(a->_ns1__CommitTransactionNTD::verify_USCOREcode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CommitTransactionNTD::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CommitTransactionNTD(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CommitTransactionNTD * SOAP_FMAC4 soap_in__ns1__CommitTransactionNTD(struct soap *soap, const char *tag, _ns1__CommitTransactionNTD *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CommitTransactionNTD *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CommitTransactionNTD, sizeof(_ns1__CommitTransactionNTD), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CommitTransactionNTD)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CommitTransactionNTD *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_app_USCOREid1 = 1;
	size_t soap_flag_transaction_USCOREid1 = 1;
	size_t soap_flag_verify_USCOREcode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_app_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:app_id", &(a->_ns1__CommitTransactionNTD::app_USCOREid), "xsd:string"))
				{	soap_flag_app_USCOREid1--;
					continue;
				}
			if (soap_flag_transaction_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:transaction_id", &(a->_ns1__CommitTransactionNTD::transaction_USCOREid), "xsd:string"))
				{	soap_flag_transaction_USCOREid1--;
					continue;
				}
			if (soap_flag_verify_USCOREcode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:verify_code", &(a->_ns1__CommitTransactionNTD::verify_USCOREcode), "xsd:string"))
				{	soap_flag_verify_USCOREcode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CommitTransactionNTD *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CommitTransactionNTD, 0, sizeof(_ns1__CommitTransactionNTD), 0, soap_copy__ns1__CommitTransactionNTD);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CommitTransactionNTD::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CommitTransactionNTD);
	if (this->soap_out(soap, tag?tag:"ns1:CommitTransactionNTD", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CommitTransactionNTD::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CommitTransactionNTD(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CommitTransactionNTD * SOAP_FMAC4 soap_get__ns1__CommitTransactionNTD(struct soap *soap, _ns1__CommitTransactionNTD *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CommitTransactionNTD(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CommitTransactionNTD * SOAP_FMAC2 soap_instantiate__ns1__CommitTransactionNTD(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CommitTransactionNTD(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CommitTransactionNTD, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CommitTransactionNTD);
		if (size)
			*size = sizeof(_ns1__CommitTransactionNTD);
		((_ns1__CommitTransactionNTD*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CommitTransactionNTD[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CommitTransactionNTD);
		for (int i = 0; i < n; i++)
			((_ns1__CommitTransactionNTD*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CommitTransactionNTD*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CommitTransactionNTD(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CommitTransactionNTD %p -> %p\n", q, p));
	*(_ns1__CommitTransactionNTD*)p = *(_ns1__CommitTransactionNTD*)q;
}

void _ns1__CommitTransactionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CommitTransactionResponse::CommitTransactionResult = NULL;
	/* transient soap skipped */
}

void _ns1__CommitTransactionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__CommitTransactionResponse::CommitTransactionResult);
	/* transient soap skipped */
}

int _ns1__CommitTransactionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CommitTransactionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CommitTransactionResponse(struct soap *soap, const char *tag, int id, const _ns1__CommitTransactionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CommitTransactionResponse), type))
		return soap->error;
	if (a->CommitTransactionResult)
		soap_element_result(soap, "ns1:CommitTransactionResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:CommitTransactionResult", -1, &(a->_ns1__CommitTransactionResponse::CommitTransactionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CommitTransactionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CommitTransactionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CommitTransactionResponse * SOAP_FMAC4 soap_in__ns1__CommitTransactionResponse(struct soap *soap, const char *tag, _ns1__CommitTransactionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CommitTransactionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CommitTransactionResponse, sizeof(_ns1__CommitTransactionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CommitTransactionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CommitTransactionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CommitTransactionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CommitTransactionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:CommitTransactionResult", &(a->_ns1__CommitTransactionResponse::CommitTransactionResult), "ns1:ArrayOfString"))
				{	soap_flag_CommitTransactionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CommitTransactionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CommitTransactionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CommitTransactionResponse, 0, sizeof(_ns1__CommitTransactionResponse), 0, soap_copy__ns1__CommitTransactionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CommitTransactionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CommitTransactionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CommitTransactionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CommitTransactionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CommitTransactionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CommitTransactionResponse * SOAP_FMAC4 soap_get__ns1__CommitTransactionResponse(struct soap *soap, _ns1__CommitTransactionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CommitTransactionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CommitTransactionResponse * SOAP_FMAC2 soap_instantiate__ns1__CommitTransactionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CommitTransactionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CommitTransactionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CommitTransactionResponse);
		if (size)
			*size = sizeof(_ns1__CommitTransactionResponse);
		((_ns1__CommitTransactionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CommitTransactionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CommitTransactionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__CommitTransactionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CommitTransactionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CommitTransactionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CommitTransactionResponse %p -> %p\n", q, p));
	*(_ns1__CommitTransactionResponse*)p = *(_ns1__CommitTransactionResponse*)q;
}

void _ns1__CommitTransaction::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CommitTransaction::app_USCOREid = NULL;
	this->_ns1__CommitTransaction::transaction_USCOREid = NULL;
	this->_ns1__CommitTransaction::verify_USCOREcode = NULL;
	/* transient soap skipped */
}

void _ns1__CommitTransaction::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CommitTransaction::app_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CommitTransaction::transaction_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CommitTransaction::verify_USCOREcode);
	/* transient soap skipped */
}

int _ns1__CommitTransaction::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CommitTransaction(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CommitTransaction(struct soap *soap, const char *tag, int id, const _ns1__CommitTransaction *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CommitTransaction), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:app_id", -1, &(a->_ns1__CommitTransaction::app_USCOREid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:transaction_id", -1, &(a->_ns1__CommitTransaction::transaction_USCOREid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:verify_code", -1, &(a->_ns1__CommitTransaction::verify_USCOREcode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CommitTransaction::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CommitTransaction(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CommitTransaction * SOAP_FMAC4 soap_in__ns1__CommitTransaction(struct soap *soap, const char *tag, _ns1__CommitTransaction *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CommitTransaction *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CommitTransaction, sizeof(_ns1__CommitTransaction), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CommitTransaction)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CommitTransaction *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_app_USCOREid1 = 1;
	size_t soap_flag_transaction_USCOREid1 = 1;
	size_t soap_flag_verify_USCOREcode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_app_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:app_id", &(a->_ns1__CommitTransaction::app_USCOREid), "xsd:string"))
				{	soap_flag_app_USCOREid1--;
					continue;
				}
			if (soap_flag_transaction_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:transaction_id", &(a->_ns1__CommitTransaction::transaction_USCOREid), "xsd:string"))
				{	soap_flag_transaction_USCOREid1--;
					continue;
				}
			if (soap_flag_verify_USCOREcode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:verify_code", &(a->_ns1__CommitTransaction::verify_USCOREcode), "xsd:string"))
				{	soap_flag_verify_USCOREcode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CommitTransaction *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CommitTransaction, 0, sizeof(_ns1__CommitTransaction), 0, soap_copy__ns1__CommitTransaction);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CommitTransaction::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CommitTransaction);
	if (this->soap_out(soap, tag?tag:"ns1:CommitTransaction", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CommitTransaction::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CommitTransaction(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CommitTransaction * SOAP_FMAC4 soap_get__ns1__CommitTransaction(struct soap *soap, _ns1__CommitTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CommitTransaction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CommitTransaction * SOAP_FMAC2 soap_instantiate__ns1__CommitTransaction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CommitTransaction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CommitTransaction, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CommitTransaction);
		if (size)
			*size = sizeof(_ns1__CommitTransaction);
		((_ns1__CommitTransaction*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CommitTransaction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CommitTransaction);
		for (int i = 0; i < n; i++)
			((_ns1__CommitTransaction*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CommitTransaction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CommitTransaction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CommitTransaction %p -> %p\n", q, p));
	*(_ns1__CommitTransaction*)p = *(_ns1__CommitTransaction*)q;
}

void _ns1__CheckTransactionWithCurrencyResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CheckTransactionWithCurrencyResponse::CheckTransactionWithCurrencyResult = NULL;
	/* transient soap skipped */
}

void _ns1__CheckTransactionWithCurrencyResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__CheckTransactionWithCurrencyResponse::CheckTransactionWithCurrencyResult);
	/* transient soap skipped */
}

int _ns1__CheckTransactionWithCurrencyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CheckTransactionWithCurrencyResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, const char *tag, int id, const _ns1__CheckTransactionWithCurrencyResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse), type))
		return soap->error;
	if (a->CheckTransactionWithCurrencyResult)
		soap_element_result(soap, "ns1:CheckTransactionWithCurrencyResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:CheckTransactionWithCurrencyResult", -1, &(a->_ns1__CheckTransactionWithCurrencyResponse::CheckTransactionWithCurrencyResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CheckTransactionWithCurrencyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CheckTransactionWithCurrencyResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CheckTransactionWithCurrencyResponse * SOAP_FMAC4 soap_in__ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, const char *tag, _ns1__CheckTransactionWithCurrencyResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CheckTransactionWithCurrencyResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse, sizeof(_ns1__CheckTransactionWithCurrencyResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CheckTransactionWithCurrencyResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CheckTransactionWithCurrencyResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CheckTransactionWithCurrencyResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:CheckTransactionWithCurrencyResult", &(a->_ns1__CheckTransactionWithCurrencyResponse::CheckTransactionWithCurrencyResult), "ns1:ArrayOfString"))
				{	soap_flag_CheckTransactionWithCurrencyResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CheckTransactionWithCurrencyResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CheckTransactionWithCurrencyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse, 0, sizeof(_ns1__CheckTransactionWithCurrencyResponse), 0, soap_copy__ns1__CheckTransactionWithCurrencyResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CheckTransactionWithCurrencyResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CheckTransactionWithCurrencyResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CheckTransactionWithCurrencyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CheckTransactionWithCurrencyResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CheckTransactionWithCurrencyResponse * SOAP_FMAC4 soap_get__ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, _ns1__CheckTransactionWithCurrencyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CheckTransactionWithCurrencyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CheckTransactionWithCurrencyResponse * SOAP_FMAC2 soap_instantiate__ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CheckTransactionWithCurrencyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CheckTransactionWithCurrencyResponse);
		if (size)
			*size = sizeof(_ns1__CheckTransactionWithCurrencyResponse);
		((_ns1__CheckTransactionWithCurrencyResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CheckTransactionWithCurrencyResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CheckTransactionWithCurrencyResponse);
		for (int i = 0; i < n; i++)
			((_ns1__CheckTransactionWithCurrencyResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CheckTransactionWithCurrencyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CheckTransactionWithCurrencyResponse %p -> %p\n", q, p));
	*(_ns1__CheckTransactionWithCurrencyResponse*)p = *(_ns1__CheckTransactionWithCurrencyResponse*)q;
}

void _ns1__CheckTransactionWithCurrency::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CheckTransactionWithCurrency::app_USCOREid = NULL;
	this->_ns1__CheckTransactionWithCurrency::transaction_USCOREid = NULL;
	this->_ns1__CheckTransactionWithCurrency::verify_USCOREcode = NULL;
	/* transient soap skipped */
}

void _ns1__CheckTransactionWithCurrency::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CheckTransactionWithCurrency::app_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CheckTransactionWithCurrency::transaction_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CheckTransactionWithCurrency::verify_USCOREcode);
	/* transient soap skipped */
}

int _ns1__CheckTransactionWithCurrency::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CheckTransactionWithCurrency(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckTransactionWithCurrency(struct soap *soap, const char *tag, int id, const _ns1__CheckTransactionWithCurrency *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CheckTransactionWithCurrency), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:app_id", -1, &(a->_ns1__CheckTransactionWithCurrency::app_USCOREid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:transaction_id", -1, &(a->_ns1__CheckTransactionWithCurrency::transaction_USCOREid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:verify_code", -1, &(a->_ns1__CheckTransactionWithCurrency::verify_USCOREcode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CheckTransactionWithCurrency::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CheckTransactionWithCurrency(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CheckTransactionWithCurrency * SOAP_FMAC4 soap_in__ns1__CheckTransactionWithCurrency(struct soap *soap, const char *tag, _ns1__CheckTransactionWithCurrency *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CheckTransactionWithCurrency *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CheckTransactionWithCurrency, sizeof(_ns1__CheckTransactionWithCurrency), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CheckTransactionWithCurrency)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CheckTransactionWithCurrency *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_app_USCOREid1 = 1;
	size_t soap_flag_transaction_USCOREid1 = 1;
	size_t soap_flag_verify_USCOREcode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_app_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:app_id", &(a->_ns1__CheckTransactionWithCurrency::app_USCOREid), "xsd:string"))
				{	soap_flag_app_USCOREid1--;
					continue;
				}
			if (soap_flag_transaction_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:transaction_id", &(a->_ns1__CheckTransactionWithCurrency::transaction_USCOREid), "xsd:string"))
				{	soap_flag_transaction_USCOREid1--;
					continue;
				}
			if (soap_flag_verify_USCOREcode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:verify_code", &(a->_ns1__CheckTransactionWithCurrency::verify_USCOREcode), "xsd:string"))
				{	soap_flag_verify_USCOREcode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CheckTransactionWithCurrency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CheckTransactionWithCurrency, 0, sizeof(_ns1__CheckTransactionWithCurrency), 0, soap_copy__ns1__CheckTransactionWithCurrency);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CheckTransactionWithCurrency::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CheckTransactionWithCurrency);
	if (this->soap_out(soap, tag?tag:"ns1:CheckTransactionWithCurrency", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CheckTransactionWithCurrency::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CheckTransactionWithCurrency(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CheckTransactionWithCurrency * SOAP_FMAC4 soap_get__ns1__CheckTransactionWithCurrency(struct soap *soap, _ns1__CheckTransactionWithCurrency *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CheckTransactionWithCurrency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CheckTransactionWithCurrency * SOAP_FMAC2 soap_instantiate__ns1__CheckTransactionWithCurrency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CheckTransactionWithCurrency(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CheckTransactionWithCurrency, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CheckTransactionWithCurrency);
		if (size)
			*size = sizeof(_ns1__CheckTransactionWithCurrency);
		((_ns1__CheckTransactionWithCurrency*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CheckTransactionWithCurrency[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CheckTransactionWithCurrency);
		for (int i = 0; i < n; i++)
			((_ns1__CheckTransactionWithCurrency*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CheckTransactionWithCurrency*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CheckTransactionWithCurrency(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CheckTransactionWithCurrency %p -> %p\n", q, p));
	*(_ns1__CheckTransactionWithCurrency*)p = *(_ns1__CheckTransactionWithCurrency*)q;
}

void _ns1__CheckTransactionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CheckTransactionResponse::CheckTransactionResult = NULL;
	/* transient soap skipped */
}

void _ns1__CheckTransactionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__CheckTransactionResponse::CheckTransactionResult);
	/* transient soap skipped */
}

int _ns1__CheckTransactionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CheckTransactionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckTransactionResponse(struct soap *soap, const char *tag, int id, const _ns1__CheckTransactionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CheckTransactionResponse), type))
		return soap->error;
	if (a->CheckTransactionResult)
		soap_element_result(soap, "ns1:CheckTransactionResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:CheckTransactionResult", -1, &(a->_ns1__CheckTransactionResponse::CheckTransactionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CheckTransactionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CheckTransactionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CheckTransactionResponse * SOAP_FMAC4 soap_in__ns1__CheckTransactionResponse(struct soap *soap, const char *tag, _ns1__CheckTransactionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CheckTransactionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CheckTransactionResponse, sizeof(_ns1__CheckTransactionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CheckTransactionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CheckTransactionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CheckTransactionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CheckTransactionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:CheckTransactionResult", &(a->_ns1__CheckTransactionResponse::CheckTransactionResult), "ns1:ArrayOfString"))
				{	soap_flag_CheckTransactionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CheckTransactionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CheckTransactionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CheckTransactionResponse, 0, sizeof(_ns1__CheckTransactionResponse), 0, soap_copy__ns1__CheckTransactionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CheckTransactionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CheckTransactionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CheckTransactionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CheckTransactionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CheckTransactionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CheckTransactionResponse * SOAP_FMAC4 soap_get__ns1__CheckTransactionResponse(struct soap *soap, _ns1__CheckTransactionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CheckTransactionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CheckTransactionResponse * SOAP_FMAC2 soap_instantiate__ns1__CheckTransactionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CheckTransactionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CheckTransactionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CheckTransactionResponse);
		if (size)
			*size = sizeof(_ns1__CheckTransactionResponse);
		((_ns1__CheckTransactionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CheckTransactionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CheckTransactionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__CheckTransactionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CheckTransactionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CheckTransactionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CheckTransactionResponse %p -> %p\n", q, p));
	*(_ns1__CheckTransactionResponse*)p = *(_ns1__CheckTransactionResponse*)q;
}

void _ns1__CheckTransaction::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CheckTransaction::app_USCOREid = NULL;
	this->_ns1__CheckTransaction::transaction_USCOREid = NULL;
	this->_ns1__CheckTransaction::verify_USCOREcode = NULL;
	/* transient soap skipped */
}

void _ns1__CheckTransaction::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CheckTransaction::app_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CheckTransaction::transaction_USCOREid);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__CheckTransaction::verify_USCOREcode);
	/* transient soap skipped */
}

int _ns1__CheckTransaction::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CheckTransaction(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckTransaction(struct soap *soap, const char *tag, int id, const _ns1__CheckTransaction *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CheckTransaction), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:app_id", -1, &(a->_ns1__CheckTransaction::app_USCOREid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:transaction_id", -1, &(a->_ns1__CheckTransaction::transaction_USCOREid), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:verify_code", -1, &(a->_ns1__CheckTransaction::verify_USCOREcode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CheckTransaction::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CheckTransaction(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CheckTransaction * SOAP_FMAC4 soap_in__ns1__CheckTransaction(struct soap *soap, const char *tag, _ns1__CheckTransaction *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CheckTransaction *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CheckTransaction, sizeof(_ns1__CheckTransaction), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CheckTransaction)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CheckTransaction *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_app_USCOREid1 = 1;
	size_t soap_flag_transaction_USCOREid1 = 1;
	size_t soap_flag_verify_USCOREcode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_app_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:app_id", &(a->_ns1__CheckTransaction::app_USCOREid), "xsd:string"))
				{	soap_flag_app_USCOREid1--;
					continue;
				}
			if (soap_flag_transaction_USCOREid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:transaction_id", &(a->_ns1__CheckTransaction::transaction_USCOREid), "xsd:string"))
				{	soap_flag_transaction_USCOREid1--;
					continue;
				}
			if (soap_flag_verify_USCOREcode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:verify_code", &(a->_ns1__CheckTransaction::verify_USCOREcode), "xsd:string"))
				{	soap_flag_verify_USCOREcode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CheckTransaction *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CheckTransaction, 0, sizeof(_ns1__CheckTransaction), 0, soap_copy__ns1__CheckTransaction);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CheckTransaction::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CheckTransaction);
	if (this->soap_out(soap, tag?tag:"ns1:CheckTransaction", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CheckTransaction::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CheckTransaction(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CheckTransaction * SOAP_FMAC4 soap_get__ns1__CheckTransaction(struct soap *soap, _ns1__CheckTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CheckTransaction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CheckTransaction * SOAP_FMAC2 soap_instantiate__ns1__CheckTransaction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CheckTransaction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CheckTransaction, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CheckTransaction);
		if (size)
			*size = sizeof(_ns1__CheckTransaction);
		((_ns1__CheckTransaction*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CheckTransaction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CheckTransaction);
		for (int i = 0; i < n; i++)
			((_ns1__CheckTransaction*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CheckTransaction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CheckTransaction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CheckTransaction %p -> %p\n", q, p));
	*(_ns1__CheckTransaction*)p = *(_ns1__CheckTransaction*)q;
}

void ns1__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->ns1__ArrayOfString::string);
	/* transient soap skipped */
}

void ns1__ArrayOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->ns1__ArrayOfString::string);
	/* transient soap skipped */
}

int ns1__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfString(struct soap *soap, const char *tag, int id, const ns1__ArrayOfString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfString), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "ns1:string", -1, &(a->ns1__ArrayOfString::string), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_in_ns1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfString *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "ns1:string", &(a->ns1__ArrayOfString::string), "xsd:string"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfString, 0, sizeof(ns1__ArrayOfString), 0, soap_copy_ns1__ArrayOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns1__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfString);
	if (this->soap_out(soap, tag?tag:"ns1:ArrayOfString", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_get_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__ArrayOfString * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfString, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfString);
		if (size)
			*size = sizeof(ns1__ArrayOfString);
		((ns1__ArrayOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__ArrayOfString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfString);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfString %p -> %p\n", q, p));
	*(ns1__ArrayOfString*)p = *(ns1__ArrayOfString*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__CommitTransactionNTD(struct soap *soap, struct __ns3__CommitTransactionNTD *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CommitTransactionNTD = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__CommitTransactionNTD(struct soap *soap, const struct __ns3__CommitTransactionNTD *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CommitTransactionNTD(soap, &a->ns1__CommitTransactionNTD);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__CommitTransactionNTD(struct soap *soap, const char *tag, int id, const struct __ns3__CommitTransactionNTD *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CommitTransactionNTD(soap, "ns1:CommitTransactionNTD", -1, &a->ns1__CommitTransactionNTD, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CommitTransactionNTD * SOAP_FMAC4 soap_in___ns3__CommitTransactionNTD(struct soap *soap, const char *tag, struct __ns3__CommitTransactionNTD *a, const char *type)
{
	size_t soap_flag_ns1__CommitTransactionNTD = 1;
	short soap_flag;
	a = (struct __ns3__CommitTransactionNTD *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__CommitTransactionNTD, sizeof(struct __ns3__CommitTransactionNTD), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__CommitTransactionNTD(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CommitTransactionNTD && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CommitTransactionNTD(soap, "ns1:CommitTransactionNTD", &a->ns1__CommitTransactionNTD, ""))
				{	soap_flag_ns1__CommitTransactionNTD--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__CommitTransactionNTD(struct soap *soap, const struct __ns3__CommitTransactionNTD *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__CommitTransactionNTD(soap, tag?tag:"-ns3:CommitTransactionNTD", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CommitTransactionNTD * SOAP_FMAC4 soap_get___ns3__CommitTransactionNTD(struct soap *soap, struct __ns3__CommitTransactionNTD *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__CommitTransactionNTD(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__CommitTransactionNTD * SOAP_FMAC2 soap_instantiate___ns3__CommitTransactionNTD(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__CommitTransactionNTD(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__CommitTransactionNTD, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__CommitTransactionNTD);
		if (size)
			*size = sizeof(struct __ns3__CommitTransactionNTD);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__CommitTransactionNTD[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__CommitTransactionNTD);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__CommitTransactionNTD*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__CommitTransactionNTD(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__CommitTransactionNTD %p -> %p\n", q, p));
	*(struct __ns3__CommitTransactionNTD*)p = *(struct __ns3__CommitTransactionNTD*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__CommitTransaction(struct soap *soap, struct __ns3__CommitTransaction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CommitTransaction = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__CommitTransaction(struct soap *soap, const struct __ns3__CommitTransaction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CommitTransaction(soap, &a->ns1__CommitTransaction);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__CommitTransaction(struct soap *soap, const char *tag, int id, const struct __ns3__CommitTransaction *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CommitTransaction(soap, "ns1:CommitTransaction", -1, &a->ns1__CommitTransaction, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CommitTransaction * SOAP_FMAC4 soap_in___ns3__CommitTransaction(struct soap *soap, const char *tag, struct __ns3__CommitTransaction *a, const char *type)
{
	size_t soap_flag_ns1__CommitTransaction = 1;
	short soap_flag;
	a = (struct __ns3__CommitTransaction *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__CommitTransaction, sizeof(struct __ns3__CommitTransaction), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__CommitTransaction(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CommitTransaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CommitTransaction(soap, "ns1:CommitTransaction", &a->ns1__CommitTransaction, ""))
				{	soap_flag_ns1__CommitTransaction--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__CommitTransaction(struct soap *soap, const struct __ns3__CommitTransaction *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__CommitTransaction(soap, tag?tag:"-ns3:CommitTransaction", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CommitTransaction * SOAP_FMAC4 soap_get___ns3__CommitTransaction(struct soap *soap, struct __ns3__CommitTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__CommitTransaction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__CommitTransaction * SOAP_FMAC2 soap_instantiate___ns3__CommitTransaction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__CommitTransaction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__CommitTransaction, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__CommitTransaction);
		if (size)
			*size = sizeof(struct __ns3__CommitTransaction);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__CommitTransaction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__CommitTransaction);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__CommitTransaction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__CommitTransaction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__CommitTransaction %p -> %p\n", q, p));
	*(struct __ns3__CommitTransaction*)p = *(struct __ns3__CommitTransaction*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__CheckTransactionWithCurrency(struct soap *soap, struct __ns3__CheckTransactionWithCurrency *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CheckTransactionWithCurrency = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__CheckTransactionWithCurrency(struct soap *soap, const struct __ns3__CheckTransactionWithCurrency *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CheckTransactionWithCurrency(soap, &a->ns1__CheckTransactionWithCurrency);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__CheckTransactionWithCurrency(struct soap *soap, const char *tag, int id, const struct __ns3__CheckTransactionWithCurrency *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CheckTransactionWithCurrency(soap, "ns1:CheckTransactionWithCurrency", -1, &a->ns1__CheckTransactionWithCurrency, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CheckTransactionWithCurrency * SOAP_FMAC4 soap_in___ns3__CheckTransactionWithCurrency(struct soap *soap, const char *tag, struct __ns3__CheckTransactionWithCurrency *a, const char *type)
{
	size_t soap_flag_ns1__CheckTransactionWithCurrency = 1;
	short soap_flag;
	a = (struct __ns3__CheckTransactionWithCurrency *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__CheckTransactionWithCurrency, sizeof(struct __ns3__CheckTransactionWithCurrency), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__CheckTransactionWithCurrency(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CheckTransactionWithCurrency && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CheckTransactionWithCurrency(soap, "ns1:CheckTransactionWithCurrency", &a->ns1__CheckTransactionWithCurrency, ""))
				{	soap_flag_ns1__CheckTransactionWithCurrency--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__CheckTransactionWithCurrency(struct soap *soap, const struct __ns3__CheckTransactionWithCurrency *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__CheckTransactionWithCurrency(soap, tag?tag:"-ns3:CheckTransactionWithCurrency", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CheckTransactionWithCurrency * SOAP_FMAC4 soap_get___ns3__CheckTransactionWithCurrency(struct soap *soap, struct __ns3__CheckTransactionWithCurrency *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__CheckTransactionWithCurrency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__CheckTransactionWithCurrency * SOAP_FMAC2 soap_instantiate___ns3__CheckTransactionWithCurrency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__CheckTransactionWithCurrency(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__CheckTransactionWithCurrency, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__CheckTransactionWithCurrency);
		if (size)
			*size = sizeof(struct __ns3__CheckTransactionWithCurrency);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__CheckTransactionWithCurrency[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__CheckTransactionWithCurrency);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__CheckTransactionWithCurrency*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__CheckTransactionWithCurrency(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__CheckTransactionWithCurrency %p -> %p\n", q, p));
	*(struct __ns3__CheckTransactionWithCurrency*)p = *(struct __ns3__CheckTransactionWithCurrency*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__CheckTransaction(struct soap *soap, struct __ns3__CheckTransaction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CheckTransaction = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__CheckTransaction(struct soap *soap, const struct __ns3__CheckTransaction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CheckTransaction(soap, &a->ns1__CheckTransaction);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__CheckTransaction(struct soap *soap, const char *tag, int id, const struct __ns3__CheckTransaction *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CheckTransaction(soap, "ns1:CheckTransaction", -1, &a->ns1__CheckTransaction, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CheckTransaction * SOAP_FMAC4 soap_in___ns3__CheckTransaction(struct soap *soap, const char *tag, struct __ns3__CheckTransaction *a, const char *type)
{
	size_t soap_flag_ns1__CheckTransaction = 1;
	short soap_flag;
	a = (struct __ns3__CheckTransaction *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__CheckTransaction, sizeof(struct __ns3__CheckTransaction), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__CheckTransaction(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CheckTransaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CheckTransaction(soap, "ns1:CheckTransaction", &a->ns1__CheckTransaction, ""))
				{	soap_flag_ns1__CheckTransaction--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__CheckTransaction(struct soap *soap, const struct __ns3__CheckTransaction *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__CheckTransaction(soap, tag?tag:"-ns3:CheckTransaction", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CheckTransaction * SOAP_FMAC4 soap_get___ns3__CheckTransaction(struct soap *soap, struct __ns3__CheckTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__CheckTransaction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns3__CheckTransaction * SOAP_FMAC2 soap_instantiate___ns3__CheckTransaction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__CheckTransaction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__CheckTransaction, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__CheckTransaction);
		if (size)
			*size = sizeof(struct __ns3__CheckTransaction);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns3__CheckTransaction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__CheckTransaction);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__CheckTransaction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__CheckTransaction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__CheckTransaction %p -> %p\n", q, p));
	*(struct __ns3__CheckTransaction*)p = *(struct __ns3__CheckTransaction*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__CommitTransactionNTD(struct soap *soap, struct __ns2__CommitTransactionNTD *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CommitTransactionNTD = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__CommitTransactionNTD(struct soap *soap, const struct __ns2__CommitTransactionNTD *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CommitTransactionNTD(soap, &a->ns1__CommitTransactionNTD);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__CommitTransactionNTD(struct soap *soap, const char *tag, int id, const struct __ns2__CommitTransactionNTD *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CommitTransactionNTD(soap, "ns1:CommitTransactionNTD", -1, &a->ns1__CommitTransactionNTD, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CommitTransactionNTD * SOAP_FMAC4 soap_in___ns2__CommitTransactionNTD(struct soap *soap, const char *tag, struct __ns2__CommitTransactionNTD *a, const char *type)
{
	size_t soap_flag_ns1__CommitTransactionNTD = 1;
	short soap_flag;
	a = (struct __ns2__CommitTransactionNTD *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__CommitTransactionNTD, sizeof(struct __ns2__CommitTransactionNTD), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__CommitTransactionNTD(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CommitTransactionNTD && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CommitTransactionNTD(soap, "ns1:CommitTransactionNTD", &a->ns1__CommitTransactionNTD, ""))
				{	soap_flag_ns1__CommitTransactionNTD--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__CommitTransactionNTD(struct soap *soap, const struct __ns2__CommitTransactionNTD *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__CommitTransactionNTD(soap, tag?tag:"-ns2:CommitTransactionNTD", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CommitTransactionNTD * SOAP_FMAC4 soap_get___ns2__CommitTransactionNTD(struct soap *soap, struct __ns2__CommitTransactionNTD *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__CommitTransactionNTD(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__CommitTransactionNTD * SOAP_FMAC2 soap_instantiate___ns2__CommitTransactionNTD(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__CommitTransactionNTD(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__CommitTransactionNTD, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__CommitTransactionNTD);
		if (size)
			*size = sizeof(struct __ns2__CommitTransactionNTD);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__CommitTransactionNTD[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__CommitTransactionNTD);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__CommitTransactionNTD*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__CommitTransactionNTD(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__CommitTransactionNTD %p -> %p\n", q, p));
	*(struct __ns2__CommitTransactionNTD*)p = *(struct __ns2__CommitTransactionNTD*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__CommitTransaction(struct soap *soap, struct __ns2__CommitTransaction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CommitTransaction = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__CommitTransaction(struct soap *soap, const struct __ns2__CommitTransaction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CommitTransaction(soap, &a->ns1__CommitTransaction);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__CommitTransaction(struct soap *soap, const char *tag, int id, const struct __ns2__CommitTransaction *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CommitTransaction(soap, "ns1:CommitTransaction", -1, &a->ns1__CommitTransaction, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CommitTransaction * SOAP_FMAC4 soap_in___ns2__CommitTransaction(struct soap *soap, const char *tag, struct __ns2__CommitTransaction *a, const char *type)
{
	size_t soap_flag_ns1__CommitTransaction = 1;
	short soap_flag;
	a = (struct __ns2__CommitTransaction *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__CommitTransaction, sizeof(struct __ns2__CommitTransaction), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__CommitTransaction(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CommitTransaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CommitTransaction(soap, "ns1:CommitTransaction", &a->ns1__CommitTransaction, ""))
				{	soap_flag_ns1__CommitTransaction--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__CommitTransaction(struct soap *soap, const struct __ns2__CommitTransaction *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__CommitTransaction(soap, tag?tag:"-ns2:CommitTransaction", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CommitTransaction * SOAP_FMAC4 soap_get___ns2__CommitTransaction(struct soap *soap, struct __ns2__CommitTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__CommitTransaction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__CommitTransaction * SOAP_FMAC2 soap_instantiate___ns2__CommitTransaction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__CommitTransaction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__CommitTransaction, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__CommitTransaction);
		if (size)
			*size = sizeof(struct __ns2__CommitTransaction);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__CommitTransaction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__CommitTransaction);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__CommitTransaction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__CommitTransaction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__CommitTransaction %p -> %p\n", q, p));
	*(struct __ns2__CommitTransaction*)p = *(struct __ns2__CommitTransaction*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__CheckTransactionWithCurrency(struct soap *soap, struct __ns2__CheckTransactionWithCurrency *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CheckTransactionWithCurrency = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__CheckTransactionWithCurrency(struct soap *soap, const struct __ns2__CheckTransactionWithCurrency *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CheckTransactionWithCurrency(soap, &a->ns1__CheckTransactionWithCurrency);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__CheckTransactionWithCurrency(struct soap *soap, const char *tag, int id, const struct __ns2__CheckTransactionWithCurrency *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CheckTransactionWithCurrency(soap, "ns1:CheckTransactionWithCurrency", -1, &a->ns1__CheckTransactionWithCurrency, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CheckTransactionWithCurrency * SOAP_FMAC4 soap_in___ns2__CheckTransactionWithCurrency(struct soap *soap, const char *tag, struct __ns2__CheckTransactionWithCurrency *a, const char *type)
{
	size_t soap_flag_ns1__CheckTransactionWithCurrency = 1;
	short soap_flag;
	a = (struct __ns2__CheckTransactionWithCurrency *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__CheckTransactionWithCurrency, sizeof(struct __ns2__CheckTransactionWithCurrency), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__CheckTransactionWithCurrency(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CheckTransactionWithCurrency && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CheckTransactionWithCurrency(soap, "ns1:CheckTransactionWithCurrency", &a->ns1__CheckTransactionWithCurrency, ""))
				{	soap_flag_ns1__CheckTransactionWithCurrency--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__CheckTransactionWithCurrency(struct soap *soap, const struct __ns2__CheckTransactionWithCurrency *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__CheckTransactionWithCurrency(soap, tag?tag:"-ns2:CheckTransactionWithCurrency", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CheckTransactionWithCurrency * SOAP_FMAC4 soap_get___ns2__CheckTransactionWithCurrency(struct soap *soap, struct __ns2__CheckTransactionWithCurrency *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__CheckTransactionWithCurrency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__CheckTransactionWithCurrency * SOAP_FMAC2 soap_instantiate___ns2__CheckTransactionWithCurrency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__CheckTransactionWithCurrency(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__CheckTransactionWithCurrency, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__CheckTransactionWithCurrency);
		if (size)
			*size = sizeof(struct __ns2__CheckTransactionWithCurrency);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__CheckTransactionWithCurrency[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__CheckTransactionWithCurrency);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__CheckTransactionWithCurrency*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__CheckTransactionWithCurrency(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__CheckTransactionWithCurrency %p -> %p\n", q, p));
	*(struct __ns2__CheckTransactionWithCurrency*)p = *(struct __ns2__CheckTransactionWithCurrency*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__CheckTransaction(struct soap *soap, struct __ns2__CheckTransaction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CheckTransaction = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__CheckTransaction(struct soap *soap, const struct __ns2__CheckTransaction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CheckTransaction(soap, &a->ns1__CheckTransaction);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__CheckTransaction(struct soap *soap, const char *tag, int id, const struct __ns2__CheckTransaction *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CheckTransaction(soap, "ns1:CheckTransaction", -1, &a->ns1__CheckTransaction, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CheckTransaction * SOAP_FMAC4 soap_in___ns2__CheckTransaction(struct soap *soap, const char *tag, struct __ns2__CheckTransaction *a, const char *type)
{
	size_t soap_flag_ns1__CheckTransaction = 1;
	short soap_flag;
	a = (struct __ns2__CheckTransaction *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__CheckTransaction, sizeof(struct __ns2__CheckTransaction), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__CheckTransaction(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CheckTransaction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CheckTransaction(soap, "ns1:CheckTransaction", &a->ns1__CheckTransaction, ""))
				{	soap_flag_ns1__CheckTransaction--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__CheckTransaction(struct soap *soap, const struct __ns2__CheckTransaction *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__CheckTransaction(soap, tag?tag:"-ns2:CheckTransaction", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__CheckTransaction * SOAP_FMAC4 soap_get___ns2__CheckTransaction(struct soap *soap, struct __ns2__CheckTransaction *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__CheckTransaction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns2__CheckTransaction * SOAP_FMAC2 soap_instantiate___ns2__CheckTransaction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__CheckTransaction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__CheckTransaction, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__CheckTransaction);
		if (size)
			*size = sizeof(struct __ns2__CheckTransaction);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns2__CheckTransaction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__CheckTransaction);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__CheckTransaction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__CheckTransaction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__CheckTransaction %p -> %p\n", q, p));
	*(struct __ns2__CheckTransaction*)p = *(struct __ns2__CheckTransaction*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CommitTransactionNTDResponse(struct soap *soap, _ns1__CommitTransactionNTDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CommitTransactionNTDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CommitTransactionNTDResponse(struct soap *soap, const char *tag, int id, _ns1__CommitTransactionNTDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CommitTransactionNTDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CommitTransactionNTDResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CommitTransactionNTDResponse(struct soap *soap, const char *tag, _ns1__CommitTransactionNTDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CommitTransactionNTDResponse **)soap_malloc(soap, sizeof(_ns1__CommitTransactionNTDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CommitTransactionNTDResponse *)soap_instantiate__ns1__CommitTransactionNTDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CommitTransactionNTDResponse ** p = (_ns1__CommitTransactionNTDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CommitTransactionNTDResponse, sizeof(_ns1__CommitTransactionNTDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CommitTransactionNTDResponse(struct soap *soap, _ns1__CommitTransactionNTDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CommitTransactionNTDResponse);
	if (soap_out_PointerTo_ns1__CommitTransactionNTDResponse(soap, tag?tag:"ns1:CommitTransactionNTDResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CommitTransactionNTDResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CommitTransactionNTDResponse(struct soap *soap, _ns1__CommitTransactionNTDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CommitTransactionNTDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CommitTransactionNTD(struct soap *soap, _ns1__CommitTransactionNTD *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CommitTransactionNTD))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CommitTransactionNTD(struct soap *soap, const char *tag, int id, _ns1__CommitTransactionNTD *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CommitTransactionNTD);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CommitTransactionNTD ** SOAP_FMAC4 soap_in_PointerTo_ns1__CommitTransactionNTD(struct soap *soap, const char *tag, _ns1__CommitTransactionNTD **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CommitTransactionNTD **)soap_malloc(soap, sizeof(_ns1__CommitTransactionNTD *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CommitTransactionNTD *)soap_instantiate__ns1__CommitTransactionNTD(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CommitTransactionNTD ** p = (_ns1__CommitTransactionNTD **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CommitTransactionNTD, sizeof(_ns1__CommitTransactionNTD), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CommitTransactionNTD(struct soap *soap, _ns1__CommitTransactionNTD *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CommitTransactionNTD);
	if (soap_out_PointerTo_ns1__CommitTransactionNTD(soap, tag?tag:"ns1:CommitTransactionNTD", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CommitTransactionNTD ** SOAP_FMAC4 soap_get_PointerTo_ns1__CommitTransactionNTD(struct soap *soap, _ns1__CommitTransactionNTD **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CommitTransactionNTD(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CommitTransactionResponse(struct soap *soap, _ns1__CommitTransactionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CommitTransactionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CommitTransactionResponse(struct soap *soap, const char *tag, int id, _ns1__CommitTransactionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CommitTransactionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CommitTransactionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CommitTransactionResponse(struct soap *soap, const char *tag, _ns1__CommitTransactionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CommitTransactionResponse **)soap_malloc(soap, sizeof(_ns1__CommitTransactionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CommitTransactionResponse *)soap_instantiate__ns1__CommitTransactionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CommitTransactionResponse ** p = (_ns1__CommitTransactionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CommitTransactionResponse, sizeof(_ns1__CommitTransactionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CommitTransactionResponse(struct soap *soap, _ns1__CommitTransactionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CommitTransactionResponse);
	if (soap_out_PointerTo_ns1__CommitTransactionResponse(soap, tag?tag:"ns1:CommitTransactionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CommitTransactionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CommitTransactionResponse(struct soap *soap, _ns1__CommitTransactionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CommitTransactionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CommitTransaction(struct soap *soap, _ns1__CommitTransaction *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CommitTransaction))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CommitTransaction(struct soap *soap, const char *tag, int id, _ns1__CommitTransaction *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CommitTransaction);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CommitTransaction ** SOAP_FMAC4 soap_in_PointerTo_ns1__CommitTransaction(struct soap *soap, const char *tag, _ns1__CommitTransaction **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CommitTransaction **)soap_malloc(soap, sizeof(_ns1__CommitTransaction *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CommitTransaction *)soap_instantiate__ns1__CommitTransaction(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CommitTransaction ** p = (_ns1__CommitTransaction **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CommitTransaction, sizeof(_ns1__CommitTransaction), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CommitTransaction(struct soap *soap, _ns1__CommitTransaction *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CommitTransaction);
	if (soap_out_PointerTo_ns1__CommitTransaction(soap, tag?tag:"ns1:CommitTransaction", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CommitTransaction ** SOAP_FMAC4 soap_get_PointerTo_ns1__CommitTransaction(struct soap *soap, _ns1__CommitTransaction **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CommitTransaction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, _ns1__CheckTransactionWithCurrencyResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, const char *tag, int id, _ns1__CheckTransactionWithCurrencyResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CheckTransactionWithCurrencyResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, const char *tag, _ns1__CheckTransactionWithCurrencyResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CheckTransactionWithCurrencyResponse **)soap_malloc(soap, sizeof(_ns1__CheckTransactionWithCurrencyResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CheckTransactionWithCurrencyResponse *)soap_instantiate__ns1__CheckTransactionWithCurrencyResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CheckTransactionWithCurrencyResponse ** p = (_ns1__CheckTransactionWithCurrencyResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CheckTransactionWithCurrencyResponse, sizeof(_ns1__CheckTransactionWithCurrencyResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, _ns1__CheckTransactionWithCurrencyResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CheckTransactionWithCurrencyResponse);
	if (soap_out_PointerTo_ns1__CheckTransactionWithCurrencyResponse(soap, tag?tag:"ns1:CheckTransactionWithCurrencyResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CheckTransactionWithCurrencyResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CheckTransactionWithCurrencyResponse(struct soap *soap, _ns1__CheckTransactionWithCurrencyResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CheckTransactionWithCurrencyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CheckTransactionWithCurrency(struct soap *soap, _ns1__CheckTransactionWithCurrency *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CheckTransactionWithCurrency))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CheckTransactionWithCurrency(struct soap *soap, const char *tag, int id, _ns1__CheckTransactionWithCurrency *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CheckTransactionWithCurrency);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CheckTransactionWithCurrency ** SOAP_FMAC4 soap_in_PointerTo_ns1__CheckTransactionWithCurrency(struct soap *soap, const char *tag, _ns1__CheckTransactionWithCurrency **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CheckTransactionWithCurrency **)soap_malloc(soap, sizeof(_ns1__CheckTransactionWithCurrency *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CheckTransactionWithCurrency *)soap_instantiate__ns1__CheckTransactionWithCurrency(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CheckTransactionWithCurrency ** p = (_ns1__CheckTransactionWithCurrency **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CheckTransactionWithCurrency, sizeof(_ns1__CheckTransactionWithCurrency), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CheckTransactionWithCurrency(struct soap *soap, _ns1__CheckTransactionWithCurrency *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CheckTransactionWithCurrency);
	if (soap_out_PointerTo_ns1__CheckTransactionWithCurrency(soap, tag?tag:"ns1:CheckTransactionWithCurrency", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CheckTransactionWithCurrency ** SOAP_FMAC4 soap_get_PointerTo_ns1__CheckTransactionWithCurrency(struct soap *soap, _ns1__CheckTransactionWithCurrency **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CheckTransactionWithCurrency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CheckTransactionResponse(struct soap *soap, _ns1__CheckTransactionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CheckTransactionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CheckTransactionResponse(struct soap *soap, const char *tag, int id, _ns1__CheckTransactionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CheckTransactionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CheckTransactionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CheckTransactionResponse(struct soap *soap, const char *tag, _ns1__CheckTransactionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CheckTransactionResponse **)soap_malloc(soap, sizeof(_ns1__CheckTransactionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CheckTransactionResponse *)soap_instantiate__ns1__CheckTransactionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CheckTransactionResponse ** p = (_ns1__CheckTransactionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CheckTransactionResponse, sizeof(_ns1__CheckTransactionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CheckTransactionResponse(struct soap *soap, _ns1__CheckTransactionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CheckTransactionResponse);
	if (soap_out_PointerTo_ns1__CheckTransactionResponse(soap, tag?tag:"ns1:CheckTransactionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CheckTransactionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CheckTransactionResponse(struct soap *soap, _ns1__CheckTransactionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CheckTransactionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CheckTransaction(struct soap *soap, _ns1__CheckTransaction *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CheckTransaction))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CheckTransaction(struct soap *soap, const char *tag, int id, _ns1__CheckTransaction *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CheckTransaction);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CheckTransaction ** SOAP_FMAC4 soap_in_PointerTo_ns1__CheckTransaction(struct soap *soap, const char *tag, _ns1__CheckTransaction **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CheckTransaction **)soap_malloc(soap, sizeof(_ns1__CheckTransaction *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CheckTransaction *)soap_instantiate__ns1__CheckTransaction(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CheckTransaction ** p = (_ns1__CheckTransaction **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CheckTransaction, sizeof(_ns1__CheckTransaction), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CheckTransaction(struct soap *soap, _ns1__CheckTransaction *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CheckTransaction);
	if (soap_out_PointerTo_ns1__CheckTransaction(soap, tag?tag:"ns1:CheckTransaction", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CheckTransaction ** SOAP_FMAC4 soap_get_PointerTo_ns1__CheckTransaction(struct soap *soap, _ns1__CheckTransaction **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CheckTransaction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, int id, ns1__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfString **)soap_malloc(soap, sizeof(ns1__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfString *)soap_instantiate_ns1__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfString ** p = (ns1__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfString);
	if (soap_out_PointerTons1__ArrayOfString(soap, tag?tag:"ns1:ArrayOfString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
		return NULL;
	std::string n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		soap_default_std__string(soap, &n);
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{
			if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
