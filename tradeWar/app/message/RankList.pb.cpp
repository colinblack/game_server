// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankList.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RankList.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoRankList {

namespace {

const ::google::protobuf::Descriptor* RankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankItemLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankItemLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankCombat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankCombat_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankTransport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankTransport_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewServerRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewServerRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewServerRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewServerRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRank_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RankList_2eproto() {
  protobuf_AddDesc_RankList_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RankList.proto");
  GOOGLE_CHECK(file != NULL);
  RankItem_descriptor_ = file->message_type(0);
  static const int RankItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, pic_),
  };
  RankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankItem_descriptor_,
      RankItem::default_instance_,
      RankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankItem));
  RankItemLevel_descriptor_ = file->message_type(1);
  static const int RankItemLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItemLevel, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItemLevel, data_),
  };
  RankItemLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankItemLevel_descriptor_,
      RankItemLevel::default_instance_,
      RankItemLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItemLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankItemLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankItemLevel));
  RankExp_descriptor_ = file->message_type(2);
  static const int RankExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankExp, data_),
  };
  RankExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankExp_descriptor_,
      RankExp::default_instance_,
      RankExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankExp));
  RankCombat_descriptor_ = file->message_type(3);
  static const int RankCombat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCombat, data_),
  };
  RankCombat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankCombat_descriptor_,
      RankCombat::default_instance_,
      RankCombat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCombat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankCombat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankCombat));
  RankTransport_descriptor_ = file->message_type(4);
  static const int RankTransport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTransport, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTransport, ts_),
  };
  RankTransport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankTransport_descriptor_,
      RankTransport::default_instance_,
      RankTransport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTransport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankTransport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankTransport));
  NewServerRankItem_descriptor_ = file->message_type(5);
  static const int NewServerRankItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRankItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRankItem, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRankItem, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRankItem, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRankItem, data_),
  };
  NewServerRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewServerRankItem_descriptor_,
      NewServerRankItem::default_instance_,
      NewServerRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewServerRankItem));
  NewServerRank_descriptor_ = file->message_type(6);
  static const int NewServerRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRank, ranks_),
  };
  NewServerRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewServerRank_descriptor_,
      NewServerRank::default_instance_,
      NewServerRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewServerRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewServerRank));
  ActRankItem_descriptor_ = file->message_type(7);
  static const int ActRankItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRankItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRankItem, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRankItem, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRankItem, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRankItem, data_),
  };
  ActRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActRankItem_descriptor_,
      ActRankItem::default_instance_,
      ActRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActRankItem));
  ActRank_descriptor_ = file->message_type(8);
  static const int ActRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRank, ranks_),
  };
  ActRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActRank_descriptor_,
      ActRank::default_instance_,
      ActRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActRank));
  BossRankItem_descriptor_ = file->message_type(9);
  static const int BossRankItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRankItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRankItem, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRankItem, name_),
  };
  BossRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossRankItem_descriptor_,
      BossRankItem::default_instance_,
      BossRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossRankItem));
  BossRank_descriptor_ = file->message_type(10);
  static const int BossRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, ranks_),
  };
  BossRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossRank_descriptor_,
      BossRank::default_instance_,
      BossRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossRank));
  ArenaRank_descriptor_ = file->message_type(11);
  static const int ArenaRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRank, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRank, ranks_),
  };
  ArenaRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRank_descriptor_,
      ArenaRank::default_instance_,
      ArenaRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRank));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RankList_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankItem_descriptor_, &RankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankItemLevel_descriptor_, &RankItemLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankExp_descriptor_, &RankExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankCombat_descriptor_, &RankCombat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankTransport_descriptor_, &RankTransport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewServerRankItem_descriptor_, &NewServerRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewServerRank_descriptor_, &NewServerRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActRankItem_descriptor_, &ActRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActRank_descriptor_, &ActRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossRankItem_descriptor_, &BossRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossRank_descriptor_, &BossRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRank_descriptor_, &ArenaRank::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RankList_2eproto() {
  delete RankItem::default_instance_;
  delete RankItem_reflection_;
  delete RankItemLevel::default_instance_;
  delete RankItemLevel_reflection_;
  delete RankExp::default_instance_;
  delete RankExp_reflection_;
  delete RankCombat::default_instance_;
  delete RankCombat_reflection_;
  delete RankTransport::default_instance_;
  delete RankTransport_reflection_;
  delete NewServerRankItem::default_instance_;
  delete NewServerRankItem_reflection_;
  delete NewServerRank::default_instance_;
  delete NewServerRank_reflection_;
  delete ActRankItem::default_instance_;
  delete ActRankItem_reflection_;
  delete ActRank::default_instance_;
  delete ActRank_reflection_;
  delete BossRankItem::default_instance_;
  delete BossRankItem_reflection_;
  delete BossRank::default_instance_;
  delete BossRank_reflection_;
  delete ArenaRank::default_instance_;
  delete ArenaRank_reflection_;
}

void protobuf_AddDesc_RankList_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016RankList.proto\022\rProtoRankList\"A\n\010RankI"
    "tem\022\013\n\003uid\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\022\014\n\004name\030"
    "\003 \002(\t\022\013\n\003pic\030\004 \002(\t\"B\n\rRankItemLevel\022\n\n\002l"
    "v\030\001 \002(\r\022%\n\004data\030\002 \003(\0132\027.ProtoRankList.Ra"
    "nkItem\"5\n\007RankExp\022*\n\004data\030\001 \003(\0132\034.ProtoR"
    "ankList.RankItemLevel\"8\n\nRankCombat\022*\n\004d"
    "ata\030\001 \003(\0132\034.ProtoRankList.RankItemLevel\""
    "G\n\rRankTransport\022*\n\004data\030\001 \003(\0132\034.ProtoRa"
    "nkList.RankItemLevel\022\n\n\002ts\030\002 \002(\r\"o\n\021NewS"
    "erverRankItem\022\n\n\002id\030\001 \002(\r\022\013\n\003ver\030\002 \002(\r\022\n"
    "\n\002ts\030\003 \002(\r\022\016\n\006reward\030\004 \002(\010\022%\n\004data\030\005 \003(\013"
    "2\027.ProtoRankList.RankItem\"@\n\rNewServerRa"
    "nk\022/\n\005ranks\030\001 \003(\0132 .ProtoRankList.NewSer"
    "verRankItem\"i\n\013ActRankItem\022\n\n\002id\030\001 \002(\r\022\013"
    "\n\003ver\030\002 \002(\r\022\n\n\002ts\030\003 \002(\r\022\016\n\006reward\030\004 \002(\010\022"
    "%\n\004data\030\005 \003(\0132\027.ProtoRankList.RankItem\"4"
    "\n\007ActRank\022)\n\005ranks\030\001 \003(\0132\032.ProtoRankList"
    ".ActRankItem\"7\n\014BossRankItem\022\013\n\003uid\030\001 \002("
    "\r\022\014\n\004hurt\030\002 \002(\004\022\014\n\004name\030\003 \002(\t\"P\n\010BossRan"
    "k\022\n\n\002ts\030\001 \002(\r\022\014\n\004flag\030\002 \002(\010\022*\n\005ranks\030\003 \003"
    "(\0132\033.ProtoRankList.BossRankItem\"(\n\tArena"
    "Rank\022\014\n\004flag\030\001 \002(\010\022\r\n\005ranks\030\002 \003(\r", 873);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RankList.proto", &protobuf_RegisterTypes);
  RankItem::default_instance_ = new RankItem();
  RankItemLevel::default_instance_ = new RankItemLevel();
  RankExp::default_instance_ = new RankExp();
  RankCombat::default_instance_ = new RankCombat();
  RankTransport::default_instance_ = new RankTransport();
  NewServerRankItem::default_instance_ = new NewServerRankItem();
  NewServerRank::default_instance_ = new NewServerRank();
  ActRankItem::default_instance_ = new ActRankItem();
  ActRank::default_instance_ = new ActRank();
  BossRankItem::default_instance_ = new BossRankItem();
  BossRank::default_instance_ = new BossRank();
  ArenaRank::default_instance_ = new ArenaRank();
  RankItem::default_instance_->InitAsDefaultInstance();
  RankItemLevel::default_instance_->InitAsDefaultInstance();
  RankExp::default_instance_->InitAsDefaultInstance();
  RankCombat::default_instance_->InitAsDefaultInstance();
  RankTransport::default_instance_->InitAsDefaultInstance();
  NewServerRankItem::default_instance_->InitAsDefaultInstance();
  NewServerRank::default_instance_->InitAsDefaultInstance();
  ActRankItem::default_instance_->InitAsDefaultInstance();
  ActRank::default_instance_->InitAsDefaultInstance();
  BossRankItem::default_instance_->InitAsDefaultInstance();
  BossRank::default_instance_->InitAsDefaultInstance();
  ArenaRank::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RankList_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RankList_2eproto {
  StaticDescriptorInitializer_RankList_2eproto() {
    protobuf_AddDesc_RankList_2eproto();
  }
} static_descriptor_initializer_RankList_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RankItem::kUidFieldNumber;
const int RankItem::kValueFieldNumber;
const int RankItem::kNameFieldNumber;
const int RankItem::kPicFieldNumber;
#endif  // !_MSC_VER

RankItem::RankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.RankItem)
}

void RankItem::InitAsDefaultInstance() {
}

RankItem::RankItem(const RankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.RankItem)
}

void RankItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  value_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankItem::~RankItem() {
  // @@protoc_insertion_point(destructor:ProtoRankList.RankItem)
  SharedDtor();
}

void RankItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pic_;
  }
  if (this != default_instance_) {
  }
}

void RankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankItem_descriptor_;
}

const RankItem& RankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

RankItem* RankItem::default_instance_ = NULL;

RankItem* RankItem::New() const {
  return new RankItem;
}

void RankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, value_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pic_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.RankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pic;
        break;
      }

      // required string pic = 4;
      case 4: {
        if (tag == 34) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.RankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.RankItem)
  return false;
#undef DO_
}

void RankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.RankItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required string pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.RankItem)
}

::google::protobuf::uint8* RankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.RankItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.RankItem)
  return target;
}

int RankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string pic = 4;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankItem::MergeFrom(const RankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankItem::CopyFrom(const RankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RankItem::Swap(RankItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(value_, other->value_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankItem_descriptor_;
  metadata.reflection = RankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankItemLevel::kLvFieldNumber;
const int RankItemLevel::kDataFieldNumber;
#endif  // !_MSC_VER

RankItemLevel::RankItemLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.RankItemLevel)
}

void RankItemLevel::InitAsDefaultInstance() {
}

RankItemLevel::RankItemLevel(const RankItemLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.RankItemLevel)
}

void RankItemLevel::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankItemLevel::~RankItemLevel() {
  // @@protoc_insertion_point(destructor:ProtoRankList.RankItemLevel)
  SharedDtor();
}

void RankItemLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankItemLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankItemLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankItemLevel_descriptor_;
}

const RankItemLevel& RankItemLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

RankItemLevel* RankItemLevel::default_instance_ = NULL;

RankItemLevel* RankItemLevel::New() const {
  return new RankItemLevel;
}

void RankItemLevel::Clear() {
  lv_ = 0u;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankItemLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.RankItemLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lv = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .ProtoRankList.RankItem data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.RankItemLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.RankItemLevel)
  return false;
#undef DO_
}

void RankItemLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.RankItemLevel)
  // required uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  // repeated .ProtoRankList.RankItem data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.RankItemLevel)
}

::google::protobuf::uint8* RankItemLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.RankItemLevel)
  // required uint32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  // repeated .ProtoRankList.RankItem data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.RankItemLevel)
  return target;
}

int RankItemLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  // repeated .ProtoRankList.RankItem data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankItemLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankItemLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankItemLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankItemLevel::MergeFrom(const RankItemLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankItemLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankItemLevel::CopyFrom(const RankItemLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankItemLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RankItemLevel::Swap(RankItemLevel* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankItemLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankItemLevel_descriptor_;
  metadata.reflection = RankItemLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankExp::kDataFieldNumber;
#endif  // !_MSC_VER

RankExp::RankExp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.RankExp)
}

void RankExp::InitAsDefaultInstance() {
}

RankExp::RankExp(const RankExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.RankExp)
}

void RankExp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankExp::~RankExp() {
  // @@protoc_insertion_point(destructor:ProtoRankList.RankExp)
  SharedDtor();
}

void RankExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankExp_descriptor_;
}

const RankExp& RankExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

RankExp* RankExp::default_instance_ = NULL;

RankExp* RankExp::New() const {
  return new RankExp;
}

void RankExp::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.RankExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoRankList.RankItemLevel data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.RankExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.RankExp)
  return false;
#undef DO_
}

void RankExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.RankExp)
  // repeated .ProtoRankList.RankItemLevel data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.RankExp)
}

::google::protobuf::uint8* RankExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.RankExp)
  // repeated .ProtoRankList.RankItemLevel data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.RankExp)
  return target;
}

int RankExp::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoRankList.RankItemLevel data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankExp::MergeFrom(const RankExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankExp::CopyFrom(const RankExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankExp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RankExp::Swap(RankExp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankExp_descriptor_;
  metadata.reflection = RankExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankCombat::kDataFieldNumber;
#endif  // !_MSC_VER

RankCombat::RankCombat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.RankCombat)
}

void RankCombat::InitAsDefaultInstance() {
}

RankCombat::RankCombat(const RankCombat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.RankCombat)
}

void RankCombat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankCombat::~RankCombat() {
  // @@protoc_insertion_point(destructor:ProtoRankList.RankCombat)
  SharedDtor();
}

void RankCombat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankCombat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankCombat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankCombat_descriptor_;
}

const RankCombat& RankCombat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

RankCombat* RankCombat::default_instance_ = NULL;

RankCombat* RankCombat::New() const {
  return new RankCombat;
}

void RankCombat::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankCombat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.RankCombat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoRankList.RankItemLevel data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.RankCombat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.RankCombat)
  return false;
#undef DO_
}

void RankCombat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.RankCombat)
  // repeated .ProtoRankList.RankItemLevel data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.RankCombat)
}

::google::protobuf::uint8* RankCombat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.RankCombat)
  // repeated .ProtoRankList.RankItemLevel data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.RankCombat)
  return target;
}

int RankCombat::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoRankList.RankItemLevel data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankCombat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankCombat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankCombat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankCombat::MergeFrom(const RankCombat& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankCombat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankCombat::CopyFrom(const RankCombat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankCombat::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RankCombat::Swap(RankCombat* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankCombat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankCombat_descriptor_;
  metadata.reflection = RankCombat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankTransport::kDataFieldNumber;
const int RankTransport::kTsFieldNumber;
#endif  // !_MSC_VER

RankTransport::RankTransport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.RankTransport)
}

void RankTransport::InitAsDefaultInstance() {
}

RankTransport::RankTransport(const RankTransport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.RankTransport)
}

void RankTransport::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankTransport::~RankTransport() {
  // @@protoc_insertion_point(destructor:ProtoRankList.RankTransport)
  SharedDtor();
}

void RankTransport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankTransport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankTransport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankTransport_descriptor_;
}

const RankTransport& RankTransport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

RankTransport* RankTransport::default_instance_ = NULL;

RankTransport* RankTransport::New() const {
  return new RankTransport;
}

void RankTransport::Clear() {
  ts_ = 0u;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankTransport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.RankTransport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoRankList.RankItemLevel data = 1;
      case 1: {
        if (tag == 10) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.RankTransport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.RankTransport)
  return false;
#undef DO_
}

void RankTransport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.RankTransport)
  // repeated .ProtoRankList.RankItemLevel data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.RankTransport)
}

::google::protobuf::uint8* RankTransport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.RankTransport)
  // repeated .ProtoRankList.RankItemLevel data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.RankTransport)
  return target;
}

int RankTransport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  // repeated .ProtoRankList.RankItemLevel data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankTransport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankTransport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankTransport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankTransport::MergeFrom(const RankTransport& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankTransport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankTransport::CopyFrom(const RankTransport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankTransport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void RankTransport::Swap(RankTransport* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankTransport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankTransport_descriptor_;
  metadata.reflection = RankTransport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewServerRankItem::kIdFieldNumber;
const int NewServerRankItem::kVerFieldNumber;
const int NewServerRankItem::kTsFieldNumber;
const int NewServerRankItem::kRewardFieldNumber;
const int NewServerRankItem::kDataFieldNumber;
#endif  // !_MSC_VER

NewServerRankItem::NewServerRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.NewServerRankItem)
}

void NewServerRankItem::InitAsDefaultInstance() {
}

NewServerRankItem::NewServerRankItem(const NewServerRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.NewServerRankItem)
}

void NewServerRankItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ver_ = 0u;
  ts_ = 0u;
  reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewServerRankItem::~NewServerRankItem() {
  // @@protoc_insertion_point(destructor:ProtoRankList.NewServerRankItem)
  SharedDtor();
}

void NewServerRankItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewServerRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewServerRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewServerRankItem_descriptor_;
}

const NewServerRankItem& NewServerRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

NewServerRankItem* NewServerRankItem::default_instance_ = NULL;

NewServerRankItem* NewServerRankItem::New() const {
  return new NewServerRankItem;
}

void NewServerRankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewServerRankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, reward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewServerRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.NewServerRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ver;
        break;
      }

      // required uint32 ver = 2;
      case 2: {
        if (tag == 16) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // required uint32 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // required bool reward = 4;
      case 4: {
        if (tag == 32) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .ProtoRankList.RankItem data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.NewServerRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.NewServerRankItem)
  return false;
#undef DO_
}

void NewServerRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.NewServerRankItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver(), output);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }

  // required bool reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reward(), output);
  }

  // repeated .ProtoRankList.RankItem data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.NewServerRankItem)
}

::google::protobuf::uint8* NewServerRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.NewServerRankItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 ver = 2;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver(), target);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }

  // required bool reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reward(), target);
  }

  // repeated .ProtoRankList.RankItem data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.NewServerRankItem)
  return target;
}

int NewServerRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 ver = 2;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required bool reward = 4;
    if (has_reward()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoRankList.RankItem data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewServerRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewServerRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewServerRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewServerRankItem::MergeFrom(const NewServerRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewServerRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewServerRankItem::CopyFrom(const NewServerRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewServerRankItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void NewServerRankItem::Swap(NewServerRankItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ver_, other->ver_);
    std::swap(ts_, other->ts_);
    std::swap(reward_, other->reward_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewServerRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewServerRankItem_descriptor_;
  metadata.reflection = NewServerRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewServerRank::kRanksFieldNumber;
#endif  // !_MSC_VER

NewServerRank::NewServerRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.NewServerRank)
}

void NewServerRank::InitAsDefaultInstance() {
}

NewServerRank::NewServerRank(const NewServerRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.NewServerRank)
}

void NewServerRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewServerRank::~NewServerRank() {
  // @@protoc_insertion_point(destructor:ProtoRankList.NewServerRank)
  SharedDtor();
}

void NewServerRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewServerRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewServerRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewServerRank_descriptor_;
}

const NewServerRank& NewServerRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

NewServerRank* NewServerRank::default_instance_ = NULL;

NewServerRank* NewServerRank::New() const {
  return new NewServerRank;
}

void NewServerRank::Clear() {
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewServerRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.NewServerRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoRankList.NewServerRankItem ranks = 1;
      case 1: {
        if (tag == 10) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.NewServerRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.NewServerRank)
  return false;
#undef DO_
}

void NewServerRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.NewServerRank)
  // repeated .ProtoRankList.NewServerRankItem ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.NewServerRank)
}

::google::protobuf::uint8* NewServerRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.NewServerRank)
  // repeated .ProtoRankList.NewServerRankItem ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.NewServerRank)
  return target;
}

int NewServerRank::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoRankList.NewServerRankItem ranks = 1;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewServerRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewServerRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewServerRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewServerRank::MergeFrom(const NewServerRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewServerRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewServerRank::CopyFrom(const NewServerRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewServerRank::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ranks())) return false;
  return true;
}

void NewServerRank::Swap(NewServerRank* other) {
  if (other != this) {
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewServerRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewServerRank_descriptor_;
  metadata.reflection = NewServerRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActRankItem::kIdFieldNumber;
const int ActRankItem::kVerFieldNumber;
const int ActRankItem::kTsFieldNumber;
const int ActRankItem::kRewardFieldNumber;
const int ActRankItem::kDataFieldNumber;
#endif  // !_MSC_VER

ActRankItem::ActRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.ActRankItem)
}

void ActRankItem::InitAsDefaultInstance() {
}

ActRankItem::ActRankItem(const ActRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.ActRankItem)
}

void ActRankItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ver_ = 0u;
  ts_ = 0u;
  reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActRankItem::~ActRankItem() {
  // @@protoc_insertion_point(destructor:ProtoRankList.ActRankItem)
  SharedDtor();
}

void ActRankItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActRankItem_descriptor_;
}

const ActRankItem& ActRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

ActRankItem* ActRankItem::default_instance_ = NULL;

ActRankItem* ActRankItem::New() const {
  return new ActRankItem;
}

void ActRankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActRankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, reward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.ActRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ver;
        break;
      }

      // required uint32 ver = 2;
      case 2: {
        if (tag == 16) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // required uint32 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // required bool reward = 4;
      case 4: {
        if (tag == 32) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .ProtoRankList.RankItem data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.ActRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.ActRankItem)
  return false;
#undef DO_
}

void ActRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.ActRankItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver(), output);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }

  // required bool reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reward(), output);
  }

  // repeated .ProtoRankList.RankItem data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.ActRankItem)
}

::google::protobuf::uint8* ActRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.ActRankItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 ver = 2;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver(), target);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }

  // required bool reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reward(), target);
  }

  // repeated .ProtoRankList.RankItem data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.ActRankItem)
  return target;
}

int ActRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 ver = 2;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required bool reward = 4;
    if (has_reward()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoRankList.RankItem data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActRankItem::MergeFrom(const ActRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActRankItem::CopyFrom(const ActRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActRankItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void ActRankItem::Swap(ActRankItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ver_, other->ver_);
    std::swap(ts_, other->ts_);
    std::swap(reward_, other->reward_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActRankItem_descriptor_;
  metadata.reflection = ActRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActRank::kRanksFieldNumber;
#endif  // !_MSC_VER

ActRank::ActRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.ActRank)
}

void ActRank::InitAsDefaultInstance() {
}

ActRank::ActRank(const ActRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.ActRank)
}

void ActRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActRank::~ActRank() {
  // @@protoc_insertion_point(destructor:ProtoRankList.ActRank)
  SharedDtor();
}

void ActRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActRank_descriptor_;
}

const ActRank& ActRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

ActRank* ActRank::default_instance_ = NULL;

ActRank* ActRank::New() const {
  return new ActRank;
}

void ActRank::Clear() {
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.ActRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoRankList.ActRankItem ranks = 1;
      case 1: {
        if (tag == 10) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.ActRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.ActRank)
  return false;
#undef DO_
}

void ActRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.ActRank)
  // repeated .ProtoRankList.ActRankItem ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.ActRank)
}

::google::protobuf::uint8* ActRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.ActRank)
  // repeated .ProtoRankList.ActRankItem ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.ActRank)
  return target;
}

int ActRank::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoRankList.ActRankItem ranks = 1;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActRank::MergeFrom(const ActRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActRank::CopyFrom(const ActRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActRank::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->ranks())) return false;
  return true;
}

void ActRank::Swap(ActRank* other) {
  if (other != this) {
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActRank_descriptor_;
  metadata.reflection = ActRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossRankItem::kUidFieldNumber;
const int BossRankItem::kHurtFieldNumber;
const int BossRankItem::kNameFieldNumber;
#endif  // !_MSC_VER

BossRankItem::BossRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.BossRankItem)
}

void BossRankItem::InitAsDefaultInstance() {
}

BossRankItem::BossRankItem(const BossRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.BossRankItem)
}

void BossRankItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  hurt_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossRankItem::~BossRankItem() {
  // @@protoc_insertion_point(destructor:ProtoRankList.BossRankItem)
  SharedDtor();
}

void BossRankItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BossRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossRankItem_descriptor_;
}

const BossRankItem& BossRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

BossRankItem* BossRankItem::default_instance_ = NULL;

BossRankItem* BossRankItem::New() const {
  return new BossRankItem;
}

void BossRankItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uid_ = 0u;
    hurt_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.BossRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hurt;
        break;
      }

      // required uint64 hurt = 2;
      case 2: {
        if (tag == 16) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.BossRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.BossRankItem)
  return false;
#undef DO_
}

void BossRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.BossRankItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint64 hurt = 2;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hurt(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.BossRankItem)
}

::google::protobuf::uint8* BossRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.BossRankItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint64 hurt = 2;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hurt(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.BossRankItem)
  return target;
}

int BossRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint64 hurt = 2;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hurt());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossRankItem::MergeFrom(const BossRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossRankItem::CopyFrom(const BossRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossRankItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BossRankItem::Swap(BossRankItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(hurt_, other->hurt_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossRankItem_descriptor_;
  metadata.reflection = BossRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossRank::kTsFieldNumber;
const int BossRank::kFlagFieldNumber;
const int BossRank::kRanksFieldNumber;
#endif  // !_MSC_VER

BossRank::BossRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.BossRank)
}

void BossRank::InitAsDefaultInstance() {
}

BossRank::BossRank(const BossRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.BossRank)
}

void BossRank::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossRank::~BossRank() {
  // @@protoc_insertion_point(destructor:ProtoRankList.BossRank)
  SharedDtor();
}

void BossRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossRank_descriptor_;
}

const BossRank& BossRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

BossRank* BossRank::default_instance_ = NULL;

BossRank* BossRank::New() const {
  return new BossRank;
}

void BossRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BossRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ts_, flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.BossRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required bool flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        break;
      }

      // repeated .ProtoRankList.BossRankItem ranks = 3;
      case 3: {
        if (tag == 26) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.BossRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.BossRank)
  return false;
#undef DO_
}

void BossRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.BossRank)
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }

  // required bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  // repeated .ProtoRankList.BossRankItem ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.BossRank)
}

::google::protobuf::uint8* BossRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.BossRank)
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }

  // required bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  // repeated .ProtoRankList.BossRankItem ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.BossRank)
  return target;
}

int BossRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoRankList.BossRankItem ranks = 3;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossRank::MergeFrom(const BossRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossRank::CopyFrom(const BossRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ranks())) return false;
  return true;
}

void BossRank::Swap(BossRank* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(flag_, other->flag_);
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossRank_descriptor_;
  metadata.reflection = BossRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRank::kFlagFieldNumber;
const int ArenaRank::kRanksFieldNumber;
#endif  // !_MSC_VER

ArenaRank::ArenaRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoRankList.ArenaRank)
}

void ArenaRank::InitAsDefaultInstance() {
}

ArenaRank::ArenaRank(const ArenaRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoRankList.ArenaRank)
}

void ArenaRank::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRank::~ArenaRank() {
  // @@protoc_insertion_point(destructor:ProtoRankList.ArenaRank)
  SharedDtor();
}

void ArenaRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRank_descriptor_;
}

const ArenaRank& ArenaRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RankList_2eproto();
  return *default_instance_;
}

ArenaRank* ArenaRank::default_instance_ = NULL;

ArenaRank* ArenaRank::New() const {
  return new ArenaRank;
}

void ArenaRank::Clear() {
  flag_ = false;
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoRankList.ArenaRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranks;
        break;
      }

      // repeated uint32 ranks = 2;
      case 2: {
        if (tag == 16) {
         parse_ranks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_ranks())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ranks())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoRankList.ArenaRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoRankList.ArenaRank)
  return false;
#undef DO_
}

void ArenaRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoRankList.ArenaRank)
  // required bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }

  // repeated uint32 ranks = 2;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoRankList.ArenaRank)
}

::google::protobuf::uint8* ArenaRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoRankList.ArenaRank)
  // required bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }

  // repeated uint32 ranks = 2;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoRankList.ArenaRank)
  return target;
}

int ArenaRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 ranks = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ranks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ranks(i));
    }
    total_size += 1 * this->ranks_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRank::MergeFrom(const ArenaRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRank::CopyFrom(const ArenaRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaRank::Swap(ArenaRank* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRank_descriptor_;
  metadata.reflection = ArenaRank_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoRankList

// @@protoc_insertion_point(global_scope)
