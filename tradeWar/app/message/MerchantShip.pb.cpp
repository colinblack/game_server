// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MerchantShip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MerchantShip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MerchantShip {

namespace {

const ::google::protobuf::Descriptor* MerchantShipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MerchantShipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MerchantShipWait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MerchantShipWait_reflection_ = NULL;
const ::google::protobuf::Descriptor* MerchantShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MerchantShip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MerchantShip_2eproto() {
  protobuf_AddDesc_MerchantShip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MerchantShip.proto");
  GOOGLE_CHECK(file != NULL);
  MerchantShipItem_descriptor_ = file->message_type(0);
  static const int MerchantShipItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, endts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, waitts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, totalres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, lostres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, challenge_),
  };
  MerchantShipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MerchantShipItem_descriptor_,
      MerchantShipItem::default_instance_,
      MerchantShipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MerchantShipItem));
  MerchantShipWait_descriptor_ = file->message_type(1);
  static const int MerchantShipWait_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipWait, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipWait, key_),
  };
  MerchantShipWait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MerchantShipWait_descriptor_,
      MerchantShipWait::default_instance_,
      MerchantShipWait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipWait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShipWait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MerchantShipWait));
  MerchantShip_descriptor_ = file->message_type(2);
  static const int MerchantShip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShip, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShip, wait_),
  };
  MerchantShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MerchantShip_descriptor_,
      MerchantShip::default_instance_,
      MerchantShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerchantShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MerchantShip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MerchantShip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MerchantShipItem_descriptor_, &MerchantShipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MerchantShipWait_descriptor_, &MerchantShipWait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MerchantShip_descriptor_, &MerchantShip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MerchantShip_2eproto() {
  delete MerchantShipItem::default_instance_;
  delete MerchantShipItem_reflection_;
  delete MerchantShipWait::default_instance_;
  delete MerchantShipWait_reflection_;
  delete MerchantShip::default_instance_;
  delete MerchantShip_reflection_;
}

void protobuf_AddDesc_MerchantShip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MerchantShip.proto\022\014MerchantShip\"\214\001\n\020M"
    "erchantShipItem\022\013\n\003uid\030\001 \002(\r\022\n\n\002id\030\002 \002(\r"
    "\022\r\n\005endTs\030\003 \002(\r\022\016\n\006waitTs\030\004 \002(\r\022\020\n\010total"
    "Res\030\005 \002(\r\022\017\n\007lostRes\030\006 \002(\r\022\n\n\002lv\030\007 \002(\r\022\021"
    "\n\tchallenge\030\010 \003(\r\",\n\020MerchantShipWait\022\013\n"
    "\003uid\030\001 \002(\r\022\013\n\003key\030\002 \002(\004\"k\n\014MerchantShip\022"
    "-\n\005items\030\001 \003(\0132\036.MerchantShip.MerchantSh"
    "ipItem\022,\n\004wait\030\002 \003(\0132\036.MerchantShip.Merc"
    "hantShipWait", 332);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MerchantShip.proto", &protobuf_RegisterTypes);
  MerchantShipItem::default_instance_ = new MerchantShipItem();
  MerchantShipWait::default_instance_ = new MerchantShipWait();
  MerchantShip::default_instance_ = new MerchantShip();
  MerchantShipItem::default_instance_->InitAsDefaultInstance();
  MerchantShipWait::default_instance_->InitAsDefaultInstance();
  MerchantShip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MerchantShip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MerchantShip_2eproto {
  StaticDescriptorInitializer_MerchantShip_2eproto() {
    protobuf_AddDesc_MerchantShip_2eproto();
  }
} static_descriptor_initializer_MerchantShip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MerchantShipItem::kUidFieldNumber;
const int MerchantShipItem::kIdFieldNumber;
const int MerchantShipItem::kEndTsFieldNumber;
const int MerchantShipItem::kWaitTsFieldNumber;
const int MerchantShipItem::kTotalResFieldNumber;
const int MerchantShipItem::kLostResFieldNumber;
const int MerchantShipItem::kLvFieldNumber;
const int MerchantShipItem::kChallengeFieldNumber;
#endif  // !_MSC_VER

MerchantShipItem::MerchantShipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MerchantShip.MerchantShipItem)
}

void MerchantShipItem::InitAsDefaultInstance() {
}

MerchantShipItem::MerchantShipItem(const MerchantShipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MerchantShip.MerchantShipItem)
}

void MerchantShipItem::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  id_ = 0u;
  endts_ = 0u;
  waitts_ = 0u;
  totalres_ = 0u;
  lostres_ = 0u;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MerchantShipItem::~MerchantShipItem() {
  // @@protoc_insertion_point(destructor:MerchantShip.MerchantShipItem)
  SharedDtor();
}

void MerchantShipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MerchantShipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MerchantShipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MerchantShipItem_descriptor_;
}

const MerchantShipItem& MerchantShipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MerchantShip_2eproto();
  return *default_instance_;
}

MerchantShipItem* MerchantShipItem::default_instance_ = NULL;

MerchantShipItem* MerchantShipItem::New() const {
  return new MerchantShipItem;
}

void MerchantShipItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MerchantShipItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, lostres_);
    lv_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  challenge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MerchantShipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MerchantShip.MerchantShipItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endTs;
        break;
      }

      // required uint32 endTs = 3;
      case 3: {
        if (tag == 24) {
         parse_endTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endts_)));
          set_has_endts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_waitTs;
        break;
      }

      // required uint32 waitTs = 4;
      case 4: {
        if (tag == 32) {
         parse_waitTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waitts_)));
          set_has_waitts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_totalRes;
        break;
      }

      // required uint32 totalRes = 5;
      case 5: {
        if (tag == 40) {
         parse_totalRes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalres_)));
          set_has_totalres();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lostRes;
        break;
      }

      // required uint32 lostRes = 6;
      case 6: {
        if (tag == 48) {
         parse_lostRes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lostres_)));
          set_has_lostres();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lv;
        break;
      }

      // required uint32 lv = 7;
      case 7: {
        if (tag == 56) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_challenge;
        break;
      }

      // repeated uint32 challenge = 8;
      case 8: {
        if (tag == 64) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_challenge())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_challenge())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_challenge;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MerchantShip.MerchantShipItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MerchantShip.MerchantShipItem)
  return false;
#undef DO_
}

void MerchantShipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MerchantShip.MerchantShipItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 endTs = 3;
  if (has_endts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endts(), output);
  }

  // required uint32 waitTs = 4;
  if (has_waitts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->waitts(), output);
  }

  // required uint32 totalRes = 5;
  if (has_totalres()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalres(), output);
  }

  // required uint32 lostRes = 6;
  if (has_lostres()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lostres(), output);
  }

  // required uint32 lv = 7;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lv(), output);
  }

  // repeated uint32 challenge = 8;
  for (int i = 0; i < this->challenge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->challenge(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MerchantShip.MerchantShipItem)
}

::google::protobuf::uint8* MerchantShipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MerchantShip.MerchantShipItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 endTs = 3;
  if (has_endts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endts(), target);
  }

  // required uint32 waitTs = 4;
  if (has_waitts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->waitts(), target);
  }

  // required uint32 totalRes = 5;
  if (has_totalres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->totalres(), target);
  }

  // required uint32 lostRes = 6;
  if (has_lostres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lostres(), target);
  }

  // required uint32 lv = 7;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lv(), target);
  }

  // repeated uint32 challenge = 8;
  for (int i = 0; i < this->challenge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->challenge(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MerchantShip.MerchantShipItem)
  return target;
}

int MerchantShipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 endTs = 3;
    if (has_endts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endts());
    }

    // required uint32 waitTs = 4;
    if (has_waitts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waitts());
    }

    // required uint32 totalRes = 5;
    if (has_totalres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalres());
    }

    // required uint32 lostRes = 6;
    if (has_lostres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lostres());
    }

    // required uint32 lv = 7;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  // repeated uint32 challenge = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->challenge_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->challenge(i));
    }
    total_size += 1 * this->challenge_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MerchantShipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MerchantShipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MerchantShipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MerchantShipItem::MergeFrom(const MerchantShipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  challenge_.MergeFrom(from.challenge_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_endts()) {
      set_endts(from.endts());
    }
    if (from.has_waitts()) {
      set_waitts(from.waitts());
    }
    if (from.has_totalres()) {
      set_totalres(from.totalres());
    }
    if (from.has_lostres()) {
      set_lostres(from.lostres());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MerchantShipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerchantShipItem::CopyFrom(const MerchantShipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerchantShipItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void MerchantShipItem::Swap(MerchantShipItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(endts_, other->endts_);
    std::swap(waitts_, other->waitts_);
    std::swap(totalres_, other->totalres_);
    std::swap(lostres_, other->lostres_);
    std::swap(lv_, other->lv_);
    challenge_.Swap(&other->challenge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MerchantShipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MerchantShipItem_descriptor_;
  metadata.reflection = MerchantShipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MerchantShipWait::kUidFieldNumber;
const int MerchantShipWait::kKeyFieldNumber;
#endif  // !_MSC_VER

MerchantShipWait::MerchantShipWait()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MerchantShip.MerchantShipWait)
}

void MerchantShipWait::InitAsDefaultInstance() {
}

MerchantShipWait::MerchantShipWait(const MerchantShipWait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MerchantShip.MerchantShipWait)
}

void MerchantShipWait::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MerchantShipWait::~MerchantShipWait() {
  // @@protoc_insertion_point(destructor:MerchantShip.MerchantShipWait)
  SharedDtor();
}

void MerchantShipWait::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MerchantShipWait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MerchantShipWait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MerchantShipWait_descriptor_;
}

const MerchantShipWait& MerchantShipWait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MerchantShip_2eproto();
  return *default_instance_;
}

MerchantShipWait* MerchantShipWait::default_instance_ = NULL;

MerchantShipWait* MerchantShipWait::New() const {
  return new MerchantShipWait;
}

void MerchantShipWait::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MerchantShipWait*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, uid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MerchantShipWait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MerchantShip.MerchantShipWait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required uint64 key = 2;
      case 2: {
        if (tag == 16) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MerchantShip.MerchantShipWait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MerchantShip.MerchantShipWait)
  return false;
#undef DO_
}

void MerchantShipWait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MerchantShip.MerchantShipWait)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint64 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MerchantShip.MerchantShipWait)
}

::google::protobuf::uint8* MerchantShipWait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MerchantShip.MerchantShipWait)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint64 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MerchantShip.MerchantShipWait)
  return target;
}

int MerchantShipWait::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint64 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MerchantShipWait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MerchantShipWait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MerchantShipWait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MerchantShipWait::MergeFrom(const MerchantShipWait& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MerchantShipWait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerchantShipWait::CopyFrom(const MerchantShipWait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerchantShipWait::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MerchantShipWait::Swap(MerchantShipWait* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MerchantShipWait::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MerchantShipWait_descriptor_;
  metadata.reflection = MerchantShipWait_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MerchantShip::kItemsFieldNumber;
const int MerchantShip::kWaitFieldNumber;
#endif  // !_MSC_VER

MerchantShip::MerchantShip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MerchantShip.MerchantShip)
}

void MerchantShip::InitAsDefaultInstance() {
}

MerchantShip::MerchantShip(const MerchantShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MerchantShip.MerchantShip)
}

void MerchantShip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MerchantShip::~MerchantShip() {
  // @@protoc_insertion_point(destructor:MerchantShip.MerchantShip)
  SharedDtor();
}

void MerchantShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MerchantShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MerchantShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MerchantShip_descriptor_;
}

const MerchantShip& MerchantShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MerchantShip_2eproto();
  return *default_instance_;
}

MerchantShip* MerchantShip::default_instance_ = NULL;

MerchantShip* MerchantShip::New() const {
  return new MerchantShip;
}

void MerchantShip::Clear() {
  items_.Clear();
  wait_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MerchantShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MerchantShip.MerchantShip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MerchantShip.MerchantShipItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_wait;
        break;
      }

      // repeated .MerchantShip.MerchantShipWait wait = 2;
      case 2: {
        if (tag == 18) {
         parse_wait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wait;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MerchantShip.MerchantShip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MerchantShip.MerchantShip)
  return false;
#undef DO_
}

void MerchantShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MerchantShip.MerchantShip)
  // repeated .MerchantShip.MerchantShipItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // repeated .MerchantShip.MerchantShipWait wait = 2;
  for (int i = 0; i < this->wait_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wait(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MerchantShip.MerchantShip)
}

::google::protobuf::uint8* MerchantShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MerchantShip.MerchantShip)
  // repeated .MerchantShip.MerchantShipItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // repeated .MerchantShip.MerchantShipWait wait = 2;
  for (int i = 0; i < this->wait_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wait(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MerchantShip.MerchantShip)
  return target;
}

int MerchantShip::ByteSize() const {
  int total_size = 0;

  // repeated .MerchantShip.MerchantShipItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .MerchantShip.MerchantShipWait wait = 2;
  total_size += 1 * this->wait_size();
  for (int i = 0; i < this->wait_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wait(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MerchantShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MerchantShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MerchantShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MerchantShip::MergeFrom(const MerchantShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  wait_.MergeFrom(from.wait_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MerchantShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerchantShip::CopyFrom(const MerchantShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerchantShip::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wait())) return false;
  return true;
}

void MerchantShip::Swap(MerchantShip* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    wait_.Swap(&other->wait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MerchantShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MerchantShip_descriptor_;
  metadata.reflection = MerchantShip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MerchantShip

// @@protoc_insertion_point(global_scope)
