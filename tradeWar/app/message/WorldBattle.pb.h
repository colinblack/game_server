// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBattle.proto

#ifndef PROTOBUF_WorldBattle_2eproto__INCLUDED
#define PROTOBUF_WorldBattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace WorldBattle {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WorldBattle_2eproto();
void protobuf_AssignDesc_WorldBattle_2eproto();
void protobuf_ShutdownFile_WorldBattle_2eproto();

class WorldBattleSoldier;
class WorldBattleUser;
class WorldBattleCity;
class WorldBattleRank;
class WorldBattleProtect;
class WorldBattle;

// ===================================================================

class WorldBattleSoldier : public ::google::protobuf::Message {
 public:
  WorldBattleSoldier();
  virtual ~WorldBattleSoldier();

  WorldBattleSoldier(const WorldBattleSoldier& from);

  inline WorldBattleSoldier& operator=(const WorldBattleSoldier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBattleSoldier& default_instance();

  void Swap(WorldBattleSoldier* other);

  // implements Message ----------------------------------------------

  WorldBattleSoldier* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBattleSoldier& from);
  void MergeFrom(const WorldBattleSoldier& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:WorldBattle.WorldBattleSoldier)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_WorldBattle_2eproto();
  friend void protobuf_AssignDesc_WorldBattle_2eproto();
  friend void protobuf_ShutdownFile_WorldBattle_2eproto();

  void InitAsDefaultInstance();
  static WorldBattleSoldier* default_instance_;
};
// -------------------------------------------------------------------

class WorldBattleUser : public ::google::protobuf::Message {
 public:
  WorldBattleUser();
  virtual ~WorldBattleUser();

  WorldBattleUser(const WorldBattleUser& from);

  inline WorldBattleUser& operator=(const WorldBattleUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBattleUser& default_instance();

  void Swap(WorldBattleUser* other);

  // implements Message ----------------------------------------------

  WorldBattleUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBattleUser& from);
  void MergeFrom(const WorldBattleUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 ts = 2;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 2;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // repeated .WorldBattle.WorldBattleSoldier soldiers = 3;
  inline int soldiers_size() const;
  inline void clear_soldiers();
  static const int kSoldiersFieldNumber = 3;
  inline const ::WorldBattle::WorldBattleSoldier& soldiers(int index) const;
  inline ::WorldBattle::WorldBattleSoldier* mutable_soldiers(int index);
  inline ::WorldBattle::WorldBattleSoldier* add_soldiers();
  inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleSoldier >&
      soldiers() const;
  inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleSoldier >*
      mutable_soldiers();

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string fig = 5;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 5;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const char* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  inline void set_allocated_fig(::std::string* fig);

  // @@protoc_insertion_point(class_scope:WorldBattle.WorldBattleUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 ts_;
  ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleSoldier > soldiers_;
  ::std::string* name_;
  ::std::string* fig_;
  friend void  protobuf_AddDesc_WorldBattle_2eproto();
  friend void protobuf_AssignDesc_WorldBattle_2eproto();
  friend void protobuf_ShutdownFile_WorldBattle_2eproto();

  void InitAsDefaultInstance();
  static WorldBattleUser* default_instance_;
};
// -------------------------------------------------------------------

class WorldBattleCity : public ::google::protobuf::Message {
 public:
  WorldBattleCity();
  virtual ~WorldBattleCity();

  WorldBattleCity(const WorldBattleCity& from);

  inline WorldBattleCity& operator=(const WorldBattleCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBattleCity& default_instance();

  void Swap(WorldBattleCity* other);

  // implements Message ----------------------------------------------

  WorldBattleCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBattleCity& from);
  void MergeFrom(const WorldBattleCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .WorldBattle.WorldBattleUser users = 2;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 2;
  inline const ::WorldBattle::WorldBattleUser& users(int index) const;
  inline ::WorldBattle::WorldBattleUser* mutable_users(int index);
  inline ::WorldBattle::WorldBattleUser* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleUser >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleUser >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:WorldBattle.WorldBattleCity)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleUser > users_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_WorldBattle_2eproto();
  friend void protobuf_AssignDesc_WorldBattle_2eproto();
  friend void protobuf_ShutdownFile_WorldBattle_2eproto();

  void InitAsDefaultInstance();
  static WorldBattleCity* default_instance_;
};
// -------------------------------------------------------------------

class WorldBattleRank : public ::google::protobuf::Message {
 public:
  WorldBattleRank();
  virtual ~WorldBattleRank();

  WorldBattleRank(const WorldBattleRank& from);

  inline WorldBattleRank& operator=(const WorldBattleRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBattleRank& default_instance();

  void Swap(WorldBattleRank* other);

  // implements Message ----------------------------------------------

  WorldBattleRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBattleRank& from);
  void MergeFrom(const WorldBattleRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // required uint32 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string fig = 5;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 5;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const char* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  inline void set_allocated_fig(::std::string* fig);

  // @@protoc_insertion_point(class_scope:WorldBattle.WorldBattleRank)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 value_;
  ::std::string* name_;
  ::std::string* fig_;
  ::google::protobuf::uint32 cid_;
  friend void  protobuf_AddDesc_WorldBattle_2eproto();
  friend void protobuf_AssignDesc_WorldBattle_2eproto();
  friend void protobuf_ShutdownFile_WorldBattle_2eproto();

  void InitAsDefaultInstance();
  static WorldBattleRank* default_instance_;
};
// -------------------------------------------------------------------

class WorldBattleProtect : public ::google::protobuf::Message {
 public:
  WorldBattleProtect();
  virtual ~WorldBattleProtect();

  WorldBattleProtect(const WorldBattleProtect& from);

  inline WorldBattleProtect& operator=(const WorldBattleProtect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBattleProtect& default_instance();

  void Swap(WorldBattleProtect* other);

  // implements Message ----------------------------------------------

  WorldBattleProtect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBattleProtect& from);
  void MergeFrom(const WorldBattleProtect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 ts = 2;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 2;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:WorldBattle.WorldBattleProtect)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 ts_;
  friend void  protobuf_AddDesc_WorldBattle_2eproto();
  friend void protobuf_AssignDesc_WorldBattle_2eproto();
  friend void protobuf_ShutdownFile_WorldBattle_2eproto();

  void InitAsDefaultInstance();
  static WorldBattleProtect* default_instance_;
};
// -------------------------------------------------------------------

class WorldBattle : public ::google::protobuf::Message {
 public:
  WorldBattle();
  virtual ~WorldBattle();

  WorldBattle(const WorldBattle& from);

  inline WorldBattle& operator=(const WorldBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBattle& default_instance();

  void Swap(WorldBattle* other);

  // implements Message ----------------------------------------------

  WorldBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBattle& from);
  void MergeFrom(const WorldBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WorldBattle.WorldBattleCity citys = 1;
  inline int citys_size() const;
  inline void clear_citys();
  static const int kCitysFieldNumber = 1;
  inline const ::WorldBattle::WorldBattleCity& citys(int index) const;
  inline ::WorldBattle::WorldBattleCity* mutable_citys(int index);
  inline ::WorldBattle::WorldBattleCity* add_citys();
  inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleCity >&
      citys() const;
  inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleCity >*
      mutable_citys();

  // repeated .WorldBattle.WorldBattleRank ranks = 2;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 2;
  inline const ::WorldBattle::WorldBattleRank& ranks(int index) const;
  inline ::WorldBattle::WorldBattleRank* mutable_ranks(int index);
  inline ::WorldBattle::WorldBattleRank* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleRank >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleRank >*
      mutable_ranks();

  // repeated .WorldBattle.WorldBattleProtect pro_city = 3;
  inline int pro_city_size() const;
  inline void clear_pro_city();
  static const int kProCityFieldNumber = 3;
  inline const ::WorldBattle::WorldBattleProtect& pro_city(int index) const;
  inline ::WorldBattle::WorldBattleProtect* mutable_pro_city(int index);
  inline ::WorldBattle::WorldBattleProtect* add_pro_city();
  inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleProtect >&
      pro_city() const;
  inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleProtect >*
      mutable_pro_city();

  // @@protoc_insertion_point(class_scope:WorldBattle.WorldBattle)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleCity > citys_;
  ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleRank > ranks_;
  ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleProtect > pro_city_;
  friend void  protobuf_AddDesc_WorldBattle_2eproto();
  friend void protobuf_AssignDesc_WorldBattle_2eproto();
  friend void protobuf_ShutdownFile_WorldBattle_2eproto();

  void InitAsDefaultInstance();
  static WorldBattle* default_instance_;
};
// ===================================================================


// ===================================================================

// WorldBattleSoldier

// required uint32 id = 1;
inline bool WorldBattleSoldier::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBattleSoldier::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBattleSoldier::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBattleSoldier::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 WorldBattleSoldier::id() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleSoldier.id)
  return id_;
}
inline void WorldBattleSoldier::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleSoldier.id)
}

// required uint32 value = 2;
inline bool WorldBattleSoldier::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBattleSoldier::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBattleSoldier::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBattleSoldier::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 WorldBattleSoldier::value() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleSoldier.value)
  return value_;
}
inline void WorldBattleSoldier::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleSoldier.value)
}

// -------------------------------------------------------------------

// WorldBattleUser

// required uint32 uid = 1;
inline bool WorldBattleUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBattleUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBattleUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBattleUser::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 WorldBattleUser::uid() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleUser.uid)
  return uid_;
}
inline void WorldBattleUser::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleUser.uid)
}

// required uint32 ts = 2;
inline bool WorldBattleUser::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBattleUser::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBattleUser::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBattleUser::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 WorldBattleUser::ts() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleUser.ts)
  return ts_;
}
inline void WorldBattleUser::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleUser.ts)
}

// repeated .WorldBattle.WorldBattleSoldier soldiers = 3;
inline int WorldBattleUser::soldiers_size() const {
  return soldiers_.size();
}
inline void WorldBattleUser::clear_soldiers() {
  soldiers_.Clear();
}
inline const ::WorldBattle::WorldBattleSoldier& WorldBattleUser::soldiers(int index) const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleUser.soldiers)
  return soldiers_.Get(index);
}
inline ::WorldBattle::WorldBattleSoldier* WorldBattleUser::mutable_soldiers(int index) {
  // @@protoc_insertion_point(field_mutable:WorldBattle.WorldBattleUser.soldiers)
  return soldiers_.Mutable(index);
}
inline ::WorldBattle::WorldBattleSoldier* WorldBattleUser::add_soldiers() {
  // @@protoc_insertion_point(field_add:WorldBattle.WorldBattleUser.soldiers)
  return soldiers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleSoldier >&
WorldBattleUser::soldiers() const {
  // @@protoc_insertion_point(field_list:WorldBattle.WorldBattleUser.soldiers)
  return soldiers_;
}
inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleSoldier >*
WorldBattleUser::mutable_soldiers() {
  // @@protoc_insertion_point(field_mutable_list:WorldBattle.WorldBattleUser.soldiers)
  return &soldiers_;
}

// optional string name = 4;
inline bool WorldBattleUser::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldBattleUser::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldBattleUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldBattleUser::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WorldBattleUser::name() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleUser.name)
  return *name_;
}
inline void WorldBattleUser::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleUser.name)
}
inline void WorldBattleUser::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:WorldBattle.WorldBattleUser.name)
}
inline void WorldBattleUser::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WorldBattle.WorldBattleUser.name)
}
inline ::std::string* WorldBattleUser::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WorldBattle.WorldBattleUser.name)
  return name_;
}
inline ::std::string* WorldBattleUser::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorldBattleUser::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WorldBattle.WorldBattleUser.name)
}

// optional string fig = 5;
inline bool WorldBattleUser::has_fig() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorldBattleUser::set_has_fig() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorldBattleUser::clear_has_fig() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorldBattleUser::clear_fig() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& WorldBattleUser::fig() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleUser.fig)
  return *fig_;
}
inline void WorldBattleUser::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleUser.fig)
}
inline void WorldBattleUser::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set_char:WorldBattle.WorldBattleUser.fig)
}
inline void WorldBattleUser::set_fig(const char* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WorldBattle.WorldBattleUser.fig)
}
inline ::std::string* WorldBattleUser::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WorldBattle.WorldBattleUser.fig)
  return fig_;
}
inline ::std::string* WorldBattleUser::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorldBattleUser::set_allocated_fig(::std::string* fig) {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (fig) {
    set_has_fig();
    fig_ = fig;
  } else {
    clear_has_fig();
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WorldBattle.WorldBattleUser.fig)
}

// -------------------------------------------------------------------

// WorldBattleCity

// required uint32 id = 1;
inline bool WorldBattleCity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBattleCity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBattleCity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBattleCity::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 WorldBattleCity::id() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleCity.id)
  return id_;
}
inline void WorldBattleCity::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleCity.id)
}

// repeated .WorldBattle.WorldBattleUser users = 2;
inline int WorldBattleCity::users_size() const {
  return users_.size();
}
inline void WorldBattleCity::clear_users() {
  users_.Clear();
}
inline const ::WorldBattle::WorldBattleUser& WorldBattleCity::users(int index) const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleCity.users)
  return users_.Get(index);
}
inline ::WorldBattle::WorldBattleUser* WorldBattleCity::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:WorldBattle.WorldBattleCity.users)
  return users_.Mutable(index);
}
inline ::WorldBattle::WorldBattleUser* WorldBattleCity::add_users() {
  // @@protoc_insertion_point(field_add:WorldBattle.WorldBattleCity.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleUser >&
WorldBattleCity::users() const {
  // @@protoc_insertion_point(field_list:WorldBattle.WorldBattleCity.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleUser >*
WorldBattleCity::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:WorldBattle.WorldBattleCity.users)
  return &users_;
}

// -------------------------------------------------------------------

// WorldBattleRank

// required uint32 uid = 1;
inline bool WorldBattleRank::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBattleRank::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBattleRank::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBattleRank::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 WorldBattleRank::uid() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleRank.uid)
  return uid_;
}
inline void WorldBattleRank::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleRank.uid)
}

// required uint32 value = 2;
inline bool WorldBattleRank::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBattleRank::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBattleRank::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBattleRank::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 WorldBattleRank::value() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleRank.value)
  return value_;
}
inline void WorldBattleRank::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleRank.value)
}

// required uint32 cid = 3;
inline bool WorldBattleRank::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldBattleRank::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldBattleRank::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldBattleRank::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 WorldBattleRank::cid() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleRank.cid)
  return cid_;
}
inline void WorldBattleRank::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleRank.cid)
}

// required string name = 4;
inline bool WorldBattleRank::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldBattleRank::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldBattleRank::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldBattleRank::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WorldBattleRank::name() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleRank.name)
  return *name_;
}
inline void WorldBattleRank::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleRank.name)
}
inline void WorldBattleRank::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:WorldBattle.WorldBattleRank.name)
}
inline void WorldBattleRank::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WorldBattle.WorldBattleRank.name)
}
inline ::std::string* WorldBattleRank::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WorldBattle.WorldBattleRank.name)
  return name_;
}
inline ::std::string* WorldBattleRank::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorldBattleRank::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WorldBattle.WorldBattleRank.name)
}

// required string fig = 5;
inline bool WorldBattleRank::has_fig() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorldBattleRank::set_has_fig() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorldBattleRank::clear_has_fig() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorldBattleRank::clear_fig() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& WorldBattleRank::fig() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleRank.fig)
  return *fig_;
}
inline void WorldBattleRank::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleRank.fig)
}
inline void WorldBattleRank::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set_char:WorldBattle.WorldBattleRank.fig)
}
inline void WorldBattleRank::set_fig(const char* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WorldBattle.WorldBattleRank.fig)
}
inline ::std::string* WorldBattleRank::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:WorldBattle.WorldBattleRank.fig)
  return fig_;
}
inline ::std::string* WorldBattleRank::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorldBattleRank::set_allocated_fig(::std::string* fig) {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (fig) {
    set_has_fig();
    fig_ = fig;
  } else {
    clear_has_fig();
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:WorldBattle.WorldBattleRank.fig)
}

// -------------------------------------------------------------------

// WorldBattleProtect

// required uint32 uid = 1;
inline bool WorldBattleProtect::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldBattleProtect::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldBattleProtect::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldBattleProtect::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 WorldBattleProtect::uid() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleProtect.uid)
  return uid_;
}
inline void WorldBattleProtect::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleProtect.uid)
}

// required uint32 ts = 2;
inline bool WorldBattleProtect::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldBattleProtect::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldBattleProtect::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldBattleProtect::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 WorldBattleProtect::ts() const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattleProtect.ts)
  return ts_;
}
inline void WorldBattleProtect::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:WorldBattle.WorldBattleProtect.ts)
}

// -------------------------------------------------------------------

// WorldBattle

// repeated .WorldBattle.WorldBattleCity citys = 1;
inline int WorldBattle::citys_size() const {
  return citys_.size();
}
inline void WorldBattle::clear_citys() {
  citys_.Clear();
}
inline const ::WorldBattle::WorldBattleCity& WorldBattle::citys(int index) const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattle.citys)
  return citys_.Get(index);
}
inline ::WorldBattle::WorldBattleCity* WorldBattle::mutable_citys(int index) {
  // @@protoc_insertion_point(field_mutable:WorldBattle.WorldBattle.citys)
  return citys_.Mutable(index);
}
inline ::WorldBattle::WorldBattleCity* WorldBattle::add_citys() {
  // @@protoc_insertion_point(field_add:WorldBattle.WorldBattle.citys)
  return citys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleCity >&
WorldBattle::citys() const {
  // @@protoc_insertion_point(field_list:WorldBattle.WorldBattle.citys)
  return citys_;
}
inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleCity >*
WorldBattle::mutable_citys() {
  // @@protoc_insertion_point(field_mutable_list:WorldBattle.WorldBattle.citys)
  return &citys_;
}

// repeated .WorldBattle.WorldBattleRank ranks = 2;
inline int WorldBattle::ranks_size() const {
  return ranks_.size();
}
inline void WorldBattle::clear_ranks() {
  ranks_.Clear();
}
inline const ::WorldBattle::WorldBattleRank& WorldBattle::ranks(int index) const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattle.ranks)
  return ranks_.Get(index);
}
inline ::WorldBattle::WorldBattleRank* WorldBattle::mutable_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:WorldBattle.WorldBattle.ranks)
  return ranks_.Mutable(index);
}
inline ::WorldBattle::WorldBattleRank* WorldBattle::add_ranks() {
  // @@protoc_insertion_point(field_add:WorldBattle.WorldBattle.ranks)
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleRank >&
WorldBattle::ranks() const {
  // @@protoc_insertion_point(field_list:WorldBattle.WorldBattle.ranks)
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleRank >*
WorldBattle::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:WorldBattle.WorldBattle.ranks)
  return &ranks_;
}

// repeated .WorldBattle.WorldBattleProtect pro_city = 3;
inline int WorldBattle::pro_city_size() const {
  return pro_city_.size();
}
inline void WorldBattle::clear_pro_city() {
  pro_city_.Clear();
}
inline const ::WorldBattle::WorldBattleProtect& WorldBattle::pro_city(int index) const {
  // @@protoc_insertion_point(field_get:WorldBattle.WorldBattle.pro_city)
  return pro_city_.Get(index);
}
inline ::WorldBattle::WorldBattleProtect* WorldBattle::mutable_pro_city(int index) {
  // @@protoc_insertion_point(field_mutable:WorldBattle.WorldBattle.pro_city)
  return pro_city_.Mutable(index);
}
inline ::WorldBattle::WorldBattleProtect* WorldBattle::add_pro_city() {
  // @@protoc_insertion_point(field_add:WorldBattle.WorldBattle.pro_city)
  return pro_city_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleProtect >&
WorldBattle::pro_city() const {
  // @@protoc_insertion_point(field_list:WorldBattle.WorldBattle.pro_city)
  return pro_city_;
}
inline ::google::protobuf::RepeatedPtrField< ::WorldBattle::WorldBattleProtect >*
WorldBattle::mutable_pro_city() {
  // @@protoc_insertion_point(field_mutable_list:WorldBattle.WorldBattle.pro_city)
  return &pro_city_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace WorldBattle

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WorldBattle_2eproto__INCLUDED
