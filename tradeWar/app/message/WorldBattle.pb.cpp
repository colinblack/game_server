// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBattle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WorldBattle {

namespace {

const ::google::protobuf::Descriptor* WorldBattleSoldier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBattleSoldier_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBattleUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBattleUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBattleCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBattleCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBattleRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBattleRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBattleProtect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBattleProtect_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBattle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldBattle_2eproto() {
  protobuf_AddDesc_WorldBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldBattle.proto");
  GOOGLE_CHECK(file != NULL);
  WorldBattleSoldier_descriptor_ = file->message_type(0);
  static const int WorldBattleSoldier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleSoldier, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleSoldier, value_),
  };
  WorldBattleSoldier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBattleSoldier_descriptor_,
      WorldBattleSoldier::default_instance_,
      WorldBattleSoldier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleSoldier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleSoldier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBattleSoldier));
  WorldBattleUser_descriptor_ = file->message_type(1);
  static const int WorldBattleUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleUser, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleUser, soldiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleUser, fig_),
  };
  WorldBattleUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBattleUser_descriptor_,
      WorldBattleUser::default_instance_,
      WorldBattleUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBattleUser));
  WorldBattleCity_descriptor_ = file->message_type(2);
  static const int WorldBattleCity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleCity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleCity, users_),
  };
  WorldBattleCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBattleCity_descriptor_,
      WorldBattleCity::default_instance_,
      WorldBattleCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBattleCity));
  WorldBattleRank_descriptor_ = file->message_type(3);
  static const int WorldBattleRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleRank, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleRank, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleRank, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleRank, fig_),
  };
  WorldBattleRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBattleRank_descriptor_,
      WorldBattleRank::default_instance_,
      WorldBattleRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBattleRank));
  WorldBattleProtect_descriptor_ = file->message_type(4);
  static const int WorldBattleProtect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleProtect, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleProtect, ts_),
  };
  WorldBattleProtect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBattleProtect_descriptor_,
      WorldBattleProtect::default_instance_,
      WorldBattleProtect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleProtect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattleProtect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBattleProtect));
  WorldBattle_descriptor_ = file->message_type(5);
  static const int WorldBattle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattle, citys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattle, ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattle, pro_city_),
  };
  WorldBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBattle_descriptor_,
      WorldBattle::default_instance_,
      WorldBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBattle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBattleSoldier_descriptor_, &WorldBattleSoldier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBattleUser_descriptor_, &WorldBattleUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBattleCity_descriptor_, &WorldBattleCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBattleRank_descriptor_, &WorldBattleRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBattleProtect_descriptor_, &WorldBattleProtect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBattle_descriptor_, &WorldBattle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldBattle_2eproto() {
  delete WorldBattleSoldier::default_instance_;
  delete WorldBattleSoldier_reflection_;
  delete WorldBattleUser::default_instance_;
  delete WorldBattleUser_reflection_;
  delete WorldBattleCity::default_instance_;
  delete WorldBattleCity_reflection_;
  delete WorldBattleRank::default_instance_;
  delete WorldBattleRank_reflection_;
  delete WorldBattleProtect::default_instance_;
  delete WorldBattleProtect_reflection_;
  delete WorldBattle::default_instance_;
  delete WorldBattle_reflection_;
}

void protobuf_AddDesc_WorldBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021WorldBattle.proto\022\013WorldBattle\"/\n\022Worl"
    "dBattleSoldier\022\n\n\002id\030\001 \002(\r\022\r\n\005value\030\002 \002("
    "\r\"x\n\017WorldBattleUser\022\013\n\003uid\030\001 \002(\r\022\n\n\002ts\030"
    "\002 \002(\r\0221\n\010soldiers\030\003 \003(\0132\037.WorldBattle.Wo"
    "rldBattleSoldier\022\014\n\004name\030\004 \001(\t\022\013\n\003fig\030\005 "
    "\001(\t\"J\n\017WorldBattleCity\022\n\n\002id\030\001 \002(\r\022+\n\005us"
    "ers\030\002 \003(\0132\034.WorldBattle.WorldBattleUser\""
    "U\n\017WorldBattleRank\022\013\n\003uid\030\001 \002(\r\022\r\n\005value"
    "\030\002 \002(\r\022\013\n\003cid\030\003 \002(\r\022\014\n\004name\030\004 \002(\t\022\013\n\003fig"
    "\030\005 \002(\t\"-\n\022WorldBattleProtect\022\013\n\003uid\030\001 \002("
    "\r\022\n\n\002ts\030\002 \002(\r\"\232\001\n\013WorldBattle\022+\n\005citys\030\001"
    " \003(\0132\034.WorldBattle.WorldBattleCity\022+\n\005ra"
    "nks\030\002 \003(\0132\034.WorldBattle.WorldBattleRank\022"
    "1\n\010pro_city\030\003 \003(\0132\037.WorldBattle.WorldBat"
    "tleProtect", 570);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldBattle.proto", &protobuf_RegisterTypes);
  WorldBattleSoldier::default_instance_ = new WorldBattleSoldier();
  WorldBattleUser::default_instance_ = new WorldBattleUser();
  WorldBattleCity::default_instance_ = new WorldBattleCity();
  WorldBattleRank::default_instance_ = new WorldBattleRank();
  WorldBattleProtect::default_instance_ = new WorldBattleProtect();
  WorldBattle::default_instance_ = new WorldBattle();
  WorldBattleSoldier::default_instance_->InitAsDefaultInstance();
  WorldBattleUser::default_instance_->InitAsDefaultInstance();
  WorldBattleCity::default_instance_->InitAsDefaultInstance();
  WorldBattleRank::default_instance_->InitAsDefaultInstance();
  WorldBattleProtect::default_instance_->InitAsDefaultInstance();
  WorldBattle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldBattle_2eproto {
  StaticDescriptorInitializer_WorldBattle_2eproto() {
    protobuf_AddDesc_WorldBattle_2eproto();
  }
} static_descriptor_initializer_WorldBattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WorldBattleSoldier::kIdFieldNumber;
const int WorldBattleSoldier::kValueFieldNumber;
#endif  // !_MSC_VER

WorldBattleSoldier::WorldBattleSoldier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldBattle.WorldBattleSoldier)
}

void WorldBattleSoldier::InitAsDefaultInstance() {
}

WorldBattleSoldier::WorldBattleSoldier(const WorldBattleSoldier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorldBattle.WorldBattleSoldier)
}

void WorldBattleSoldier::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBattleSoldier::~WorldBattleSoldier() {
  // @@protoc_insertion_point(destructor:WorldBattle.WorldBattleSoldier)
  SharedDtor();
}

void WorldBattleSoldier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBattleSoldier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBattleSoldier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBattleSoldier_descriptor_;
}

const WorldBattleSoldier& WorldBattleSoldier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBattle_2eproto();
  return *default_instance_;
}

WorldBattleSoldier* WorldBattleSoldier::default_instance_ = NULL;

WorldBattleSoldier* WorldBattleSoldier::New() const {
  return new WorldBattleSoldier;
}

void WorldBattleSoldier::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldBattleSoldier*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBattleSoldier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorldBattle.WorldBattleSoldier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorldBattle.WorldBattleSoldier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorldBattle.WorldBattleSoldier)
  return false;
#undef DO_
}

void WorldBattleSoldier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorldBattle.WorldBattleSoldier)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorldBattle.WorldBattleSoldier)
}

::google::protobuf::uint8* WorldBattleSoldier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldBattle.WorldBattleSoldier)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldBattle.WorldBattleSoldier)
  return target;
}

int WorldBattleSoldier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBattleSoldier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBattleSoldier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBattleSoldier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBattleSoldier::MergeFrom(const WorldBattleSoldier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBattleSoldier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBattleSoldier::CopyFrom(const WorldBattleSoldier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBattleSoldier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WorldBattleSoldier::Swap(WorldBattleSoldier* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBattleSoldier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBattleSoldier_descriptor_;
  metadata.reflection = WorldBattleSoldier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBattleUser::kUidFieldNumber;
const int WorldBattleUser::kTsFieldNumber;
const int WorldBattleUser::kSoldiersFieldNumber;
const int WorldBattleUser::kNameFieldNumber;
const int WorldBattleUser::kFigFieldNumber;
#endif  // !_MSC_VER

WorldBattleUser::WorldBattleUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldBattle.WorldBattleUser)
}

void WorldBattleUser::InitAsDefaultInstance() {
}

WorldBattleUser::WorldBattleUser(const WorldBattleUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorldBattle.WorldBattleUser)
}

void WorldBattleUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  ts_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBattleUser::~WorldBattleUser() {
  // @@protoc_insertion_point(destructor:WorldBattle.WorldBattleUser)
  SharedDtor();
}

void WorldBattleUser::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void WorldBattleUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBattleUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBattleUser_descriptor_;
}

const WorldBattleUser& WorldBattleUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBattle_2eproto();
  return *default_instance_;
}

WorldBattleUser* WorldBattleUser::default_instance_ = NULL;

WorldBattleUser* WorldBattleUser::New() const {
  return new WorldBattleUser;
}

void WorldBattleUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldBattleUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(uid_, ts_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  soldiers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBattleUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorldBattle.WorldBattleUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_soldiers;
        break;
      }

      // repeated .WorldBattle.WorldBattleSoldier soldiers = 3;
      case 3: {
        if (tag == 26) {
         parse_soldiers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soldiers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_soldiers;
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fig;
        break;
      }

      // optional string fig = 5;
      case 5: {
        if (tag == 42) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fig().data(), this->fig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fig");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorldBattle.WorldBattleUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorldBattle.WorldBattleUser)
  return false;
#undef DO_
}

void WorldBattleUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorldBattle.WorldBattleUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  // repeated .WorldBattle.WorldBattleSoldier soldiers = 3;
  for (int i = 0; i < this->soldiers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->soldiers(i), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string fig = 5;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorldBattle.WorldBattleUser)
}

::google::protobuf::uint8* WorldBattleUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldBattle.WorldBattleUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  // repeated .WorldBattle.WorldBattleSoldier soldiers = 3;
  for (int i = 0; i < this->soldiers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->soldiers(i), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string fig = 5;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldBattle.WorldBattleUser)
  return target;
}

int WorldBattleUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string fig = 5;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fig());
    }

  }
  // repeated .WorldBattle.WorldBattleSoldier soldiers = 3;
  total_size += 1 * this->soldiers_size();
  for (int i = 0; i < this->soldiers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soldiers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBattleUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBattleUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBattleUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBattleUser::MergeFrom(const WorldBattleUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  soldiers_.MergeFrom(from.soldiers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBattleUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBattleUser::CopyFrom(const WorldBattleUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBattleUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->soldiers())) return false;
  return true;
}

void WorldBattleUser::Swap(WorldBattleUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(ts_, other->ts_);
    soldiers_.Swap(&other->soldiers_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBattleUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBattleUser_descriptor_;
  metadata.reflection = WorldBattleUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBattleCity::kIdFieldNumber;
const int WorldBattleCity::kUsersFieldNumber;
#endif  // !_MSC_VER

WorldBattleCity::WorldBattleCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldBattle.WorldBattleCity)
}

void WorldBattleCity::InitAsDefaultInstance() {
}

WorldBattleCity::WorldBattleCity(const WorldBattleCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorldBattle.WorldBattleCity)
}

void WorldBattleCity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBattleCity::~WorldBattleCity() {
  // @@protoc_insertion_point(destructor:WorldBattle.WorldBattleCity)
  SharedDtor();
}

void WorldBattleCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBattleCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBattleCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBattleCity_descriptor_;
}

const WorldBattleCity& WorldBattleCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBattle_2eproto();
  return *default_instance_;
}

WorldBattleCity* WorldBattleCity::default_instance_ = NULL;

WorldBattleCity* WorldBattleCity::New() const {
  return new WorldBattleCity;
}

void WorldBattleCity::Clear() {
  id_ = 0u;
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBattleCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorldBattle.WorldBattleCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // repeated .WorldBattle.WorldBattleUser users = 2;
      case 2: {
        if (tag == 18) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorldBattle.WorldBattleCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorldBattle.WorldBattleCity)
  return false;
#undef DO_
}

void WorldBattleCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorldBattle.WorldBattleCity)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .WorldBattle.WorldBattleUser users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorldBattle.WorldBattleCity)
}

::google::protobuf::uint8* WorldBattleCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldBattle.WorldBattleCity)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .WorldBattle.WorldBattleUser users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldBattle.WorldBattleCity)
  return target;
}

int WorldBattleCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .WorldBattle.WorldBattleUser users = 2;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBattleCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBattleCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBattleCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBattleCity::MergeFrom(const WorldBattleCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBattleCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBattleCity::CopyFrom(const WorldBattleCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBattleCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void WorldBattleCity::Swap(WorldBattleCity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBattleCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBattleCity_descriptor_;
  metadata.reflection = WorldBattleCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBattleRank::kUidFieldNumber;
const int WorldBattleRank::kValueFieldNumber;
const int WorldBattleRank::kCidFieldNumber;
const int WorldBattleRank::kNameFieldNumber;
const int WorldBattleRank::kFigFieldNumber;
#endif  // !_MSC_VER

WorldBattleRank::WorldBattleRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldBattle.WorldBattleRank)
}

void WorldBattleRank::InitAsDefaultInstance() {
}

WorldBattleRank::WorldBattleRank(const WorldBattleRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorldBattle.WorldBattleRank)
}

void WorldBattleRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  value_ = 0u;
  cid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBattleRank::~WorldBattleRank() {
  // @@protoc_insertion_point(destructor:WorldBattle.WorldBattleRank)
  SharedDtor();
}

void WorldBattleRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void WorldBattleRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBattleRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBattleRank_descriptor_;
}

const WorldBattleRank& WorldBattleRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBattle_2eproto();
  return *default_instance_;
}

WorldBattleRank* WorldBattleRank::default_instance_ = NULL;

WorldBattleRank* WorldBattleRank::New() const {
  return new WorldBattleRank;
}

void WorldBattleRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldBattleRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, value_);
    cid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBattleRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorldBattle.WorldBattleRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // required uint32 cid = 3;
      case 3: {
        if (tag == 24) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fig;
        break;
      }

      // required string fig = 5;
      case 5: {
        if (tag == 42) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fig().data(), this->fig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fig");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorldBattle.WorldBattleRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorldBattle.WorldBattleRank)
  return false;
#undef DO_
}

void WorldBattleRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorldBattle.WorldBattleRank)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // required uint32 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cid(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required string fig = 5;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorldBattle.WorldBattleRank)
}

::google::protobuf::uint8* WorldBattleRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldBattle.WorldBattleRank)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // required uint32 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cid(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required string fig = 5;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldBattle.WorldBattleRank)
  return target;
}

int WorldBattleRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string fig = 5;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBattleRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBattleRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBattleRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBattleRank::MergeFrom(const WorldBattleRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBattleRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBattleRank::CopyFrom(const WorldBattleRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBattleRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void WorldBattleRank::Swap(WorldBattleRank* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(value_, other->value_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBattleRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBattleRank_descriptor_;
  metadata.reflection = WorldBattleRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBattleProtect::kUidFieldNumber;
const int WorldBattleProtect::kTsFieldNumber;
#endif  // !_MSC_VER

WorldBattleProtect::WorldBattleProtect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldBattle.WorldBattleProtect)
}

void WorldBattleProtect::InitAsDefaultInstance() {
}

WorldBattleProtect::WorldBattleProtect(const WorldBattleProtect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorldBattle.WorldBattleProtect)
}

void WorldBattleProtect::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBattleProtect::~WorldBattleProtect() {
  // @@protoc_insertion_point(destructor:WorldBattle.WorldBattleProtect)
  SharedDtor();
}

void WorldBattleProtect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBattleProtect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBattleProtect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBattleProtect_descriptor_;
}

const WorldBattleProtect& WorldBattleProtect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBattle_2eproto();
  return *default_instance_;
}

WorldBattleProtect* WorldBattleProtect::default_instance_ = NULL;

WorldBattleProtect* WorldBattleProtect::New() const {
  return new WorldBattleProtect;
}

void WorldBattleProtect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldBattleProtect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBattleProtect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorldBattle.WorldBattleProtect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorldBattle.WorldBattleProtect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorldBattle.WorldBattleProtect)
  return false;
#undef DO_
}

void WorldBattleProtect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorldBattle.WorldBattleProtect)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorldBattle.WorldBattleProtect)
}

::google::protobuf::uint8* WorldBattleProtect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldBattle.WorldBattleProtect)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldBattle.WorldBattleProtect)
  return target;
}

int WorldBattleProtect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBattleProtect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBattleProtect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBattleProtect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBattleProtect::MergeFrom(const WorldBattleProtect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBattleProtect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBattleProtect::CopyFrom(const WorldBattleProtect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBattleProtect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WorldBattleProtect::Swap(WorldBattleProtect* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBattleProtect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBattleProtect_descriptor_;
  metadata.reflection = WorldBattleProtect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBattle::kCitysFieldNumber;
const int WorldBattle::kRanksFieldNumber;
const int WorldBattle::kProCityFieldNumber;
#endif  // !_MSC_VER

WorldBattle::WorldBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldBattle.WorldBattle)
}

void WorldBattle::InitAsDefaultInstance() {
}

WorldBattle::WorldBattle(const WorldBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WorldBattle.WorldBattle)
}

void WorldBattle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBattle::~WorldBattle() {
  // @@protoc_insertion_point(destructor:WorldBattle.WorldBattle)
  SharedDtor();
}

void WorldBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBattle_descriptor_;
}

const WorldBattle& WorldBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBattle_2eproto();
  return *default_instance_;
}

WorldBattle* WorldBattle::default_instance_ = NULL;

WorldBattle* WorldBattle::New() const {
  return new WorldBattle;
}

void WorldBattle::Clear() {
  citys_.Clear();
  ranks_.Clear();
  pro_city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorldBattle.WorldBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WorldBattle.WorldBattleCity citys = 1;
      case 1: {
        if (tag == 10) {
         parse_citys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_citys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_citys;
        if (input->ExpectTag(18)) goto parse_ranks;
        break;
      }

      // repeated .WorldBattle.WorldBattleRank ranks = 2;
      case 2: {
        if (tag == 18) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ranks;
        if (input->ExpectTag(26)) goto parse_pro_city;
        break;
      }

      // repeated .WorldBattle.WorldBattleProtect pro_city = 3;
      case 3: {
        if (tag == 26) {
         parse_pro_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pro_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pro_city;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorldBattle.WorldBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorldBattle.WorldBattle)
  return false;
#undef DO_
}

void WorldBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorldBattle.WorldBattle)
  // repeated .WorldBattle.WorldBattleCity citys = 1;
  for (int i = 0; i < this->citys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->citys(i), output);
  }

  // repeated .WorldBattle.WorldBattleRank ranks = 2;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranks(i), output);
  }

  // repeated .WorldBattle.WorldBattleProtect pro_city = 3;
  for (int i = 0; i < this->pro_city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pro_city(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorldBattle.WorldBattle)
}

::google::protobuf::uint8* WorldBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldBattle.WorldBattle)
  // repeated .WorldBattle.WorldBattleCity citys = 1;
  for (int i = 0; i < this->citys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->citys(i), target);
  }

  // repeated .WorldBattle.WorldBattleRank ranks = 2;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ranks(i), target);
  }

  // repeated .WorldBattle.WorldBattleProtect pro_city = 3;
  for (int i = 0; i < this->pro_city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pro_city(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldBattle.WorldBattle)
  return target;
}

int WorldBattle::ByteSize() const {
  int total_size = 0;

  // repeated .WorldBattle.WorldBattleCity citys = 1;
  total_size += 1 * this->citys_size();
  for (int i = 0; i < this->citys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->citys(i));
  }

  // repeated .WorldBattle.WorldBattleRank ranks = 2;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  // repeated .WorldBattle.WorldBattleProtect pro_city = 3;
  total_size += 1 * this->pro_city_size();
  for (int i = 0; i < this->pro_city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pro_city(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBattle::MergeFrom(const WorldBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  citys_.MergeFrom(from.citys_);
  ranks_.MergeFrom(from.ranks_);
  pro_city_.MergeFrom(from.pro_city_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBattle::CopyFrom(const WorldBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBattle::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->citys())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ranks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pro_city())) return false;
  return true;
}

void WorldBattle::Swap(WorldBattle* other) {
  if (other != this) {
    citys_.Swap(&other->citys_);
    ranks_.Swap(&other->ranks_);
    pro_city_.Swap(&other->pro_city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBattle_descriptor_;
  metadata.reflection = WorldBattle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace WorldBattle

// @@protoc_insertion_point(global_scope)
