// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Offline.proto

#ifndef PROTOBUF_Offline_2eproto__INCLUDED
#define PROTOBUF_Offline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Offline {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Offline_2eproto();
void protobuf_AssignDesc_Offline_2eproto();
void protobuf_ShutdownFile_Offline_2eproto();

class Skill;
class Attr;
class Hero;
class User;
class Info;

// ===================================================================

class Skill : public ::google::protobuf::Message {
 public:
  Skill();
  virtual ~Skill();
  
  Skill(const Skill& from);
  
  inline Skill& operator=(const Skill& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Skill& default_instance();
  
  void Swap(Skill* other);
  
  // implements Message ----------------------------------------------
  
  Skill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Skill& from);
  void MergeFrom(const Skill& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional double hurt = 3;
  inline bool has_hurt() const;
  inline void clear_hurt();
  static const int kHurtFieldNumber = 3;
  inline double hurt() const;
  inline void set_hurt(double value);
  
  // optional double multiple = 4;
  inline bool has_multiple() const;
  inline void clear_multiple();
  static const int kMultipleFieldNumber = 4;
  inline double multiple() const;
  inline void set_multiple(double value);
  
  // optional uint32 initWeight = 5;
  inline bool has_initweight() const;
  inline void clear_initweight();
  static const int kInitWeightFieldNumber = 5;
  inline ::google::protobuf::uint32 initweight() const;
  inline void set_initweight(::google::protobuf::uint32 value);
  
  // optional uint32 userAddWeight = 6;
  inline bool has_useraddweight() const;
  inline void clear_useraddweight();
  static const int kUserAddWeightFieldNumber = 6;
  inline ::google::protobuf::uint32 useraddweight() const;
  inline void set_useraddweight(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Offline.Skill)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_hurt();
  inline void clear_has_hurt();
  inline void set_has_multiple();
  inline void clear_has_multiple();
  inline void set_has_initweight();
  inline void clear_has_initweight();
  inline void set_has_useraddweight();
  inline void clear_has_useraddweight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  double hurt_;
  double multiple_;
  ::google::protobuf::uint32 initweight_;
  ::google::protobuf::uint32 useraddweight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Offline_2eproto();
  friend void protobuf_AssignDesc_Offline_2eproto();
  friend void protobuf_ShutdownFile_Offline_2eproto();
  
  void InitAsDefaultInstance();
  static Skill* default_instance_;
};
// -------------------------------------------------------------------

class Attr : public ::google::protobuf::Message {
 public:
  Attr();
  virtual ~Attr();
  
  Attr(const Attr& from);
  
  inline Attr& operator=(const Attr& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attr& default_instance();
  
  void Swap(Attr* other);
  
  // implements Message ----------------------------------------------
  
  Attr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attr& from);
  void MergeFrom(const Attr& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double hp = 1;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 1;
  inline double hp() const;
  inline void set_hp(double value);
  
  // optional double att = 2;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline double att() const;
  inline void set_att(double value);
  
  // optional double def = 3;
  inline bool has_def() const;
  inline void clear_def();
  static const int kDefFieldNumber = 3;
  inline double def() const;
  inline void set_def(double value);
  
  // optional uint32 first = 4;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 4;
  inline ::google::protobuf::uint32 first() const;
  inline void set_first(::google::protobuf::uint32 value);
  
  // optional uint32 hit = 5;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 5;
  inline ::google::protobuf::uint32 hit() const;
  inline void set_hit(::google::protobuf::uint32 value);
  
  // optional uint32 dodge = 6;
  inline bool has_dodge() const;
  inline void clear_dodge();
  static const int kDodgeFieldNumber = 6;
  inline ::google::protobuf::uint32 dodge() const;
  inline void set_dodge(::google::protobuf::uint32 value);
  
  // optional uint32 critStrike = 7;
  inline bool has_critstrike() const;
  inline void clear_critstrike();
  static const int kCritStrikeFieldNumber = 7;
  inline ::google::protobuf::uint32 critstrike() const;
  inline void set_critstrike(::google::protobuf::uint32 value);
  
  // optional double critRate = 8;
  inline bool has_critrate() const;
  inline void clear_critrate();
  static const int kCritRateFieldNumber = 8;
  inline double critrate() const;
  inline void set_critrate(double value);
  
  // optional uint32 critResist = 9;
  inline bool has_critresist() const;
  inline void clear_critresist();
  static const int kCritResistFieldNumber = 9;
  inline ::google::protobuf::uint32 critresist() const;
  inline void set_critresist(::google::protobuf::uint32 value);
  
  // optional double battlePower = 10;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 10;
  inline double battlepower() const;
  inline void set_battlepower(double value);
  
  // @@protoc_insertion_point(class_scope:Offline.Attr)
 private:
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_def();
  inline void clear_has_def();
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_dodge();
  inline void clear_has_dodge();
  inline void set_has_critstrike();
  inline void clear_has_critstrike();
  inline void set_has_critrate();
  inline void clear_has_critrate();
  inline void set_has_critresist();
  inline void clear_has_critresist();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double hp_;
  double att_;
  double def_;
  ::google::protobuf::uint32 first_;
  ::google::protobuf::uint32 hit_;
  ::google::protobuf::uint32 dodge_;
  ::google::protobuf::uint32 critstrike_;
  double critrate_;
  double battlepower_;
  ::google::protobuf::uint32 critresist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_Offline_2eproto();
  friend void protobuf_AssignDesc_Offline_2eproto();
  friend void protobuf_ShutdownFile_Offline_2eproto();
  
  void InitAsDefaultInstance();
  static Attr* default_instance_;
};
// -------------------------------------------------------------------

class Hero : public ::google::protobuf::Message {
 public:
  Hero();
  virtual ~Hero();
  
  Hero(const Hero& from);
  
  inline Hero& operator=(const Hero& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Hero& default_instance();
  
  void Swap(Hero* other);
  
  // implements Message ----------------------------------------------
  
  Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hero& from);
  void MergeFrom(const Hero& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .Offline.Attr attr = 2;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 2;
  inline const ::Offline::Attr& attr() const;
  inline ::Offline::Attr* mutable_attr();
  inline ::Offline::Attr* release_attr();
  
  // repeated .Offline.Skill skills = 3;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 3;
  inline const ::Offline::Skill& skills(int index) const;
  inline ::Offline::Skill* mutable_skills(int index);
  inline ::Offline::Skill* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::Offline::Skill >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::Offline::Skill >*
      mutable_skills();
  
  // @@protoc_insertion_point(class_scope:Offline.Hero)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_attr();
  inline void clear_has_attr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Offline::Attr* attr_;
  ::google::protobuf::RepeatedPtrField< ::Offline::Skill > skills_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Offline_2eproto();
  friend void protobuf_AssignDesc_Offline_2eproto();
  friend void protobuf_ShutdownFile_Offline_2eproto();
  
  void InitAsDefaultInstance();
  static Hero* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();
  
  User(const User& from);
  
  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();
  
  void Swap(User* other);
  
  // implements Message ----------------------------------------------
  
  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 vipLevel = 3;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);
  
  // optional uint32 allianceId = 4;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 4;
  inline ::google::protobuf::uint32 allianceid() const;
  inline void set_allianceid(::google::protobuf::uint32 value);
  
  // optional uint32 ts = 5;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 5;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);
  
  // required string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string fig = 7;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 7;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const char* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  
  // repeated .Offline.Hero heros = 8;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 8;
  inline const ::Offline::Hero& heros(int index) const;
  inline ::Offline::Hero* mutable_heros(int index);
  inline ::Offline::Hero* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::Offline::Hero >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::Offline::Hero >*
      mutable_heros();
  
  // repeated uint32 props = 9;
  inline int props_size() const;
  inline void clear_props();
  static const int kPropsFieldNumber = 9;
  inline ::google::protobuf::uint32 props(int index) const;
  inline void set_props(int index, ::google::protobuf::uint32 value);
  inline void add_props(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      props() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_props();
  
  // required uint32 lastLoginTime = 10;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Offline.User)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_allianceid();
  inline void clear_has_allianceid();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 allianceid_;
  ::std::string* name_;
  ::std::string* fig_;
  ::google::protobuf::uint32 ts_;
  ::google::protobuf::uint32 lastlogintime_;
  ::google::protobuf::RepeatedPtrField< ::Offline::Hero > heros_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > props_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_Offline_2eproto();
  friend void protobuf_AssignDesc_Offline_2eproto();
  friend void protobuf_ShutdownFile_Offline_2eproto();
  
  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class Info : public ::google::protobuf::Message {
 public:
  Info();
  virtual ~Info();
  
  Info(const Info& from);
  
  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info& default_instance();
  
  void Swap(Info* other);
  
  // implements Message ----------------------------------------------
  
  Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Offline.User users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::Offline::User& users(int index) const;
  inline ::Offline::User* mutable_users(int index);
  inline ::Offline::User* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::Offline::User >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::Offline::User >*
      mutable_users();
  
  // @@protoc_insertion_point(class_scope:Offline.Info)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Offline::User > users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Offline_2eproto();
  friend void protobuf_AssignDesc_Offline_2eproto();
  friend void protobuf_ShutdownFile_Offline_2eproto();
  
  void InitAsDefaultInstance();
  static Info* default_instance_;
};
// ===================================================================


// ===================================================================

// Skill

// optional uint32 id = 1;
inline bool Skill::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Skill::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Skill::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Skill::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Skill::id() const {
  return id_;
}
inline void Skill::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 type = 2;
inline bool Skill::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Skill::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Skill::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Skill::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Skill::type() const {
  return type_;
}
inline void Skill::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional double hurt = 3;
inline bool Skill::has_hurt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Skill::set_has_hurt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Skill::clear_has_hurt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Skill::clear_hurt() {
  hurt_ = 0;
  clear_has_hurt();
}
inline double Skill::hurt() const {
  return hurt_;
}
inline void Skill::set_hurt(double value) {
  set_has_hurt();
  hurt_ = value;
}

// optional double multiple = 4;
inline bool Skill::has_multiple() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Skill::set_has_multiple() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Skill::clear_has_multiple() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Skill::clear_multiple() {
  multiple_ = 0;
  clear_has_multiple();
}
inline double Skill::multiple() const {
  return multiple_;
}
inline void Skill::set_multiple(double value) {
  set_has_multiple();
  multiple_ = value;
}

// optional uint32 initWeight = 5;
inline bool Skill::has_initweight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Skill::set_has_initweight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Skill::clear_has_initweight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Skill::clear_initweight() {
  initweight_ = 0u;
  clear_has_initweight();
}
inline ::google::protobuf::uint32 Skill::initweight() const {
  return initweight_;
}
inline void Skill::set_initweight(::google::protobuf::uint32 value) {
  set_has_initweight();
  initweight_ = value;
}

// optional uint32 userAddWeight = 6;
inline bool Skill::has_useraddweight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Skill::set_has_useraddweight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Skill::clear_has_useraddweight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Skill::clear_useraddweight() {
  useraddweight_ = 0u;
  clear_has_useraddweight();
}
inline ::google::protobuf::uint32 Skill::useraddweight() const {
  return useraddweight_;
}
inline void Skill::set_useraddweight(::google::protobuf::uint32 value) {
  set_has_useraddweight();
  useraddweight_ = value;
}

// -------------------------------------------------------------------

// Attr

// optional double hp = 1;
inline bool Attr::has_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attr::set_has_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attr::clear_has_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attr::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline double Attr::hp() const {
  return hp_;
}
inline void Attr::set_hp(double value) {
  set_has_hp();
  hp_ = value;
}

// optional double att = 2;
inline bool Attr::has_att() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attr::set_has_att() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attr::clear_has_att() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attr::clear_att() {
  att_ = 0;
  clear_has_att();
}
inline double Attr::att() const {
  return att_;
}
inline void Attr::set_att(double value) {
  set_has_att();
  att_ = value;
}

// optional double def = 3;
inline bool Attr::has_def() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attr::set_has_def() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attr::clear_has_def() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attr::clear_def() {
  def_ = 0;
  clear_has_def();
}
inline double Attr::def() const {
  return def_;
}
inline void Attr::set_def(double value) {
  set_has_def();
  def_ = value;
}

// optional uint32 first = 4;
inline bool Attr::has_first() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attr::set_has_first() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attr::clear_has_first() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attr::clear_first() {
  first_ = 0u;
  clear_has_first();
}
inline ::google::protobuf::uint32 Attr::first() const {
  return first_;
}
inline void Attr::set_first(::google::protobuf::uint32 value) {
  set_has_first();
  first_ = value;
}

// optional uint32 hit = 5;
inline bool Attr::has_hit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Attr::set_has_hit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Attr::clear_has_hit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Attr::clear_hit() {
  hit_ = 0u;
  clear_has_hit();
}
inline ::google::protobuf::uint32 Attr::hit() const {
  return hit_;
}
inline void Attr::set_hit(::google::protobuf::uint32 value) {
  set_has_hit();
  hit_ = value;
}

// optional uint32 dodge = 6;
inline bool Attr::has_dodge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Attr::set_has_dodge() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Attr::clear_has_dodge() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Attr::clear_dodge() {
  dodge_ = 0u;
  clear_has_dodge();
}
inline ::google::protobuf::uint32 Attr::dodge() const {
  return dodge_;
}
inline void Attr::set_dodge(::google::protobuf::uint32 value) {
  set_has_dodge();
  dodge_ = value;
}

// optional uint32 critStrike = 7;
inline bool Attr::has_critstrike() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Attr::set_has_critstrike() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Attr::clear_has_critstrike() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Attr::clear_critstrike() {
  critstrike_ = 0u;
  clear_has_critstrike();
}
inline ::google::protobuf::uint32 Attr::critstrike() const {
  return critstrike_;
}
inline void Attr::set_critstrike(::google::protobuf::uint32 value) {
  set_has_critstrike();
  critstrike_ = value;
}

// optional double critRate = 8;
inline bool Attr::has_critrate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Attr::set_has_critrate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Attr::clear_has_critrate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Attr::clear_critrate() {
  critrate_ = 0;
  clear_has_critrate();
}
inline double Attr::critrate() const {
  return critrate_;
}
inline void Attr::set_critrate(double value) {
  set_has_critrate();
  critrate_ = value;
}

// optional uint32 critResist = 9;
inline bool Attr::has_critresist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Attr::set_has_critresist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Attr::clear_has_critresist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Attr::clear_critresist() {
  critresist_ = 0u;
  clear_has_critresist();
}
inline ::google::protobuf::uint32 Attr::critresist() const {
  return critresist_;
}
inline void Attr::set_critresist(::google::protobuf::uint32 value) {
  set_has_critresist();
  critresist_ = value;
}

// optional double battlePower = 10;
inline bool Attr::has_battlepower() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Attr::set_has_battlepower() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Attr::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Attr::clear_battlepower() {
  battlepower_ = 0;
  clear_has_battlepower();
}
inline double Attr::battlepower() const {
  return battlepower_;
}
inline void Attr::set_battlepower(double value) {
  set_has_battlepower();
  battlepower_ = value;
}

// -------------------------------------------------------------------

// Hero

// required uint32 id = 1;
inline bool Hero::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hero::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hero::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hero::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Hero::id() const {
  return id_;
}
inline void Hero::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .Offline.Attr attr = 2;
inline bool Hero::has_attr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hero::set_has_attr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hero::clear_has_attr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hero::clear_attr() {
  if (attr_ != NULL) attr_->::Offline::Attr::Clear();
  clear_has_attr();
}
inline const ::Offline::Attr& Hero::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::Offline::Attr* Hero::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::Offline::Attr;
  return attr_;
}
inline ::Offline::Attr* Hero::release_attr() {
  clear_has_attr();
  ::Offline::Attr* temp = attr_;
  attr_ = NULL;
  return temp;
}

// repeated .Offline.Skill skills = 3;
inline int Hero::skills_size() const {
  return skills_.size();
}
inline void Hero::clear_skills() {
  skills_.Clear();
}
inline const ::Offline::Skill& Hero::skills(int index) const {
  return skills_.Get(index);
}
inline ::Offline::Skill* Hero::mutable_skills(int index) {
  return skills_.Mutable(index);
}
inline ::Offline::Skill* Hero::add_skills() {
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Offline::Skill >&
Hero::skills() const {
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::Offline::Skill >*
Hero::mutable_skills() {
  return &skills_;
}

// -------------------------------------------------------------------

// User

// required uint32 uid = 1;
inline bool User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 User::uid() const {
  return uid_;
}
inline void User::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 level = 2;
inline bool User::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 User::level() const {
  return level_;
}
inline void User::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLevel = 3;
inline bool User::has_viplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void User::set_has_viplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void User::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void User::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 User::viplevel() const {
  return viplevel_;
}
inline void User::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional uint32 allianceId = 4;
inline bool User::has_allianceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void User::set_has_allianceid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void User::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void User::clear_allianceid() {
  allianceid_ = 0u;
  clear_has_allianceid();
}
inline ::google::protobuf::uint32 User::allianceid() const {
  return allianceid_;
}
inline void User::set_allianceid(::google::protobuf::uint32 value) {
  set_has_allianceid();
  allianceid_ = value;
}

// optional uint32 ts = 5;
inline bool User::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void User::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void User::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void User::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 User::ts() const {
  return ts_;
}
inline void User::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
}

// required string name = 6;
inline bool User::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void User::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void User::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void User::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& User::name() const {
  return *name_;
}
inline void User::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void User::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void User::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* User::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fig = 7;
inline bool User::has_fig() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void User::set_has_fig() {
  _has_bits_[0] |= 0x00000040u;
}
inline void User::clear_has_fig() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void User::clear_fig() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& User::fig() const {
  return *fig_;
}
inline void User::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void User::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void User::set_fig(const char* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* User::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  return fig_;
}
inline ::std::string* User::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Offline.Hero heros = 8;
inline int User::heros_size() const {
  return heros_.size();
}
inline void User::clear_heros() {
  heros_.Clear();
}
inline const ::Offline::Hero& User::heros(int index) const {
  return heros_.Get(index);
}
inline ::Offline::Hero* User::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::Offline::Hero* User::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Offline::Hero >&
User::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::Offline::Hero >*
User::mutable_heros() {
  return &heros_;
}

// repeated uint32 props = 9;
inline int User::props_size() const {
  return props_.size();
}
inline void User::clear_props() {
  props_.Clear();
}
inline ::google::protobuf::uint32 User::props(int index) const {
  return props_.Get(index);
}
inline void User::set_props(int index, ::google::protobuf::uint32 value) {
  props_.Set(index, value);
}
inline void User::add_props(::google::protobuf::uint32 value) {
  props_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
User::props() const {
  return props_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
User::mutable_props() {
  return &props_;
}

// required uint32 lastLoginTime = 10;
inline bool User::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void User::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void User::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void User::clear_lastlogintime() {
  lastlogintime_ = 0u;
  clear_has_lastlogintime();
}
inline ::google::protobuf::uint32 User::lastlogintime() const {
  return lastlogintime_;
}
inline void User::set_lastlogintime(::google::protobuf::uint32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// -------------------------------------------------------------------

// Info

// repeated .Offline.User users = 1;
inline int Info::users_size() const {
  return users_.size();
}
inline void Info::clear_users() {
  users_.Clear();
}
inline const ::Offline::User& Info::users(int index) const {
  return users_.Get(index);
}
inline ::Offline::User* Info::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::Offline::User* Info::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Offline::User >&
Info::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::Offline::User >*
Info::mutable_users() {
  return &users_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Offline

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Offline_2eproto__INCLUDED
