// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoCards.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoCards {

namespace {

const ::google::protobuf::Descriptor* UserCardsCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserCardsCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockCardsCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockCardsCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardsAllChangeCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardsAllChangeCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoUpdateCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoUpdateCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoUpdateCardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoUpdateCardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDupCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDupCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDupCardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDupCardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDelCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDelCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoDelCardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoDelCardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBuyCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBuyCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBuyCardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBuyCardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoCards_2eproto() {
  protobuf_AddDesc_ProtoCards_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoCards.proto");
  GOOGLE_CHECK(file != NULL);
  UserCardsCPP_descriptor_ = file->message_type(0);
  static const int UserCardsCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCardsCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCardsCPP, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCardsCPP, star_),
  };
  UserCardsCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserCardsCPP_descriptor_,
      UserCardsCPP::default_instance_,
      UserCardsCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCardsCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserCardsCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserCardsCPP));
  UnlockCardsCPP_descriptor_ = file->message_type(1);
  static const int UnlockCardsCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockCardsCPP, id_),
  };
  UnlockCardsCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockCardsCPP_descriptor_,
      UnlockCardsCPP::default_instance_,
      UnlockCardsCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockCardsCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockCardsCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockCardsCPP));
  CardsAllChangeCPP_descriptor_ = file->message_type(2);
  static const int CardsAllChangeCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsAllChangeCPP, cards_),
  };
  CardsAllChangeCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardsAllChangeCPP_descriptor_,
      CardsAllChangeCPP::default_instance_,
      CardsAllChangeCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsAllChangeCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsAllChangeCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardsAllChangeCPP));
  ProtoUpdateCardReq_descriptor_ = file->message_type(3);
  static const int ProtoUpdateCardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoUpdateCardReq, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoUpdateCardReq, ud_),
  };
  ProtoUpdateCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoUpdateCardReq_descriptor_,
      ProtoUpdateCardReq::default_instance_,
      ProtoUpdateCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoUpdateCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoUpdateCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoUpdateCardReq));
  ProtoUpdateCardResp_descriptor_ = file->message_type(4);
  static const int ProtoUpdateCardResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoUpdateCardResp, commons_),
  };
  ProtoUpdateCardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoUpdateCardResp_descriptor_,
      ProtoUpdateCardResp::default_instance_,
      ProtoUpdateCardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoUpdateCardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoUpdateCardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoUpdateCardResp));
  ProtoDupCardReq_descriptor_ = file->message_type(5);
  static const int ProtoDupCardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDupCardReq, id_),
  };
  ProtoDupCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDupCardReq_descriptor_,
      ProtoDupCardReq::default_instance_,
      ProtoDupCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDupCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDupCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDupCardReq));
  ProtoDupCardResp_descriptor_ = file->message_type(6);
  static const int ProtoDupCardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDupCardResp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDupCardResp, commons_),
  };
  ProtoDupCardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDupCardResp_descriptor_,
      ProtoDupCardResp::default_instance_,
      ProtoDupCardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDupCardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDupCardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDupCardResp));
  ProtoDelCardReq_descriptor_ = file->message_type(7);
  static const int ProtoDelCardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelCardReq, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelCardReq, ud_),
  };
  ProtoDelCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDelCardReq_descriptor_,
      ProtoDelCardReq::default_instance_,
      ProtoDelCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDelCardReq));
  ProtoDelCardResp_descriptor_ = file->message_type(8);
  static const int ProtoDelCardResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelCardResp, commons_),
  };
  ProtoDelCardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoDelCardResp_descriptor_,
      ProtoDelCardResp::default_instance_,
      ProtoDelCardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelCardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoDelCardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoDelCardResp));
  ProtoBuyCardReq_descriptor_ = file->message_type(9);
  static const int ProtoBuyCardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyCardReq, cardid_),
  };
  ProtoBuyCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBuyCardReq_descriptor_,
      ProtoBuyCardReq::default_instance_,
      ProtoBuyCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBuyCardReq));
  ProtoBuyCardResp_descriptor_ = file->message_type(10);
  static const int ProtoBuyCardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyCardResp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyCardResp, commons_),
  };
  ProtoBuyCardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBuyCardResp_descriptor_,
      ProtoBuyCardResp::default_instance_,
      ProtoBuyCardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyCardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyCardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBuyCardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoCards_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserCardsCPP_descriptor_, &UserCardsCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockCardsCPP_descriptor_, &UnlockCardsCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardsAllChangeCPP_descriptor_, &CardsAllChangeCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoUpdateCardReq_descriptor_, &ProtoUpdateCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoUpdateCardResp_descriptor_, &ProtoUpdateCardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDupCardReq_descriptor_, &ProtoDupCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDupCardResp_descriptor_, &ProtoDupCardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDelCardReq_descriptor_, &ProtoDelCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoDelCardResp_descriptor_, &ProtoDelCardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBuyCardReq_descriptor_, &ProtoBuyCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBuyCardResp_descriptor_, &ProtoBuyCardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoCards_2eproto() {
  delete UserCardsCPP::default_instance_;
  delete UserCardsCPP_reflection_;
  delete UnlockCardsCPP::default_instance_;
  delete UnlockCardsCPP_reflection_;
  delete CardsAllChangeCPP::default_instance_;
  delete CardsAllChangeCPP_reflection_;
  delete ProtoUpdateCardReq::default_instance_;
  delete ProtoUpdateCardReq_reflection_;
  delete ProtoUpdateCardResp::default_instance_;
  delete ProtoUpdateCardResp_reflection_;
  delete ProtoDupCardReq::default_instance_;
  delete ProtoDupCardReq_reflection_;
  delete ProtoDupCardResp::default_instance_;
  delete ProtoDupCardResp_reflection_;
  delete ProtoDelCardReq::default_instance_;
  delete ProtoDelCardReq_reflection_;
  delete ProtoDelCardResp::default_instance_;
  delete ProtoDelCardResp_reflection_;
  delete ProtoBuyCardReq::default_instance_;
  delete ProtoBuyCardReq_reflection_;
  delete ProtoBuyCardResp::default_instance_;
  delete ProtoBuyCardResp_reflection_;
}

void protobuf_AddDesc_ProtoCards_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ProtoCards.proto\022\nProtoCards\032\020DataComm"
    "on.proto\"8\n\014UserCardsCPP\022\n\n\002ud\030\001 \002(\r\022\016\n\006"
    "cardId\030\002 \002(\r\022\014\n\004star\030\003 \001(\r\"\034\n\016UnlockCard"
    "sCPP\022\n\n\002id\030\001 \002(\r\"<\n\021CardsAllChangeCPP\022\'\n"
    "\005cards\030\001 \003(\0132\030.ProtoCards.UserCardsCPP\"0"
    "\n\022ProtoUpdateCardReq\022\016\n\006cardId\030\001 \002(\r\022\n\n\002"
    "ud\030\002 \002(\r\"B\n\023ProtoUpdateCardResp\022+\n\007commo"
    "ns\030\001 \002(\0132\032.DataCommon.CommonItemsCPP\"\035\n\017"
    "ProtoDupCardReq\022\n\n\002id\030\001 \002(\r\"l\n\020ProtoDupC"
    "ardResp\022+\n\004item\030\001 \002(\0132\035.ProtoCards.Cards"
    "AllChangeCPP\022+\n\007commons\030\002 \002(\0132\032.DataComm"
    "on.CommonItemsCPP\"-\n\017ProtoDelCardReq\022\016\n\006"
    "cardId\030\001 \002(\r\022\n\n\002ud\030\002 \002(\r\"\?\n\020ProtoDelCard"
    "Resp\022+\n\007commons\030\001 \002(\0132\032.DataCommon.Commo"
    "nItemsCPP\"!\n\017ProtoBuyCardReq\022\016\n\006cardId\030\001"
    " \002(\r\"l\n\020ProtoBuyCardResp\022+\n\004item\030\001 \002(\0132\035"
    ".ProtoCards.CardsAllChangeCPP\022+\n\007commons"
    "\030\002 \002(\0132\032.DataCommon.CommonItemsCPP", 714);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoCards.proto", &protobuf_RegisterTypes);
  UserCardsCPP::default_instance_ = new UserCardsCPP();
  UnlockCardsCPP::default_instance_ = new UnlockCardsCPP();
  CardsAllChangeCPP::default_instance_ = new CardsAllChangeCPP();
  ProtoUpdateCardReq::default_instance_ = new ProtoUpdateCardReq();
  ProtoUpdateCardResp::default_instance_ = new ProtoUpdateCardResp();
  ProtoDupCardReq::default_instance_ = new ProtoDupCardReq();
  ProtoDupCardResp::default_instance_ = new ProtoDupCardResp();
  ProtoDelCardReq::default_instance_ = new ProtoDelCardReq();
  ProtoDelCardResp::default_instance_ = new ProtoDelCardResp();
  ProtoBuyCardReq::default_instance_ = new ProtoBuyCardReq();
  ProtoBuyCardResp::default_instance_ = new ProtoBuyCardResp();
  UserCardsCPP::default_instance_->InitAsDefaultInstance();
  UnlockCardsCPP::default_instance_->InitAsDefaultInstance();
  CardsAllChangeCPP::default_instance_->InitAsDefaultInstance();
  ProtoUpdateCardReq::default_instance_->InitAsDefaultInstance();
  ProtoUpdateCardResp::default_instance_->InitAsDefaultInstance();
  ProtoDupCardReq::default_instance_->InitAsDefaultInstance();
  ProtoDupCardResp::default_instance_->InitAsDefaultInstance();
  ProtoDelCardReq::default_instance_->InitAsDefaultInstance();
  ProtoDelCardResp::default_instance_->InitAsDefaultInstance();
  ProtoBuyCardReq::default_instance_->InitAsDefaultInstance();
  ProtoBuyCardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoCards_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoCards_2eproto {
  StaticDescriptorInitializer_ProtoCards_2eproto() {
    protobuf_AddDesc_ProtoCards_2eproto();
  }
} static_descriptor_initializer_ProtoCards_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UserCardsCPP::kUdFieldNumber;
const int UserCardsCPP::kCardIdFieldNumber;
const int UserCardsCPP::kStarFieldNumber;
#endif  // !_MSC_VER

UserCardsCPP::UserCardsCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserCardsCPP::InitAsDefaultInstance() {
}

UserCardsCPP::UserCardsCPP(const UserCardsCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserCardsCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  cardid_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserCardsCPP::~UserCardsCPP() {
  SharedDtor();
}

void UserCardsCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserCardsCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserCardsCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCardsCPP_descriptor_;
}

const UserCardsCPP& UserCardsCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

UserCardsCPP* UserCardsCPP::default_instance_ = NULL;

UserCardsCPP* UserCardsCPP::New() const {
  return new UserCardsCPP;
}

void UserCardsCPP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ud_ = 0u;
    cardid_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserCardsCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cardId;
        break;
      }
      
      // required uint32 cardId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }
      
      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserCardsCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }
  
  // required uint32 cardId = 2;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cardid(), output);
  }
  
  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserCardsCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }
  
  // required uint32 cardId = 2;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cardid(), target);
  }
  
  // optional uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserCardsCPP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }
    
    // required uint32 cardId = 2;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }
    
    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserCardsCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserCardsCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserCardsCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserCardsCPP::MergeFrom(const UserCardsCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserCardsCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserCardsCPP::CopyFrom(const UserCardsCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserCardsCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UserCardsCPP::Swap(UserCardsCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(cardid_, other->cardid_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserCardsCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserCardsCPP_descriptor_;
  metadata.reflection = UserCardsCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockCardsCPP::kIdFieldNumber;
#endif  // !_MSC_VER

UnlockCardsCPP::UnlockCardsCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlockCardsCPP::InitAsDefaultInstance() {
}

UnlockCardsCPP::UnlockCardsCPP(const UnlockCardsCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlockCardsCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockCardsCPP::~UnlockCardsCPP() {
  SharedDtor();
}

void UnlockCardsCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockCardsCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockCardsCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockCardsCPP_descriptor_;
}

const UnlockCardsCPP& UnlockCardsCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

UnlockCardsCPP* UnlockCardsCPP::default_instance_ = NULL;

UnlockCardsCPP* UnlockCardsCPP::New() const {
  return new UnlockCardsCPP;
}

void UnlockCardsCPP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockCardsCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlockCardsCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlockCardsCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlockCardsCPP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockCardsCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockCardsCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockCardsCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockCardsCPP::MergeFrom(const UnlockCardsCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockCardsCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockCardsCPP::CopyFrom(const UnlockCardsCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockCardsCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnlockCardsCPP::Swap(UnlockCardsCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockCardsCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockCardsCPP_descriptor_;
  metadata.reflection = UnlockCardsCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardsAllChangeCPP::kCardsFieldNumber;
#endif  // !_MSC_VER

CardsAllChangeCPP::CardsAllChangeCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardsAllChangeCPP::InitAsDefaultInstance() {
}

CardsAllChangeCPP::CardsAllChangeCPP(const CardsAllChangeCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardsAllChangeCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardsAllChangeCPP::~CardsAllChangeCPP() {
  SharedDtor();
}

void CardsAllChangeCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardsAllChangeCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardsAllChangeCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardsAllChangeCPP_descriptor_;
}

const CardsAllChangeCPP& CardsAllChangeCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

CardsAllChangeCPP* CardsAllChangeCPP::default_instance_ = NULL;

CardsAllChangeCPP* CardsAllChangeCPP::New() const {
  return new CardsAllChangeCPP;
}

void CardsAllChangeCPP::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardsAllChangeCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoCards.UserCardsCPP cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardsAllChangeCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoCards.UserCardsCPP cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardsAllChangeCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoCards.UserCardsCPP cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardsAllChangeCPP::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoCards.UserCardsCPP cards = 1;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardsAllChangeCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardsAllChangeCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardsAllChangeCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardsAllChangeCPP::MergeFrom(const CardsAllChangeCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardsAllChangeCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardsAllChangeCPP::CopyFrom(const CardsAllChangeCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardsAllChangeCPP::IsInitialized() const {
  
  for (int i = 0; i < cards_size(); i++) {
    if (!this->cards(i).IsInitialized()) return false;
  }
  return true;
}

void CardsAllChangeCPP::Swap(CardsAllChangeCPP* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardsAllChangeCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardsAllChangeCPP_descriptor_;
  metadata.reflection = CardsAllChangeCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoUpdateCardReq::kCardIdFieldNumber;
const int ProtoUpdateCardReq::kUdFieldNumber;
#endif  // !_MSC_VER

ProtoUpdateCardReq::ProtoUpdateCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoUpdateCardReq::InitAsDefaultInstance() {
}

ProtoUpdateCardReq::ProtoUpdateCardReq(const ProtoUpdateCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoUpdateCardReq::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = 0u;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoUpdateCardReq::~ProtoUpdateCardReq() {
  SharedDtor();
}

void ProtoUpdateCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoUpdateCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoUpdateCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoUpdateCardReq_descriptor_;
}

const ProtoUpdateCardReq& ProtoUpdateCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

ProtoUpdateCardReq* ProtoUpdateCardReq::default_instance_ = NULL;

ProtoUpdateCardReq* ProtoUpdateCardReq::New() const {
  return new ProtoUpdateCardReq;
}

void ProtoUpdateCardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardid_ = 0u;
    ud_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoUpdateCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cardId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ud;
        break;
      }
      
      // required uint32 ud = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoUpdateCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cardId = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cardid(), output);
  }
  
  // required uint32 ud = 2;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ud(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoUpdateCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cardId = 1;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cardid(), target);
  }
  
  // required uint32 ud = 2;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ud(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoUpdateCardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cardId = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }
    
    // required uint32 ud = 2;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoUpdateCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoUpdateCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoUpdateCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoUpdateCardReq::MergeFrom(const ProtoUpdateCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoUpdateCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoUpdateCardReq::CopyFrom(const ProtoUpdateCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoUpdateCardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProtoUpdateCardReq::Swap(ProtoUpdateCardReq* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoUpdateCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoUpdateCardReq_descriptor_;
  metadata.reflection = ProtoUpdateCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoUpdateCardResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoUpdateCardResp::ProtoUpdateCardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoUpdateCardResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoUpdateCardResp::ProtoUpdateCardResp(const ProtoUpdateCardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoUpdateCardResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoUpdateCardResp::~ProtoUpdateCardResp() {
  SharedDtor();
}

void ProtoUpdateCardResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ProtoUpdateCardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoUpdateCardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoUpdateCardResp_descriptor_;
}

const ProtoUpdateCardResp& ProtoUpdateCardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

ProtoUpdateCardResp* ProtoUpdateCardResp::default_instance_ = NULL;

ProtoUpdateCardResp* ProtoUpdateCardResp::New() const {
  return new ProtoUpdateCardResp;
}

void ProtoUpdateCardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoUpdateCardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoUpdateCardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoUpdateCardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoUpdateCardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoUpdateCardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoUpdateCardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoUpdateCardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoUpdateCardResp::MergeFrom(const ProtoUpdateCardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoUpdateCardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoUpdateCardResp::CopyFrom(const ProtoUpdateCardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoUpdateCardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoUpdateCardResp::Swap(ProtoUpdateCardResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoUpdateCardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoUpdateCardResp_descriptor_;
  metadata.reflection = ProtoUpdateCardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoDupCardReq::kIdFieldNumber;
#endif  // !_MSC_VER

ProtoDupCardReq::ProtoDupCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDupCardReq::InitAsDefaultInstance() {
}

ProtoDupCardReq::ProtoDupCardReq(const ProtoDupCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDupCardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDupCardReq::~ProtoDupCardReq() {
  SharedDtor();
}

void ProtoDupCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoDupCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDupCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDupCardReq_descriptor_;
}

const ProtoDupCardReq& ProtoDupCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

ProtoDupCardReq* ProtoDupCardReq::default_instance_ = NULL;

ProtoDupCardReq* ProtoDupCardReq::New() const {
  return new ProtoDupCardReq;
}

void ProtoDupCardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDupCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDupCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDupCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDupCardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDupCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDupCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDupCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDupCardReq::MergeFrom(const ProtoDupCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDupCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDupCardReq::CopyFrom(const ProtoDupCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDupCardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoDupCardReq::Swap(ProtoDupCardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDupCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDupCardReq_descriptor_;
  metadata.reflection = ProtoDupCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoDupCardResp::kItemFieldNumber;
const int ProtoDupCardResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoDupCardResp::ProtoDupCardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDupCardResp::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoCards::CardsAllChangeCPP*>(&::ProtoCards::CardsAllChangeCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoDupCardResp::ProtoDupCardResp(const ProtoDupCardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDupCardResp::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDupCardResp::~ProtoDupCardResp() {
  SharedDtor();
}

void ProtoDupCardResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete commons_;
  }
}

void ProtoDupCardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDupCardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDupCardResp_descriptor_;
}

const ProtoDupCardResp& ProtoDupCardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

ProtoDupCardResp* ProtoDupCardResp::default_instance_ = NULL;

ProtoDupCardResp* ProtoDupCardResp::New() const {
  return new ProtoDupCardResp;
}

void ProtoDupCardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoCards::CardsAllChangeCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDupCardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoCards.CardsAllChangeCPP item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDupCardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoCards.CardsAllChangeCPP item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDupCardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoCards.CardsAllChangeCPP item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDupCardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoCards.CardsAllChangeCPP item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDupCardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDupCardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDupCardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDupCardResp::MergeFrom(const ProtoDupCardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ProtoCards::CardsAllChangeCPP::MergeFrom(from.item());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDupCardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDupCardResp::CopyFrom(const ProtoDupCardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDupCardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoDupCardResp::Swap(ProtoDupCardResp* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDupCardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDupCardResp_descriptor_;
  metadata.reflection = ProtoDupCardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoDelCardReq::kCardIdFieldNumber;
const int ProtoDelCardReq::kUdFieldNumber;
#endif  // !_MSC_VER

ProtoDelCardReq::ProtoDelCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDelCardReq::InitAsDefaultInstance() {
}

ProtoDelCardReq::ProtoDelCardReq(const ProtoDelCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDelCardReq::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = 0u;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDelCardReq::~ProtoDelCardReq() {
  SharedDtor();
}

void ProtoDelCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoDelCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDelCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDelCardReq_descriptor_;
}

const ProtoDelCardReq& ProtoDelCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

ProtoDelCardReq* ProtoDelCardReq::default_instance_ = NULL;

ProtoDelCardReq* ProtoDelCardReq::New() const {
  return new ProtoDelCardReq;
}

void ProtoDelCardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardid_ = 0u;
    ud_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDelCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cardId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ud;
        break;
      }
      
      // required uint32 ud = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDelCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cardId = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cardid(), output);
  }
  
  // required uint32 ud = 2;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ud(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDelCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cardId = 1;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cardid(), target);
  }
  
  // required uint32 ud = 2;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ud(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDelCardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cardId = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }
    
    // required uint32 ud = 2;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDelCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDelCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDelCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDelCardReq::MergeFrom(const ProtoDelCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDelCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDelCardReq::CopyFrom(const ProtoDelCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDelCardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProtoDelCardReq::Swap(ProtoDelCardReq* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDelCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDelCardReq_descriptor_;
  metadata.reflection = ProtoDelCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoDelCardResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoDelCardResp::ProtoDelCardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoDelCardResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoDelCardResp::ProtoDelCardResp(const ProtoDelCardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoDelCardResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoDelCardResp::~ProtoDelCardResp() {
  SharedDtor();
}

void ProtoDelCardResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ProtoDelCardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoDelCardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoDelCardResp_descriptor_;
}

const ProtoDelCardResp& ProtoDelCardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

ProtoDelCardResp* ProtoDelCardResp::default_instance_ = NULL;

ProtoDelCardResp* ProtoDelCardResp::New() const {
  return new ProtoDelCardResp;
}

void ProtoDelCardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoDelCardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoDelCardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoDelCardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoDelCardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoDelCardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoDelCardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoDelCardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoDelCardResp::MergeFrom(const ProtoDelCardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoDelCardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoDelCardResp::CopyFrom(const ProtoDelCardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoDelCardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoDelCardResp::Swap(ProtoDelCardResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoDelCardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoDelCardResp_descriptor_;
  metadata.reflection = ProtoDelCardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBuyCardReq::kCardIdFieldNumber;
#endif  // !_MSC_VER

ProtoBuyCardReq::ProtoBuyCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBuyCardReq::InitAsDefaultInstance() {
}

ProtoBuyCardReq::ProtoBuyCardReq(const ProtoBuyCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBuyCardReq::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBuyCardReq::~ProtoBuyCardReq() {
  SharedDtor();
}

void ProtoBuyCardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBuyCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBuyCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBuyCardReq_descriptor_;
}

const ProtoBuyCardReq& ProtoBuyCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

ProtoBuyCardReq* ProtoBuyCardReq::default_instance_ = NULL;

ProtoBuyCardReq* ProtoBuyCardReq::New() const {
  return new ProtoBuyCardReq;
}

void ProtoBuyCardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBuyCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cardId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBuyCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cardId = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cardid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBuyCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cardId = 1;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cardid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBuyCardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cardId = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBuyCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBuyCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBuyCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBuyCardReq::MergeFrom(const ProtoBuyCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBuyCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBuyCardReq::CopyFrom(const ProtoBuyCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBuyCardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoBuyCardReq::Swap(ProtoBuyCardReq* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBuyCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBuyCardReq_descriptor_;
  metadata.reflection = ProtoBuyCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBuyCardResp::kItemFieldNumber;
const int ProtoBuyCardResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoBuyCardResp::ProtoBuyCardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBuyCardResp::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoCards::CardsAllChangeCPP*>(&::ProtoCards::CardsAllChangeCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoBuyCardResp::ProtoBuyCardResp(const ProtoBuyCardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBuyCardResp::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBuyCardResp::~ProtoBuyCardResp() {
  SharedDtor();
}

void ProtoBuyCardResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete commons_;
  }
}

void ProtoBuyCardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBuyCardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBuyCardResp_descriptor_;
}

const ProtoBuyCardResp& ProtoBuyCardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCards_2eproto();  return *default_instance_;
}

ProtoBuyCardResp* ProtoBuyCardResp::default_instance_ = NULL;

ProtoBuyCardResp* ProtoBuyCardResp::New() const {
  return new ProtoBuyCardResp;
}

void ProtoBuyCardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoCards::CardsAllChangeCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBuyCardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoCards.CardsAllChangeCPP item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBuyCardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoCards.CardsAllChangeCPP item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBuyCardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoCards.CardsAllChangeCPP item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBuyCardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoCards.CardsAllChangeCPP item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBuyCardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBuyCardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBuyCardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBuyCardResp::MergeFrom(const ProtoBuyCardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ProtoCards::CardsAllChangeCPP::MergeFrom(from.item());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBuyCardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBuyCardResp::CopyFrom(const ProtoBuyCardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBuyCardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoBuyCardResp::Swap(ProtoBuyCardResp* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBuyCardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBuyCardResp_descriptor_;
  metadata.reflection = ProtoBuyCardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCards

// @@protoc_insertion_point(global_scope)
