// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoActivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoActivity {

namespace {

const ::google::protobuf::Descriptor* GameAcitivityCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAcitivityCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAcitivityAllCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAcitivityAllCPP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoActivity_2eproto() {
  protobuf_AddDesc_ProtoActivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoActivity.proto");
  GOOGLE_CHECK(file != NULL);
  GameAcitivityCPP_descriptor_ = file->message_type(0);
  static const int GameAcitivityCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAcitivityCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAcitivityCPP, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAcitivityCPP, actdata_),
  };
  GameAcitivityCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAcitivityCPP_descriptor_,
      GameAcitivityCPP::default_instance_,
      GameAcitivityCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAcitivityCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAcitivityCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAcitivityCPP));
  GameAcitivityAllCPP_descriptor_ = file->message_type(1);
  static const int GameAcitivityAllCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAcitivityAllCPP, activities_),
  };
  GameAcitivityAllCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAcitivityAllCPP_descriptor_,
      GameAcitivityAllCPP::default_instance_,
      GameAcitivityAllCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAcitivityAllCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAcitivityAllCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAcitivityAllCPP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoActivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAcitivityCPP_descriptor_, &GameAcitivityCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAcitivityAllCPP_descriptor_, &GameAcitivityAllCPP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoActivity_2eproto() {
  delete GameAcitivityCPP::default_instance_;
  delete GameAcitivityCPP_reflection_;
  delete GameAcitivityAllCPP::default_instance_;
  delete GameAcitivityAllCPP_reflection_;
}

void protobuf_AddDesc_ProtoActivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoActivity.proto\022\rProtoActivity\"@\n\020"
    "GameAcitivityCPP\022\n\n\002id\030\001 \002(\r\022\017\n\007version\030"
    "\002 \002(\r\022\017\n\007actdata\030\003 \003(\r\"J\n\023GameAcitivityA"
    "llCPP\0223\n\nactivities\030\001 \003(\0132\037.ProtoActivit"
    "y.GameAcitivityCPP", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoActivity.proto", &protobuf_RegisterTypes);
  GameAcitivityCPP::default_instance_ = new GameAcitivityCPP();
  GameAcitivityAllCPP::default_instance_ = new GameAcitivityAllCPP();
  GameAcitivityCPP::default_instance_->InitAsDefaultInstance();
  GameAcitivityAllCPP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoActivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoActivity_2eproto {
  StaticDescriptorInitializer_ProtoActivity_2eproto() {
    protobuf_AddDesc_ProtoActivity_2eproto();
  }
} static_descriptor_initializer_ProtoActivity_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GameAcitivityCPP::kIdFieldNumber;
const int GameAcitivityCPP::kVersionFieldNumber;
const int GameAcitivityCPP::kActdataFieldNumber;
#endif  // !_MSC_VER

GameAcitivityCPP::GameAcitivityCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameAcitivityCPP::InitAsDefaultInstance() {
}

GameAcitivityCPP::GameAcitivityCPP(const GameAcitivityCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameAcitivityCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAcitivityCPP::~GameAcitivityCPP() {
  SharedDtor();
}

void GameAcitivityCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameAcitivityCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAcitivityCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAcitivityCPP_descriptor_;
}

const GameAcitivityCPP& GameAcitivityCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();  return *default_instance_;
}

GameAcitivityCPP* GameAcitivityCPP::default_instance_ = NULL;

GameAcitivityCPP* GameAcitivityCPP::New() const {
  return new GameAcitivityCPP;
}

void GameAcitivityCPP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    version_ = 0u;
  }
  actdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAcitivityCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }
      
      // required uint32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actdata;
        break;
      }
      
      // repeated uint32 actdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_actdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_actdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameAcitivityCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }
  
  // repeated uint32 actdata = 3;
  for (int i = 0; i < this->actdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->actdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameAcitivityCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }
  
  // repeated uint32 actdata = 3;
  for (int i = 0; i < this->actdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->actdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameAcitivityCPP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
  }
  // repeated uint32 actdata = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->actdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->actdata(i));
    }
    total_size += 1 * this->actdata_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAcitivityCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAcitivityCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameAcitivityCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAcitivityCPP::MergeFrom(const GameAcitivityCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  actdata_.MergeFrom(from.actdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAcitivityCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAcitivityCPP::CopyFrom(const GameAcitivityCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAcitivityCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameAcitivityCPP::Swap(GameAcitivityCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(version_, other->version_);
    actdata_.Swap(&other->actdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameAcitivityCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAcitivityCPP_descriptor_;
  metadata.reflection = GameAcitivityCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAcitivityAllCPP::kActivitiesFieldNumber;
#endif  // !_MSC_VER

GameAcitivityAllCPP::GameAcitivityAllCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameAcitivityAllCPP::InitAsDefaultInstance() {
}

GameAcitivityAllCPP::GameAcitivityAllCPP(const GameAcitivityAllCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameAcitivityAllCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAcitivityAllCPP::~GameAcitivityAllCPP() {
  SharedDtor();
}

void GameAcitivityAllCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameAcitivityAllCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAcitivityAllCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAcitivityAllCPP_descriptor_;
}

const GameAcitivityAllCPP& GameAcitivityAllCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoActivity_2eproto();  return *default_instance_;
}

GameAcitivityAllCPP* GameAcitivityAllCPP::default_instance_ = NULL;

GameAcitivityAllCPP* GameAcitivityAllCPP::New() const {
  return new GameAcitivityAllCPP;
}

void GameAcitivityAllCPP::Clear() {
  activities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAcitivityAllCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoActivity.GameAcitivityCPP activities = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activities;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameAcitivityAllCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoActivity.GameAcitivityCPP activities = 1;
  for (int i = 0; i < this->activities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activities(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameAcitivityAllCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoActivity.GameAcitivityCPP activities = 1;
  for (int i = 0; i < this->activities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activities(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameAcitivityAllCPP::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoActivity.GameAcitivityCPP activities = 1;
  total_size += 1 * this->activities_size();
  for (int i = 0; i < this->activities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activities(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAcitivityAllCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAcitivityAllCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameAcitivityAllCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAcitivityAllCPP::MergeFrom(const GameAcitivityAllCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  activities_.MergeFrom(from.activities_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAcitivityAllCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAcitivityAllCPP::CopyFrom(const GameAcitivityAllCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAcitivityAllCPP::IsInitialized() const {
  
  for (int i = 0; i < activities_size(); i++) {
    if (!this->activities(i).IsInitialized()) return false;
  }
  return true;
}

void GameAcitivityAllCPP::Swap(GameAcitivityAllCPP* other) {
  if (other != this) {
    activities_.Swap(&other->activities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameAcitivityAllCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAcitivityAllCPP_descriptor_;
  metadata.reflection = GameAcitivityAllCPP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoActivity

// @@protoc_insertion_point(global_scope)
