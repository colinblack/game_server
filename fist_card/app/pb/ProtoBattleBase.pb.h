// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBattleBase.proto

#ifndef PROTOBUF_ProtoBattleBase_2eproto__INCLUDED
#define PROTOBUF_ProtoBattleBase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "ProtoBattle.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoBattleBase {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoBattleBase_2eproto();
void protobuf_AssignDesc_ProtoBattleBase_2eproto();
void protobuf_ShutdownFile_ProtoBattleBase_2eproto();

class ProtoBattleAttr;
class ProtoBuff;
class ProtoBattleTurn;
class ProtoBattleInfo;
class ProtoBattleTurnInfo;
class ProtoBattleReq;
class ProtoBattleResp;
class ProtoComputerCards;
class ProtoComputerBattle;

// ===================================================================

class ProtoBattleAttr : public ::google::protobuf::Message {
 public:
  ProtoBattleAttr();
  virtual ~ProtoBattleAttr();
  
  ProtoBattleAttr(const ProtoBattleAttr& from);
  
  inline ProtoBattleAttr& operator=(const ProtoBattleAttr& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBattleAttr& default_instance();
  
  void Swap(ProtoBattleAttr* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBattleAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBattleAttr& from);
  void MergeFrom(const ProtoBattleAttr& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 heroid = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);
  
  // optional int32 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);
  
  // optional int32 att = 3;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 3;
  inline ::google::protobuf::int32 att() const;
  inline void set_att(::google::protobuf::int32 value);
  
  // optional int32 def = 4;
  inline bool has_def() const;
  inline void clear_def();
  static const int kDefFieldNumber = 4;
  inline ::google::protobuf::int32 def() const;
  inline void set_def(::google::protobuf::int32 value);
  
  // optional int32 shield = 5;
  inline bool has_shield() const;
  inline void clear_shield();
  static const int kShieldFieldNumber = 5;
  inline ::google::protobuf::int32 shield() const;
  inline void set_shield(::google::protobuf::int32 value);
  
  // optional int32 battlePower = 6;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 6;
  inline ::google::protobuf::int32 battlepower() const;
  inline void set_battlepower(::google::protobuf::int32 value);
  
  // optional double damInc = 7;
  inline bool has_daminc() const;
  inline void clear_daminc();
  static const int kDamIncFieldNumber = 7;
  inline double daminc() const;
  inline void set_daminc(double value);
  
  // optional double damDec = 8;
  inline bool has_damdec() const;
  inline void clear_damdec();
  static const int kDamDecFieldNumber = 8;
  inline double damdec() const;
  inline void set_damdec(double value);
  
  // @@protoc_insertion_point(class_scope:ProtoBattleBase.ProtoBattleAttr)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_def();
  inline void clear_has_def();
  inline void set_has_shield();
  inline void clear_has_shield();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_daminc();
  inline void clear_has_daminc();
  inline void set_has_damdec();
  inline void clear_has_damdec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 att_;
  ::google::protobuf::int32 def_;
  ::google::protobuf::int32 shield_;
  ::google::protobuf::int32 battlepower_;
  double daminc_;
  double damdec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoBattleBase_2eproto();
  friend void protobuf_AssignDesc_ProtoBattleBase_2eproto();
  friend void protobuf_ShutdownFile_ProtoBattleBase_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBattleAttr* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBuff : public ::google::protobuf::Message {
 public:
  ProtoBuff();
  virtual ~ProtoBuff();
  
  ProtoBuff(const ProtoBuff& from);
  
  inline ProtoBuff& operator=(const ProtoBuff& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBuff& default_instance();
  
  void Swap(ProtoBuff* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBuff& from);
  void MergeFrom(const ProtoBuff& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ProtoBattleBase.ProtoBuff)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ProtoBattleBase_2eproto();
  friend void protobuf_AssignDesc_ProtoBattleBase_2eproto();
  friend void protobuf_ShutdownFile_ProtoBattleBase_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBuff* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBattleTurn : public ::google::protobuf::Message {
 public:
  ProtoBattleTurn();
  virtual ~ProtoBattleTurn();
  
  ProtoBattleTurn(const ProtoBattleTurn& from);
  
  inline ProtoBattleTurn& operator=(const ProtoBattleTurn& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBattleTurn& default_instance();
  
  void Swap(ProtoBattleTurn* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBattleTurn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBattleTurn& from);
  void MergeFrom(const ProtoBattleTurn& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 dam = 1;
  inline bool has_dam() const;
  inline void clear_dam();
  static const int kDamFieldNumber = 1;
  inline ::google::protobuf::uint32 dam() const;
  inline void set_dam(::google::protobuf::uint32 value);
  
  // optional uint32 blood = 2;
  inline bool has_blood() const;
  inline void clear_blood();
  static const int kBloodFieldNumber = 2;
  inline ::google::protobuf::uint32 blood() const;
  inline void set_blood(::google::protobuf::uint32 value);
  
  // optional uint32 hurtBack = 3;
  inline bool has_hurtback() const;
  inline void clear_hurtback();
  static const int kHurtBackFieldNumber = 3;
  inline ::google::protobuf::uint32 hurtback() const;
  inline void set_hurtback(::google::protobuf::uint32 value);
  
  // optional uint32 attCast = 4;
  inline bool has_attcast() const;
  inline void clear_attcast();
  static const int kAttCastFieldNumber = 4;
  inline ::google::protobuf::uint32 attcast() const;
  inline void set_attcast(::google::protobuf::uint32 value);
  
  // optional bool crit = 5;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 5;
  inline bool crit() const;
  inline void set_crit(bool value);
  
  // optional bool invalid = 6;
  inline bool has_invalid() const;
  inline void clear_invalid();
  static const int kInvalidFieldNumber = 6;
  inline bool invalid() const;
  inline void set_invalid(bool value);
  
  // optional bool hurtTrans = 7;
  inline bool has_hurttrans() const;
  inline void clear_hurttrans();
  static const int kHurtTransFieldNumber = 7;
  inline bool hurttrans() const;
  inline void set_hurttrans(bool value);
  
  // optional bool bomb = 8;
  inline bool has_bomb() const;
  inline void clear_bomb();
  static const int kBombFieldNumber = 8;
  inline bool bomb() const;
  inline void set_bomb(bool value);
  
  // @@protoc_insertion_point(class_scope:ProtoBattleBase.ProtoBattleTurn)
 private:
  inline void set_has_dam();
  inline void clear_has_dam();
  inline void set_has_blood();
  inline void clear_has_blood();
  inline void set_has_hurtback();
  inline void clear_has_hurtback();
  inline void set_has_attcast();
  inline void clear_has_attcast();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_invalid();
  inline void clear_has_invalid();
  inline void set_has_hurttrans();
  inline void clear_has_hurttrans();
  inline void set_has_bomb();
  inline void clear_has_bomb();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 dam_;
  ::google::protobuf::uint32 blood_;
  ::google::protobuf::uint32 hurtback_;
  ::google::protobuf::uint32 attcast_;
  bool crit_;
  bool invalid_;
  bool hurttrans_;
  bool bomb_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoBattleBase_2eproto();
  friend void protobuf_AssignDesc_ProtoBattleBase_2eproto();
  friend void protobuf_ShutdownFile_ProtoBattleBase_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBattleTurn* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBattleInfo : public ::google::protobuf::Message {
 public:
  ProtoBattleInfo();
  virtual ~ProtoBattleInfo();
  
  ProtoBattleInfo(const ProtoBattleInfo& from);
  
  inline ProtoBattleInfo& operator=(const ProtoBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBattleInfo& default_instance();
  
  void Swap(ProtoBattleInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBattleInfo& from);
  void MergeFrom(const ProtoBattleInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 actionType = 1;
  inline bool has_actiontype() const;
  inline void clear_actiontype();
  static const int kActionTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 actiontype() const;
  inline void set_actiontype(::google::protobuf::uint32 value);
  
  // required uint32 aim = 2;
  inline bool has_aim() const;
  inline void clear_aim();
  static const int kAimFieldNumber = 2;
  inline ::google::protobuf::uint32 aim() const;
  inline void set_aim(::google::protobuf::uint32 value);
  
  // optional .ProtoBattleBase.ProtoBattleTurnInfo att = 3;
  inline bool has_att() const;
  inline void clear_att();
  static const int kAttFieldNumber = 3;
  inline const ::ProtoBattleBase::ProtoBattleTurnInfo& att() const;
  inline ::ProtoBattleBase::ProtoBattleTurnInfo* mutable_att();
  inline ::ProtoBattleBase::ProtoBattleTurnInfo* release_att();
  
  // optional .ProtoBattleBase.ProtoBattleTurnInfo def = 4;
  inline bool has_def() const;
  inline void clear_def();
  static const int kDefFieldNumber = 4;
  inline const ::ProtoBattleBase::ProtoBattleTurnInfo& def() const;
  inline ::ProtoBattleBase::ProtoBattleTurnInfo* mutable_def();
  inline ::ProtoBattleBase::ProtoBattleTurnInfo* release_def();
  
  // @@protoc_insertion_point(class_scope:ProtoBattleBase.ProtoBattleInfo)
 private:
  inline void set_has_actiontype();
  inline void clear_has_actiontype();
  inline void set_has_aim();
  inline void clear_has_aim();
  inline void set_has_att();
  inline void clear_has_att();
  inline void set_has_def();
  inline void clear_has_def();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 actiontype_;
  ::google::protobuf::uint32 aim_;
  ::ProtoBattleBase::ProtoBattleTurnInfo* att_;
  ::ProtoBattleBase::ProtoBattleTurnInfo* def_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoBattleBase_2eproto();
  friend void protobuf_AssignDesc_ProtoBattleBase_2eproto();
  friend void protobuf_ShutdownFile_ProtoBattleBase_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBattleTurnInfo : public ::google::protobuf::Message {
 public:
  ProtoBattleTurnInfo();
  virtual ~ProtoBattleTurnInfo();
  
  ProtoBattleTurnInfo(const ProtoBattleTurnInfo& from);
  
  inline ProtoBattleTurnInfo& operator=(const ProtoBattleTurnInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBattleTurnInfo& default_instance();
  
  void Swap(ProtoBattleTurnInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBattleTurnInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBattleTurnInfo& from);
  void MergeFrom(const ProtoBattleTurnInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ProtoBattleBase.ProtoBattleTurn info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::ProtoBattleBase::ProtoBattleTurn& info() const;
  inline ::ProtoBattleBase::ProtoBattleTurn* mutable_info();
  inline ::ProtoBattleBase::ProtoBattleTurn* release_info();
  
  // optional .ProtoBattleBase.ProtoBattleAttr attr = 2;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 2;
  inline const ::ProtoBattleBase::ProtoBattleAttr& attr() const;
  inline ::ProtoBattleBase::ProtoBattleAttr* mutable_attr();
  inline ::ProtoBattleBase::ProtoBattleAttr* release_attr();
  
  // optional .ProtoBattle.BattleCardsCPP cards = 3;
  inline bool has_cards() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::ProtoBattle::BattleCardsCPP& cards() const;
  inline ::ProtoBattle::BattleCardsCPP* mutable_cards();
  inline ::ProtoBattle::BattleCardsCPP* release_cards();
  
  // optional uint32 addPoint = 4;
  inline bool has_addpoint() const;
  inline void clear_addpoint();
  static const int kAddPointFieldNumber = 4;
  inline ::google::protobuf::uint32 addpoint() const;
  inline void set_addpoint(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBattleBase.ProtoBattleTurnInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_cards();
  inline void clear_has_cards();
  inline void set_has_addpoint();
  inline void clear_has_addpoint();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoBattleBase::ProtoBattleTurn* info_;
  ::ProtoBattleBase::ProtoBattleAttr* attr_;
  ::ProtoBattle::BattleCardsCPP* cards_;
  ::google::protobuf::uint32 addpoint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoBattleBase_2eproto();
  friend void protobuf_AssignDesc_ProtoBattleBase_2eproto();
  friend void protobuf_ShutdownFile_ProtoBattleBase_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBattleTurnInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBattleReq : public ::google::protobuf::Message {
 public:
  ProtoBattleReq();
  virtual ~ProtoBattleReq();
  
  ProtoBattleReq(const ProtoBattleReq& from);
  
  inline ProtoBattleReq& operator=(const ProtoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBattleReq& default_instance();
  
  void Swap(ProtoBattleReq* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBattleReq& from);
  void MergeFrom(const ProtoBattleReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 battleid = 1;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleidFieldNumber = 1;
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);
  
  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 ud = 3;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 3;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);
  
  // required uint32 cardid = 4;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 4;
  inline ::google::protobuf::uint32 cardid() const;
  inline void set_cardid(::google::protobuf::uint32 value);
  
  // required uint32 heroid = 5;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBattleBase.ProtoBattleReq)
 private:
  inline void set_has_battleid();
  inline void clear_has_battleid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 battleid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 cardid_;
  ::google::protobuf::uint32 heroid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoBattleBase_2eproto();
  friend void protobuf_AssignDesc_ProtoBattleBase_2eproto();
  friend void protobuf_ShutdownFile_ProtoBattleBase_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

class ProtoBattleResp : public ::google::protobuf::Message {
 public:
  ProtoBattleResp();
  virtual ~ProtoBattleResp();
  
  ProtoBattleResp(const ProtoBattleResp& from);
  
  inline ProtoBattleResp& operator=(const ProtoBattleResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoBattleResp& default_instance();
  
  void Swap(ProtoBattleResp* other);
  
  // implements Message ----------------------------------------------
  
  ProtoBattleResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoBattleResp& from);
  void MergeFrom(const ProtoBattleResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 cardid = 1;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 1;
  inline ::google::protobuf::uint32 cardid() const;
  inline void set_cardid(::google::protobuf::uint32 value);
  
  // required uint32 point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);
  
  // repeated .ProtoBattleBase.ProtoBattleInfo battle = 3;
  inline int battle_size() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 3;
  inline const ::ProtoBattleBase::ProtoBattleInfo& battle(int index) const;
  inline ::ProtoBattleBase::ProtoBattleInfo* mutable_battle(int index);
  inline ::ProtoBattleBase::ProtoBattleInfo* add_battle();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo >&
      battle() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo >*
      mutable_battle();
  
  // optional uint32 winUid = 4;
  inline bool has_winuid() const;
  inline void clear_winuid();
  static const int kWinUidFieldNumber = 4;
  inline ::google::protobuf::uint32 winuid() const;
  inline void set_winuid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBattleBase.ProtoBattleResp)
 private:
  inline void set_has_cardid();
  inline void clear_has_cardid();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_winuid();
  inline void clear_has_winuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 cardid_;
  ::google::protobuf::uint32 point_;
  ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo > battle_;
  ::google::protobuf::uint32 winuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoBattleBase_2eproto();
  friend void protobuf_AssignDesc_ProtoBattleBase_2eproto();
  friend void protobuf_ShutdownFile_ProtoBattleBase_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoBattleResp* default_instance_;
};
// -------------------------------------------------------------------

class ProtoComputerCards : public ::google::protobuf::Message {
 public:
  ProtoComputerCards();
  virtual ~ProtoComputerCards();
  
  ProtoComputerCards(const ProtoComputerCards& from);
  
  inline ProtoComputerCards& operator=(const ProtoComputerCards& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoComputerCards& default_instance();
  
  void Swap(ProtoComputerCards* other);
  
  // implements Message ----------------------------------------------
  
  ProtoComputerCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoComputerCards& from);
  void MergeFrom(const ProtoComputerCards& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 cardid = 1;
  inline bool has_cardid() const;
  inline void clear_cardid();
  static const int kCardidFieldNumber = 1;
  inline ::google::protobuf::uint32 cardid() const;
  inline void set_cardid(::google::protobuf::uint32 value);
  
  // repeated .ProtoBattleBase.ProtoBattleInfo battle = 2;
  inline int battle_size() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 2;
  inline const ::ProtoBattleBase::ProtoBattleInfo& battle(int index) const;
  inline ::ProtoBattleBase::ProtoBattleInfo* mutable_battle(int index);
  inline ::ProtoBattleBase::ProtoBattleInfo* add_battle();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo >&
      battle() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo >*
      mutable_battle();
  
  // @@protoc_insertion_point(class_scope:ProtoBattleBase.ProtoComputerCards)
 private:
  inline void set_has_cardid();
  inline void clear_has_cardid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo > battle_;
  ::google::protobuf::uint32 cardid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoBattleBase_2eproto();
  friend void protobuf_AssignDesc_ProtoBattleBase_2eproto();
  friend void protobuf_ShutdownFile_ProtoBattleBase_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoComputerCards* default_instance_;
};
// -------------------------------------------------------------------

class ProtoComputerBattle : public ::google::protobuf::Message {
 public:
  ProtoComputerBattle();
  virtual ~ProtoComputerBattle();
  
  ProtoComputerBattle(const ProtoComputerBattle& from);
  
  inline ProtoComputerBattle& operator=(const ProtoComputerBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoComputerBattle& default_instance();
  
  void Swap(ProtoComputerBattle* other);
  
  // implements Message ----------------------------------------------
  
  ProtoComputerBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoComputerBattle& from);
  void MergeFrom(const ProtoComputerBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 nextuser = 1;
  inline bool has_nextuser() const;
  inline void clear_nextuser();
  static const int kNextuserFieldNumber = 1;
  inline ::google::protobuf::uint32 nextuser() const;
  inline void set_nextuser(::google::protobuf::uint32 value);
  
  // repeated .ProtoBattleBase.ProtoComputerCards outcards = 2;
  inline int outcards_size() const;
  inline void clear_outcards();
  static const int kOutcardsFieldNumber = 2;
  inline const ::ProtoBattleBase::ProtoComputerCards& outcards(int index) const;
  inline ::ProtoBattleBase::ProtoComputerCards* mutable_outcards(int index);
  inline ::ProtoBattleBase::ProtoComputerCards* add_outcards();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoComputerCards >&
      outcards() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoComputerCards >*
      mutable_outcards();
  
  // optional uint32 winUid = 3;
  inline bool has_winuid() const;
  inline void clear_winuid();
  static const int kWinUidFieldNumber = 3;
  inline ::google::protobuf::uint32 winuid() const;
  inline void set_winuid(::google::protobuf::uint32 value);
  
  // required uint32 point = 4;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 4;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoBattleBase.ProtoComputerBattle)
 private:
  inline void set_has_nextuser();
  inline void clear_has_nextuser();
  inline void set_has_winuid();
  inline void clear_has_winuid();
  inline void set_has_point();
  inline void clear_has_point();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoComputerCards > outcards_;
  ::google::protobuf::uint32 nextuser_;
  ::google::protobuf::uint32 winuid_;
  ::google::protobuf::uint32 point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoBattleBase_2eproto();
  friend void protobuf_AssignDesc_ProtoBattleBase_2eproto();
  friend void protobuf_ShutdownFile_ProtoBattleBase_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoComputerBattle* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtoBattleAttr

// required uint32 heroid = 1;
inline bool ProtoBattleAttr::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBattleAttr::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBattleAttr::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBattleAttr::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 ProtoBattleAttr::heroid() const {
  return heroid_;
}
inline void ProtoBattleAttr::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional int32 hp = 2;
inline bool ProtoBattleAttr::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBattleAttr::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBattleAttr::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBattleAttr::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 ProtoBattleAttr::hp() const {
  return hp_;
}
inline void ProtoBattleAttr::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 att = 3;
inline bool ProtoBattleAttr::has_att() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBattleAttr::set_has_att() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBattleAttr::clear_has_att() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBattleAttr::clear_att() {
  att_ = 0;
  clear_has_att();
}
inline ::google::protobuf::int32 ProtoBattleAttr::att() const {
  return att_;
}
inline void ProtoBattleAttr::set_att(::google::protobuf::int32 value) {
  set_has_att();
  att_ = value;
}

// optional int32 def = 4;
inline bool ProtoBattleAttr::has_def() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBattleAttr::set_has_def() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBattleAttr::clear_has_def() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBattleAttr::clear_def() {
  def_ = 0;
  clear_has_def();
}
inline ::google::protobuf::int32 ProtoBattleAttr::def() const {
  return def_;
}
inline void ProtoBattleAttr::set_def(::google::protobuf::int32 value) {
  set_has_def();
  def_ = value;
}

// optional int32 shield = 5;
inline bool ProtoBattleAttr::has_shield() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBattleAttr::set_has_shield() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBattleAttr::clear_has_shield() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBattleAttr::clear_shield() {
  shield_ = 0;
  clear_has_shield();
}
inline ::google::protobuf::int32 ProtoBattleAttr::shield() const {
  return shield_;
}
inline void ProtoBattleAttr::set_shield(::google::protobuf::int32 value) {
  set_has_shield();
  shield_ = value;
}

// optional int32 battlePower = 6;
inline bool ProtoBattleAttr::has_battlepower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoBattleAttr::set_has_battlepower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoBattleAttr::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoBattleAttr::clear_battlepower() {
  battlepower_ = 0;
  clear_has_battlepower();
}
inline ::google::protobuf::int32 ProtoBattleAttr::battlepower() const {
  return battlepower_;
}
inline void ProtoBattleAttr::set_battlepower(::google::protobuf::int32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional double damInc = 7;
inline bool ProtoBattleAttr::has_daminc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoBattleAttr::set_has_daminc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoBattleAttr::clear_has_daminc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoBattleAttr::clear_daminc() {
  daminc_ = 0;
  clear_has_daminc();
}
inline double ProtoBattleAttr::daminc() const {
  return daminc_;
}
inline void ProtoBattleAttr::set_daminc(double value) {
  set_has_daminc();
  daminc_ = value;
}

// optional double damDec = 8;
inline bool ProtoBattleAttr::has_damdec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoBattleAttr::set_has_damdec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoBattleAttr::clear_has_damdec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoBattleAttr::clear_damdec() {
  damdec_ = 0;
  clear_has_damdec();
}
inline double ProtoBattleAttr::damdec() const {
  return damdec_;
}
inline void ProtoBattleAttr::set_damdec(double value) {
  set_has_damdec();
  damdec_ = value;
}

// -------------------------------------------------------------------

// ProtoBuff

// -------------------------------------------------------------------

// ProtoBattleTurn

// optional uint32 dam = 1;
inline bool ProtoBattleTurn::has_dam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBattleTurn::set_has_dam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBattleTurn::clear_has_dam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBattleTurn::clear_dam() {
  dam_ = 0u;
  clear_has_dam();
}
inline ::google::protobuf::uint32 ProtoBattleTurn::dam() const {
  return dam_;
}
inline void ProtoBattleTurn::set_dam(::google::protobuf::uint32 value) {
  set_has_dam();
  dam_ = value;
}

// optional uint32 blood = 2;
inline bool ProtoBattleTurn::has_blood() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBattleTurn::set_has_blood() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBattleTurn::clear_has_blood() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBattleTurn::clear_blood() {
  blood_ = 0u;
  clear_has_blood();
}
inline ::google::protobuf::uint32 ProtoBattleTurn::blood() const {
  return blood_;
}
inline void ProtoBattleTurn::set_blood(::google::protobuf::uint32 value) {
  set_has_blood();
  blood_ = value;
}

// optional uint32 hurtBack = 3;
inline bool ProtoBattleTurn::has_hurtback() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBattleTurn::set_has_hurtback() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBattleTurn::clear_has_hurtback() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBattleTurn::clear_hurtback() {
  hurtback_ = 0u;
  clear_has_hurtback();
}
inline ::google::protobuf::uint32 ProtoBattleTurn::hurtback() const {
  return hurtback_;
}
inline void ProtoBattleTurn::set_hurtback(::google::protobuf::uint32 value) {
  set_has_hurtback();
  hurtback_ = value;
}

// optional uint32 attCast = 4;
inline bool ProtoBattleTurn::has_attcast() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBattleTurn::set_has_attcast() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBattleTurn::clear_has_attcast() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBattleTurn::clear_attcast() {
  attcast_ = 0u;
  clear_has_attcast();
}
inline ::google::protobuf::uint32 ProtoBattleTurn::attcast() const {
  return attcast_;
}
inline void ProtoBattleTurn::set_attcast(::google::protobuf::uint32 value) {
  set_has_attcast();
  attcast_ = value;
}

// optional bool crit = 5;
inline bool ProtoBattleTurn::has_crit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBattleTurn::set_has_crit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBattleTurn::clear_has_crit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBattleTurn::clear_crit() {
  crit_ = false;
  clear_has_crit();
}
inline bool ProtoBattleTurn::crit() const {
  return crit_;
}
inline void ProtoBattleTurn::set_crit(bool value) {
  set_has_crit();
  crit_ = value;
}

// optional bool invalid = 6;
inline bool ProtoBattleTurn::has_invalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtoBattleTurn::set_has_invalid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtoBattleTurn::clear_has_invalid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtoBattleTurn::clear_invalid() {
  invalid_ = false;
  clear_has_invalid();
}
inline bool ProtoBattleTurn::invalid() const {
  return invalid_;
}
inline void ProtoBattleTurn::set_invalid(bool value) {
  set_has_invalid();
  invalid_ = value;
}

// optional bool hurtTrans = 7;
inline bool ProtoBattleTurn::has_hurttrans() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtoBattleTurn::set_has_hurttrans() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtoBattleTurn::clear_has_hurttrans() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtoBattleTurn::clear_hurttrans() {
  hurttrans_ = false;
  clear_has_hurttrans();
}
inline bool ProtoBattleTurn::hurttrans() const {
  return hurttrans_;
}
inline void ProtoBattleTurn::set_hurttrans(bool value) {
  set_has_hurttrans();
  hurttrans_ = value;
}

// optional bool bomb = 8;
inline bool ProtoBattleTurn::has_bomb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtoBattleTurn::set_has_bomb() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtoBattleTurn::clear_has_bomb() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtoBattleTurn::clear_bomb() {
  bomb_ = false;
  clear_has_bomb();
}
inline bool ProtoBattleTurn::bomb() const {
  return bomb_;
}
inline void ProtoBattleTurn::set_bomb(bool value) {
  set_has_bomb();
  bomb_ = value;
}

// -------------------------------------------------------------------

// ProtoBattleInfo

// required uint32 actionType = 1;
inline bool ProtoBattleInfo::has_actiontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBattleInfo::set_has_actiontype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBattleInfo::clear_has_actiontype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBattleInfo::clear_actiontype() {
  actiontype_ = 0u;
  clear_has_actiontype();
}
inline ::google::protobuf::uint32 ProtoBattleInfo::actiontype() const {
  return actiontype_;
}
inline void ProtoBattleInfo::set_actiontype(::google::protobuf::uint32 value) {
  set_has_actiontype();
  actiontype_ = value;
}

// required uint32 aim = 2;
inline bool ProtoBattleInfo::has_aim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBattleInfo::set_has_aim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBattleInfo::clear_has_aim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBattleInfo::clear_aim() {
  aim_ = 0u;
  clear_has_aim();
}
inline ::google::protobuf::uint32 ProtoBattleInfo::aim() const {
  return aim_;
}
inline void ProtoBattleInfo::set_aim(::google::protobuf::uint32 value) {
  set_has_aim();
  aim_ = value;
}

// optional .ProtoBattleBase.ProtoBattleTurnInfo att = 3;
inline bool ProtoBattleInfo::has_att() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBattleInfo::set_has_att() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBattleInfo::clear_has_att() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBattleInfo::clear_att() {
  if (att_ != NULL) att_->::ProtoBattleBase::ProtoBattleTurnInfo::Clear();
  clear_has_att();
}
inline const ::ProtoBattleBase::ProtoBattleTurnInfo& ProtoBattleInfo::att() const {
  return att_ != NULL ? *att_ : *default_instance_->att_;
}
inline ::ProtoBattleBase::ProtoBattleTurnInfo* ProtoBattleInfo::mutable_att() {
  set_has_att();
  if (att_ == NULL) att_ = new ::ProtoBattleBase::ProtoBattleTurnInfo;
  return att_;
}
inline ::ProtoBattleBase::ProtoBattleTurnInfo* ProtoBattleInfo::release_att() {
  clear_has_att();
  ::ProtoBattleBase::ProtoBattleTurnInfo* temp = att_;
  att_ = NULL;
  return temp;
}

// optional .ProtoBattleBase.ProtoBattleTurnInfo def = 4;
inline bool ProtoBattleInfo::has_def() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBattleInfo::set_has_def() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBattleInfo::clear_has_def() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBattleInfo::clear_def() {
  if (def_ != NULL) def_->::ProtoBattleBase::ProtoBattleTurnInfo::Clear();
  clear_has_def();
}
inline const ::ProtoBattleBase::ProtoBattleTurnInfo& ProtoBattleInfo::def() const {
  return def_ != NULL ? *def_ : *default_instance_->def_;
}
inline ::ProtoBattleBase::ProtoBattleTurnInfo* ProtoBattleInfo::mutable_def() {
  set_has_def();
  if (def_ == NULL) def_ = new ::ProtoBattleBase::ProtoBattleTurnInfo;
  return def_;
}
inline ::ProtoBattleBase::ProtoBattleTurnInfo* ProtoBattleInfo::release_def() {
  clear_has_def();
  ::ProtoBattleBase::ProtoBattleTurnInfo* temp = def_;
  def_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoBattleTurnInfo

// optional .ProtoBattleBase.ProtoBattleTurn info = 1;
inline bool ProtoBattleTurnInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBattleTurnInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBattleTurnInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBattleTurnInfo::clear_info() {
  if (info_ != NULL) info_->::ProtoBattleBase::ProtoBattleTurn::Clear();
  clear_has_info();
}
inline const ::ProtoBattleBase::ProtoBattleTurn& ProtoBattleTurnInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ProtoBattleBase::ProtoBattleTurn* ProtoBattleTurnInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ProtoBattleBase::ProtoBattleTurn;
  return info_;
}
inline ::ProtoBattleBase::ProtoBattleTurn* ProtoBattleTurnInfo::release_info() {
  clear_has_info();
  ::ProtoBattleBase::ProtoBattleTurn* temp = info_;
  info_ = NULL;
  return temp;
}

// optional .ProtoBattleBase.ProtoBattleAttr attr = 2;
inline bool ProtoBattleTurnInfo::has_attr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBattleTurnInfo::set_has_attr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBattleTurnInfo::clear_has_attr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBattleTurnInfo::clear_attr() {
  if (attr_ != NULL) attr_->::ProtoBattleBase::ProtoBattleAttr::Clear();
  clear_has_attr();
}
inline const ::ProtoBattleBase::ProtoBattleAttr& ProtoBattleTurnInfo::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::ProtoBattleBase::ProtoBattleAttr* ProtoBattleTurnInfo::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::ProtoBattleBase::ProtoBattleAttr;
  return attr_;
}
inline ::ProtoBattleBase::ProtoBattleAttr* ProtoBattleTurnInfo::release_attr() {
  clear_has_attr();
  ::ProtoBattleBase::ProtoBattleAttr* temp = attr_;
  attr_ = NULL;
  return temp;
}

// optional .ProtoBattle.BattleCardsCPP cards = 3;
inline bool ProtoBattleTurnInfo::has_cards() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBattleTurnInfo::set_has_cards() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBattleTurnInfo::clear_has_cards() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBattleTurnInfo::clear_cards() {
  if (cards_ != NULL) cards_->::ProtoBattle::BattleCardsCPP::Clear();
  clear_has_cards();
}
inline const ::ProtoBattle::BattleCardsCPP& ProtoBattleTurnInfo::cards() const {
  return cards_ != NULL ? *cards_ : *default_instance_->cards_;
}
inline ::ProtoBattle::BattleCardsCPP* ProtoBattleTurnInfo::mutable_cards() {
  set_has_cards();
  if (cards_ == NULL) cards_ = new ::ProtoBattle::BattleCardsCPP;
  return cards_;
}
inline ::ProtoBattle::BattleCardsCPP* ProtoBattleTurnInfo::release_cards() {
  clear_has_cards();
  ::ProtoBattle::BattleCardsCPP* temp = cards_;
  cards_ = NULL;
  return temp;
}

// optional uint32 addPoint = 4;
inline bool ProtoBattleTurnInfo::has_addpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBattleTurnInfo::set_has_addpoint() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBattleTurnInfo::clear_has_addpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBattleTurnInfo::clear_addpoint() {
  addpoint_ = 0u;
  clear_has_addpoint();
}
inline ::google::protobuf::uint32 ProtoBattleTurnInfo::addpoint() const {
  return addpoint_;
}
inline void ProtoBattleTurnInfo::set_addpoint(::google::protobuf::uint32 value) {
  set_has_addpoint();
  addpoint_ = value;
}

// -------------------------------------------------------------------

// ProtoBattleReq

// required uint32 battleid = 1;
inline bool ProtoBattleReq::has_battleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBattleReq::set_has_battleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBattleReq::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBattleReq::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 ProtoBattleReq::battleid() const {
  return battleid_;
}
inline void ProtoBattleReq::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
}

// required uint32 type = 2;
inline bool ProtoBattleReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBattleReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBattleReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBattleReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ProtoBattleReq::type() const {
  return type_;
}
inline void ProtoBattleReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 ud = 3;
inline bool ProtoBattleReq::has_ud() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoBattleReq::set_has_ud() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoBattleReq::clear_has_ud() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoBattleReq::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 ProtoBattleReq::ud() const {
  return ud_;
}
inline void ProtoBattleReq::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
}

// required uint32 cardid = 4;
inline bool ProtoBattleReq::has_cardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBattleReq::set_has_cardid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBattleReq::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBattleReq::clear_cardid() {
  cardid_ = 0u;
  clear_has_cardid();
}
inline ::google::protobuf::uint32 ProtoBattleReq::cardid() const {
  return cardid_;
}
inline void ProtoBattleReq::set_cardid(::google::protobuf::uint32 value) {
  set_has_cardid();
  cardid_ = value;
}

// required uint32 heroid = 5;
inline bool ProtoBattleReq::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtoBattleReq::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtoBattleReq::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtoBattleReq::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 ProtoBattleReq::heroid() const {
  return heroid_;
}
inline void ProtoBattleReq::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// ProtoBattleResp

// optional uint32 cardid = 1;
inline bool ProtoBattleResp::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoBattleResp::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoBattleResp::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoBattleResp::clear_cardid() {
  cardid_ = 0u;
  clear_has_cardid();
}
inline ::google::protobuf::uint32 ProtoBattleResp::cardid() const {
  return cardid_;
}
inline void ProtoBattleResp::set_cardid(::google::protobuf::uint32 value) {
  set_has_cardid();
  cardid_ = value;
}

// required uint32 point = 2;
inline bool ProtoBattleResp::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoBattleResp::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoBattleResp::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoBattleResp::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 ProtoBattleResp::point() const {
  return point_;
}
inline void ProtoBattleResp::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
}

// repeated .ProtoBattleBase.ProtoBattleInfo battle = 3;
inline int ProtoBattleResp::battle_size() const {
  return battle_.size();
}
inline void ProtoBattleResp::clear_battle() {
  battle_.Clear();
}
inline const ::ProtoBattleBase::ProtoBattleInfo& ProtoBattleResp::battle(int index) const {
  return battle_.Get(index);
}
inline ::ProtoBattleBase::ProtoBattleInfo* ProtoBattleResp::mutable_battle(int index) {
  return battle_.Mutable(index);
}
inline ::ProtoBattleBase::ProtoBattleInfo* ProtoBattleResp::add_battle() {
  return battle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo >&
ProtoBattleResp::battle() const {
  return battle_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo >*
ProtoBattleResp::mutable_battle() {
  return &battle_;
}

// optional uint32 winUid = 4;
inline bool ProtoBattleResp::has_winuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoBattleResp::set_has_winuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoBattleResp::clear_has_winuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoBattleResp::clear_winuid() {
  winuid_ = 0u;
  clear_has_winuid();
}
inline ::google::protobuf::uint32 ProtoBattleResp::winuid() const {
  return winuid_;
}
inline void ProtoBattleResp::set_winuid(::google::protobuf::uint32 value) {
  set_has_winuid();
  winuid_ = value;
}

// -------------------------------------------------------------------

// ProtoComputerCards

// required uint32 cardid = 1;
inline bool ProtoComputerCards::has_cardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoComputerCards::set_has_cardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoComputerCards::clear_has_cardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoComputerCards::clear_cardid() {
  cardid_ = 0u;
  clear_has_cardid();
}
inline ::google::protobuf::uint32 ProtoComputerCards::cardid() const {
  return cardid_;
}
inline void ProtoComputerCards::set_cardid(::google::protobuf::uint32 value) {
  set_has_cardid();
  cardid_ = value;
}

// repeated .ProtoBattleBase.ProtoBattleInfo battle = 2;
inline int ProtoComputerCards::battle_size() const {
  return battle_.size();
}
inline void ProtoComputerCards::clear_battle() {
  battle_.Clear();
}
inline const ::ProtoBattleBase::ProtoBattleInfo& ProtoComputerCards::battle(int index) const {
  return battle_.Get(index);
}
inline ::ProtoBattleBase::ProtoBattleInfo* ProtoComputerCards::mutable_battle(int index) {
  return battle_.Mutable(index);
}
inline ::ProtoBattleBase::ProtoBattleInfo* ProtoComputerCards::add_battle() {
  return battle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo >&
ProtoComputerCards::battle() const {
  return battle_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoBattleInfo >*
ProtoComputerCards::mutable_battle() {
  return &battle_;
}

// -------------------------------------------------------------------

// ProtoComputerBattle

// required uint32 nextuser = 1;
inline bool ProtoComputerBattle::has_nextuser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoComputerBattle::set_has_nextuser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoComputerBattle::clear_has_nextuser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoComputerBattle::clear_nextuser() {
  nextuser_ = 0u;
  clear_has_nextuser();
}
inline ::google::protobuf::uint32 ProtoComputerBattle::nextuser() const {
  return nextuser_;
}
inline void ProtoComputerBattle::set_nextuser(::google::protobuf::uint32 value) {
  set_has_nextuser();
  nextuser_ = value;
}

// repeated .ProtoBattleBase.ProtoComputerCards outcards = 2;
inline int ProtoComputerBattle::outcards_size() const {
  return outcards_.size();
}
inline void ProtoComputerBattle::clear_outcards() {
  outcards_.Clear();
}
inline const ::ProtoBattleBase::ProtoComputerCards& ProtoComputerBattle::outcards(int index) const {
  return outcards_.Get(index);
}
inline ::ProtoBattleBase::ProtoComputerCards* ProtoComputerBattle::mutable_outcards(int index) {
  return outcards_.Mutable(index);
}
inline ::ProtoBattleBase::ProtoComputerCards* ProtoComputerBattle::add_outcards() {
  return outcards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoComputerCards >&
ProtoComputerBattle::outcards() const {
  return outcards_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoBattleBase::ProtoComputerCards >*
ProtoComputerBattle::mutable_outcards() {
  return &outcards_;
}

// optional uint32 winUid = 3;
inline bool ProtoComputerBattle::has_winuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoComputerBattle::set_has_winuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoComputerBattle::clear_has_winuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoComputerBattle::clear_winuid() {
  winuid_ = 0u;
  clear_has_winuid();
}
inline ::google::protobuf::uint32 ProtoComputerBattle::winuid() const {
  return winuid_;
}
inline void ProtoComputerBattle::set_winuid(::google::protobuf::uint32 value) {
  set_has_winuid();
  winuid_ = value;
}

// required uint32 point = 4;
inline bool ProtoComputerBattle::has_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtoComputerBattle::set_has_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtoComputerBattle::clear_has_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtoComputerBattle::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 ProtoComputerBattle::point() const {
  return point_;
}
inline void ProtoComputerBattle::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBattleBase

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoBattleBase_2eproto__INCLUDED
