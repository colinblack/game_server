// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBattleBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBattleBase {

namespace {

const ::google::protobuf::Descriptor* ProtoBattleAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleTurn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleTurn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleTurnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleTurnInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoComputerCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoComputerCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoComputerBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoComputerBattle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBattleBase_2eproto() {
  protobuf_AddDesc_ProtoBattleBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBattleBase.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoBattleAttr_descriptor_ = file->message_type(0);
  static const int ProtoBattleAttr_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, daminc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, damdec_),
  };
  ProtoBattleAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleAttr_descriptor_,
      ProtoBattleAttr::default_instance_,
      ProtoBattleAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleAttr));
  ProtoBuff_descriptor_ = file->message_type(1);
  static const int ProtoBuff_offsets_[1] = {
  };
  ProtoBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBuff_descriptor_,
      ProtoBuff::default_instance_,
      ProtoBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBuff));
  ProtoBattleTurn_descriptor_ = file->message_type(2);
  static const int ProtoBattleTurn_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, dam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, blood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, hurtback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, attcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, invalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, hurttrans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, bomb_),
  };
  ProtoBattleTurn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleTurn_descriptor_,
      ProtoBattleTurn::default_instance_,
      ProtoBattleTurn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleTurn));
  ProtoBattleInfo_descriptor_ = file->message_type(3);
  static const int ProtoBattleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleInfo, actiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleInfo, aim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleInfo, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleInfo, def_),
  };
  ProtoBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleInfo_descriptor_,
      ProtoBattleInfo::default_instance_,
      ProtoBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleInfo));
  ProtoBattleTurnInfo_descriptor_ = file->message_type(4);
  static const int ProtoBattleTurnInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurnInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurnInfo, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurnInfo, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurnInfo, addpoint_),
  };
  ProtoBattleTurnInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleTurnInfo_descriptor_,
      ProtoBattleTurnInfo::default_instance_,
      ProtoBattleTurnInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurnInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleTurnInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleTurnInfo));
  ProtoBattleReq_descriptor_ = file->message_type(5);
  static const int ProtoBattleReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleReq, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleReq, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleReq, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleReq, heroid_),
  };
  ProtoBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleReq_descriptor_,
      ProtoBattleReq::default_instance_,
      ProtoBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleReq));
  ProtoBattleResp_descriptor_ = file->message_type(6);
  static const int ProtoBattleResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleResp, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleResp, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleResp, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleResp, winuid_),
  };
  ProtoBattleResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleResp_descriptor_,
      ProtoBattleResp::default_instance_,
      ProtoBattleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleResp));
  ProtoComputerCards_descriptor_ = file->message_type(7);
  static const int ProtoComputerCards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerCards, cardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerCards, battle_),
  };
  ProtoComputerCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoComputerCards_descriptor_,
      ProtoComputerCards::default_instance_,
      ProtoComputerCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoComputerCards));
  ProtoComputerBattle_descriptor_ = file->message_type(8);
  static const int ProtoComputerBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerBattle, nextuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerBattle, outcards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerBattle, winuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerBattle, point_),
  };
  ProtoComputerBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoComputerBattle_descriptor_,
      ProtoComputerBattle::default_instance_,
      ProtoComputerBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoComputerBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoComputerBattle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBattleBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleAttr_descriptor_, &ProtoBattleAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBuff_descriptor_, &ProtoBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleTurn_descriptor_, &ProtoBattleTurn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleInfo_descriptor_, &ProtoBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleTurnInfo_descriptor_, &ProtoBattleTurnInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleReq_descriptor_, &ProtoBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleResp_descriptor_, &ProtoBattleResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoComputerCards_descriptor_, &ProtoComputerCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoComputerBattle_descriptor_, &ProtoComputerBattle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBattleBase_2eproto() {
  delete ProtoBattleAttr::default_instance_;
  delete ProtoBattleAttr_reflection_;
  delete ProtoBuff::default_instance_;
  delete ProtoBuff_reflection_;
  delete ProtoBattleTurn::default_instance_;
  delete ProtoBattleTurn_reflection_;
  delete ProtoBattleInfo::default_instance_;
  delete ProtoBattleInfo_reflection_;
  delete ProtoBattleTurnInfo::default_instance_;
  delete ProtoBattleTurnInfo_reflection_;
  delete ProtoBattleReq::default_instance_;
  delete ProtoBattleReq_reflection_;
  delete ProtoBattleResp::default_instance_;
  delete ProtoBattleResp_reflection_;
  delete ProtoComputerCards::default_instance_;
  delete ProtoComputerCards_reflection_;
  delete ProtoComputerBattle::default_instance_;
  delete ProtoComputerBattle_reflection_;
}

void protobuf_AddDesc_ProtoBattleBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBattle::protobuf_AddDesc_ProtoBattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ProtoBattleBase.proto\022\017ProtoBattleBase"
    "\032\021ProtoBattle.proto\"\214\001\n\017ProtoBattleAttr\022"
    "\016\n\006heroid\030\001 \002(\r\022\n\n\002hp\030\002 \001(\005\022\013\n\003att\030\003 \001(\005"
    "\022\013\n\003def\030\004 \001(\005\022\016\n\006shield\030\005 \001(\005\022\023\n\013battleP"
    "ower\030\006 \001(\005\022\016\n\006damInc\030\007 \001(\001\022\016\n\006damDec\030\010 \001"
    "(\001\"\013\n\tProtoBuff\"\220\001\n\017ProtoBattleTurn\022\013\n\003d"
    "am\030\001 \001(\r\022\r\n\005blood\030\002 \001(\r\022\020\n\010hurtBack\030\003 \001("
    "\r\022\017\n\007attCast\030\004 \001(\r\022\014\n\004crit\030\005 \001(\010\022\017\n\007inva"
    "lid\030\006 \001(\010\022\021\n\thurtTrans\030\007 \001(\010\022\014\n\004bomb\030\010 \001"
    "(\010\"\230\001\n\017ProtoBattleInfo\022\022\n\nactionType\030\001 \002"
    "(\r\022\013\n\003aim\030\002 \002(\r\0221\n\003att\030\003 \001(\0132$.ProtoBatt"
    "leBase.ProtoBattleTurnInfo\0221\n\003def\030\004 \001(\0132"
    "$.ProtoBattleBase.ProtoBattleTurnInfo\"\263\001"
    "\n\023ProtoBattleTurnInfo\022.\n\004info\030\001 \001(\0132 .Pr"
    "otoBattleBase.ProtoBattleTurn\022.\n\004attr\030\002 "
    "\001(\0132 .ProtoBattleBase.ProtoBattleAttr\022*\n"
    "\005cards\030\003 \001(\0132\033.ProtoBattle.BattleCardsCP"
    "P\022\020\n\010addPoint\030\004 \001(\r\"\\\n\016ProtoBattleReq\022\020\n"
    "\010battleid\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\n\n\002ud\030\003 \002("
    "\r\022\016\n\006cardid\030\004 \002(\r\022\016\n\006heroid\030\005 \002(\r\"r\n\017Pro"
    "toBattleResp\022\016\n\006cardid\030\001 \001(\r\022\r\n\005point\030\002 "
    "\002(\r\0220\n\006battle\030\003 \003(\0132 .ProtoBattleBase.Pr"
    "otoBattleInfo\022\016\n\006winUid\030\004 \001(\r\"V\n\022ProtoCo"
    "mputerCards\022\016\n\006cardid\030\001 \002(\r\0220\n\006battle\030\002 "
    "\003(\0132 .ProtoBattleBase.ProtoBattleInfo\"}\n"
    "\023ProtoComputerBattle\022\020\n\010nextuser\030\001 \002(\r\0225"
    "\n\010outcards\030\002 \003(\0132#.ProtoBattleBase.Proto"
    "ComputerCards\022\016\n\006winUid\030\003 \001(\r\022\r\n\005point\030\004"
    " \002(\r", 1124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBattleBase.proto", &protobuf_RegisterTypes);
  ProtoBattleAttr::default_instance_ = new ProtoBattleAttr();
  ProtoBuff::default_instance_ = new ProtoBuff();
  ProtoBattleTurn::default_instance_ = new ProtoBattleTurn();
  ProtoBattleInfo::default_instance_ = new ProtoBattleInfo();
  ProtoBattleTurnInfo::default_instance_ = new ProtoBattleTurnInfo();
  ProtoBattleReq::default_instance_ = new ProtoBattleReq();
  ProtoBattleResp::default_instance_ = new ProtoBattleResp();
  ProtoComputerCards::default_instance_ = new ProtoComputerCards();
  ProtoComputerBattle::default_instance_ = new ProtoComputerBattle();
  ProtoBattleAttr::default_instance_->InitAsDefaultInstance();
  ProtoBuff::default_instance_->InitAsDefaultInstance();
  ProtoBattleTurn::default_instance_->InitAsDefaultInstance();
  ProtoBattleInfo::default_instance_->InitAsDefaultInstance();
  ProtoBattleTurnInfo::default_instance_->InitAsDefaultInstance();
  ProtoBattleReq::default_instance_->InitAsDefaultInstance();
  ProtoBattleResp::default_instance_->InitAsDefaultInstance();
  ProtoComputerCards::default_instance_->InitAsDefaultInstance();
  ProtoComputerBattle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBattleBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBattleBase_2eproto {
  StaticDescriptorInitializer_ProtoBattleBase_2eproto() {
    protobuf_AddDesc_ProtoBattleBase_2eproto();
  }
} static_descriptor_initializer_ProtoBattleBase_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleAttr::kHeroidFieldNumber;
const int ProtoBattleAttr::kHpFieldNumber;
const int ProtoBattleAttr::kAttFieldNumber;
const int ProtoBattleAttr::kDefFieldNumber;
const int ProtoBattleAttr::kShieldFieldNumber;
const int ProtoBattleAttr::kBattlePowerFieldNumber;
const int ProtoBattleAttr::kDamIncFieldNumber;
const int ProtoBattleAttr::kDamDecFieldNumber;
#endif  // !_MSC_VER

ProtoBattleAttr::ProtoBattleAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleAttr::InitAsDefaultInstance() {
}

ProtoBattleAttr::ProtoBattleAttr(const ProtoBattleAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleAttr::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  hp_ = 0;
  att_ = 0;
  def_ = 0;
  shield_ = 0;
  battlepower_ = 0;
  daminc_ = 0;
  damdec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleAttr::~ProtoBattleAttr() {
  SharedDtor();
}

void ProtoBattleAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleAttr_descriptor_;
}

const ProtoBattleAttr& ProtoBattleAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleBase_2eproto();  return *default_instance_;
}

ProtoBattleAttr* ProtoBattleAttr::default_instance_ = NULL;

ProtoBattleAttr* ProtoBattleAttr::New() const {
  return new ProtoBattleAttr;
}

void ProtoBattleAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    hp_ = 0;
    att_ = 0;
    def_ = 0;
    shield_ = 0;
    battlepower_ = 0;
    daminc_ = 0;
    damdec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }
      
      // optional int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_att;
        break;
      }
      
      // optional int32 att = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &att_)));
          set_has_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_def;
        break;
      }
      
      // optional int32 def = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shield;
        break;
      }
      
      // optional int32 shield = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shield_)));
          set_has_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battlePower;
        break;
      }
      
      // optional int32 battlePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_damInc;
        break;
      }
      
      // optional double damInc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_damInc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &daminc_)));
          set_has_daminc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_damDec;
        break;
      }
      
      // optional double damDec = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_damDec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damdec_)));
          set_has_damdec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  // optional int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }
  
  // optional int32 att = 3;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->att(), output);
  }
  
  // optional int32 def = 4;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->def(), output);
  }
  
  // optional int32 shield = 5;
  if (has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->shield(), output);
  }
  
  // optional int32 battlePower = 6;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->battlepower(), output);
  }
  
  // optional double damInc = 7;
  if (has_daminc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->daminc(), output);
  }
  
  // optional double damDec = 8;
  if (has_damdec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->damdec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  // optional int32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }
  
  // optional int32 att = 3;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->att(), target);
  }
  
  // optional int32 def = 4;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->def(), target);
  }
  
  // optional int32 shield = 5;
  if (has_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->shield(), target);
  }
  
  // optional int32 battlePower = 6;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->battlepower(), target);
  }
  
  // optional double damInc = 7;
  if (has_daminc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->daminc(), target);
  }
  
  // optional double damDec = 8;
  if (has_damdec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->damdec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleAttr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // optional int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }
    
    // optional int32 att = 3;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->att());
    }
    
    // optional int32 def = 4;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def());
    }
    
    // optional int32 shield = 5;
    if (has_shield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shield());
    }
    
    // optional int32 battlePower = 6;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlepower());
    }
    
    // optional double damInc = 7;
    if (has_daminc()) {
      total_size += 1 + 8;
    }
    
    // optional double damDec = 8;
    if (has_damdec()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleAttr::MergeFrom(const ProtoBattleAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_att()) {
      set_att(from.att());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_shield()) {
      set_shield(from.shield());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_daminc()) {
      set_daminc(from.daminc());
    }
    if (from.has_damdec()) {
      set_damdec(from.damdec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleAttr::CopyFrom(const ProtoBattleAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoBattleAttr::Swap(ProtoBattleAttr* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(hp_, other->hp_);
    std::swap(att_, other->att_);
    std::swap(def_, other->def_);
    std::swap(shield_, other->shield_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(daminc_, other->daminc_);
    std::swap(damdec_, other->damdec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleAttr_descriptor_;
  metadata.reflection = ProtoBattleAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProtoBuff::ProtoBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBuff::InitAsDefaultInstance() {
}

ProtoBuff::ProtoBuff(const ProtoBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBuff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBuff::~ProtoBuff() {
  SharedDtor();
}

void ProtoBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBuff_descriptor_;
}

const ProtoBuff& ProtoBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleBase_2eproto();  return *default_instance_;
}

ProtoBuff* ProtoBuff::default_instance_ = NULL;

ProtoBuff* ProtoBuff::New() const {
  return new ProtoBuff;
}

void ProtoBuff::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProtoBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBuff::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBuff::MergeFrom(const ProtoBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBuff::CopyFrom(const ProtoBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBuff::IsInitialized() const {
  
  return true;
}

void ProtoBuff::Swap(ProtoBuff* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBuff_descriptor_;
  metadata.reflection = ProtoBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleTurn::kDamFieldNumber;
const int ProtoBattleTurn::kBloodFieldNumber;
const int ProtoBattleTurn::kHurtBackFieldNumber;
const int ProtoBattleTurn::kAttCastFieldNumber;
const int ProtoBattleTurn::kCritFieldNumber;
const int ProtoBattleTurn::kInvalidFieldNumber;
const int ProtoBattleTurn::kHurtTransFieldNumber;
const int ProtoBattleTurn::kBombFieldNumber;
#endif  // !_MSC_VER

ProtoBattleTurn::ProtoBattleTurn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleTurn::InitAsDefaultInstance() {
}

ProtoBattleTurn::ProtoBattleTurn(const ProtoBattleTurn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleTurn::SharedCtor() {
  _cached_size_ = 0;
  dam_ = 0u;
  blood_ = 0u;
  hurtback_ = 0u;
  attcast_ = 0u;
  crit_ = false;
  invalid_ = false;
  hurttrans_ = false;
  bomb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleTurn::~ProtoBattleTurn() {
  SharedDtor();
}

void ProtoBattleTurn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleTurn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleTurn_descriptor_;
}

const ProtoBattleTurn& ProtoBattleTurn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleBase_2eproto();  return *default_instance_;
}

ProtoBattleTurn* ProtoBattleTurn::default_instance_ = NULL;

ProtoBattleTurn* ProtoBattleTurn::New() const {
  return new ProtoBattleTurn;
}

void ProtoBattleTurn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dam_ = 0u;
    blood_ = 0u;
    hurtback_ = 0u;
    attcast_ = 0u;
    crit_ = false;
    invalid_ = false;
    hurttrans_ = false;
    bomb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dam_)));
          set_has_dam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood;
        break;
      }
      
      // optional uint32 blood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_)));
          set_has_blood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hurtBack;
        break;
      }
      
      // optional uint32 hurtBack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurtBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurtback_)));
          set_has_hurtback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attCast;
        break;
      }
      
      // optional uint32 attCast = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attCast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attcast_)));
          set_has_attcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }
      
      // optional bool crit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_invalid;
        break;
      }
      
      // optional bool invalid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalid_)));
          set_has_invalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hurtTrans;
        break;
      }
      
      // optional bool hurtTrans = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurtTrans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hurttrans_)));
          set_has_hurttrans();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bomb;
        break;
      }
      
      // optional bool bomb = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bomb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bomb_)));
          set_has_bomb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dam = 1;
  if (has_dam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dam(), output);
  }
  
  // optional uint32 blood = 2;
  if (has_blood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blood(), output);
  }
  
  // optional uint32 hurtBack = 3;
  if (has_hurtback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hurtback(), output);
  }
  
  // optional uint32 attCast = 4;
  if (has_attcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attcast(), output);
  }
  
  // optional bool crit = 5;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->crit(), output);
  }
  
  // optional bool invalid = 6;
  if (has_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->invalid(), output);
  }
  
  // optional bool hurtTrans = 7;
  if (has_hurttrans()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hurttrans(), output);
  }
  
  // optional bool bomb = 8;
  if (has_bomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->bomb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleTurn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dam = 1;
  if (has_dam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dam(), target);
  }
  
  // optional uint32 blood = 2;
  if (has_blood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->blood(), target);
  }
  
  // optional uint32 hurtBack = 3;
  if (has_hurtback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hurtback(), target);
  }
  
  // optional uint32 attCast = 4;
  if (has_attcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attcast(), target);
  }
  
  // optional bool crit = 5;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->crit(), target);
  }
  
  // optional bool invalid = 6;
  if (has_invalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->invalid(), target);
  }
  
  // optional bool hurtTrans = 7;
  if (has_hurttrans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hurttrans(), target);
  }
  
  // optional bool bomb = 8;
  if (has_bomb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->bomb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleTurn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dam = 1;
    if (has_dam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dam());
    }
    
    // optional uint32 blood = 2;
    if (has_blood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood());
    }
    
    // optional uint32 hurtBack = 3;
    if (has_hurtback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurtback());
    }
    
    // optional uint32 attCast = 4;
    if (has_attcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attcast());
    }
    
    // optional bool crit = 5;
    if (has_crit()) {
      total_size += 1 + 1;
    }
    
    // optional bool invalid = 6;
    if (has_invalid()) {
      total_size += 1 + 1;
    }
    
    // optional bool hurtTrans = 7;
    if (has_hurttrans()) {
      total_size += 1 + 1;
    }
    
    // optional bool bomb = 8;
    if (has_bomb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleTurn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleTurn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleTurn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleTurn::MergeFrom(const ProtoBattleTurn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dam()) {
      set_dam(from.dam());
    }
    if (from.has_blood()) {
      set_blood(from.blood());
    }
    if (from.has_hurtback()) {
      set_hurtback(from.hurtback());
    }
    if (from.has_attcast()) {
      set_attcast(from.attcast());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_invalid()) {
      set_invalid(from.invalid());
    }
    if (from.has_hurttrans()) {
      set_hurttrans(from.hurttrans());
    }
    if (from.has_bomb()) {
      set_bomb(from.bomb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleTurn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleTurn::CopyFrom(const ProtoBattleTurn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleTurn::IsInitialized() const {
  
  return true;
}

void ProtoBattleTurn::Swap(ProtoBattleTurn* other) {
  if (other != this) {
    std::swap(dam_, other->dam_);
    std::swap(blood_, other->blood_);
    std::swap(hurtback_, other->hurtback_);
    std::swap(attcast_, other->attcast_);
    std::swap(crit_, other->crit_);
    std::swap(invalid_, other->invalid_);
    std::swap(hurttrans_, other->hurttrans_);
    std::swap(bomb_, other->bomb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleTurn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleTurn_descriptor_;
  metadata.reflection = ProtoBattleTurn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleInfo::kActionTypeFieldNumber;
const int ProtoBattleInfo::kAimFieldNumber;
const int ProtoBattleInfo::kAttFieldNumber;
const int ProtoBattleInfo::kDefFieldNumber;
#endif  // !_MSC_VER

ProtoBattleInfo::ProtoBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleInfo::InitAsDefaultInstance() {
  att_ = const_cast< ::ProtoBattleBase::ProtoBattleTurnInfo*>(&::ProtoBattleBase::ProtoBattleTurnInfo::default_instance());
  def_ = const_cast< ::ProtoBattleBase::ProtoBattleTurnInfo*>(&::ProtoBattleBase::ProtoBattleTurnInfo::default_instance());
}

ProtoBattleInfo::ProtoBattleInfo(const ProtoBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  actiontype_ = 0u;
  aim_ = 0u;
  att_ = NULL;
  def_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleInfo::~ProtoBattleInfo() {
  SharedDtor();
}

void ProtoBattleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete att_;
    delete def_;
  }
}

void ProtoBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleInfo_descriptor_;
}

const ProtoBattleInfo& ProtoBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleBase_2eproto();  return *default_instance_;
}

ProtoBattleInfo* ProtoBattleInfo::default_instance_ = NULL;

ProtoBattleInfo* ProtoBattleInfo::New() const {
  return new ProtoBattleInfo;
}

void ProtoBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actiontype_ = 0u;
    aim_ = 0u;
    if (has_att()) {
      if (att_ != NULL) att_->::ProtoBattleBase::ProtoBattleTurnInfo::Clear();
    }
    if (has_def()) {
      if (def_ != NULL) def_->::ProtoBattleBase::ProtoBattleTurnInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 actionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actiontype_)));
          set_has_actiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_aim;
        break;
      }
      
      // required uint32 aim = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_att;
        break;
      }
      
      // optional .ProtoBattleBase.ProtoBattleTurnInfo att = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_att:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_att()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_def;
        break;
      }
      
      // optional .ProtoBattleBase.ProtoBattleTurnInfo def = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_def:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_def()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 actionType = 1;
  if (has_actiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actiontype(), output);
  }
  
  // required uint32 aim = 2;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aim(), output);
  }
  
  // optional .ProtoBattleBase.ProtoBattleTurnInfo att = 3;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->att(), output);
  }
  
  // optional .ProtoBattleBase.ProtoBattleTurnInfo def = 4;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->def(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 actionType = 1;
  if (has_actiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actiontype(), target);
  }
  
  // required uint32 aim = 2;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aim(), target);
  }
  
  // optional .ProtoBattleBase.ProtoBattleTurnInfo att = 3;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->att(), target);
  }
  
  // optional .ProtoBattleBase.ProtoBattleTurnInfo def = 4;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->def(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 actionType = 1;
    if (has_actiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actiontype());
    }
    
    // required uint32 aim = 2;
    if (has_aim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aim());
    }
    
    // optional .ProtoBattleBase.ProtoBattleTurnInfo att = 3;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->att());
    }
    
    // optional .ProtoBattleBase.ProtoBattleTurnInfo def = 4;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->def());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleInfo::MergeFrom(const ProtoBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actiontype()) {
      set_actiontype(from.actiontype());
    }
    if (from.has_aim()) {
      set_aim(from.aim());
    }
    if (from.has_att()) {
      mutable_att()->::ProtoBattleBase::ProtoBattleTurnInfo::MergeFrom(from.att());
    }
    if (from.has_def()) {
      mutable_def()->::ProtoBattleBase::ProtoBattleTurnInfo::MergeFrom(from.def());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleInfo::CopyFrom(const ProtoBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_att()) {
    if (!this->att().IsInitialized()) return false;
  }
  if (has_def()) {
    if (!this->def().IsInitialized()) return false;
  }
  return true;
}

void ProtoBattleInfo::Swap(ProtoBattleInfo* other) {
  if (other != this) {
    std::swap(actiontype_, other->actiontype_);
    std::swap(aim_, other->aim_);
    std::swap(att_, other->att_);
    std::swap(def_, other->def_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleInfo_descriptor_;
  metadata.reflection = ProtoBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleTurnInfo::kInfoFieldNumber;
const int ProtoBattleTurnInfo::kAttrFieldNumber;
const int ProtoBattleTurnInfo::kCardsFieldNumber;
const int ProtoBattleTurnInfo::kAddPointFieldNumber;
#endif  // !_MSC_VER

ProtoBattleTurnInfo::ProtoBattleTurnInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleTurnInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBattleBase::ProtoBattleTurn*>(&::ProtoBattleBase::ProtoBattleTurn::default_instance());
  attr_ = const_cast< ::ProtoBattleBase::ProtoBattleAttr*>(&::ProtoBattleBase::ProtoBattleAttr::default_instance());
  cards_ = const_cast< ::ProtoBattle::BattleCardsCPP*>(&::ProtoBattle::BattleCardsCPP::default_instance());
}

ProtoBattleTurnInfo::ProtoBattleTurnInfo(const ProtoBattleTurnInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleTurnInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  attr_ = NULL;
  cards_ = NULL;
  addpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleTurnInfo::~ProtoBattleTurnInfo() {
  SharedDtor();
}

void ProtoBattleTurnInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete attr_;
    delete cards_;
  }
}

void ProtoBattleTurnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleTurnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleTurnInfo_descriptor_;
}

const ProtoBattleTurnInfo& ProtoBattleTurnInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleBase_2eproto();  return *default_instance_;
}

ProtoBattleTurnInfo* ProtoBattleTurnInfo::default_instance_ = NULL;

ProtoBattleTurnInfo* ProtoBattleTurnInfo::New() const {
  return new ProtoBattleTurnInfo;
}

void ProtoBattleTurnInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBattleBase::ProtoBattleTurn::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::ProtoBattleBase::ProtoBattleAttr::Clear();
    }
    if (has_cards()) {
      if (cards_ != NULL) cards_->::ProtoBattle::BattleCardsCPP::Clear();
    }
    addpoint_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleTurnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoBattleBase.ProtoBattleTurn info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }
      
      // optional .ProtoBattleBase.ProtoBattleAttr attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }
      
      // optional .ProtoBattle.BattleCardsCPP cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addPoint;
        break;
      }
      
      // optional uint32 addPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addpoint_)));
          set_has_addpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleTurnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ProtoBattleBase.ProtoBattleTurn info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // optional .ProtoBattleBase.ProtoBattleAttr attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }
  
  // optional .ProtoBattle.BattleCardsCPP cards = 3;
  if (has_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(), output);
  }
  
  // optional uint32 addPoint = 4;
  if (has_addpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->addpoint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleTurnInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ProtoBattleBase.ProtoBattleTurn info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // optional .ProtoBattleBase.ProtoBattleAttr attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }
  
  // optional .ProtoBattle.BattleCardsCPP cards = 3;
  if (has_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(), target);
  }
  
  // optional uint32 addPoint = 4;
  if (has_addpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->addpoint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleTurnInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoBattleBase.ProtoBattleTurn info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // optional .ProtoBattleBase.ProtoBattleAttr attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }
    
    // optional .ProtoBattle.BattleCardsCPP cards = 3;
    if (has_cards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cards());
    }
    
    // optional uint32 addPoint = 4;
    if (has_addpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addpoint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleTurnInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleTurnInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleTurnInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleTurnInfo::MergeFrom(const ProtoBattleTurnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ProtoBattleBase::ProtoBattleTurn::MergeFrom(from.info());
    }
    if (from.has_attr()) {
      mutable_attr()->::ProtoBattleBase::ProtoBattleAttr::MergeFrom(from.attr());
    }
    if (from.has_cards()) {
      mutable_cards()->::ProtoBattle::BattleCardsCPP::MergeFrom(from.cards());
    }
    if (from.has_addpoint()) {
      set_addpoint(from.addpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleTurnInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleTurnInfo::CopyFrom(const ProtoBattleTurnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleTurnInfo::IsInitialized() const {
  
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  if (has_cards()) {
    if (!this->cards().IsInitialized()) return false;
  }
  return true;
}

void ProtoBattleTurnInfo::Swap(ProtoBattleTurnInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(attr_, other->attr_);
    std::swap(cards_, other->cards_);
    std::swap(addpoint_, other->addpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleTurnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleTurnInfo_descriptor_;
  metadata.reflection = ProtoBattleTurnInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleReq::kBattleidFieldNumber;
const int ProtoBattleReq::kTypeFieldNumber;
const int ProtoBattleReq::kUdFieldNumber;
const int ProtoBattleReq::kCardidFieldNumber;
const int ProtoBattleReq::kHeroidFieldNumber;
#endif  // !_MSC_VER

ProtoBattleReq::ProtoBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleReq::InitAsDefaultInstance() {
}

ProtoBattleReq::ProtoBattleReq(const ProtoBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleReq::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  type_ = 0u;
  ud_ = 0u;
  cardid_ = 0u;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleReq::~ProtoBattleReq() {
  SharedDtor();
}

void ProtoBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleReq_descriptor_;
}

const ProtoBattleReq& ProtoBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleBase_2eproto();  return *default_instance_;
}

ProtoBattleReq* ProtoBattleReq::default_instance_ = NULL;

ProtoBattleReq* ProtoBattleReq::New() const {
  return new ProtoBattleReq;
}

void ProtoBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
    type_ = 0u;
    ud_ = 0u;
    cardid_ = 0u;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 battleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ud;
        break;
      }
      
      // required uint32 ud = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardid;
        break;
      }
      
      // required uint32 cardid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_heroid;
        break;
      }
      
      // required uint32 heroid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 battleid = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battleid(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // required uint32 ud = 3;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ud(), output);
  }
  
  // required uint32 cardid = 4;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cardid(), output);
  }
  
  // required uint32 heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 battleid = 1;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // required uint32 ud = 3;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ud(), target);
  }
  
  // required uint32 cardid = 4;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cardid(), target);
  }
  
  // required uint32 heroid = 5;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 battleid = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleid());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 ud = 3;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }
    
    // required uint32 cardid = 4;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }
    
    // required uint32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleReq::MergeFrom(const ProtoBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleReq::CopyFrom(const ProtoBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ProtoBattleReq::Swap(ProtoBattleReq* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    std::swap(type_, other->type_);
    std::swap(ud_, other->ud_);
    std::swap(cardid_, other->cardid_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleReq_descriptor_;
  metadata.reflection = ProtoBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleResp::kCardidFieldNumber;
const int ProtoBattleResp::kPointFieldNumber;
const int ProtoBattleResp::kBattleFieldNumber;
const int ProtoBattleResp::kWinUidFieldNumber;
#endif  // !_MSC_VER

ProtoBattleResp::ProtoBattleResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleResp::InitAsDefaultInstance() {
}

ProtoBattleResp::ProtoBattleResp(const ProtoBattleResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleResp::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = 0u;
  point_ = 0u;
  winuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleResp::~ProtoBattleResp() {
  SharedDtor();
}

void ProtoBattleResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleResp_descriptor_;
}

const ProtoBattleResp& ProtoBattleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleBase_2eproto();  return *default_instance_;
}

ProtoBattleResp* ProtoBattleResp::default_instance_ = NULL;

ProtoBattleResp* ProtoBattleResp::New() const {
  return new ProtoBattleResp;
}

void ProtoBattleResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardid_ = 0u;
    point_ = 0u;
    winuid_ = 0u;
  }
  battle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }
      
      // required uint32 point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle;
        break;
      }
      
      // repeated .ProtoBattleBase.ProtoBattleInfo battle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battle;
        if (input->ExpectTag(32)) goto parse_winUid;
        break;
      }
      
      // optional uint32 winUid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winuid_)));
          set_has_winuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cardid = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cardid(), output);
  }
  
  // required uint32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }
  
  // repeated .ProtoBattleBase.ProtoBattleInfo battle = 3;
  for (int i = 0; i < this->battle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battle(i), output);
  }
  
  // optional uint32 winUid = 4;
  if (has_winuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->winuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cardid = 1;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cardid(), target);
  }
  
  // required uint32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }
  
  // repeated .ProtoBattleBase.ProtoBattleInfo battle = 3;
  for (int i = 0; i < this->battle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battle(i), target);
  }
  
  // optional uint32 winUid = 4;
  if (has_winuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->winuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cardid = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }
    
    // required uint32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }
    
    // optional uint32 winUid = 4;
    if (has_winuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winuid());
    }
    
  }
  // repeated .ProtoBattleBase.ProtoBattleInfo battle = 3;
  total_size += 1 * this->battle_size();
  for (int i = 0; i < this->battle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleResp::MergeFrom(const ProtoBattleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_.MergeFrom(from.battle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_winuid()) {
      set_winuid(from.winuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleResp::CopyFrom(const ProtoBattleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < battle_size(); i++) {
    if (!this->battle(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoBattleResp::Swap(ProtoBattleResp* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    std::swap(point_, other->point_);
    battle_.Swap(&other->battle_);
    std::swap(winuid_, other->winuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleResp_descriptor_;
  metadata.reflection = ProtoBattleResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoComputerCards::kCardidFieldNumber;
const int ProtoComputerCards::kBattleFieldNumber;
#endif  // !_MSC_VER

ProtoComputerCards::ProtoComputerCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoComputerCards::InitAsDefaultInstance() {
}

ProtoComputerCards::ProtoComputerCards(const ProtoComputerCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoComputerCards::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoComputerCards::~ProtoComputerCards() {
  SharedDtor();
}

void ProtoComputerCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoComputerCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoComputerCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoComputerCards_descriptor_;
}

const ProtoComputerCards& ProtoComputerCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleBase_2eproto();  return *default_instance_;
}

ProtoComputerCards* ProtoComputerCards::default_instance_ = NULL;

ProtoComputerCards* ProtoComputerCards::New() const {
  return new ProtoComputerCards;
}

void ProtoComputerCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardid_ = 0u;
  }
  battle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoComputerCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle;
        break;
      }
      
      // repeated .ProtoBattleBase.ProtoBattleInfo battle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoComputerCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cardid = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cardid(), output);
  }
  
  // repeated .ProtoBattleBase.ProtoBattleInfo battle = 2;
  for (int i = 0; i < this->battle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoComputerCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cardid = 1;
  if (has_cardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cardid(), target);
  }
  
  // repeated .ProtoBattleBase.ProtoBattleInfo battle = 2;
  for (int i = 0; i < this->battle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoComputerCards::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cardid = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }
    
  }
  // repeated .ProtoBattleBase.ProtoBattleInfo battle = 2;
  total_size += 1 * this->battle_size();
  for (int i = 0; i < this->battle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoComputerCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoComputerCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoComputerCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoComputerCards::MergeFrom(const ProtoComputerCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_.MergeFrom(from.battle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoComputerCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoComputerCards::CopyFrom(const ProtoComputerCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoComputerCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < battle_size(); i++) {
    if (!this->battle(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoComputerCards::Swap(ProtoComputerCards* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    battle_.Swap(&other->battle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoComputerCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoComputerCards_descriptor_;
  metadata.reflection = ProtoComputerCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoComputerBattle::kNextuserFieldNumber;
const int ProtoComputerBattle::kOutcardsFieldNumber;
const int ProtoComputerBattle::kWinUidFieldNumber;
const int ProtoComputerBattle::kPointFieldNumber;
#endif  // !_MSC_VER

ProtoComputerBattle::ProtoComputerBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoComputerBattle::InitAsDefaultInstance() {
}

ProtoComputerBattle::ProtoComputerBattle(const ProtoComputerBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoComputerBattle::SharedCtor() {
  _cached_size_ = 0;
  nextuser_ = 0u;
  winuid_ = 0u;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoComputerBattle::~ProtoComputerBattle() {
  SharedDtor();
}

void ProtoComputerBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoComputerBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoComputerBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoComputerBattle_descriptor_;
}

const ProtoComputerBattle& ProtoComputerBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleBase_2eproto();  return *default_instance_;
}

ProtoComputerBattle* ProtoComputerBattle::default_instance_ = NULL;

ProtoComputerBattle* ProtoComputerBattle::New() const {
  return new ProtoComputerBattle;
}

void ProtoComputerBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nextuser_ = 0u;
    winuid_ = 0u;
    point_ = 0u;
  }
  outcards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoComputerBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nextuser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextuser_)));
          set_has_nextuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outcards;
        break;
      }
      
      // repeated .ProtoBattleBase.ProtoComputerCards outcards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outcards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outcards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_outcards;
        if (input->ExpectTag(24)) goto parse_winUid;
        break;
      }
      
      // optional uint32 winUid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winuid_)));
          set_has_winuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_point;
        break;
      }
      
      // required uint32 point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoComputerBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nextuser = 1;
  if (has_nextuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nextuser(), output);
  }
  
  // repeated .ProtoBattleBase.ProtoComputerCards outcards = 2;
  for (int i = 0; i < this->outcards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outcards(i), output);
  }
  
  // optional uint32 winUid = 3;
  if (has_winuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->winuid(), output);
  }
  
  // required uint32 point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->point(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoComputerBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nextuser = 1;
  if (has_nextuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nextuser(), target);
  }
  
  // repeated .ProtoBattleBase.ProtoComputerCards outcards = 2;
  for (int i = 0; i < this->outcards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->outcards(i), target);
  }
  
  // optional uint32 winUid = 3;
  if (has_winuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->winuid(), target);
  }
  
  // required uint32 point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->point(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoComputerBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nextuser = 1;
    if (has_nextuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextuser());
    }
    
    // optional uint32 winUid = 3;
    if (has_winuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winuid());
    }
    
    // required uint32 point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }
    
  }
  // repeated .ProtoBattleBase.ProtoComputerCards outcards = 2;
  total_size += 1 * this->outcards_size();
  for (int i = 0; i < this->outcards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outcards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoComputerBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoComputerBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoComputerBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoComputerBattle::MergeFrom(const ProtoComputerBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  outcards_.MergeFrom(from.outcards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nextuser()) {
      set_nextuser(from.nextuser());
    }
    if (from.has_winuid()) {
      set_winuid(from.winuid());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoComputerBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoComputerBattle::CopyFrom(const ProtoComputerBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoComputerBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  for (int i = 0; i < outcards_size(); i++) {
    if (!this->outcards(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoComputerBattle::Swap(ProtoComputerBattle* other) {
  if (other != this) {
    std::swap(nextuser_, other->nextuser_);
    outcards_.Swap(&other->outcards_);
    std::swap(winuid_, other->winuid_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoComputerBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoComputerBattle_descriptor_;
  metadata.reflection = ProtoComputerBattle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBattleBase

// @@protoc_insertion_point(global_scope)
