// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotConfig.proto

#ifndef PROTOBUF_RobotConfig_2eproto__INCLUDED
#define PROTOBUF_RobotConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Cards.pb.h"
// @@protoc_insertion_point(includes)

namespace RobotConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RobotConfig_2eproto();
void protobuf_AssignDesc_RobotConfig_2eproto();
void protobuf_ShutdownFile_RobotConfig_2eproto();

class Npc;
class RobotItem;
class RobotGradeBattleItem;
class RobotChampionshipItem;
class Robots;

// ===================================================================

class Npc : public ::google::protobuf::Message {
 public:
  Npc();
  virtual ~Npc();
  
  Npc(const Npc& from);
  
  inline Npc& operator=(const Npc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Npc& default_instance();
  
  void Swap(Npc* other);
  
  // implements Message ----------------------------------------------
  
  Npc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Npc& from);
  void MergeFrom(const Npc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:RobotConfig.Npc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RobotConfig_2eproto();
  friend void protobuf_AssignDesc_RobotConfig_2eproto();
  friend void protobuf_ShutdownFile_RobotConfig_2eproto();
  
  void InitAsDefaultInstance();
  static Npc* default_instance_;
};
// -------------------------------------------------------------------

class RobotItem : public ::google::protobuf::Message {
 public:
  RobotItem();
  virtual ~RobotItem();
  
  RobotItem(const RobotItem& from);
  
  inline RobotItem& operator=(const RobotItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotItem& default_instance();
  
  void Swap(RobotItem* other);
  
  // implements Message ----------------------------------------------
  
  RobotItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotItem& from);
  void MergeFrom(const RobotItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 grade = 4;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 4;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);
  
  // repeated uint32 props = 5;
  inline int props_size() const;
  inline void clear_props();
  static const int kPropsFieldNumber = 5;
  inline ::google::protobuf::uint32 props(int index) const;
  inline void set_props(int index, ::google::protobuf::uint32 value);
  inline void add_props(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      props() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_props();
  
  // repeated .RobotConfig.Npc npc = 6;
  inline int npc_size() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 6;
  inline const ::RobotConfig::Npc& npc(int index) const;
  inline ::RobotConfig::Npc* mutable_npc(int index);
  inline ::RobotConfig::Npc* add_npc();
  inline const ::google::protobuf::RepeatedPtrField< ::RobotConfig::Npc >&
      npc() const;
  inline ::google::protobuf::RepeatedPtrField< ::RobotConfig::Npc >*
      mutable_npc();
  
  // repeated .Cards.Card cards = 7;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 7;
  inline const ::Cards::Card& cards(int index) const;
  inline ::Cards::Card* mutable_cards(int index);
  inline ::Cards::Card* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::Cards::Card >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cards::Card >*
      mutable_cards();
  
  // @@protoc_insertion_point(class_scope:RobotConfig.RobotItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_grade();
  inline void clear_has_grade();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > props_;
  ::google::protobuf::RepeatedPtrField< ::RobotConfig::Npc > npc_;
  ::google::protobuf::RepeatedPtrField< ::Cards::Card > cards_;
  ::google::protobuf::uint32 grade_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_RobotConfig_2eproto();
  friend void protobuf_AssignDesc_RobotConfig_2eproto();
  friend void protobuf_ShutdownFile_RobotConfig_2eproto();
  
  void InitAsDefaultInstance();
  static RobotItem* default_instance_;
};
// -------------------------------------------------------------------

class RobotGradeBattleItem : public ::google::protobuf::Message {
 public:
  RobotGradeBattleItem();
  virtual ~RobotGradeBattleItem();
  
  RobotGradeBattleItem(const RobotGradeBattleItem& from);
  
  inline RobotGradeBattleItem& operator=(const RobotGradeBattleItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotGradeBattleItem& default_instance();
  
  void Swap(RobotGradeBattleItem* other);
  
  // implements Message ----------------------------------------------
  
  RobotGradeBattleItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotGradeBattleItem& from);
  void MergeFrom(const RobotGradeBattleItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 grade = 1;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 1;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);
  
  // repeated .RobotConfig.RobotItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::RobotConfig::RobotItem& item(int index) const;
  inline ::RobotConfig::RobotItem* mutable_item(int index);
  inline ::RobotConfig::RobotItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem >*
      mutable_item();
  
  // repeated .Cards.Card cards = 3;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 3;
  inline const ::Cards::Card& cards(int index) const;
  inline ::Cards::Card* mutable_cards(int index);
  inline ::Cards::Card* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::Cards::Card >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cards::Card >*
      mutable_cards();
  
  // @@protoc_insertion_point(class_scope:RobotConfig.RobotGradeBattleItem)
 private:
  inline void set_has_grade();
  inline void clear_has_grade();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem > item_;
  ::google::protobuf::RepeatedPtrField< ::Cards::Card > cards_;
  ::google::protobuf::uint32 grade_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_RobotConfig_2eproto();
  friend void protobuf_AssignDesc_RobotConfig_2eproto();
  friend void protobuf_ShutdownFile_RobotConfig_2eproto();
  
  void InitAsDefaultInstance();
  static RobotGradeBattleItem* default_instance_;
};
// -------------------------------------------------------------------

class RobotChampionshipItem : public ::google::protobuf::Message {
 public:
  RobotChampionshipItem();
  virtual ~RobotChampionshipItem();
  
  RobotChampionshipItem(const RobotChampionshipItem& from);
  
  inline RobotChampionshipItem& operator=(const RobotChampionshipItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotChampionshipItem& default_instance();
  
  void Swap(RobotChampionshipItem* other);
  
  // implements Message ----------------------------------------------
  
  RobotChampionshipItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotChampionshipItem& from);
  void MergeFrom(const RobotChampionshipItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .RobotConfig.RobotItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::RobotConfig::RobotItem& item(int index) const;
  inline ::RobotConfig::RobotItem* mutable_item(int index);
  inline ::RobotConfig::RobotItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem >*
      mutable_item();
  
  // repeated uint32 prob = 3;
  inline int prob_size() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 3;
  inline ::google::protobuf::uint32 prob(int index) const;
  inline void set_prob(int index, ::google::protobuf::uint32 value);
  inline void add_prob(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      prob() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_prob();
  
  // @@protoc_insertion_point(class_scope:RobotConfig.RobotChampionshipItem)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem > item_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > prob_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RobotConfig_2eproto();
  friend void protobuf_AssignDesc_RobotConfig_2eproto();
  friend void protobuf_ShutdownFile_RobotConfig_2eproto();
  
  void InitAsDefaultInstance();
  static RobotChampionshipItem* default_instance_;
};
// -------------------------------------------------------------------

class Robots : public ::google::protobuf::Message {
 public:
  Robots();
  virtual ~Robots();
  
  Robots(const Robots& from);
  
  inline Robots& operator=(const Robots& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Robots& default_instance();
  
  void Swap(Robots* other);
  
  // implements Message ----------------------------------------------
  
  Robots* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Robots& from);
  void MergeFrom(const Robots& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .RobotConfig.RobotGradeBattleItem gradeBattle = 1;
  inline int gradebattle_size() const;
  inline void clear_gradebattle();
  static const int kGradeBattleFieldNumber = 1;
  inline const ::RobotConfig::RobotGradeBattleItem& gradebattle(int index) const;
  inline ::RobotConfig::RobotGradeBattleItem* mutable_gradebattle(int index);
  inline ::RobotConfig::RobotGradeBattleItem* add_gradebattle();
  inline const ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotGradeBattleItem >&
      gradebattle() const;
  inline ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotGradeBattleItem >*
      mutable_gradebattle();
  
  // required .RobotConfig.RobotChampionshipItem championship = 2;
  inline bool has_championship() const;
  inline void clear_championship();
  static const int kChampionshipFieldNumber = 2;
  inline const ::RobotConfig::RobotChampionshipItem& championship() const;
  inline ::RobotConfig::RobotChampionshipItem* mutable_championship();
  inline ::RobotConfig::RobotChampionshipItem* release_championship();
  
  // @@protoc_insertion_point(class_scope:RobotConfig.Robots)
 private:
  inline void set_has_championship();
  inline void clear_has_championship();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotGradeBattleItem > gradebattle_;
  ::RobotConfig::RobotChampionshipItem* championship_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RobotConfig_2eproto();
  friend void protobuf_AssignDesc_RobotConfig_2eproto();
  friend void protobuf_ShutdownFile_RobotConfig_2eproto();
  
  void InitAsDefaultInstance();
  static Robots* default_instance_;
};
// ===================================================================


// ===================================================================

// Npc

// required uint32 id = 1;
inline bool Npc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Npc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Npc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Npc::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Npc::id() const {
  return id_;
}
inline void Npc::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 level = 2;
inline bool Npc::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Npc::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Npc::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Npc::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Npc::level() const {
  return level_;
}
inline void Npc::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// RobotItem

// required uint32 id = 1;
inline bool RobotItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RobotItem::id() const {
  return id_;
}
inline void RobotItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool RobotItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RobotItem::name() const {
  return *name_;
}
inline void RobotItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RobotItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RobotItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RobotItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RobotItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 level = 3;
inline bool RobotItem::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotItem::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RobotItem::level() const {
  return level_;
}
inline void RobotItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 grade = 4;
inline bool RobotItem::has_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotItem::set_has_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotItem::clear_has_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotItem::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 RobotItem::grade() const {
  return grade_;
}
inline void RobotItem::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// repeated uint32 props = 5;
inline int RobotItem::props_size() const {
  return props_.size();
}
inline void RobotItem::clear_props() {
  props_.Clear();
}
inline ::google::protobuf::uint32 RobotItem::props(int index) const {
  return props_.Get(index);
}
inline void RobotItem::set_props(int index, ::google::protobuf::uint32 value) {
  props_.Set(index, value);
}
inline void RobotItem::add_props(::google::protobuf::uint32 value) {
  props_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RobotItem::props() const {
  return props_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RobotItem::mutable_props() {
  return &props_;
}

// repeated .RobotConfig.Npc npc = 6;
inline int RobotItem::npc_size() const {
  return npc_.size();
}
inline void RobotItem::clear_npc() {
  npc_.Clear();
}
inline const ::RobotConfig::Npc& RobotItem::npc(int index) const {
  return npc_.Get(index);
}
inline ::RobotConfig::Npc* RobotItem::mutable_npc(int index) {
  return npc_.Mutable(index);
}
inline ::RobotConfig::Npc* RobotItem::add_npc() {
  return npc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RobotConfig::Npc >&
RobotItem::npc() const {
  return npc_;
}
inline ::google::protobuf::RepeatedPtrField< ::RobotConfig::Npc >*
RobotItem::mutable_npc() {
  return &npc_;
}

// repeated .Cards.Card cards = 7;
inline int RobotItem::cards_size() const {
  return cards_.size();
}
inline void RobotItem::clear_cards() {
  cards_.Clear();
}
inline const ::Cards::Card& RobotItem::cards(int index) const {
  return cards_.Get(index);
}
inline ::Cards::Card* RobotItem::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::Cards::Card* RobotItem::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cards::Card >&
RobotItem::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cards::Card >*
RobotItem::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// RobotGradeBattleItem

// required uint32 grade = 1;
inline bool RobotGradeBattleItem::has_grade() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotGradeBattleItem::set_has_grade() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotGradeBattleItem::clear_has_grade() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotGradeBattleItem::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 RobotGradeBattleItem::grade() const {
  return grade_;
}
inline void RobotGradeBattleItem::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// repeated .RobotConfig.RobotItem item = 2;
inline int RobotGradeBattleItem::item_size() const {
  return item_.size();
}
inline void RobotGradeBattleItem::clear_item() {
  item_.Clear();
}
inline const ::RobotConfig::RobotItem& RobotGradeBattleItem::item(int index) const {
  return item_.Get(index);
}
inline ::RobotConfig::RobotItem* RobotGradeBattleItem::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::RobotConfig::RobotItem* RobotGradeBattleItem::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem >&
RobotGradeBattleItem::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem >*
RobotGradeBattleItem::mutable_item() {
  return &item_;
}

// repeated .Cards.Card cards = 3;
inline int RobotGradeBattleItem::cards_size() const {
  return cards_.size();
}
inline void RobotGradeBattleItem::clear_cards() {
  cards_.Clear();
}
inline const ::Cards::Card& RobotGradeBattleItem::cards(int index) const {
  return cards_.Get(index);
}
inline ::Cards::Card* RobotGradeBattleItem::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::Cards::Card* RobotGradeBattleItem::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cards::Card >&
RobotGradeBattleItem::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cards::Card >*
RobotGradeBattleItem::mutable_cards() {
  return &cards_;
}

// -------------------------------------------------------------------

// RobotChampionshipItem

// repeated .RobotConfig.RobotItem item = 1;
inline int RobotChampionshipItem::item_size() const {
  return item_.size();
}
inline void RobotChampionshipItem::clear_item() {
  item_.Clear();
}
inline const ::RobotConfig::RobotItem& RobotChampionshipItem::item(int index) const {
  return item_.Get(index);
}
inline ::RobotConfig::RobotItem* RobotChampionshipItem::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::RobotConfig::RobotItem* RobotChampionshipItem::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem >&
RobotChampionshipItem::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotItem >*
RobotChampionshipItem::mutable_item() {
  return &item_;
}

// repeated uint32 prob = 3;
inline int RobotChampionshipItem::prob_size() const {
  return prob_.size();
}
inline void RobotChampionshipItem::clear_prob() {
  prob_.Clear();
}
inline ::google::protobuf::uint32 RobotChampionshipItem::prob(int index) const {
  return prob_.Get(index);
}
inline void RobotChampionshipItem::set_prob(int index, ::google::protobuf::uint32 value) {
  prob_.Set(index, value);
}
inline void RobotChampionshipItem::add_prob(::google::protobuf::uint32 value) {
  prob_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RobotChampionshipItem::prob() const {
  return prob_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RobotChampionshipItem::mutable_prob() {
  return &prob_;
}

// -------------------------------------------------------------------

// Robots

// repeated .RobotConfig.RobotGradeBattleItem gradeBattle = 1;
inline int Robots::gradebattle_size() const {
  return gradebattle_.size();
}
inline void Robots::clear_gradebattle() {
  gradebattle_.Clear();
}
inline const ::RobotConfig::RobotGradeBattleItem& Robots::gradebattle(int index) const {
  return gradebattle_.Get(index);
}
inline ::RobotConfig::RobotGradeBattleItem* Robots::mutable_gradebattle(int index) {
  return gradebattle_.Mutable(index);
}
inline ::RobotConfig::RobotGradeBattleItem* Robots::add_gradebattle() {
  return gradebattle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotGradeBattleItem >&
Robots::gradebattle() const {
  return gradebattle_;
}
inline ::google::protobuf::RepeatedPtrField< ::RobotConfig::RobotGradeBattleItem >*
Robots::mutable_gradebattle() {
  return &gradebattle_;
}

// required .RobotConfig.RobotChampionshipItem championship = 2;
inline bool Robots::has_championship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Robots::set_has_championship() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Robots::clear_has_championship() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Robots::clear_championship() {
  if (championship_ != NULL) championship_->::RobotConfig::RobotChampionshipItem::Clear();
  clear_has_championship();
}
inline const ::RobotConfig::RobotChampionshipItem& Robots::championship() const {
  return championship_ != NULL ? *championship_ : *default_instance_->championship_;
}
inline ::RobotConfig::RobotChampionshipItem* Robots::mutable_championship() {
  set_has_championship();
  if (championship_ == NULL) championship_ = new ::RobotConfig::RobotChampionshipItem;
  return championship_;
}
inline ::RobotConfig::RobotChampionshipItem* Robots::release_championship() {
  clear_has_championship();
  ::RobotConfig::RobotChampionshipItem* temp = championship_;
  championship_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RobotConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RobotConfig_2eproto__INCLUDED
