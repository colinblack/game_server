// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Onhook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Onhook {

namespace {

const ::google::protobuf::Descriptor* OnhookInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnhookInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Onhook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Onhook_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Onhook_2eproto() {
  protobuf_AddDesc_Onhook_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Onhook.proto");
  GOOGLE_CHECK(file != NULL);
  OnhookInfo_descriptor_ = file->message_type(0);
  static const int OnhookInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookInfo, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookInfo, propsid_),
  };
  OnhookInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnhookInfo_descriptor_,
      OnhookInfo::default_instance_,
      OnhookInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnhookInfo));
  Onhook_descriptor_ = file->message_type(1);
  static const int Onhook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Onhook, onhooks_),
  };
  Onhook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Onhook_descriptor_,
      Onhook::default_instance_,
      Onhook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Onhook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Onhook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Onhook));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Onhook_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnhookInfo_descriptor_, &OnhookInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Onhook_descriptor_, &Onhook::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Onhook_2eproto() {
  delete OnhookInfo::default_instance_;
  delete OnhookInfo_reflection_;
  delete Onhook::default_instance_;
  delete Onhook_reflection_;
}

void protobuf_AddDesc_Onhook_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Onhook.proto\022\006Onhook\032\026CommonGiftConfig"
    ".proto\"I\n\nOnhookInfo\022\017\n\007stageId\030\001 \002(\r\022\013\n"
    "\003exp\030\002 \002(\r\022\014\n\004coin\030\003 \002(\r\022\017\n\007propsId\030\004 \003("
    "\r\"-\n\006Onhook\022#\n\007onhooks\030\001 \003(\0132\022.Onhook.On"
    "hookInfo", 168);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Onhook.proto", &protobuf_RegisterTypes);
  OnhookInfo::default_instance_ = new OnhookInfo();
  Onhook::default_instance_ = new Onhook();
  OnhookInfo::default_instance_->InitAsDefaultInstance();
  Onhook::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Onhook_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Onhook_2eproto {
  StaticDescriptorInitializer_Onhook_2eproto() {
    protobuf_AddDesc_Onhook_2eproto();
  }
} static_descriptor_initializer_Onhook_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int OnhookInfo::kStageIdFieldNumber;
const int OnhookInfo::kExpFieldNumber;
const int OnhookInfo::kCoinFieldNumber;
const int OnhookInfo::kPropsIdFieldNumber;
#endif  // !_MSC_VER

OnhookInfo::OnhookInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnhookInfo::InitAsDefaultInstance() {
}

OnhookInfo::OnhookInfo(const OnhookInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnhookInfo::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  exp_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnhookInfo::~OnhookInfo() {
  SharedDtor();
}

void OnhookInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnhookInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnhookInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnhookInfo_descriptor_;
}

const OnhookInfo& OnhookInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Onhook_2eproto();  return *default_instance_;
}

OnhookInfo* OnhookInfo::default_instance_ = NULL;

OnhookInfo* OnhookInfo::New() const {
  return new OnhookInfo;
}

void OnhookInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
    exp_ = 0u;
    coin_ = 0u;
  }
  propsid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnhookInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // required uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }
      
      // required uint32 coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_propsId;
        break;
      }
      
      // repeated uint32 propsId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_propsid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_propsid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_propsId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnhookInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stageId = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }
  
  // required uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }
  
  // required uint32 coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }
  
  // repeated uint32 propsId = 4;
  for (int i = 0; i < this->propsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->propsid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnhookInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stageId = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stageid(), target);
  }
  
  // required uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }
  
  // required uint32 coin = 3;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->coin(), target);
  }
  
  // repeated uint32 propsId = 4;
  for (int i = 0; i < this->propsid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->propsid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnhookInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stageId = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }
    
    // required uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // required uint32 coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }
    
  }
  // repeated uint32 propsId = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->propsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->propsid(i));
    }
    total_size += 1 * this->propsid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnhookInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnhookInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnhookInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnhookInfo::MergeFrom(const OnhookInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  propsid_.MergeFrom(from.propsid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnhookInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnhookInfo::CopyFrom(const OnhookInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnhookInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void OnhookInfo::Swap(OnhookInfo* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    propsid_.Swap(&other->propsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnhookInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnhookInfo_descriptor_;
  metadata.reflection = OnhookInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Onhook::kOnhooksFieldNumber;
#endif  // !_MSC_VER

Onhook::Onhook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Onhook::InitAsDefaultInstance() {
}

Onhook::Onhook(const Onhook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Onhook::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Onhook::~Onhook() {
  SharedDtor();
}

void Onhook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Onhook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Onhook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Onhook_descriptor_;
}

const Onhook& Onhook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Onhook_2eproto();  return *default_instance_;
}

Onhook* Onhook::default_instance_ = NULL;

Onhook* Onhook::New() const {
  return new Onhook;
}

void Onhook::Clear() {
  onhooks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Onhook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Onhook.OnhookInfo onhooks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onhooks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onhooks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_onhooks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Onhook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Onhook.OnhookInfo onhooks = 1;
  for (int i = 0; i < this->onhooks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->onhooks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Onhook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Onhook.OnhookInfo onhooks = 1;
  for (int i = 0; i < this->onhooks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->onhooks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Onhook::ByteSize() const {
  int total_size = 0;
  
  // repeated .Onhook.OnhookInfo onhooks = 1;
  total_size += 1 * this->onhooks_size();
  for (int i = 0; i < this->onhooks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->onhooks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Onhook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Onhook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Onhook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Onhook::MergeFrom(const Onhook& from) {
  GOOGLE_CHECK_NE(&from, this);
  onhooks_.MergeFrom(from.onhooks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Onhook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Onhook::CopyFrom(const Onhook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Onhook::IsInitialized() const {
  
  for (int i = 0; i < onhooks_size(); i++) {
    if (!this->onhooks(i).IsInitialized()) return false;
  }
  return true;
}

void Onhook::Swap(Onhook* other) {
  if (other != this) {
    onhooks_.Swap(&other->onhooks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Onhook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Onhook_descriptor_;
  metadata.reflection = Onhook_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Onhook

// @@protoc_insertion_point(global_scope)
