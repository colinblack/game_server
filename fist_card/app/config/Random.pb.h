// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Random.proto

#ifndef PROTOBUF_Random_2eproto__INCLUDED
#define PROTOBUF_Random_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "CommonGiftConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace Random {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Random_2eproto();
void protobuf_AssignDesc_Random_2eproto();
void protobuf_ShutdownFile_Random_2eproto();

class UserInfo;
class RewardInfo;
class Random;

// ===================================================================

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();
  
  UserInfo(const UserInfo& from);
  
  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();
  
  void Swap(UserInfo* other);
  
  // implements Message ----------------------------------------------
  
  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated uint32 npcId = 3;
  inline int npcid_size() const;
  inline void clear_npcid();
  static const int kNpcIdFieldNumber = 3;
  inline ::google::protobuf::uint32 npcid(int index) const;
  inline void set_npcid(int index, ::google::protobuf::uint32 value);
  inline void add_npcid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      npcid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_npcid();
  
  // repeated uint32 propsId = 4;
  inline int propsid_size() const;
  inline void clear_propsid();
  static const int kPropsIdFieldNumber = 4;
  inline ::google::protobuf::uint32 propsid(int index) const;
  inline void set_propsid(int index, ::google::protobuf::uint32 value);
  inline void add_propsid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      propsid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_propsid();
  
  // @@protoc_insertion_point(class_scope:Random.UserInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > npcid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > propsid_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Random_2eproto();
  friend void protobuf_AssignDesc_Random_2eproto();
  friend void protobuf_ShutdownFile_Random_2eproto();
  
  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class RewardInfo : public ::google::protobuf::Message {
 public:
  RewardInfo();
  virtual ~RewardInfo();
  
  RewardInfo(const RewardInfo& from);
  
  inline RewardInfo& operator=(const RewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardInfo& default_instance();
  
  void Swap(RewardInfo* other);
  
  // implements Message ----------------------------------------------
  
  RewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardInfo& from);
  void MergeFrom(const RewardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // required .CommonGiftConfig.CommonModifyItem reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::CommonGiftConfig::CommonModifyItem& reward() const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_reward();
  inline ::CommonGiftConfig::CommonModifyItem* release_reward();
  
  // @@protoc_insertion_point(class_scope:Random.RewardInfo)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_reward();
  inline void clear_has_reward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CommonGiftConfig::CommonModifyItem* reward_;
  ::google::protobuf::uint32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Random_2eproto();
  friend void protobuf_AssignDesc_Random_2eproto();
  friend void protobuf_ShutdownFile_Random_2eproto();
  
  void InitAsDefaultInstance();
  static RewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class Random : public ::google::protobuf::Message {
 public:
  Random();
  virtual ~Random();
  
  Random(const Random& from);
  
  inline Random& operator=(const Random& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Random& default_instance();
  
  void Swap(Random* other);
  
  // implements Message ----------------------------------------------
  
  Random* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Random& from);
  void MergeFrom(const Random& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Random.UserInfo users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::Random::UserInfo& users(int index) const;
  inline ::Random::UserInfo* mutable_users(int index);
  inline ::Random::UserInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::Random::UserInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::Random::UserInfo >*
      mutable_users();
  
  // repeated .Random.RewardInfo rewards = 2;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 2;
  inline const ::Random::RewardInfo& rewards(int index) const;
  inline ::Random::RewardInfo* mutable_rewards(int index);
  inline ::Random::RewardInfo* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::Random::RewardInfo >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Random::RewardInfo >*
      mutable_rewards();
  
  // @@protoc_insertion_point(class_scope:Random.Random)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Random::UserInfo > users_;
  ::google::protobuf::RepeatedPtrField< ::Random::RewardInfo > rewards_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Random_2eproto();
  friend void protobuf_AssignDesc_Random_2eproto();
  friend void protobuf_ShutdownFile_Random_2eproto();
  
  void InitAsDefaultInstance();
  static Random* default_instance_;
};
// ===================================================================


// ===================================================================

// UserInfo

// required uint32 id = 1;
inline bool UserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UserInfo::id() const {
  return id_;
}
inline void UserInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool UserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserInfo::name() const {
  return *name_;
}
inline void UserInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UserInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated uint32 npcId = 3;
inline int UserInfo::npcid_size() const {
  return npcid_.size();
}
inline void UserInfo::clear_npcid() {
  npcid_.Clear();
}
inline ::google::protobuf::uint32 UserInfo::npcid(int index) const {
  return npcid_.Get(index);
}
inline void UserInfo::set_npcid(int index, ::google::protobuf::uint32 value) {
  npcid_.Set(index, value);
}
inline void UserInfo::add_npcid(::google::protobuf::uint32 value) {
  npcid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserInfo::npcid() const {
  return npcid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserInfo::mutable_npcid() {
  return &npcid_;
}

// repeated uint32 propsId = 4;
inline int UserInfo::propsid_size() const {
  return propsid_.size();
}
inline void UserInfo::clear_propsid() {
  propsid_.Clear();
}
inline ::google::protobuf::uint32 UserInfo::propsid(int index) const {
  return propsid_.Get(index);
}
inline void UserInfo::set_propsid(int index, ::google::protobuf::uint32 value) {
  propsid_.Set(index, value);
}
inline void UserInfo::add_propsid(::google::protobuf::uint32 value) {
  propsid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UserInfo::propsid() const {
  return propsid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UserInfo::mutable_propsid() {
  return &propsid_;
}

// -------------------------------------------------------------------

// RewardInfo

// required uint32 level = 1;
inline bool RewardInfo::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardInfo::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RewardInfo::level() const {
  return level_;
}
inline void RewardInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required .CommonGiftConfig.CommonModifyItem reward = 2;
inline bool RewardInfo::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardInfo::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardInfo::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardInfo::clear_reward() {
  if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
  clear_has_reward();
}
inline const ::CommonGiftConfig::CommonModifyItem& RewardInfo::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* RewardInfo::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::CommonGiftConfig::CommonModifyItem;
  return reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* RewardInfo::release_reward() {
  clear_has_reward();
  ::CommonGiftConfig::CommonModifyItem* temp = reward_;
  reward_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Random

// repeated .Random.UserInfo users = 1;
inline int Random::users_size() const {
  return users_.size();
}
inline void Random::clear_users() {
  users_.Clear();
}
inline const ::Random::UserInfo& Random::users(int index) const {
  return users_.Get(index);
}
inline ::Random::UserInfo* Random::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::Random::UserInfo* Random::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Random::UserInfo >&
Random::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::Random::UserInfo >*
Random::mutable_users() {
  return &users_;
}

// repeated .Random.RewardInfo rewards = 2;
inline int Random::rewards_size() const {
  return rewards_.size();
}
inline void Random::clear_rewards() {
  rewards_.Clear();
}
inline const ::Random::RewardInfo& Random::rewards(int index) const {
  return rewards_.Get(index);
}
inline ::Random::RewardInfo* Random::mutable_rewards(int index) {
  return rewards_.Mutable(index);
}
inline ::Random::RewardInfo* Random::add_rewards() {
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Random::RewardInfo >&
Random::rewards() const {
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Random::RewardInfo >*
Random::mutable_rewards() {
  return &rewards_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Random

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Random_2eproto__INCLUDED
