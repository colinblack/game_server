// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Archive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Archive {

namespace {

const ::google::protobuf::Descriptor* Attributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroWithArchive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroWithArchive_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArchiveRward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArchiveRward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArchiveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArchiveInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Archive_2eproto() {
  protobuf_AddDesc_Archive_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Archive.proto");
  GOOGLE_CHECK(file != NULL);
  Attributes_descriptor_ = file->message_type(0);
  static const int Attributes_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, critstrike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, critrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, critresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, att_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, def_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, fight_power_),
  };
  Attributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attributes_descriptor_,
      Attributes::default_instance_,
      Attributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attributes));
  LevelAttribute_descriptor_ = file->message_type(1);
  static const int LevelAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelAttribute, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelAttribute, attr_),
  };
  LevelAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelAttribute_descriptor_,
      LevelAttribute::default_instance_,
      LevelAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelAttribute));
  HeroWithArchive_descriptor_ = file->message_type(2);
  static const int HeroWithArchive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWithArchive, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWithArchive, levelattr_),
  };
  HeroWithArchive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroWithArchive_descriptor_,
      HeroWithArchive::default_instance_,
      HeroWithArchive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWithArchive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroWithArchive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroWithArchive));
  ArchiveRward_descriptor_ = file->message_type(3);
  static const int ArchiveRward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRward, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRward, reward_),
  };
  ArchiveRward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArchiveRward_descriptor_,
      ArchiveRward::default_instance_,
      ArchiveRward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArchiveRward));
  ArchiveInfo_descriptor_ = file->message_type(4);
  static const int ArchiveInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveInfo, archiveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveInfo, rewards_),
  };
  ArchiveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArchiveInfo_descriptor_,
      ArchiveInfo::default_instance_,
      ArchiveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArchiveInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Archive_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attributes_descriptor_, &Attributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelAttribute_descriptor_, &LevelAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroWithArchive_descriptor_, &HeroWithArchive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArchiveRward_descriptor_, &ArchiveRward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArchiveInfo_descriptor_, &ArchiveInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Archive_2eproto() {
  delete Attributes::default_instance_;
  delete Attributes_reflection_;
  delete LevelAttribute::default_instance_;
  delete LevelAttribute_reflection_;
  delete HeroWithArchive::default_instance_;
  delete HeroWithArchive_reflection_;
  delete ArchiveRward::default_instance_;
  delete ArchiveRward_reflection_;
  delete ArchiveInfo::default_instance_;
  delete ArchiveInfo_reflection_;
}

void protobuf_AddDesc_Archive_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rArchive.proto\022\007Archive\032\026CommonGiftConf"
    "ig.proto\"\336\001\n\nAttributes\022\n\n\002hp\030\001 \001(\r\022\013\n\003a"
    "tt\030\002 \001(\r\022\013\n\003def\030\003 \001(\r\022\r\n\005first\030\004 \001(\r\022\013\n\003"
    "hit\030\005 \001(\r\022\r\n\005dodge\030\006 \001(\r\022\022\n\ncritStrike\030\007"
    " \001(\r\022\020\n\010critRate\030\010 \001(\r\022\022\n\ncritResist\030\t \001"
    "(\r\022\016\n\006hp_add\030\n \001(\001\022\017\n\007att_add\030\013 \001(\001\022\017\n\007d"
    "ef_add\030\014 \001(\001\022\023\n\013fight_power\030\r \002(\r\"B\n\016Lev"
    "elAttribute\022\r\n\005level\030\001 \002(\r\022!\n\004attr\030\002 \002(\013"
    "2\023.Archive.Attributes\"I\n\017HeroWithArchive"
    "\022\n\n\002id\030\001 \002(\r\022*\n\tlevelAttr\030\002 \003(\0132\027.Archiv"
    "e.LevelAttribute\"Q\n\014ArchiveRward\022\r\n\005leve"
    "l\030\001 \002(\r\0222\n\006reward\030\002 \002(\0132\".CommonGiftConf"
    "ig.CommonModifyItem\"d\n\013ArchiveInfo\022-\n\013ar"
    "chiveInfo\030\001 \003(\0132\030.Archive.HeroWithArchiv"
    "e\022&\n\007rewards\030\002 \003(\0132\025.Archive.ArchiveRwar"
    "d", 601);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Archive.proto", &protobuf_RegisterTypes);
  Attributes::default_instance_ = new Attributes();
  LevelAttribute::default_instance_ = new LevelAttribute();
  HeroWithArchive::default_instance_ = new HeroWithArchive();
  ArchiveRward::default_instance_ = new ArchiveRward();
  ArchiveInfo::default_instance_ = new ArchiveInfo();
  Attributes::default_instance_->InitAsDefaultInstance();
  LevelAttribute::default_instance_->InitAsDefaultInstance();
  HeroWithArchive::default_instance_->InitAsDefaultInstance();
  ArchiveRward::default_instance_->InitAsDefaultInstance();
  ArchiveInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Archive_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Archive_2eproto {
  StaticDescriptorInitializer_Archive_2eproto() {
    protobuf_AddDesc_Archive_2eproto();
  }
} static_descriptor_initializer_Archive_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Attributes::kHpFieldNumber;
const int Attributes::kAttFieldNumber;
const int Attributes::kDefFieldNumber;
const int Attributes::kFirstFieldNumber;
const int Attributes::kHitFieldNumber;
const int Attributes::kDodgeFieldNumber;
const int Attributes::kCritStrikeFieldNumber;
const int Attributes::kCritRateFieldNumber;
const int Attributes::kCritResistFieldNumber;
const int Attributes::kHpAddFieldNumber;
const int Attributes::kAttAddFieldNumber;
const int Attributes::kDefAddFieldNumber;
const int Attributes::kFightPowerFieldNumber;
#endif  // !_MSC_VER

Attributes::Attributes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attributes::InitAsDefaultInstance() {
}

Attributes::Attributes(const Attributes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attributes::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0u;
  att_ = 0u;
  def_ = 0u;
  first_ = 0u;
  hit_ = 0u;
  dodge_ = 0u;
  critstrike_ = 0u;
  critrate_ = 0u;
  critresist_ = 0u;
  hp_add_ = 0;
  att_add_ = 0;
  def_add_ = 0;
  fight_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attributes::~Attributes() {
  SharedDtor();
}

void Attributes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attributes_descriptor_;
}

const Attributes& Attributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Archive_2eproto();  return *default_instance_;
}

Attributes* Attributes::default_instance_ = NULL;

Attributes* Attributes::New() const {
  return new Attributes;
}

void Attributes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0u;
    att_ = 0u;
    def_ = 0u;
    first_ = 0u;
    hit_ = 0u;
    dodge_ = 0u;
    critstrike_ = 0u;
    critrate_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    critresist_ = 0u;
    hp_add_ = 0;
    att_add_ = 0;
    def_add_ = 0;
    fight_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_att;
        break;
      }
      
      // optional uint32 att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_)));
          set_has_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def;
        break;
      }
      
      // optional uint32 def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first;
        break;
      }
      
      // optional uint32 first = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hit;
        break;
      }
      
      // optional uint32 hit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dodge;
        break;
      }
      
      // optional uint32 dodge = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_critStrike;
        break;
      }
      
      // optional uint32 critStrike = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critStrike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critstrike_)));
          set_has_critstrike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_critRate;
        break;
      }
      
      // optional uint32 critRate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critrate_)));
          set_has_critrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_critResist;
        break;
      }
      
      // optional uint32 critResist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critResist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critresist_)));
          set_has_critresist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_hp_add;
        break;
      }
      
      // optional double hp_add = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hp_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hp_add_)));
          set_has_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_att_add;
        break;
      }
      
      // optional double att_add = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_att_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &att_add_)));
          set_has_att_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_def_add;
        break;
      }
      
      // optional double def_add = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_def_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &def_add_)));
          set_has_def_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fight_power;
        break;
      }
      
      // required uint32 fight_power = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }
  
  // optional uint32 att = 2;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->att(), output);
  }
  
  // optional uint32 def = 3;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def(), output);
  }
  
  // optional uint32 first = 4;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->first(), output);
  }
  
  // optional uint32 hit = 5;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hit(), output);
  }
  
  // optional uint32 dodge = 6;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dodge(), output);
  }
  
  // optional uint32 critStrike = 7;
  if (has_critstrike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->critstrike(), output);
  }
  
  // optional uint32 critRate = 8;
  if (has_critrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->critrate(), output);
  }
  
  // optional uint32 critResist = 9;
  if (has_critresist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->critresist(), output);
  }
  
  // optional double hp_add = 10;
  if (has_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->hp_add(), output);
  }
  
  // optional double att_add = 11;
  if (has_att_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->att_add(), output);
  }
  
  // optional double def_add = 12;
  if (has_def_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->def_add(), output);
  }
  
  // required uint32 fight_power = 13;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->fight_power(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hp(), target);
  }
  
  // optional uint32 att = 2;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->att(), target);
  }
  
  // optional uint32 def = 3;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def(), target);
  }
  
  // optional uint32 first = 4;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->first(), target);
  }
  
  // optional uint32 hit = 5;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hit(), target);
  }
  
  // optional uint32 dodge = 6;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dodge(), target);
  }
  
  // optional uint32 critStrike = 7;
  if (has_critstrike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->critstrike(), target);
  }
  
  // optional uint32 critRate = 8;
  if (has_critrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->critrate(), target);
  }
  
  // optional uint32 critResist = 9;
  if (has_critresist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->critresist(), target);
  }
  
  // optional double hp_add = 10;
  if (has_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->hp_add(), target);
  }
  
  // optional double att_add = 11;
  if (has_att_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->att_add(), target);
  }
  
  // optional double def_add = 12;
  if (has_def_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->def_add(), target);
  }
  
  // required uint32 fight_power = 13;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->fight_power(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attributes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
    // optional uint32 att = 2;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att());
    }
    
    // optional uint32 def = 3;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }
    
    // optional uint32 first = 4;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }
    
    // optional uint32 hit = 5;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }
    
    // optional uint32 dodge = 6;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }
    
    // optional uint32 critStrike = 7;
    if (has_critstrike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critstrike());
    }
    
    // optional uint32 critRate = 8;
    if (has_critrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critrate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 critResist = 9;
    if (has_critresist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critresist());
    }
    
    // optional double hp_add = 10;
    if (has_hp_add()) {
      total_size += 1 + 8;
    }
    
    // optional double att_add = 11;
    if (has_att_add()) {
      total_size += 1 + 8;
    }
    
    // optional double def_add = 12;
    if (has_def_add()) {
      total_size += 1 + 8;
    }
    
    // required uint32 fight_power = 13;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attributes::MergeFrom(const Attributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_att()) {
      set_att(from.att());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_critstrike()) {
      set_critstrike(from.critstrike());
    }
    if (from.has_critrate()) {
      set_critrate(from.critrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_critresist()) {
      set_critresist(from.critresist());
    }
    if (from.has_hp_add()) {
      set_hp_add(from.hp_add());
    }
    if (from.has_att_add()) {
      set_att_add(from.att_add());
    }
    if (from.has_def_add()) {
      set_def_add(from.def_add());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attributes::CopyFrom(const Attributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attributes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001000) != 0x00001000) return false;
  
  return true;
}

void Attributes::Swap(Attributes* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(att_, other->att_);
    std::swap(def_, other->def_);
    std::swap(first_, other->first_);
    std::swap(hit_, other->hit_);
    std::swap(dodge_, other->dodge_);
    std::swap(critstrike_, other->critstrike_);
    std::swap(critrate_, other->critrate_);
    std::swap(critresist_, other->critresist_);
    std::swap(hp_add_, other->hp_add_);
    std::swap(att_add_, other->att_add_);
    std::swap(def_add_, other->def_add_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attributes_descriptor_;
  metadata.reflection = Attributes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelAttribute::kLevelFieldNumber;
const int LevelAttribute::kAttrFieldNumber;
#endif  // !_MSC_VER

LevelAttribute::LevelAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelAttribute::InitAsDefaultInstance() {
  attr_ = const_cast< ::Archive::Attributes*>(&::Archive::Attributes::default_instance());
}

LevelAttribute::LevelAttribute(const LevelAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelAttribute::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelAttribute::~LevelAttribute() {
  SharedDtor();
}

void LevelAttribute::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void LevelAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelAttribute_descriptor_;
}

const LevelAttribute& LevelAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Archive_2eproto();  return *default_instance_;
}

LevelAttribute* LevelAttribute::default_instance_ = NULL;

LevelAttribute* LevelAttribute::New() const {
  return new LevelAttribute;
}

void LevelAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    if (has_attr()) {
      if (attr_ != NULL) attr_->::Archive::Attributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }
      
      // required .Archive.Attributes attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // required .Archive.Attributes attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // required .Archive.Attributes attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required .Archive.Attributes attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelAttribute::MergeFrom(const LevelAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_attr()) {
      mutable_attr()->::Archive::Attributes::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelAttribute::CopyFrom(const LevelAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  return true;
}

void LevelAttribute::Swap(LevelAttribute* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelAttribute_descriptor_;
  metadata.reflection = LevelAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroWithArchive::kIdFieldNumber;
const int HeroWithArchive::kLevelAttrFieldNumber;
#endif  // !_MSC_VER

HeroWithArchive::HeroWithArchive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroWithArchive::InitAsDefaultInstance() {
}

HeroWithArchive::HeroWithArchive(const HeroWithArchive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroWithArchive::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroWithArchive::~HeroWithArchive() {
  SharedDtor();
}

void HeroWithArchive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroWithArchive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroWithArchive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroWithArchive_descriptor_;
}

const HeroWithArchive& HeroWithArchive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Archive_2eproto();  return *default_instance_;
}

HeroWithArchive* HeroWithArchive::default_instance_ = NULL;

HeroWithArchive* HeroWithArchive::New() const {
  return new HeroWithArchive;
}

void HeroWithArchive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  levelattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroWithArchive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_levelAttr;
        break;
      }
      
      // repeated .Archive.LevelAttribute levelAttr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levelAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_levelAttr;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroWithArchive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .Archive.LevelAttribute levelAttr = 2;
  for (int i = 0; i < this->levelattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->levelattr(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroWithArchive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .Archive.LevelAttribute levelAttr = 2;
  for (int i = 0; i < this->levelattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->levelattr(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroWithArchive::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .Archive.LevelAttribute levelAttr = 2;
  total_size += 1 * this->levelattr_size();
  for (int i = 0; i < this->levelattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelattr(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroWithArchive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroWithArchive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroWithArchive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroWithArchive::MergeFrom(const HeroWithArchive& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelattr_.MergeFrom(from.levelattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroWithArchive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroWithArchive::CopyFrom(const HeroWithArchive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroWithArchive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < levelattr_size(); i++) {
    if (!this->levelattr(i).IsInitialized()) return false;
  }
  return true;
}

void HeroWithArchive::Swap(HeroWithArchive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    levelattr_.Swap(&other->levelattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroWithArchive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroWithArchive_descriptor_;
  metadata.reflection = HeroWithArchive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArchiveRward::kLevelFieldNumber;
const int ArchiveRward::kRewardFieldNumber;
#endif  // !_MSC_VER

ArchiveRward::ArchiveRward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArchiveRward::InitAsDefaultInstance() {
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

ArchiveRward::ArchiveRward(const ArchiveRward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArchiveRward::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArchiveRward::~ArchiveRward() {
  SharedDtor();
}

void ArchiveRward::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void ArchiveRward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArchiveRward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArchiveRward_descriptor_;
}

const ArchiveRward& ArchiveRward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Archive_2eproto();  return *default_instance_;
}

ArchiveRward* ArchiveRward::default_instance_ = NULL;

ArchiveRward* ArchiveRward::New() const {
  return new ArchiveRward;
}

void ArchiveRward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArchiveRward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }
      
      // required .CommonGiftConfig.CommonModifyItem reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArchiveRward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArchiveRward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArchiveRward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required .CommonGiftConfig.CommonModifyItem reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArchiveRward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArchiveRward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArchiveRward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArchiveRward::MergeFrom(const ArchiveRward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArchiveRward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchiveRward::CopyFrom(const ArchiveRward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveRward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void ArchiveRward::Swap(ArchiveRward* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArchiveRward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArchiveRward_descriptor_;
  metadata.reflection = ArchiveRward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArchiveInfo::kArchiveInfoFieldNumber;
const int ArchiveInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

ArchiveInfo::ArchiveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArchiveInfo::InitAsDefaultInstance() {
}

ArchiveInfo::ArchiveInfo(const ArchiveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArchiveInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArchiveInfo::~ArchiveInfo() {
  SharedDtor();
}

void ArchiveInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArchiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArchiveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArchiveInfo_descriptor_;
}

const ArchiveInfo& ArchiveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Archive_2eproto();  return *default_instance_;
}

ArchiveInfo* ArchiveInfo::default_instance_ = NULL;

ArchiveInfo* ArchiveInfo::New() const {
  return new ArchiveInfo;
}

void ArchiveInfo::Clear() {
  archiveinfo_.Clear();
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArchiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Archive.HeroWithArchive archiveInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archiveInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_archiveinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_archiveInfo;
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }
      
      // repeated .Archive.ArchiveRward rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArchiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Archive.HeroWithArchive archiveInfo = 1;
  for (int i = 0; i < this->archiveinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->archiveinfo(i), output);
  }
  
  // repeated .Archive.ArchiveRward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArchiveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Archive.HeroWithArchive archiveInfo = 1;
  for (int i = 0; i < this->archiveinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->archiveinfo(i), target);
  }
  
  // repeated .Archive.ArchiveRward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArchiveInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .Archive.HeroWithArchive archiveInfo = 1;
  total_size += 1 * this->archiveinfo_size();
  for (int i = 0; i < this->archiveinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->archiveinfo(i));
  }
  
  // repeated .Archive.ArchiveRward rewards = 2;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArchiveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArchiveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArchiveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArchiveInfo::MergeFrom(const ArchiveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  archiveinfo_.MergeFrom(from.archiveinfo_);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArchiveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchiveInfo::CopyFrom(const ArchiveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveInfo::IsInitialized() const {
  
  for (int i = 0; i < archiveinfo_size(); i++) {
    if (!this->archiveinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void ArchiveInfo::Swap(ArchiveInfo* other) {
  if (other != this) {
    archiveinfo_.Swap(&other->archiveinfo_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArchiveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArchiveInfo_descriptor_;
  metadata.reflection = ArchiveInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Archive

// @@protoc_insertion_point(global_scope)
