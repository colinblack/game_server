// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Cards.proto

#ifndef PROTOBUF_Cards_2eproto__INCLUDED
#define PROTOBUF_Cards_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "CommonGiftConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace Cards {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Cards_2eproto();
void protobuf_AssignDesc_Cards_2eproto();
void protobuf_ShutdownFile_Cards_2eproto();

class Card;
class Compare;
class Conditions;
class LastingEffect;
class ActionData;
class Action;
class ActionList;
class CardInfo;
class CardUpdateStar;
class CardDup;
class CardPurchase;
class CardsCfg;

// ===================================================================

class Card : public ::google::protobuf::Message {
 public:
  Card();
  virtual ~Card();
  
  Card(const Card& from);
  
  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();
  
  void Swap(Card* other);
  
  // implements Message ----------------------------------------------
  
  Card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Cards.Card)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_star();
  inline void clear_has_star();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 star_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static Card* default_instance_;
};
// -------------------------------------------------------------------

class Compare : public ::google::protobuf::Message {
 public:
  Compare();
  virtual ~Compare();
  
  Compare(const Compare& from);
  
  inline Compare& operator=(const Compare& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Compare& default_instance();
  
  void Swap(Compare* other);
  
  // implements Message ----------------------------------------------
  
  Compare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Compare& from);
  void MergeFrom(const Compare& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 aim = 2;
  inline bool has_aim() const;
  inline void clear_aim();
  static const int kAimFieldNumber = 2;
  inline ::google::protobuf::uint32 aim() const;
  inline void set_aim(::google::protobuf::uint32 value);
  
  // required uint32 key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);
  
  // required uint32 mod = 4;
  inline bool has_mod() const;
  inline void clear_mod();
  static const int kModFieldNumber = 4;
  inline ::google::protobuf::uint32 mod() const;
  inline void set_mod(::google::protobuf::uint32 value);
  
  // optional uint32 obj = 5;
  inline bool has_obj() const;
  inline void clear_obj();
  static const int kObjFieldNumber = 5;
  inline ::google::protobuf::uint32 obj() const;
  inline void set_obj(::google::protobuf::uint32 value);
  
  // required double value = 6;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 6;
  inline double value() const;
  inline void set_value(double value);
  
  // @@protoc_insertion_point(class_scope:Cards.Compare)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_aim();
  inline void clear_has_aim();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_mod();
  inline void clear_has_mod();
  inline void set_has_obj();
  inline void clear_has_obj();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 aim_;
  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint32 mod_;
  double value_;
  ::google::protobuf::uint32 obj_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static Compare* default_instance_;
};
// -------------------------------------------------------------------

class Conditions : public ::google::protobuf::Message {
 public:
  Conditions();
  virtual ~Conditions();
  
  Conditions(const Conditions& from);
  
  inline Conditions& operator=(const Conditions& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Conditions& default_instance();
  
  void Swap(Conditions* other);
  
  // implements Message ----------------------------------------------
  
  Conditions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Conditions& from);
  void MergeFrom(const Conditions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional double p = 2;
  inline bool has_p() const;
  inline void clear_p();
  static const int kPFieldNumber = 2;
  inline double p() const;
  inline void set_p(double value);
  
  // optional .Cards.Compare c = 3;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 3;
  inline const ::Cards::Compare& c() const;
  inline ::Cards::Compare* mutable_c();
  inline ::Cards::Compare* release_c();
  
  // @@protoc_insertion_point(class_scope:Cards.Conditions)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_c();
  inline void clear_has_c();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double p_;
  ::Cards::Compare* c_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static Conditions* default_instance_;
};
// -------------------------------------------------------------------

class LastingEffect : public ::google::protobuf::Message {
 public:
  LastingEffect();
  virtual ~LastingEffect();
  
  LastingEffect(const LastingEffect& from);
  
  inline LastingEffect& operator=(const LastingEffect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LastingEffect& default_instance();
  
  void Swap(LastingEffect* other);
  
  // implements Message ----------------------------------------------
  
  LastingEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LastingEffect& from);
  void MergeFrom(const LastingEffect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Cards.LastingEffect)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_times();
  inline void clear_has_times();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 times_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static LastingEffect* default_instance_;
};
// -------------------------------------------------------------------

class ActionData : public ::google::protobuf::Message {
 public:
  ActionData();
  virtual ~ActionData();
  
  ActionData(const ActionData& from);
  
  inline ActionData& operator=(const ActionData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionData& default_instance();
  
  void Swap(ActionData* other);
  
  // implements Message ----------------------------------------------
  
  ActionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionData& from);
  void MergeFrom(const ActionData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional double v = 3;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 3;
  inline double v() const;
  inline void set_v(double value);
  
  // @@protoc_insertion_point(class_scope:Cards.ActionData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_v();
  inline void clear_has_v();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  double v_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static ActionData* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();
  
  Action(const Action& from);
  
  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();
  
  void Swap(Action* other);
  
  // implements Message ----------------------------------------------
  
  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 aim = 3;
  inline bool has_aim() const;
  inline void clear_aim();
  static const int kAimFieldNumber = 3;
  inline ::google::protobuf::uint32 aim() const;
  inline void set_aim(::google::protobuf::uint32 value);
  
  // optional .Cards.ActionData value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline const ::Cards::ActionData& value() const;
  inline ::Cards::ActionData* mutable_value();
  inline ::Cards::ActionData* release_value();
  
  // required uint32 gain = 5;
  inline bool has_gain() const;
  inline void clear_gain();
  static const int kGainFieldNumber = 5;
  inline ::google::protobuf::uint32 gain() const;
  inline void set_gain(::google::protobuf::uint32 value);
  
  // required uint32 overlay = 6;
  inline bool has_overlay() const;
  inline void clear_overlay();
  static const int kOverlayFieldNumber = 6;
  inline ::google::protobuf::uint32 overlay() const;
  inline void set_overlay(::google::protobuf::uint32 value);
  
  // required uint32 count = 7;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // optional .Cards.Conditions con = 8;
  inline bool has_con() const;
  inline void clear_con();
  static const int kConFieldNumber = 8;
  inline const ::Cards::Conditions& con() const;
  inline ::Cards::Conditions* mutable_con();
  inline ::Cards::Conditions* release_con();
  
  // required .Cards.LastingEffect last = 9;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 9;
  inline const ::Cards::LastingEffect& last() const;
  inline ::Cards::LastingEffect* mutable_last();
  inline ::Cards::LastingEffect* release_last();
  
  // repeated uint32 temp = 10;
  inline int temp_size() const;
  inline void clear_temp();
  static const int kTempFieldNumber = 10;
  inline ::google::protobuf::uint32 temp(int index) const;
  inline void set_temp(int index, ::google::protobuf::uint32 value);
  inline void add_temp(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      temp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_temp();
  
  // @@protoc_insertion_point(class_scope:Cards.Action)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_aim();
  inline void clear_has_aim();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_gain();
  inline void clear_has_gain();
  inline void set_has_overlay();
  inline void clear_has_overlay();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_con();
  inline void clear_has_con();
  inline void set_has_last();
  inline void clear_has_last();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::Cards::ActionData* value_;
  ::google::protobuf::uint32 aim_;
  ::google::protobuf::uint32 gain_;
  ::google::protobuf::uint32 overlay_;
  ::google::protobuf::uint32 count_;
  ::Cards::Conditions* con_;
  ::Cards::LastingEffect* last_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > temp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class ActionList : public ::google::protobuf::Message {
 public:
  ActionList();
  virtual ~ActionList();
  
  ActionList(const ActionList& from);
  
  inline ActionList& operator=(const ActionList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionList& default_instance();
  
  void Swap(ActionList* other);
  
  // implements Message ----------------------------------------------
  
  ActionList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionList& from);
  void MergeFrom(const ActionList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 star = 1;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 1;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);
  
  // repeated .Cards.Action list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::Cards::Action& list(int index) const;
  inline ::Cards::Action* mutable_list(int index);
  inline ::Cards::Action* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cards::Action >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cards::Action >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:Cards.ActionList)
 private:
  inline void set_has_star();
  inline void clear_has_star();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Cards::Action > list_;
  ::google::protobuf::uint32 star_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static ActionList* default_instance_;
};
// -------------------------------------------------------------------

class CardInfo : public ::google::protobuf::Message {
 public:
  CardInfo();
  virtual ~CardInfo();
  
  CardInfo(const CardInfo& from);
  
  inline CardInfo& operator=(const CardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CardInfo& default_instance();
  
  void Swap(CardInfo* other);
  
  // implements Message ----------------------------------------------
  
  CardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardInfo& from);
  void MergeFrom(const CardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 e_type = 2;
  inline bool has_e_type() const;
  inline void clear_e_type();
  static const int kETypeFieldNumber = 2;
  inline ::google::protobuf::uint32 e_type() const;
  inline void set_e_type(::google::protobuf::uint32 value);
  
  // required uint32 r_type = 3;
  inline bool has_r_type() const;
  inline void clear_r_type();
  static const int kRTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 r_type() const;
  inline void set_r_type(::google::protobuf::uint32 value);
  
  // optional uint32 heroid = 4;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 4;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);
  
  // optional uint32 prof = 5;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 5;
  inline ::google::protobuf::uint32 prof() const;
  inline void set_prof(::google::protobuf::uint32 value);
  
  // required uint32 point = 6;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 6;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);
  
  // required uint32 aim = 7;
  inline bool has_aim() const;
  inline void clear_aim();
  static const int kAimFieldNumber = 7;
  inline ::google::protobuf::uint32 aim() const;
  inline void set_aim(::google::protobuf::uint32 value);
  
  // required uint32 times = 8;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 8;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);
  
  // required uint32 temp = 9;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTempFieldNumber = 9;
  inline ::google::protobuf::uint32 temp() const;
  inline void set_temp(::google::protobuf::uint32 value);
  
  // required uint32 min = 10;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 10;
  inline ::google::protobuf::uint32 min() const;
  inline void set_min(::google::protobuf::uint32 value);
  
  // required uint32 max = 11;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 11;
  inline ::google::protobuf::uint32 max() const;
  inline void set_max(::google::protobuf::uint32 value);
  
  // required uint32 coin = 12;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 12;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);
  
  // repeated .Cards.ActionList action = 13;
  inline int action_size() const;
  inline void clear_action();
  static const int kActionFieldNumber = 13;
  inline const ::Cards::ActionList& action(int index) const;
  inline ::Cards::ActionList* mutable_action(int index);
  inline ::Cards::ActionList* add_action();
  inline const ::google::protobuf::RepeatedPtrField< ::Cards::ActionList >&
      action() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cards::ActionList >*
      mutable_action();
  
  // @@protoc_insertion_point(class_scope:Cards.CardInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_e_type();
  inline void clear_has_e_type();
  inline void set_has_r_type();
  inline void clear_has_r_type();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_aim();
  inline void clear_has_aim();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_temp();
  inline void clear_has_temp();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  inline void set_has_coin();
  inline void clear_has_coin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 e_type_;
  ::google::protobuf::uint32 r_type_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 prof_;
  ::google::protobuf::uint32 point_;
  ::google::protobuf::uint32 aim_;
  ::google::protobuf::uint32 times_;
  ::google::protobuf::uint32 temp_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 max_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::RepeatedPtrField< ::Cards::ActionList > action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static CardInfo* default_instance_;
};
// -------------------------------------------------------------------

class CardUpdateStar : public ::google::protobuf::Message {
 public:
  CardUpdateStar();
  virtual ~CardUpdateStar();
  
  CardUpdateStar(const CardUpdateStar& from);
  
  inline CardUpdateStar& operator=(const CardUpdateStar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CardUpdateStar& default_instance();
  
  void Swap(CardUpdateStar* other);
  
  // implements Message ----------------------------------------------
  
  CardUpdateStar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardUpdateStar& from);
  void MergeFrom(const CardUpdateStar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // repeated .CommonGiftConfig.CommonModifyItem cost = 2;
  inline int cost_size() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline const ::CommonGiftConfig::CommonModifyItem& cost(int index) const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_cost(int index);
  inline ::CommonGiftConfig::CommonModifyItem* add_cost();
  inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >&
      cost() const;
  inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >*
      mutable_cost();
  
  // @@protoc_insertion_point(class_scope:Cards.CardUpdateStar)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem > cost_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static CardUpdateStar* default_instance_;
};
// -------------------------------------------------------------------

class CardDup : public ::google::protobuf::Message {
 public:
  CardDup();
  virtual ~CardDup();
  
  CardDup(const CardDup& from);
  
  inline CardDup& operator=(const CardDup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CardDup& default_instance();
  
  void Swap(CardDup* other);
  
  // implements Message ----------------------------------------------
  
  CardDup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardDup& from);
  void MergeFrom(const CardDup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline const ::CommonGiftConfig::CommonModifyItem& cost() const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_cost();
  inline ::CommonGiftConfig::CommonModifyItem* release_cost();
  
  // @@protoc_insertion_point(class_scope:Cards.CardDup)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cost();
  inline void clear_has_cost();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CommonGiftConfig::CommonModifyItem* cost_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static CardDup* default_instance_;
};
// -------------------------------------------------------------------

class CardPurchase : public ::google::protobuf::Message {
 public:
  CardPurchase();
  virtual ~CardPurchase();
  
  CardPurchase(const CardPurchase& from);
  
  inline CardPurchase& operator=(const CardPurchase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CardPurchase& default_instance();
  
  void Swap(CardPurchase* other);
  
  // implements Message ----------------------------------------------
  
  CardPurchase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardPurchase& from);
  void MergeFrom(const CardPurchase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline const ::CommonGiftConfig::CommonModifyItem& cost() const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_cost();
  inline ::CommonGiftConfig::CommonModifyItem* release_cost();
  
  // @@protoc_insertion_point(class_scope:Cards.CardPurchase)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cost();
  inline void clear_has_cost();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CommonGiftConfig::CommonModifyItem* cost_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static CardPurchase* default_instance_;
};
// -------------------------------------------------------------------

class CardsCfg : public ::google::protobuf::Message {
 public:
  CardsCfg();
  virtual ~CardsCfg();
  
  CardsCfg(const CardsCfg& from);
  
  inline CardsCfg& operator=(const CardsCfg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CardsCfg& default_instance();
  
  void Swap(CardsCfg* other);
  
  // implements Message ----------------------------------------------
  
  CardsCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardsCfg& from);
  void MergeFrom(const CardsCfg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Cards.CardInfo cards = 1;
  inline int cards_size() const;
  inline void clear_cards();
  static const int kCardsFieldNumber = 1;
  inline const ::Cards::CardInfo& cards(int index) const;
  inline ::Cards::CardInfo* mutable_cards(int index);
  inline ::Cards::CardInfo* add_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::Cards::CardInfo >&
      cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cards::CardInfo >*
      mutable_cards();
  
  // repeated .Cards.CardUpdateStar update = 2;
  inline int update_size() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 2;
  inline const ::Cards::CardUpdateStar& update(int index) const;
  inline ::Cards::CardUpdateStar* mutable_update(int index);
  inline ::Cards::CardUpdateStar* add_update();
  inline const ::google::protobuf::RepeatedPtrField< ::Cards::CardUpdateStar >&
      update() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cards::CardUpdateStar >*
      mutable_update();
  
  // repeated .Cards.CardDup dup = 3;
  inline int dup_size() const;
  inline void clear_dup();
  static const int kDupFieldNumber = 3;
  inline const ::Cards::CardDup& dup(int index) const;
  inline ::Cards::CardDup* mutable_dup(int index);
  inline ::Cards::CardDup* add_dup();
  inline const ::google::protobuf::RepeatedPtrField< ::Cards::CardDup >&
      dup() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cards::CardDup >*
      mutable_dup();
  
  // repeated .Cards.CardPurchase buy = 4;
  inline int buy_size() const;
  inline void clear_buy();
  static const int kBuyFieldNumber = 4;
  inline const ::Cards::CardPurchase& buy(int index) const;
  inline ::Cards::CardPurchase* mutable_buy(int index);
  inline ::Cards::CardPurchase* add_buy();
  inline const ::google::protobuf::RepeatedPtrField< ::Cards::CardPurchase >&
      buy() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cards::CardPurchase >*
      mutable_buy();
  
  // required int32 delCash = 5;
  inline bool has_delcash() const;
  inline void clear_delcash();
  static const int kDelCashFieldNumber = 5;
  inline ::google::protobuf::int32 delcash() const;
  inline void set_delcash(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Cards.CardsCfg)
 private:
  inline void set_has_delcash();
  inline void clear_has_delcash();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Cards::CardInfo > cards_;
  ::google::protobuf::RepeatedPtrField< ::Cards::CardUpdateStar > update_;
  ::google::protobuf::RepeatedPtrField< ::Cards::CardDup > dup_;
  ::google::protobuf::RepeatedPtrField< ::Cards::CardPurchase > buy_;
  ::google::protobuf::int32 delcash_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Cards_2eproto();
  friend void protobuf_AssignDesc_Cards_2eproto();
  friend void protobuf_ShutdownFile_Cards_2eproto();
  
  void InitAsDefaultInstance();
  static CardsCfg* default_instance_;
};
// ===================================================================


// ===================================================================

// Card

// required uint32 id = 1;
inline bool Card::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Card::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Card::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Card::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Card::id() const {
  return id_;
}
inline void Card::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 star = 2;
inline bool Card::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Card::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Card::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Card::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 Card::star() const {
  return star_;
}
inline void Card::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// Compare

// required uint32 type = 1;
inline bool Compare::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Compare::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Compare::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Compare::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Compare::type() const {
  return type_;
}
inline void Compare::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 aim = 2;
inline bool Compare::has_aim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Compare::set_has_aim() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Compare::clear_has_aim() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Compare::clear_aim() {
  aim_ = 0u;
  clear_has_aim();
}
inline ::google::protobuf::uint32 Compare::aim() const {
  return aim_;
}
inline void Compare::set_aim(::google::protobuf::uint32 value) {
  set_has_aim();
  aim_ = value;
}

// required uint32 key = 3;
inline bool Compare::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Compare::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Compare::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Compare::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 Compare::key() const {
  return key_;
}
inline void Compare::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// required uint32 mod = 4;
inline bool Compare::has_mod() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Compare::set_has_mod() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Compare::clear_has_mod() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Compare::clear_mod() {
  mod_ = 0u;
  clear_has_mod();
}
inline ::google::protobuf::uint32 Compare::mod() const {
  return mod_;
}
inline void Compare::set_mod(::google::protobuf::uint32 value) {
  set_has_mod();
  mod_ = value;
}

// optional uint32 obj = 5;
inline bool Compare::has_obj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Compare::set_has_obj() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Compare::clear_has_obj() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Compare::clear_obj() {
  obj_ = 0u;
  clear_has_obj();
}
inline ::google::protobuf::uint32 Compare::obj() const {
  return obj_;
}
inline void Compare::set_obj(::google::protobuf::uint32 value) {
  set_has_obj();
  obj_ = value;
}

// required double value = 6;
inline bool Compare::has_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Compare::set_has_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Compare::clear_has_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Compare::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double Compare::value() const {
  return value_;
}
inline void Compare::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// Conditions

// required uint32 id = 1;
inline bool Conditions::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Conditions::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Conditions::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Conditions::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Conditions::id() const {
  return id_;
}
inline void Conditions::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional double p = 2;
inline bool Conditions::has_p() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Conditions::set_has_p() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Conditions::clear_has_p() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Conditions::clear_p() {
  p_ = 0;
  clear_has_p();
}
inline double Conditions::p() const {
  return p_;
}
inline void Conditions::set_p(double value) {
  set_has_p();
  p_ = value;
}

// optional .Cards.Compare c = 3;
inline bool Conditions::has_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Conditions::set_has_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Conditions::clear_has_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Conditions::clear_c() {
  if (c_ != NULL) c_->::Cards::Compare::Clear();
  clear_has_c();
}
inline const ::Cards::Compare& Conditions::c() const {
  return c_ != NULL ? *c_ : *default_instance_->c_;
}
inline ::Cards::Compare* Conditions::mutable_c() {
  set_has_c();
  if (c_ == NULL) c_ = new ::Cards::Compare;
  return c_;
}
inline ::Cards::Compare* Conditions::release_c() {
  clear_has_c();
  ::Cards::Compare* temp = c_;
  c_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// LastingEffect

// required uint32 type = 1;
inline bool LastingEffect::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LastingEffect::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LastingEffect::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LastingEffect::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 LastingEffect::type() const {
  return type_;
}
inline void LastingEffect::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 times = 2;
inline bool LastingEffect::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LastingEffect::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LastingEffect::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LastingEffect::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 LastingEffect::times() const {
  return times_;
}
inline void LastingEffect::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// ActionData

// optional uint32 id = 1;
inline bool ActionData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ActionData::id() const {
  return id_;
}
inline void ActionData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 type = 2;
inline bool ActionData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionData::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ActionData::type() const {
  return type_;
}
inline void ActionData::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional double v = 3;
inline bool ActionData::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionData::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionData::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionData::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline double ActionData::v() const {
  return v_;
}
inline void ActionData::set_v(double value) {
  set_has_v();
  v_ = value;
}

// -------------------------------------------------------------------

// Action

// required uint32 id = 1;
inline bool Action::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Action::id() const {
  return id_;
}
inline void Action::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 type = 2;
inline bool Action::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Action::type() const {
  return type_;
}
inline void Action::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 aim = 3;
inline bool Action::has_aim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_aim() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_aim() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_aim() {
  aim_ = 0u;
  clear_has_aim();
}
inline ::google::protobuf::uint32 Action::aim() const {
  return aim_;
}
inline void Action::set_aim(::google::protobuf::uint32 value) {
  set_has_aim();
  aim_ = value;
}

// optional .Cards.ActionData value = 4;
inline bool Action::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_value() {
  if (value_ != NULL) value_->::Cards::ActionData::Clear();
  clear_has_value();
}
inline const ::Cards::ActionData& Action::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::Cards::ActionData* Action::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::Cards::ActionData;
  return value_;
}
inline ::Cards::ActionData* Action::release_value() {
  clear_has_value();
  ::Cards::ActionData* temp = value_;
  value_ = NULL;
  return temp;
}

// required uint32 gain = 5;
inline bool Action::has_gain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::set_has_gain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Action::clear_has_gain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Action::clear_gain() {
  gain_ = 0u;
  clear_has_gain();
}
inline ::google::protobuf::uint32 Action::gain() const {
  return gain_;
}
inline void Action::set_gain(::google::protobuf::uint32 value) {
  set_has_gain();
  gain_ = value;
}

// required uint32 overlay = 6;
inline bool Action::has_overlay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Action::set_has_overlay() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Action::clear_has_overlay() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Action::clear_overlay() {
  overlay_ = 0u;
  clear_has_overlay();
}
inline ::google::protobuf::uint32 Action::overlay() const {
  return overlay_;
}
inline void Action::set_overlay(::google::protobuf::uint32 value) {
  set_has_overlay();
  overlay_ = value;
}

// required uint32 count = 7;
inline bool Action::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Action::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Action::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Action::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Action::count() const {
  return count_;
}
inline void Action::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional .Cards.Conditions con = 8;
inline bool Action::has_con() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Action::set_has_con() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Action::clear_has_con() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Action::clear_con() {
  if (con_ != NULL) con_->::Cards::Conditions::Clear();
  clear_has_con();
}
inline const ::Cards::Conditions& Action::con() const {
  return con_ != NULL ? *con_ : *default_instance_->con_;
}
inline ::Cards::Conditions* Action::mutable_con() {
  set_has_con();
  if (con_ == NULL) con_ = new ::Cards::Conditions;
  return con_;
}
inline ::Cards::Conditions* Action::release_con() {
  clear_has_con();
  ::Cards::Conditions* temp = con_;
  con_ = NULL;
  return temp;
}

// required .Cards.LastingEffect last = 9;
inline bool Action::has_last() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Action::set_has_last() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Action::clear_has_last() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Action::clear_last() {
  if (last_ != NULL) last_->::Cards::LastingEffect::Clear();
  clear_has_last();
}
inline const ::Cards::LastingEffect& Action::last() const {
  return last_ != NULL ? *last_ : *default_instance_->last_;
}
inline ::Cards::LastingEffect* Action::mutable_last() {
  set_has_last();
  if (last_ == NULL) last_ = new ::Cards::LastingEffect;
  return last_;
}
inline ::Cards::LastingEffect* Action::release_last() {
  clear_has_last();
  ::Cards::LastingEffect* temp = last_;
  last_ = NULL;
  return temp;
}

// repeated uint32 temp = 10;
inline int Action::temp_size() const {
  return temp_.size();
}
inline void Action::clear_temp() {
  temp_.Clear();
}
inline ::google::protobuf::uint32 Action::temp(int index) const {
  return temp_.Get(index);
}
inline void Action::set_temp(int index, ::google::protobuf::uint32 value) {
  temp_.Set(index, value);
}
inline void Action::add_temp(::google::protobuf::uint32 value) {
  temp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Action::temp() const {
  return temp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Action::mutable_temp() {
  return &temp_;
}

// -------------------------------------------------------------------

// ActionList

// required uint32 star = 1;
inline bool ActionList::has_star() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionList::set_has_star() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionList::clear_has_star() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionList::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 ActionList::star() const {
  return star_;
}
inline void ActionList::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// repeated .Cards.Action list = 2;
inline int ActionList::list_size() const {
  return list_.size();
}
inline void ActionList::clear_list() {
  list_.Clear();
}
inline const ::Cards::Action& ActionList::list(int index) const {
  return list_.Get(index);
}
inline ::Cards::Action* ActionList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::Cards::Action* ActionList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cards::Action >&
ActionList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cards::Action >*
ActionList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CardInfo

// required uint32 id = 1;
inline bool CardInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CardInfo::id() const {
  return id_;
}
inline void CardInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 e_type = 2;
inline bool CardInfo::has_e_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardInfo::set_has_e_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardInfo::clear_has_e_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardInfo::clear_e_type() {
  e_type_ = 0u;
  clear_has_e_type();
}
inline ::google::protobuf::uint32 CardInfo::e_type() const {
  return e_type_;
}
inline void CardInfo::set_e_type(::google::protobuf::uint32 value) {
  set_has_e_type();
  e_type_ = value;
}

// required uint32 r_type = 3;
inline bool CardInfo::has_r_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardInfo::set_has_r_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardInfo::clear_has_r_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardInfo::clear_r_type() {
  r_type_ = 0u;
  clear_has_r_type();
}
inline ::google::protobuf::uint32 CardInfo::r_type() const {
  return r_type_;
}
inline void CardInfo::set_r_type(::google::protobuf::uint32 value) {
  set_has_r_type();
  r_type_ = value;
}

// optional uint32 heroid = 4;
inline bool CardInfo::has_heroid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CardInfo::set_has_heroid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CardInfo::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CardInfo::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 CardInfo::heroid() const {
  return heroid_;
}
inline void CardInfo::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 prof = 5;
inline bool CardInfo::has_prof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CardInfo::set_has_prof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CardInfo::clear_has_prof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CardInfo::clear_prof() {
  prof_ = 0u;
  clear_has_prof();
}
inline ::google::protobuf::uint32 CardInfo::prof() const {
  return prof_;
}
inline void CardInfo::set_prof(::google::protobuf::uint32 value) {
  set_has_prof();
  prof_ = value;
}

// required uint32 point = 6;
inline bool CardInfo::has_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CardInfo::set_has_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CardInfo::clear_has_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CardInfo::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 CardInfo::point() const {
  return point_;
}
inline void CardInfo::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
}

// required uint32 aim = 7;
inline bool CardInfo::has_aim() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CardInfo::set_has_aim() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CardInfo::clear_has_aim() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CardInfo::clear_aim() {
  aim_ = 0u;
  clear_has_aim();
}
inline ::google::protobuf::uint32 CardInfo::aim() const {
  return aim_;
}
inline void CardInfo::set_aim(::google::protobuf::uint32 value) {
  set_has_aim();
  aim_ = value;
}

// required uint32 times = 8;
inline bool CardInfo::has_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CardInfo::set_has_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CardInfo::clear_has_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CardInfo::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 CardInfo::times() const {
  return times_;
}
inline void CardInfo::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// required uint32 temp = 9;
inline bool CardInfo::has_temp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CardInfo::set_has_temp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CardInfo::clear_has_temp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CardInfo::clear_temp() {
  temp_ = 0u;
  clear_has_temp();
}
inline ::google::protobuf::uint32 CardInfo::temp() const {
  return temp_;
}
inline void CardInfo::set_temp(::google::protobuf::uint32 value) {
  set_has_temp();
  temp_ = value;
}

// required uint32 min = 10;
inline bool CardInfo::has_min() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CardInfo::set_has_min() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CardInfo::clear_has_min() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CardInfo::clear_min() {
  min_ = 0u;
  clear_has_min();
}
inline ::google::protobuf::uint32 CardInfo::min() const {
  return min_;
}
inline void CardInfo::set_min(::google::protobuf::uint32 value) {
  set_has_min();
  min_ = value;
}

// required uint32 max = 11;
inline bool CardInfo::has_max() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CardInfo::set_has_max() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CardInfo::clear_has_max() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CardInfo::clear_max() {
  max_ = 0u;
  clear_has_max();
}
inline ::google::protobuf::uint32 CardInfo::max() const {
  return max_;
}
inline void CardInfo::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
}

// required uint32 coin = 12;
inline bool CardInfo::has_coin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CardInfo::set_has_coin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CardInfo::clear_has_coin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CardInfo::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 CardInfo::coin() const {
  return coin_;
}
inline void CardInfo::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// repeated .Cards.ActionList action = 13;
inline int CardInfo::action_size() const {
  return action_.size();
}
inline void CardInfo::clear_action() {
  action_.Clear();
}
inline const ::Cards::ActionList& CardInfo::action(int index) const {
  return action_.Get(index);
}
inline ::Cards::ActionList* CardInfo::mutable_action(int index) {
  return action_.Mutable(index);
}
inline ::Cards::ActionList* CardInfo::add_action() {
  return action_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cards::ActionList >&
CardInfo::action() const {
  return action_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cards::ActionList >*
CardInfo::mutable_action() {
  return &action_;
}

// -------------------------------------------------------------------

// CardUpdateStar

// required uint32 id = 1;
inline bool CardUpdateStar::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardUpdateStar::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardUpdateStar::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardUpdateStar::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CardUpdateStar::id() const {
  return id_;
}
inline void CardUpdateStar::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated .CommonGiftConfig.CommonModifyItem cost = 2;
inline int CardUpdateStar::cost_size() const {
  return cost_.size();
}
inline void CardUpdateStar::clear_cost() {
  cost_.Clear();
}
inline const ::CommonGiftConfig::CommonModifyItem& CardUpdateStar::cost(int index) const {
  return cost_.Get(index);
}
inline ::CommonGiftConfig::CommonModifyItem* CardUpdateStar::mutable_cost(int index) {
  return cost_.Mutable(index);
}
inline ::CommonGiftConfig::CommonModifyItem* CardUpdateStar::add_cost() {
  return cost_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >&
CardUpdateStar::cost() const {
  return cost_;
}
inline ::google::protobuf::RepeatedPtrField< ::CommonGiftConfig::CommonModifyItem >*
CardUpdateStar::mutable_cost() {
  return &cost_;
}

// -------------------------------------------------------------------

// CardDup

// required uint32 id = 1;
inline bool CardDup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardDup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardDup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardDup::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CardDup::id() const {
  return id_;
}
inline void CardDup::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CommonGiftConfig.CommonModifyItem cost = 2;
inline bool CardDup::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardDup::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardDup::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardDup::clear_cost() {
  if (cost_ != NULL) cost_->::CommonGiftConfig::CommonModifyItem::Clear();
  clear_has_cost();
}
inline const ::CommonGiftConfig::CommonModifyItem& CardDup::cost() const {
  return cost_ != NULL ? *cost_ : *default_instance_->cost_;
}
inline ::CommonGiftConfig::CommonModifyItem* CardDup::mutable_cost() {
  set_has_cost();
  if (cost_ == NULL) cost_ = new ::CommonGiftConfig::CommonModifyItem;
  return cost_;
}
inline ::CommonGiftConfig::CommonModifyItem* CardDup::release_cost() {
  clear_has_cost();
  ::CommonGiftConfig::CommonModifyItem* temp = cost_;
  cost_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CardPurchase

// required uint32 id = 1;
inline bool CardPurchase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardPurchase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardPurchase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardPurchase::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CardPurchase::id() const {
  return id_;
}
inline void CardPurchase::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .CommonGiftConfig.CommonModifyItem cost = 2;
inline bool CardPurchase::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardPurchase::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardPurchase::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardPurchase::clear_cost() {
  if (cost_ != NULL) cost_->::CommonGiftConfig::CommonModifyItem::Clear();
  clear_has_cost();
}
inline const ::CommonGiftConfig::CommonModifyItem& CardPurchase::cost() const {
  return cost_ != NULL ? *cost_ : *default_instance_->cost_;
}
inline ::CommonGiftConfig::CommonModifyItem* CardPurchase::mutable_cost() {
  set_has_cost();
  if (cost_ == NULL) cost_ = new ::CommonGiftConfig::CommonModifyItem;
  return cost_;
}
inline ::CommonGiftConfig::CommonModifyItem* CardPurchase::release_cost() {
  clear_has_cost();
  ::CommonGiftConfig::CommonModifyItem* temp = cost_;
  cost_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CardsCfg

// repeated .Cards.CardInfo cards = 1;
inline int CardsCfg::cards_size() const {
  return cards_.size();
}
inline void CardsCfg::clear_cards() {
  cards_.Clear();
}
inline const ::Cards::CardInfo& CardsCfg::cards(int index) const {
  return cards_.Get(index);
}
inline ::Cards::CardInfo* CardsCfg::mutable_cards(int index) {
  return cards_.Mutable(index);
}
inline ::Cards::CardInfo* CardsCfg::add_cards() {
  return cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cards::CardInfo >&
CardsCfg::cards() const {
  return cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cards::CardInfo >*
CardsCfg::mutable_cards() {
  return &cards_;
}

// repeated .Cards.CardUpdateStar update = 2;
inline int CardsCfg::update_size() const {
  return update_.size();
}
inline void CardsCfg::clear_update() {
  update_.Clear();
}
inline const ::Cards::CardUpdateStar& CardsCfg::update(int index) const {
  return update_.Get(index);
}
inline ::Cards::CardUpdateStar* CardsCfg::mutable_update(int index) {
  return update_.Mutable(index);
}
inline ::Cards::CardUpdateStar* CardsCfg::add_update() {
  return update_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cards::CardUpdateStar >&
CardsCfg::update() const {
  return update_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cards::CardUpdateStar >*
CardsCfg::mutable_update() {
  return &update_;
}

// repeated .Cards.CardDup dup = 3;
inline int CardsCfg::dup_size() const {
  return dup_.size();
}
inline void CardsCfg::clear_dup() {
  dup_.Clear();
}
inline const ::Cards::CardDup& CardsCfg::dup(int index) const {
  return dup_.Get(index);
}
inline ::Cards::CardDup* CardsCfg::mutable_dup(int index) {
  return dup_.Mutable(index);
}
inline ::Cards::CardDup* CardsCfg::add_dup() {
  return dup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cards::CardDup >&
CardsCfg::dup() const {
  return dup_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cards::CardDup >*
CardsCfg::mutable_dup() {
  return &dup_;
}

// repeated .Cards.CardPurchase buy = 4;
inline int CardsCfg::buy_size() const {
  return buy_.size();
}
inline void CardsCfg::clear_buy() {
  buy_.Clear();
}
inline const ::Cards::CardPurchase& CardsCfg::buy(int index) const {
  return buy_.Get(index);
}
inline ::Cards::CardPurchase* CardsCfg::mutable_buy(int index) {
  return buy_.Mutable(index);
}
inline ::Cards::CardPurchase* CardsCfg::add_buy() {
  return buy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cards::CardPurchase >&
CardsCfg::buy() const {
  return buy_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cards::CardPurchase >*
CardsCfg::mutable_buy() {
  return &buy_;
}

// required int32 delCash = 5;
inline bool CardsCfg::has_delcash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CardsCfg::set_has_delcash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CardsCfg::clear_has_delcash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CardsCfg::clear_delcash() {
  delcash_ = 0;
  clear_has_delcash();
}
inline ::google::protobuf::int32 CardsCfg::delcash() const {
  return delcash_;
}
inline void CardsCfg::set_delcash(::google::protobuf::int32 value) {
  set_has_delcash();
  delcash_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cards

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Cards_2eproto__INCLUDED
