// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Cards.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cards {

namespace {

const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* Compare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Compare_reflection_ = NULL;
const ::google::protobuf::Descriptor* Conditions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Conditions_reflection_ = NULL;
const ::google::protobuf::Descriptor* LastingEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LastingEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardUpdateStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardUpdateStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardPurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardPurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardsCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardsCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Cards_2eproto() {
  protobuf_AddDesc_Cards_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Cards.proto");
  GOOGLE_CHECK(file != NULL);
  Card_descriptor_ = file->message_type(0);
  static const int Card_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, star_),
  };
  Card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Card));
  Compare_descriptor_ = file->message_type(1);
  static const int Compare_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, aim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, obj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, value_),
  };
  Compare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Compare_descriptor_,
      Compare::default_instance_,
      Compare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Compare));
  Conditions_descriptor_ = file->message_type(2);
  static const int Conditions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, c_),
  };
  Conditions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Conditions_descriptor_,
      Conditions::default_instance_,
      Conditions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Conditions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Conditions));
  LastingEffect_descriptor_ = file->message_type(3);
  static const int LastingEffect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingEffect, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingEffect, times_),
  };
  LastingEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LastingEffect_descriptor_,
      LastingEffect::default_instance_,
      LastingEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LastingEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LastingEffect));
  ActionData_descriptor_ = file->message_type(4);
  static const int ActionData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionData, v_),
  };
  ActionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionData_descriptor_,
      ActionData::default_instance_,
      ActionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionData));
  Action_descriptor_ = file->message_type(5);
  static const int Action_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, aim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, overlay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, con_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, temp_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action));
  ActionList_descriptor_ = file->message_type(6);
  static const int ActionList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionList, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionList, list_),
  };
  ActionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActionList_descriptor_,
      ActionList::default_instance_,
      ActionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActionList));
  CardInfo_descriptor_ = file->message_type(7);
  static const int CardInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, e_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, r_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, aim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, action_),
  };
  CardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardInfo_descriptor_,
      CardInfo::default_instance_,
      CardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardInfo));
  CardUpdateStar_descriptor_ = file->message_type(8);
  static const int CardUpdateStar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUpdateStar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUpdateStar, cost_),
  };
  CardUpdateStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardUpdateStar_descriptor_,
      CardUpdateStar::default_instance_,
      CardUpdateStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUpdateStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardUpdateStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardUpdateStar));
  CardDup_descriptor_ = file->message_type(9);
  static const int CardDup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardDup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardDup, cost_),
  };
  CardDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardDup_descriptor_,
      CardDup::default_instance_,
      CardDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardDup));
  CardPurchase_descriptor_ = file->message_type(10);
  static const int CardPurchase_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardPurchase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardPurchase, cost_),
  };
  CardPurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardPurchase_descriptor_,
      CardPurchase::default_instance_,
      CardPurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardPurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardPurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardPurchase));
  CardsCfg_descriptor_ = file->message_type(11);
  static const int CardsCfg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsCfg, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsCfg, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsCfg, dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsCfg, buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsCfg, delcash_),
  };
  CardsCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardsCfg_descriptor_,
      CardsCfg::default_instance_,
      CardsCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardsCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardsCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Cards_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Compare_descriptor_, &Compare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Conditions_descriptor_, &Conditions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LastingEffect_descriptor_, &LastingEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionData_descriptor_, &ActionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActionList_descriptor_, &ActionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardInfo_descriptor_, &CardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardUpdateStar_descriptor_, &CardUpdateStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardDup_descriptor_, &CardDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardPurchase_descriptor_, &CardPurchase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardsCfg_descriptor_, &CardsCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Cards_2eproto() {
  delete Card::default_instance_;
  delete Card_reflection_;
  delete Compare::default_instance_;
  delete Compare_reflection_;
  delete Conditions::default_instance_;
  delete Conditions_reflection_;
  delete LastingEffect::default_instance_;
  delete LastingEffect_reflection_;
  delete ActionData::default_instance_;
  delete ActionData_reflection_;
  delete Action::default_instance_;
  delete Action_reflection_;
  delete ActionList::default_instance_;
  delete ActionList_reflection_;
  delete CardInfo::default_instance_;
  delete CardInfo_reflection_;
  delete CardUpdateStar::default_instance_;
  delete CardUpdateStar_reflection_;
  delete CardDup::default_instance_;
  delete CardDup_reflection_;
  delete CardPurchase::default_instance_;
  delete CardPurchase_reflection_;
  delete CardsCfg::default_instance_;
  delete CardsCfg_reflection_;
}

void protobuf_AddDesc_Cards_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Cards.proto\022\005Cards\032\026CommonGiftConfig.p"
    "roto\" \n\004Card\022\n\n\002id\030\001 \002(\r\022\014\n\004star\030\002 \002(\r\"Z"
    "\n\007Compare\022\014\n\004type\030\001 \002(\r\022\013\n\003aim\030\002 \002(\r\022\013\n\003"
    "key\030\003 \002(\r\022\013\n\003mod\030\004 \002(\r\022\013\n\003obj\030\005 \001(\r\022\r\n\005v"
    "alue\030\006 \002(\001\">\n\nConditions\022\n\n\002id\030\001 \002(\r\022\t\n\001"
    "p\030\002 \001(\001\022\031\n\001c\030\003 \001(\0132\016.Cards.Compare\",\n\rLa"
    "stingEffect\022\014\n\004type\030\001 \002(\r\022\r\n\005times\030\002 \001(\r"
    "\"1\n\nActionData\022\n\n\002id\030\001 \001(\r\022\014\n\004type\030\002 \001(\r"
    "\022\t\n\001v\030\003 \001(\001\"\321\001\n\006Action\022\n\n\002id\030\001 \002(\r\022\014\n\004ty"
    "pe\030\002 \002(\r\022\013\n\003aim\030\003 \002(\r\022 \n\005value\030\004 \001(\0132\021.C"
    "ards.ActionData\022\014\n\004gain\030\005 \002(\r\022\017\n\007overlay"
    "\030\006 \002(\r\022\r\n\005count\030\007 \002(\r\022\036\n\003con\030\010 \001(\0132\021.Car"
    "ds.Conditions\022\"\n\004last\030\t \002(\0132\024.Cards.Last"
    "ingEffect\022\014\n\004temp\030\n \003(\r\"7\n\nActionList\022\014\n"
    "\004star\030\001 \002(\r\022\033\n\004list\030\002 \003(\0132\r.Cards.Action"
    "\"\330\001\n\010CardInfo\022\n\n\002id\030\001 \002(\r\022\016\n\006e_type\030\002 \002("
    "\r\022\016\n\006r_type\030\003 \002(\r\022\016\n\006heroid\030\004 \001(\r\022\014\n\004pro"
    "f\030\005 \001(\r\022\r\n\005point\030\006 \002(\r\022\013\n\003aim\030\007 \002(\r\022\r\n\005t"
    "imes\030\010 \002(\r\022\014\n\004temp\030\t \002(\r\022\013\n\003min\030\n \002(\r\022\013\n"
    "\003max\030\013 \002(\r\022\014\n\004coin\030\014 \002(\r\022!\n\006action\030\r \003(\013"
    "2\021.Cards.ActionList\"N\n\016CardUpdateStar\022\n\n"
    "\002id\030\001 \002(\r\0220\n\004cost\030\002 \003(\0132\".CommonGiftConf"
    "ig.CommonModifyItem\"G\n\007CardDup\022\n\n\002id\030\001 \002"
    "(\r\0220\n\004cost\030\002 \002(\0132\".CommonGiftConfig.Comm"
    "onModifyItem\"L\n\014CardPurchase\022\n\n\002id\030\001 \002(\r"
    "\0220\n\004cost\030\002 \002(\0132\".CommonGiftConfig.Common"
    "ModifyItem\"\241\001\n\010CardsCfg\022\036\n\005cards\030\001 \003(\0132\017"
    ".Cards.CardInfo\022%\n\006update\030\002 \003(\0132\025.Cards."
    "CardUpdateStar\022\033\n\003dup\030\003 \003(\0132\016.Cards.Card"
    "Dup\022 \n\003buy\030\004 \003(\0132\023.Cards.CardPurchase\022\017\n"
    "\007delCash\030\005 \002(\005", 1214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Cards.proto", &protobuf_RegisterTypes);
  Card::default_instance_ = new Card();
  Compare::default_instance_ = new Compare();
  Conditions::default_instance_ = new Conditions();
  LastingEffect::default_instance_ = new LastingEffect();
  ActionData::default_instance_ = new ActionData();
  Action::default_instance_ = new Action();
  ActionList::default_instance_ = new ActionList();
  CardInfo::default_instance_ = new CardInfo();
  CardUpdateStar::default_instance_ = new CardUpdateStar();
  CardDup::default_instance_ = new CardDup();
  CardPurchase::default_instance_ = new CardPurchase();
  CardsCfg::default_instance_ = new CardsCfg();
  Card::default_instance_->InitAsDefaultInstance();
  Compare::default_instance_->InitAsDefaultInstance();
  Conditions::default_instance_->InitAsDefaultInstance();
  LastingEffect::default_instance_->InitAsDefaultInstance();
  ActionData::default_instance_->InitAsDefaultInstance();
  Action::default_instance_->InitAsDefaultInstance();
  ActionList::default_instance_->InitAsDefaultInstance();
  CardInfo::default_instance_->InitAsDefaultInstance();
  CardUpdateStar::default_instance_->InitAsDefaultInstance();
  CardDup::default_instance_->InitAsDefaultInstance();
  CardPurchase::default_instance_->InitAsDefaultInstance();
  CardsCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Cards_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Cards_2eproto {
  StaticDescriptorInitializer_Cards_2eproto() {
    protobuf_AddDesc_Cards_2eproto();
  }
} static_descriptor_initializer_Cards_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Card::kIdFieldNumber;
const int Card::kStarFieldNumber;
#endif  // !_MSC_VER

Card::Card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Card::InitAsDefaultInstance() {
}

Card::Card(const Card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Card::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Card::~Card() {
  SharedDtor();
}

void Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New() const {
  return new Card;
}

void Card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }
      
      // required uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Card::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Card::Swap(Card* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Compare::kTypeFieldNumber;
const int Compare::kAimFieldNumber;
const int Compare::kKeyFieldNumber;
const int Compare::kModFieldNumber;
const int Compare::kObjFieldNumber;
const int Compare::kValueFieldNumber;
#endif  // !_MSC_VER

Compare::Compare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Compare::InitAsDefaultInstance() {
}

Compare::Compare(const Compare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Compare::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  aim_ = 0u;
  key_ = 0u;
  mod_ = 0u;
  obj_ = 0u;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Compare::~Compare() {
  SharedDtor();
}

void Compare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Compare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Compare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Compare_descriptor_;
}

const Compare& Compare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

Compare* Compare::default_instance_ = NULL;

Compare* Compare::New() const {
  return new Compare;
}

void Compare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    aim_ = 0u;
    key_ = 0u;
    mod_ = 0u;
    obj_ = 0u;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Compare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_aim;
        break;
      }
      
      // required uint32 aim = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_key;
        break;
      }
      
      // required uint32 key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mod;
        break;
      }
      
      // required uint32 mod = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mod_)));
          set_has_mod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_obj;
        break;
      }
      
      // optional uint32 obj = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_)));
          set_has_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_value;
        break;
      }
      
      // required double value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Compare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required uint32 aim = 2;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aim(), output);
  }
  
  // required uint32 key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->key(), output);
  }
  
  // required uint32 mod = 4;
  if (has_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mod(), output);
  }
  
  // optional uint32 obj = 5;
  if (has_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->obj(), output);
  }
  
  // required double value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Compare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required uint32 aim = 2;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aim(), target);
  }
  
  // required uint32 key = 3;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->key(), target);
  }
  
  // required uint32 mod = 4;
  if (has_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mod(), target);
  }
  
  // optional uint32 obj = 5;
  if (has_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->obj(), target);
  }
  
  // required double value = 6;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Compare::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 aim = 2;
    if (has_aim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aim());
    }
    
    // required uint32 key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }
    
    // required uint32 mod = 4;
    if (has_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mod());
    }
    
    // optional uint32 obj = 5;
    if (has_obj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj());
    }
    
    // required double value = 6;
    if (has_value()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Compare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Compare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Compare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Compare::MergeFrom(const Compare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_aim()) {
      set_aim(from.aim());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_mod()) {
      set_mod(from.mod());
    }
    if (from.has_obj()) {
      set_obj(from.obj());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Compare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Compare::CopyFrom(const Compare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compare::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  
  return true;
}

void Compare::Swap(Compare* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(aim_, other->aim_);
    std::swap(key_, other->key_);
    std::swap(mod_, other->mod_);
    std::swap(obj_, other->obj_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Compare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Compare_descriptor_;
  metadata.reflection = Compare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Conditions::kIdFieldNumber;
const int Conditions::kPFieldNumber;
const int Conditions::kCFieldNumber;
#endif  // !_MSC_VER

Conditions::Conditions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Conditions::InitAsDefaultInstance() {
  c_ = const_cast< ::Cards::Compare*>(&::Cards::Compare::default_instance());
}

Conditions::Conditions(const Conditions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Conditions::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  p_ = 0;
  c_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Conditions::~Conditions() {
  SharedDtor();
}

void Conditions::SharedDtor() {
  if (this != default_instance_) {
    delete c_;
  }
}

void Conditions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Conditions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Conditions_descriptor_;
}

const Conditions& Conditions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

Conditions* Conditions::default_instance_ = NULL;

Conditions* Conditions::New() const {
  return new Conditions;
}

void Conditions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    p_ = 0;
    if (has_c()) {
      if (c_ != NULL) c_->::Cards::Compare::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Conditions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_p;
        break;
      }
      
      // optional double p = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_)));
          set_has_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_c;
        break;
      }
      
      // optional .Cards.Compare c = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_c()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Conditions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional double p = 2;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->p(), output);
  }
  
  // optional .Cards.Compare c = 3;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->c(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Conditions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional double p = 2;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->p(), target);
  }
  
  // optional .Cards.Compare c = 3;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->c(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Conditions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional double p = 2;
    if (has_p()) {
      total_size += 1 + 8;
    }
    
    // optional .Cards.Compare c = 3;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->c());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Conditions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Conditions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Conditions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Conditions::MergeFrom(const Conditions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_c()) {
      mutable_c()->::Cards::Compare::MergeFrom(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Conditions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Conditions::CopyFrom(const Conditions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Conditions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_c()) {
    if (!this->c().IsInitialized()) return false;
  }
  return true;
}

void Conditions::Swap(Conditions* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(p_, other->p_);
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Conditions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Conditions_descriptor_;
  metadata.reflection = Conditions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LastingEffect::kTypeFieldNumber;
const int LastingEffect::kTimesFieldNumber;
#endif  // !_MSC_VER

LastingEffect::LastingEffect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LastingEffect::InitAsDefaultInstance() {
}

LastingEffect::LastingEffect(const LastingEffect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LastingEffect::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LastingEffect::~LastingEffect() {
  SharedDtor();
}

void LastingEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LastingEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LastingEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastingEffect_descriptor_;
}

const LastingEffect& LastingEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

LastingEffect* LastingEffect::default_instance_ = NULL;

LastingEffect* LastingEffect::New() const {
  return new LastingEffect;
}

void LastingEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LastingEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }
      
      // optional uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LastingEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LastingEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LastingEffect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LastingEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LastingEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LastingEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LastingEffect::MergeFrom(const LastingEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LastingEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LastingEffect::CopyFrom(const LastingEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastingEffect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LastingEffect::Swap(LastingEffect* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LastingEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LastingEffect_descriptor_;
  metadata.reflection = LastingEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionData::kIdFieldNumber;
const int ActionData::kTypeFieldNumber;
const int ActionData::kVFieldNumber;
#endif  // !_MSC_VER

ActionData::ActionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionData::InitAsDefaultInstance() {
}

ActionData::ActionData(const ActionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  v_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionData::~ActionData() {
  SharedDtor();
}

void ActionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionData_descriptor_;
}

const ActionData& ActionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

ActionData* ActionData::default_instance_ = NULL;

ActionData* ActionData::New() const {
  return new ActionData;
}

void ActionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    v_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_v;
        break;
      }
      
      // optional double v = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional double v = 3;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional double v = 3;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional double v = 3;
    if (has_v()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionData::MergeFrom(const ActionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionData::CopyFrom(const ActionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionData::IsInitialized() const {
  
  return true;
}

void ActionData::Swap(ActionData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(v_, other->v_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionData_descriptor_;
  metadata.reflection = ActionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Action::kIdFieldNumber;
const int Action::kTypeFieldNumber;
const int Action::kAimFieldNumber;
const int Action::kValueFieldNumber;
const int Action::kGainFieldNumber;
const int Action::kOverlayFieldNumber;
const int Action::kCountFieldNumber;
const int Action::kConFieldNumber;
const int Action::kLastFieldNumber;
const int Action::kTempFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Action::InitAsDefaultInstance() {
  value_ = const_cast< ::Cards::ActionData*>(&::Cards::ActionData::default_instance());
  con_ = const_cast< ::Cards::Conditions*>(&::Cards::Conditions::default_instance());
  last_ = const_cast< ::Cards::LastingEffect*>(&::Cards::LastingEffect::default_instance());
}

Action::Action(const Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  aim_ = 0u;
  value_ = NULL;
  gain_ = 0u;
  overlay_ = 0u;
  count_ = 0u;
  con_ = NULL;
  last_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action::~Action() {
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
    delete con_;
    delete last_;
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

void Action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    aim_ = 0u;
    if (has_value()) {
      if (value_ != NULL) value_->::Cards::ActionData::Clear();
    }
    gain_ = 0u;
    overlay_ = 0u;
    count_ = 0u;
    if (has_con()) {
      if (con_ != NULL) con_->::Cards::Conditions::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_last()) {
      if (last_ != NULL) last_->::Cards::LastingEffect::Clear();
    }
  }
  temp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_aim;
        break;
      }
      
      // required uint32 aim = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }
      
      // optional .Cards.ActionData value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gain;
        break;
      }
      
      // required uint32 gain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_overlay;
        break;
      }
      
      // required uint32 overlay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overlay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overlay_)));
          set_has_overlay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }
      
      // required uint32 count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_con;
        break;
      }
      
      // optional .Cards.Conditions con = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_con:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_con()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_last;
        break;
      }
      
      // required .Cards.LastingEffect last = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_temp;
        break;
      }
      
      // repeated uint32 temp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_temp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_temp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_temp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // required uint32 aim = 3;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->aim(), output);
  }
  
  // optional .Cards.ActionData value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->value(), output);
  }
  
  // required uint32 gain = 5;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gain(), output);
  }
  
  // required uint32 overlay = 6;
  if (has_overlay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->overlay(), output);
  }
  
  // required uint32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->count(), output);
  }
  
  // optional .Cards.Conditions con = 8;
  if (has_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->con(), output);
  }
  
  // required .Cards.LastingEffect last = 9;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->last(), output);
  }
  
  // repeated uint32 temp = 10;
  for (int i = 0; i < this->temp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->temp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // required uint32 aim = 3;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->aim(), target);
  }
  
  // optional .Cards.ActionData value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->value(), target);
  }
  
  // required uint32 gain = 5;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gain(), target);
  }
  
  // required uint32 overlay = 6;
  if (has_overlay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->overlay(), target);
  }
  
  // required uint32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->count(), target);
  }
  
  // optional .Cards.Conditions con = 8;
  if (has_con()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->con(), target);
  }
  
  // required .Cards.LastingEffect last = 9;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->last(), target);
  }
  
  // repeated uint32 temp = 10;
  for (int i = 0; i < this->temp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->temp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 aim = 3;
    if (has_aim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aim());
    }
    
    // optional .Cards.ActionData value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
    // required uint32 gain = 5;
    if (has_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gain());
    }
    
    // required uint32 overlay = 6;
    if (has_overlay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overlay());
    }
    
    // required uint32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional .Cards.Conditions con = 8;
    if (has_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->con());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .Cards.LastingEffect last = 9;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last());
    }
    
  }
  // repeated uint32 temp = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->temp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->temp(i));
    }
    total_size += 1 * this->temp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  temp_.MergeFrom(from.temp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_aim()) {
      set_aim(from.aim());
    }
    if (from.has_value()) {
      mutable_value()->::Cards::ActionData::MergeFrom(from.value());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
    if (from.has_overlay()) {
      set_overlay(from.overlay());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_con()) {
      mutable_con()->::Cards::Conditions::MergeFrom(from.con());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last()) {
      mutable_last()->::Cards::LastingEffect::MergeFrom(from.last());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000177) != 0x00000177) return false;
  
  if (has_con()) {
    if (!this->con().IsInitialized()) return false;
  }
  if (has_last()) {
    if (!this->last().IsInitialized()) return false;
  }
  return true;
}

void Action::Swap(Action* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(aim_, other->aim_);
    std::swap(value_, other->value_);
    std::swap(gain_, other->gain_);
    std::swap(overlay_, other->overlay_);
    std::swap(count_, other->count_);
    std::swap(con_, other->con_);
    std::swap(last_, other->last_);
    temp_.Swap(&other->temp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActionList::kStarFieldNumber;
const int ActionList::kListFieldNumber;
#endif  // !_MSC_VER

ActionList::ActionList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActionList::InitAsDefaultInstance() {
}

ActionList::ActionList(const ActionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActionList::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionList::~ActionList() {
  SharedDtor();
}

void ActionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionList_descriptor_;
}

const ActionList& ActionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

ActionList* ActionList::default_instance_ = NULL;

ActionList* ActionList::New() const {
  return new ActionList;
}

void ActionList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_ = 0u;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 star = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }
      
      // repeated .Cards.Action list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star(), output);
  }
  
  // repeated .Cards.Action list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star(), target);
  }
  
  // repeated .Cards.Action list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActionList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
  }
  // repeated .Cards.Action list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActionList::MergeFrom(const ActionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionList::CopyFrom(const ActionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void ActionList::Swap(ActionList* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionList_descriptor_;
  metadata.reflection = ActionList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardInfo::kIdFieldNumber;
const int CardInfo::kETypeFieldNumber;
const int CardInfo::kRTypeFieldNumber;
const int CardInfo::kHeroidFieldNumber;
const int CardInfo::kProfFieldNumber;
const int CardInfo::kPointFieldNumber;
const int CardInfo::kAimFieldNumber;
const int CardInfo::kTimesFieldNumber;
const int CardInfo::kTempFieldNumber;
const int CardInfo::kMinFieldNumber;
const int CardInfo::kMaxFieldNumber;
const int CardInfo::kCoinFieldNumber;
const int CardInfo::kActionFieldNumber;
#endif  // !_MSC_VER

CardInfo::CardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardInfo::InitAsDefaultInstance() {
}

CardInfo::CardInfo(const CardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  e_type_ = 0u;
  r_type_ = 0u;
  heroid_ = 0u;
  prof_ = 0u;
  point_ = 0u;
  aim_ = 0u;
  times_ = 0u;
  temp_ = 0u;
  min_ = 0u;
  max_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardInfo::~CardInfo() {
  SharedDtor();
}

void CardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardInfo_descriptor_;
}

const CardInfo& CardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

CardInfo* CardInfo::default_instance_ = NULL;

CardInfo* CardInfo::New() const {
  return new CardInfo;
}

void CardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    e_type_ = 0u;
    r_type_ = 0u;
    heroid_ = 0u;
    prof_ = 0u;
    point_ = 0u;
    aim_ = 0u;
    times_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    temp_ = 0u;
    min_ = 0u;
    max_ = 0u;
    coin_ = 0u;
  }
  action_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_e_type;
        break;
      }
      
      // required uint32 e_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_e_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e_type_)));
          set_has_e_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_r_type;
        break;
      }
      
      // required uint32 r_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_r_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_type_)));
          set_has_r_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_heroid;
        break;
      }
      
      // optional uint32 heroid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prof;
        break;
      }
      
      // optional uint32 prof = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_point;
        break;
      }
      
      // required uint32 point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_aim;
        break;
      }
      
      // required uint32 aim = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aim_)));
          set_has_aim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_times;
        break;
      }
      
      // required uint32 times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_temp;
        break;
      }
      
      // required uint32 temp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_min;
        break;
      }
      
      // required uint32 min = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_max;
        break;
      }
      
      // required uint32 max = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_coin;
        break;
      }
      
      // required uint32 coin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_action;
        break;
      }
      
      // repeated .Cards.ActionList action = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_action;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 e_type = 2;
  if (has_e_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->e_type(), output);
  }
  
  // required uint32 r_type = 3;
  if (has_r_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r_type(), output);
  }
  
  // optional uint32 heroid = 4;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->heroid(), output);
  }
  
  // optional uint32 prof = 5;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prof(), output);
  }
  
  // required uint32 point = 6;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->point(), output);
  }
  
  // required uint32 aim = 7;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->aim(), output);
  }
  
  // required uint32 times = 8;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->times(), output);
  }
  
  // required uint32 temp = 9;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->temp(), output);
  }
  
  // required uint32 min = 10;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->min(), output);
  }
  
  // required uint32 max = 11;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max(), output);
  }
  
  // required uint32 coin = 12;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->coin(), output);
  }
  
  // repeated .Cards.ActionList action = 13;
  for (int i = 0; i < this->action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->action(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 e_type = 2;
  if (has_e_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->e_type(), target);
  }
  
  // required uint32 r_type = 3;
  if (has_r_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r_type(), target);
  }
  
  // optional uint32 heroid = 4;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->heroid(), target);
  }
  
  // optional uint32 prof = 5;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prof(), target);
  }
  
  // required uint32 point = 6;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->point(), target);
  }
  
  // required uint32 aim = 7;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->aim(), target);
  }
  
  // required uint32 times = 8;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->times(), target);
  }
  
  // required uint32 temp = 9;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->temp(), target);
  }
  
  // required uint32 min = 10;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->min(), target);
  }
  
  // required uint32 max = 11;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max(), target);
  }
  
  // required uint32 coin = 12;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->coin(), target);
  }
  
  // repeated .Cards.ActionList action = 13;
  for (int i = 0; i < this->action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->action(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 e_type = 2;
    if (has_e_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e_type());
    }
    
    // required uint32 r_type = 3;
    if (has_r_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r_type());
    }
    
    // optional uint32 heroid = 4;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // optional uint32 prof = 5;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }
    
    // required uint32 point = 6;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }
    
    // required uint32 aim = 7;
    if (has_aim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aim());
    }
    
    // required uint32 times = 8;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 temp = 9;
    if (has_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temp());
    }
    
    // required uint32 min = 10;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }
    
    // required uint32 max = 11;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }
    
    // required uint32 coin = 12;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }
    
  }
  // repeated .Cards.ActionList action = 13;
  total_size += 1 * this->action_size();
  for (int i = 0; i < this->action_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardInfo::MergeFrom(const CardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_.MergeFrom(from.action_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_e_type()) {
      set_e_type(from.e_type());
    }
    if (from.has_r_type()) {
      set_r_type(from.r_type());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_aim()) {
      set_aim(from.aim());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardInfo::CopyFrom(const CardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fe7) != 0x00000fe7) return false;
  
  for (int i = 0; i < action_size(); i++) {
    if (!this->action(i).IsInitialized()) return false;
  }
  return true;
}

void CardInfo::Swap(CardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(e_type_, other->e_type_);
    std::swap(r_type_, other->r_type_);
    std::swap(heroid_, other->heroid_);
    std::swap(prof_, other->prof_);
    std::swap(point_, other->point_);
    std::swap(aim_, other->aim_);
    std::swap(times_, other->times_);
    std::swap(temp_, other->temp_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(coin_, other->coin_);
    action_.Swap(&other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardInfo_descriptor_;
  metadata.reflection = CardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardUpdateStar::kIdFieldNumber;
const int CardUpdateStar::kCostFieldNumber;
#endif  // !_MSC_VER

CardUpdateStar::CardUpdateStar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardUpdateStar::InitAsDefaultInstance() {
}

CardUpdateStar::CardUpdateStar(const CardUpdateStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardUpdateStar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardUpdateStar::~CardUpdateStar() {
  SharedDtor();
}

void CardUpdateStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardUpdateStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardUpdateStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardUpdateStar_descriptor_;
}

const CardUpdateStar& CardUpdateStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

CardUpdateStar* CardUpdateStar::default_instance_ = NULL;

CardUpdateStar* CardUpdateStar::New() const {
  return new CardUpdateStar;
}

void CardUpdateStar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  cost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardUpdateStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cost;
        break;
      }
      
      // repeated .CommonGiftConfig.CommonModifyItem cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cost()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cost;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardUpdateStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .CommonGiftConfig.CommonModifyItem cost = 2;
  for (int i = 0; i < this->cost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cost(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardUpdateStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .CommonGiftConfig.CommonModifyItem cost = 2;
  for (int i = 0; i < this->cost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cost(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardUpdateStar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .CommonGiftConfig.CommonModifyItem cost = 2;
  total_size += 1 * this->cost_size();
  for (int i = 0; i < this->cost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cost(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardUpdateStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardUpdateStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardUpdateStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardUpdateStar::MergeFrom(const CardUpdateStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_.MergeFrom(from.cost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardUpdateStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardUpdateStar::CopyFrom(const CardUpdateStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardUpdateStar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < cost_size(); i++) {
    if (!this->cost(i).IsInitialized()) return false;
  }
  return true;
}

void CardUpdateStar::Swap(CardUpdateStar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    cost_.Swap(&other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardUpdateStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardUpdateStar_descriptor_;
  metadata.reflection = CardUpdateStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardDup::kIdFieldNumber;
const int CardDup::kCostFieldNumber;
#endif  // !_MSC_VER

CardDup::CardDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardDup::InitAsDefaultInstance() {
  cost_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

CardDup::CardDup(const CardDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardDup::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cost_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardDup::~CardDup() {
  SharedDtor();
}

void CardDup::SharedDtor() {
  if (this != default_instance_) {
    delete cost_;
  }
}

void CardDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardDup_descriptor_;
}

const CardDup& CardDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

CardDup* CardDup::default_instance_ = NULL;

CardDup* CardDup::New() const {
  return new CardDup;
}

void CardDup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_cost()) {
      if (cost_ != NULL) cost_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cost;
        break;
      }
      
      // required .CommonGiftConfig.CommonModifyItem cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardDup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .CommonGiftConfig.CommonModifyItem cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardDup::MergeFrom(const CardDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cost()) {
      mutable_cost()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardDup::CopyFrom(const CardDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardDup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_cost()) {
    if (!this->cost().IsInitialized()) return false;
  }
  return true;
}

void CardDup::Swap(CardDup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardDup_descriptor_;
  metadata.reflection = CardDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardPurchase::kIdFieldNumber;
const int CardPurchase::kCostFieldNumber;
#endif  // !_MSC_VER

CardPurchase::CardPurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardPurchase::InitAsDefaultInstance() {
  cost_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

CardPurchase::CardPurchase(const CardPurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardPurchase::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cost_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardPurchase::~CardPurchase() {
  SharedDtor();
}

void CardPurchase::SharedDtor() {
  if (this != default_instance_) {
    delete cost_;
  }
}

void CardPurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardPurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardPurchase_descriptor_;
}

const CardPurchase& CardPurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

CardPurchase* CardPurchase::default_instance_ = NULL;

CardPurchase* CardPurchase::New() const {
  return new CardPurchase;
}

void CardPurchase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_cost()) {
      if (cost_ != NULL) cost_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cost;
        break;
      }
      
      // required .CommonGiftConfig.CommonModifyItem cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cost(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardPurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .CommonGiftConfig.CommonModifyItem cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cost(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardPurchase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .CommonGiftConfig.CommonModifyItem cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cost());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardPurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardPurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardPurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardPurchase::MergeFrom(const CardPurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cost()) {
      mutable_cost()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardPurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardPurchase::CopyFrom(const CardPurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardPurchase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_cost()) {
    if (!this->cost().IsInitialized()) return false;
  }
  return true;
}

void CardPurchase::Swap(CardPurchase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardPurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardPurchase_descriptor_;
  metadata.reflection = CardPurchase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardsCfg::kCardsFieldNumber;
const int CardsCfg::kUpdateFieldNumber;
const int CardsCfg::kDupFieldNumber;
const int CardsCfg::kBuyFieldNumber;
const int CardsCfg::kDelCashFieldNumber;
#endif  // !_MSC_VER

CardsCfg::CardsCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardsCfg::InitAsDefaultInstance() {
}

CardsCfg::CardsCfg(const CardsCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardsCfg::SharedCtor() {
  _cached_size_ = 0;
  delcash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardsCfg::~CardsCfg() {
  SharedDtor();
}

void CardsCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardsCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardsCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardsCfg_descriptor_;
}

const CardsCfg& CardsCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Cards_2eproto();  return *default_instance_;
}

CardsCfg* CardsCfg::default_instance_ = NULL;

CardsCfg* CardsCfg::New() const {
  return new CardsCfg;
}

void CardsCfg::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    delcash_ = 0;
  }
  cards_.Clear();
  update_.Clear();
  dup_.Clear();
  buy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardsCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cards.CardInfo cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cards;
        if (input->ExpectTag(18)) goto parse_update;
        break;
      }
      
      // repeated .Cards.CardUpdateStar update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update;
        if (input->ExpectTag(26)) goto parse_dup;
        break;
      }
      
      // repeated .Cards.CardDup dup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dup;
        if (input->ExpectTag(34)) goto parse_buy;
        break;
      }
      
      // repeated .Cards.CardPurchase buy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_buy;
        if (input->ExpectTag(40)) goto parse_delCash;
        break;
      }
      
      // required int32 delCash = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delcash_)));
          set_has_delcash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardsCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Cards.CardInfo cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cards(i), output);
  }
  
  // repeated .Cards.CardUpdateStar update = 2;
  for (int i = 0; i < this->update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update(i), output);
  }
  
  // repeated .Cards.CardDup dup = 3;
  for (int i = 0; i < this->dup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dup(i), output);
  }
  
  // repeated .Cards.CardPurchase buy = 4;
  for (int i = 0; i < this->buy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buy(i), output);
  }
  
  // required int32 delCash = 5;
  if (has_delcash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delcash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardsCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Cards.CardInfo cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cards(i), target);
  }
  
  // repeated .Cards.CardUpdateStar update = 2;
  for (int i = 0; i < this->update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update(i), target);
  }
  
  // repeated .Cards.CardDup dup = 3;
  for (int i = 0; i < this->dup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dup(i), target);
  }
  
  // repeated .Cards.CardPurchase buy = 4;
  for (int i = 0; i < this->buy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buy(i), target);
  }
  
  // required int32 delCash = 5;
  if (has_delcash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delcash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardsCfg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // required int32 delCash = 5;
    if (has_delcash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delcash());
    }
    
  }
  // repeated .Cards.CardInfo cards = 1;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }
  
  // repeated .Cards.CardUpdateStar update = 2;
  total_size += 1 * this->update_size();
  for (int i = 0; i < this->update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->update(i));
  }
  
  // repeated .Cards.CardDup dup = 3;
  total_size += 1 * this->dup_size();
  for (int i = 0; i < this->dup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dup(i));
  }
  
  // repeated .Cards.CardPurchase buy = 4;
  total_size += 1 * this->buy_size();
  for (int i = 0; i < this->buy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardsCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardsCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardsCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardsCfg::MergeFrom(const CardsCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  update_.MergeFrom(from.update_);
  dup_.MergeFrom(from.dup_);
  buy_.MergeFrom(from.buy_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_delcash()) {
      set_delcash(from.delcash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardsCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardsCfg::CopyFrom(const CardsCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardsCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  
  for (int i = 0; i < cards_size(); i++) {
    if (!this->cards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < update_size(); i++) {
    if (!this->update(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dup_size(); i++) {
    if (!this->dup(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buy_size(); i++) {
    if (!this->buy(i).IsInitialized()) return false;
  }
  return true;
}

void CardsCfg::Swap(CardsCfg* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    update_.Swap(&other->update_);
    dup_.Swap(&other->dup_);
    buy_.Swap(&other->buy_);
    std::swap(delcash_, other->delcash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardsCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardsCfg_descriptor_;
  metadata.reflection = CardsCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cards

// @@protoc_insertion_point(global_scope)
