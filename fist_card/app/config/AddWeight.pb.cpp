// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AddWeight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AddWeight {

namespace {

const ::google::protobuf::Descriptor* PlayerAddWeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerAddWeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvpAddWeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvpAddWeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipAddWeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipAddWeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddWeightList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddWeightList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddWeightInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddWeightInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AddWeight_2eproto() {
  protobuf_AddDesc_AddWeight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AddWeight.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerAddWeight_descriptor_ = file->message_type(0);
  static const int PlayerAddWeight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAddWeight, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAddWeight, weight_),
  };
  PlayerAddWeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerAddWeight_descriptor_,
      PlayerAddWeight::default_instance_,
      PlayerAddWeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAddWeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerAddWeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerAddWeight));
  PvpAddWeight_descriptor_ = file->message_type(1);
  static const int PvpAddWeight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpAddWeight, failcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpAddWeight, weight_),
  };
  PvpAddWeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvpAddWeight_descriptor_,
      PvpAddWeight::default_instance_,
      PvpAddWeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpAddWeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvpAddWeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvpAddWeight));
  VipAddWeight_descriptor_ = file->message_type(2);
  static const int VipAddWeight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipAddWeight, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipAddWeight, weight_),
  };
  VipAddWeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipAddWeight_descriptor_,
      VipAddWeight::default_instance_,
      VipAddWeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipAddWeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipAddWeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipAddWeight));
  AddWeightList_descriptor_ = file->message_type(3);
  static const int AddWeightList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddWeightList, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddWeightList, pvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddWeightList, vip_),
  };
  AddWeightList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddWeightList_descriptor_,
      AddWeightList::default_instance_,
      AddWeightList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddWeightList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddWeightList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddWeightList));
  AddWeightInfo_descriptor_ = file->message_type(4);
  static const int AddWeightInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddWeightInfo, addweight_),
  };
  AddWeightInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddWeightInfo_descriptor_,
      AddWeightInfo::default_instance_,
      AddWeightInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddWeightInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddWeightInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddWeightInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AddWeight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerAddWeight_descriptor_, &PlayerAddWeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvpAddWeight_descriptor_, &PvpAddWeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipAddWeight_descriptor_, &VipAddWeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddWeightList_descriptor_, &AddWeightList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddWeightInfo_descriptor_, &AddWeightInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AddWeight_2eproto() {
  delete PlayerAddWeight::default_instance_;
  delete PlayerAddWeight_reflection_;
  delete PvpAddWeight::default_instance_;
  delete PvpAddWeight_reflection_;
  delete VipAddWeight::default_instance_;
  delete VipAddWeight_reflection_;
  delete AddWeightList::default_instance_;
  delete AddWeightList_reflection_;
  delete AddWeightInfo::default_instance_;
  delete AddWeightInfo_reflection_;
}

void protobuf_AddDesc_AddWeight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017AddWeight.proto\022\tAddWeight\"0\n\017PlayerAd"
    "dWeight\022\r\n\005level\030\001 \002(\r\022\016\n\006weight\030\002 \003(\r\"/"
    "\n\014PvpAddWeight\022\017\n\007failCnt\030\001 \002(\r\022\016\n\006weigh"
    "t\030\002 \003(\r\"-\n\014VipAddWeight\022\r\n\005level\030\001 \002(\r\022\016"
    "\n\006weight\030\002 \003(\r\"\207\001\n\rAddWeightList\022*\n\006play"
    "er\030\001 \003(\0132\032.AddWeight.PlayerAddWeight\022$\n\003"
    "pvp\030\002 \003(\0132\027.AddWeight.PvpAddWeight\022$\n\003vi"
    "p\030\003 \003(\0132\027.AddWeight.VipAddWeight\"<\n\rAddW"
    "eightInfo\022+\n\taddWeight\030\001 \002(\0132\030.AddWeight"
    ".AddWeightList", 374);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AddWeight.proto", &protobuf_RegisterTypes);
  PlayerAddWeight::default_instance_ = new PlayerAddWeight();
  PvpAddWeight::default_instance_ = new PvpAddWeight();
  VipAddWeight::default_instance_ = new VipAddWeight();
  AddWeightList::default_instance_ = new AddWeightList();
  AddWeightInfo::default_instance_ = new AddWeightInfo();
  PlayerAddWeight::default_instance_->InitAsDefaultInstance();
  PvpAddWeight::default_instance_->InitAsDefaultInstance();
  VipAddWeight::default_instance_->InitAsDefaultInstance();
  AddWeightList::default_instance_->InitAsDefaultInstance();
  AddWeightInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AddWeight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AddWeight_2eproto {
  StaticDescriptorInitializer_AddWeight_2eproto() {
    protobuf_AddDesc_AddWeight_2eproto();
  }
} static_descriptor_initializer_AddWeight_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PlayerAddWeight::kLevelFieldNumber;
const int PlayerAddWeight::kWeightFieldNumber;
#endif  // !_MSC_VER

PlayerAddWeight::PlayerAddWeight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerAddWeight::InitAsDefaultInstance() {
}

PlayerAddWeight::PlayerAddWeight(const PlayerAddWeight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerAddWeight::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerAddWeight::~PlayerAddWeight() {
  SharedDtor();
}

void PlayerAddWeight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerAddWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerAddWeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerAddWeight_descriptor_;
}

const PlayerAddWeight& PlayerAddWeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AddWeight_2eproto();  return *default_instance_;
}

PlayerAddWeight* PlayerAddWeight::default_instance_ = NULL;

PlayerAddWeight* PlayerAddWeight::New() const {
  return new PlayerAddWeight;
}

void PlayerAddWeight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerAddWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }
      
      // repeated uint32 weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerAddWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // repeated uint32 weight = 2;
  for (int i = 0; i < this->weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->weight(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerAddWeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // repeated uint32 weight = 2;
  for (int i = 0; i < this->weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->weight(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerAddWeight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  // repeated uint32 weight = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->weight_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->weight(i));
    }
    total_size += 1 * this->weight_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerAddWeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerAddWeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerAddWeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerAddWeight::MergeFrom(const PlayerAddWeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  weight_.MergeFrom(from.weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerAddWeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAddWeight::CopyFrom(const PlayerAddWeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAddWeight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerAddWeight::Swap(PlayerAddWeight* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    weight_.Swap(&other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerAddWeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerAddWeight_descriptor_;
  metadata.reflection = PlayerAddWeight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvpAddWeight::kFailCntFieldNumber;
const int PvpAddWeight::kWeightFieldNumber;
#endif  // !_MSC_VER

PvpAddWeight::PvpAddWeight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvpAddWeight::InitAsDefaultInstance() {
}

PvpAddWeight::PvpAddWeight(const PvpAddWeight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvpAddWeight::SharedCtor() {
  _cached_size_ = 0;
  failcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvpAddWeight::~PvpAddWeight() {
  SharedDtor();
}

void PvpAddWeight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvpAddWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvpAddWeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvpAddWeight_descriptor_;
}

const PvpAddWeight& PvpAddWeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AddWeight_2eproto();  return *default_instance_;
}

PvpAddWeight* PvpAddWeight::default_instance_ = NULL;

PvpAddWeight* PvpAddWeight::New() const {
  return new PvpAddWeight;
}

void PvpAddWeight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    failcnt_ = 0u;
  }
  weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvpAddWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 failCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failcnt_)));
          set_has_failcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }
      
      // repeated uint32 weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvpAddWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 failCnt = 1;
  if (has_failcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->failcnt(), output);
  }
  
  // repeated uint32 weight = 2;
  for (int i = 0; i < this->weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->weight(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvpAddWeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 failCnt = 1;
  if (has_failcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->failcnt(), target);
  }
  
  // repeated uint32 weight = 2;
  for (int i = 0; i < this->weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->weight(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvpAddWeight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 failCnt = 1;
    if (has_failcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failcnt());
    }
    
  }
  // repeated uint32 weight = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->weight_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->weight(i));
    }
    total_size += 1 * this->weight_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvpAddWeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvpAddWeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvpAddWeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvpAddWeight::MergeFrom(const PvpAddWeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  weight_.MergeFrom(from.weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_failcnt()) {
      set_failcnt(from.failcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvpAddWeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvpAddWeight::CopyFrom(const PvpAddWeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpAddWeight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PvpAddWeight::Swap(PvpAddWeight* other) {
  if (other != this) {
    std::swap(failcnt_, other->failcnt_);
    weight_.Swap(&other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvpAddWeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvpAddWeight_descriptor_;
  metadata.reflection = PvpAddWeight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipAddWeight::kLevelFieldNumber;
const int VipAddWeight::kWeightFieldNumber;
#endif  // !_MSC_VER

VipAddWeight::VipAddWeight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipAddWeight::InitAsDefaultInstance() {
}

VipAddWeight::VipAddWeight(const VipAddWeight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipAddWeight::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipAddWeight::~VipAddWeight() {
  SharedDtor();
}

void VipAddWeight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipAddWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipAddWeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipAddWeight_descriptor_;
}

const VipAddWeight& VipAddWeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AddWeight_2eproto();  return *default_instance_;
}

VipAddWeight* VipAddWeight::default_instance_ = NULL;

VipAddWeight* VipAddWeight::New() const {
  return new VipAddWeight;
}

void VipAddWeight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  weight_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipAddWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }
      
      // repeated uint32 weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipAddWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // repeated uint32 weight = 2;
  for (int i = 0; i < this->weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->weight(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipAddWeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // repeated uint32 weight = 2;
  for (int i = 0; i < this->weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->weight(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipAddWeight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  // repeated uint32 weight = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->weight_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->weight(i));
    }
    total_size += 1 * this->weight_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipAddWeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipAddWeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipAddWeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipAddWeight::MergeFrom(const VipAddWeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  weight_.MergeFrom(from.weight_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipAddWeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipAddWeight::CopyFrom(const VipAddWeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipAddWeight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void VipAddWeight::Swap(VipAddWeight* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    weight_.Swap(&other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipAddWeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipAddWeight_descriptor_;
  metadata.reflection = VipAddWeight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddWeightList::kPlayerFieldNumber;
const int AddWeightList::kPvpFieldNumber;
const int AddWeightList::kVipFieldNumber;
#endif  // !_MSC_VER

AddWeightList::AddWeightList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddWeightList::InitAsDefaultInstance() {
}

AddWeightList::AddWeightList(const AddWeightList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddWeightList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddWeightList::~AddWeightList() {
  SharedDtor();
}

void AddWeightList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddWeightList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddWeightList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddWeightList_descriptor_;
}

const AddWeightList& AddWeightList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AddWeight_2eproto();  return *default_instance_;
}

AddWeightList* AddWeightList::default_instance_ = NULL;

AddWeightList* AddWeightList::New() const {
  return new AddWeightList;
}

void AddWeightList::Clear() {
  player_.Clear();
  pvp_.Clear();
  vip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddWeightList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AddWeight.PlayerAddWeight player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player;
        if (input->ExpectTag(18)) goto parse_pvp;
        break;
      }
      
      // repeated .AddWeight.PvpAddWeight pvp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pvp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pvp;
        if (input->ExpectTag(26)) goto parse_vip;
        break;
      }
      
      // repeated .AddWeight.VipAddWeight vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vip;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddWeightList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AddWeight.PlayerAddWeight player = 1;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player(i), output);
  }
  
  // repeated .AddWeight.PvpAddWeight pvp = 2;
  for (int i = 0; i < this->pvp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pvp(i), output);
  }
  
  // repeated .AddWeight.VipAddWeight vip = 3;
  for (int i = 0; i < this->vip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vip(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddWeightList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AddWeight.PlayerAddWeight player = 1;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player(i), target);
  }
  
  // repeated .AddWeight.PvpAddWeight pvp = 2;
  for (int i = 0; i < this->pvp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pvp(i), target);
  }
  
  // repeated .AddWeight.VipAddWeight vip = 3;
  for (int i = 0; i < this->vip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vip(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddWeightList::ByteSize() const {
  int total_size = 0;
  
  // repeated .AddWeight.PlayerAddWeight player = 1;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }
  
  // repeated .AddWeight.PvpAddWeight pvp = 2;
  total_size += 1 * this->pvp_size();
  for (int i = 0; i < this->pvp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pvp(i));
  }
  
  // repeated .AddWeight.VipAddWeight vip = 3;
  total_size += 1 * this->vip_size();
  for (int i = 0; i < this->vip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vip(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddWeightList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddWeightList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddWeightList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddWeightList::MergeFrom(const AddWeightList& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  pvp_.MergeFrom(from.pvp_);
  vip_.MergeFrom(from.vip_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddWeightList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddWeightList::CopyFrom(const AddWeightList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddWeightList::IsInitialized() const {
  
  for (int i = 0; i < player_size(); i++) {
    if (!this->player(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pvp_size(); i++) {
    if (!this->pvp(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vip_size(); i++) {
    if (!this->vip(i).IsInitialized()) return false;
  }
  return true;
}

void AddWeightList::Swap(AddWeightList* other) {
  if (other != this) {
    player_.Swap(&other->player_);
    pvp_.Swap(&other->pvp_);
    vip_.Swap(&other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddWeightList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddWeightList_descriptor_;
  metadata.reflection = AddWeightList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddWeightInfo::kAddWeightFieldNumber;
#endif  // !_MSC_VER

AddWeightInfo::AddWeightInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddWeightInfo::InitAsDefaultInstance() {
  addweight_ = const_cast< ::AddWeight::AddWeightList*>(&::AddWeight::AddWeightList::default_instance());
}

AddWeightInfo::AddWeightInfo(const AddWeightInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddWeightInfo::SharedCtor() {
  _cached_size_ = 0;
  addweight_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddWeightInfo::~AddWeightInfo() {
  SharedDtor();
}

void AddWeightInfo::SharedDtor() {
  if (this != default_instance_) {
    delete addweight_;
  }
}

void AddWeightInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddWeightInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddWeightInfo_descriptor_;
}

const AddWeightInfo& AddWeightInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AddWeight_2eproto();  return *default_instance_;
}

AddWeightInfo* AddWeightInfo::default_instance_ = NULL;

AddWeightInfo* AddWeightInfo::New() const {
  return new AddWeightInfo;
}

void AddWeightInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addweight()) {
      if (addweight_ != NULL) addweight_->::AddWeight::AddWeightList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddWeightInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AddWeight.AddWeightList addWeight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addweight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddWeightInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AddWeight.AddWeightList addWeight = 1;
  if (has_addweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addweight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddWeightInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AddWeight.AddWeightList addWeight = 1;
  if (has_addweight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addweight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddWeightInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AddWeight.AddWeightList addWeight = 1;
    if (has_addweight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addweight());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddWeightInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddWeightInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddWeightInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddWeightInfo::MergeFrom(const AddWeightInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addweight()) {
      mutable_addweight()->::AddWeight::AddWeightList::MergeFrom(from.addweight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddWeightInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddWeightInfo::CopyFrom(const AddWeightInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddWeightInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_addweight()) {
    if (!this->addweight().IsInitialized()) return false;
  }
  return true;
}

void AddWeightInfo::Swap(AddWeightInfo* other) {
  if (other != this) {
    std::swap(addweight_, other->addweight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddWeightInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddWeightInfo_descriptor_;
  metadata.reflection = AddWeightInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AddWeight

// @@protoc_insertion_point(global_scope)
