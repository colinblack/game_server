// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FriendConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FriendConfig {

namespace {

const ::google::protobuf::Descriptor* LevelReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FriendConfig_2eproto() {
  protobuf_AddDesc_FriendConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FriendConfig.proto");
  GOOGLE_CHECK(file != NULL);
  LevelReward_descriptor_ = file->message_type(0);
  static const int LevelReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelReward, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelReward, heroexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelReward, reward_),
  };
  LevelReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelReward_descriptor_,
      LevelReward::default_instance_,
      LevelReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelReward));
  FriendInfo_descriptor_ = file->message_type(1);
  static const int FriendInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, rewards_),
  };
  FriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::default_instance_,
      FriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FriendConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelReward_descriptor_, &LevelReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfo_descriptor_, &FriendInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FriendConfig_2eproto() {
  delete LevelReward::default_instance_;
  delete LevelReward_reflection_;
  delete FriendInfo::default_instance_;
  delete FriendInfo_reflection_;
}

void protobuf_AddDesc_FriendConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022FriendConfig.proto\022\014FriendConfig\032\026Comm"
    "onGiftConfig.proto\"a\n\013LevelReward\022\r\n\005lev"
    "el\030\001 \002(\r\022\017\n\007heroExp\030\002 \002(\r\0222\n\006reward\030\003 \002("
    "\0132\".CommonGiftConfig.CommonModifyItem\"8\n"
    "\nFriendInfo\022*\n\007rewards\030\001 \003(\0132\031.FriendCon"
    "fig.LevelReward", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FriendConfig.proto", &protobuf_RegisterTypes);
  LevelReward::default_instance_ = new LevelReward();
  FriendInfo::default_instance_ = new FriendInfo();
  LevelReward::default_instance_->InitAsDefaultInstance();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FriendConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FriendConfig_2eproto {
  StaticDescriptorInitializer_FriendConfig_2eproto() {
    protobuf_AddDesc_FriendConfig_2eproto();
  }
} static_descriptor_initializer_FriendConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LevelReward::kLevelFieldNumber;
const int LevelReward::kHeroExpFieldNumber;
const int LevelReward::kRewardFieldNumber;
#endif  // !_MSC_VER

LevelReward::LevelReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelReward::InitAsDefaultInstance() {
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

LevelReward::LevelReward(const LevelReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelReward::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  heroexp_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelReward::~LevelReward() {
  SharedDtor();
}

void LevelReward::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void LevelReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelReward_descriptor_;
}

const LevelReward& LevelReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendConfig_2eproto();  return *default_instance_;
}

LevelReward* LevelReward::default_instance_ = NULL;

LevelReward* LevelReward::New() const {
  return new LevelReward;
}

void LevelReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    heroexp_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroExp;
        break;
      }
      
      // required uint32 heroExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroexp_)));
          set_has_heroexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }
      
      // required .CommonGiftConfig.CommonModifyItem reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // required uint32 heroExp = 2;
  if (has_heroexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroexp(), output);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // required uint32 heroExp = 2;
  if (has_heroexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroexp(), target);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required uint32 heroExp = 2;
    if (has_heroexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroexp());
    }
    
    // required .CommonGiftConfig.CommonModifyItem reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelReward::MergeFrom(const LevelReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_heroexp()) {
      set_heroexp(from.heroexp());
    }
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelReward::CopyFrom(const LevelReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void LevelReward::Swap(LevelReward* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(heroexp_, other->heroexp_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelReward_descriptor_;
  metadata.reflection = LevelReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

FriendInfo::FriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfo::InitAsDefaultInstance() {
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfo::~FriendInfo() {
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FriendConfig_2eproto();  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New() const {
  return new FriendInfo;
}

void FriendInfo::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendConfig.LevelReward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FriendConfig.LevelReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FriendConfig.LevelReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .FriendConfig.LevelReward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  
  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FriendConfig

// @@protoc_insertion_point(global_scope)
