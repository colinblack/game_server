// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ActivityConfig {

namespace {

const ::google::protobuf::Descriptor* InviteFriendReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteFriendReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccumulateReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccumulateReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckyDrawItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckyDrawItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckyDrawReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckyDrawReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityConfig_2eproto() {
  protobuf_AddDesc_ActivityConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityConfig.proto");
  GOOGLE_CHECK(file != NULL);
  InviteFriendReward_descriptor_ = file->message_type(0);
  static const int InviteFriendReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendReward, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendReward, rewards_),
  };
  InviteFriendReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteFriendReward_descriptor_,
      InviteFriendReward::default_instance_,
      InviteFriendReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteFriendReward));
  AccumulateReward_descriptor_ = file->message_type(1);
  static const int AccumulateReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateReward, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateReward, rewards_),
  };
  AccumulateReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccumulateReward_descriptor_,
      AccumulateReward::default_instance_,
      AccumulateReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccumulateReward));
  LuckyDrawItem_descriptor_ = file->message_type(2);
  static const int LuckyDrawItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawItem, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawItem, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawItem, freeweight_),
  };
  LuckyDrawItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckyDrawItem_descriptor_,
      LuckyDrawItem::default_instance_,
      LuckyDrawItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckyDrawItem));
  LuckyDrawReward_descriptor_ = file->message_type(3);
  static const int LuckyDrawReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawReward, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawReward, items_),
  };
  LuckyDrawReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckyDrawReward_descriptor_,
      LuckyDrawReward::default_instance_,
      LuckyDrawReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyDrawReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckyDrawReward));
  Activity_descriptor_ = file->message_type(4);
  static const int Activity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, inviterewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, accrewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, luckyrewardcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, luckyreward_),
  };
  Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_descriptor_,
      Activity::default_instance_,
      Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteFriendReward_descriptor_, &InviteFriendReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccumulateReward_descriptor_, &AccumulateReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckyDrawItem_descriptor_, &LuckyDrawItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckyDrawReward_descriptor_, &LuckyDrawReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_descriptor_, &Activity::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityConfig_2eproto() {
  delete InviteFriendReward::default_instance_;
  delete InviteFriendReward_reflection_;
  delete AccumulateReward::default_instance_;
  delete AccumulateReward_reflection_;
  delete LuckyDrawItem::default_instance_;
  delete LuckyDrawItem_reflection_;
  delete LuckyDrawReward::default_instance_;
  delete LuckyDrawReward_reflection_;
  delete Activity::default_instance_;
  delete Activity_reflection_;
}

void protobuf_AddDesc_ActivityConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ActivityConfig.proto\022\016ActivityConfig\032\026"
    "CommonGiftConfig.proto\"V\n\022InviteFriendRe"
    "ward\022\013\n\003seq\030\001 \002(\r\0223\n\007rewards\030\002 \002(\0132\".Com"
    "monGiftConfig.CommonModifyItem\"T\n\020Accumu"
    "lateReward\022\013\n\003num\030\001 \002(\r\0223\n\007rewards\030\002 \002(\013"
    "2\".CommonGiftConfig.CommonModifyItem\"h\n\r"
    "LuckyDrawItem\0223\n\007rewards\030\001 \002(\0132\".CommonG"
    "iftConfig.CommonModifyItem\022\016\n\006weight\030\002 \002"
    "(\r\022\022\n\nfreeWeight\030\003 \002(\r\"Z\n\017LuckyDrawRewar"
    "d\022\n\n\002id\030\001 \002(\r\022\r\n\005range\030\002 \002(\r\022,\n\005items\030\003 "
    "\003(\0132\035.ActivityConfig.LuckyDrawItem\"\312\001\n\010A"
    "ctivity\0229\n\rinviteRewards\030\001 \003(\0132\".Activit"
    "yConfig.InviteFriendReward\0224\n\naccRewards"
    "\030\002 \003(\0132 .ActivityConfig.AccumulateReward"
    "\022\027\n\017luckyRewardCost\030\003 \002(\r\0224\n\013luckyReward"
    "\030\004 \003(\0132\037.ActivityConfig.LuckyDrawReward", 639);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityConfig.proto", &protobuf_RegisterTypes);
  InviteFriendReward::default_instance_ = new InviteFriendReward();
  AccumulateReward::default_instance_ = new AccumulateReward();
  LuckyDrawItem::default_instance_ = new LuckyDrawItem();
  LuckyDrawReward::default_instance_ = new LuckyDrawReward();
  Activity::default_instance_ = new Activity();
  InviteFriendReward::default_instance_->InitAsDefaultInstance();
  AccumulateReward::default_instance_->InitAsDefaultInstance();
  LuckyDrawItem::default_instance_->InitAsDefaultInstance();
  LuckyDrawReward::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityConfig_2eproto {
  StaticDescriptorInitializer_ActivityConfig_2eproto() {
    protobuf_AddDesc_ActivityConfig_2eproto();
  }
} static_descriptor_initializer_ActivityConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int InviteFriendReward::kSeqFieldNumber;
const int InviteFriendReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

InviteFriendReward::InviteFriendReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteFriendReward::InitAsDefaultInstance() {
  rewards_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

InviteFriendReward::InviteFriendReward(const InviteFriendReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteFriendReward::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0u;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteFriendReward::~InviteFriendReward() {
  SharedDtor();
}

void InviteFriendReward::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void InviteFriendReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteFriendReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteFriendReward_descriptor_;
}

const InviteFriendReward& InviteFriendReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();  return *default_instance_;
}

InviteFriendReward* InviteFriendReward::default_instance_ = NULL;

InviteFriendReward* InviteFriendReward::New() const {
  return new InviteFriendReward;
}

void InviteFriendReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteFriendReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }
      
      // required .CommonGiftConfig.CommonModifyItem rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteFriendReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }
  
  // required .CommonGiftConfig.CommonModifyItem rewards = 2;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteFriendReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }
  
  // required .CommonGiftConfig.CommonModifyItem rewards = 2;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteFriendReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
    // required .CommonGiftConfig.CommonModifyItem rewards = 2;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteFriendReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteFriendReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteFriendReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteFriendReward::MergeFrom(const InviteFriendReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteFriendReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteFriendReward::CopyFrom(const InviteFriendReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteFriendReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void InviteFriendReward::Swap(InviteFriendReward* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteFriendReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteFriendReward_descriptor_;
  metadata.reflection = InviteFriendReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccumulateReward::kNumFieldNumber;
const int AccumulateReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

AccumulateReward::AccumulateReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccumulateReward::InitAsDefaultInstance() {
  rewards_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

AccumulateReward::AccumulateReward(const AccumulateReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccumulateReward::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccumulateReward::~AccumulateReward() {
  SharedDtor();
}

void AccumulateReward::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void AccumulateReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccumulateReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccumulateReward_descriptor_;
}

const AccumulateReward& AccumulateReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();  return *default_instance_;
}

AccumulateReward* AccumulateReward::default_instance_ = NULL;

AccumulateReward* AccumulateReward::New() const {
  return new AccumulateReward;
}

void AccumulateReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccumulateReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }
      
      // required .CommonGiftConfig.CommonModifyItem rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccumulateReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }
  
  // required .CommonGiftConfig.CommonModifyItem rewards = 2;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccumulateReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }
  
  // required .CommonGiftConfig.CommonModifyItem rewards = 2;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccumulateReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }
    
    // required .CommonGiftConfig.CommonModifyItem rewards = 2;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccumulateReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccumulateReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccumulateReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccumulateReward::MergeFrom(const AccumulateReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccumulateReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccumulateReward::CopyFrom(const AccumulateReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccumulateReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void AccumulateReward::Swap(AccumulateReward* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccumulateReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccumulateReward_descriptor_;
  metadata.reflection = AccumulateReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckyDrawItem::kRewardsFieldNumber;
const int LuckyDrawItem::kWeightFieldNumber;
const int LuckyDrawItem::kFreeWeightFieldNumber;
#endif  // !_MSC_VER

LuckyDrawItem::LuckyDrawItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuckyDrawItem::InitAsDefaultInstance() {
  rewards_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

LuckyDrawItem::LuckyDrawItem(const LuckyDrawItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuckyDrawItem::SharedCtor() {
  _cached_size_ = 0;
  rewards_ = NULL;
  weight_ = 0u;
  freeweight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckyDrawItem::~LuckyDrawItem() {
  SharedDtor();
}

void LuckyDrawItem::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void LuckyDrawItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckyDrawItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckyDrawItem_descriptor_;
}

const LuckyDrawItem& LuckyDrawItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();  return *default_instance_;
}

LuckyDrawItem* LuckyDrawItem::default_instance_ = NULL;

LuckyDrawItem* LuckyDrawItem::New() const {
  return new LuckyDrawItem;
}

void LuckyDrawItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
    weight_ = 0u;
    freeweight_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckyDrawItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommonGiftConfig.CommonModifyItem rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }
      
      // required uint32 weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freeWeight;
        break;
      }
      
      // required uint32 freeWeight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freeweight_)));
          set_has_freeweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LuckyDrawItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CommonGiftConfig.CommonModifyItem rewards = 1;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(), output);
  }
  
  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }
  
  // required uint32 freeWeight = 3;
  if (has_freeweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->freeweight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuckyDrawItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CommonGiftConfig.CommonModifyItem rewards = 1;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(), target);
  }
  
  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }
  
  // required uint32 freeWeight = 3;
  if (has_freeweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->freeweight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuckyDrawItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CommonGiftConfig.CommonModifyItem rewards = 1;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }
    
    // required uint32 freeWeight = 3;
    if (has_freeweight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freeweight());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckyDrawItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckyDrawItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckyDrawItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckyDrawItem::MergeFrom(const LuckyDrawItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewards()) {
      mutable_rewards()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.rewards());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_freeweight()) {
      set_freeweight(from.freeweight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckyDrawItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyDrawItem::CopyFrom(const LuckyDrawItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyDrawItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void LuckyDrawItem::Swap(LuckyDrawItem* other) {
  if (other != this) {
    std::swap(rewards_, other->rewards_);
    std::swap(weight_, other->weight_);
    std::swap(freeweight_, other->freeweight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckyDrawItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckyDrawItem_descriptor_;
  metadata.reflection = LuckyDrawItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckyDrawReward::kIdFieldNumber;
const int LuckyDrawReward::kRangeFieldNumber;
const int LuckyDrawReward::kItemsFieldNumber;
#endif  // !_MSC_VER

LuckyDrawReward::LuckyDrawReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuckyDrawReward::InitAsDefaultInstance() {
}

LuckyDrawReward::LuckyDrawReward(const LuckyDrawReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuckyDrawReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  range_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckyDrawReward::~LuckyDrawReward() {
  SharedDtor();
}

void LuckyDrawReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuckyDrawReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckyDrawReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckyDrawReward_descriptor_;
}

const LuckyDrawReward& LuckyDrawReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();  return *default_instance_;
}

LuckyDrawReward* LuckyDrawReward::default_instance_ = NULL;

LuckyDrawReward* LuckyDrawReward::New() const {
  return new LuckyDrawReward;
}

void LuckyDrawReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    range_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckyDrawReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_range;
        break;
      }
      
      // required uint32 range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .ActivityConfig.LuckyDrawItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LuckyDrawReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range(), output);
  }
  
  // repeated .ActivityConfig.LuckyDrawItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuckyDrawReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range(), target);
  }
  
  // repeated .ActivityConfig.LuckyDrawItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuckyDrawReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range());
    }
    
  }
  // repeated .ActivityConfig.LuckyDrawItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckyDrawReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckyDrawReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckyDrawReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckyDrawReward::MergeFrom(const LuckyDrawReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckyDrawReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyDrawReward::CopyFrom(const LuckyDrawReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyDrawReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void LuckyDrawReward::Swap(LuckyDrawReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(range_, other->range_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckyDrawReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckyDrawReward_descriptor_;
  metadata.reflection = LuckyDrawReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kInviteRewardsFieldNumber;
const int Activity::kAccRewardsFieldNumber;
const int Activity::kLuckyRewardCostFieldNumber;
const int Activity::kLuckyRewardFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity::InitAsDefaultInstance() {
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  luckyrewardcost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  SharedDtor();
}

void Activity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_descriptor_;
}

const Activity& Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    luckyrewardcost_ = 0u;
  }
  inviterewards_.Clear();
  accrewards_.Clear();
  luckyreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityConfig.InviteFriendReward inviteRewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviteRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inviterewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_inviteRewards;
        if (input->ExpectTag(18)) goto parse_accRewards;
        break;
      }
      
      // repeated .ActivityConfig.AccumulateReward accRewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accrewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accRewards;
        if (input->ExpectTag(24)) goto parse_luckyRewardCost;
        break;
      }
      
      // required uint32 luckyRewardCost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckyRewardCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &luckyrewardcost_)));
          set_has_luckyrewardcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_luckyReward;
        break;
      }
      
      // repeated .ActivityConfig.LuckyDrawReward luckyReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_luckyReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_luckyreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_luckyReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ActivityConfig.InviteFriendReward inviteRewards = 1;
  for (int i = 0; i < this->inviterewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inviterewards(i), output);
  }
  
  // repeated .ActivityConfig.AccumulateReward accRewards = 2;
  for (int i = 0; i < this->accrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->accrewards(i), output);
  }
  
  // required uint32 luckyRewardCost = 3;
  if (has_luckyrewardcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->luckyrewardcost(), output);
  }
  
  // repeated .ActivityConfig.LuckyDrawReward luckyReward = 4;
  for (int i = 0; i < this->luckyreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->luckyreward(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ActivityConfig.InviteFriendReward inviteRewards = 1;
  for (int i = 0; i < this->inviterewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->inviterewards(i), target);
  }
  
  // repeated .ActivityConfig.AccumulateReward accRewards = 2;
  for (int i = 0; i < this->accrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->accrewards(i), target);
  }
  
  // required uint32 luckyRewardCost = 3;
  if (has_luckyrewardcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->luckyrewardcost(), target);
  }
  
  // repeated .ActivityConfig.LuckyDrawReward luckyReward = 4;
  for (int i = 0; i < this->luckyreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->luckyreward(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 luckyRewardCost = 3;
    if (has_luckyrewardcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->luckyrewardcost());
    }
    
  }
  // repeated .ActivityConfig.InviteFriendReward inviteRewards = 1;
  total_size += 1 * this->inviterewards_size();
  for (int i = 0; i < this->inviterewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inviterewards(i));
  }
  
  // repeated .ActivityConfig.AccumulateReward accRewards = 2;
  total_size += 1 * this->accrewards_size();
  for (int i = 0; i < this->accrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accrewards(i));
  }
  
  // repeated .ActivityConfig.LuckyDrawReward luckyReward = 4;
  total_size += 1 * this->luckyreward_size();
  for (int i = 0; i < this->luckyreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->luckyreward(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  inviterewards_.MergeFrom(from.inviterewards_);
  accrewards_.MergeFrom(from.accrewards_);
  luckyreward_.MergeFrom(from.luckyreward_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_luckyrewardcost()) {
      set_luckyrewardcost(from.luckyrewardcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < inviterewards_size(); i++) {
    if (!this->inviterewards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < accrewards_size(); i++) {
    if (!this->accrewards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < luckyreward_size(); i++) {
    if (!this->luckyreward(i).IsInitialized()) return false;
  }
  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    inviterewards_.Swap(&other->inviterewards_);
    accrewards_.Swap(&other->accrewards_);
    std::swap(luckyrewardcost_, other->luckyrewardcost_);
    luckyreward_.Swap(&other->luckyreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_descriptor_;
  metadata.reflection = Activity_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActivityConfig

// @@protoc_insertion_point(global_scope)
