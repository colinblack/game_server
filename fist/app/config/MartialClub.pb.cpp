// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MartialClub.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MartialClub {

namespace {

const ::google::protobuf::Descriptor* MartialClubReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MartialClubReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MartialClubInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MartialClubInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MartialClubCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MartialClubCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MartialClub_2eproto() {
  protobuf_AddDesc_MartialClub_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MartialClub.proto");
  GOOGLE_CHECK(file != NULL);
  MartialClubReward_descriptor_ = file->message_type(0);
  static const int MartialClubReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubReward, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubReward, propsts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubReward, levelupts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubReward, reward_),
  };
  MartialClubReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MartialClubReward_descriptor_,
      MartialClubReward::default_instance_,
      MartialClubReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MartialClubReward));
  MartialClubInfo_descriptor_ = file->message_type(1);
  static const int MartialClubInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubInfo, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubInfo, unlocklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubInfo, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubInfo, rewards_),
  };
  MartialClubInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MartialClubInfo_descriptor_,
      MartialClubInfo::default_instance_,
      MartialClubInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MartialClubInfo));
  MartialClubCfg_descriptor_ = file->message_type(2);
  static const int MartialClubCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubCfg, club_),
  };
  MartialClubCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MartialClubCfg_descriptor_,
      MartialClubCfg::default_instance_,
      MartialClubCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MartialClubCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MartialClub_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MartialClubReward_descriptor_, &MartialClubReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MartialClubInfo_descriptor_, &MartialClubInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MartialClubCfg_descriptor_, &MartialClubCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MartialClub_2eproto() {
  delete MartialClubReward::default_instance_;
  delete MartialClubReward_reflection_;
  delete MartialClubInfo::default_instance_;
  delete MartialClubInfo_reflection_;
  delete MartialClubCfg::default_instance_;
  delete MartialClubCfg_reflection_;
}

void protobuf_AddDesc_MartialClub_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MartialClub.proto\022\013MartialClub\032\026Common"
    "GiftConfig.proto\"z\n\021MartialClubReward\022\r\n"
    "\005level\030\001 \002(\r\022\017\n\007propsTs\030\002 \001(\r\022\021\n\tlevelUp"
    "Ts\030\003 \002(\r\0222\n\006reward\030\004 \002(\0132\".CommonGiftCon"
    "fig.CommonModifyItem\"\212\001\n\017MartialClubInfo"
    "\022\r\n\005grade\030\001 \002(\r\022\020\n\010capacity\030\002 \002(\r\022\023\n\013unl"
    "ockLevel\030\003 \002(\r\022\020\n\010multiple\030\004 \002(\r\022/\n\007rewa"
    "rds\030\005 \003(\0132\036.MartialClub.MartialClubRewar"
    "d\"<\n\016MartialClubCfg\022*\n\004club\030\001 \003(\0132\034.Mart"
    "ialClub.MartialClubInfo", 383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MartialClub.proto", &protobuf_RegisterTypes);
  MartialClubReward::default_instance_ = new MartialClubReward();
  MartialClubInfo::default_instance_ = new MartialClubInfo();
  MartialClubCfg::default_instance_ = new MartialClubCfg();
  MartialClubReward::default_instance_->InitAsDefaultInstance();
  MartialClubInfo::default_instance_->InitAsDefaultInstance();
  MartialClubCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MartialClub_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MartialClub_2eproto {
  StaticDescriptorInitializer_MartialClub_2eproto() {
    protobuf_AddDesc_MartialClub_2eproto();
  }
} static_descriptor_initializer_MartialClub_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MartialClubReward::kLevelFieldNumber;
const int MartialClubReward::kPropsTsFieldNumber;
const int MartialClubReward::kLevelUpTsFieldNumber;
const int MartialClubReward::kRewardFieldNumber;
#endif  // !_MSC_VER

MartialClubReward::MartialClubReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MartialClubReward::InitAsDefaultInstance() {
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

MartialClubReward::MartialClubReward(const MartialClubReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MartialClubReward::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  propsts_ = 0u;
  levelupts_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MartialClubReward::~MartialClubReward() {
  SharedDtor();
}

void MartialClubReward::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void MartialClubReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MartialClubReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MartialClubReward_descriptor_;
}

const MartialClubReward& MartialClubReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MartialClub_2eproto();  return *default_instance_;
}

MartialClubReward* MartialClubReward::default_instance_ = NULL;

MartialClubReward* MartialClubReward::New() const {
  return new MartialClubReward;
}

void MartialClubReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    propsts_ = 0u;
    levelupts_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MartialClubReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propsTs;
        break;
      }
      
      // optional uint32 propsTs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propsTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsts_)));
          set_has_propsts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_levelUpTs;
        break;
      }
      
      // required uint32 levelUpTs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelUpTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelupts_)));
          set_has_levelupts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }
      
      // required .CommonGiftConfig.CommonModifyItem reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MartialClubReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // optional uint32 propsTs = 2;
  if (has_propsts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propsts(), output);
  }
  
  // required uint32 levelUpTs = 3;
  if (has_levelupts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->levelupts(), output);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MartialClubReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // optional uint32 propsTs = 2;
  if (has_propsts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propsts(), target);
  }
  
  // required uint32 levelUpTs = 3;
  if (has_levelupts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->levelupts(), target);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MartialClubReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 propsTs = 2;
    if (has_propsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsts());
    }
    
    // required uint32 levelUpTs = 3;
    if (has_levelupts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelupts());
    }
    
    // required .CommonGiftConfig.CommonModifyItem reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MartialClubReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MartialClubReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MartialClubReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MartialClubReward::MergeFrom(const MartialClubReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_propsts()) {
      set_propsts(from.propsts());
    }
    if (from.has_levelupts()) {
      set_levelupts(from.levelupts());
    }
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MartialClubReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MartialClubReward::CopyFrom(const MartialClubReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MartialClubReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MartialClubReward::Swap(MartialClubReward* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(propsts_, other->propsts_);
    std::swap(levelupts_, other->levelupts_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MartialClubReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MartialClubReward_descriptor_;
  metadata.reflection = MartialClubReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MartialClubInfo::kGradeFieldNumber;
const int MartialClubInfo::kCapacityFieldNumber;
const int MartialClubInfo::kUnlockLevelFieldNumber;
const int MartialClubInfo::kMultipleFieldNumber;
const int MartialClubInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

MartialClubInfo::MartialClubInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MartialClubInfo::InitAsDefaultInstance() {
}

MartialClubInfo::MartialClubInfo(const MartialClubInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MartialClubInfo::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0u;
  capacity_ = 0u;
  unlocklevel_ = 0u;
  multiple_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MartialClubInfo::~MartialClubInfo() {
  SharedDtor();
}

void MartialClubInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MartialClubInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MartialClubInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MartialClubInfo_descriptor_;
}

const MartialClubInfo& MartialClubInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MartialClub_2eproto();  return *default_instance_;
}

MartialClubInfo* MartialClubInfo::default_instance_ = NULL;

MartialClubInfo* MartialClubInfo::New() const {
  return new MartialClubInfo;
}

void MartialClubInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0u;
    capacity_ = 0u;
    unlocklevel_ = 0u;
    multiple_ = 0u;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MartialClubInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_capacity;
        break;
      }
      
      // required uint32 capacity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlockLevel;
        break;
      }
      
      // required uint32 unlockLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_multiple;
        break;
      }
      
      // required uint32 multiple = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewards;
        break;
      }
      
      // repeated .MartialClub.MartialClubReward rewards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MartialClubInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grade(), output);
  }
  
  // required uint32 capacity = 2;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->capacity(), output);
  }
  
  // required uint32 unlockLevel = 3;
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unlocklevel(), output);
  }
  
  // required uint32 multiple = 4;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->multiple(), output);
  }
  
  // repeated .MartialClub.MartialClubReward rewards = 5;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MartialClubInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grade(), target);
  }
  
  // required uint32 capacity = 2;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->capacity(), target);
  }
  
  // required uint32 unlockLevel = 3;
  if (has_unlocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unlocklevel(), target);
  }
  
  // required uint32 multiple = 4;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->multiple(), target);
  }
  
  // repeated .MartialClub.MartialClubReward rewards = 5;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MartialClubInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }
    
    // required uint32 capacity = 2;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capacity());
    }
    
    // required uint32 unlockLevel = 3;
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlocklevel());
    }
    
    // required uint32 multiple = 4;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }
    
  }
  // repeated .MartialClub.MartialClubReward rewards = 5;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MartialClubInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MartialClubInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MartialClubInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MartialClubInfo::MergeFrom(const MartialClubInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MartialClubInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MartialClubInfo::CopyFrom(const MartialClubInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MartialClubInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < rewards_size(); i++) {
    if (!this->rewards(i).IsInitialized()) return false;
  }
  return true;
}

void MartialClubInfo::Swap(MartialClubInfo* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(capacity_, other->capacity_);
    std::swap(unlocklevel_, other->unlocklevel_);
    std::swap(multiple_, other->multiple_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MartialClubInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MartialClubInfo_descriptor_;
  metadata.reflection = MartialClubInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MartialClubCfg::kClubFieldNumber;
#endif  // !_MSC_VER

MartialClubCfg::MartialClubCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MartialClubCfg::InitAsDefaultInstance() {
}

MartialClubCfg::MartialClubCfg(const MartialClubCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MartialClubCfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MartialClubCfg::~MartialClubCfg() {
  SharedDtor();
}

void MartialClubCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MartialClubCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MartialClubCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MartialClubCfg_descriptor_;
}

const MartialClubCfg& MartialClubCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MartialClub_2eproto();  return *default_instance_;
}

MartialClubCfg* MartialClubCfg::default_instance_ = NULL;

MartialClubCfg* MartialClubCfg::New() const {
  return new MartialClubCfg;
}

void MartialClubCfg::Clear() {
  club_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MartialClubCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MartialClub.MartialClubInfo club = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_club:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_club()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_club;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MartialClubCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MartialClub.MartialClubInfo club = 1;
  for (int i = 0; i < this->club_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->club(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MartialClubCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MartialClub.MartialClubInfo club = 1;
  for (int i = 0; i < this->club_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->club(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MartialClubCfg::ByteSize() const {
  int total_size = 0;
  
  // repeated .MartialClub.MartialClubInfo club = 1;
  total_size += 1 * this->club_size();
  for (int i = 0; i < this->club_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->club(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MartialClubCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MartialClubCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MartialClubCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MartialClubCfg::MergeFrom(const MartialClubCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  club_.MergeFrom(from.club_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MartialClubCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MartialClubCfg::CopyFrom(const MartialClubCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MartialClubCfg::IsInitialized() const {
  
  for (int i = 0; i < club_size(); i++) {
    if (!this->club(i).IsInitialized()) return false;
  }
  return true;
}

void MartialClubCfg::Swap(MartialClubCfg* other) {
  if (other != this) {
    club_.Swap(&other->club_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MartialClubCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MartialClubCfg_descriptor_;
  metadata.reflection = MartialClubCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MartialClub

// @@protoc_insertion_point(global_scope)
