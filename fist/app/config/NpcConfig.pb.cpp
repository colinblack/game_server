// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NpcConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NpcConfig {

namespace {

const ::google::protobuf::Descriptor* NpcLevelAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcLevelAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Npc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Npc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NpcConfig_2eproto() {
  protobuf_AddDesc_NpcConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NpcConfig.proto");
  GOOGLE_CHECK(file != NULL);
  NpcLevelAttribute_descriptor_ = file->message_type(0);
  static const int NpcLevelAttribute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcLevelAttribute, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcLevelAttribute, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcLevelAttribute, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcLevelAttribute, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcLevelAttribute, first_),
  };
  NpcLevelAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcLevelAttribute_descriptor_,
      NpcLevelAttribute::default_instance_,
      NpcLevelAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcLevelAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcLevelAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcLevelAttribute));
  NpcAttribute_descriptor_ = file->message_type(1);
  static const int NpcAttribute_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcAttribute, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcAttribute, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcAttribute, critstrike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcAttribute, critrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcAttribute, critresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcAttribute, levelattr_),
  };
  NpcAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcAttribute_descriptor_,
      NpcAttribute::default_instance_,
      NpcAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcAttribute));
  SkillInfo_descriptor_ = file->message_type(2);
  static const int SkillInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, hurtvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, fight_power_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  NpcSkill_descriptor_ = file->message_type(3);
  static const int NpcSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSkill, skillinfo_),
  };
  NpcSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcSkill_descriptor_,
      NpcSkill::default_instance_,
      NpcSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcSkill));
  NpcInfo_descriptor_ = file->message_type(4);
  static const int NpcInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, skill_),
  };
  NpcInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcInfo_descriptor_,
      NpcInfo::default_instance_,
      NpcInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcInfo));
  Npc_descriptor_ = file->message_type(5);
  static const int Npc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Npc, allnpc_),
  };
  Npc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Npc_descriptor_,
      Npc::default_instance_,
      Npc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Npc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Npc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Npc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NpcConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcLevelAttribute_descriptor_, &NpcLevelAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcAttribute_descriptor_, &NpcAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcSkill_descriptor_, &NpcSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcInfo_descriptor_, &NpcInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Npc_descriptor_, &Npc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NpcConfig_2eproto() {
  delete NpcLevelAttribute::default_instance_;
  delete NpcLevelAttribute_reflection_;
  delete NpcAttribute::default_instance_;
  delete NpcAttribute_reflection_;
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete NpcSkill::default_instance_;
  delete NpcSkill_reflection_;
  delete NpcInfo::default_instance_;
  delete NpcInfo_reflection_;
  delete Npc::default_instance_;
  delete Npc_reflection_;
}

void protobuf_AddDesc_NpcConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017NpcConfig.proto\022\tNpcConfig\"W\n\021NpcLevel"
    "Attribute\022\r\n\005level\030\001 \002(\r\022\n\n\002hp\030\002 \002(\r\022\013\n\003"
    "att\030\003 \002(\r\022\013\n\003def\030\004 \002(\r\022\r\n\005first\030\005 \002(\r\"\225\001"
    "\n\014NpcAttribute\022\013\n\003hit\030\001 \002(\r\022\r\n\005dodge\030\002 \002"
    "(\r\022\022\n\ncritStrike\030\003 \002(\r\022\020\n\010critRate\030\004 \002(\r"
    "\022\022\n\ncritResist\030\005 \002(\r\022/\n\tlevelAttr\030\006 \003(\0132"
    "\034.NpcConfig.NpcLevelAttribute\"T\n\tSkillIn"
    "fo\022\r\n\005level\030\001 \002(\r\022\020\n\010multiple\030\002 \002(\001\022\021\n\th"
    "urtValue\030\003 \002(\r\022\023\n\013fight_power\030\004 \002(\r\"\?\n\010N"
    "pcSkill\022\n\n\002id\030\001 \002(\r\022\'\n\tskillInfo\030\002 \003(\0132\024"
    ".NpcConfig.SkillInfo\"`\n\007NpcInfo\022\n\n\002id\030\001 "
    "\002(\r\022%\n\004attr\030\002 \002(\0132\027.NpcConfig.NpcAttribu"
    "te\022\"\n\005skill\030\003 \003(\0132\023.NpcConfig.NpcSkill\")"
    "\n\003Npc\022\"\n\006allNpc\030\002 \003(\0132\022.NpcConfig.NpcInf"
    "o", 561);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NpcConfig.proto", &protobuf_RegisterTypes);
  NpcLevelAttribute::default_instance_ = new NpcLevelAttribute();
  NpcAttribute::default_instance_ = new NpcAttribute();
  SkillInfo::default_instance_ = new SkillInfo();
  NpcSkill::default_instance_ = new NpcSkill();
  NpcInfo::default_instance_ = new NpcInfo();
  Npc::default_instance_ = new Npc();
  NpcLevelAttribute::default_instance_->InitAsDefaultInstance();
  NpcAttribute::default_instance_->InitAsDefaultInstance();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  NpcSkill::default_instance_->InitAsDefaultInstance();
  NpcInfo::default_instance_->InitAsDefaultInstance();
  Npc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NpcConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NpcConfig_2eproto {
  StaticDescriptorInitializer_NpcConfig_2eproto() {
    protobuf_AddDesc_NpcConfig_2eproto();
  }
} static_descriptor_initializer_NpcConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int NpcLevelAttribute::kLevelFieldNumber;
const int NpcLevelAttribute::kHpFieldNumber;
const int NpcLevelAttribute::kAttFieldNumber;
const int NpcLevelAttribute::kDefFieldNumber;
const int NpcLevelAttribute::kFirstFieldNumber;
#endif  // !_MSC_VER

NpcLevelAttribute::NpcLevelAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcLevelAttribute::InitAsDefaultInstance() {
}

NpcLevelAttribute::NpcLevelAttribute(const NpcLevelAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcLevelAttribute::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  hp_ = 0u;
  att_ = 0u;
  def_ = 0u;
  first_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcLevelAttribute::~NpcLevelAttribute() {
  SharedDtor();
}

void NpcLevelAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcLevelAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcLevelAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcLevelAttribute_descriptor_;
}

const NpcLevelAttribute& NpcLevelAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NpcConfig_2eproto();  return *default_instance_;
}

NpcLevelAttribute* NpcLevelAttribute::default_instance_ = NULL;

NpcLevelAttribute* NpcLevelAttribute::New() const {
  return new NpcLevelAttribute;
}

void NpcLevelAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    hp_ = 0u;
    att_ = 0u;
    def_ = 0u;
    first_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcLevelAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }
      
      // required uint32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_att;
        break;
      }
      
      // required uint32 att = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_)));
          set_has_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_def;
        break;
      }
      
      // required uint32 def = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_first;
        break;
      }
      
      // required uint32 first = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcLevelAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // required uint32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }
  
  // required uint32 att = 3;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->att(), output);
  }
  
  // required uint32 def = 4;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def(), output);
  }
  
  // required uint32 first = 5;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->first(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcLevelAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // required uint32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }
  
  // required uint32 att = 3;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->att(), target);
  }
  
  // required uint32 def = 4;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def(), target);
  }
  
  // required uint32 first = 5;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->first(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcLevelAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required uint32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
    // required uint32 att = 3;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att());
    }
    
    // required uint32 def = 4;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }
    
    // required uint32 first = 5;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcLevelAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcLevelAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcLevelAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcLevelAttribute::MergeFrom(const NpcLevelAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_att()) {
      set_att(from.att());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcLevelAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcLevelAttribute::CopyFrom(const NpcLevelAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcLevelAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void NpcLevelAttribute::Swap(NpcLevelAttribute* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(att_, other->att_);
    std::swap(def_, other->def_);
    std::swap(first_, other->first_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcLevelAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcLevelAttribute_descriptor_;
  metadata.reflection = NpcLevelAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcAttribute::kHitFieldNumber;
const int NpcAttribute::kDodgeFieldNumber;
const int NpcAttribute::kCritStrikeFieldNumber;
const int NpcAttribute::kCritRateFieldNumber;
const int NpcAttribute::kCritResistFieldNumber;
const int NpcAttribute::kLevelAttrFieldNumber;
#endif  // !_MSC_VER

NpcAttribute::NpcAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcAttribute::InitAsDefaultInstance() {
}

NpcAttribute::NpcAttribute(const NpcAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcAttribute::SharedCtor() {
  _cached_size_ = 0;
  hit_ = 0u;
  dodge_ = 0u;
  critstrike_ = 0u;
  critrate_ = 0u;
  critresist_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcAttribute::~NpcAttribute() {
  SharedDtor();
}

void NpcAttribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcAttribute_descriptor_;
}

const NpcAttribute& NpcAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NpcConfig_2eproto();  return *default_instance_;
}

NpcAttribute* NpcAttribute::default_instance_ = NULL;

NpcAttribute* NpcAttribute::New() const {
  return new NpcAttribute;
}

void NpcAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hit_ = 0u;
    dodge_ = 0u;
    critstrike_ = 0u;
    critrate_ = 0u;
    critresist_ = 0u;
  }
  levelattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dodge;
        break;
      }
      
      // required uint32 dodge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_critStrike;
        break;
      }
      
      // required uint32 critStrike = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critStrike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critstrike_)));
          set_has_critstrike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_critRate;
        break;
      }
      
      // required uint32 critRate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critrate_)));
          set_has_critrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_critResist;
        break;
      }
      
      // required uint32 critResist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critResist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critresist_)));
          set_has_critresist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_levelAttr;
        break;
      }
      
      // repeated .NpcConfig.NpcLevelAttribute levelAttr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_levelAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_levelAttr;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hit = 1;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hit(), output);
  }
  
  // required uint32 dodge = 2;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dodge(), output);
  }
  
  // required uint32 critStrike = 3;
  if (has_critstrike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->critstrike(), output);
  }
  
  // required uint32 critRate = 4;
  if (has_critrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->critrate(), output);
  }
  
  // required uint32 critResist = 5;
  if (has_critresist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->critresist(), output);
  }
  
  // repeated .NpcConfig.NpcLevelAttribute levelAttr = 6;
  for (int i = 0; i < this->levelattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->levelattr(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hit = 1;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hit(), target);
  }
  
  // required uint32 dodge = 2;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dodge(), target);
  }
  
  // required uint32 critStrike = 3;
  if (has_critstrike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->critstrike(), target);
  }
  
  // required uint32 critRate = 4;
  if (has_critrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->critrate(), target);
  }
  
  // required uint32 critResist = 5;
  if (has_critresist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->critresist(), target);
  }
  
  // repeated .NpcConfig.NpcLevelAttribute levelAttr = 6;
  for (int i = 0; i < this->levelattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->levelattr(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hit = 1;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }
    
    // required uint32 dodge = 2;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }
    
    // required uint32 critStrike = 3;
    if (has_critstrike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critstrike());
    }
    
    // required uint32 critRate = 4;
    if (has_critrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critrate());
    }
    
    // required uint32 critResist = 5;
    if (has_critresist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critresist());
    }
    
  }
  // repeated .NpcConfig.NpcLevelAttribute levelAttr = 6;
  total_size += 1 * this->levelattr_size();
  for (int i = 0; i < this->levelattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelattr(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcAttribute::MergeFrom(const NpcAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelattr_.MergeFrom(from.levelattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_critstrike()) {
      set_critstrike(from.critstrike());
    }
    if (from.has_critrate()) {
      set_critrate(from.critrate());
    }
    if (from.has_critresist()) {
      set_critresist(from.critresist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcAttribute::CopyFrom(const NpcAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < levelattr_size(); i++) {
    if (!this->levelattr(i).IsInitialized()) return false;
  }
  return true;
}

void NpcAttribute::Swap(NpcAttribute* other) {
  if (other != this) {
    std::swap(hit_, other->hit_);
    std::swap(dodge_, other->dodge_);
    std::swap(critstrike_, other->critstrike_);
    std::swap(critrate_, other->critrate_);
    std::swap(critresist_, other->critresist_);
    levelattr_.Swap(&other->levelattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcAttribute_descriptor_;
  metadata.reflection = NpcAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfo::kLevelFieldNumber;
const int SkillInfo::kMultipleFieldNumber;
const int SkillInfo::kHurtValueFieldNumber;
const int SkillInfo::kFightPowerFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  multiple_ = 0;
  hurtvalue_ = 0u;
  fight_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NpcConfig_2eproto();  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    multiple_ = 0;
    hurtvalue_ = 0u;
    fight_power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_multiple;
        break;
      }
      
      // required double multiple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hurtValue;
        break;
      }
      
      // required uint32 hurtValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurtValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurtvalue_)));
          set_has_hurtvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight_power;
        break;
      }
      
      // required uint32 fight_power = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // required double multiple = 2;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->multiple(), output);
  }
  
  // required uint32 hurtValue = 3;
  if (has_hurtvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hurtvalue(), output);
  }
  
  // required uint32 fight_power = 4;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fight_power(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // required double multiple = 2;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->multiple(), target);
  }
  
  // required uint32 hurtValue = 3;
  if (has_hurtvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hurtvalue(), target);
  }
  
  // required uint32 fight_power = 4;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fight_power(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required double multiple = 2;
    if (has_multiple()) {
      total_size += 1 + 8;
    }
    
    // required uint32 hurtValue = 3;
    if (has_hurtvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurtvalue());
    }
    
    // required uint32 fight_power = 4;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_hurtvalue()) {
      set_hurtvalue(from.hurtvalue());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(multiple_, other->multiple_);
    std::swap(hurtvalue_, other->hurtvalue_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcSkill::kIdFieldNumber;
const int NpcSkill::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

NpcSkill::NpcSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcSkill::InitAsDefaultInstance() {
}

NpcSkill::NpcSkill(const NpcSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcSkill::~NpcSkill() {
  SharedDtor();
}

void NpcSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcSkill_descriptor_;
}

const NpcSkill& NpcSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NpcConfig_2eproto();  return *default_instance_;
}

NpcSkill* NpcSkill::default_instance_ = NULL;

NpcSkill* NpcSkill::New() const {
  return new NpcSkill;
}

void NpcSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  skillinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillInfo;
        break;
      }
      
      // repeated .NpcConfig.SkillInfo skillInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_skillInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated .NpcConfig.SkillInfo skillInfo = 2;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated .NpcConfig.SkillInfo skillInfo = 2;
  for (int i = 0; i < this->skillinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated .NpcConfig.SkillInfo skillInfo = 2;
  total_size += 1 * this->skillinfo_size();
  for (int i = 0; i < this->skillinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcSkill::MergeFrom(const NpcSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillinfo_.MergeFrom(from.skillinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcSkill::CopyFrom(const NpcSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < skillinfo_size(); i++) {
    if (!this->skillinfo(i).IsInitialized()) return false;
  }
  return true;
}

void NpcSkill::Swap(NpcSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    skillinfo_.Swap(&other->skillinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcSkill_descriptor_;
  metadata.reflection = NpcSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcInfo::kIdFieldNumber;
const int NpcInfo::kAttrFieldNumber;
const int NpcInfo::kSkillFieldNumber;
#endif  // !_MSC_VER

NpcInfo::NpcInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NpcInfo::InitAsDefaultInstance() {
  attr_ = const_cast< ::NpcConfig::NpcAttribute*>(&::NpcConfig::NpcAttribute::default_instance());
}

NpcInfo::NpcInfo(const NpcInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NpcInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcInfo::~NpcInfo() {
  SharedDtor();
}

void NpcInfo::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void NpcInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcInfo_descriptor_;
}

const NpcInfo& NpcInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NpcConfig_2eproto();  return *default_instance_;
}

NpcInfo* NpcInfo::default_instance_ = NULL;

NpcInfo* NpcInfo::New() const {
  return new NpcInfo;
}

void NpcInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_attr()) {
      if (attr_ != NULL) attr_->::NpcConfig::NpcAttribute::Clear();
    }
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }
      
      // required .NpcConfig.NpcAttribute attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        break;
      }
      
      // repeated .NpcConfig.NpcSkill skill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NpcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .NpcConfig.NpcAttribute attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }
  
  // repeated .NpcConfig.NpcSkill skill = 3;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NpcInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .NpcConfig.NpcAttribute attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }
  
  // repeated .NpcConfig.NpcSkill skill = 3;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NpcInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .NpcConfig.NpcAttribute attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }
    
  }
  // repeated .NpcConfig.NpcSkill skill = 3;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcInfo::MergeFrom(const NpcInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_attr()) {
      mutable_attr()->::NpcConfig::NpcAttribute::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcInfo::CopyFrom(const NpcInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  for (int i = 0; i < skill_size(); i++) {
    if (!this->skill(i).IsInitialized()) return false;
  }
  return true;
}

void NpcInfo::Swap(NpcInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(attr_, other->attr_);
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcInfo_descriptor_;
  metadata.reflection = NpcInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Npc::kAllNpcFieldNumber;
#endif  // !_MSC_VER

Npc::Npc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Npc::InitAsDefaultInstance() {
}

Npc::Npc(const Npc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Npc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Npc::~Npc() {
  SharedDtor();
}

void Npc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Npc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Npc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Npc_descriptor_;
}

const Npc& Npc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NpcConfig_2eproto();  return *default_instance_;
}

Npc* Npc::default_instance_ = NULL;

Npc* Npc::New() const {
  return new Npc;
}

void Npc::Clear() {
  allnpc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Npc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NpcConfig.NpcInfo allNpc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allNpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allnpc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allNpc;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Npc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NpcConfig.NpcInfo allNpc = 2;
  for (int i = 0; i < this->allnpc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allnpc(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Npc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NpcConfig.NpcInfo allNpc = 2;
  for (int i = 0; i < this->allnpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allnpc(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Npc::ByteSize() const {
  int total_size = 0;
  
  // repeated .NpcConfig.NpcInfo allNpc = 2;
  total_size += 1 * this->allnpc_size();
  for (int i = 0; i < this->allnpc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allnpc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Npc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Npc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Npc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Npc::MergeFrom(const Npc& from) {
  GOOGLE_CHECK_NE(&from, this);
  allnpc_.MergeFrom(from.allnpc_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Npc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Npc::CopyFrom(const Npc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Npc::IsInitialized() const {
  
  for (int i = 0; i < allnpc_size(); i++) {
    if (!this->allnpc(i).IsInitialized()) return false;
  }
  return true;
}

void Npc::Swap(Npc* other) {
  if (other != this) {
    allnpc_.Swap(&other->allnpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Npc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Npc_descriptor_;
  metadata.reflection = Npc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NpcConfig

// @@protoc_insertion_point(global_scope)
