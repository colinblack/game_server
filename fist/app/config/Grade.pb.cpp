// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Grade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Grade {

namespace {

const ::google::protobuf::Descriptor* UpgradeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* WinStreakReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WinStreakReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Factor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Factor_reflection_ = NULL;
const ::google::protobuf::Descriptor* GradeBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GradeBattle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Grade_2eproto() {
  protobuf_AddDesc_Grade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Grade.proto");
  GOOGLE_CHECK(file != NULL);
  UpgradeReward_descriptor_ = file->message_type(0);
  static const int UpgradeReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeReward, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeReward, reward_),
  };
  UpgradeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeReward_descriptor_,
      UpgradeReward::default_instance_,
      UpgradeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeReward));
  DailyReward_descriptor_ = file->message_type(1);
  static const int DailyReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyReward, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyReward, reward_),
  };
  DailyReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyReward_descriptor_,
      DailyReward::default_instance_,
      DailyReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyReward));
  WinStreakReward_descriptor_ = file->message_type(2);
  static const int WinStreakReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinStreakReward, reward_),
  };
  WinStreakReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WinStreakReward_descriptor_,
      WinStreakReward::default_instance_,
      WinStreakReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinStreakReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinStreakReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WinStreakReward));
  Factor_descriptor_ = file->message_type(3);
  static const int Factor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, value_),
  };
  Factor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Factor_descriptor_,
      Factor::default_instance_,
      Factor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Factor));
  GradeBattle_descriptor_ = file->message_type(4);
  static const int GradeBattle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, factor_),
  };
  GradeBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GradeBattle_descriptor_,
      GradeBattle::default_instance_,
      GradeBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GradeBattle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Grade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeReward_descriptor_, &UpgradeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyReward_descriptor_, &DailyReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WinStreakReward_descriptor_, &WinStreakReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Factor_descriptor_, &Factor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GradeBattle_descriptor_, &GradeBattle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Grade_2eproto() {
  delete UpgradeReward::default_instance_;
  delete UpgradeReward_reflection_;
  delete DailyReward::default_instance_;
  delete DailyReward_reflection_;
  delete WinStreakReward::default_instance_;
  delete WinStreakReward_reflection_;
  delete Factor::default_instance_;
  delete Factor_reflection_;
  delete GradeBattle::default_instance_;
  delete GradeBattle_reflection_;
}

void protobuf_AddDesc_Grade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Grade.proto\022\005Grade\032\026CommonGiftConfig.p"
    "roto\"R\n\rUpgradeReward\022\r\n\005level\030\001 \002(\r\0222\n\006"
    "reward\030\002 \002(\0132\".CommonGiftConfig.CommonMo"
    "difyItem\"P\n\013DailyReward\022\r\n\005level\030\001 \002(\r\0222"
    "\n\006reward\030\002 \002(\0132\".CommonGiftConfig.Common"
    "ModifyItem\"E\n\017WinStreakReward\0222\n\006reward\030"
    "\001 \002(\0132\".CommonGiftConfig.CommonModifyIte"
    "m\"&\n\006Factor\022\r\n\005level\030\001 \002(\r\022\r\n\005value\030\002 \002("
    "\r\"\252\001\n\013GradeBattle\022\r\n\005score\030\001 \003(\r\022%\n\007upgr"
    "ade\030\002 \003(\0132\024.Grade.UpgradeReward\022!\n\005daily"
    "\030\003 \003(\0132\022.Grade.DailyReward\022#\n\003win\030\004 \003(\0132"
    "\026.Grade.WinStreakReward\022\035\n\006factor\030\005 \003(\0132"
    "\r.Grade.Factor", 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Grade.proto", &protobuf_RegisterTypes);
  UpgradeReward::default_instance_ = new UpgradeReward();
  DailyReward::default_instance_ = new DailyReward();
  WinStreakReward::default_instance_ = new WinStreakReward();
  Factor::default_instance_ = new Factor();
  GradeBattle::default_instance_ = new GradeBattle();
  UpgradeReward::default_instance_->InitAsDefaultInstance();
  DailyReward::default_instance_->InitAsDefaultInstance();
  WinStreakReward::default_instance_->InitAsDefaultInstance();
  Factor::default_instance_->InitAsDefaultInstance();
  GradeBattle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Grade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Grade_2eproto {
  StaticDescriptorInitializer_Grade_2eproto() {
    protobuf_AddDesc_Grade_2eproto();
  }
} static_descriptor_initializer_Grade_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UpgradeReward::kLevelFieldNumber;
const int UpgradeReward::kRewardFieldNumber;
#endif  // !_MSC_VER

UpgradeReward::UpgradeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeReward::InitAsDefaultInstance() {
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

UpgradeReward::UpgradeReward(const UpgradeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeReward::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeReward::~UpgradeReward() {
  SharedDtor();
}

void UpgradeReward::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void UpgradeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeReward_descriptor_;
}

const UpgradeReward& UpgradeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grade_2eproto();  return *default_instance_;
}

UpgradeReward* UpgradeReward::default_instance_ = NULL;

UpgradeReward* UpgradeReward::New() const {
  return new UpgradeReward;
}

void UpgradeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }
      
      // required .CommonGiftConfig.CommonModifyItem reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required .CommonGiftConfig.CommonModifyItem reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeReward::MergeFrom(const UpgradeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeReward::CopyFrom(const UpgradeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void UpgradeReward::Swap(UpgradeReward* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeReward_descriptor_;
  metadata.reflection = UpgradeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyReward::kLevelFieldNumber;
const int DailyReward::kRewardFieldNumber;
#endif  // !_MSC_VER

DailyReward::DailyReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyReward::InitAsDefaultInstance() {
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

DailyReward::DailyReward(const DailyReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyReward::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyReward::~DailyReward() {
  SharedDtor();
}

void DailyReward::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void DailyReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyReward_descriptor_;
}

const DailyReward& DailyReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grade_2eproto();  return *default_instance_;
}

DailyReward* DailyReward::default_instance_ = NULL;

DailyReward* DailyReward::New() const {
  return new DailyReward;
}

void DailyReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }
      
      // required .CommonGiftConfig.CommonModifyItem reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // required .CommonGiftConfig.CommonModifyItem reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required .CommonGiftConfig.CommonModifyItem reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyReward::MergeFrom(const DailyReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyReward::CopyFrom(const DailyReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void DailyReward::Swap(DailyReward* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyReward_descriptor_;
  metadata.reflection = DailyReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WinStreakReward::kRewardFieldNumber;
#endif  // !_MSC_VER

WinStreakReward::WinStreakReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WinStreakReward::InitAsDefaultInstance() {
  reward_ = const_cast< ::CommonGiftConfig::CommonModifyItem*>(&::CommonGiftConfig::CommonModifyItem::default_instance());
}

WinStreakReward::WinStreakReward(const WinStreakReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WinStreakReward::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WinStreakReward::~WinStreakReward() {
  SharedDtor();
}

void WinStreakReward::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void WinStreakReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinStreakReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WinStreakReward_descriptor_;
}

const WinStreakReward& WinStreakReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grade_2eproto();  return *default_instance_;
}

WinStreakReward* WinStreakReward::default_instance_ = NULL;

WinStreakReward* WinStreakReward::New() const {
  return new WinStreakReward;
}

void WinStreakReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WinStreakReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommonGiftConfig.CommonModifyItem reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WinStreakReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CommonGiftConfig.CommonModifyItem reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WinStreakReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .CommonGiftConfig.CommonModifyItem reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WinStreakReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CommonGiftConfig.CommonModifyItem reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinStreakReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WinStreakReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WinStreakReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WinStreakReward::MergeFrom(const WinStreakReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::CommonGiftConfig::CommonModifyItem::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WinStreakReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinStreakReward::CopyFrom(const WinStreakReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinStreakReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void WinStreakReward::Swap(WinStreakReward* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WinStreakReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WinStreakReward_descriptor_;
  metadata.reflection = WinStreakReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Factor::kLevelFieldNumber;
const int Factor::kValueFieldNumber;
#endif  // !_MSC_VER

Factor::Factor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Factor::InitAsDefaultInstance() {
}

Factor::Factor(const Factor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Factor::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Factor::~Factor() {
  SharedDtor();
}

void Factor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Factor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Factor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Factor_descriptor_;
}

const Factor& Factor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grade_2eproto();  return *default_instance_;
}

Factor* Factor::default_instance_ = NULL;

Factor* Factor::New() const {
  return new Factor;
}

void Factor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Factor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Factor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Factor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Factor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Factor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Factor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Factor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Factor::MergeFrom(const Factor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Factor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Factor::CopyFrom(const Factor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Factor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Factor::Swap(Factor* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Factor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Factor_descriptor_;
  metadata.reflection = Factor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GradeBattle::kScoreFieldNumber;
const int GradeBattle::kUpgradeFieldNumber;
const int GradeBattle::kDailyFieldNumber;
const int GradeBattle::kWinFieldNumber;
const int GradeBattle::kFactorFieldNumber;
#endif  // !_MSC_VER

GradeBattle::GradeBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GradeBattle::InitAsDefaultInstance() {
}

GradeBattle::GradeBattle(const GradeBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GradeBattle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GradeBattle::~GradeBattle() {
  SharedDtor();
}

void GradeBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GradeBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GradeBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GradeBattle_descriptor_;
}

const GradeBattle& GradeBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Grade_2eproto();  return *default_instance_;
}

GradeBattle* GradeBattle::default_instance_ = NULL;

GradeBattle* GradeBattle::New() const {
  return new GradeBattle;
}

void GradeBattle::Clear() {
  score_.Clear();
  upgrade_.Clear();
  daily_.Clear();
  win_.Clear();
  factor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GradeBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_score;
        if (input->ExpectTag(18)) goto parse_upgrade;
        break;
      }
      
      // repeated .Grade.UpgradeReward upgrade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upgrade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_upgrade;
        if (input->ExpectTag(26)) goto parse_daily;
        break;
      }
      
      // repeated .Grade.DailyReward daily = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_daily;
        if (input->ExpectTag(34)) goto parse_win;
        break;
      }
      
      // repeated .Grade.WinStreakReward win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_win()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_win;
        if (input->ExpectTag(42)) goto parse_factor;
        break;
      }
      
      // repeated .Grade.Factor factor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_factor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_factor;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GradeBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->score(i), output);
  }
  
  // repeated .Grade.UpgradeReward upgrade = 2;
  for (int i = 0; i < this->upgrade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->upgrade(i), output);
  }
  
  // repeated .Grade.DailyReward daily = 3;
  for (int i = 0; i < this->daily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->daily(i), output);
  }
  
  // repeated .Grade.WinStreakReward win = 4;
  for (int i = 0; i < this->win_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->win(i), output);
  }
  
  // repeated .Grade.Factor factor = 5;
  for (int i = 0; i < this->factor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->factor(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GradeBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 score = 1;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->score(i), target);
  }
  
  // repeated .Grade.UpgradeReward upgrade = 2;
  for (int i = 0; i < this->upgrade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->upgrade(i), target);
  }
  
  // repeated .Grade.DailyReward daily = 3;
  for (int i = 0; i < this->daily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->daily(i), target);
  }
  
  // repeated .Grade.WinStreakReward win = 4;
  for (int i = 0; i < this->win_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->win(i), target);
  }
  
  // repeated .Grade.Factor factor = 5;
  for (int i = 0; i < this->factor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->factor(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GradeBattle::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->score(i));
    }
    total_size += 1 * this->score_size() + data_size;
  }
  
  // repeated .Grade.UpgradeReward upgrade = 2;
  total_size += 1 * this->upgrade_size();
  for (int i = 0; i < this->upgrade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgrade(i));
  }
  
  // repeated .Grade.DailyReward daily = 3;
  total_size += 1 * this->daily_size();
  for (int i = 0; i < this->daily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily(i));
  }
  
  // repeated .Grade.WinStreakReward win = 4;
  total_size += 1 * this->win_size();
  for (int i = 0; i < this->win_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->win(i));
  }
  
  // repeated .Grade.Factor factor = 5;
  total_size += 1 * this->factor_size();
  for (int i = 0; i < this->factor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->factor(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GradeBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GradeBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GradeBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GradeBattle::MergeFrom(const GradeBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  upgrade_.MergeFrom(from.upgrade_);
  daily_.MergeFrom(from.daily_);
  win_.MergeFrom(from.win_);
  factor_.MergeFrom(from.factor_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GradeBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradeBattle::CopyFrom(const GradeBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeBattle::IsInitialized() const {
  
  for (int i = 0; i < upgrade_size(); i++) {
    if (!this->upgrade(i).IsInitialized()) return false;
  }
  for (int i = 0; i < daily_size(); i++) {
    if (!this->daily(i).IsInitialized()) return false;
  }
  for (int i = 0; i < win_size(); i++) {
    if (!this->win(i).IsInitialized()) return false;
  }
  for (int i = 0; i < factor_size(); i++) {
    if (!this->factor(i).IsInitialized()) return false;
  }
  return true;
}

void GradeBattle::Swap(GradeBattle* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    upgrade_.Swap(&other->upgrade_);
    daily_.Swap(&other->daily_);
    win_.Swap(&other->win_);
    factor_.Swap(&other->factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GradeBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GradeBattle_descriptor_;
  metadata.reflection = GradeBattle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grade

// @@protoc_insertion_point(global_scope)
