// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Grade.proto

#ifndef PROTOBUF_Grade_2eproto__INCLUDED
#define PROTOBUF_Grade_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "CommonGiftConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace Grade {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Grade_2eproto();
void protobuf_AssignDesc_Grade_2eproto();
void protobuf_ShutdownFile_Grade_2eproto();

class UpgradeReward;
class DailyReward;
class WinStreakReward;
class Factor;
class GradeBattle;

// ===================================================================

class UpgradeReward : public ::google::protobuf::Message {
 public:
  UpgradeReward();
  virtual ~UpgradeReward();
  
  UpgradeReward(const UpgradeReward& from);
  
  inline UpgradeReward& operator=(const UpgradeReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpgradeReward& default_instance();
  
  void Swap(UpgradeReward* other);
  
  // implements Message ----------------------------------------------
  
  UpgradeReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpgradeReward& from);
  void MergeFrom(const UpgradeReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // required .CommonGiftConfig.CommonModifyItem reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::CommonGiftConfig::CommonModifyItem& reward() const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_reward();
  inline ::CommonGiftConfig::CommonModifyItem* release_reward();
  
  // @@protoc_insertion_point(class_scope:Grade.UpgradeReward)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_reward();
  inline void clear_has_reward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CommonGiftConfig::CommonModifyItem* reward_;
  ::google::protobuf::uint32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Grade_2eproto();
  friend void protobuf_AssignDesc_Grade_2eproto();
  friend void protobuf_ShutdownFile_Grade_2eproto();
  
  void InitAsDefaultInstance();
  static UpgradeReward* default_instance_;
};
// -------------------------------------------------------------------

class DailyReward : public ::google::protobuf::Message {
 public:
  DailyReward();
  virtual ~DailyReward();
  
  DailyReward(const DailyReward& from);
  
  inline DailyReward& operator=(const DailyReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyReward& default_instance();
  
  void Swap(DailyReward* other);
  
  // implements Message ----------------------------------------------
  
  DailyReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyReward& from);
  void MergeFrom(const DailyReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // required .CommonGiftConfig.CommonModifyItem reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::CommonGiftConfig::CommonModifyItem& reward() const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_reward();
  inline ::CommonGiftConfig::CommonModifyItem* release_reward();
  
  // @@protoc_insertion_point(class_scope:Grade.DailyReward)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_reward();
  inline void clear_has_reward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CommonGiftConfig::CommonModifyItem* reward_;
  ::google::protobuf::uint32 level_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Grade_2eproto();
  friend void protobuf_AssignDesc_Grade_2eproto();
  friend void protobuf_ShutdownFile_Grade_2eproto();
  
  void InitAsDefaultInstance();
  static DailyReward* default_instance_;
};
// -------------------------------------------------------------------

class WinStreakReward : public ::google::protobuf::Message {
 public:
  WinStreakReward();
  virtual ~WinStreakReward();
  
  WinStreakReward(const WinStreakReward& from);
  
  inline WinStreakReward& operator=(const WinStreakReward& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WinStreakReward& default_instance();
  
  void Swap(WinStreakReward* other);
  
  // implements Message ----------------------------------------------
  
  WinStreakReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WinStreakReward& from);
  void MergeFrom(const WinStreakReward& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .CommonGiftConfig.CommonModifyItem reward = 1;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::CommonGiftConfig::CommonModifyItem& reward() const;
  inline ::CommonGiftConfig::CommonModifyItem* mutable_reward();
  inline ::CommonGiftConfig::CommonModifyItem* release_reward();
  
  // @@protoc_insertion_point(class_scope:Grade.WinStreakReward)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CommonGiftConfig::CommonModifyItem* reward_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Grade_2eproto();
  friend void protobuf_AssignDesc_Grade_2eproto();
  friend void protobuf_ShutdownFile_Grade_2eproto();
  
  void InitAsDefaultInstance();
  static WinStreakReward* default_instance_;
};
// -------------------------------------------------------------------

class Factor : public ::google::protobuf::Message {
 public:
  Factor();
  virtual ~Factor();
  
  Factor(const Factor& from);
  
  inline Factor& operator=(const Factor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Factor& default_instance();
  
  void Swap(Factor* other);
  
  // implements Message ----------------------------------------------
  
  Factor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Factor& from);
  void MergeFrom(const Factor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Grade.Factor)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Grade_2eproto();
  friend void protobuf_AssignDesc_Grade_2eproto();
  friend void protobuf_ShutdownFile_Grade_2eproto();
  
  void InitAsDefaultInstance();
  static Factor* default_instance_;
};
// -------------------------------------------------------------------

class GradeBattle : public ::google::protobuf::Message {
 public:
  GradeBattle();
  virtual ~GradeBattle();
  
  GradeBattle(const GradeBattle& from);
  
  inline GradeBattle& operator=(const GradeBattle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GradeBattle& default_instance();
  
  void Swap(GradeBattle* other);
  
  // implements Message ----------------------------------------------
  
  GradeBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GradeBattle& from);
  void MergeFrom(const GradeBattle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 score = 1;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::uint32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::uint32 value);
  inline void add_score(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_score();
  
  // repeated .Grade.UpgradeReward upgrade = 2;
  inline int upgrade_size() const;
  inline void clear_upgrade();
  static const int kUpgradeFieldNumber = 2;
  inline const ::Grade::UpgradeReward& upgrade(int index) const;
  inline ::Grade::UpgradeReward* mutable_upgrade(int index);
  inline ::Grade::UpgradeReward* add_upgrade();
  inline const ::google::protobuf::RepeatedPtrField< ::Grade::UpgradeReward >&
      upgrade() const;
  inline ::google::protobuf::RepeatedPtrField< ::Grade::UpgradeReward >*
      mutable_upgrade();
  
  // repeated .Grade.DailyReward daily = 3;
  inline int daily_size() const;
  inline void clear_daily();
  static const int kDailyFieldNumber = 3;
  inline const ::Grade::DailyReward& daily(int index) const;
  inline ::Grade::DailyReward* mutable_daily(int index);
  inline ::Grade::DailyReward* add_daily();
  inline const ::google::protobuf::RepeatedPtrField< ::Grade::DailyReward >&
      daily() const;
  inline ::google::protobuf::RepeatedPtrField< ::Grade::DailyReward >*
      mutable_daily();
  
  // repeated .Grade.WinStreakReward win = 4;
  inline int win_size() const;
  inline void clear_win();
  static const int kWinFieldNumber = 4;
  inline const ::Grade::WinStreakReward& win(int index) const;
  inline ::Grade::WinStreakReward* mutable_win(int index);
  inline ::Grade::WinStreakReward* add_win();
  inline const ::google::protobuf::RepeatedPtrField< ::Grade::WinStreakReward >&
      win() const;
  inline ::google::protobuf::RepeatedPtrField< ::Grade::WinStreakReward >*
      mutable_win();
  
  // repeated .Grade.Factor factor = 5;
  inline int factor_size() const;
  inline void clear_factor();
  static const int kFactorFieldNumber = 5;
  inline const ::Grade::Factor& factor(int index) const;
  inline ::Grade::Factor* mutable_factor(int index);
  inline ::Grade::Factor* add_factor();
  inline const ::google::protobuf::RepeatedPtrField< ::Grade::Factor >&
      factor() const;
  inline ::google::protobuf::RepeatedPtrField< ::Grade::Factor >*
      mutable_factor();
  
  // @@protoc_insertion_point(class_scope:Grade.GradeBattle)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > score_;
  ::google::protobuf::RepeatedPtrField< ::Grade::UpgradeReward > upgrade_;
  ::google::protobuf::RepeatedPtrField< ::Grade::DailyReward > daily_;
  ::google::protobuf::RepeatedPtrField< ::Grade::WinStreakReward > win_;
  ::google::protobuf::RepeatedPtrField< ::Grade::Factor > factor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Grade_2eproto();
  friend void protobuf_AssignDesc_Grade_2eproto();
  friend void protobuf_ShutdownFile_Grade_2eproto();
  
  void InitAsDefaultInstance();
  static GradeBattle* default_instance_;
};
// ===================================================================


// ===================================================================

// UpgradeReward

// required uint32 level = 1;
inline bool UpgradeReward::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpgradeReward::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpgradeReward::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpgradeReward::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 UpgradeReward::level() const {
  return level_;
}
inline void UpgradeReward::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required .CommonGiftConfig.CommonModifyItem reward = 2;
inline bool UpgradeReward::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpgradeReward::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpgradeReward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpgradeReward::clear_reward() {
  if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
  clear_has_reward();
}
inline const ::CommonGiftConfig::CommonModifyItem& UpgradeReward::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* UpgradeReward::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::CommonGiftConfig::CommonModifyItem;
  return reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* UpgradeReward::release_reward() {
  clear_has_reward();
  ::CommonGiftConfig::CommonModifyItem* temp = reward_;
  reward_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DailyReward

// required uint32 level = 1;
inline bool DailyReward::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyReward::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyReward::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyReward::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 DailyReward::level() const {
  return level_;
}
inline void DailyReward::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required .CommonGiftConfig.CommonModifyItem reward = 2;
inline bool DailyReward::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyReward::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyReward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyReward::clear_reward() {
  if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
  clear_has_reward();
}
inline const ::CommonGiftConfig::CommonModifyItem& DailyReward::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* DailyReward::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::CommonGiftConfig::CommonModifyItem;
  return reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* DailyReward::release_reward() {
  clear_has_reward();
  ::CommonGiftConfig::CommonModifyItem* temp = reward_;
  reward_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// WinStreakReward

// required .CommonGiftConfig.CommonModifyItem reward = 1;
inline bool WinStreakReward::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WinStreakReward::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WinStreakReward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WinStreakReward::clear_reward() {
  if (reward_ != NULL) reward_->::CommonGiftConfig::CommonModifyItem::Clear();
  clear_has_reward();
}
inline const ::CommonGiftConfig::CommonModifyItem& WinStreakReward::reward() const {
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* WinStreakReward::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::CommonGiftConfig::CommonModifyItem;
  return reward_;
}
inline ::CommonGiftConfig::CommonModifyItem* WinStreakReward::release_reward() {
  clear_has_reward();
  ::CommonGiftConfig::CommonModifyItem* temp = reward_;
  reward_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Factor

// required uint32 level = 1;
inline bool Factor::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Factor::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Factor::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Factor::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Factor::level() const {
  return level_;
}
inline void Factor::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 value = 2;
inline bool Factor::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Factor::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Factor::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Factor::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 Factor::value() const {
  return value_;
}
inline void Factor::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// GradeBattle

// repeated uint32 score = 1;
inline int GradeBattle::score_size() const {
  return score_.size();
}
inline void GradeBattle::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::uint32 GradeBattle::score(int index) const {
  return score_.Get(index);
}
inline void GradeBattle::set_score(int index, ::google::protobuf::uint32 value) {
  score_.Set(index, value);
}
inline void GradeBattle::add_score(::google::protobuf::uint32 value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GradeBattle::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GradeBattle::mutable_score() {
  return &score_;
}

// repeated .Grade.UpgradeReward upgrade = 2;
inline int GradeBattle::upgrade_size() const {
  return upgrade_.size();
}
inline void GradeBattle::clear_upgrade() {
  upgrade_.Clear();
}
inline const ::Grade::UpgradeReward& GradeBattle::upgrade(int index) const {
  return upgrade_.Get(index);
}
inline ::Grade::UpgradeReward* GradeBattle::mutable_upgrade(int index) {
  return upgrade_.Mutable(index);
}
inline ::Grade::UpgradeReward* GradeBattle::add_upgrade() {
  return upgrade_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Grade::UpgradeReward >&
GradeBattle::upgrade() const {
  return upgrade_;
}
inline ::google::protobuf::RepeatedPtrField< ::Grade::UpgradeReward >*
GradeBattle::mutable_upgrade() {
  return &upgrade_;
}

// repeated .Grade.DailyReward daily = 3;
inline int GradeBattle::daily_size() const {
  return daily_.size();
}
inline void GradeBattle::clear_daily() {
  daily_.Clear();
}
inline const ::Grade::DailyReward& GradeBattle::daily(int index) const {
  return daily_.Get(index);
}
inline ::Grade::DailyReward* GradeBattle::mutable_daily(int index) {
  return daily_.Mutable(index);
}
inline ::Grade::DailyReward* GradeBattle::add_daily() {
  return daily_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Grade::DailyReward >&
GradeBattle::daily() const {
  return daily_;
}
inline ::google::protobuf::RepeatedPtrField< ::Grade::DailyReward >*
GradeBattle::mutable_daily() {
  return &daily_;
}

// repeated .Grade.WinStreakReward win = 4;
inline int GradeBattle::win_size() const {
  return win_.size();
}
inline void GradeBattle::clear_win() {
  win_.Clear();
}
inline const ::Grade::WinStreakReward& GradeBattle::win(int index) const {
  return win_.Get(index);
}
inline ::Grade::WinStreakReward* GradeBattle::mutable_win(int index) {
  return win_.Mutable(index);
}
inline ::Grade::WinStreakReward* GradeBattle::add_win() {
  return win_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Grade::WinStreakReward >&
GradeBattle::win() const {
  return win_;
}
inline ::google::protobuf::RepeatedPtrField< ::Grade::WinStreakReward >*
GradeBattle::mutable_win() {
  return &win_;
}

// repeated .Grade.Factor factor = 5;
inline int GradeBattle::factor_size() const {
  return factor_.size();
}
inline void GradeBattle::clear_factor() {
  factor_.Clear();
}
inline const ::Grade::Factor& GradeBattle::factor(int index) const {
  return factor_.Get(index);
}
inline ::Grade::Factor* GradeBattle::mutable_factor(int index) {
  return factor_.Mutable(index);
}
inline ::Grade::Factor* GradeBattle::add_factor() {
  return factor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Grade::Factor >&
GradeBattle::factor() const {
  return factor_;
}
inline ::google::protobuf::RepeatedPtrField< ::Grade::Factor >*
GradeBattle::mutable_factor() {
  return &factor_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Grade

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Grade_2eproto__INCLUDED
