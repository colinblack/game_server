// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Combine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Combine {

namespace {

const ::google::protobuf::Descriptor* LimitsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttributesList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttributesList_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroCombine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroCombine_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroCombineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroCombineInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Combine_2eproto() {
  protobuf_AddDesc_Combine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Combine.proto");
  GOOGLE_CHECK(file != NULL);
  LimitsList_descriptor_ = file->message_type(0);
  static const int LimitsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitsList, star_),
  };
  LimitsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitsList_descriptor_,
      LimitsList::default_instance_,
      LimitsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitsList));
  AttributesList_descriptor_ = file->message_type(1);
  static const int AttributesList_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, critstrike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, critrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, critresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, hp_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, att_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, def_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, limit_),
  };
  AttributesList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttributesList_descriptor_,
      AttributesList::default_instance_,
      AttributesList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributesList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttributesList));
  HeroCombine_descriptor_ = file->message_type(2);
  static const int HeroCombine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCombine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCombine, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCombine, list_),
  };
  HeroCombine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroCombine_descriptor_,
      HeroCombine::default_instance_,
      HeroCombine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCombine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCombine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroCombine));
  HeroCombineInfo_descriptor_ = file->message_type(3);
  static const int HeroCombineInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCombineInfo, combineinfo_),
  };
  HeroCombineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroCombineInfo_descriptor_,
      HeroCombineInfo::default_instance_,
      HeroCombineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCombineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroCombineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroCombineInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Combine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitsList_descriptor_, &LimitsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttributesList_descriptor_, &AttributesList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroCombine_descriptor_, &HeroCombine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroCombineInfo_descriptor_, &HeroCombineInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Combine_2eproto() {
  delete LimitsList::default_instance_;
  delete LimitsList_reflection_;
  delete AttributesList::default_instance_;
  delete AttributesList_reflection_;
  delete HeroCombine::default_instance_;
  delete HeroCombine_reflection_;
  delete HeroCombineInfo::default_instance_;
  delete HeroCombineInfo_reflection_;
}

void protobuf_AddDesc_Combine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rCombine.proto\022\007Combine\"\032\n\nLimitsList\022\014"
    "\n\004star\030\001 \001(\r\"\361\001\n\016AttributesList\022\n\n\002hp\030\001 "
    "\001(\r\022\013\n\003att\030\002 \001(\r\022\013\n\003def\030\003 \001(\r\022\r\n\005first\030\004"
    " \001(\r\022\013\n\003hit\030\005 \001(\r\022\r\n\005dodge\030\006 \001(\r\022\022\n\ncrit"
    "Strike\030\007 \001(\r\022\020\n\010critRate\030\010 \001(\r\022\022\n\ncritRe"
    "sist\030\t \001(\r\022\016\n\006hp_add\030\n \001(\001\022\017\n\007att_add\030\013 "
    "\001(\001\022\017\n\007def_add\030\014 \001(\001\022\"\n\005limit\030\r \001(\0132\023.Co"
    "mbine.LimitsList\"P\n\013HeroCombine\022\n\n\002id\030\001 "
    "\002(\r\022\016\n\006heroid\030\002 \003(\r\022%\n\004list\030\003 \003(\0132\027.Comb"
    "ine.AttributesList\"<\n\017HeroCombineInfo\022)\n"
    "\013combineInfo\030\001 \003(\0132\024.Combine.HeroCombine", 440);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Combine.proto", &protobuf_RegisterTypes);
  LimitsList::default_instance_ = new LimitsList();
  AttributesList::default_instance_ = new AttributesList();
  HeroCombine::default_instance_ = new HeroCombine();
  HeroCombineInfo::default_instance_ = new HeroCombineInfo();
  LimitsList::default_instance_->InitAsDefaultInstance();
  AttributesList::default_instance_->InitAsDefaultInstance();
  HeroCombine::default_instance_->InitAsDefaultInstance();
  HeroCombineInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Combine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Combine_2eproto {
  StaticDescriptorInitializer_Combine_2eproto() {
    protobuf_AddDesc_Combine_2eproto();
  }
} static_descriptor_initializer_Combine_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LimitsList::kStarFieldNumber;
#endif  // !_MSC_VER

LimitsList::LimitsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitsList::InitAsDefaultInstance() {
}

LimitsList::LimitsList(const LimitsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitsList::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitsList::~LimitsList() {
  SharedDtor();
}

void LimitsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitsList_descriptor_;
}

const LimitsList& LimitsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combine_2eproto();  return *default_instance_;
}

LimitsList* LimitsList::default_instance_ = NULL;

LimitsList* LimitsList::New() const {
  return new LimitsList;
}

void LimitsList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 star = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitsList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitsList::MergeFrom(const LimitsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitsList::CopyFrom(const LimitsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitsList::IsInitialized() const {
  
  return true;
}

void LimitsList::Swap(LimitsList* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitsList_descriptor_;
  metadata.reflection = LimitsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttributesList::kHpFieldNumber;
const int AttributesList::kAttFieldNumber;
const int AttributesList::kDefFieldNumber;
const int AttributesList::kFirstFieldNumber;
const int AttributesList::kHitFieldNumber;
const int AttributesList::kDodgeFieldNumber;
const int AttributesList::kCritStrikeFieldNumber;
const int AttributesList::kCritRateFieldNumber;
const int AttributesList::kCritResistFieldNumber;
const int AttributesList::kHpAddFieldNumber;
const int AttributesList::kAttAddFieldNumber;
const int AttributesList::kDefAddFieldNumber;
const int AttributesList::kLimitFieldNumber;
#endif  // !_MSC_VER

AttributesList::AttributesList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttributesList::InitAsDefaultInstance() {
  limit_ = const_cast< ::Combine::LimitsList*>(&::Combine::LimitsList::default_instance());
}

AttributesList::AttributesList(const AttributesList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttributesList::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0u;
  att_ = 0u;
  def_ = 0u;
  first_ = 0u;
  hit_ = 0u;
  dodge_ = 0u;
  critstrike_ = 0u;
  critrate_ = 0u;
  critresist_ = 0u;
  hp_add_ = 0;
  att_add_ = 0;
  def_add_ = 0;
  limit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttributesList::~AttributesList() {
  SharedDtor();
}

void AttributesList::SharedDtor() {
  if (this != default_instance_) {
    delete limit_;
  }
}

void AttributesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttributesList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttributesList_descriptor_;
}

const AttributesList& AttributesList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combine_2eproto();  return *default_instance_;
}

AttributesList* AttributesList::default_instance_ = NULL;

AttributesList* AttributesList::New() const {
  return new AttributesList;
}

void AttributesList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0u;
    att_ = 0u;
    def_ = 0u;
    first_ = 0u;
    hit_ = 0u;
    dodge_ = 0u;
    critstrike_ = 0u;
    critrate_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    critresist_ = 0u;
    hp_add_ = 0;
    att_add_ = 0;
    def_add_ = 0;
    if (has_limit()) {
      if (limit_ != NULL) limit_->::Combine::LimitsList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttributesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_att;
        break;
      }
      
      // optional uint32 att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_)));
          set_has_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def;
        break;
      }
      
      // optional uint32 def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_first;
        break;
      }
      
      // optional uint32 first = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hit;
        break;
      }
      
      // optional uint32 hit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dodge;
        break;
      }
      
      // optional uint32 dodge = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_critStrike;
        break;
      }
      
      // optional uint32 critStrike = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critStrike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critstrike_)));
          set_has_critstrike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_critRate;
        break;
      }
      
      // optional uint32 critRate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critrate_)));
          set_has_critrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_critResist;
        break;
      }
      
      // optional uint32 critResist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critResist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critresist_)));
          set_has_critresist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_hp_add;
        break;
      }
      
      // optional double hp_add = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hp_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hp_add_)));
          set_has_hp_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_att_add;
        break;
      }
      
      // optional double att_add = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_att_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &att_add_)));
          set_has_att_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_def_add;
        break;
      }
      
      // optional double def_add = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_def_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &def_add_)));
          set_has_def_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_limit;
        break;
      }
      
      // optional .Combine.LimitsList limit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttributesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }
  
  // optional uint32 att = 2;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->att(), output);
  }
  
  // optional uint32 def = 3;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def(), output);
  }
  
  // optional uint32 first = 4;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->first(), output);
  }
  
  // optional uint32 hit = 5;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hit(), output);
  }
  
  // optional uint32 dodge = 6;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dodge(), output);
  }
  
  // optional uint32 critStrike = 7;
  if (has_critstrike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->critstrike(), output);
  }
  
  // optional uint32 critRate = 8;
  if (has_critrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->critrate(), output);
  }
  
  // optional uint32 critResist = 9;
  if (has_critresist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->critresist(), output);
  }
  
  // optional double hp_add = 10;
  if (has_hp_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->hp_add(), output);
  }
  
  // optional double att_add = 11;
  if (has_att_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->att_add(), output);
  }
  
  // optional double def_add = 12;
  if (has_def_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->def_add(), output);
  }
  
  // optional .Combine.LimitsList limit = 13;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttributesList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hp(), target);
  }
  
  // optional uint32 att = 2;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->att(), target);
  }
  
  // optional uint32 def = 3;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def(), target);
  }
  
  // optional uint32 first = 4;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->first(), target);
  }
  
  // optional uint32 hit = 5;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hit(), target);
  }
  
  // optional uint32 dodge = 6;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dodge(), target);
  }
  
  // optional uint32 critStrike = 7;
  if (has_critstrike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->critstrike(), target);
  }
  
  // optional uint32 critRate = 8;
  if (has_critrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->critrate(), target);
  }
  
  // optional uint32 critResist = 9;
  if (has_critresist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->critresist(), target);
  }
  
  // optional double hp_add = 10;
  if (has_hp_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->hp_add(), target);
  }
  
  // optional double att_add = 11;
  if (has_att_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->att_add(), target);
  }
  
  // optional double def_add = 12;
  if (has_def_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->def_add(), target);
  }
  
  // optional .Combine.LimitsList limit = 13;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttributesList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
    // optional uint32 att = 2;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att());
    }
    
    // optional uint32 def = 3;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }
    
    // optional uint32 first = 4;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }
    
    // optional uint32 hit = 5;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }
    
    // optional uint32 dodge = 6;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }
    
    // optional uint32 critStrike = 7;
    if (has_critstrike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critstrike());
    }
    
    // optional uint32 critRate = 8;
    if (has_critrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critrate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 critResist = 9;
    if (has_critresist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critresist());
    }
    
    // optional double hp_add = 10;
    if (has_hp_add()) {
      total_size += 1 + 8;
    }
    
    // optional double att_add = 11;
    if (has_att_add()) {
      total_size += 1 + 8;
    }
    
    // optional double def_add = 12;
    if (has_def_add()) {
      total_size += 1 + 8;
    }
    
    // optional .Combine.LimitsList limit = 13;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributesList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttributesList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttributesList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttributesList::MergeFrom(const AttributesList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_att()) {
      set_att(from.att());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_critstrike()) {
      set_critstrike(from.critstrike());
    }
    if (from.has_critrate()) {
      set_critrate(from.critrate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_critresist()) {
      set_critresist(from.critresist());
    }
    if (from.has_hp_add()) {
      set_hp_add(from.hp_add());
    }
    if (from.has_att_add()) {
      set_att_add(from.att_add());
    }
    if (from.has_def_add()) {
      set_def_add(from.def_add());
    }
    if (from.has_limit()) {
      mutable_limit()->::Combine::LimitsList::MergeFrom(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttributesList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributesList::CopyFrom(const AttributesList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributesList::IsInitialized() const {
  
  return true;
}

void AttributesList::Swap(AttributesList* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(att_, other->att_);
    std::swap(def_, other->def_);
    std::swap(first_, other->first_);
    std::swap(hit_, other->hit_);
    std::swap(dodge_, other->dodge_);
    std::swap(critstrike_, other->critstrike_);
    std::swap(critrate_, other->critrate_);
    std::swap(critresist_, other->critresist_);
    std::swap(hp_add_, other->hp_add_);
    std::swap(att_add_, other->att_add_);
    std::swap(def_add_, other->def_add_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttributesList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttributesList_descriptor_;
  metadata.reflection = AttributesList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroCombine::kIdFieldNumber;
const int HeroCombine::kHeroidFieldNumber;
const int HeroCombine::kListFieldNumber;
#endif  // !_MSC_VER

HeroCombine::HeroCombine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroCombine::InitAsDefaultInstance() {
}

HeroCombine::HeroCombine(const HeroCombine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroCombine::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroCombine::~HeroCombine() {
  SharedDtor();
}

void HeroCombine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroCombine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroCombine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroCombine_descriptor_;
}

const HeroCombine& HeroCombine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combine_2eproto();  return *default_instance_;
}

HeroCombine* HeroCombine::default_instance_ = NULL;

HeroCombine* HeroCombine::New() const {
  return new HeroCombine;
}

void HeroCombine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  heroid_.Clear();
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroCombine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }
      
      // repeated uint32 heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_heroid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }
      
      // repeated .Combine.AttributesList list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroCombine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->heroid(i), output);
  }
  
  // repeated .Combine.AttributesList list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroCombine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // repeated uint32 heroid = 2;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->heroid(i), target);
  }
  
  // repeated .Combine.AttributesList list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroCombine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  // repeated uint32 heroid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }
  
  // repeated .Combine.AttributesList list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroCombine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroCombine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroCombine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroCombine::MergeFrom(const HeroCombine& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroCombine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroCombine::CopyFrom(const HeroCombine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroCombine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HeroCombine::Swap(HeroCombine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    heroid_.Swap(&other->heroid_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroCombine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroCombine_descriptor_;
  metadata.reflection = HeroCombine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroCombineInfo::kCombineInfoFieldNumber;
#endif  // !_MSC_VER

HeroCombineInfo::HeroCombineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroCombineInfo::InitAsDefaultInstance() {
}

HeroCombineInfo::HeroCombineInfo(const HeroCombineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroCombineInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroCombineInfo::~HeroCombineInfo() {
  SharedDtor();
}

void HeroCombineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroCombineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroCombineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroCombineInfo_descriptor_;
}

const HeroCombineInfo& HeroCombineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Combine_2eproto();  return *default_instance_;
}

HeroCombineInfo* HeroCombineInfo::default_instance_ = NULL;

HeroCombineInfo* HeroCombineInfo::New() const {
  return new HeroCombineInfo;
}

void HeroCombineInfo::Clear() {
  combineinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroCombineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Combine.HeroCombine combineInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_combineinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_combineInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroCombineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Combine.HeroCombine combineInfo = 1;
  for (int i = 0; i < this->combineinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->combineinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroCombineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Combine.HeroCombine combineInfo = 1;
  for (int i = 0; i < this->combineinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->combineinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroCombineInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .Combine.HeroCombine combineInfo = 1;
  total_size += 1 * this->combineinfo_size();
  for (int i = 0; i < this->combineinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->combineinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroCombineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroCombineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroCombineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroCombineInfo::MergeFrom(const HeroCombineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  combineinfo_.MergeFrom(from.combineinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroCombineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroCombineInfo::CopyFrom(const HeroCombineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroCombineInfo::IsInitialized() const {
  
  for (int i = 0; i < combineinfo_size(); i++) {
    if (!this->combineinfo(i).IsInitialized()) return false;
  }
  return true;
}

void HeroCombineInfo::Swap(HeroCombineInfo* other) {
  if (other != this) {
    combineinfo_.Swap(&other->combineinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroCombineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroCombineInfo_descriptor_;
  metadata.reflection = HeroCombineInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Combine

// @@protoc_insertion_point(global_scope)
