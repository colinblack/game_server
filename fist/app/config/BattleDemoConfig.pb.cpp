// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BattleDemoConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BattleDemoConfig {

namespace {

const ::google::protobuf::Descriptor* BattleDemoConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleDemoConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BattleDemoConfig_2eproto() {
  protobuf_AddDesc_BattleDemoConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BattleDemoConfig.proto");
  GOOGLE_CHECK(file != NULL);
  BattleDemoConfig_descriptor_ = file->message_type(0);
  static const int BattleDemoConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, turn_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, dodge_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, dodge_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, dodge_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, dodge_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, crit_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, crit_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, crit_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, crit_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, crit_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, att_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, def_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, skill_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, slow_power_),
  };
  BattleDemoConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleDemoConfig_descriptor_,
      BattleDemoConfig::default_instance_,
      BattleDemoConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleDemoConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleDemoConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BattleDemoConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleDemoConfig_descriptor_, &BattleDemoConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BattleDemoConfig_2eproto() {
  delete BattleDemoConfig::default_instance_;
  delete BattleDemoConfig_reflection_;
}

void protobuf_AddDesc_BattleDemoConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026BattleDemoConfig.proto\022\020BattleDemoConf"
    "ig\"\207\002\n\020BattleDemoConfig\022\020\n\010turn_max\030\001 \002("
    "\r\022\017\n\007dodge_p\030\002 \002(\001\022\021\n\tdodge_max\030\003 \002(\r\022\021\n"
    "\tdodge_min\030\004 \002(\r\022\017\n\007dodge_c\030\005 \002(\r\022\016\n\006cri"
    "t_p\030\006 \002(\001\022\020\n\010crit_max\030\007 \002(\r\022\020\n\010crit_min\030"
    "\010 \002(\r\022\016\n\006crit_l\030\t \003(\r\022\016\n\006crit_c\030\n \003(\r\022\r\n"
    "\005att_p\030\013 \002(\001\022\r\n\005def_p\030\014 \002(\001\022\023\n\013skill_pow"
    "er\030\r \003(\r\022\022\n\nslow_power\030\016 \002(\r", 308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BattleDemoConfig.proto", &protobuf_RegisterTypes);
  BattleDemoConfig::default_instance_ = new BattleDemoConfig();
  BattleDemoConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BattleDemoConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BattleDemoConfig_2eproto {
  StaticDescriptorInitializer_BattleDemoConfig_2eproto() {
    protobuf_AddDesc_BattleDemoConfig_2eproto();
  }
} static_descriptor_initializer_BattleDemoConfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BattleDemoConfig::kTurnMaxFieldNumber;
const int BattleDemoConfig::kDodgePFieldNumber;
const int BattleDemoConfig::kDodgeMaxFieldNumber;
const int BattleDemoConfig::kDodgeMinFieldNumber;
const int BattleDemoConfig::kDodgeCFieldNumber;
const int BattleDemoConfig::kCritPFieldNumber;
const int BattleDemoConfig::kCritMaxFieldNumber;
const int BattleDemoConfig::kCritMinFieldNumber;
const int BattleDemoConfig::kCritLFieldNumber;
const int BattleDemoConfig::kCritCFieldNumber;
const int BattleDemoConfig::kAttPFieldNumber;
const int BattleDemoConfig::kDefPFieldNumber;
const int BattleDemoConfig::kSkillPowerFieldNumber;
const int BattleDemoConfig::kSlowPowerFieldNumber;
#endif  // !_MSC_VER

BattleDemoConfig::BattleDemoConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleDemoConfig::InitAsDefaultInstance() {
}

BattleDemoConfig::BattleDemoConfig(const BattleDemoConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleDemoConfig::SharedCtor() {
  _cached_size_ = 0;
  turn_max_ = 0u;
  dodge_p_ = 0;
  dodge_max_ = 0u;
  dodge_min_ = 0u;
  dodge_c_ = 0u;
  crit_p_ = 0;
  crit_max_ = 0u;
  crit_min_ = 0u;
  att_p_ = 0;
  def_p_ = 0;
  slow_power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleDemoConfig::~BattleDemoConfig() {
  SharedDtor();
}

void BattleDemoConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleDemoConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleDemoConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleDemoConfig_descriptor_;
}

const BattleDemoConfig& BattleDemoConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BattleDemoConfig_2eproto();  return *default_instance_;
}

BattleDemoConfig* BattleDemoConfig::default_instance_ = NULL;

BattleDemoConfig* BattleDemoConfig::New() const {
  return new BattleDemoConfig;
}

void BattleDemoConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    turn_max_ = 0u;
    dodge_p_ = 0;
    dodge_max_ = 0u;
    dodge_min_ = 0u;
    dodge_c_ = 0u;
    crit_p_ = 0;
    crit_max_ = 0u;
    crit_min_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    att_p_ = 0;
    def_p_ = 0;
    slow_power_ = 0u;
  }
  crit_l_.Clear();
  crit_c_.Clear();
  skill_power_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleDemoConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 turn_max = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_max_)));
          set_has_turn_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dodge_p;
        break;
      }
      
      // required double dodge_p = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dodge_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dodge_p_)));
          set_has_dodge_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dodge_max;
        break;
      }
      
      // required uint32 dodge_max = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_max_)));
          set_has_dodge_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dodge_min;
        break;
      }
      
      // required uint32 dodge_min = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_min_)));
          set_has_dodge_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dodge_c;
        break;
      }
      
      // required uint32 dodge_c = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_c_)));
          set_has_dodge_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_crit_p;
        break;
      }
      
      // required double crit_p = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_crit_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &crit_p_)));
          set_has_crit_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_crit_max;
        break;
      }
      
      // required uint32 crit_max = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_max_)));
          set_has_crit_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_crit_min;
        break;
      }
      
      // required uint32 crit_min = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_min_)));
          set_has_crit_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_crit_l;
        break;
      }
      
      // repeated uint32 crit_l = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_crit_l())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_crit_l())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_crit_l;
        if (input->ExpectTag(80)) goto parse_crit_c;
        break;
      }
      
      // repeated uint32 crit_c = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_crit_c())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_crit_c())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_crit_c;
        if (input->ExpectTag(89)) goto parse_att_p;
        break;
      }
      
      // required double att_p = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_att_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &att_p_)));
          set_has_att_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_def_p;
        break;
      }
      
      // required double def_p = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_def_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &def_p_)));
          set_has_def_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_skill_power;
        break;
      }
      
      // repeated uint32 skill_power = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_skill_power())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_power())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_skill_power;
        if (input->ExpectTag(112)) goto parse_slow_power;
        break;
      }
      
      // required uint32 slow_power = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slow_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slow_power_)));
          set_has_slow_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleDemoConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 turn_max = 1;
  if (has_turn_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->turn_max(), output);
  }
  
  // required double dodge_p = 2;
  if (has_dodge_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dodge_p(), output);
  }
  
  // required uint32 dodge_max = 3;
  if (has_dodge_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dodge_max(), output);
  }
  
  // required uint32 dodge_min = 4;
  if (has_dodge_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dodge_min(), output);
  }
  
  // required uint32 dodge_c = 5;
  if (has_dodge_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dodge_c(), output);
  }
  
  // required double crit_p = 6;
  if (has_crit_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->crit_p(), output);
  }
  
  // required uint32 crit_max = 7;
  if (has_crit_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->crit_max(), output);
  }
  
  // required uint32 crit_min = 8;
  if (has_crit_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->crit_min(), output);
  }
  
  // repeated uint32 crit_l = 9;
  for (int i = 0; i < this->crit_l_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->crit_l(i), output);
  }
  
  // repeated uint32 crit_c = 10;
  for (int i = 0; i < this->crit_c_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->crit_c(i), output);
  }
  
  // required double att_p = 11;
  if (has_att_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->att_p(), output);
  }
  
  // required double def_p = 12;
  if (has_def_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->def_p(), output);
  }
  
  // repeated uint32 skill_power = 13;
  for (int i = 0; i < this->skill_power_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->skill_power(i), output);
  }
  
  // required uint32 slow_power = 14;
  if (has_slow_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->slow_power(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleDemoConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 turn_max = 1;
  if (has_turn_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->turn_max(), target);
  }
  
  // required double dodge_p = 2;
  if (has_dodge_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dodge_p(), target);
  }
  
  // required uint32 dodge_max = 3;
  if (has_dodge_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dodge_max(), target);
  }
  
  // required uint32 dodge_min = 4;
  if (has_dodge_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dodge_min(), target);
  }
  
  // required uint32 dodge_c = 5;
  if (has_dodge_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dodge_c(), target);
  }
  
  // required double crit_p = 6;
  if (has_crit_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->crit_p(), target);
  }
  
  // required uint32 crit_max = 7;
  if (has_crit_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->crit_max(), target);
  }
  
  // required uint32 crit_min = 8;
  if (has_crit_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->crit_min(), target);
  }
  
  // repeated uint32 crit_l = 9;
  for (int i = 0; i < this->crit_l_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->crit_l(i), target);
  }
  
  // repeated uint32 crit_c = 10;
  for (int i = 0; i < this->crit_c_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->crit_c(i), target);
  }
  
  // required double att_p = 11;
  if (has_att_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->att_p(), target);
  }
  
  // required double def_p = 12;
  if (has_def_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->def_p(), target);
  }
  
  // repeated uint32 skill_power = 13;
  for (int i = 0; i < this->skill_power_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->skill_power(i), target);
  }
  
  // required uint32 slow_power = 14;
  if (has_slow_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->slow_power(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleDemoConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 turn_max = 1;
    if (has_turn_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_max());
    }
    
    // required double dodge_p = 2;
    if (has_dodge_p()) {
      total_size += 1 + 8;
    }
    
    // required uint32 dodge_max = 3;
    if (has_dodge_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge_max());
    }
    
    // required uint32 dodge_min = 4;
    if (has_dodge_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge_min());
    }
    
    // required uint32 dodge_c = 5;
    if (has_dodge_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge_c());
    }
    
    // required double crit_p = 6;
    if (has_crit_p()) {
      total_size += 1 + 8;
    }
    
    // required uint32 crit_max = 7;
    if (has_crit_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crit_max());
    }
    
    // required uint32 crit_min = 8;
    if (has_crit_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crit_min());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required double att_p = 11;
    if (has_att_p()) {
      total_size += 1 + 8;
    }
    
    // required double def_p = 12;
    if (has_def_p()) {
      total_size += 1 + 8;
    }
    
    // required uint32 slow_power = 14;
    if (has_slow_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slow_power());
    }
    
  }
  // repeated uint32 crit_l = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->crit_l_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->crit_l(i));
    }
    total_size += 1 * this->crit_l_size() + data_size;
  }
  
  // repeated uint32 crit_c = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->crit_c_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->crit_c(i));
    }
    total_size += 1 * this->crit_c_size() + data_size;
  }
  
  // repeated uint32 skill_power = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_power_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skill_power(i));
    }
    total_size += 1 * this->skill_power_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleDemoConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleDemoConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleDemoConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleDemoConfig::MergeFrom(const BattleDemoConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  crit_l_.MergeFrom(from.crit_l_);
  crit_c_.MergeFrom(from.crit_c_);
  skill_power_.MergeFrom(from.skill_power_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_turn_max()) {
      set_turn_max(from.turn_max());
    }
    if (from.has_dodge_p()) {
      set_dodge_p(from.dodge_p());
    }
    if (from.has_dodge_max()) {
      set_dodge_max(from.dodge_max());
    }
    if (from.has_dodge_min()) {
      set_dodge_min(from.dodge_min());
    }
    if (from.has_dodge_c()) {
      set_dodge_c(from.dodge_c());
    }
    if (from.has_crit_p()) {
      set_crit_p(from.crit_p());
    }
    if (from.has_crit_max()) {
      set_crit_max(from.crit_max());
    }
    if (from.has_crit_min()) {
      set_crit_min(from.crit_min());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_att_p()) {
      set_att_p(from.att_p());
    }
    if (from.has_def_p()) {
      set_def_p(from.def_p());
    }
    if (from.has_slow_power()) {
      set_slow_power(from.slow_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleDemoConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleDemoConfig::CopyFrom(const BattleDemoConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleDemoConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00002cff) != 0x00002cff) return false;
  
  return true;
}

void BattleDemoConfig::Swap(BattleDemoConfig* other) {
  if (other != this) {
    std::swap(turn_max_, other->turn_max_);
    std::swap(dodge_p_, other->dodge_p_);
    std::swap(dodge_max_, other->dodge_max_);
    std::swap(dodge_min_, other->dodge_min_);
    std::swap(dodge_c_, other->dodge_c_);
    std::swap(crit_p_, other->crit_p_);
    std::swap(crit_max_, other->crit_max_);
    std::swap(crit_min_, other->crit_min_);
    crit_l_.Swap(&other->crit_l_);
    crit_c_.Swap(&other->crit_c_);
    std::swap(att_p_, other->att_p_);
    std::swap(def_p_, other->def_p_);
    skill_power_.Swap(&other->skill_power_);
    std::swap(slow_power_, other->slow_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleDemoConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleDemoConfig_descriptor_;
  metadata.reflection = BattleDemoConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BattleDemoConfig

// @@protoc_insertion_point(global_scope)
