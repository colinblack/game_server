// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoHero.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoHero {

namespace {

const ::google::protobuf::Descriptor* HeroBaseInfoCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroBaseInfoCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyHeroResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyHeroResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeHeroByCoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeHeroByCoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeHeroByCoinResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeHeroByCoinResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpGradeHeroSkillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpGradeHeroSkillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpGradeHeroSkillResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpGradeHeroSkillResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpGradeHeroStarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpGradeHeroStarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpGradeHeroStarResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpGradeHeroStarResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetHeroResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetHeroResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActArchiveChipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActArchiveChipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActArchiveChipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActArchiveChipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArchiveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArchiveRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArchiveRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArchiveRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActDragonBallReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActDragonBallReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoActDragonBallResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoActDragonBallResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBuyHeroShareRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBuyHeroShareRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBuyHeroShareRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBuyHeroShareRewardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoHero_2eproto() {
  protobuf_AddDesc_ProtoHero_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoHero.proto");
  GOOGLE_CHECK(file != NULL);
  HeroBaseInfoCPP_descriptor_ = file->message_type(0);
  static const int HeroBaseInfoCPP_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, addexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, critstrike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, critrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, critresist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, dragonball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, stars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, detachuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, detachslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, battlepower_),
  };
  HeroBaseInfoCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroBaseInfoCPP_descriptor_,
      HeroBaseInfoCPP::default_instance_,
      HeroBaseInfoCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroBaseInfoCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroBaseInfoCPP));
  BuyHeroReq_descriptor_ = file->message_type(1);
  static const int BuyHeroReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHeroReq, heroid_),
  };
  BuyHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyHeroReq_descriptor_,
      BuyHeroReq::default_instance_,
      BuyHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyHeroReq));
  BuyHeroResp_descriptor_ = file->message_type(2);
  static const int BuyHeroResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHeroResp, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHeroResp, commons_),
  };
  BuyHeroResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyHeroResp_descriptor_,
      BuyHeroResp::default_instance_,
      BuyHeroResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHeroResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHeroResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyHeroResp));
  UpgradeHeroByCoinReq_descriptor_ = file->message_type(3);
  static const int UpgradeHeroByCoinReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeHeroByCoinReq, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeHeroByCoinReq, oneclick_),
  };
  UpgradeHeroByCoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeHeroByCoinReq_descriptor_,
      UpgradeHeroByCoinReq::default_instance_,
      UpgradeHeroByCoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeHeroByCoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeHeroByCoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeHeroByCoinReq));
  UpgradeHeroByCoinResp_descriptor_ = file->message_type(4);
  static const int UpgradeHeroByCoinResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeHeroByCoinResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeHeroByCoinResp, hero_),
  };
  UpgradeHeroByCoinResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeHeroByCoinResp_descriptor_,
      UpgradeHeroByCoinResp::default_instance_,
      UpgradeHeroByCoinResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeHeroByCoinResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeHeroByCoinResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeHeroByCoinResp));
  UpGradeHeroSkillReq_descriptor_ = file->message_type(5);
  static const int UpGradeHeroSkillReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroSkillReq, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroSkillReq, skillid_),
  };
  UpGradeHeroSkillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpGradeHeroSkillReq_descriptor_,
      UpGradeHeroSkillReq::default_instance_,
      UpGradeHeroSkillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroSkillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroSkillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpGradeHeroSkillReq));
  UpGradeHeroSkillResp_descriptor_ = file->message_type(6);
  static const int UpGradeHeroSkillResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroSkillResp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroSkillResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroSkillResp, battlepower_),
  };
  UpGradeHeroSkillResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpGradeHeroSkillResp_descriptor_,
      UpGradeHeroSkillResp::default_instance_,
      UpGradeHeroSkillResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroSkillResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroSkillResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpGradeHeroSkillResp));
  UpGradeHeroStarReq_descriptor_ = file->message_type(7);
  static const int UpGradeHeroStarReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroStarReq, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroStarReq, starid_),
  };
  UpGradeHeroStarReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpGradeHeroStarReq_descriptor_,
      UpGradeHeroStarReq::default_instance_,
      UpGradeHeroStarReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroStarReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroStarReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpGradeHeroStarReq));
  UpGradeHeroStarResp_descriptor_ = file->message_type(8);
  static const int UpGradeHeroStarResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroStarResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroStarResp, hero_),
  };
  UpGradeHeroStarResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpGradeHeroStarResp_descriptor_,
      UpGradeHeroStarResp::default_instance_,
      UpGradeHeroStarResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroStarResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpGradeHeroStarResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpGradeHeroStarResp));
  SetHeroReq_descriptor_ = file->message_type(9);
  static const int SetHeroReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetHeroReq, heroid_),
  };
  SetHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetHeroReq_descriptor_,
      SetHeroReq::default_instance_,
      SetHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetHeroReq));
  SetHeroResp_descriptor_ = file->message_type(10);
  static const int SetHeroResp_offsets_[1] = {
  };
  SetHeroResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetHeroResp_descriptor_,
      SetHeroResp::default_instance_,
      SetHeroResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetHeroResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetHeroResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetHeroResp));
  ActArchiveChipReq_descriptor_ = file->message_type(11);
  static const int ActArchiveChipReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActArchiveChipReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActArchiveChipReq, act_),
  };
  ActArchiveChipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActArchiveChipReq_descriptor_,
      ActArchiveChipReq::default_instance_,
      ActArchiveChipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActArchiveChipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActArchiveChipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActArchiveChipReq));
  ActArchiveChipResp_descriptor_ = file->message_type(12);
  static const int ActArchiveChipResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActArchiveChipResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActArchiveChipResp, hero_),
  };
  ActArchiveChipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActArchiveChipResp_descriptor_,
      ActArchiveChipResp::default_instance_,
      ActArchiveChipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActArchiveChipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActArchiveChipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActArchiveChipResp));
  ArchiveRewardReq_descriptor_ = file->message_type(13);
  static const int ArchiveRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRewardReq, id_),
  };
  ArchiveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArchiveRewardReq_descriptor_,
      ArchiveRewardReq::default_instance_,
      ArchiveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArchiveRewardReq));
  ArchiveRewardResp_descriptor_ = file->message_type(14);
  static const int ArchiveRewardResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRewardResp, commons_),
  };
  ArchiveRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArchiveRewardResp_descriptor_,
      ArchiveRewardResp::default_instance_,
      ArchiveRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArchiveRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArchiveRewardResp));
  ProtoActDragonBallReq_descriptor_ = file->message_type(15);
  static const int ProtoActDragonBallReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActDragonBallReq, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActDragonBallReq, idx_),
  };
  ProtoActDragonBallReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActDragonBallReq_descriptor_,
      ProtoActDragonBallReq::default_instance_,
      ProtoActDragonBallReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActDragonBallReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActDragonBallReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActDragonBallReq));
  ProtoActDragonBallResp_descriptor_ = file->message_type(16);
  static const int ProtoActDragonBallResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActDragonBallResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActDragonBallResp, hero_),
  };
  ProtoActDragonBallResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoActDragonBallResp_descriptor_,
      ProtoActDragonBallResp::default_instance_,
      ProtoActDragonBallResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActDragonBallResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoActDragonBallResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoActDragonBallResp));
  ProtoBuyHeroShareRewardReq_descriptor_ = file->message_type(17);
  static const int ProtoBuyHeroShareRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyHeroShareRewardReq, heroid_),
  };
  ProtoBuyHeroShareRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBuyHeroShareRewardReq_descriptor_,
      ProtoBuyHeroShareRewardReq::default_instance_,
      ProtoBuyHeroShareRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyHeroShareRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyHeroShareRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBuyHeroShareRewardReq));
  ProtoBuyHeroShareRewardResp_descriptor_ = file->message_type(18);
  static const int ProtoBuyHeroShareRewardResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyHeroShareRewardResp, commons_),
  };
  ProtoBuyHeroShareRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBuyHeroShareRewardResp_descriptor_,
      ProtoBuyHeroShareRewardResp::default_instance_,
      ProtoBuyHeroShareRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyHeroShareRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBuyHeroShareRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBuyHeroShareRewardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoHero_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroBaseInfoCPP_descriptor_, &HeroBaseInfoCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyHeroReq_descriptor_, &BuyHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyHeroResp_descriptor_, &BuyHeroResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeHeroByCoinReq_descriptor_, &UpgradeHeroByCoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeHeroByCoinResp_descriptor_, &UpgradeHeroByCoinResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpGradeHeroSkillReq_descriptor_, &UpGradeHeroSkillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpGradeHeroSkillResp_descriptor_, &UpGradeHeroSkillResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpGradeHeroStarReq_descriptor_, &UpGradeHeroStarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpGradeHeroStarResp_descriptor_, &UpGradeHeroStarResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetHeroReq_descriptor_, &SetHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetHeroResp_descriptor_, &SetHeroResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActArchiveChipReq_descriptor_, &ActArchiveChipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActArchiveChipResp_descriptor_, &ActArchiveChipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArchiveRewardReq_descriptor_, &ArchiveRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArchiveRewardResp_descriptor_, &ArchiveRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActDragonBallReq_descriptor_, &ProtoActDragonBallReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoActDragonBallResp_descriptor_, &ProtoActDragonBallResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBuyHeroShareRewardReq_descriptor_, &ProtoBuyHeroShareRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBuyHeroShareRewardResp_descriptor_, &ProtoBuyHeroShareRewardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoHero_2eproto() {
  delete HeroBaseInfoCPP::default_instance_;
  delete HeroBaseInfoCPP_reflection_;
  delete BuyHeroReq::default_instance_;
  delete BuyHeroReq_reflection_;
  delete BuyHeroResp::default_instance_;
  delete BuyHeroResp_reflection_;
  delete UpgradeHeroByCoinReq::default_instance_;
  delete UpgradeHeroByCoinReq_reflection_;
  delete UpgradeHeroByCoinResp::default_instance_;
  delete UpgradeHeroByCoinResp_reflection_;
  delete UpGradeHeroSkillReq::default_instance_;
  delete UpGradeHeroSkillReq_reflection_;
  delete UpGradeHeroSkillResp::default_instance_;
  delete UpGradeHeroSkillResp_reflection_;
  delete UpGradeHeroStarReq::default_instance_;
  delete UpGradeHeroStarReq_reflection_;
  delete UpGradeHeroStarResp::default_instance_;
  delete UpGradeHeroStarResp_reflection_;
  delete SetHeroReq::default_instance_;
  delete SetHeroReq_reflection_;
  delete SetHeroResp::default_instance_;
  delete SetHeroResp_reflection_;
  delete ActArchiveChipReq::default_instance_;
  delete ActArchiveChipReq_reflection_;
  delete ActArchiveChipResp::default_instance_;
  delete ActArchiveChipResp_reflection_;
  delete ArchiveRewardReq::default_instance_;
  delete ArchiveRewardReq_reflection_;
  delete ArchiveRewardResp::default_instance_;
  delete ArchiveRewardResp_reflection_;
  delete ProtoActDragonBallReq::default_instance_;
  delete ProtoActDragonBallReq_reflection_;
  delete ProtoActDragonBallResp::default_instance_;
  delete ProtoActDragonBallResp_reflection_;
  delete ProtoBuyHeroShareRewardReq::default_instance_;
  delete ProtoBuyHeroShareRewardReq_reflection_;
  delete ProtoBuyHeroShareRewardResp::default_instance_;
  delete ProtoBuyHeroShareRewardResp_reflection_;
}

void protobuf_AddDesc_ProtoHero_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoHero.proto\022\tProtoHero\032\020DataCommon"
    ".proto\"\306\002\n\017HeroBaseInfoCPP\022\016\n\006heroid\030\001 \002"
    "(\r\022\013\n\003exp\030\002 \001(\004\022\016\n\006addExp\030\003 \001(\r\022\r\n\005level"
    "\030\004 \001(\r\022\n\n\002hp\030\005 \001(\r\022\013\n\003att\030\006 \001(\r\022\013\n\003def\030\007"
    " \001(\r\022\r\n\005first\030\010 \001(\r\022\013\n\003hit\030\t \001(\r\022\r\n\005dodg"
    "e\030\n \001(\r\022\022\n\ncritStrike\030\013 \001(\r\022\020\n\010critRate\030"
    "\014 \001(\r\022\022\n\ncritResist\030\r \001(\r\022\022\n\ndragonBall\030"
    "\016 \001(\r\022\r\n\005stars\030\017 \001(\r\022\r\n\005skill\030\020 \003(\r\022\021\n\td"
    "etachUid\030\021 \001(\r\022\022\n\ndetachSlot\030\022 \001(\r\022\023\n\013ba"
    "ttlePower\030\023 \001(\r\"\034\n\nBuyHeroReq\022\016\n\006heroid\030"
    "\001 \002(\r\"d\n\013BuyHeroResp\022(\n\004hero\030\001 \002(\0132\032.Pro"
    "toHero.HeroBaseInfoCPP\022+\n\007commons\030\002 \002(\0132"
    "\032.DataCommon.CommonItemsCPP\"8\n\024UpgradeHe"
    "roByCoinReq\022\016\n\006heroid\030\001 \002(\r\022\020\n\010oneclick\030"
    "\002 \002(\r\"n\n\025UpgradeHeroByCoinResp\022+\n\007common"
    "s\030\001 \002(\0132\032.DataCommon.CommonItemsCPP\022(\n\004h"
    "ero\030\002 \002(\0132\032.ProtoHero.HeroBaseInfoCPP\"6\n"
    "\023UpGradeHeroSkillReq\022\016\n\006heroid\030\001 \002(\r\022\017\n\007"
    "skillid\030\002 \002(\r\"g\n\024UpGradeHeroSkillResp\022\r\n"
    "\005level\030\001 \002(\r\022+\n\007commons\030\002 \002(\0132\032.DataComm"
    "on.CommonItemsCPP\022\023\n\013battlePower\030\003 \002(\r\"4"
    "\n\022UpGradeHeroStarReq\022\016\n\006heroid\030\001 \002(\r\022\016\n\006"
    "starid\030\002 \002(\r\"l\n\023UpGradeHeroStarResp\022+\n\007c"
    "ommons\030\001 \002(\0132\032.DataCommon.CommonItemsCPP"
    "\022(\n\004hero\030\002 \002(\0132\032.ProtoHero.HeroBaseInfoC"
    "PP\"\034\n\nSetHeroReq\022\016\n\006heroid\030\001 \002(\r\"\r\n\013SetH"
    "eroResp\",\n\021ActArchiveChipReq\022\n\n\002id\030\001 \002(\r"
    "\022\013\n\003act\030\002 \002(\r\"k\n\022ActArchiveChipResp\022+\n\007c"
    "ommons\030\001 \002(\0132\032.DataCommon.CommonItemsCPP"
    "\022(\n\004hero\030\002 \001(\0132\032.ProtoHero.HeroBaseInfoC"
    "PP\"\036\n\020ArchiveRewardReq\022\n\n\002id\030\001 \002(\r\"@\n\021Ar"
    "chiveRewardResp\022+\n\007commons\030\001 \002(\0132\032.DataC"
    "ommon.CommonItemsCPP\"4\n\025ProtoActDragonBa"
    "llReq\022\016\n\006heroid\030\001 \002(\r\022\013\n\003idx\030\002 \002(\r\"o\n\026Pr"
    "otoActDragonBallResp\022+\n\007commons\030\001 \002(\0132\032."
    "DataCommon.CommonItemsCPP\022(\n\004hero\030\002 \002(\0132"
    "\032.ProtoHero.HeroBaseInfoCPP\",\n\032ProtoBuyH"
    "eroShareRewardReq\022\016\n\006heroid\030\001 \002(\r\"J\n\033Pro"
    "toBuyHeroShareRewardResp\022+\n\007commons\030\001 \002("
    "\0132\032.DataCommon.CommonItemsCPP", 1589);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoHero.proto", &protobuf_RegisterTypes);
  HeroBaseInfoCPP::default_instance_ = new HeroBaseInfoCPP();
  BuyHeroReq::default_instance_ = new BuyHeroReq();
  BuyHeroResp::default_instance_ = new BuyHeroResp();
  UpgradeHeroByCoinReq::default_instance_ = new UpgradeHeroByCoinReq();
  UpgradeHeroByCoinResp::default_instance_ = new UpgradeHeroByCoinResp();
  UpGradeHeroSkillReq::default_instance_ = new UpGradeHeroSkillReq();
  UpGradeHeroSkillResp::default_instance_ = new UpGradeHeroSkillResp();
  UpGradeHeroStarReq::default_instance_ = new UpGradeHeroStarReq();
  UpGradeHeroStarResp::default_instance_ = new UpGradeHeroStarResp();
  SetHeroReq::default_instance_ = new SetHeroReq();
  SetHeroResp::default_instance_ = new SetHeroResp();
  ActArchiveChipReq::default_instance_ = new ActArchiveChipReq();
  ActArchiveChipResp::default_instance_ = new ActArchiveChipResp();
  ArchiveRewardReq::default_instance_ = new ArchiveRewardReq();
  ArchiveRewardResp::default_instance_ = new ArchiveRewardResp();
  ProtoActDragonBallReq::default_instance_ = new ProtoActDragonBallReq();
  ProtoActDragonBallResp::default_instance_ = new ProtoActDragonBallResp();
  ProtoBuyHeroShareRewardReq::default_instance_ = new ProtoBuyHeroShareRewardReq();
  ProtoBuyHeroShareRewardResp::default_instance_ = new ProtoBuyHeroShareRewardResp();
  HeroBaseInfoCPP::default_instance_->InitAsDefaultInstance();
  BuyHeroReq::default_instance_->InitAsDefaultInstance();
  BuyHeroResp::default_instance_->InitAsDefaultInstance();
  UpgradeHeroByCoinReq::default_instance_->InitAsDefaultInstance();
  UpgradeHeroByCoinResp::default_instance_->InitAsDefaultInstance();
  UpGradeHeroSkillReq::default_instance_->InitAsDefaultInstance();
  UpGradeHeroSkillResp::default_instance_->InitAsDefaultInstance();
  UpGradeHeroStarReq::default_instance_->InitAsDefaultInstance();
  UpGradeHeroStarResp::default_instance_->InitAsDefaultInstance();
  SetHeroReq::default_instance_->InitAsDefaultInstance();
  SetHeroResp::default_instance_->InitAsDefaultInstance();
  ActArchiveChipReq::default_instance_->InitAsDefaultInstance();
  ActArchiveChipResp::default_instance_->InitAsDefaultInstance();
  ArchiveRewardReq::default_instance_->InitAsDefaultInstance();
  ArchiveRewardResp::default_instance_->InitAsDefaultInstance();
  ProtoActDragonBallReq::default_instance_->InitAsDefaultInstance();
  ProtoActDragonBallResp::default_instance_->InitAsDefaultInstance();
  ProtoBuyHeroShareRewardReq::default_instance_->InitAsDefaultInstance();
  ProtoBuyHeroShareRewardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoHero_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoHero_2eproto {
  StaticDescriptorInitializer_ProtoHero_2eproto() {
    protobuf_AddDesc_ProtoHero_2eproto();
  }
} static_descriptor_initializer_ProtoHero_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int HeroBaseInfoCPP::kHeroidFieldNumber;
const int HeroBaseInfoCPP::kExpFieldNumber;
const int HeroBaseInfoCPP::kAddExpFieldNumber;
const int HeroBaseInfoCPP::kLevelFieldNumber;
const int HeroBaseInfoCPP::kHpFieldNumber;
const int HeroBaseInfoCPP::kAttFieldNumber;
const int HeroBaseInfoCPP::kDefFieldNumber;
const int HeroBaseInfoCPP::kFirstFieldNumber;
const int HeroBaseInfoCPP::kHitFieldNumber;
const int HeroBaseInfoCPP::kDodgeFieldNumber;
const int HeroBaseInfoCPP::kCritStrikeFieldNumber;
const int HeroBaseInfoCPP::kCritRateFieldNumber;
const int HeroBaseInfoCPP::kCritResistFieldNumber;
const int HeroBaseInfoCPP::kDragonBallFieldNumber;
const int HeroBaseInfoCPP::kStarsFieldNumber;
const int HeroBaseInfoCPP::kSkillFieldNumber;
const int HeroBaseInfoCPP::kDetachUidFieldNumber;
const int HeroBaseInfoCPP::kDetachSlotFieldNumber;
const int HeroBaseInfoCPP::kBattlePowerFieldNumber;
#endif  // !_MSC_VER

HeroBaseInfoCPP::HeroBaseInfoCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroBaseInfoCPP::InitAsDefaultInstance() {
}

HeroBaseInfoCPP::HeroBaseInfoCPP(const HeroBaseInfoCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroBaseInfoCPP::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  addexp_ = 0u;
  level_ = 0u;
  hp_ = 0u;
  att_ = 0u;
  def_ = 0u;
  first_ = 0u;
  hit_ = 0u;
  dodge_ = 0u;
  critstrike_ = 0u;
  critrate_ = 0u;
  critresist_ = 0u;
  dragonball_ = 0u;
  stars_ = 0u;
  detachuid_ = 0u;
  detachslot_ = 0u;
  battlepower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroBaseInfoCPP::~HeroBaseInfoCPP() {
  SharedDtor();
}

void HeroBaseInfoCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroBaseInfoCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroBaseInfoCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroBaseInfoCPP_descriptor_;
}

const HeroBaseInfoCPP& HeroBaseInfoCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

HeroBaseInfoCPP* HeroBaseInfoCPP::default_instance_ = NULL;

HeroBaseInfoCPP* HeroBaseInfoCPP::New() const {
  return new HeroBaseInfoCPP;
}

void HeroBaseInfoCPP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    addexp_ = 0u;
    level_ = 0u;
    hp_ = 0u;
    att_ = 0u;
    def_ = 0u;
    first_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hit_ = 0u;
    dodge_ = 0u;
    critstrike_ = 0u;
    critrate_ = 0u;
    critresist_ = 0u;
    dragonball_ = 0u;
    stars_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    detachuid_ = 0u;
    detachslot_ = 0u;
    battlepower_ = 0u;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroBaseInfoCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }
      
      // optional uint64 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addExp;
        break;
      }
      
      // optional uint32 addExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }
      
      // optional uint32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_att;
        break;
      }
      
      // optional uint32 att = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_)));
          set_has_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_def;
        break;
      }
      
      // optional uint32 def = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_first;
        break;
      }
      
      // optional uint32 first = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hit;
        break;
      }
      
      // optional uint32 hit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dodge;
        break;
      }
      
      // optional uint32 dodge = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_critStrike;
        break;
      }
      
      // optional uint32 critStrike = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critStrike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critstrike_)));
          set_has_critstrike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_critRate;
        break;
      }
      
      // optional uint32 critRate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critrate_)));
          set_has_critrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_critResist;
        break;
      }
      
      // optional uint32 critResist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critResist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critresist_)));
          set_has_critresist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dragonBall;
        break;
      }
      
      // optional uint32 dragonBall = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dragonBall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dragonball_)));
          set_has_dragonball();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_stars;
        break;
      }
      
      // optional uint32 stars = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stars_)));
          set_has_stars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_skill;
        break;
      }
      
      // repeated uint32 skill = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 128, input, this->mutable_skill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_skill;
        if (input->ExpectTag(136)) goto parse_detachUid;
        break;
      }
      
      // optional uint32 detachUid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detachUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &detachuid_)));
          set_has_detachuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_detachSlot;
        break;
      }
      
      // optional uint32 detachSlot = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detachSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &detachslot_)));
          set_has_detachslot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_battlePower;
        break;
      }
      
      // optional uint32 battlePower = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroBaseInfoCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  // optional uint64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exp(), output);
  }
  
  // optional uint32 addExp = 3;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addexp(), output);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }
  
  // optional uint32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hp(), output);
  }
  
  // optional uint32 att = 6;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->att(), output);
  }
  
  // optional uint32 def = 7;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->def(), output);
  }
  
  // optional uint32 first = 8;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->first(), output);
  }
  
  // optional uint32 hit = 9;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hit(), output);
  }
  
  // optional uint32 dodge = 10;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dodge(), output);
  }
  
  // optional uint32 critStrike = 11;
  if (has_critstrike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->critstrike(), output);
  }
  
  // optional uint32 critRate = 12;
  if (has_critrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->critrate(), output);
  }
  
  // optional uint32 critResist = 13;
  if (has_critresist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->critresist(), output);
  }
  
  // optional uint32 dragonBall = 14;
  if (has_dragonball()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dragonball(), output);
  }
  
  // optional uint32 stars = 15;
  if (has_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->stars(), output);
  }
  
  // repeated uint32 skill = 16;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      16, this->skill(i), output);
  }
  
  // optional uint32 detachUid = 17;
  if (has_detachuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->detachuid(), output);
  }
  
  // optional uint32 detachSlot = 18;
  if (has_detachslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->detachslot(), output);
  }
  
  // optional uint32 battlePower = 19;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->battlepower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroBaseInfoCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  // optional uint64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->exp(), target);
  }
  
  // optional uint32 addExp = 3;
  if (has_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addexp(), target);
  }
  
  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }
  
  // optional uint32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hp(), target);
  }
  
  // optional uint32 att = 6;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->att(), target);
  }
  
  // optional uint32 def = 7;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->def(), target);
  }
  
  // optional uint32 first = 8;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->first(), target);
  }
  
  // optional uint32 hit = 9;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->hit(), target);
  }
  
  // optional uint32 dodge = 10;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dodge(), target);
  }
  
  // optional uint32 critStrike = 11;
  if (has_critstrike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->critstrike(), target);
  }
  
  // optional uint32 critRate = 12;
  if (has_critrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->critrate(), target);
  }
  
  // optional uint32 critResist = 13;
  if (has_critresist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->critresist(), target);
  }
  
  // optional uint32 dragonBall = 14;
  if (has_dragonball()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dragonball(), target);
  }
  
  // optional uint32 stars = 15;
  if (has_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->stars(), target);
  }
  
  // repeated uint32 skill = 16;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(16, this->skill(i), target);
  }
  
  // optional uint32 detachUid = 17;
  if (has_detachuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->detachuid(), target);
  }
  
  // optional uint32 detachSlot = 18;
  if (has_detachslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->detachslot(), target);
  }
  
  // optional uint32 battlePower = 19;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->battlepower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroBaseInfoCPP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // optional uint64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }
    
    // optional uint32 addExp = 3;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addexp());
    }
    
    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
    // optional uint32 att = 6;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att());
    }
    
    // optional uint32 def = 7;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }
    
    // optional uint32 first = 8;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 hit = 9;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }
    
    // optional uint32 dodge = 10;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }
    
    // optional uint32 critStrike = 11;
    if (has_critstrike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critstrike());
    }
    
    // optional uint32 critRate = 12;
    if (has_critrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critrate());
    }
    
    // optional uint32 critResist = 13;
    if (has_critresist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critresist());
    }
    
    // optional uint32 dragonBall = 14;
    if (has_dragonball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dragonball());
    }
    
    // optional uint32 stars = 15;
    if (has_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stars());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 detachUid = 17;
    if (has_detachuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->detachuid());
    }
    
    // optional uint32 detachSlot = 18;
    if (has_detachslot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->detachslot());
    }
    
    // optional uint32 battlePower = 19;
    if (has_battlepower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }
    
  }
  // repeated uint32 skill = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skill(i));
    }
    total_size += 2 * this->skill_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroBaseInfoCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroBaseInfoCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroBaseInfoCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroBaseInfoCPP::MergeFrom(const HeroBaseInfoCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_att()) {
      set_att(from.att());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_critstrike()) {
      set_critstrike(from.critstrike());
    }
    if (from.has_critrate()) {
      set_critrate(from.critrate());
    }
    if (from.has_critresist()) {
      set_critresist(from.critresist());
    }
    if (from.has_dragonball()) {
      set_dragonball(from.dragonball());
    }
    if (from.has_stars()) {
      set_stars(from.stars());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_detachuid()) {
      set_detachuid(from.detachuid());
    }
    if (from.has_detachslot()) {
      set_detachslot(from.detachslot());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroBaseInfoCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroBaseInfoCPP::CopyFrom(const HeroBaseInfoCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroBaseInfoCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void HeroBaseInfoCPP::Swap(HeroBaseInfoCPP* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(exp_, other->exp_);
    std::swap(addexp_, other->addexp_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(att_, other->att_);
    std::swap(def_, other->def_);
    std::swap(first_, other->first_);
    std::swap(hit_, other->hit_);
    std::swap(dodge_, other->dodge_);
    std::swap(critstrike_, other->critstrike_);
    std::swap(critrate_, other->critrate_);
    std::swap(critresist_, other->critresist_);
    std::swap(dragonball_, other->dragonball_);
    std::swap(stars_, other->stars_);
    skill_.Swap(&other->skill_);
    std::swap(detachuid_, other->detachuid_);
    std::swap(detachslot_, other->detachslot_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroBaseInfoCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroBaseInfoCPP_descriptor_;
  metadata.reflection = HeroBaseInfoCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyHeroReq::kHeroidFieldNumber;
#endif  // !_MSC_VER

BuyHeroReq::BuyHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyHeroReq::InitAsDefaultInstance() {
}

BuyHeroReq::BuyHeroReq(const BuyHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyHeroReq::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyHeroReq::~BuyHeroReq() {
  SharedDtor();
}

void BuyHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyHeroReq_descriptor_;
}

const BuyHeroReq& BuyHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

BuyHeroReq* BuyHeroReq::default_instance_ = NULL;

BuyHeroReq* BuyHeroReq::New() const {
  return new BuyHeroReq;
}

void BuyHeroReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyHeroReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyHeroReq::MergeFrom(const BuyHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyHeroReq::CopyFrom(const BuyHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyHeroReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BuyHeroReq::Swap(BuyHeroReq* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyHeroReq_descriptor_;
  metadata.reflection = BuyHeroReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyHeroResp::kHeroFieldNumber;
const int BuyHeroResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

BuyHeroResp::BuyHeroResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyHeroResp::InitAsDefaultInstance() {
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

BuyHeroResp::BuyHeroResp(const BuyHeroResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyHeroResp::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyHeroResp::~BuyHeroResp() {
  SharedDtor();
}

void BuyHeroResp::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
    delete commons_;
  }
}

void BuyHeroResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyHeroResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyHeroResp_descriptor_;
}

const BuyHeroResp& BuyHeroResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

BuyHeroResp* BuyHeroResp::default_instance_ = NULL;

BuyHeroResp* BuyHeroResp::New() const {
  return new BuyHeroResp;
}

void BuyHeroResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyHeroResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoHero.HeroBaseInfoCPP hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyHeroResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoHero.HeroBaseInfoCPP hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyHeroResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoHero.HeroBaseInfoCPP hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyHeroResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoHero.HeroBaseInfoCPP hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyHeroResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyHeroResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyHeroResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyHeroResp::MergeFrom(const BuyHeroResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyHeroResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyHeroResp::CopyFrom(const BuyHeroResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyHeroResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void BuyHeroResp::Swap(BuyHeroResp* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyHeroResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyHeroResp_descriptor_;
  metadata.reflection = BuyHeroResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeHeroByCoinReq::kHeroidFieldNumber;
const int UpgradeHeroByCoinReq::kOneclickFieldNumber;
#endif  // !_MSC_VER

UpgradeHeroByCoinReq::UpgradeHeroByCoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeHeroByCoinReq::InitAsDefaultInstance() {
}

UpgradeHeroByCoinReq::UpgradeHeroByCoinReq(const UpgradeHeroByCoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeHeroByCoinReq::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  oneclick_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeHeroByCoinReq::~UpgradeHeroByCoinReq() {
  SharedDtor();
}

void UpgradeHeroByCoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeHeroByCoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeHeroByCoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeHeroByCoinReq_descriptor_;
}

const UpgradeHeroByCoinReq& UpgradeHeroByCoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

UpgradeHeroByCoinReq* UpgradeHeroByCoinReq::default_instance_ = NULL;

UpgradeHeroByCoinReq* UpgradeHeroByCoinReq::New() const {
  return new UpgradeHeroByCoinReq;
}

void UpgradeHeroByCoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    oneclick_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeHeroByCoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oneclick;
        break;
      }
      
      // required uint32 oneclick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oneclick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oneclick_)));
          set_has_oneclick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeHeroByCoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  // required uint32 oneclick = 2;
  if (has_oneclick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oneclick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeHeroByCoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  // required uint32 oneclick = 2;
  if (has_oneclick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oneclick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeHeroByCoinReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // required uint32 oneclick = 2;
    if (has_oneclick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oneclick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeHeroByCoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeHeroByCoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeHeroByCoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeHeroByCoinReq::MergeFrom(const UpgradeHeroByCoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_oneclick()) {
      set_oneclick(from.oneclick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeHeroByCoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeHeroByCoinReq::CopyFrom(const UpgradeHeroByCoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeHeroByCoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UpgradeHeroByCoinReq::Swap(UpgradeHeroByCoinReq* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(oneclick_, other->oneclick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeHeroByCoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeHeroByCoinReq_descriptor_;
  metadata.reflection = UpgradeHeroByCoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeHeroByCoinResp::kCommonsFieldNumber;
const int UpgradeHeroByCoinResp::kHeroFieldNumber;
#endif  // !_MSC_VER

UpgradeHeroByCoinResp::UpgradeHeroByCoinResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeHeroByCoinResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
}

UpgradeHeroByCoinResp::UpgradeHeroByCoinResp(const UpgradeHeroByCoinResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeHeroByCoinResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeHeroByCoinResp::~UpgradeHeroByCoinResp() {
  SharedDtor();
}

void UpgradeHeroByCoinResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete hero_;
  }
}

void UpgradeHeroByCoinResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeHeroByCoinResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeHeroByCoinResp_descriptor_;
}

const UpgradeHeroByCoinResp& UpgradeHeroByCoinResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

UpgradeHeroByCoinResp* UpgradeHeroByCoinResp::default_instance_ = NULL;

UpgradeHeroByCoinResp* UpgradeHeroByCoinResp::New() const {
  return new UpgradeHeroByCoinResp;
}

void UpgradeHeroByCoinResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeHeroByCoinResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        break;
      }
      
      // required .ProtoHero.HeroBaseInfoCPP hero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeHeroByCoinResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  // required .ProtoHero.HeroBaseInfoCPP hero = 2;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeHeroByCoinResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  // required .ProtoHero.HeroBaseInfoCPP hero = 2;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeHeroByCoinResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
    // required .ProtoHero.HeroBaseInfoCPP hero = 2;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeHeroByCoinResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeHeroByCoinResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeHeroByCoinResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeHeroByCoinResp::MergeFrom(const UpgradeHeroByCoinResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeHeroByCoinResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeHeroByCoinResp::CopyFrom(const UpgradeHeroByCoinResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeHeroByCoinResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void UpgradeHeroByCoinResp::Swap(UpgradeHeroByCoinResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeHeroByCoinResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeHeroByCoinResp_descriptor_;
  metadata.reflection = UpgradeHeroByCoinResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpGradeHeroSkillReq::kHeroidFieldNumber;
const int UpGradeHeroSkillReq::kSkillidFieldNumber;
#endif  // !_MSC_VER

UpGradeHeroSkillReq::UpGradeHeroSkillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpGradeHeroSkillReq::InitAsDefaultInstance() {
}

UpGradeHeroSkillReq::UpGradeHeroSkillReq(const UpGradeHeroSkillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpGradeHeroSkillReq::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpGradeHeroSkillReq::~UpGradeHeroSkillReq() {
  SharedDtor();
}

void UpGradeHeroSkillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpGradeHeroSkillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpGradeHeroSkillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpGradeHeroSkillReq_descriptor_;
}

const UpGradeHeroSkillReq& UpGradeHeroSkillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

UpGradeHeroSkillReq* UpGradeHeroSkillReq::default_instance_ = NULL;

UpGradeHeroSkillReq* UpGradeHeroSkillReq::New() const {
  return new UpGradeHeroSkillReq;
}

void UpGradeHeroSkillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpGradeHeroSkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }
      
      // required uint32 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpGradeHeroSkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  // required uint32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpGradeHeroSkillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  // required uint32 skillid = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpGradeHeroSkillReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // required uint32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpGradeHeroSkillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpGradeHeroSkillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpGradeHeroSkillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpGradeHeroSkillReq::MergeFrom(const UpGradeHeroSkillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpGradeHeroSkillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpGradeHeroSkillReq::CopyFrom(const UpGradeHeroSkillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpGradeHeroSkillReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UpGradeHeroSkillReq::Swap(UpGradeHeroSkillReq* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpGradeHeroSkillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpGradeHeroSkillReq_descriptor_;
  metadata.reflection = UpGradeHeroSkillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpGradeHeroSkillResp::kLevelFieldNumber;
const int UpGradeHeroSkillResp::kCommonsFieldNumber;
const int UpGradeHeroSkillResp::kBattlePowerFieldNumber;
#endif  // !_MSC_VER

UpGradeHeroSkillResp::UpGradeHeroSkillResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpGradeHeroSkillResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

UpGradeHeroSkillResp::UpGradeHeroSkillResp(const UpGradeHeroSkillResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpGradeHeroSkillResp::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  commons_ = NULL;
  battlepower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpGradeHeroSkillResp::~UpGradeHeroSkillResp() {
  SharedDtor();
}

void UpGradeHeroSkillResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void UpGradeHeroSkillResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpGradeHeroSkillResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpGradeHeroSkillResp_descriptor_;
}

const UpGradeHeroSkillResp& UpGradeHeroSkillResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

UpGradeHeroSkillResp* UpGradeHeroSkillResp::default_instance_ = NULL;

UpGradeHeroSkillResp* UpGradeHeroSkillResp::New() const {
  return new UpGradeHeroSkillResp;
}

void UpGradeHeroSkillResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    battlepower_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpGradeHeroSkillResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battlePower;
        break;
      }
      
      // required uint32 battlePower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpGradeHeroSkillResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  // required uint32 battlePower = 3;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battlepower(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpGradeHeroSkillResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  // required uint32 battlePower = 3;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battlepower(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpGradeHeroSkillResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
    // required uint32 battlePower = 3;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpGradeHeroSkillResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpGradeHeroSkillResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpGradeHeroSkillResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpGradeHeroSkillResp::MergeFrom(const UpGradeHeroSkillResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpGradeHeroSkillResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpGradeHeroSkillResp::CopyFrom(const UpGradeHeroSkillResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpGradeHeroSkillResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void UpGradeHeroSkillResp::Swap(UpGradeHeroSkillResp* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(commons_, other->commons_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpGradeHeroSkillResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpGradeHeroSkillResp_descriptor_;
  metadata.reflection = UpGradeHeroSkillResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpGradeHeroStarReq::kHeroidFieldNumber;
const int UpGradeHeroStarReq::kStaridFieldNumber;
#endif  // !_MSC_VER

UpGradeHeroStarReq::UpGradeHeroStarReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpGradeHeroStarReq::InitAsDefaultInstance() {
}

UpGradeHeroStarReq::UpGradeHeroStarReq(const UpGradeHeroStarReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpGradeHeroStarReq::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  starid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpGradeHeroStarReq::~UpGradeHeroStarReq() {
  SharedDtor();
}

void UpGradeHeroStarReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpGradeHeroStarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpGradeHeroStarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpGradeHeroStarReq_descriptor_;
}

const UpGradeHeroStarReq& UpGradeHeroStarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

UpGradeHeroStarReq* UpGradeHeroStarReq::default_instance_ = NULL;

UpGradeHeroStarReq* UpGradeHeroStarReq::New() const {
  return new UpGradeHeroStarReq;
}

void UpGradeHeroStarReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    starid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpGradeHeroStarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starid;
        break;
      }
      
      // required uint32 starid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpGradeHeroStarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  // required uint32 starid = 2;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpGradeHeroStarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  // required uint32 starid = 2;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpGradeHeroStarReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // required uint32 starid = 2;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpGradeHeroStarReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpGradeHeroStarReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpGradeHeroStarReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpGradeHeroStarReq::MergeFrom(const UpGradeHeroStarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpGradeHeroStarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpGradeHeroStarReq::CopyFrom(const UpGradeHeroStarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpGradeHeroStarReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UpGradeHeroStarReq::Swap(UpGradeHeroStarReq* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(starid_, other->starid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpGradeHeroStarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpGradeHeroStarReq_descriptor_;
  metadata.reflection = UpGradeHeroStarReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpGradeHeroStarResp::kCommonsFieldNumber;
const int UpGradeHeroStarResp::kHeroFieldNumber;
#endif  // !_MSC_VER

UpGradeHeroStarResp::UpGradeHeroStarResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpGradeHeroStarResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
}

UpGradeHeroStarResp::UpGradeHeroStarResp(const UpGradeHeroStarResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpGradeHeroStarResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpGradeHeroStarResp::~UpGradeHeroStarResp() {
  SharedDtor();
}

void UpGradeHeroStarResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete hero_;
  }
}

void UpGradeHeroStarResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpGradeHeroStarResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpGradeHeroStarResp_descriptor_;
}

const UpGradeHeroStarResp& UpGradeHeroStarResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

UpGradeHeroStarResp* UpGradeHeroStarResp::default_instance_ = NULL;

UpGradeHeroStarResp* UpGradeHeroStarResp::New() const {
  return new UpGradeHeroStarResp;
}

void UpGradeHeroStarResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpGradeHeroStarResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        break;
      }
      
      // required .ProtoHero.HeroBaseInfoCPP hero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpGradeHeroStarResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  // required .ProtoHero.HeroBaseInfoCPP hero = 2;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpGradeHeroStarResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  // required .ProtoHero.HeroBaseInfoCPP hero = 2;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpGradeHeroStarResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
    // required .ProtoHero.HeroBaseInfoCPP hero = 2;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpGradeHeroStarResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpGradeHeroStarResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpGradeHeroStarResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpGradeHeroStarResp::MergeFrom(const UpGradeHeroStarResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpGradeHeroStarResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpGradeHeroStarResp::CopyFrom(const UpGradeHeroStarResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpGradeHeroStarResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void UpGradeHeroStarResp::Swap(UpGradeHeroStarResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpGradeHeroStarResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpGradeHeroStarResp_descriptor_;
  metadata.reflection = UpGradeHeroStarResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetHeroReq::kHeroidFieldNumber;
#endif  // !_MSC_VER

SetHeroReq::SetHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetHeroReq::InitAsDefaultInstance() {
}

SetHeroReq::SetHeroReq(const SetHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetHeroReq::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetHeroReq::~SetHeroReq() {
  SharedDtor();
}

void SetHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetHeroReq_descriptor_;
}

const SetHeroReq& SetHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

SetHeroReq* SetHeroReq::default_instance_ = NULL;

SetHeroReq* SetHeroReq::New() const {
  return new SetHeroReq;
}

void SetHeroReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetHeroReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetHeroReq::MergeFrom(const SetHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetHeroReq::CopyFrom(const SetHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetHeroReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetHeroReq::Swap(SetHeroReq* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetHeroReq_descriptor_;
  metadata.reflection = SetHeroReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetHeroResp::SetHeroResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetHeroResp::InitAsDefaultInstance() {
}

SetHeroResp::SetHeroResp(const SetHeroResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetHeroResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetHeroResp::~SetHeroResp() {
  SharedDtor();
}

void SetHeroResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetHeroResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetHeroResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetHeroResp_descriptor_;
}

const SetHeroResp& SetHeroResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

SetHeroResp* SetHeroResp::default_instance_ = NULL;

SetHeroResp* SetHeroResp::New() const {
  return new SetHeroResp;
}

void SetHeroResp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetHeroResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetHeroResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetHeroResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetHeroResp::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetHeroResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetHeroResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetHeroResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetHeroResp::MergeFrom(const SetHeroResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetHeroResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetHeroResp::CopyFrom(const SetHeroResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetHeroResp::IsInitialized() const {
  
  return true;
}

void SetHeroResp::Swap(SetHeroResp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetHeroResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetHeroResp_descriptor_;
  metadata.reflection = SetHeroResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActArchiveChipReq::kIdFieldNumber;
const int ActArchiveChipReq::kActFieldNumber;
#endif  // !_MSC_VER

ActArchiveChipReq::ActArchiveChipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActArchiveChipReq::InitAsDefaultInstance() {
}

ActArchiveChipReq::ActArchiveChipReq(const ActArchiveChipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActArchiveChipReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  act_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActArchiveChipReq::~ActArchiveChipReq() {
  SharedDtor();
}

void ActArchiveChipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActArchiveChipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActArchiveChipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActArchiveChipReq_descriptor_;
}

const ActArchiveChipReq& ActArchiveChipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

ActArchiveChipReq* ActArchiveChipReq::default_instance_ = NULL;

ActArchiveChipReq* ActArchiveChipReq::New() const {
  return new ActArchiveChipReq;
}

void ActArchiveChipReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    act_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActArchiveChipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_act;
        break;
      }
      
      // required uint32 act = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_act:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &act_)));
          set_has_act();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActArchiveChipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 act = 2;
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->act(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActArchiveChipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 act = 2;
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->act(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActArchiveChipReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 act = 2;
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->act());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActArchiveChipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActArchiveChipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActArchiveChipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActArchiveChipReq::MergeFrom(const ActArchiveChipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_act()) {
      set_act(from.act());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActArchiveChipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActArchiveChipReq::CopyFrom(const ActArchiveChipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActArchiveChipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ActArchiveChipReq::Swap(ActArchiveChipReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(act_, other->act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActArchiveChipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActArchiveChipReq_descriptor_;
  metadata.reflection = ActArchiveChipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActArchiveChipResp::kCommonsFieldNumber;
const int ActArchiveChipResp::kHeroFieldNumber;
#endif  // !_MSC_VER

ActArchiveChipResp::ActArchiveChipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActArchiveChipResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
}

ActArchiveChipResp::ActArchiveChipResp(const ActArchiveChipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActArchiveChipResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActArchiveChipResp::~ActArchiveChipResp() {
  SharedDtor();
}

void ActArchiveChipResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete hero_;
  }
}

void ActArchiveChipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActArchiveChipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActArchiveChipResp_descriptor_;
}

const ActArchiveChipResp& ActArchiveChipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

ActArchiveChipResp* ActArchiveChipResp::default_instance_ = NULL;

ActArchiveChipResp* ActArchiveChipResp::New() const {
  return new ActArchiveChipResp;
}

void ActArchiveChipResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActArchiveChipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        break;
      }
      
      // optional .ProtoHero.HeroBaseInfoCPP hero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActArchiveChipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  // optional .ProtoHero.HeroBaseInfoCPP hero = 2;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActArchiveChipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  // optional .ProtoHero.HeroBaseInfoCPP hero = 2;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActArchiveChipResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
    // optional .ProtoHero.HeroBaseInfoCPP hero = 2;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActArchiveChipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActArchiveChipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActArchiveChipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActArchiveChipResp::MergeFrom(const ActArchiveChipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActArchiveChipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActArchiveChipResp::CopyFrom(const ActArchiveChipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActArchiveChipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void ActArchiveChipResp::Swap(ActArchiveChipResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActArchiveChipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActArchiveChipResp_descriptor_;
  metadata.reflection = ActArchiveChipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArchiveRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

ArchiveRewardReq::ArchiveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArchiveRewardReq::InitAsDefaultInstance() {
}

ArchiveRewardReq::ArchiveRewardReq(const ArchiveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArchiveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArchiveRewardReq::~ArchiveRewardReq() {
  SharedDtor();
}

void ArchiveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArchiveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArchiveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArchiveRewardReq_descriptor_;
}

const ArchiveRewardReq& ArchiveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

ArchiveRewardReq* ArchiveRewardReq::default_instance_ = NULL;

ArchiveRewardReq* ArchiveRewardReq::New() const {
  return new ArchiveRewardReq;
}

void ArchiveRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArchiveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArchiveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArchiveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArchiveRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArchiveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArchiveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArchiveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArchiveRewardReq::MergeFrom(const ArchiveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArchiveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchiveRewardReq::CopyFrom(const ArchiveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ArchiveRewardReq::Swap(ArchiveRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArchiveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArchiveRewardReq_descriptor_;
  metadata.reflection = ArchiveRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArchiveRewardResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ArchiveRewardResp::ArchiveRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArchiveRewardResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ArchiveRewardResp::ArchiveRewardResp(const ArchiveRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArchiveRewardResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArchiveRewardResp::~ArchiveRewardResp() {
  SharedDtor();
}

void ArchiveRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ArchiveRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArchiveRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArchiveRewardResp_descriptor_;
}

const ArchiveRewardResp& ArchiveRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

ArchiveRewardResp* ArchiveRewardResp::default_instance_ = NULL;

ArchiveRewardResp* ArchiveRewardResp::New() const {
  return new ArchiveRewardResp;
}

void ArchiveRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArchiveRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArchiveRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArchiveRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArchiveRewardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArchiveRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArchiveRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArchiveRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArchiveRewardResp::MergeFrom(const ArchiveRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArchiveRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArchiveRewardResp::CopyFrom(const ArchiveRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArchiveRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ArchiveRewardResp::Swap(ArchiveRewardResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArchiveRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArchiveRewardResp_descriptor_;
  metadata.reflection = ArchiveRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActDragonBallReq::kHeroidFieldNumber;
const int ProtoActDragonBallReq::kIdxFieldNumber;
#endif  // !_MSC_VER

ProtoActDragonBallReq::ProtoActDragonBallReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActDragonBallReq::InitAsDefaultInstance() {
}

ProtoActDragonBallReq::ProtoActDragonBallReq(const ProtoActDragonBallReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActDragonBallReq::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActDragonBallReq::~ProtoActDragonBallReq() {
  SharedDtor();
}

void ProtoActDragonBallReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoActDragonBallReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActDragonBallReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActDragonBallReq_descriptor_;
}

const ProtoActDragonBallReq& ProtoActDragonBallReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

ProtoActDragonBallReq* ProtoActDragonBallReq::default_instance_ = NULL;

ProtoActDragonBallReq* ProtoActDragonBallReq::New() const {
  return new ProtoActDragonBallReq;
}

void ProtoActDragonBallReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActDragonBallReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }
      
      // required uint32 idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActDragonBallReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  // required uint32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActDragonBallReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  // required uint32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActDragonBallReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // required uint32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActDragonBallReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActDragonBallReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActDragonBallReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActDragonBallReq::MergeFrom(const ProtoActDragonBallReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActDragonBallReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActDragonBallReq::CopyFrom(const ProtoActDragonBallReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActDragonBallReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProtoActDragonBallReq::Swap(ProtoActDragonBallReq* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActDragonBallReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActDragonBallReq_descriptor_;
  metadata.reflection = ProtoActDragonBallReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoActDragonBallResp::kCommonsFieldNumber;
const int ProtoActDragonBallResp::kHeroFieldNumber;
#endif  // !_MSC_VER

ProtoActDragonBallResp::ProtoActDragonBallResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoActDragonBallResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
}

ProtoActDragonBallResp::ProtoActDragonBallResp(const ProtoActDragonBallResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoActDragonBallResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoActDragonBallResp::~ProtoActDragonBallResp() {
  SharedDtor();
}

void ProtoActDragonBallResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete hero_;
  }
}

void ProtoActDragonBallResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoActDragonBallResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoActDragonBallResp_descriptor_;
}

const ProtoActDragonBallResp& ProtoActDragonBallResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

ProtoActDragonBallResp* ProtoActDragonBallResp::default_instance_ = NULL;

ProtoActDragonBallResp* ProtoActDragonBallResp::New() const {
  return new ProtoActDragonBallResp;
}

void ProtoActDragonBallResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoActDragonBallResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero;
        break;
      }
      
      // required .ProtoHero.HeroBaseInfoCPP hero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoActDragonBallResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  // required .ProtoHero.HeroBaseInfoCPP hero = 2;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoActDragonBallResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  // required .ProtoHero.HeroBaseInfoCPP hero = 2;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoActDragonBallResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
    // required .ProtoHero.HeroBaseInfoCPP hero = 2;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoActDragonBallResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoActDragonBallResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoActDragonBallResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoActDragonBallResp::MergeFrom(const ProtoActDragonBallResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoActDragonBallResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoActDragonBallResp::CopyFrom(const ProtoActDragonBallResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoActDragonBallResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void ProtoActDragonBallResp::Swap(ProtoActDragonBallResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoActDragonBallResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoActDragonBallResp_descriptor_;
  metadata.reflection = ProtoActDragonBallResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBuyHeroShareRewardReq::kHeroidFieldNumber;
#endif  // !_MSC_VER

ProtoBuyHeroShareRewardReq::ProtoBuyHeroShareRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBuyHeroShareRewardReq::InitAsDefaultInstance() {
}

ProtoBuyHeroShareRewardReq::ProtoBuyHeroShareRewardReq(const ProtoBuyHeroShareRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBuyHeroShareRewardReq::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBuyHeroShareRewardReq::~ProtoBuyHeroShareRewardReq() {
  SharedDtor();
}

void ProtoBuyHeroShareRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBuyHeroShareRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBuyHeroShareRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBuyHeroShareRewardReq_descriptor_;
}

const ProtoBuyHeroShareRewardReq& ProtoBuyHeroShareRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

ProtoBuyHeroShareRewardReq* ProtoBuyHeroShareRewardReq::default_instance_ = NULL;

ProtoBuyHeroShareRewardReq* ProtoBuyHeroShareRewardReq::New() const {
  return new ProtoBuyHeroShareRewardReq;
}

void ProtoBuyHeroShareRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBuyHeroShareRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBuyHeroShareRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBuyHeroShareRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBuyHeroShareRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBuyHeroShareRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBuyHeroShareRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBuyHeroShareRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBuyHeroShareRewardReq::MergeFrom(const ProtoBuyHeroShareRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBuyHeroShareRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBuyHeroShareRewardReq::CopyFrom(const ProtoBuyHeroShareRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBuyHeroShareRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoBuyHeroShareRewardReq::Swap(ProtoBuyHeroShareRewardReq* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBuyHeroShareRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBuyHeroShareRewardReq_descriptor_;
  metadata.reflection = ProtoBuyHeroShareRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBuyHeroShareRewardResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoBuyHeroShareRewardResp::ProtoBuyHeroShareRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBuyHeroShareRewardResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoBuyHeroShareRewardResp::ProtoBuyHeroShareRewardResp(const ProtoBuyHeroShareRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBuyHeroShareRewardResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBuyHeroShareRewardResp::~ProtoBuyHeroShareRewardResp() {
  SharedDtor();
}

void ProtoBuyHeroShareRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ProtoBuyHeroShareRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBuyHeroShareRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBuyHeroShareRewardResp_descriptor_;
}

const ProtoBuyHeroShareRewardResp& ProtoBuyHeroShareRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoHero_2eproto();  return *default_instance_;
}

ProtoBuyHeroShareRewardResp* ProtoBuyHeroShareRewardResp::default_instance_ = NULL;

ProtoBuyHeroShareRewardResp* ProtoBuyHeroShareRewardResp::New() const {
  return new ProtoBuyHeroShareRewardResp;
}

void ProtoBuyHeroShareRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBuyHeroShareRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBuyHeroShareRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBuyHeroShareRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBuyHeroShareRewardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBuyHeroShareRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBuyHeroShareRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBuyHeroShareRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBuyHeroShareRewardResp::MergeFrom(const ProtoBuyHeroShareRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBuyHeroShareRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBuyHeroShareRewardResp::CopyFrom(const ProtoBuyHeroShareRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBuyHeroShareRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoBuyHeroShareRewardResp::Swap(ProtoBuyHeroShareRewardResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBuyHeroShareRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBuyHeroShareRewardResp_descriptor_;
  metadata.reflection = ProtoBuyHeroShareRewardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoHero

// @@protoc_insertion_point(global_scope)
