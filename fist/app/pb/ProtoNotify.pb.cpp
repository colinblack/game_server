// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoNotify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoNotify {

namespace {

const ::google::protobuf::Descriptor* NotifyItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyItemCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandomUserItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandomUserItemCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropsItemCpp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropsItemCpp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MartialClubItemCpp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MartialClubItemCpp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyItemCPPAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyItemCPPAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNotifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNotifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNotifyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNotifyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushNotifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushNotifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushInvitePost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushInvitePost_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMartialBattlePost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMartialBattlePost_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostItemCPPAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostItemCPPAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostRemove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostRemove_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoNotify_2eproto() {
  protobuf_AddDesc_ProtoNotify_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoNotify.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyItemCPP_descriptor_ = file->message_type(0);
  static const int NotifyItemCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemCPP, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemCPP, content_),
  };
  NotifyItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyItemCPP_descriptor_,
      NotifyItemCPP::default_instance_,
      NotifyItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyItemCPP));
  RandomUserItemCPP_descriptor_ = file->message_type(1);
  static const int RandomUserItemCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomUserItemCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomUserItemCPP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomUserItemCPP, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomUserItemCPP, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomUserItemCPP, content_),
  };
  RandomUserItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandomUserItemCPP_descriptor_,
      RandomUserItemCPP::default_instance_,
      RandomUserItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomUserItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandomUserItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandomUserItemCPP));
  PropsItemCpp_descriptor_ = file->message_type(2);
  static const int PropsItemCpp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCpp, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCpp, count_),
  };
  PropsItemCpp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropsItemCpp_descriptor_,
      PropsItemCpp::default_instance_,
      PropsItemCpp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCpp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropsItemCpp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropsItemCpp));
  MartialClubItemCpp_descriptor_ = file->message_type(3);
  static const int MartialClubItemCpp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, props_),
  };
  MartialClubItemCpp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MartialClubItemCpp_descriptor_,
      MartialClubItemCpp::default_instance_,
      MartialClubItemCpp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClubItemCpp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MartialClubItemCpp));
  NotifyItemCPPAll_descriptor_ = file->message_type(4);
  static const int NotifyItemCPPAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemCPPAll, notify_),
  };
  NotifyItemCPPAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyItemCPPAll_descriptor_,
      NotifyItemCPPAll::default_instance_,
      NotifyItemCPPAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemCPPAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyItemCPPAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyItemCPPAll));
  GetNotifyReq_descriptor_ = file->message_type(5);
  static const int GetNotifyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyReq, id_),
  };
  GetNotifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNotifyReq_descriptor_,
      GetNotifyReq::default_instance_,
      GetNotifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNotifyReq));
  GetNotifyResp_descriptor_ = file->message_type(6);
  static const int GetNotifyResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyResp, notify_),
  };
  GetNotifyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNotifyResp_descriptor_,
      GetNotifyResp::default_instance_,
      GetNotifyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNotifyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNotifyResp));
  PushNotifyReq_descriptor_ = file->message_type(7);
  static const int PushNotifyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushNotifyReq, notify_),
  };
  PushNotifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushNotifyReq_descriptor_,
      PushNotifyReq::default_instance_,
      PushNotifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushNotifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushNotifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushNotifyReq));
  PushInvitePost_descriptor_ = file->message_type(8);
  static const int PushInvitePost_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushInvitePost, post_),
  };
  PushInvitePost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushInvitePost_descriptor_,
      PushInvitePost::default_instance_,
      PushInvitePost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushInvitePost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushInvitePost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushInvitePost));
  PushMartialBattlePost_descriptor_ = file->message_type(9);
  static const int PushMartialBattlePost_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMartialBattlePost, post_),
  };
  PushMartialBattlePost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMartialBattlePost_descriptor_,
      PushMartialBattlePost::default_instance_,
      PushMartialBattlePost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMartialBattlePost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMartialBattlePost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMartialBattlePost));
  PostItemCPPAll_descriptor_ = file->message_type(10);
  static const int PostItemCPPAll_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItemCPPAll, invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItemCPPAll, battle_),
  };
  PostItemCPPAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostItemCPPAll_descriptor_,
      PostItemCPPAll::default_instance_,
      PostItemCPPAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItemCPPAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItemCPPAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostItemCPPAll));
  PostRemove_descriptor_ = file->message_type(11);
  static const int PostRemove_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRemove, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRemove, id_),
  };
  PostRemove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostRemove_descriptor_,
      PostRemove::default_instance_,
      PostRemove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRemove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostRemove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostRemove));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoNotify_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyItemCPP_descriptor_, &NotifyItemCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandomUserItemCPP_descriptor_, &RandomUserItemCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropsItemCpp_descriptor_, &PropsItemCpp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MartialClubItemCpp_descriptor_, &MartialClubItemCpp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyItemCPPAll_descriptor_, &NotifyItemCPPAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNotifyReq_descriptor_, &GetNotifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNotifyResp_descriptor_, &GetNotifyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushNotifyReq_descriptor_, &PushNotifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushInvitePost_descriptor_, &PushInvitePost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMartialBattlePost_descriptor_, &PushMartialBattlePost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostItemCPPAll_descriptor_, &PostItemCPPAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostRemove_descriptor_, &PostRemove::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoNotify_2eproto() {
  delete NotifyItemCPP::default_instance_;
  delete NotifyItemCPP_reflection_;
  delete RandomUserItemCPP::default_instance_;
  delete RandomUserItemCPP_reflection_;
  delete PropsItemCpp::default_instance_;
  delete PropsItemCpp_reflection_;
  delete MartialClubItemCpp::default_instance_;
  delete MartialClubItemCpp_reflection_;
  delete NotifyItemCPPAll::default_instance_;
  delete NotifyItemCPPAll_reflection_;
  delete GetNotifyReq::default_instance_;
  delete GetNotifyReq_reflection_;
  delete GetNotifyResp::default_instance_;
  delete GetNotifyResp_reflection_;
  delete PushNotifyReq::default_instance_;
  delete PushNotifyReq_reflection_;
  delete PushInvitePost::default_instance_;
  delete PushInvitePost_reflection_;
  delete PushMartialBattlePost::default_instance_;
  delete PushMartialBattlePost_reflection_;
  delete PostItemCPPAll::default_instance_;
  delete PostItemCPPAll_reflection_;
  delete PostRemove::default_instance_;
  delete PostRemove_reflection_;
}

void protobuf_AddDesc_ProtoNotify_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoNotify.proto\022\013ProtoNotify\"8\n\rNoti"
    "fyItemCPP\022\n\n\002id\030\001 \002(\r\022\n\n\002ts\030\002 \002(\r\022\017\n\007con"
    "tent\030\003 \002(\014\"W\n\021RandomUserItemCPP\022\n\n\002id\030\001 "
    "\002(\r\022\014\n\004type\030\002 \002(\r\022\013\n\003uid\030\003 \002(\r\022\n\n\002ts\030\004 \002"
    "(\r\022\017\n\007content\030\005 \002(\014\"-\n\014PropsItemCpp\022\016\n\006p"
    "ropId\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"\323\001\n\022MartialCl"
    "ubItemCpp\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\n\n\002t"
    "s\030\003 \002(\r\022\013\n\003uid\030\004 \002(\r\022\014\n\004name\030\005 \002(\t\022\r\n\005le"
    "vel\030\006 \002(\r\022\013\n\003fig\030\007 \002(\t\022\r\n\005grade\030\010 \002(\r\022\014\n"
    "\004slot\030\t \001(\r\022\013\n\003win\030\n \001(\r\022\014\n\004coin\030\013 \001(\r\022("
    "\n\005props\030\014 \003(\0132\031.ProtoNotify.PropsItemCpp"
    "\">\n\020NotifyItemCPPAll\022*\n\006notify\030\001 \003(\0132\032.P"
    "rotoNotify.NotifyItemCPP\"\032\n\014GetNotifyReq"
    "\022\n\n\002id\030\001 \002(\r\";\n\rGetNotifyResp\022*\n\006notify\030"
    "\001 \002(\0132\032.ProtoNotify.NotifyItemCPP\";\n\rPus"
    "hNotifyReq\022*\n\006notify\030\001 \002(\0132\032.ProtoNotify"
    ".NotifyItemCPP\"\?\n\016PushInvitePost\022-\n\004post"
    "\030\001 \002(\0132\037.ProtoNotify.MartialClubItemCpp\""
    "F\n\025PushMartialBattlePost\022-\n\004post\030\001 \002(\0132\037"
    ".ProtoNotify.MartialClubItemCpp\"r\n\016PostI"
    "temCPPAll\022/\n\006invite\030\001 \003(\0132\037.ProtoNotify."
    "MartialClubItemCpp\022/\n\006battle\030\002 \003(\0132\037.Pro"
    "toNotify.MartialClubItemCpp\"&\n\nPostRemov"
    "e\022\014\n\004type\030\001 \002(\r\022\n\n\002id\030\002 \002(\r", 947);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoNotify.proto", &protobuf_RegisterTypes);
  NotifyItemCPP::default_instance_ = new NotifyItemCPP();
  RandomUserItemCPP::default_instance_ = new RandomUserItemCPP();
  PropsItemCpp::default_instance_ = new PropsItemCpp();
  MartialClubItemCpp::default_instance_ = new MartialClubItemCpp();
  NotifyItemCPPAll::default_instance_ = new NotifyItemCPPAll();
  GetNotifyReq::default_instance_ = new GetNotifyReq();
  GetNotifyResp::default_instance_ = new GetNotifyResp();
  PushNotifyReq::default_instance_ = new PushNotifyReq();
  PushInvitePost::default_instance_ = new PushInvitePost();
  PushMartialBattlePost::default_instance_ = new PushMartialBattlePost();
  PostItemCPPAll::default_instance_ = new PostItemCPPAll();
  PostRemove::default_instance_ = new PostRemove();
  NotifyItemCPP::default_instance_->InitAsDefaultInstance();
  RandomUserItemCPP::default_instance_->InitAsDefaultInstance();
  PropsItemCpp::default_instance_->InitAsDefaultInstance();
  MartialClubItemCpp::default_instance_->InitAsDefaultInstance();
  NotifyItemCPPAll::default_instance_->InitAsDefaultInstance();
  GetNotifyReq::default_instance_->InitAsDefaultInstance();
  GetNotifyResp::default_instance_->InitAsDefaultInstance();
  PushNotifyReq::default_instance_->InitAsDefaultInstance();
  PushInvitePost::default_instance_->InitAsDefaultInstance();
  PushMartialBattlePost::default_instance_->InitAsDefaultInstance();
  PostItemCPPAll::default_instance_->InitAsDefaultInstance();
  PostRemove::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoNotify_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoNotify_2eproto {
  StaticDescriptorInitializer_ProtoNotify_2eproto() {
    protobuf_AddDesc_ProtoNotify_2eproto();
  }
} static_descriptor_initializer_ProtoNotify_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int NotifyItemCPP::kIdFieldNumber;
const int NotifyItemCPP::kTsFieldNumber;
const int NotifyItemCPP::kContentFieldNumber;
#endif  // !_MSC_VER

NotifyItemCPP::NotifyItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyItemCPP::InitAsDefaultInstance() {
}

NotifyItemCPP::NotifyItemCPP(const NotifyItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyItemCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ts_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyItemCPP::~NotifyItemCPP() {
  SharedDtor();
}

void NotifyItemCPP::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void NotifyItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyItemCPP_descriptor_;
}

const NotifyItemCPP& NotifyItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

NotifyItemCPP* NotifyItemCPP::default_instance_ = NULL;

NotifyItemCPP* NotifyItemCPP::New() const {
  return new NotifyItemCPP;
}

void NotifyItemCPP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    ts_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }
      
      // required uint32 ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }
  
  // required bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }
  
  // required bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyItemCPP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }
    
    // required bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyItemCPP::MergeFrom(const NotifyItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyItemCPP::CopyFrom(const NotifyItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void NotifyItemCPP::Swap(NotifyItemCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ts_, other->ts_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyItemCPP_descriptor_;
  metadata.reflection = NotifyItemCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandomUserItemCPP::kIdFieldNumber;
const int RandomUserItemCPP::kTypeFieldNumber;
const int RandomUserItemCPP::kUidFieldNumber;
const int RandomUserItemCPP::kTsFieldNumber;
const int RandomUserItemCPP::kContentFieldNumber;
#endif  // !_MSC_VER

RandomUserItemCPP::RandomUserItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandomUserItemCPP::InitAsDefaultInstance() {
}

RandomUserItemCPP::RandomUserItemCPP(const RandomUserItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandomUserItemCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  uid_ = 0u;
  ts_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandomUserItemCPP::~RandomUserItemCPP() {
  SharedDtor();
}

void RandomUserItemCPP::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void RandomUserItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomUserItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandomUserItemCPP_descriptor_;
}

const RandomUserItemCPP& RandomUserItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

RandomUserItemCPP* RandomUserItemCPP::default_instance_ = NULL;

RandomUserItemCPP* RandomUserItemCPP::New() const {
  return new RandomUserItemCPP;
}

void RandomUserItemCPP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    uid_ = 0u;
    ts_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandomUserItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }
      
      // required uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ts;
        break;
      }
      
      // required uint32 ts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }
      
      // required bytes content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandomUserItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }
  
  // required uint32 ts = 4;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ts(), output);
  }
  
  // required bytes content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandomUserItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }
  
  // required uint32 ts = 4;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ts(), target);
  }
  
  // required bytes content = 5;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandomUserItemCPP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 ts = 4;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }
    
    // required bytes content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomUserItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandomUserItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandomUserItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandomUserItemCPP::MergeFrom(const RandomUserItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandomUserItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomUserItemCPP::CopyFrom(const RandomUserItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomUserItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void RandomUserItemCPP::Swap(RandomUserItemCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(uid_, other->uid_);
    std::swap(ts_, other->ts_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandomUserItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandomUserItemCPP_descriptor_;
  metadata.reflection = RandomUserItemCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropsItemCpp::kPropIdFieldNumber;
const int PropsItemCpp::kCountFieldNumber;
#endif  // !_MSC_VER

PropsItemCpp::PropsItemCpp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropsItemCpp::InitAsDefaultInstance() {
}

PropsItemCpp::PropsItemCpp(const PropsItemCpp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropsItemCpp::SharedCtor() {
  _cached_size_ = 0;
  propid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropsItemCpp::~PropsItemCpp() {
  SharedDtor();
}

void PropsItemCpp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropsItemCpp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropsItemCpp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropsItemCpp_descriptor_;
}

const PropsItemCpp& PropsItemCpp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

PropsItemCpp* PropsItemCpp::default_instance_ = NULL;

PropsItemCpp* PropsItemCpp::New() const {
  return new PropsItemCpp;
}

void PropsItemCpp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropsItemCpp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropsItemCpp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 propId = 1;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propid(), output);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropsItemCpp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 propId = 1;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propid(), target);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropsItemCpp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propId = 1;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propid());
    }
    
    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropsItemCpp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropsItemCpp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropsItemCpp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropsItemCpp::MergeFrom(const PropsItemCpp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropsItemCpp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropsItemCpp::CopyFrom(const PropsItemCpp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropsItemCpp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PropsItemCpp::Swap(PropsItemCpp* other) {
  if (other != this) {
    std::swap(propid_, other->propid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropsItemCpp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropsItemCpp_descriptor_;
  metadata.reflection = PropsItemCpp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MartialClubItemCpp::kIdFieldNumber;
const int MartialClubItemCpp::kTypeFieldNumber;
const int MartialClubItemCpp::kTsFieldNumber;
const int MartialClubItemCpp::kUidFieldNumber;
const int MartialClubItemCpp::kNameFieldNumber;
const int MartialClubItemCpp::kLevelFieldNumber;
const int MartialClubItemCpp::kFigFieldNumber;
const int MartialClubItemCpp::kGradeFieldNumber;
const int MartialClubItemCpp::kSlotFieldNumber;
const int MartialClubItemCpp::kWinFieldNumber;
const int MartialClubItemCpp::kCoinFieldNumber;
const int MartialClubItemCpp::kPropsFieldNumber;
#endif  // !_MSC_VER

MartialClubItemCpp::MartialClubItemCpp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MartialClubItemCpp::InitAsDefaultInstance() {
}

MartialClubItemCpp::MartialClubItemCpp(const MartialClubItemCpp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MartialClubItemCpp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  ts_ = 0u;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grade_ = 0u;
  slot_ = 0u;
  win_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MartialClubItemCpp::~MartialClubItemCpp() {
  SharedDtor();
}

void MartialClubItemCpp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void MartialClubItemCpp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MartialClubItemCpp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MartialClubItemCpp_descriptor_;
}

const MartialClubItemCpp& MartialClubItemCpp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

MartialClubItemCpp* MartialClubItemCpp::default_instance_ = NULL;

MartialClubItemCpp* MartialClubItemCpp::New() const {
  return new MartialClubItemCpp;
}

void MartialClubItemCpp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    ts_ = 0u;
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::kEmptyString) {
        fig_->clear();
      }
    }
    grade_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    slot_ = 0u;
    win_ = 0u;
    coin_ = 0u;
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MartialClubItemCpp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }
      
      // required uint32 ts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uid;
        break;
      }
      
      // required uint32 uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // required uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fig;
        break;
      }
      
      // required string fig = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fig().data(), this->fig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_grade;
        break;
      }
      
      // required uint32 grade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_slot;
        break;
      }
      
      // optional uint32 slot = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_win;
        break;
      }
      
      // optional uint32 win = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_coin;
        break;
      }
      
      // optional uint32 coin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_props;
        break;
      }
      
      // repeated .ProtoNotify.PropsItemCpp props = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_props;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MartialClubItemCpp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }
  
  // required uint32 uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uid(), output);
  }
  
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }
  
  // required string fig = 7;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->fig(), output);
  }
  
  // required uint32 grade = 8;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->grade(), output);
  }
  
  // optional uint32 slot = 9;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->slot(), output);
  }
  
  // optional uint32 win = 10;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->win(), output);
  }
  
  // optional uint32 coin = 11;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->coin(), output);
  }
  
  // repeated .ProtoNotify.PropsItemCpp props = 12;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->props(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MartialClubItemCpp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }
  
  // required uint32 uid = 4;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uid(), target);
  }
  
  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }
  
  // required string fig = 7;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->fig(), target);
  }
  
  // required uint32 grade = 8;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->grade(), target);
  }
  
  // optional uint32 slot = 9;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->slot(), target);
  }
  
  // optional uint32 win = 10;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->win(), target);
  }
  
  // optional uint32 coin = 11;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->coin(), target);
  }
  
  // repeated .ProtoNotify.PropsItemCpp props = 12;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->props(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MartialClubItemCpp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }
    
    // required uint32 uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required string fig = 7;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fig());
    }
    
    // required uint32 grade = 8;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 slot = 9;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }
    
    // optional uint32 win = 10;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win());
    }
    
    // optional uint32 coin = 11;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }
    
  }
  // repeated .ProtoNotify.PropsItemCpp props = 12;
  total_size += 1 * this->props_size();
  for (int i = 0; i < this->props_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->props(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MartialClubItemCpp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MartialClubItemCpp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MartialClubItemCpp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MartialClubItemCpp::MergeFrom(const MartialClubItemCpp& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MartialClubItemCpp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MartialClubItemCpp::CopyFrom(const MartialClubItemCpp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MartialClubItemCpp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  for (int i = 0; i < props_size(); i++) {
    if (!this->props(i).IsInitialized()) return false;
  }
  return true;
}

void MartialClubItemCpp::Swap(MartialClubItemCpp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(ts_, other->ts_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(fig_, other->fig_);
    std::swap(grade_, other->grade_);
    std::swap(slot_, other->slot_);
    std::swap(win_, other->win_);
    std::swap(coin_, other->coin_);
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MartialClubItemCpp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MartialClubItemCpp_descriptor_;
  metadata.reflection = MartialClubItemCpp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyItemCPPAll::kNotifyFieldNumber;
#endif  // !_MSC_VER

NotifyItemCPPAll::NotifyItemCPPAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyItemCPPAll::InitAsDefaultInstance() {
}

NotifyItemCPPAll::NotifyItemCPPAll(const NotifyItemCPPAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyItemCPPAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyItemCPPAll::~NotifyItemCPPAll() {
  SharedDtor();
}

void NotifyItemCPPAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyItemCPPAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyItemCPPAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyItemCPPAll_descriptor_;
}

const NotifyItemCPPAll& NotifyItemCPPAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

NotifyItemCPPAll* NotifyItemCPPAll::default_instance_ = NULL;

NotifyItemCPPAll* NotifyItemCPPAll::New() const {
  return new NotifyItemCPPAll;
}

void NotifyItemCPPAll::Clear() {
  notify_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyItemCPPAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoNotify.NotifyItemCPP notify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notify;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyItemCPPAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoNotify.NotifyItemCPP notify = 1;
  for (int i = 0; i < this->notify_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notify(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyItemCPPAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoNotify.NotifyItemCPP notify = 1;
  for (int i = 0; i < this->notify_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notify(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyItemCPPAll::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoNotify.NotifyItemCPP notify = 1;
  total_size += 1 * this->notify_size();
  for (int i = 0; i < this->notify_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notify(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyItemCPPAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyItemCPPAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyItemCPPAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyItemCPPAll::MergeFrom(const NotifyItemCPPAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  notify_.MergeFrom(from.notify_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyItemCPPAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyItemCPPAll::CopyFrom(const NotifyItemCPPAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyItemCPPAll::IsInitialized() const {
  
  for (int i = 0; i < notify_size(); i++) {
    if (!this->notify(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyItemCPPAll::Swap(NotifyItemCPPAll* other) {
  if (other != this) {
    notify_.Swap(&other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyItemCPPAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyItemCPPAll_descriptor_;
  metadata.reflection = NotifyItemCPPAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNotifyReq::kIdFieldNumber;
#endif  // !_MSC_VER

GetNotifyReq::GetNotifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNotifyReq::InitAsDefaultInstance() {
}

GetNotifyReq::GetNotifyReq(const GetNotifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNotifyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNotifyReq::~GetNotifyReq() {
  SharedDtor();
}

void GetNotifyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNotifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNotifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNotifyReq_descriptor_;
}

const GetNotifyReq& GetNotifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

GetNotifyReq* GetNotifyReq::default_instance_ = NULL;

GetNotifyReq* GetNotifyReq::New() const {
  return new GetNotifyReq;
}

void GetNotifyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNotifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNotifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNotifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNotifyReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNotifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNotifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNotifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNotifyReq::MergeFrom(const GetNotifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNotifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNotifyReq::CopyFrom(const GetNotifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetNotifyReq::Swap(GetNotifyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNotifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNotifyReq_descriptor_;
  metadata.reflection = GetNotifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNotifyResp::kNotifyFieldNumber;
#endif  // !_MSC_VER

GetNotifyResp::GetNotifyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNotifyResp::InitAsDefaultInstance() {
  notify_ = const_cast< ::ProtoNotify::NotifyItemCPP*>(&::ProtoNotify::NotifyItemCPP::default_instance());
}

GetNotifyResp::GetNotifyResp(const GetNotifyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNotifyResp::SharedCtor() {
  _cached_size_ = 0;
  notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNotifyResp::~GetNotifyResp() {
  SharedDtor();
}

void GetNotifyResp::SharedDtor() {
  if (this != default_instance_) {
    delete notify_;
  }
}

void GetNotifyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNotifyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNotifyResp_descriptor_;
}

const GetNotifyResp& GetNotifyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

GetNotifyResp* GetNotifyResp::default_instance_ = NULL;

GetNotifyResp* GetNotifyResp::New() const {
  return new GetNotifyResp;
}

void GetNotifyResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notify()) {
      if (notify_ != NULL) notify_->::ProtoNotify::NotifyItemCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNotifyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNotify.NotifyItemCPP notify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNotifyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNotify.NotifyItemCPP notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notify(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNotifyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNotify.NotifyItemCPP notify = 1;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notify(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNotifyResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNotify.NotifyItemCPP notify = 1;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNotifyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNotifyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNotifyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNotifyResp::MergeFrom(const GetNotifyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      mutable_notify()->::ProtoNotify::NotifyItemCPP::MergeFrom(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNotifyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNotifyResp::CopyFrom(const GetNotifyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotifyResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_notify()) {
    if (!this->notify().IsInitialized()) return false;
  }
  return true;
}

void GetNotifyResp::Swap(GetNotifyResp* other) {
  if (other != this) {
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNotifyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNotifyResp_descriptor_;
  metadata.reflection = GetNotifyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushNotifyReq::kNotifyFieldNumber;
#endif  // !_MSC_VER

PushNotifyReq::PushNotifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushNotifyReq::InitAsDefaultInstance() {
  notify_ = const_cast< ::ProtoNotify::NotifyItemCPP*>(&::ProtoNotify::NotifyItemCPP::default_instance());
}

PushNotifyReq::PushNotifyReq(const PushNotifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushNotifyReq::SharedCtor() {
  _cached_size_ = 0;
  notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushNotifyReq::~PushNotifyReq() {
  SharedDtor();
}

void PushNotifyReq::SharedDtor() {
  if (this != default_instance_) {
    delete notify_;
  }
}

void PushNotifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushNotifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushNotifyReq_descriptor_;
}

const PushNotifyReq& PushNotifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

PushNotifyReq* PushNotifyReq::default_instance_ = NULL;

PushNotifyReq* PushNotifyReq::New() const {
  return new PushNotifyReq;
}

void PushNotifyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notify()) {
      if (notify_ != NULL) notify_->::ProtoNotify::NotifyItemCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushNotifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNotify.NotifyItemCPP notify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushNotifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNotify.NotifyItemCPP notify = 1;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notify(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushNotifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNotify.NotifyItemCPP notify = 1;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notify(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushNotifyReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNotify.NotifyItemCPP notify = 1;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notify());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushNotifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushNotifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushNotifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushNotifyReq::MergeFrom(const PushNotifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notify()) {
      mutable_notify()->::ProtoNotify::NotifyItemCPP::MergeFrom(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushNotifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushNotifyReq::CopyFrom(const PushNotifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushNotifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_notify()) {
    if (!this->notify().IsInitialized()) return false;
  }
  return true;
}

void PushNotifyReq::Swap(PushNotifyReq* other) {
  if (other != this) {
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushNotifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushNotifyReq_descriptor_;
  metadata.reflection = PushNotifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushInvitePost::kPostFieldNumber;
#endif  // !_MSC_VER

PushInvitePost::PushInvitePost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushInvitePost::InitAsDefaultInstance() {
  post_ = const_cast< ::ProtoNotify::MartialClubItemCpp*>(&::ProtoNotify::MartialClubItemCpp::default_instance());
}

PushInvitePost::PushInvitePost(const PushInvitePost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushInvitePost::SharedCtor() {
  _cached_size_ = 0;
  post_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushInvitePost::~PushInvitePost() {
  SharedDtor();
}

void PushInvitePost::SharedDtor() {
  if (this != default_instance_) {
    delete post_;
  }
}

void PushInvitePost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushInvitePost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushInvitePost_descriptor_;
}

const PushInvitePost& PushInvitePost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

PushInvitePost* PushInvitePost::default_instance_ = NULL;

PushInvitePost* PushInvitePost::New() const {
  return new PushInvitePost;
}

void PushInvitePost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_post()) {
      if (post_ != NULL) post_->::ProtoNotify::MartialClubItemCpp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushInvitePost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNotify.MartialClubItemCpp post = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushInvitePost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNotify.MartialClubItemCpp post = 1;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->post(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushInvitePost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNotify.MartialClubItemCpp post = 1;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->post(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushInvitePost::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNotify.MartialClubItemCpp post = 1;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushInvitePost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushInvitePost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushInvitePost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushInvitePost::MergeFrom(const PushInvitePost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post()) {
      mutable_post()->::ProtoNotify::MartialClubItemCpp::MergeFrom(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushInvitePost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushInvitePost::CopyFrom(const PushInvitePost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushInvitePost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_post()) {
    if (!this->post().IsInitialized()) return false;
  }
  return true;
}

void PushInvitePost::Swap(PushInvitePost* other) {
  if (other != this) {
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushInvitePost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushInvitePost_descriptor_;
  metadata.reflection = PushInvitePost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushMartialBattlePost::kPostFieldNumber;
#endif  // !_MSC_VER

PushMartialBattlePost::PushMartialBattlePost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushMartialBattlePost::InitAsDefaultInstance() {
  post_ = const_cast< ::ProtoNotify::MartialClubItemCpp*>(&::ProtoNotify::MartialClubItemCpp::default_instance());
}

PushMartialBattlePost::PushMartialBattlePost(const PushMartialBattlePost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushMartialBattlePost::SharedCtor() {
  _cached_size_ = 0;
  post_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMartialBattlePost::~PushMartialBattlePost() {
  SharedDtor();
}

void PushMartialBattlePost::SharedDtor() {
  if (this != default_instance_) {
    delete post_;
  }
}

void PushMartialBattlePost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMartialBattlePost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMartialBattlePost_descriptor_;
}

const PushMartialBattlePost& PushMartialBattlePost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

PushMartialBattlePost* PushMartialBattlePost::default_instance_ = NULL;

PushMartialBattlePost* PushMartialBattlePost::New() const {
  return new PushMartialBattlePost;
}

void PushMartialBattlePost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_post()) {
      if (post_ != NULL) post_->::ProtoNotify::MartialClubItemCpp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMartialBattlePost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNotify.MartialClubItemCpp post = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushMartialBattlePost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoNotify.MartialClubItemCpp post = 1;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->post(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushMartialBattlePost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoNotify.MartialClubItemCpp post = 1;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->post(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushMartialBattlePost::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNotify.MartialClubItemCpp post = 1;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMartialBattlePost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMartialBattlePost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMartialBattlePost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMartialBattlePost::MergeFrom(const PushMartialBattlePost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post()) {
      mutable_post()->::ProtoNotify::MartialClubItemCpp::MergeFrom(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMartialBattlePost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMartialBattlePost::CopyFrom(const PushMartialBattlePost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMartialBattlePost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_post()) {
    if (!this->post().IsInitialized()) return false;
  }
  return true;
}

void PushMartialBattlePost::Swap(PushMartialBattlePost* other) {
  if (other != this) {
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMartialBattlePost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMartialBattlePost_descriptor_;
  metadata.reflection = PushMartialBattlePost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostItemCPPAll::kInviteFieldNumber;
const int PostItemCPPAll::kBattleFieldNumber;
#endif  // !_MSC_VER

PostItemCPPAll::PostItemCPPAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostItemCPPAll::InitAsDefaultInstance() {
}

PostItemCPPAll::PostItemCPPAll(const PostItemCPPAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostItemCPPAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostItemCPPAll::~PostItemCPPAll() {
  SharedDtor();
}

void PostItemCPPAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PostItemCPPAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostItemCPPAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostItemCPPAll_descriptor_;
}

const PostItemCPPAll& PostItemCPPAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

PostItemCPPAll* PostItemCPPAll::default_instance_ = NULL;

PostItemCPPAll* PostItemCPPAll::New() const {
  return new PostItemCPPAll;
}

void PostItemCPPAll::Clear() {
  invite_.Clear();
  battle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostItemCPPAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoNotify.MartialClubItemCpp invite = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_invite;
        if (input->ExpectTag(18)) goto parse_battle;
        break;
      }
      
      // repeated .ProtoNotify.MartialClubItemCpp battle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostItemCPPAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoNotify.MartialClubItemCpp invite = 1;
  for (int i = 0; i < this->invite_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->invite(i), output);
  }
  
  // repeated .ProtoNotify.MartialClubItemCpp battle = 2;
  for (int i = 0; i < this->battle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostItemCPPAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoNotify.MartialClubItemCpp invite = 1;
  for (int i = 0; i < this->invite_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->invite(i), target);
  }
  
  // repeated .ProtoNotify.MartialClubItemCpp battle = 2;
  for (int i = 0; i < this->battle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostItemCPPAll::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoNotify.MartialClubItemCpp invite = 1;
  total_size += 1 * this->invite_size();
  for (int i = 0; i < this->invite_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invite(i));
  }
  
  // repeated .ProtoNotify.MartialClubItemCpp battle = 2;
  total_size += 1 * this->battle_size();
  for (int i = 0; i < this->battle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostItemCPPAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostItemCPPAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostItemCPPAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostItemCPPAll::MergeFrom(const PostItemCPPAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  invite_.MergeFrom(from.invite_);
  battle_.MergeFrom(from.battle_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostItemCPPAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostItemCPPAll::CopyFrom(const PostItemCPPAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostItemCPPAll::IsInitialized() const {
  
  for (int i = 0; i < invite_size(); i++) {
    if (!this->invite(i).IsInitialized()) return false;
  }
  for (int i = 0; i < battle_size(); i++) {
    if (!this->battle(i).IsInitialized()) return false;
  }
  return true;
}

void PostItemCPPAll::Swap(PostItemCPPAll* other) {
  if (other != this) {
    invite_.Swap(&other->invite_);
    battle_.Swap(&other->battle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostItemCPPAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostItemCPPAll_descriptor_;
  metadata.reflection = PostItemCPPAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostRemove::kTypeFieldNumber;
const int PostRemove::kIdFieldNumber;
#endif  // !_MSC_VER

PostRemove::PostRemove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostRemove::InitAsDefaultInstance() {
}

PostRemove::PostRemove(const PostRemove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostRemove::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostRemove::~PostRemove() {
  SharedDtor();
}

void PostRemove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PostRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostRemove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostRemove_descriptor_;
}

const PostRemove& PostRemove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNotify_2eproto();  return *default_instance_;
}

PostRemove* PostRemove::default_instance_ = NULL;

PostRemove* PostRemove::New() const {
  return new PostRemove;
}

void PostRemove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostRemove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostRemove::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostRemove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostRemove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostRemove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostRemove::MergeFrom(const PostRemove& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostRemove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostRemove::CopyFrom(const PostRemove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostRemove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PostRemove::Swap(PostRemove* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostRemove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostRemove_descriptor_;
  metadata.reflection = PostRemove_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoNotify

// @@protoc_insertion_point(global_scope)
