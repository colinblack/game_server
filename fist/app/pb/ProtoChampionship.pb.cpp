// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoChampionship.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoChampionship {

namespace {

const ::google::protobuf::Descriptor* MatchUserInfoCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchUserInfoCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchInfoCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchInfoCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleInfoCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleInfoCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoJoinInMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoJoinInMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoJoinInMatchResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoJoinInMatchResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoStartBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoStartBattleReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoChampionship_2eproto() {
  protobuf_AddDesc_ProtoChampionship_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoChampionship.proto");
  GOOGLE_CHECK(file != NULL);
  MatchUserInfoCPP_descriptor_ = file->message_type(0);
  static const int MatchUserInfoCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchUserInfoCPP, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchUserInfoCPP, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchUserInfoCPP, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchUserInfoCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchUserInfoCPP, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchUserInfoCPP, heroid_),
  };
  MatchUserInfoCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchUserInfoCPP_descriptor_,
      MatchUserInfoCPP::default_instance_,
      MatchUserInfoCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchUserInfoCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchUserInfoCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchUserInfoCPP));
  MatchInfoCPP_descriptor_ = file->message_type(1);
  static const int MatchInfoCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfoCPP, players_),
  };
  MatchInfoCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchInfoCPP_descriptor_,
      MatchInfoCPP::default_instance_,
      MatchInfoCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfoCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfoCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchInfoCPP));
  BattleInfoCPP_descriptor_ = file->message_type(2);
  static const int BattleInfoCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoCPP, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoCPP, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoCPP, commons_),
  };
  BattleInfoCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleInfoCPP_descriptor_,
      BattleInfoCPP::default_instance_,
      BattleInfoCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleInfoCPP));
  ProtoJoinInMatchReq_descriptor_ = file->message_type(3);
  static const int ProtoJoinInMatchReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoJoinInMatchReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoJoinInMatchReq, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoJoinInMatchReq, free_),
  };
  ProtoJoinInMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoJoinInMatchReq_descriptor_,
      ProtoJoinInMatchReq::default_instance_,
      ProtoJoinInMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoJoinInMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoJoinInMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoJoinInMatchReq));
  ProtoJoinInMatchResp_descriptor_ = file->message_type(4);
  static const int ProtoJoinInMatchResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoJoinInMatchResp, commons_),
  };
  ProtoJoinInMatchResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoJoinInMatchResp_descriptor_,
      ProtoJoinInMatchResp::default_instance_,
      ProtoJoinInMatchResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoJoinInMatchResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoJoinInMatchResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoJoinInMatchResp));
  ProtoStartBattleReq_descriptor_ = file->message_type(5);
  static const int ProtoStartBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStartBattleReq, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStartBattleReq, props_),
  };
  ProtoStartBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoStartBattleReq_descriptor_,
      ProtoStartBattleReq::default_instance_,
      ProtoStartBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStartBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoStartBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoStartBattleReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoChampionship_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchUserInfoCPP_descriptor_, &MatchUserInfoCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchInfoCPP_descriptor_, &MatchInfoCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleInfoCPP_descriptor_, &BattleInfoCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoJoinInMatchReq_descriptor_, &ProtoJoinInMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoJoinInMatchResp_descriptor_, &ProtoJoinInMatchResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoStartBattleReq_descriptor_, &ProtoStartBattleReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoChampionship_2eproto() {
  delete MatchUserInfoCPP::default_instance_;
  delete MatchUserInfoCPP_reflection_;
  delete MatchInfoCPP::default_instance_;
  delete MatchInfoCPP_reflection_;
  delete BattleInfoCPP::default_instance_;
  delete BattleInfoCPP_reflection_;
  delete ProtoJoinInMatchReq::default_instance_;
  delete ProtoJoinInMatchReq_reflection_;
  delete ProtoJoinInMatchResp::default_instance_;
  delete ProtoJoinInMatchResp_reflection_;
  delete ProtoStartBattleReq::default_instance_;
  delete ProtoStartBattleReq_reflection_;
}

void protobuf_AddDesc_ProtoChampionship_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBattleDemo::protobuf_AddDesc_ProtoBattleDemo_2eproto();
  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ProtoChampionship.proto\022\021ProtoChampion"
    "ship\032\025ProtoBattleDemo.proto\032\020DataCommon."
    "proto\"k\n\020MatchUserInfoCPP\022\013\n\003uid\030\001 \002(\r\022\020"
    "\n\010battleid\030\002 \002(\r\022\013\n\003fig\030\003 \001(\t\022\014\n\004name\030\004 "
    "\001(\t\022\r\n\005grade\030\005 \001(\r\022\016\n\006heroid\030\006 \001(\r\"D\n\014Ma"
    "tchInfoCPP\0224\n\007players\030\001 \003(\0132#.ProtoChamp"
    "ionship.MatchUserInfoCPP\"~\n\rBattleInfoCP"
    "P\022\016\n\006attack\030\001 \002(\r\0220\n\006battle\030\002 \001(\0132 .Prot"
    "oBattleDemo.ProtoBattleDemo\022+\n\007commons\030\003"
    " \001(\0132\032.DataCommon.CommonItemsCPP\"\?\n\023Prot"
    "oJoinInMatchReq\022\n\n\002id\030\001 \002(\r\022\016\n\006heroid\030\002 "
    "\002(\r\022\014\n\004free\030\003 \002(\r\"C\n\024ProtoJoinInMatchRes"
    "p\022+\n\007commons\030\001 \001(\0132\032.DataCommon.CommonIt"
    "emsCPP\"6\n\023ProtoStartBattleReq\022\020\n\010battlei"
    "d\030\001 \002(\r\022\r\n\005props\030\002 \003(\r", 582);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoChampionship.proto", &protobuf_RegisterTypes);
  MatchUserInfoCPP::default_instance_ = new MatchUserInfoCPP();
  MatchInfoCPP::default_instance_ = new MatchInfoCPP();
  BattleInfoCPP::default_instance_ = new BattleInfoCPP();
  ProtoJoinInMatchReq::default_instance_ = new ProtoJoinInMatchReq();
  ProtoJoinInMatchResp::default_instance_ = new ProtoJoinInMatchResp();
  ProtoStartBattleReq::default_instance_ = new ProtoStartBattleReq();
  MatchUserInfoCPP::default_instance_->InitAsDefaultInstance();
  MatchInfoCPP::default_instance_->InitAsDefaultInstance();
  BattleInfoCPP::default_instance_->InitAsDefaultInstance();
  ProtoJoinInMatchReq::default_instance_->InitAsDefaultInstance();
  ProtoJoinInMatchResp::default_instance_->InitAsDefaultInstance();
  ProtoStartBattleReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoChampionship_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoChampionship_2eproto {
  StaticDescriptorInitializer_ProtoChampionship_2eproto() {
    protobuf_AddDesc_ProtoChampionship_2eproto();
  }
} static_descriptor_initializer_ProtoChampionship_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MatchUserInfoCPP::kUidFieldNumber;
const int MatchUserInfoCPP::kBattleidFieldNumber;
const int MatchUserInfoCPP::kFigFieldNumber;
const int MatchUserInfoCPP::kNameFieldNumber;
const int MatchUserInfoCPP::kGradeFieldNumber;
const int MatchUserInfoCPP::kHeroidFieldNumber;
#endif  // !_MSC_VER

MatchUserInfoCPP::MatchUserInfoCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchUserInfoCPP::InitAsDefaultInstance() {
}

MatchUserInfoCPP::MatchUserInfoCPP(const MatchUserInfoCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchUserInfoCPP::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  battleid_ = 0u;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grade_ = 0u;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchUserInfoCPP::~MatchUserInfoCPP() {
  SharedDtor();
}

void MatchUserInfoCPP::SharedDtor() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    delete fig_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MatchUserInfoCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchUserInfoCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchUserInfoCPP_descriptor_;
}

const MatchUserInfoCPP& MatchUserInfoCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChampionship_2eproto();  return *default_instance_;
}

MatchUserInfoCPP* MatchUserInfoCPP::default_instance_ = NULL;

MatchUserInfoCPP* MatchUserInfoCPP::New() const {
  return new MatchUserInfoCPP;
}

void MatchUserInfoCPP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    battleid_ = 0u;
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::kEmptyString) {
        fig_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    grade_ = 0u;
    heroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchUserInfoCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battleid;
        break;
      }
      
      // required uint32 battleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fig;
        break;
      }
      
      // optional string fig = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fig().data(), this->fig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_grade;
        break;
      }
      
      // optional uint32 grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heroid;
        break;
      }
      
      // optional uint32 heroid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchUserInfoCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  // required uint32 battleid = 2;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battleid(), output);
  }
  
  // optional string fig = 3;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fig(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional uint32 grade = 5;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->grade(), output);
  }
  
  // optional uint32 heroid = 6;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->heroid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchUserInfoCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  // required uint32 battleid = 2;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battleid(), target);
  }
  
  // optional string fig = 3;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fig(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional uint32 grade = 5;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->grade(), target);
  }
  
  // optional uint32 heroid = 6;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->heroid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchUserInfoCPP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 battleid = 2;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleid());
    }
    
    // optional string fig = 3;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fig());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 grade = 5;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }
    
    // optional uint32 heroid = 6;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchUserInfoCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchUserInfoCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchUserInfoCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchUserInfoCPP::MergeFrom(const MatchUserInfoCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchUserInfoCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchUserInfoCPP::CopyFrom(const MatchUserInfoCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchUserInfoCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MatchUserInfoCPP::Swap(MatchUserInfoCPP* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(battleid_, other->battleid_);
    std::swap(fig_, other->fig_);
    std::swap(name_, other->name_);
    std::swap(grade_, other->grade_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchUserInfoCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchUserInfoCPP_descriptor_;
  metadata.reflection = MatchUserInfoCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchInfoCPP::kPlayersFieldNumber;
#endif  // !_MSC_VER

MatchInfoCPP::MatchInfoCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchInfoCPP::InitAsDefaultInstance() {
}

MatchInfoCPP::MatchInfoCPP(const MatchInfoCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchInfoCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchInfoCPP::~MatchInfoCPP() {
  SharedDtor();
}

void MatchInfoCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchInfoCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchInfoCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchInfoCPP_descriptor_;
}

const MatchInfoCPP& MatchInfoCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChampionship_2eproto();  return *default_instance_;
}

MatchInfoCPP* MatchInfoCPP::default_instance_ = NULL;

MatchInfoCPP* MatchInfoCPP::New() const {
  return new MatchInfoCPP;
}

void MatchInfoCPP::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchInfoCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoChampionship.MatchUserInfoCPP players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchInfoCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoChampionship.MatchUserInfoCPP players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchInfoCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoChampionship.MatchUserInfoCPP players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchInfoCPP::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoChampionship.MatchUserInfoCPP players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchInfoCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchInfoCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchInfoCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchInfoCPP::MergeFrom(const MatchInfoCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchInfoCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchInfoCPP::CopyFrom(const MatchInfoCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchInfoCPP::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void MatchInfoCPP::Swap(MatchInfoCPP* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchInfoCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchInfoCPP_descriptor_;
  metadata.reflection = MatchInfoCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleInfoCPP::kAttackFieldNumber;
const int BattleInfoCPP::kBattleFieldNumber;
const int BattleInfoCPP::kCommonsFieldNumber;
#endif  // !_MSC_VER

BattleInfoCPP::BattleInfoCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleInfoCPP::InitAsDefaultInstance() {
  battle_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemo*>(&::ProtoBattleDemo::ProtoBattleDemo::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

BattleInfoCPP::BattleInfoCPP(const BattleInfoCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInfoCPP::SharedCtor() {
  _cached_size_ = 0;
  attack_ = 0u;
  battle_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInfoCPP::~BattleInfoCPP() {
  SharedDtor();
}

void BattleInfoCPP::SharedDtor() {
  if (this != default_instance_) {
    delete battle_;
    delete commons_;
  }
}

void BattleInfoCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleInfoCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleInfoCPP_descriptor_;
}

const BattleInfoCPP& BattleInfoCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChampionship_2eproto();  return *default_instance_;
}

BattleInfoCPP* BattleInfoCPP::default_instance_ = NULL;

BattleInfoCPP* BattleInfoCPP::New() const {
  return new BattleInfoCPP;
}

void BattleInfoCPP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attack_ = 0u;
    if (has_battle()) {
      if (battle_ != NULL) battle_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleInfoCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 attack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle;
        break;
      }
      
      // optional .ProtoBattleDemo.ProtoBattleDemo battle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }
      
      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInfoCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 attack = 1;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attack(), output);
  }
  
  // optional .ProtoBattleDemo.ProtoBattleDemo battle = 2;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle(), output);
  }
  
  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleInfoCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 attack = 1;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attack(), target);
  }
  
  // optional .ProtoBattleDemo.ProtoBattleDemo battle = 2;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle(), target);
  }
  
  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleInfoCPP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 attack = 1;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }
    
    // optional .ProtoBattleDemo.ProtoBattleDemo battle = 2;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle());
    }
    
    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInfoCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleInfoCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleInfoCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleInfoCPP::MergeFrom(const BattleInfoCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_battle()) {
      mutable_battle()->::ProtoBattleDemo::ProtoBattleDemo::MergeFrom(from.battle());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleInfoCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleInfoCPP::CopyFrom(const BattleInfoCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInfoCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_battle()) {
    if (!this->battle().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void BattleInfoCPP::Swap(BattleInfoCPP* other) {
  if (other != this) {
    std::swap(attack_, other->attack_);
    std::swap(battle_, other->battle_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleInfoCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleInfoCPP_descriptor_;
  metadata.reflection = BattleInfoCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoJoinInMatchReq::kIdFieldNumber;
const int ProtoJoinInMatchReq::kHeroidFieldNumber;
const int ProtoJoinInMatchReq::kFreeFieldNumber;
#endif  // !_MSC_VER

ProtoJoinInMatchReq::ProtoJoinInMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoJoinInMatchReq::InitAsDefaultInstance() {
}

ProtoJoinInMatchReq::ProtoJoinInMatchReq(const ProtoJoinInMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoJoinInMatchReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  heroid_ = 0u;
  free_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoJoinInMatchReq::~ProtoJoinInMatchReq() {
  SharedDtor();
}

void ProtoJoinInMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoJoinInMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoJoinInMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoJoinInMatchReq_descriptor_;
}

const ProtoJoinInMatchReq& ProtoJoinInMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChampionship_2eproto();  return *default_instance_;
}

ProtoJoinInMatchReq* ProtoJoinInMatchReq::default_instance_ = NULL;

ProtoJoinInMatchReq* ProtoJoinInMatchReq::New() const {
  return new ProtoJoinInMatchReq;
}

void ProtoJoinInMatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    heroid_ = 0u;
    free_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoJoinInMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }
      
      // required uint32 heroid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free;
        break;
      }
      
      // required uint32 free = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_)));
          set_has_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoJoinInMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }
  
  // required uint32 free = 3;
  if (has_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->free(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoJoinInMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }
  
  // required uint32 free = 3;
  if (has_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->free(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoJoinInMatchReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 heroid = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // required uint32 free = 3;
    if (has_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoJoinInMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoJoinInMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoJoinInMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoJoinInMatchReq::MergeFrom(const ProtoJoinInMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_free()) {
      set_free(from.free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoJoinInMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoJoinInMatchReq::CopyFrom(const ProtoJoinInMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoJoinInMatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ProtoJoinInMatchReq::Swap(ProtoJoinInMatchReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(heroid_, other->heroid_);
    std::swap(free_, other->free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoJoinInMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoJoinInMatchReq_descriptor_;
  metadata.reflection = ProtoJoinInMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoJoinInMatchResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoJoinInMatchResp::ProtoJoinInMatchResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoJoinInMatchResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoJoinInMatchResp::ProtoJoinInMatchResp(const ProtoJoinInMatchResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoJoinInMatchResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoJoinInMatchResp::~ProtoJoinInMatchResp() {
  SharedDtor();
}

void ProtoJoinInMatchResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ProtoJoinInMatchResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoJoinInMatchResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoJoinInMatchResp_descriptor_;
}

const ProtoJoinInMatchResp& ProtoJoinInMatchResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChampionship_2eproto();  return *default_instance_;
}

ProtoJoinInMatchResp* ProtoJoinInMatchResp::default_instance_ = NULL;

ProtoJoinInMatchResp* ProtoJoinInMatchResp::New() const {
  return new ProtoJoinInMatchResp;
}

void ProtoJoinInMatchResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoJoinInMatchResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoJoinInMatchResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoJoinInMatchResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoJoinInMatchResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoJoinInMatchResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoJoinInMatchResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoJoinInMatchResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoJoinInMatchResp::MergeFrom(const ProtoJoinInMatchResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoJoinInMatchResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoJoinInMatchResp::CopyFrom(const ProtoJoinInMatchResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoJoinInMatchResp::IsInitialized() const {
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoJoinInMatchResp::Swap(ProtoJoinInMatchResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoJoinInMatchResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoJoinInMatchResp_descriptor_;
  metadata.reflection = ProtoJoinInMatchResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoStartBattleReq::kBattleidFieldNumber;
const int ProtoStartBattleReq::kPropsFieldNumber;
#endif  // !_MSC_VER

ProtoStartBattleReq::ProtoStartBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoStartBattleReq::InitAsDefaultInstance() {
}

ProtoStartBattleReq::ProtoStartBattleReq(const ProtoStartBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoStartBattleReq::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoStartBattleReq::~ProtoStartBattleReq() {
  SharedDtor();
}

void ProtoStartBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoStartBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoStartBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoStartBattleReq_descriptor_;
}

const ProtoStartBattleReq& ProtoStartBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoChampionship_2eproto();  return *default_instance_;
}

ProtoStartBattleReq* ProtoStartBattleReq::default_instance_ = NULL;

ProtoStartBattleReq* ProtoStartBattleReq::New() const {
  return new ProtoStartBattleReq;
}

void ProtoStartBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
  }
  props_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoStartBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 battleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_props;
        break;
      }
      
      // repeated uint32 props = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_props:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_props())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_props())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_props;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoStartBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 battleid = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battleid(), output);
  }
  
  // repeated uint32 props = 2;
  for (int i = 0; i < this->props_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->props(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoStartBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 battleid = 1;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // repeated uint32 props = 2;
  for (int i = 0; i < this->props_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->props(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoStartBattleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 battleid = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleid());
    }
    
  }
  // repeated uint32 props = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->props_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->props(i));
    }
    total_size += 1 * this->props_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoStartBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoStartBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoStartBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoStartBattleReq::MergeFrom(const ProtoStartBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  props_.MergeFrom(from.props_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoStartBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoStartBattleReq::CopyFrom(const ProtoStartBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoStartBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoStartBattleReq::Swap(ProtoStartBattleReq* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    props_.Swap(&other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoStartBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoStartBattleReq_descriptor_;
  metadata.reflection = ProtoStartBattleReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoChampionship

// @@protoc_insertion_point(global_scope)
