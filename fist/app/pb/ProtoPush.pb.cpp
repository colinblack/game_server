// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoPush.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoPush {

namespace {

const ::google::protobuf::Descriptor* PushUserUpLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushUserUpLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushHeroUpLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushHeroUpLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushGradeUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushGradeUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushArchiveUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushArchiveUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushWinstreak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushWinstreak_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushOnceEveryDayReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushOnceEveryDayReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushDonationPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushDonationPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushMartialIncomeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushMartialIncomeUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoPush_2eproto() {
  protobuf_AddDesc_ProtoPush_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoPush.proto");
  GOOGLE_CHECK(file != NULL);
  PushUserUpLevel_descriptor_ = file->message_type(0);
  static const int PushUserUpLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushUserUpLevel, commons_),
  };
  PushUserUpLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushUserUpLevel_descriptor_,
      PushUserUpLevel::default_instance_,
      PushUserUpLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushUserUpLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushUserUpLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushUserUpLevel));
  PushHeroUpLevel_descriptor_ = file->message_type(1);
  static const int PushHeroUpLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushHeroUpLevel, hero_),
  };
  PushHeroUpLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushHeroUpLevel_descriptor_,
      PushHeroUpLevel::default_instance_,
      PushHeroUpLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushHeroUpLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushHeroUpLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushHeroUpLevel));
  PushGradeUp_descriptor_ = file->message_type(2);
  static const int PushGradeUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushGradeUp, commons_),
  };
  PushGradeUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushGradeUp_descriptor_,
      PushGradeUp::default_instance_,
      PushGradeUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushGradeUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushGradeUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushGradeUp));
  PushArchiveUp_descriptor_ = file->message_type(3);
  static const int PushArchiveUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushArchiveUp, hero_),
  };
  PushArchiveUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushArchiveUp_descriptor_,
      PushArchiveUp::default_instance_,
      PushArchiveUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushArchiveUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushArchiveUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushArchiveUp));
  PushWinstreak_descriptor_ = file->message_type(4);
  static const int PushWinstreak_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushWinstreak, count_),
  };
  PushWinstreak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushWinstreak_descriptor_,
      PushWinstreak::default_instance_,
      PushWinstreak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushWinstreak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushWinstreak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushWinstreak));
  PushOnceEveryDayReward_descriptor_ = file->message_type(5);
  static const int PushOnceEveryDayReward_offsets_[1] = {
  };
  PushOnceEveryDayReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushOnceEveryDayReward_descriptor_,
      PushOnceEveryDayReward::default_instance_,
      PushOnceEveryDayReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushOnceEveryDayReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushOnceEveryDayReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushOnceEveryDayReward));
  PushDonationPower_descriptor_ = file->message_type(6);
  static const int PushDonationPower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushDonationPower, commons_),
  };
  PushDonationPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushDonationPower_descriptor_,
      PushDonationPower::default_instance_,
      PushDonationPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushDonationPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushDonationPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushDonationPower));
  PushMartialIncomeUpdate_descriptor_ = file->message_type(7);
  static const int PushMartialIncomeUpdate_offsets_[1] = {
  };
  PushMartialIncomeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushMartialIncomeUpdate_descriptor_,
      PushMartialIncomeUpdate::default_instance_,
      PushMartialIncomeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMartialIncomeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushMartialIncomeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushMartialIncomeUpdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoPush_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushUserUpLevel_descriptor_, &PushUserUpLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushHeroUpLevel_descriptor_, &PushHeroUpLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushGradeUp_descriptor_, &PushGradeUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushArchiveUp_descriptor_, &PushArchiveUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushWinstreak_descriptor_, &PushWinstreak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushOnceEveryDayReward_descriptor_, &PushOnceEveryDayReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushDonationPower_descriptor_, &PushDonationPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushMartialIncomeUpdate_descriptor_, &PushMartialIncomeUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoPush_2eproto() {
  delete PushUserUpLevel::default_instance_;
  delete PushUserUpLevel_reflection_;
  delete PushHeroUpLevel::default_instance_;
  delete PushHeroUpLevel_reflection_;
  delete PushGradeUp::default_instance_;
  delete PushGradeUp_reflection_;
  delete PushArchiveUp::default_instance_;
  delete PushArchiveUp_reflection_;
  delete PushWinstreak::default_instance_;
  delete PushWinstreak_reflection_;
  delete PushOnceEveryDayReward::default_instance_;
  delete PushOnceEveryDayReward_reflection_;
  delete PushDonationPower::default_instance_;
  delete PushDonationPower_reflection_;
  delete PushMartialIncomeUpdate::default_instance_;
  delete PushMartialIncomeUpdate_reflection_;
}

void protobuf_AddDesc_ProtoPush_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoHero::protobuf_AddDesc_ProtoHero_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoPush.proto\022\tProtoPush\032\020DataCommon"
    ".proto\032\017ProtoHero.proto\">\n\017PushUserUpLev"
    "el\022+\n\007commons\030\001 \002(\0132\032.DataCommon.CommonI"
    "temsCPP\";\n\017PushHeroUpLevel\022(\n\004hero\030\001 \002(\013"
    "2\032.ProtoHero.HeroBaseInfoCPP\":\n\013PushGrad"
    "eUp\022+\n\007commons\030\001 \002(\0132\032.DataCommon.Common"
    "ItemsCPP\"9\n\rPushArchiveUp\022(\n\004hero\030\001 \002(\0132"
    "\032.ProtoHero.HeroBaseInfoCPP\"\036\n\rPushWinst"
    "reak\022\r\n\005count\030\001 \002(\r\"\030\n\026PushOnceEveryDayR"
    "eward\"@\n\021PushDonationPower\022+\n\007commons\030\001 "
    "\002(\0132\032.DataCommon.CommonItemsCPP\"\031\n\027PushM"
    "artialIncomeUpdate", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoPush.proto", &protobuf_RegisterTypes);
  PushUserUpLevel::default_instance_ = new PushUserUpLevel();
  PushHeroUpLevel::default_instance_ = new PushHeroUpLevel();
  PushGradeUp::default_instance_ = new PushGradeUp();
  PushArchiveUp::default_instance_ = new PushArchiveUp();
  PushWinstreak::default_instance_ = new PushWinstreak();
  PushOnceEveryDayReward::default_instance_ = new PushOnceEveryDayReward();
  PushDonationPower::default_instance_ = new PushDonationPower();
  PushMartialIncomeUpdate::default_instance_ = new PushMartialIncomeUpdate();
  PushUserUpLevel::default_instance_->InitAsDefaultInstance();
  PushHeroUpLevel::default_instance_->InitAsDefaultInstance();
  PushGradeUp::default_instance_->InitAsDefaultInstance();
  PushArchiveUp::default_instance_->InitAsDefaultInstance();
  PushWinstreak::default_instance_->InitAsDefaultInstance();
  PushOnceEveryDayReward::default_instance_->InitAsDefaultInstance();
  PushDonationPower::default_instance_->InitAsDefaultInstance();
  PushMartialIncomeUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoPush_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoPush_2eproto {
  StaticDescriptorInitializer_ProtoPush_2eproto() {
    protobuf_AddDesc_ProtoPush_2eproto();
  }
} static_descriptor_initializer_ProtoPush_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PushUserUpLevel::kCommonsFieldNumber;
#endif  // !_MSC_VER

PushUserUpLevel::PushUserUpLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushUserUpLevel::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

PushUserUpLevel::PushUserUpLevel(const PushUserUpLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushUserUpLevel::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushUserUpLevel::~PushUserUpLevel() {
  SharedDtor();
}

void PushUserUpLevel::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void PushUserUpLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushUserUpLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushUserUpLevel_descriptor_;
}

const PushUserUpLevel& PushUserUpLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();  return *default_instance_;
}

PushUserUpLevel* PushUserUpLevel::default_instance_ = NULL;

PushUserUpLevel* PushUserUpLevel::New() const {
  return new PushUserUpLevel;
}

void PushUserUpLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushUserUpLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushUserUpLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushUserUpLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushUserUpLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushUserUpLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushUserUpLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushUserUpLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushUserUpLevel::MergeFrom(const PushUserUpLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushUserUpLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushUserUpLevel::CopyFrom(const PushUserUpLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushUserUpLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void PushUserUpLevel::Swap(PushUserUpLevel* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushUserUpLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushUserUpLevel_descriptor_;
  metadata.reflection = PushUserUpLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushHeroUpLevel::kHeroFieldNumber;
#endif  // !_MSC_VER

PushHeroUpLevel::PushHeroUpLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushHeroUpLevel::InitAsDefaultInstance() {
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
}

PushHeroUpLevel::PushHeroUpLevel(const PushHeroUpLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushHeroUpLevel::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushHeroUpLevel::~PushHeroUpLevel() {
  SharedDtor();
}

void PushHeroUpLevel::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void PushHeroUpLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushHeroUpLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushHeroUpLevel_descriptor_;
}

const PushHeroUpLevel& PushHeroUpLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();  return *default_instance_;
}

PushHeroUpLevel* PushHeroUpLevel::default_instance_ = NULL;

PushHeroUpLevel* PushHeroUpLevel::New() const {
  return new PushHeroUpLevel;
}

void PushHeroUpLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushHeroUpLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoHero.HeroBaseInfoCPP hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushHeroUpLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoHero.HeroBaseInfoCPP hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushHeroUpLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoHero.HeroBaseInfoCPP hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushHeroUpLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoHero.HeroBaseInfoCPP hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushHeroUpLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushHeroUpLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushHeroUpLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushHeroUpLevel::MergeFrom(const PushHeroUpLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushHeroUpLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushHeroUpLevel::CopyFrom(const PushHeroUpLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushHeroUpLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void PushHeroUpLevel::Swap(PushHeroUpLevel* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushHeroUpLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushHeroUpLevel_descriptor_;
  metadata.reflection = PushHeroUpLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushGradeUp::kCommonsFieldNumber;
#endif  // !_MSC_VER

PushGradeUp::PushGradeUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushGradeUp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

PushGradeUp::PushGradeUp(const PushGradeUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushGradeUp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushGradeUp::~PushGradeUp() {
  SharedDtor();
}

void PushGradeUp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void PushGradeUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushGradeUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushGradeUp_descriptor_;
}

const PushGradeUp& PushGradeUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();  return *default_instance_;
}

PushGradeUp* PushGradeUp::default_instance_ = NULL;

PushGradeUp* PushGradeUp::New() const {
  return new PushGradeUp;
}

void PushGradeUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushGradeUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushGradeUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushGradeUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushGradeUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushGradeUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushGradeUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushGradeUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushGradeUp::MergeFrom(const PushGradeUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushGradeUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushGradeUp::CopyFrom(const PushGradeUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushGradeUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void PushGradeUp::Swap(PushGradeUp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushGradeUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushGradeUp_descriptor_;
  metadata.reflection = PushGradeUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushArchiveUp::kHeroFieldNumber;
#endif  // !_MSC_VER

PushArchiveUp::PushArchiveUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushArchiveUp::InitAsDefaultInstance() {
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
}

PushArchiveUp::PushArchiveUp(const PushArchiveUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushArchiveUp::SharedCtor() {
  _cached_size_ = 0;
  hero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushArchiveUp::~PushArchiveUp() {
  SharedDtor();
}

void PushArchiveUp::SharedDtor() {
  if (this != default_instance_) {
    delete hero_;
  }
}

void PushArchiveUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushArchiveUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushArchiveUp_descriptor_;
}

const PushArchiveUp& PushArchiveUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();  return *default_instance_;
}

PushArchiveUp* PushArchiveUp::default_instance_ = NULL;

PushArchiveUp* PushArchiveUp::New() const {
  return new PushArchiveUp;
}

void PushArchiveUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushArchiveUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoHero.HeroBaseInfoCPP hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushArchiveUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoHero.HeroBaseInfoCPP hero = 1;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushArchiveUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoHero.HeroBaseInfoCPP hero = 1;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushArchiveUp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoHero.HeroBaseInfoCPP hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushArchiveUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushArchiveUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushArchiveUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushArchiveUp::MergeFrom(const PushArchiveUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushArchiveUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushArchiveUp::CopyFrom(const PushArchiveUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushArchiveUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void PushArchiveUp::Swap(PushArchiveUp* other) {
  if (other != this) {
    std::swap(hero_, other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushArchiveUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushArchiveUp_descriptor_;
  metadata.reflection = PushArchiveUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushWinstreak::kCountFieldNumber;
#endif  // !_MSC_VER

PushWinstreak::PushWinstreak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushWinstreak::InitAsDefaultInstance() {
}

PushWinstreak::PushWinstreak(const PushWinstreak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushWinstreak::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushWinstreak::~PushWinstreak() {
  SharedDtor();
}

void PushWinstreak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushWinstreak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushWinstreak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushWinstreak_descriptor_;
}

const PushWinstreak& PushWinstreak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();  return *default_instance_;
}

PushWinstreak* PushWinstreak::default_instance_ = NULL;

PushWinstreak* PushWinstreak::New() const {
  return new PushWinstreak;
}

void PushWinstreak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushWinstreak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushWinstreak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushWinstreak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushWinstreak::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushWinstreak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushWinstreak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushWinstreak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushWinstreak::MergeFrom(const PushWinstreak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushWinstreak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushWinstreak::CopyFrom(const PushWinstreak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushWinstreak::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PushWinstreak::Swap(PushWinstreak* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushWinstreak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushWinstreak_descriptor_;
  metadata.reflection = PushWinstreak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PushOnceEveryDayReward::PushOnceEveryDayReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushOnceEveryDayReward::InitAsDefaultInstance() {
}

PushOnceEveryDayReward::PushOnceEveryDayReward(const PushOnceEveryDayReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushOnceEveryDayReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushOnceEveryDayReward::~PushOnceEveryDayReward() {
  SharedDtor();
}

void PushOnceEveryDayReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushOnceEveryDayReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushOnceEveryDayReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushOnceEveryDayReward_descriptor_;
}

const PushOnceEveryDayReward& PushOnceEveryDayReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();  return *default_instance_;
}

PushOnceEveryDayReward* PushOnceEveryDayReward::default_instance_ = NULL;

PushOnceEveryDayReward* PushOnceEveryDayReward::New() const {
  return new PushOnceEveryDayReward;
}

void PushOnceEveryDayReward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushOnceEveryDayReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PushOnceEveryDayReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushOnceEveryDayReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushOnceEveryDayReward::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushOnceEveryDayReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushOnceEveryDayReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushOnceEveryDayReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushOnceEveryDayReward::MergeFrom(const PushOnceEveryDayReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushOnceEveryDayReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushOnceEveryDayReward::CopyFrom(const PushOnceEveryDayReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushOnceEveryDayReward::IsInitialized() const {
  
  return true;
}

void PushOnceEveryDayReward::Swap(PushOnceEveryDayReward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushOnceEveryDayReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushOnceEveryDayReward_descriptor_;
  metadata.reflection = PushOnceEveryDayReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushDonationPower::kCommonsFieldNumber;
#endif  // !_MSC_VER

PushDonationPower::PushDonationPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushDonationPower::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

PushDonationPower::PushDonationPower(const PushDonationPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushDonationPower::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushDonationPower::~PushDonationPower() {
  SharedDtor();
}

void PushDonationPower::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void PushDonationPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushDonationPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushDonationPower_descriptor_;
}

const PushDonationPower& PushDonationPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();  return *default_instance_;
}

PushDonationPower* PushDonationPower::default_instance_ = NULL;

PushDonationPower* PushDonationPower::New() const {
  return new PushDonationPower;
}

void PushDonationPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushDonationPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushDonationPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushDonationPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushDonationPower::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushDonationPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushDonationPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushDonationPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushDonationPower::MergeFrom(const PushDonationPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushDonationPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushDonationPower::CopyFrom(const PushDonationPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushDonationPower::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void PushDonationPower::Swap(PushDonationPower* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushDonationPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushDonationPower_descriptor_;
  metadata.reflection = PushDonationPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PushMartialIncomeUpdate::PushMartialIncomeUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushMartialIncomeUpdate::InitAsDefaultInstance() {
}

PushMartialIncomeUpdate::PushMartialIncomeUpdate(const PushMartialIncomeUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushMartialIncomeUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushMartialIncomeUpdate::~PushMartialIncomeUpdate() {
  SharedDtor();
}

void PushMartialIncomeUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushMartialIncomeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushMartialIncomeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushMartialIncomeUpdate_descriptor_;
}

const PushMartialIncomeUpdate& PushMartialIncomeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPush_2eproto();  return *default_instance_;
}

PushMartialIncomeUpdate* PushMartialIncomeUpdate::default_instance_ = NULL;

PushMartialIncomeUpdate* PushMartialIncomeUpdate::New() const {
  return new PushMartialIncomeUpdate;
}

void PushMartialIncomeUpdate::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushMartialIncomeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void PushMartialIncomeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushMartialIncomeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushMartialIncomeUpdate::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushMartialIncomeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushMartialIncomeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushMartialIncomeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushMartialIncomeUpdate::MergeFrom(const PushMartialIncomeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushMartialIncomeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushMartialIncomeUpdate::CopyFrom(const PushMartialIncomeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushMartialIncomeUpdate::IsInitialized() const {
  
  return true;
}

void PushMartialIncomeUpdate::Swap(PushMartialIncomeUpdate* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushMartialIncomeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushMartialIncomeUpdate_descriptor_;
  metadata.reflection = PushMartialIncomeUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoPush

// @@protoc_insertion_point(global_scope)
