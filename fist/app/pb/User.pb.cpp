// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace User {

namespace {

const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* GradeBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GradeBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestOtherUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestOtherUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tutorialstage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tutorialstage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostCashReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostCashReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostCashResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostCashResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccumulateCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccumulateCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushAccumulateChangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushAccumulateChangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyMaterialInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyMaterialInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyMaterialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyMaterialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyMaterialResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyMaterialResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestOtherUserBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestOtherUserBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedUpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedUpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HerosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HerosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnhookReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnhookReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MartialClub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MartialClub_reflection_ = NULL;
const ::google::protobuf::Descriptor* MartialHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MartialHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyPowerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyPowerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyPowerResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyPowerResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnhookOnlinePropReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnhookOnlinePropReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* InivteUserInfoCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InivteUserInfoCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteActivityUrlReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteActivityUrlReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSInviteActivityUrlReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSInviteActivityUrlReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInviteRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInviteRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInviteRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInviteRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAddInviteRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAddInviteRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAddInviteRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAddInviteRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDrawRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDrawRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDrawRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDrawRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewUserAddExpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewUserAddExpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewUserAddExpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewUserAddExpResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_User_2eproto() {
  protobuf_AddDesc_User_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "User.proto");
  GOOGLE_CHECK(file != NULL);
  Base_descriptor_ = file->message_type(0);
  static const int Base_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, registerplatform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, registertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastloginplatform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, logintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, logindays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastactivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, forbidts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, forbidreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, tutorialstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, acccharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, firstrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, archivechip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, archivelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, archivereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, recovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, limittimesprops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, usepropsts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, dailypower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, dailypowerts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, onhookcoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, onhookexpts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, dailybattlets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, dailybattlecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, invitefriendcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, inviterewardmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, inviteaddrewardmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, freedrawrewardsts_),
  };
  Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Base));
  ActivityItem_descriptor_ = file->message_type(1);
  static const int ActivityItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, bts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, ets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, ver_),
  };
  ActivityItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityItem_descriptor_,
      ActivityItem::default_instance_,
      ActivityItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityItem));
  Activity_descriptor_ = file->message_type(2);
  static const int Activity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, act_),
  };
  Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_descriptor_,
      Activity::default_instance_,
      Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity));
  GradeBattle_descriptor_ = file->message_type(3);
  static const int GradeBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, dailyscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, ts_),
  };
  GradeBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GradeBattle_descriptor_,
      GradeBattle::default_instance_,
      GradeBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GradeBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GradeBattle));
  User_descriptor_ = file->message_type(4);
  static const int User_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, notifies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, charges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, gameactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, opents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, onhook_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, allclub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, drawrewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, inviteinfo_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  RequestOtherUser_descriptor_ = file->message_type(5);
  static const int RequestOtherUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUser, uid_),
  };
  RequestOtherUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestOtherUser_descriptor_,
      RequestOtherUser::default_instance_,
      RequestOtherUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestOtherUser));
  OtherUser_descriptor_ = file->message_type(6);
  static const int OtherUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUser, base_),
  };
  OtherUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherUser_descriptor_,
      OtherUser::default_instance_,
      OtherUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherUser));
  Tutorialstage_descriptor_ = file->message_type(7);
  static const int Tutorialstage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tutorialstage, tutorialstage_),
  };
  Tutorialstage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tutorialstage_descriptor_,
      Tutorialstage::default_instance_,
      Tutorialstage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tutorialstage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tutorialstage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tutorialstage));
  ServerTime_descriptor_ = file->message_type(8);
  static const int ServerTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, ts_),
  };
  ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTime_descriptor_,
      ServerTime::default_instance_,
      ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTime));
  CostCashReq_descriptor_ = file->message_type(9);
  static const int CostCashReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, operation_),
  };
  CostCashReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostCashReq_descriptor_,
      CostCashReq::default_instance_,
      CostCashReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostCashReq));
  CostCashResp_descriptor_ = file->message_type(10);
  static const int CostCashResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, operation_),
  };
  CostCashResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostCashResp_descriptor_,
      CostCashResp::default_instance_,
      CostCashResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostCashResp));
  ChargeItem_descriptor_ = file->message_type(11);
  static const int ChargeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, ts_),
  };
  ChargeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeItem_descriptor_,
      ChargeItem::default_instance_,
      ChargeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeItem));
  AccumulateCharge_descriptor_ = file->message_type(12);
  static const int AccumulateCharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateCharge, accumulatecharge_),
  };
  AccumulateCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccumulateCharge_descriptor_,
      AccumulateCharge::default_instance_,
      AccumulateCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccumulateCharge));
  PushAccumulateChangeReq_descriptor_ = file->message_type(13);
  static const int PushAccumulateChangeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccumulateChangeReq, changeacccharge_),
  };
  PushAccumulateChangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushAccumulateChangeReq_descriptor_,
      PushAccumulateChangeReq::default_instance_,
      PushAccumulateChangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccumulateChangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccumulateChangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushAccumulateChangeReq));
  BuyMaterialInfo_descriptor_ = file->message_type(14);
  static const int BuyMaterialInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialInfo, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialInfo, propscnt_),
  };
  BuyMaterialInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyMaterialInfo_descriptor_,
      BuyMaterialInfo::default_instance_,
      BuyMaterialInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyMaterialInfo));
  BuyMaterialReq_descriptor_ = file->message_type(15);
  static const int BuyMaterialReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialReq, buyinfo_),
  };
  BuyMaterialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyMaterialReq_descriptor_,
      BuyMaterialReq::default_instance_,
      BuyMaterialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyMaterialReq));
  BuyMaterialResp_descriptor_ = file->message_type(16);
  static const int BuyMaterialResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialResp, commons_),
  };
  BuyMaterialResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyMaterialResp_descriptor_,
      BuyMaterialResp::default_instance_,
      BuyMaterialResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyMaterialResp));
  RequestOtherUserBC_descriptor_ = file->message_type(17);
  static const int RequestOtherUserBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUserBC, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUserBC, myuid_),
  };
  RequestOtherUserBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestOtherUserBC_descriptor_,
      RequestOtherUserBC::default_instance_,
      RequestOtherUserBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUserBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUserBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestOtherUserBC));
  SpeedUpReq_descriptor_ = file->message_type(18);
  static const int SpeedUpReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpReq, ud_),
  };
  SpeedUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedUpReq_descriptor_,
      SpeedUpReq::default_instance_,
      SpeedUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedUpReq));
  SpeedUpResp_descriptor_ = file->message_type(19);
  static const int SpeedUpResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpResp, commons_),
  };
  SpeedUpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedUpResp_descriptor_,
      SpeedUpResp::default_instance_,
      SpeedUpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedUpResp));
  HerosInfo_descriptor_ = file->message_type(20);
  static const int HerosInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HerosInfo, hero_),
  };
  HerosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HerosInfo_descriptor_,
      HerosInfo::default_instance_,
      HerosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HerosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HerosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HerosInfo));
  FriendInfo_descriptor_ = file->message_type(21);
  static const int FriendInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, info_),
  };
  FriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::default_instance_,
      FriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfo));
  OnhookReward_descriptor_ = file->message_type(22);
  static const int OnhookReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookReward, commons_),
  };
  OnhookReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnhookReward_descriptor_,
      OnhookReward::default_instance_,
      OnhookReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnhookReward));
  MartialClub_descriptor_ = file->message_type(23);
  static const int MartialClub_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClub, club_),
  };
  MartialClub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MartialClub_descriptor_,
      MartialClub::default_instance_,
      MartialClub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialClub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MartialClub));
  MartialHero_descriptor_ = file->message_type(24);
  static const int MartialHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialHero, heroinfo_),
  };
  MartialHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MartialHero_descriptor_,
      MartialHero::default_instance_,
      MartialHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MartialHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MartialHero));
  BuyPowerReq_descriptor_ = file->message_type(25);
  static const int BuyPowerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyPowerReq, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyPowerReq, ts_),
  };
  BuyPowerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyPowerReq_descriptor_,
      BuyPowerReq::default_instance_,
      BuyPowerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyPowerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyPowerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyPowerReq));
  BuyPowerResp_descriptor_ = file->message_type(26);
  static const int BuyPowerResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyPowerResp, commons_),
  };
  BuyPowerResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyPowerResp_descriptor_,
      BuyPowerResp::default_instance_,
      BuyPowerResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyPowerResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyPowerResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyPowerResp));
  OnhookOnlinePropReward_descriptor_ = file->message_type(27);
  static const int OnhookOnlinePropReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookOnlinePropReward, commons_),
  };
  OnhookOnlinePropReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnhookOnlinePropReward_descriptor_,
      OnhookOnlinePropReward::default_instance_,
      OnhookOnlinePropReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookOnlinePropReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnhookOnlinePropReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnhookOnlinePropReward));
  InivteUserInfoCPP_descriptor_ = file->message_type(28);
  static const int InivteUserInfoCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InivteUserInfoCPP, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InivteUserInfoCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InivteUserInfoCPP, fig_),
  };
  InivteUserInfoCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InivteUserInfoCPP_descriptor_,
      InivteUserInfoCPP::default_instance_,
      InivteUserInfoCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InivteUserInfoCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InivteUserInfoCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InivteUserInfoCPP));
  InviteActivityUrlReq_descriptor_ = file->message_type(29);
  static const int InviteActivityUrlReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteActivityUrlReq, uuid_),
  };
  InviteActivityUrlReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteActivityUrlReq_descriptor_,
      InviteActivityUrlReq::default_instance_,
      InviteActivityUrlReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteActivityUrlReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteActivityUrlReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteActivityUrlReq));
  CSInviteActivityUrlReq_descriptor_ = file->message_type(30);
  static const int CSInviteActivityUrlReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInviteActivityUrlReq, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInviteActivityUrlReq, uid_),
  };
  CSInviteActivityUrlReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSInviteActivityUrlReq_descriptor_,
      CSInviteActivityUrlReq::default_instance_,
      CSInviteActivityUrlReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInviteActivityUrlReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSInviteActivityUrlReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSInviteActivityUrlReq));
  GetInviteRewardReq_descriptor_ = file->message_type(31);
  static const int GetInviteRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviteRewardReq, seq_),
  };
  GetInviteRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInviteRewardReq_descriptor_,
      GetInviteRewardReq::default_instance_,
      GetInviteRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviteRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviteRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInviteRewardReq));
  GetInviteRewardResp_descriptor_ = file->message_type(32);
  static const int GetInviteRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviteRewardResp, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviteRewardResp, commons_),
  };
  GetInviteRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInviteRewardResp_descriptor_,
      GetInviteRewardResp::default_instance_,
      GetInviteRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviteRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInviteRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInviteRewardResp));
  GetAddInviteRewardReq_descriptor_ = file->message_type(33);
  static const int GetAddInviteRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddInviteRewardReq, num_),
  };
  GetAddInviteRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAddInviteRewardReq_descriptor_,
      GetAddInviteRewardReq::default_instance_,
      GetAddInviteRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddInviteRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddInviteRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAddInviteRewardReq));
  GetAddInviteRewardResp_descriptor_ = file->message_type(34);
  static const int GetAddInviteRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddInviteRewardResp, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddInviteRewardResp, commons_),
  };
  GetAddInviteRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAddInviteRewardResp_descriptor_,
      GetAddInviteRewardResp::default_instance_,
      GetAddInviteRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddInviteRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddInviteRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAddInviteRewardResp));
  GetDrawRewardReq_descriptor_ = file->message_type(35);
  static const int GetDrawRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDrawRewardReq, free_),
  };
  GetDrawRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDrawRewardReq_descriptor_,
      GetDrawRewardReq::default_instance_,
      GetDrawRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDrawRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDrawRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDrawRewardReq));
  GetDrawRewardResp_descriptor_ = file->message_type(36);
  static const int GetDrawRewardResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDrawRewardResp, nextid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDrawRewardResp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDrawRewardResp, commons_),
  };
  GetDrawRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDrawRewardResp_descriptor_,
      GetDrawRewardResp::default_instance_,
      GetDrawRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDrawRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDrawRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDrawRewardResp));
  NewUserAddExpReq_descriptor_ = file->message_type(37);
  static const int NewUserAddExpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUserAddExpReq, exp_),
  };
  NewUserAddExpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewUserAddExpReq_descriptor_,
      NewUserAddExpReq::default_instance_,
      NewUserAddExpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUserAddExpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUserAddExpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewUserAddExpReq));
  NewUserAddExpResp_descriptor_ = file->message_type(38);
  static const int NewUserAddExpResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUserAddExpResp, commons_),
  };
  NewUserAddExpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewUserAddExpResp_descriptor_,
      NewUserAddExpResp::default_instance_,
      NewUserAddExpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUserAddExpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewUserAddExpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewUserAddExpResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_User_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Base_descriptor_, &Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityItem_descriptor_, &ActivityItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_descriptor_, &Activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GradeBattle_descriptor_, &GradeBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestOtherUser_descriptor_, &RequestOtherUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherUser_descriptor_, &OtherUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tutorialstage_descriptor_, &Tutorialstage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTime_descriptor_, &ServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostCashReq_descriptor_, &CostCashReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostCashResp_descriptor_, &CostCashResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeItem_descriptor_, &ChargeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccumulateCharge_descriptor_, &AccumulateCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushAccumulateChangeReq_descriptor_, &PushAccumulateChangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyMaterialInfo_descriptor_, &BuyMaterialInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyMaterialReq_descriptor_, &BuyMaterialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyMaterialResp_descriptor_, &BuyMaterialResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestOtherUserBC_descriptor_, &RequestOtherUserBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedUpReq_descriptor_, &SpeedUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedUpResp_descriptor_, &SpeedUpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HerosInfo_descriptor_, &HerosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfo_descriptor_, &FriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnhookReward_descriptor_, &OnhookReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MartialClub_descriptor_, &MartialClub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MartialHero_descriptor_, &MartialHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyPowerReq_descriptor_, &BuyPowerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyPowerResp_descriptor_, &BuyPowerResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnhookOnlinePropReward_descriptor_, &OnhookOnlinePropReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InivteUserInfoCPP_descriptor_, &InivteUserInfoCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteActivityUrlReq_descriptor_, &InviteActivityUrlReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSInviteActivityUrlReq_descriptor_, &CSInviteActivityUrlReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInviteRewardReq_descriptor_, &GetInviteRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInviteRewardResp_descriptor_, &GetInviteRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAddInviteRewardReq_descriptor_, &GetAddInviteRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAddInviteRewardResp_descriptor_, &GetAddInviteRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDrawRewardReq_descriptor_, &GetDrawRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDrawRewardResp_descriptor_, &GetDrawRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewUserAddExpReq_descriptor_, &NewUserAddExpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewUserAddExpResp_descriptor_, &NewUserAddExpResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_User_2eproto() {
  delete Base::default_instance_;
  delete Base_reflection_;
  delete ActivityItem::default_instance_;
  delete ActivityItem_reflection_;
  delete Activity::default_instance_;
  delete Activity_reflection_;
  delete GradeBattle::default_instance_;
  delete GradeBattle_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete RequestOtherUser::default_instance_;
  delete RequestOtherUser_reflection_;
  delete OtherUser::default_instance_;
  delete OtherUser_reflection_;
  delete Tutorialstage::default_instance_;
  delete Tutorialstage_reflection_;
  delete ServerTime::default_instance_;
  delete ServerTime_reflection_;
  delete CostCashReq::default_instance_;
  delete CostCashReq_reflection_;
  delete CostCashResp::default_instance_;
  delete CostCashResp_reflection_;
  delete ChargeItem::default_instance_;
  delete ChargeItem_reflection_;
  delete AccumulateCharge::default_instance_;
  delete AccumulateCharge_reflection_;
  delete PushAccumulateChangeReq::default_instance_;
  delete PushAccumulateChangeReq_reflection_;
  delete BuyMaterialInfo::default_instance_;
  delete BuyMaterialInfo_reflection_;
  delete BuyMaterialReq::default_instance_;
  delete BuyMaterialReq_reflection_;
  delete BuyMaterialResp::default_instance_;
  delete BuyMaterialResp_reflection_;
  delete RequestOtherUserBC::default_instance_;
  delete RequestOtherUserBC_reflection_;
  delete SpeedUpReq::default_instance_;
  delete SpeedUpReq_reflection_;
  delete SpeedUpResp::default_instance_;
  delete SpeedUpResp_reflection_;
  delete HerosInfo::default_instance_;
  delete HerosInfo_reflection_;
  delete FriendInfo::default_instance_;
  delete FriendInfo_reflection_;
  delete OnhookReward::default_instance_;
  delete OnhookReward_reflection_;
  delete MartialClub::default_instance_;
  delete MartialClub_reflection_;
  delete MartialHero::default_instance_;
  delete MartialHero_reflection_;
  delete BuyPowerReq::default_instance_;
  delete BuyPowerReq_reflection_;
  delete BuyPowerResp::default_instance_;
  delete BuyPowerResp_reflection_;
  delete OnhookOnlinePropReward::default_instance_;
  delete OnhookOnlinePropReward_reflection_;
  delete InivteUserInfoCPP::default_instance_;
  delete InivteUserInfoCPP_reflection_;
  delete InviteActivityUrlReq::default_instance_;
  delete InviteActivityUrlReq_reflection_;
  delete CSInviteActivityUrlReq::default_instance_;
  delete CSInviteActivityUrlReq_reflection_;
  delete GetInviteRewardReq::default_instance_;
  delete GetInviteRewardReq_reflection_;
  delete GetInviteRewardResp::default_instance_;
  delete GetInviteRewardResp_reflection_;
  delete GetAddInviteRewardReq::default_instance_;
  delete GetAddInviteRewardReq_reflection_;
  delete GetAddInviteRewardResp::default_instance_;
  delete GetAddInviteRewardResp_reflection_;
  delete GetDrawRewardReq::default_instance_;
  delete GetDrawRewardReq_reflection_;
  delete GetDrawRewardResp::default_instance_;
  delete GetDrawRewardResp_reflection_;
  delete NewUserAddExpReq::default_instance_;
  delete NewUserAddExpReq_reflection_;
  delete NewUserAddExpResp::default_instance_;
  delete NewUserAddExpResp_reflection_;
}

void protobuf_AddDesc_User_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoNotify::protobuf_AddDesc_ProtoNotify_2eproto();
  ::ProtoActivity::protobuf_AddDesc_ProtoActivity_2eproto();
  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoHero::protobuf_AddDesc_ProtoHero_2eproto();
  ::ProtoBattle::protobuf_AddDesc_ProtoBattle_2eproto();
  ::ProtoFriend::protobuf_AddDesc_ProtoFriend_2eproto();
  ::ProtoMartialClub::protobuf_AddDesc_ProtoMartialClub_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nUser.proto\022\004User\032\021ProtoNotify.proto\032\023P"
    "rotoActivity.proto\032\020DataCommon.proto\032\017Pr"
    "otoHero.proto\032\021ProtoBattle.proto\032\021ProtoF"
    "riend.proto\032\026ProtoMartialClub.proto\"\336\006\n\004"
    "Base\022\013\n\003uid\030\001 \002(\r\022\030\n\020registerPlatform\030\002 "
    "\002(\r\022\024\n\014registerTime\030\003 \002(\r\022\031\n\021lastLoginPl"
    "atform\030\004 \002(\r\022\025\n\rlastLoginTime\030\005 \002(\r\022\022\n\nl"
    "oginTimes\030\006 \002(\r\022\021\n\tloginDays\030\007 \002(\r\022\026\n\016la"
    "stActiveTime\030\010 \002(\r\022\023\n\013lastOffTime\030\t \002(\r\022"
    "\020\n\010forbidTs\030\n \002(\r\022\024\n\014forbidReason\030\013 \002(\014\022"
    "\025\n\rtutorialStage\030\014 \002(\r\022\014\n\004name\030\r \002(\014\022\013\n\003"
    "fig\030\016 \002(\014\022\013\n\003exp\030\017 \002(\004\022\r\n\005level\030\020 \002(\r\022\021\n"
    "\tacccharge\030\021 \002(\r\022\020\n\010viplevel\030\022 \002(\r\022\014\n\004ca"
    "sh\030\023 \002(\r\022\014\n\004coin\030\024 \002(\r\022\025\n\rfirstRecharge\030"
    "\025 \002(\r\022\022\n\nallianceId\030\026 \002(\r\022\023\n\013archiveChip"
    "\030\027 \002(\014\022\024\n\014archiveLevel\030\030 \002(\014\022\025\n\rarchiveR"
    "eward\030\031 \002(\014\022\r\n\005power\030\032 \002(\r\022\023\n\013recoverTim"
    "e\030\033 \002(\r\022\014\n\004pass\030\034 \002(\r\022\027\n\017limitTimesProps"
    "\030\035 \002(\014\022\022\n\nusePropsTs\030\036 \002(\r\022\016\n\006heroId\030\037 \002"
    "(\r\022\r\n\005honor\030  \002(\004\022\022\n\ndailyPower\030! \002(\r\022\024\n"
    "\014dailyPowerTs\030\" \002(\r\022\024\n\014onhookCoinTs\030# \002("
    "\r\022\023\n\013onhookExpTs\030$ \002(\r\022\025\n\rdailyBattleTs\030"
    "% \002(\r\022\030\n\020dailyBattleCount\030& \002(\r\022\031\n\021invit"
    "eFriendCount\030\' \002(\r\022\030\n\020inviteRewardMark\030("
    " \002(\004\022\033\n\023inviteAddRewardMark\030) \002(\r\022\031\n\021fre"
    "eDrawRewardsTs\030* \002(\r\"A\n\014ActivityItem\022\n\n\002"
    "id\030\001 \002(\r\022\013\n\003bts\030\002 \002(\r\022\013\n\003ets\030\003 \002(\r\022\013\n\003ve"
    "r\030\004 \002(\r\"+\n\010Activity\022\037\n\003act\030\001 \003(\0132\022.User."
    "ActivityItem\"K\n\013GradeBattle\022\r\n\005grade\030\001 \002"
    "(\r\022\022\n\ndailyScore\030\002 \002(\r\022\r\n\005score\030\003 \002(\r\022\n\n"
    "\002ts\030\004 \002(\r\"\265\004\n\004User\022\030\n\004base\030\001 \002(\0132\n.User."
    "Base\022\n\n\002ts\030\002 \002(\r\022 \n\010activity\030\003 \002(\0132\016.Use"
    "r.Activity\022/\n\010notifies\030\004 \001(\0132\035.ProtoNoti"
    "fy.NotifyItemCPPAll\022\'\n\007charges\030\005 \002(\0132\026.U"
    "ser.AccumulateCharge\0228\n\014gameactivity\030\006 \002"
    "(\0132\".ProtoActivity.GameAcitivityAllCPP\022&"
    "\n\004item\030\007 \003(\0132\030.DataCommon.PropsItemCPP\022\016"
    "\n\006opents\030\010 \002(\r\022\036\n\005heros\030\t \002(\0132\017.User.Her"
    "osInfo\022 \n\005grade\030\n \002(\0132\021.User.GradeBattle"
    "\022!\n\007friends\030\013 \002(\0132\020.User.FriendInfo\022\"\n\006o"
    "nhook\030\014 \002(\0132\022.User.OnhookReward\022\"\n\007allcl"
    "ub\030\r \002(\0132\021.User.MartialClub\022)\n\004post\030\016 \002("
    "\0132\033.ProtoNotify.PostItemCPPAll\022\024\n\014drawRe"
    "wardId\030\017 \002(\r\022+\n\ninviteInfo\030\020 \003(\0132\027.User."
    "InivteUserInfoCPP\"\037\n\020RequestOtherUser\022\013\n"
    "\003uid\030\001 \002(\r\"%\n\tOtherUser\022\030\n\004base\030\001 \002(\0132\n."
    "User.Base\"&\n\rTutorialstage\022\025\n\rtutorialSt"
    "age\030\001 \002(\r\"\030\n\nServerTime\022\n\n\002ts\030\001 \002(\r\">\n\013C"
    "ostCashReq\022\014\n\004cash\030\001 \002(\r\022\016\n\006opCode\030\002 \002(\t"
    "\022\021\n\toperation\030\003 \002(\r\"/\n\014CostCashResp\022\014\n\004c"
    "ash\030\001 \002(\r\022\021\n\toperation\030\002 \002(\r\"&\n\nChargeIt"
    "em\022\014\n\004cash\030\001 \002(\r\022\n\n\002ts\030\002 \002(\r\">\n\020Accumula"
    "teCharge\022*\n\020accumulateCharge\030\001 \003(\0132\020.Use"
    "r.ChargeItem\"J\n\027PushAccumulateChangeReq\022"
    "/\n\017changeAcccharge\030\001 \002(\0132\026.User.Accumula"
    "teCharge\"4\n\017BuyMaterialInfo\022\017\n\007propsid\030\001"
    " \002(\r\022\020\n\010propscnt\030\002 \002(\r\"8\n\016BuyMaterialReq"
    "\022&\n\007buyinfo\030\001 \003(\0132\025.User.BuyMaterialInfo"
    "\">\n\017BuyMaterialResp\022+\n\007commons\030\001 \002(\0132\032.D"
    "ataCommon.CommonItemsCPP\"3\n\022RequestOther"
    "UserBC\022\016\n\006othuid\030\001 \002(\r\022\r\n\005myuid\030\002 \002(\r\"&\n"
    "\nSpeedUpReq\022\014\n\004type\030\001 \002(\r\022\n\n\002ud\030\002 \001(\r\":\n"
    "\013SpeedUpResp\022+\n\007commons\030\001 \001(\0132\032.DataComm"
    "on.CommonItemsCPP\"5\n\tHerosInfo\022(\n\004hero\030\001"
    " \003(\0132\032.ProtoHero.HeroBaseInfoCPP\"6\n\nFrie"
    "ndInfo\022(\n\004info\030\013 \003(\0132\032.ProtoFriend.Recom"
    "mendInfo\";\n\014OnhookReward\022+\n\007commons\030\001 \002("
    "\0132\032.DataCommon.CommonItemsCPP\"@\n\013Martial"
    "Club\0221\n\004club\030\001 \003(\0132#.ProtoMartialClub.Si"
    "ngleMartialClub\"B\n\013MartialHero\0223\n\010heroIn"
    "fo\030\001 \003(\0132!.ProtoMartialClub.MartialHeroI"
    "nfo\")\n\013BuyPowerReq\022\016\n\006propid\030\001 \002(\r\022\n\n\002ts"
    "\030\002 \002(\r\";\n\014BuyPowerResp\022+\n\007commons\030\001 \002(\0132"
    "\032.DataCommon.CommonItemsCPP\"E\n\026OnhookOnl"
    "inePropReward\022+\n\007commons\030\001 \002(\0132\032.DataCom"
    "mon.CommonItemsCPP\";\n\021InivteUserInfoCPP\022"
    "\013\n\003uid\030\001 \002(\r\022\014\n\004name\030\002 \002(\014\022\013\n\003fig\030\003 \002(\014\""
    "$\n\024InviteActivityUrlReq\022\014\n\004uuid\030\001 \002(\r\"3\n"
    "\026CSInviteActivityUrlReq\022\014\n\004uuid\030\001 \002(\r\022\013\n"
    "\003uid\030\002 \002(\r\"!\n\022GetInviteRewardReq\022\013\n\003seq\030"
    "\001 \002(\r\"P\n\023GetInviteRewardResp\022\014\n\004mark\030\001 \002"
    "(\004\022+\n\007commons\030\002 \002(\0132\032.DataCommon.CommonI"
    "temsCPP\"$\n\025GetAddInviteRewardReq\022\013\n\003num\030"
    "\001 \002(\r\"S\n\026GetAddInviteRewardResp\022\014\n\004mark\030"
    "\001 \002(\r\022+\n\007commons\030\002 \002(\0132\032.DataCommon.Comm"
    "onItemsCPP\" \n\020GetDrawRewardReq\022\014\n\004free\030\001"
    " \002(\r\"_\n\021GetDrawRewardResp\022\016\n\006nextId\030\001 \002("
    "\r\022\r\n\005index\030\002 \002(\r\022+\n\007commons\030\003 \002(\0132\032.Data"
    "Common.CommonItemsCPP\"\037\n\020NewUserAddExpRe"
    "q\022\013\n\003exp\030\001 \002(\r\"@\n\021NewUserAddExpResp\022+\n\007c"
    "ommons\030\001 \002(\0132\032.DataCommon.CommonItemsCPP", 3640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "User.proto", &protobuf_RegisterTypes);
  Base::default_instance_ = new Base();
  ActivityItem::default_instance_ = new ActivityItem();
  Activity::default_instance_ = new Activity();
  GradeBattle::default_instance_ = new GradeBattle();
  User::default_instance_ = new User();
  RequestOtherUser::default_instance_ = new RequestOtherUser();
  OtherUser::default_instance_ = new OtherUser();
  Tutorialstage::default_instance_ = new Tutorialstage();
  ServerTime::default_instance_ = new ServerTime();
  CostCashReq::default_instance_ = new CostCashReq();
  CostCashResp::default_instance_ = new CostCashResp();
  ChargeItem::default_instance_ = new ChargeItem();
  AccumulateCharge::default_instance_ = new AccumulateCharge();
  PushAccumulateChangeReq::default_instance_ = new PushAccumulateChangeReq();
  BuyMaterialInfo::default_instance_ = new BuyMaterialInfo();
  BuyMaterialReq::default_instance_ = new BuyMaterialReq();
  BuyMaterialResp::default_instance_ = new BuyMaterialResp();
  RequestOtherUserBC::default_instance_ = new RequestOtherUserBC();
  SpeedUpReq::default_instance_ = new SpeedUpReq();
  SpeedUpResp::default_instance_ = new SpeedUpResp();
  HerosInfo::default_instance_ = new HerosInfo();
  FriendInfo::default_instance_ = new FriendInfo();
  OnhookReward::default_instance_ = new OnhookReward();
  MartialClub::default_instance_ = new MartialClub();
  MartialHero::default_instance_ = new MartialHero();
  BuyPowerReq::default_instance_ = new BuyPowerReq();
  BuyPowerResp::default_instance_ = new BuyPowerResp();
  OnhookOnlinePropReward::default_instance_ = new OnhookOnlinePropReward();
  InivteUserInfoCPP::default_instance_ = new InivteUserInfoCPP();
  InviteActivityUrlReq::default_instance_ = new InviteActivityUrlReq();
  CSInviteActivityUrlReq::default_instance_ = new CSInviteActivityUrlReq();
  GetInviteRewardReq::default_instance_ = new GetInviteRewardReq();
  GetInviteRewardResp::default_instance_ = new GetInviteRewardResp();
  GetAddInviteRewardReq::default_instance_ = new GetAddInviteRewardReq();
  GetAddInviteRewardResp::default_instance_ = new GetAddInviteRewardResp();
  GetDrawRewardReq::default_instance_ = new GetDrawRewardReq();
  GetDrawRewardResp::default_instance_ = new GetDrawRewardResp();
  NewUserAddExpReq::default_instance_ = new NewUserAddExpReq();
  NewUserAddExpResp::default_instance_ = new NewUserAddExpResp();
  Base::default_instance_->InitAsDefaultInstance();
  ActivityItem::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  GradeBattle::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  RequestOtherUser::default_instance_->InitAsDefaultInstance();
  OtherUser::default_instance_->InitAsDefaultInstance();
  Tutorialstage::default_instance_->InitAsDefaultInstance();
  ServerTime::default_instance_->InitAsDefaultInstance();
  CostCashReq::default_instance_->InitAsDefaultInstance();
  CostCashResp::default_instance_->InitAsDefaultInstance();
  ChargeItem::default_instance_->InitAsDefaultInstance();
  AccumulateCharge::default_instance_->InitAsDefaultInstance();
  PushAccumulateChangeReq::default_instance_->InitAsDefaultInstance();
  BuyMaterialInfo::default_instance_->InitAsDefaultInstance();
  BuyMaterialReq::default_instance_->InitAsDefaultInstance();
  BuyMaterialResp::default_instance_->InitAsDefaultInstance();
  RequestOtherUserBC::default_instance_->InitAsDefaultInstance();
  SpeedUpReq::default_instance_->InitAsDefaultInstance();
  SpeedUpResp::default_instance_->InitAsDefaultInstance();
  HerosInfo::default_instance_->InitAsDefaultInstance();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  OnhookReward::default_instance_->InitAsDefaultInstance();
  MartialClub::default_instance_->InitAsDefaultInstance();
  MartialHero::default_instance_->InitAsDefaultInstance();
  BuyPowerReq::default_instance_->InitAsDefaultInstance();
  BuyPowerResp::default_instance_->InitAsDefaultInstance();
  OnhookOnlinePropReward::default_instance_->InitAsDefaultInstance();
  InivteUserInfoCPP::default_instance_->InitAsDefaultInstance();
  InviteActivityUrlReq::default_instance_->InitAsDefaultInstance();
  CSInviteActivityUrlReq::default_instance_->InitAsDefaultInstance();
  GetInviteRewardReq::default_instance_->InitAsDefaultInstance();
  GetInviteRewardResp::default_instance_->InitAsDefaultInstance();
  GetAddInviteRewardReq::default_instance_->InitAsDefaultInstance();
  GetAddInviteRewardResp::default_instance_->InitAsDefaultInstance();
  GetDrawRewardReq::default_instance_->InitAsDefaultInstance();
  GetDrawRewardResp::default_instance_->InitAsDefaultInstance();
  NewUserAddExpReq::default_instance_->InitAsDefaultInstance();
  NewUserAddExpResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_User_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_User_2eproto {
  StaticDescriptorInitializer_User_2eproto() {
    protobuf_AddDesc_User_2eproto();
  }
} static_descriptor_initializer_User_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Base::kUidFieldNumber;
const int Base::kRegisterPlatformFieldNumber;
const int Base::kRegisterTimeFieldNumber;
const int Base::kLastLoginPlatformFieldNumber;
const int Base::kLastLoginTimeFieldNumber;
const int Base::kLoginTimesFieldNumber;
const int Base::kLoginDaysFieldNumber;
const int Base::kLastActiveTimeFieldNumber;
const int Base::kLastOffTimeFieldNumber;
const int Base::kForbidTsFieldNumber;
const int Base::kForbidReasonFieldNumber;
const int Base::kTutorialStageFieldNumber;
const int Base::kNameFieldNumber;
const int Base::kFigFieldNumber;
const int Base::kExpFieldNumber;
const int Base::kLevelFieldNumber;
const int Base::kAccchargeFieldNumber;
const int Base::kViplevelFieldNumber;
const int Base::kCashFieldNumber;
const int Base::kCoinFieldNumber;
const int Base::kFirstRechargeFieldNumber;
const int Base::kAllianceIdFieldNumber;
const int Base::kArchiveChipFieldNumber;
const int Base::kArchiveLevelFieldNumber;
const int Base::kArchiveRewardFieldNumber;
const int Base::kPowerFieldNumber;
const int Base::kRecoverTimeFieldNumber;
const int Base::kPassFieldNumber;
const int Base::kLimitTimesPropsFieldNumber;
const int Base::kUsePropsTsFieldNumber;
const int Base::kHeroIdFieldNumber;
const int Base::kHonorFieldNumber;
const int Base::kDailyPowerFieldNumber;
const int Base::kDailyPowerTsFieldNumber;
const int Base::kOnhookCoinTsFieldNumber;
const int Base::kOnhookExpTsFieldNumber;
const int Base::kDailyBattleTsFieldNumber;
const int Base::kDailyBattleCountFieldNumber;
const int Base::kInviteFriendCountFieldNumber;
const int Base::kInviteRewardMarkFieldNumber;
const int Base::kInviteAddRewardMarkFieldNumber;
const int Base::kFreeDrawRewardsTsFieldNumber;
#endif  // !_MSC_VER

Base::Base()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Base::InitAsDefaultInstance() {
}

Base::Base(const Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Base::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  registerplatform_ = 0u;
  registertime_ = 0u;
  lastloginplatform_ = 0u;
  lastlogintime_ = 0u;
  logintimes_ = 0u;
  logindays_ = 0u;
  lastactivetime_ = 0u;
  lastofftime_ = 0u;
  forbidts_ = 0u;
  forbidreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tutorialstage_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  acccharge_ = 0u;
  viplevel_ = 0u;
  cash_ = 0u;
  coin_ = 0u;
  firstrecharge_ = 0u;
  allianceid_ = 0u;
  archivechip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  archivelevel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  archivereward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  power_ = 0u;
  recovertime_ = 0u;
  pass_ = 0u;
  limittimesprops_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usepropsts_ = 0u;
  heroid_ = 0u;
  honor_ = GOOGLE_ULONGLONG(0);
  dailypower_ = 0u;
  dailypowerts_ = 0u;
  onhookcoints_ = 0u;
  onhookexpts_ = 0u;
  dailybattlets_ = 0u;
  dailybattlecount_ = 0u;
  invitefriendcount_ = 0u;
  inviterewardmark_ = GOOGLE_ULONGLONG(0);
  inviteaddrewardmark_ = 0u;
  freedrawrewardsts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Base::~Base() {
  SharedDtor();
}

void Base::SharedDtor() {
  if (forbidreason_ != &::google::protobuf::internal::kEmptyString) {
    delete forbidreason_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    delete fig_;
  }
  if (archivechip_ != &::google::protobuf::internal::kEmptyString) {
    delete archivechip_;
  }
  if (archivelevel_ != &::google::protobuf::internal::kEmptyString) {
    delete archivelevel_;
  }
  if (archivereward_ != &::google::protobuf::internal::kEmptyString) {
    delete archivereward_;
  }
  if (limittimesprops_ != &::google::protobuf::internal::kEmptyString) {
    delete limittimesprops_;
  }
  if (this != default_instance_) {
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New() const {
  return new Base;
}

void Base::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    registerplatform_ = 0u;
    registertime_ = 0u;
    lastloginplatform_ = 0u;
    lastlogintime_ = 0u;
    logintimes_ = 0u;
    logindays_ = 0u;
    lastactivetime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lastofftime_ = 0u;
    forbidts_ = 0u;
    if (has_forbidreason()) {
      if (forbidreason_ != &::google::protobuf::internal::kEmptyString) {
        forbidreason_->clear();
      }
    }
    tutorialstage_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::kEmptyString) {
        fig_->clear();
      }
    }
    exp_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    acccharge_ = 0u;
    viplevel_ = 0u;
    cash_ = 0u;
    coin_ = 0u;
    firstrecharge_ = 0u;
    allianceid_ = 0u;
    if (has_archivechip()) {
      if (archivechip_ != &::google::protobuf::internal::kEmptyString) {
        archivechip_->clear();
      }
    }
    if (has_archivelevel()) {
      if (archivelevel_ != &::google::protobuf::internal::kEmptyString) {
        archivelevel_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_archivereward()) {
      if (archivereward_ != &::google::protobuf::internal::kEmptyString) {
        archivereward_->clear();
      }
    }
    power_ = 0u;
    recovertime_ = 0u;
    pass_ = 0u;
    if (has_limittimesprops()) {
      if (limittimesprops_ != &::google::protobuf::internal::kEmptyString) {
        limittimesprops_->clear();
      }
    }
    usepropsts_ = 0u;
    heroid_ = 0u;
    honor_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    dailypower_ = 0u;
    dailypowerts_ = 0u;
    onhookcoints_ = 0u;
    onhookexpts_ = 0u;
    dailybattlets_ = 0u;
    dailybattlecount_ = 0u;
    invitefriendcount_ = 0u;
    inviterewardmark_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    inviteaddrewardmark_ = 0u;
    freedrawrewardsts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_registerPlatform;
        break;
      }
      
      // required uint32 registerPlatform = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_registerPlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registerplatform_)));
          set_has_registerplatform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_registerTime;
        break;
      }
      
      // required uint32 registerTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_registerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registertime_)));
          set_has_registertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastLoginPlatform;
        break;
      }
      
      // required uint32 lastLoginPlatform = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginPlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastloginplatform_)));
          set_has_lastloginplatform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastLoginTime;
        break;
      }
      
      // required uint32 lastLoginTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loginTimes;
        break;
      }
      
      // required uint32 loginTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintimes_)));
          set_has_logintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loginDays;
        break;
      }
      
      // required uint32 loginDays = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logindays_)));
          set_has_logindays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lastActiveTime;
        break;
      }
      
      // required uint32 lastActiveTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastActiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastactivetime_)));
          set_has_lastactivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lastOffTime;
        break;
      }
      
      // required uint32 lastOffTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastOffTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastofftime_)));
          set_has_lastofftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_forbidTs;
        break;
      }
      
      // required uint32 forbidTs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forbidTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbidts_)));
          set_has_forbidts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_forbidReason;
        break;
      }
      
      // required bytes forbidReason = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forbidReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forbidreason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tutorialStage;
        break;
      }
      
      // required uint32 tutorialStage = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tutorialStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorialstage_)));
          set_has_tutorialstage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_name;
        break;
      }
      
      // required bytes name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fig;
        break;
      }
      
      // required bytes fig = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_exp;
        break;
      }
      
      // required uint64 exp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_level;
        break;
      }
      
      // required uint32 level = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_acccharge;
        break;
      }
      
      // required uint32 acccharge = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acccharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acccharge_)));
          set_has_acccharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_viplevel;
        break;
      }
      
      // required uint32 viplevel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cash;
        break;
      }
      
      // required uint32 cash = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_coin;
        break;
      }
      
      // required uint32 coin = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_firstRecharge;
        break;
      }
      
      // required uint32 firstRecharge = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstrecharge_)));
          set_has_firstrecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_allianceId;
        break;
      }
      
      // required uint32 allianceId = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_archiveChip;
        break;
      }
      
      // required bytes archiveChip = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archiveChip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_archivechip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_archiveLevel;
        break;
      }
      
      // required bytes archiveLevel = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archiveLevel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_archivelevel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_archiveReward;
        break;
      }
      
      // required bytes archiveReward = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_archiveReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_archivereward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_power;
        break;
      }
      
      // required uint32 power = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_recoverTime;
        break;
      }
      
      // required uint32 recoverTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recovertime_)));
          set_has_recovertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_pass;
        break;
      }
      
      // required uint32 pass = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_limitTimesProps;
        break;
      }
      
      // required bytes limitTimesProps = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limitTimesProps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_limittimesprops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_usePropsTs;
        break;
      }
      
      // required uint32 usePropsTs = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usePropsTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usepropsts_)));
          set_has_usepropsts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_heroId;
        break;
      }
      
      // required uint32 heroId = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_honor;
        break;
      }
      
      // required uint64 honor = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_dailyPower;
        break;
      }
      
      // required uint32 dailyPower = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailypower_)));
          set_has_dailypower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_dailyPowerTs;
        break;
      }
      
      // required uint32 dailyPowerTs = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyPowerTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailypowerts_)));
          set_has_dailypowerts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_onhookCoinTs;
        break;
      }
      
      // required uint32 onhookCoinTs = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onhookCoinTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onhookcoints_)));
          set_has_onhookcoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_onhookExpTs;
        break;
      }
      
      // required uint32 onhookExpTs = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onhookExpTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onhookexpts_)));
          set_has_onhookexpts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_dailyBattleTs;
        break;
      }
      
      // required uint32 dailyBattleTs = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyBattleTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailybattlets_)));
          set_has_dailybattlets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_dailyBattleCount;
        break;
      }
      
      // required uint32 dailyBattleCount = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyBattleCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailybattlecount_)));
          set_has_dailybattlecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_inviteFriendCount;
        break;
      }
      
      // required uint32 inviteFriendCount = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteFriendCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitefriendcount_)));
          set_has_invitefriendcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_inviteRewardMark;
        break;
      }
      
      // required uint64 inviteRewardMark = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteRewardMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviterewardmark_)));
          set_has_inviterewardmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_inviteAddRewardMark;
        break;
      }
      
      // required uint32 inviteAddRewardMark = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteAddRewardMark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteaddrewardmark_)));
          set_has_inviteaddrewardmark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_freeDrawRewardsTs;
        break;
      }
      
      // required uint32 freeDrawRewardsTs = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeDrawRewardsTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freedrawrewardsts_)));
          set_has_freedrawrewardsts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  // required uint32 registerPlatform = 2;
  if (has_registerplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->registerplatform(), output);
  }
  
  // required uint32 registerTime = 3;
  if (has_registertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->registertime(), output);
  }
  
  // required uint32 lastLoginPlatform = 4;
  if (has_lastloginplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastloginplatform(), output);
  }
  
  // required uint32 lastLoginTime = 5;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastlogintime(), output);
  }
  
  // required uint32 loginTimes = 6;
  if (has_logintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logintimes(), output);
  }
  
  // required uint32 loginDays = 7;
  if (has_logindays()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->logindays(), output);
  }
  
  // required uint32 lastActiveTime = 8;
  if (has_lastactivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lastactivetime(), output);
  }
  
  // required uint32 lastOffTime = 9;
  if (has_lastofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lastofftime(), output);
  }
  
  // required uint32 forbidTs = 10;
  if (has_forbidts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->forbidts(), output);
  }
  
  // required bytes forbidReason = 11;
  if (has_forbidreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->forbidreason(), output);
  }
  
  // required uint32 tutorialStage = 12;
  if (has_tutorialstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tutorialstage(), output);
  }
  
  // required bytes name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->name(), output);
  }
  
  // required bytes fig = 14;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->fig(), output);
  }
  
  // required uint64 exp = 15;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->exp(), output);
  }
  
  // required uint32 level = 16;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->level(), output);
  }
  
  // required uint32 acccharge = 17;
  if (has_acccharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->acccharge(), output);
  }
  
  // required uint32 viplevel = 18;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->viplevel(), output);
  }
  
  // required uint32 cash = 19;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->cash(), output);
  }
  
  // required uint32 coin = 20;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->coin(), output);
  }
  
  // required uint32 firstRecharge = 21;
  if (has_firstrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->firstrecharge(), output);
  }
  
  // required uint32 allianceId = 22;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->allianceid(), output);
  }
  
  // required bytes archiveChip = 23;
  if (has_archivechip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      23, this->archivechip(), output);
  }
  
  // required bytes archiveLevel = 24;
  if (has_archivelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      24, this->archivelevel(), output);
  }
  
  // required bytes archiveReward = 25;
  if (has_archivereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      25, this->archivereward(), output);
  }
  
  // required uint32 power = 26;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->power(), output);
  }
  
  // required uint32 recoverTime = 27;
  if (has_recovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->recovertime(), output);
  }
  
  // required uint32 pass = 28;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->pass(), output);
  }
  
  // required bytes limitTimesProps = 29;
  if (has_limittimesprops()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      29, this->limittimesprops(), output);
  }
  
  // required uint32 usePropsTs = 30;
  if (has_usepropsts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->usepropsts(), output);
  }
  
  // required uint32 heroId = 31;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->heroid(), output);
  }
  
  // required uint64 honor = 32;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->honor(), output);
  }
  
  // required uint32 dailyPower = 33;
  if (has_dailypower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->dailypower(), output);
  }
  
  // required uint32 dailyPowerTs = 34;
  if (has_dailypowerts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->dailypowerts(), output);
  }
  
  // required uint32 onhookCoinTs = 35;
  if (has_onhookcoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->onhookcoints(), output);
  }
  
  // required uint32 onhookExpTs = 36;
  if (has_onhookexpts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->onhookexpts(), output);
  }
  
  // required uint32 dailyBattleTs = 37;
  if (has_dailybattlets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->dailybattlets(), output);
  }
  
  // required uint32 dailyBattleCount = 38;
  if (has_dailybattlecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->dailybattlecount(), output);
  }
  
  // required uint32 inviteFriendCount = 39;
  if (has_invitefriendcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->invitefriendcount(), output);
  }
  
  // required uint64 inviteRewardMark = 40;
  if (has_inviterewardmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->inviterewardmark(), output);
  }
  
  // required uint32 inviteAddRewardMark = 41;
  if (has_inviteaddrewardmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->inviteaddrewardmark(), output);
  }
  
  // required uint32 freeDrawRewardsTs = 42;
  if (has_freedrawrewardsts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->freedrawrewardsts(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  // required uint32 registerPlatform = 2;
  if (has_registerplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->registerplatform(), target);
  }
  
  // required uint32 registerTime = 3;
  if (has_registertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->registertime(), target);
  }
  
  // required uint32 lastLoginPlatform = 4;
  if (has_lastloginplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastloginplatform(), target);
  }
  
  // required uint32 lastLoginTime = 5;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastlogintime(), target);
  }
  
  // required uint32 loginTimes = 6;
  if (has_logintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logintimes(), target);
  }
  
  // required uint32 loginDays = 7;
  if (has_logindays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->logindays(), target);
  }
  
  // required uint32 lastActiveTime = 8;
  if (has_lastactivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lastactivetime(), target);
  }
  
  // required uint32 lastOffTime = 9;
  if (has_lastofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lastofftime(), target);
  }
  
  // required uint32 forbidTs = 10;
  if (has_forbidts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->forbidts(), target);
  }
  
  // required bytes forbidReason = 11;
  if (has_forbidreason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->forbidreason(), target);
  }
  
  // required uint32 tutorialStage = 12;
  if (has_tutorialstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tutorialstage(), target);
  }
  
  // required bytes name = 13;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->name(), target);
  }
  
  // required bytes fig = 14;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->fig(), target);
  }
  
  // required uint64 exp = 15;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->exp(), target);
  }
  
  // required uint32 level = 16;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->level(), target);
  }
  
  // required uint32 acccharge = 17;
  if (has_acccharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->acccharge(), target);
  }
  
  // required uint32 viplevel = 18;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->viplevel(), target);
  }
  
  // required uint32 cash = 19;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->cash(), target);
  }
  
  // required uint32 coin = 20;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->coin(), target);
  }
  
  // required uint32 firstRecharge = 21;
  if (has_firstrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->firstrecharge(), target);
  }
  
  // required uint32 allianceId = 22;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->allianceid(), target);
  }
  
  // required bytes archiveChip = 23;
  if (has_archivechip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->archivechip(), target);
  }
  
  // required bytes archiveLevel = 24;
  if (has_archivelevel()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        24, this->archivelevel(), target);
  }
  
  // required bytes archiveReward = 25;
  if (has_archivereward()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->archivereward(), target);
  }
  
  // required uint32 power = 26;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->power(), target);
  }
  
  // required uint32 recoverTime = 27;
  if (has_recovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->recovertime(), target);
  }
  
  // required uint32 pass = 28;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->pass(), target);
  }
  
  // required bytes limitTimesProps = 29;
  if (has_limittimesprops()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        29, this->limittimesprops(), target);
  }
  
  // required uint32 usePropsTs = 30;
  if (has_usepropsts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->usepropsts(), target);
  }
  
  // required uint32 heroId = 31;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->heroid(), target);
  }
  
  // required uint64 honor = 32;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->honor(), target);
  }
  
  // required uint32 dailyPower = 33;
  if (has_dailypower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->dailypower(), target);
  }
  
  // required uint32 dailyPowerTs = 34;
  if (has_dailypowerts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->dailypowerts(), target);
  }
  
  // required uint32 onhookCoinTs = 35;
  if (has_onhookcoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->onhookcoints(), target);
  }
  
  // required uint32 onhookExpTs = 36;
  if (has_onhookexpts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->onhookexpts(), target);
  }
  
  // required uint32 dailyBattleTs = 37;
  if (has_dailybattlets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->dailybattlets(), target);
  }
  
  // required uint32 dailyBattleCount = 38;
  if (has_dailybattlecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->dailybattlecount(), target);
  }
  
  // required uint32 inviteFriendCount = 39;
  if (has_invitefriendcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->invitefriendcount(), target);
  }
  
  // required uint64 inviteRewardMark = 40;
  if (has_inviterewardmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->inviterewardmark(), target);
  }
  
  // required uint32 inviteAddRewardMark = 41;
  if (has_inviteaddrewardmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->inviteaddrewardmark(), target);
  }
  
  // required uint32 freeDrawRewardsTs = 42;
  if (has_freedrawrewardsts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->freedrawrewardsts(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Base::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 registerPlatform = 2;
    if (has_registerplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registerplatform());
    }
    
    // required uint32 registerTime = 3;
    if (has_registertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registertime());
    }
    
    // required uint32 lastLoginPlatform = 4;
    if (has_lastloginplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastloginplatform());
    }
    
    // required uint32 lastLoginTime = 5;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogintime());
    }
    
    // required uint32 loginTimes = 6;
    if (has_logintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintimes());
    }
    
    // required uint32 loginDays = 7;
    if (has_logindays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logindays());
    }
    
    // required uint32 lastActiveTime = 8;
    if (has_lastactivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastactivetime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 lastOffTime = 9;
    if (has_lastofftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastofftime());
    }
    
    // required uint32 forbidTs = 10;
    if (has_forbidts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbidts());
    }
    
    // required bytes forbidReason = 11;
    if (has_forbidreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->forbidreason());
    }
    
    // required uint32 tutorialStage = 12;
    if (has_tutorialstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorialstage());
    }
    
    // required bytes name = 13;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required bytes fig = 14;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }
    
    // required uint64 exp = 15;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }
    
    // required uint32 level = 16;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 acccharge = 17;
    if (has_acccharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acccharge());
    }
    
    // required uint32 viplevel = 18;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }
    
    // required uint32 cash = 19;
    if (has_cash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // required uint32 coin = 20;
    if (has_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }
    
    // required uint32 firstRecharge = 21;
    if (has_firstrecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstrecharge());
    }
    
    // required uint32 allianceId = 22;
    if (has_allianceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }
    
    // required bytes archiveChip = 23;
    if (has_archivechip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->archivechip());
    }
    
    // required bytes archiveLevel = 24;
    if (has_archivelevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->archivelevel());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required bytes archiveReward = 25;
    if (has_archivereward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->archivereward());
    }
    
    // required uint32 power = 26;
    if (has_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }
    
    // required uint32 recoverTime = 27;
    if (has_recovertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recovertime());
    }
    
    // required uint32 pass = 28;
    if (has_pass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass());
    }
    
    // required bytes limitTimesProps = 29;
    if (has_limittimesprops()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->limittimesprops());
    }
    
    // required uint32 usePropsTs = 30;
    if (has_usepropsts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usepropsts());
    }
    
    // required uint32 heroId = 31;
    if (has_heroid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // required uint64 honor = 32;
    if (has_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->honor());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required uint32 dailyPower = 33;
    if (has_dailypower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailypower());
    }
    
    // required uint32 dailyPowerTs = 34;
    if (has_dailypowerts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailypowerts());
    }
    
    // required uint32 onhookCoinTs = 35;
    if (has_onhookcoints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onhookcoints());
    }
    
    // required uint32 onhookExpTs = 36;
    if (has_onhookexpts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onhookexpts());
    }
    
    // required uint32 dailyBattleTs = 37;
    if (has_dailybattlets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailybattlets());
    }
    
    // required uint32 dailyBattleCount = 38;
    if (has_dailybattlecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailybattlecount());
    }
    
    // required uint32 inviteFriendCount = 39;
    if (has_invitefriendcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitefriendcount());
    }
    
    // required uint64 inviteRewardMark = 40;
    if (has_inviterewardmark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviterewardmark());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required uint32 inviteAddRewardMark = 41;
    if (has_inviteaddrewardmark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteaddrewardmark());
    }
    
    // required uint32 freeDrawRewardsTs = 42;
    if (has_freedrawrewardsts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freedrawrewardsts());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_registerplatform()) {
      set_registerplatform(from.registerplatform());
    }
    if (from.has_registertime()) {
      set_registertime(from.registertime());
    }
    if (from.has_lastloginplatform()) {
      set_lastloginplatform(from.lastloginplatform());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_logintimes()) {
      set_logintimes(from.logintimes());
    }
    if (from.has_logindays()) {
      set_logindays(from.logindays());
    }
    if (from.has_lastactivetime()) {
      set_lastactivetime(from.lastactivetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastofftime()) {
      set_lastofftime(from.lastofftime());
    }
    if (from.has_forbidts()) {
      set_forbidts(from.forbidts());
    }
    if (from.has_forbidreason()) {
      set_forbidreason(from.forbidreason());
    }
    if (from.has_tutorialstage()) {
      set_tutorialstage(from.tutorialstage());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_acccharge()) {
      set_acccharge(from.acccharge());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_firstrecharge()) {
      set_firstrecharge(from.firstrecharge());
    }
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_archivechip()) {
      set_archivechip(from.archivechip());
    }
    if (from.has_archivelevel()) {
      set_archivelevel(from.archivelevel());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_archivereward()) {
      set_archivereward(from.archivereward());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_recovertime()) {
      set_recovertime(from.recovertime());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_limittimesprops()) {
      set_limittimesprops(from.limittimesprops());
    }
    if (from.has_usepropsts()) {
      set_usepropsts(from.usepropsts());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_dailypower()) {
      set_dailypower(from.dailypower());
    }
    if (from.has_dailypowerts()) {
      set_dailypowerts(from.dailypowerts());
    }
    if (from.has_onhookcoints()) {
      set_onhookcoints(from.onhookcoints());
    }
    if (from.has_onhookexpts()) {
      set_onhookexpts(from.onhookexpts());
    }
    if (from.has_dailybattlets()) {
      set_dailybattlets(from.dailybattlets());
    }
    if (from.has_dailybattlecount()) {
      set_dailybattlecount(from.dailybattlecount());
    }
    if (from.has_invitefriendcount()) {
      set_invitefriendcount(from.invitefriendcount());
    }
    if (from.has_inviterewardmark()) {
      set_inviterewardmark(from.inviterewardmark());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_inviteaddrewardmark()) {
      set_inviteaddrewardmark(from.inviteaddrewardmark());
    }
    if (from.has_freedrawrewardsts()) {
      set_freedrawrewardsts(from.freedrawrewardsts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void Base::Swap(Base* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(registerplatform_, other->registerplatform_);
    std::swap(registertime_, other->registertime_);
    std::swap(lastloginplatform_, other->lastloginplatform_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(logintimes_, other->logintimes_);
    std::swap(logindays_, other->logindays_);
    std::swap(lastactivetime_, other->lastactivetime_);
    std::swap(lastofftime_, other->lastofftime_);
    std::swap(forbidts_, other->forbidts_);
    std::swap(forbidreason_, other->forbidreason_);
    std::swap(tutorialstage_, other->tutorialstage_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(acccharge_, other->acccharge_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(cash_, other->cash_);
    std::swap(coin_, other->coin_);
    std::swap(firstrecharge_, other->firstrecharge_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(archivechip_, other->archivechip_);
    std::swap(archivelevel_, other->archivelevel_);
    std::swap(archivereward_, other->archivereward_);
    std::swap(power_, other->power_);
    std::swap(recovertime_, other->recovertime_);
    std::swap(pass_, other->pass_);
    std::swap(limittimesprops_, other->limittimesprops_);
    std::swap(usepropsts_, other->usepropsts_);
    std::swap(heroid_, other->heroid_);
    std::swap(honor_, other->honor_);
    std::swap(dailypower_, other->dailypower_);
    std::swap(dailypowerts_, other->dailypowerts_);
    std::swap(onhookcoints_, other->onhookcoints_);
    std::swap(onhookexpts_, other->onhookexpts_);
    std::swap(dailybattlets_, other->dailybattlets_);
    std::swap(dailybattlecount_, other->dailybattlecount_);
    std::swap(invitefriendcount_, other->invitefriendcount_);
    std::swap(inviterewardmark_, other->inviterewardmark_);
    std::swap(inviteaddrewardmark_, other->inviteaddrewardmark_);
    std::swap(freedrawrewardsts_, other->freedrawrewardsts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityItem::kIdFieldNumber;
const int ActivityItem::kBtsFieldNumber;
const int ActivityItem::kEtsFieldNumber;
const int ActivityItem::kVerFieldNumber;
#endif  // !_MSC_VER

ActivityItem::ActivityItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityItem::InitAsDefaultInstance() {
}

ActivityItem::ActivityItem(const ActivityItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  bts_ = 0u;
  ets_ = 0u;
  ver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityItem::~ActivityItem() {
  SharedDtor();
}

void ActivityItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityItem_descriptor_;
}

const ActivityItem& ActivityItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

ActivityItem* ActivityItem::default_instance_ = NULL;

ActivityItem* ActivityItem::New() const {
  return new ActivityItem;
}

void ActivityItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    bts_ = 0u;
    ets_ = 0u;
    ver_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bts;
        break;
      }
      
      // required uint32 bts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bts_)));
          set_has_bts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ets;
        break;
      }
      
      // required uint32 ets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ets_)));
          set_has_ets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ver;
        break;
      }
      
      // required uint32 ver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 bts = 2;
  if (has_bts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bts(), output);
  }
  
  // required uint32 ets = 3;
  if (has_ets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ets(), output);
  }
  
  // required uint32 ver = 4;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 bts = 2;
  if (has_bts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bts(), target);
  }
  
  // required uint32 ets = 3;
  if (has_ets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ets(), target);
  }
  
  // required uint32 ver = 4;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 bts = 2;
    if (has_bts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bts());
    }
    
    // required uint32 ets = 3;
    if (has_ets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ets());
    }
    
    // required uint32 ver = 4;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityItem::MergeFrom(const ActivityItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bts()) {
      set_bts(from.bts());
    }
    if (from.has_ets()) {
      set_ets(from.ets());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityItem::CopyFrom(const ActivityItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ActivityItem::Swap(ActivityItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bts_, other->bts_);
    std::swap(ets_, other->ets_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityItem_descriptor_;
  metadata.reflection = ActivityItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kActFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity::InitAsDefaultInstance() {
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  SharedDtor();
}

void Activity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_descriptor_;
}

const Activity& Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  act_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User.ActivityItem act = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_act()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_act;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .User.ActivityItem act = 1;
  for (int i = 0; i < this->act_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->act(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .User.ActivityItem act = 1;
  for (int i = 0; i < this->act_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->act(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity::ByteSize() const {
  int total_size = 0;
  
  // repeated .User.ActivityItem act = 1;
  total_size += 1 * this->act_size();
  for (int i = 0; i < this->act_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->act(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  act_.MergeFrom(from.act_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {
  
  for (int i = 0; i < act_size(); i++) {
    if (!this->act(i).IsInitialized()) return false;
  }
  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    act_.Swap(&other->act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_descriptor_;
  metadata.reflection = Activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GradeBattle::kGradeFieldNumber;
const int GradeBattle::kDailyScoreFieldNumber;
const int GradeBattle::kScoreFieldNumber;
const int GradeBattle::kTsFieldNumber;
#endif  // !_MSC_VER

GradeBattle::GradeBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GradeBattle::InitAsDefaultInstance() {
}

GradeBattle::GradeBattle(const GradeBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GradeBattle::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0u;
  dailyscore_ = 0u;
  score_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GradeBattle::~GradeBattle() {
  SharedDtor();
}

void GradeBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GradeBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GradeBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GradeBattle_descriptor_;
}

const GradeBattle& GradeBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

GradeBattle* GradeBattle::default_instance_ = NULL;

GradeBattle* GradeBattle::New() const {
  return new GradeBattle;
}

void GradeBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0u;
    dailyscore_ = 0u;
    score_ = 0u;
    ts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GradeBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dailyScore;
        break;
      }
      
      // required uint32 dailyScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyscore_)));
          set_has_dailyscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }
      
      // required uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ts;
        break;
      }
      
      // required uint32 ts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GradeBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grade(), output);
  }
  
  // required uint32 dailyScore = 2;
  if (has_dailyscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dailyscore(), output);
  }
  
  // required uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }
  
  // required uint32 ts = 4;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ts(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GradeBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grade(), target);
  }
  
  // required uint32 dailyScore = 2;
  if (has_dailyscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dailyscore(), target);
  }
  
  // required uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }
  
  // required uint32 ts = 4;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ts(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GradeBattle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }
    
    // required uint32 dailyScore = 2;
    if (has_dailyscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyscore());
    }
    
    // required uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // required uint32 ts = 4;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GradeBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GradeBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GradeBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GradeBattle::MergeFrom(const GradeBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_dailyscore()) {
      set_dailyscore(from.dailyscore());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GradeBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GradeBattle::CopyFrom(const GradeBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void GradeBattle::Swap(GradeBattle* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(dailyscore_, other->dailyscore_);
    std::swap(score_, other->score_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GradeBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GradeBattle_descriptor_;
  metadata.reflection = GradeBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kBaseFieldNumber;
const int User::kTsFieldNumber;
const int User::kActivityFieldNumber;
const int User::kNotifiesFieldNumber;
const int User::kChargesFieldNumber;
const int User::kGameactivityFieldNumber;
const int User::kItemFieldNumber;
const int User::kOpentsFieldNumber;
const int User::kHerosFieldNumber;
const int User::kGradeFieldNumber;
const int User::kFriendsFieldNumber;
const int User::kOnhookFieldNumber;
const int User::kAllclubFieldNumber;
const int User::kPostFieldNumber;
const int User::kDrawRewardIdFieldNumber;
const int User::kInviteInfoFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
  base_ = const_cast< ::User::Base*>(&::User::Base::default_instance());
  activity_ = const_cast< ::User::Activity*>(&::User::Activity::default_instance());
  notifies_ = const_cast< ::ProtoNotify::NotifyItemCPPAll*>(&::ProtoNotify::NotifyItemCPPAll::default_instance());
  charges_ = const_cast< ::User::AccumulateCharge*>(&::User::AccumulateCharge::default_instance());
  gameactivity_ = const_cast< ::ProtoActivity::GameAcitivityAllCPP*>(&::ProtoActivity::GameAcitivityAllCPP::default_instance());
  heros_ = const_cast< ::User::HerosInfo*>(&::User::HerosInfo::default_instance());
  grade_ = const_cast< ::User::GradeBattle*>(&::User::GradeBattle::default_instance());
  friends_ = const_cast< ::User::FriendInfo*>(&::User::FriendInfo::default_instance());
  onhook_ = const_cast< ::User::OnhookReward*>(&::User::OnhookReward::default_instance());
  allclub_ = const_cast< ::User::MartialClub*>(&::User::MartialClub::default_instance());
  post_ = const_cast< ::ProtoNotify::PostItemCPPAll*>(&::ProtoNotify::PostItemCPPAll::default_instance());
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ts_ = 0u;
  activity_ = NULL;
  notifies_ = NULL;
  charges_ = NULL;
  gameactivity_ = NULL;
  opents_ = 0u;
  heros_ = NULL;
  grade_ = NULL;
  friends_ = NULL;
  onhook_ = NULL;
  allclub_ = NULL;
  post_ = NULL;
  drawrewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete activity_;
    delete notifies_;
    delete charges_;
    delete gameactivity_;
    delete heros_;
    delete grade_;
    delete friends_;
    delete onhook_;
    delete allclub_;
    delete post_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::User::Base::Clear();
    }
    ts_ = 0u;
    if (has_activity()) {
      if (activity_ != NULL) activity_->::User::Activity::Clear();
    }
    if (has_notifies()) {
      if (notifies_ != NULL) notifies_->::ProtoNotify::NotifyItemCPPAll::Clear();
    }
    if (has_charges()) {
      if (charges_ != NULL) charges_->::User::AccumulateCharge::Clear();
    }
    if (has_gameactivity()) {
      if (gameactivity_ != NULL) gameactivity_->::ProtoActivity::GameAcitivityAllCPP::Clear();
    }
    opents_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_heros()) {
      if (heros_ != NULL) heros_->::User::HerosInfo::Clear();
    }
    if (has_grade()) {
      if (grade_ != NULL) grade_->::User::GradeBattle::Clear();
    }
    if (has_friends()) {
      if (friends_ != NULL) friends_->::User::FriendInfo::Clear();
    }
    if (has_onhook()) {
      if (onhook_ != NULL) onhook_->::User::OnhookReward::Clear();
    }
    if (has_allclub()) {
      if (allclub_ != NULL) allclub_->::User::MartialClub::Clear();
    }
    if (has_post()) {
      if (post_ != NULL) post_->::ProtoNotify::PostItemCPPAll::Clear();
    }
    drawrewardid_ = 0u;
  }
  item_.Clear();
  inviteinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .User.Base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }
      
      // required uint32 ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activity;
        break;
      }
      
      // required .User.Activity activity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notifies;
        break;
      }
      
      // optional .ProtoNotify.NotifyItemCPPAll notifies = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_charges;
        break;
      }
      
      // required .User.AccumulateCharge charges = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gameactivity;
        break;
      }
      
      // required .ProtoActivity.GameAcitivityAllCPP gameactivity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameactivity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameactivity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item;
        break;
      }
      
      // repeated .DataCommon.PropsItemCPP item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item;
        if (input->ExpectTag(64)) goto parse_opents;
        break;
      }
      
      // required uint32 opents = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opents_)));
          set_has_opents();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_heros;
        break;
      }
      
      // required .User.HerosInfo heros = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_grade;
        break;
      }
      
      // required .User.GradeBattle grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_friends;
        break;
      }
      
      // required .User.FriendInfo friends = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_onhook;
        break;
      }
      
      // required .User.OnhookReward onhook = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onhook:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onhook()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_allclub;
        break;
      }
      
      // required .User.MartialClub allclub = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allclub:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allclub()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_post;
        break;
      }
      
      // required .ProtoNotify.PostItemCPPAll post = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_drawRewardId;
        break;
      }
      
      // required uint32 drawRewardId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawRewardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawrewardid_)));
          set_has_drawrewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_inviteInfo;
        break;
      }
      
      // repeated .User.InivteUserInfoCPP inviteInfo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviteInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inviteinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_inviteInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .User.Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }
  
  // required .User.Activity activity = 3;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->activity(), output);
  }
  
  // optional .ProtoNotify.NotifyItemCPPAll notifies = 4;
  if (has_notifies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->notifies(), output);
  }
  
  // required .User.AccumulateCharge charges = 5;
  if (has_charges()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->charges(), output);
  }
  
  // required .ProtoActivity.GameAcitivityAllCPP gameactivity = 6;
  if (has_gameactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gameactivity(), output);
  }
  
  // repeated .DataCommon.PropsItemCPP item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item(i), output);
  }
  
  // required uint32 opents = 8;
  if (has_opents()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->opents(), output);
  }
  
  // required .User.HerosInfo heros = 9;
  if (has_heros()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->heros(), output);
  }
  
  // required .User.GradeBattle grade = 10;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->grade(), output);
  }
  
  // required .User.FriendInfo friends = 11;
  if (has_friends()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->friends(), output);
  }
  
  // required .User.OnhookReward onhook = 12;
  if (has_onhook()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->onhook(), output);
  }
  
  // required .User.MartialClub allclub = 13;
  if (has_allclub()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->allclub(), output);
  }
  
  // required .ProtoNotify.PostItemCPPAll post = 14;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->post(), output);
  }
  
  // required uint32 drawRewardId = 15;
  if (has_drawrewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->drawrewardid(), output);
  }
  
  // repeated .User.InivteUserInfoCPP inviteInfo = 16;
  for (int i = 0; i < this->inviteinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->inviteinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .User.Base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }
  
  // required .User.Activity activity = 3;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->activity(), target);
  }
  
  // optional .ProtoNotify.NotifyItemCPPAll notifies = 4;
  if (has_notifies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->notifies(), target);
  }
  
  // required .User.AccumulateCharge charges = 5;
  if (has_charges()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->charges(), target);
  }
  
  // required .ProtoActivity.GameAcitivityAllCPP gameactivity = 6;
  if (has_gameactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gameactivity(), target);
  }
  
  // repeated .DataCommon.PropsItemCPP item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item(i), target);
  }
  
  // required uint32 opents = 8;
  if (has_opents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->opents(), target);
  }
  
  // required .User.HerosInfo heros = 9;
  if (has_heros()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->heros(), target);
  }
  
  // required .User.GradeBattle grade = 10;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->grade(), target);
  }
  
  // required .User.FriendInfo friends = 11;
  if (has_friends()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->friends(), target);
  }
  
  // required .User.OnhookReward onhook = 12;
  if (has_onhook()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->onhook(), target);
  }
  
  // required .User.MartialClub allclub = 13;
  if (has_allclub()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->allclub(), target);
  }
  
  // required .ProtoNotify.PostItemCPPAll post = 14;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->post(), target);
  }
  
  // required uint32 drawRewardId = 15;
  if (has_drawrewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->drawrewardid(), target);
  }
  
  // repeated .User.InivteUserInfoCPP inviteInfo = 16;
  for (int i = 0; i < this->inviteinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->inviteinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .User.Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }
    
    // required .User.Activity activity = 3;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }
    
    // optional .ProtoNotify.NotifyItemCPPAll notifies = 4;
    if (has_notifies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notifies());
    }
    
    // required .User.AccumulateCharge charges = 5;
    if (has_charges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charges());
    }
    
    // required .ProtoActivity.GameAcitivityAllCPP gameactivity = 6;
    if (has_gameactivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameactivity());
    }
    
    // required uint32 opents = 8;
    if (has_opents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opents());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .User.HerosInfo heros = 9;
    if (has_heros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heros());
    }
    
    // required .User.GradeBattle grade = 10;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grade());
    }
    
    // required .User.FriendInfo friends = 11;
    if (has_friends()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends());
    }
    
    // required .User.OnhookReward onhook = 12;
    if (has_onhook()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onhook());
    }
    
    // required .User.MartialClub allclub = 13;
    if (has_allclub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allclub());
    }
    
    // required .ProtoNotify.PostItemCPPAll post = 14;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->post());
    }
    
    // required uint32 drawRewardId = 15;
    if (has_drawrewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawrewardid());
    }
    
  }
  // repeated .DataCommon.PropsItemCPP item = 7;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  // repeated .User.InivteUserInfoCPP inviteInfo = 16;
  total_size += 2 * this->inviteinfo_size();
  for (int i = 0; i < this->inviteinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inviteinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  inviteinfo_.MergeFrom(from.inviteinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::User::Base::MergeFrom(from.base());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_activity()) {
      mutable_activity()->::User::Activity::MergeFrom(from.activity());
    }
    if (from.has_notifies()) {
      mutable_notifies()->::ProtoNotify::NotifyItemCPPAll::MergeFrom(from.notifies());
    }
    if (from.has_charges()) {
      mutable_charges()->::User::AccumulateCharge::MergeFrom(from.charges());
    }
    if (from.has_gameactivity()) {
      mutable_gameactivity()->::ProtoActivity::GameAcitivityAllCPP::MergeFrom(from.gameactivity());
    }
    if (from.has_opents()) {
      set_opents(from.opents());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_heros()) {
      mutable_heros()->::User::HerosInfo::MergeFrom(from.heros());
    }
    if (from.has_grade()) {
      mutable_grade()->::User::GradeBattle::MergeFrom(from.grade());
    }
    if (from.has_friends()) {
      mutable_friends()->::User::FriendInfo::MergeFrom(from.friends());
    }
    if (from.has_onhook()) {
      mutable_onhook()->::User::OnhookReward::MergeFrom(from.onhook());
    }
    if (from.has_allclub()) {
      mutable_allclub()->::User::MartialClub::MergeFrom(from.allclub());
    }
    if (from.has_post()) {
      mutable_post()->::ProtoNotify::PostItemCPPAll::MergeFrom(from.post());
    }
    if (from.has_drawrewardid()) {
      set_drawrewardid(from.drawrewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fb7) != 0x00007fb7) return false;
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  if (has_notifies()) {
    if (!this->notifies().IsInitialized()) return false;
  }
  if (has_charges()) {
    if (!this->charges().IsInitialized()) return false;
  }
  if (has_gameactivity()) {
    if (!this->gameactivity().IsInitialized()) return false;
  }
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  if (has_heros()) {
    if (!this->heros().IsInitialized()) return false;
  }
  if (has_grade()) {
    if (!this->grade().IsInitialized()) return false;
  }
  if (has_friends()) {
    if (!this->friends().IsInitialized()) return false;
  }
  if (has_onhook()) {
    if (!this->onhook().IsInitialized()) return false;
  }
  if (has_allclub()) {
    if (!this->allclub().IsInitialized()) return false;
  }
  if (has_post()) {
    if (!this->post().IsInitialized()) return false;
  }
  for (int i = 0; i < inviteinfo_size(); i++) {
    if (!this->inviteinfo(i).IsInitialized()) return false;
  }
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ts_, other->ts_);
    std::swap(activity_, other->activity_);
    std::swap(notifies_, other->notifies_);
    std::swap(charges_, other->charges_);
    std::swap(gameactivity_, other->gameactivity_);
    item_.Swap(&other->item_);
    std::swap(opents_, other->opents_);
    std::swap(heros_, other->heros_);
    std::swap(grade_, other->grade_);
    std::swap(friends_, other->friends_);
    std::swap(onhook_, other->onhook_);
    std::swap(allclub_, other->allclub_);
    std::swap(post_, other->post_);
    std::swap(drawrewardid_, other->drawrewardid_);
    inviteinfo_.Swap(&other->inviteinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestOtherUser::kUidFieldNumber;
#endif  // !_MSC_VER

RequestOtherUser::RequestOtherUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestOtherUser::InitAsDefaultInstance() {
}

RequestOtherUser::RequestOtherUser(const RequestOtherUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestOtherUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOtherUser::~RequestOtherUser() {
  SharedDtor();
}

void RequestOtherUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestOtherUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOtherUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestOtherUser_descriptor_;
}

const RequestOtherUser& RequestOtherUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

RequestOtherUser* RequestOtherUser::default_instance_ = NULL;

RequestOtherUser* RequestOtherUser::New() const {
  return new RequestOtherUser;
}

void RequestOtherUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestOtherUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestOtherUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestOtherUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestOtherUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOtherUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestOtherUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestOtherUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestOtherUser::MergeFrom(const RequestOtherUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestOtherUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOtherUser::CopyFrom(const RequestOtherUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOtherUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestOtherUser::Swap(RequestOtherUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestOtherUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestOtherUser_descriptor_;
  metadata.reflection = RequestOtherUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherUser::kBaseFieldNumber;
#endif  // !_MSC_VER

OtherUser::OtherUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherUser::InitAsDefaultInstance() {
  base_ = const_cast< ::User::Base*>(&::User::Base::default_instance());
}

OtherUser::OtherUser(const OtherUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherUser::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherUser::~OtherUser() {
  SharedDtor();
}

void OtherUser::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void OtherUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherUser_descriptor_;
}

const OtherUser& OtherUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

OtherUser* OtherUser::default_instance_ = NULL;

OtherUser* OtherUser::New() const {
  return new OtherUser;
}

void OtherUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::User::Base::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .User.Base base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .User.Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .User.Base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .User.Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherUser::MergeFrom(const OtherUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::User::Base::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherUser::CopyFrom(const OtherUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void OtherUser::Swap(OtherUser* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherUser_descriptor_;
  metadata.reflection = OtherUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tutorialstage::kTutorialStageFieldNumber;
#endif  // !_MSC_VER

Tutorialstage::Tutorialstage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tutorialstage::InitAsDefaultInstance() {
}

Tutorialstage::Tutorialstage(const Tutorialstage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tutorialstage::SharedCtor() {
  _cached_size_ = 0;
  tutorialstage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tutorialstage::~Tutorialstage() {
  SharedDtor();
}

void Tutorialstage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tutorialstage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tutorialstage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tutorialstage_descriptor_;
}

const Tutorialstage& Tutorialstage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

Tutorialstage* Tutorialstage::default_instance_ = NULL;

Tutorialstage* Tutorialstage::New() const {
  return new Tutorialstage;
}

void Tutorialstage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tutorialstage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tutorialstage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tutorialStage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorialstage_)));
          set_has_tutorialstage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tutorialstage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tutorialStage = 1;
  if (has_tutorialstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tutorialstage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tutorialstage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tutorialStage = 1;
  if (has_tutorialstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tutorialstage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tutorialstage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tutorialStage = 1;
    if (has_tutorialstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorialstage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tutorialstage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tutorialstage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tutorialstage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tutorialstage::MergeFrom(const Tutorialstage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tutorialstage()) {
      set_tutorialstage(from.tutorialstage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tutorialstage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tutorialstage::CopyFrom(const Tutorialstage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tutorialstage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Tutorialstage::Swap(Tutorialstage* other) {
  if (other != this) {
    std::swap(tutorialstage_, other->tutorialstage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tutorialstage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tutorialstage_descriptor_;
  metadata.reflection = Tutorialstage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTime::kTsFieldNumber;
#endif  // !_MSC_VER

ServerTime::ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerTime::InitAsDefaultInstance() {
}

ServerTime::ServerTime(const ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerTime::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTime::~ServerTime() {
  SharedDtor();
}

void ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTime_descriptor_;
}

const ServerTime& ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

ServerTime* ServerTime::default_instance_ = NULL;

ServerTime* ServerTime::New() const {
  return new ServerTime;
}

void ServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTime::MergeFrom(const ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTime::CopyFrom(const ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServerTime::Swap(ServerTime* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTime_descriptor_;
  metadata.reflection = ServerTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostCashReq::kCashFieldNumber;
const int CostCashReq::kOpCodeFieldNumber;
const int CostCashReq::kOperationFieldNumber;
#endif  // !_MSC_VER

CostCashReq::CostCashReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CostCashReq::InitAsDefaultInstance() {
}

CostCashReq::CostCashReq(const CostCashReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CostCashReq::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  opcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostCashReq::~CostCashReq() {
  SharedDtor();
}

void CostCashReq::SharedDtor() {
  if (opcode_ != &::google::protobuf::internal::kEmptyString) {
    delete opcode_;
  }
  if (this != default_instance_) {
  }
}

void CostCashReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostCashReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostCashReq_descriptor_;
}

const CostCashReq& CostCashReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

CostCashReq* CostCashReq::default_instance_ = NULL;

CostCashReq* CostCashReq::New() const {
  return new CostCashReq;
}

void CostCashReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cash_ = 0u;
    if (has_opcode()) {
      if (opcode_ != &::google::protobuf::internal::kEmptyString) {
        opcode_->clear();
      }
    }
    operation_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostCashReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opCode;
        break;
      }
      
      // required string opCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opcode().data(), this->opcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operation;
        break;
      }
      
      // required uint32 operation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CostCashReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }
  
  // required string opCode = 2;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->opcode(), output);
  }
  
  // required uint32 operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CostCashReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }
  
  // required string opCode = 2;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opcode(), target);
  }
  
  // required uint32 operation = 3;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CostCashReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // required string opCode = 2;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opcode());
    }
    
    // required uint32 operation = 3;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostCashReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostCashReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostCashReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostCashReq::MergeFrom(const CostCashReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostCashReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostCashReq::CopyFrom(const CostCashReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostCashReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CostCashReq::Swap(CostCashReq* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(opcode_, other->opcode_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostCashReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostCashReq_descriptor_;
  metadata.reflection = CostCashReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostCashResp::kCashFieldNumber;
const int CostCashResp::kOperationFieldNumber;
#endif  // !_MSC_VER

CostCashResp::CostCashResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CostCashResp::InitAsDefaultInstance() {
}

CostCashResp::CostCashResp(const CostCashResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CostCashResp::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostCashResp::~CostCashResp() {
  SharedDtor();
}

void CostCashResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CostCashResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostCashResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostCashResp_descriptor_;
}

const CostCashResp& CostCashResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

CostCashResp* CostCashResp::default_instance_ = NULL;

CostCashResp* CostCashResp::New() const {
  return new CostCashResp;
}

void CostCashResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cash_ = 0u;
    operation_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostCashResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }
      
      // required uint32 operation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CostCashResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }
  
  // required uint32 operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CostCashResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }
  
  // required uint32 operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CostCashResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // required uint32 operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostCashResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostCashResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostCashResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostCashResp::MergeFrom(const CostCashResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostCashResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostCashResp::CopyFrom(const CostCashResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostCashResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CostCashResp::Swap(CostCashResp* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostCashResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostCashResp_descriptor_;
  metadata.reflection = CostCashResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeItem::kCashFieldNumber;
const int ChargeItem::kTsFieldNumber;
#endif  // !_MSC_VER

ChargeItem::ChargeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeItem::InitAsDefaultInstance() {
}

ChargeItem::ChargeItem(const ChargeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeItem::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeItem::~ChargeItem() {
  SharedDtor();
}

void ChargeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeItem_descriptor_;
}

const ChargeItem& ChargeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

ChargeItem* ChargeItem::default_instance_ = NULL;

ChargeItem* ChargeItem::New() const {
  return new ChargeItem;
}

void ChargeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cash_ = 0u;
    ts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }
      
      // required uint32 ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }
  
  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }
  
  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }
    
    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeItem::MergeFrom(const ChargeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeItem::CopyFrom(const ChargeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ChargeItem::Swap(ChargeItem* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeItem_descriptor_;
  metadata.reflection = ChargeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccumulateCharge::kAccumulateChargeFieldNumber;
#endif  // !_MSC_VER

AccumulateCharge::AccumulateCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccumulateCharge::InitAsDefaultInstance() {
}

AccumulateCharge::AccumulateCharge(const AccumulateCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccumulateCharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccumulateCharge::~AccumulateCharge() {
  SharedDtor();
}

void AccumulateCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccumulateCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccumulateCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccumulateCharge_descriptor_;
}

const AccumulateCharge& AccumulateCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

AccumulateCharge* AccumulateCharge::default_instance_ = NULL;

AccumulateCharge* AccumulateCharge::New() const {
  return new AccumulateCharge;
}

void AccumulateCharge::Clear() {
  accumulatecharge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccumulateCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User.ChargeItem accumulateCharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accumulateCharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accumulatecharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_accumulateCharge;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccumulateCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .User.ChargeItem accumulateCharge = 1;
  for (int i = 0; i < this->accumulatecharge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accumulatecharge(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccumulateCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .User.ChargeItem accumulateCharge = 1;
  for (int i = 0; i < this->accumulatecharge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accumulatecharge(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccumulateCharge::ByteSize() const {
  int total_size = 0;
  
  // repeated .User.ChargeItem accumulateCharge = 1;
  total_size += 1 * this->accumulatecharge_size();
  for (int i = 0; i < this->accumulatecharge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accumulatecharge(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccumulateCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccumulateCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccumulateCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccumulateCharge::MergeFrom(const AccumulateCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  accumulatecharge_.MergeFrom(from.accumulatecharge_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccumulateCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccumulateCharge::CopyFrom(const AccumulateCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccumulateCharge::IsInitialized() const {
  
  for (int i = 0; i < accumulatecharge_size(); i++) {
    if (!this->accumulatecharge(i).IsInitialized()) return false;
  }
  return true;
}

void AccumulateCharge::Swap(AccumulateCharge* other) {
  if (other != this) {
    accumulatecharge_.Swap(&other->accumulatecharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccumulateCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccumulateCharge_descriptor_;
  metadata.reflection = AccumulateCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushAccumulateChangeReq::kChangeAccchargeFieldNumber;
#endif  // !_MSC_VER

PushAccumulateChangeReq::PushAccumulateChangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PushAccumulateChangeReq::InitAsDefaultInstance() {
  changeacccharge_ = const_cast< ::User::AccumulateCharge*>(&::User::AccumulateCharge::default_instance());
}

PushAccumulateChangeReq::PushAccumulateChangeReq(const PushAccumulateChangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PushAccumulateChangeReq::SharedCtor() {
  _cached_size_ = 0;
  changeacccharge_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushAccumulateChangeReq::~PushAccumulateChangeReq() {
  SharedDtor();
}

void PushAccumulateChangeReq::SharedDtor() {
  if (this != default_instance_) {
    delete changeacccharge_;
  }
}

void PushAccumulateChangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushAccumulateChangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushAccumulateChangeReq_descriptor_;
}

const PushAccumulateChangeReq& PushAccumulateChangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

PushAccumulateChangeReq* PushAccumulateChangeReq::default_instance_ = NULL;

PushAccumulateChangeReq* PushAccumulateChangeReq::New() const {
  return new PushAccumulateChangeReq;
}

void PushAccumulateChangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_changeacccharge()) {
      if (changeacccharge_ != NULL) changeacccharge_->::User::AccumulateCharge::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushAccumulateChangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .User.AccumulateCharge changeAcccharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeacccharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PushAccumulateChangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .User.AccumulateCharge changeAcccharge = 1;
  if (has_changeacccharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changeacccharge(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PushAccumulateChangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .User.AccumulateCharge changeAcccharge = 1;
  if (has_changeacccharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->changeacccharge(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PushAccumulateChangeReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .User.AccumulateCharge changeAcccharge = 1;
    if (has_changeacccharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeacccharge());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushAccumulateChangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushAccumulateChangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushAccumulateChangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushAccumulateChangeReq::MergeFrom(const PushAccumulateChangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changeacccharge()) {
      mutable_changeacccharge()->::User::AccumulateCharge::MergeFrom(from.changeacccharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushAccumulateChangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushAccumulateChangeReq::CopyFrom(const PushAccumulateChangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAccumulateChangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_changeacccharge()) {
    if (!this->changeacccharge().IsInitialized()) return false;
  }
  return true;
}

void PushAccumulateChangeReq::Swap(PushAccumulateChangeReq* other) {
  if (other != this) {
    std::swap(changeacccharge_, other->changeacccharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushAccumulateChangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushAccumulateChangeReq_descriptor_;
  metadata.reflection = PushAccumulateChangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyMaterialInfo::kPropsidFieldNumber;
const int BuyMaterialInfo::kPropscntFieldNumber;
#endif  // !_MSC_VER

BuyMaterialInfo::BuyMaterialInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyMaterialInfo::InitAsDefaultInstance() {
}

BuyMaterialInfo::BuyMaterialInfo(const BuyMaterialInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyMaterialInfo::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  propscnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyMaterialInfo::~BuyMaterialInfo() {
  SharedDtor();
}

void BuyMaterialInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyMaterialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyMaterialInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyMaterialInfo_descriptor_;
}

const BuyMaterialInfo& BuyMaterialInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

BuyMaterialInfo* BuyMaterialInfo::default_instance_ = NULL;

BuyMaterialInfo* BuyMaterialInfo::New() const {
  return new BuyMaterialInfo;
}

void BuyMaterialInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propsid_ = 0u;
    propscnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyMaterialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propscnt;
        break;
      }
      
      // required uint32 propscnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propscnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propscnt_)));
          set_has_propscnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyMaterialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 propsid = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }
  
  // required uint32 propscnt = 2;
  if (has_propscnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->propscnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyMaterialInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 propsid = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }
  
  // required uint32 propscnt = 2;
  if (has_propscnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->propscnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyMaterialInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsid = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }
    
    // required uint32 propscnt = 2;
    if (has_propscnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propscnt());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyMaterialInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyMaterialInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyMaterialInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyMaterialInfo::MergeFrom(const BuyMaterialInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_propscnt()) {
      set_propscnt(from.propscnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyMaterialInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyMaterialInfo::CopyFrom(const BuyMaterialInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyMaterialInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BuyMaterialInfo::Swap(BuyMaterialInfo* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(propscnt_, other->propscnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyMaterialInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyMaterialInfo_descriptor_;
  metadata.reflection = BuyMaterialInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyMaterialReq::kBuyinfoFieldNumber;
#endif  // !_MSC_VER

BuyMaterialReq::BuyMaterialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyMaterialReq::InitAsDefaultInstance() {
}

BuyMaterialReq::BuyMaterialReq(const BuyMaterialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyMaterialReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyMaterialReq::~BuyMaterialReq() {
  SharedDtor();
}

void BuyMaterialReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyMaterialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyMaterialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyMaterialReq_descriptor_;
}

const BuyMaterialReq& BuyMaterialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

BuyMaterialReq* BuyMaterialReq::default_instance_ = NULL;

BuyMaterialReq* BuyMaterialReq::New() const {
  return new BuyMaterialReq;
}

void BuyMaterialReq::Clear() {
  buyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyMaterialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User.BuyMaterialInfo buyinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buyinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyMaterialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .User.BuyMaterialInfo buyinfo = 1;
  for (int i = 0; i < this->buyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buyinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyMaterialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .User.BuyMaterialInfo buyinfo = 1;
  for (int i = 0; i < this->buyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buyinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyMaterialReq::ByteSize() const {
  int total_size = 0;
  
  // repeated .User.BuyMaterialInfo buyinfo = 1;
  total_size += 1 * this->buyinfo_size();
  for (int i = 0; i < this->buyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buyinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyMaterialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyMaterialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyMaterialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyMaterialReq::MergeFrom(const BuyMaterialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  buyinfo_.MergeFrom(from.buyinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyMaterialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyMaterialReq::CopyFrom(const BuyMaterialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyMaterialReq::IsInitialized() const {
  
  for (int i = 0; i < buyinfo_size(); i++) {
    if (!this->buyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void BuyMaterialReq::Swap(BuyMaterialReq* other) {
  if (other != this) {
    buyinfo_.Swap(&other->buyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyMaterialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyMaterialReq_descriptor_;
  metadata.reflection = BuyMaterialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyMaterialResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

BuyMaterialResp::BuyMaterialResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyMaterialResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

BuyMaterialResp::BuyMaterialResp(const BuyMaterialResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyMaterialResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyMaterialResp::~BuyMaterialResp() {
  SharedDtor();
}

void BuyMaterialResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void BuyMaterialResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyMaterialResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyMaterialResp_descriptor_;
}

const BuyMaterialResp& BuyMaterialResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

BuyMaterialResp* BuyMaterialResp::default_instance_ = NULL;

BuyMaterialResp* BuyMaterialResp::New() const {
  return new BuyMaterialResp;
}

void BuyMaterialResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyMaterialResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyMaterialResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyMaterialResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyMaterialResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyMaterialResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyMaterialResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyMaterialResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyMaterialResp::MergeFrom(const BuyMaterialResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyMaterialResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyMaterialResp::CopyFrom(const BuyMaterialResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyMaterialResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void BuyMaterialResp::Swap(BuyMaterialResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyMaterialResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyMaterialResp_descriptor_;
  metadata.reflection = BuyMaterialResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestOtherUserBC::kOthuidFieldNumber;
const int RequestOtherUserBC::kMyuidFieldNumber;
#endif  // !_MSC_VER

RequestOtherUserBC::RequestOtherUserBC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestOtherUserBC::InitAsDefaultInstance() {
}

RequestOtherUserBC::RequestOtherUserBC(const RequestOtherUserBC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestOtherUserBC::SharedCtor() {
  _cached_size_ = 0;
  othuid_ = 0u;
  myuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOtherUserBC::~RequestOtherUserBC() {
  SharedDtor();
}

void RequestOtherUserBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestOtherUserBC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOtherUserBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestOtherUserBC_descriptor_;
}

const RequestOtherUserBC& RequestOtherUserBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

RequestOtherUserBC* RequestOtherUserBC::default_instance_ = NULL;

RequestOtherUserBC* RequestOtherUserBC::New() const {
  return new RequestOtherUserBC;
}

void RequestOtherUserBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    othuid_ = 0u;
    myuid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestOtherUserBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 othuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myuid;
        break;
      }
      
      // required uint32 myuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestOtherUserBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 othuid = 1;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->othuid(), output);
  }
  
  // required uint32 myuid = 2;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestOtherUserBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 othuid = 1;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->othuid(), target);
  }
  
  // required uint32 myuid = 2;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestOtherUserBC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 othuid = 1;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }
    
    // required uint32 myuid = 2;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOtherUserBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestOtherUserBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestOtherUserBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestOtherUserBC::MergeFrom(const RequestOtherUserBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestOtherUserBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOtherUserBC::CopyFrom(const RequestOtherUserBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOtherUserBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestOtherUserBC::Swap(RequestOtherUserBC* other) {
  if (other != this) {
    std::swap(othuid_, other->othuid_);
    std::swap(myuid_, other->myuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestOtherUserBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestOtherUserBC_descriptor_;
  metadata.reflection = RequestOtherUserBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpReq::kTypeFieldNumber;
const int SpeedUpReq::kUdFieldNumber;
#endif  // !_MSC_VER

SpeedUpReq::SpeedUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeedUpReq::InitAsDefaultInstance() {
}

SpeedUpReq::SpeedUpReq(const SpeedUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpReq::~SpeedUpReq() {
  SharedDtor();
}

void SpeedUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedUpReq_descriptor_;
}

const SpeedUpReq& SpeedUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

SpeedUpReq* SpeedUpReq::default_instance_ = NULL;

SpeedUpReq* SpeedUpReq::New() const {
  return new SpeedUpReq;
}

void SpeedUpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    ud_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ud;
        break;
      }
      
      // optional uint32 ud = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 ud = 2;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ud(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeedUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 ud = 2;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ud(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeedUpReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 ud = 2;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedUpReq::MergeFrom(const SpeedUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedUpReq::CopyFrom(const SpeedUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SpeedUpReq::Swap(SpeedUpReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedUpReq_descriptor_;
  metadata.reflection = SpeedUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

SpeedUpResp::SpeedUpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpeedUpResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

SpeedUpResp::SpeedUpResp(const SpeedUpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpeedUpResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpResp::~SpeedUpResp() {
  SharedDtor();
}

void SpeedUpResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void SpeedUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedUpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedUpResp_descriptor_;
}

const SpeedUpResp& SpeedUpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

SpeedUpResp* SpeedUpResp::default_instance_ = NULL;

SpeedUpResp* SpeedUpResp::New() const {
  return new SpeedUpResp;
}

void SpeedUpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpeedUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpeedUpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpeedUpResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedUpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedUpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedUpResp::MergeFrom(const SpeedUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedUpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedUpResp::CopyFrom(const SpeedUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpResp::IsInitialized() const {
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void SpeedUpResp::Swap(SpeedUpResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedUpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedUpResp_descriptor_;
  metadata.reflection = SpeedUpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HerosInfo::kHeroFieldNumber;
#endif  // !_MSC_VER

HerosInfo::HerosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HerosInfo::InitAsDefaultInstance() {
}

HerosInfo::HerosInfo(const HerosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HerosInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HerosInfo::~HerosInfo() {
  SharedDtor();
}

void HerosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HerosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HerosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HerosInfo_descriptor_;
}

const HerosInfo& HerosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

HerosInfo* HerosInfo::default_instance_ = NULL;

HerosInfo* HerosInfo::New() const {
  return new HerosInfo;
}

void HerosInfo::Clear() {
  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HerosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HerosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HerosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HerosInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 1;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HerosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HerosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HerosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HerosInfo::MergeFrom(const HerosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HerosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HerosInfo::CopyFrom(const HerosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HerosInfo::IsInitialized() const {
  
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  return true;
}

void HerosInfo::Swap(HerosInfo* other) {
  if (other != this) {
    hero_.Swap(&other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HerosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HerosInfo_descriptor_;
  metadata.reflection = HerosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

FriendInfo::FriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfo::InitAsDefaultInstance() {
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfo::~FriendInfo() {
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New() const {
  return new FriendInfo;
}

void FriendInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoFriend.RecommendInfo info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoFriend.RecommendInfo info = 11;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoFriend.RecommendInfo info = 11;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoFriend.RecommendInfo info = 11;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnhookReward::kCommonsFieldNumber;
#endif  // !_MSC_VER

OnhookReward::OnhookReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnhookReward::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

OnhookReward::OnhookReward(const OnhookReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnhookReward::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnhookReward::~OnhookReward() {
  SharedDtor();
}

void OnhookReward::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void OnhookReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnhookReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnhookReward_descriptor_;
}

const OnhookReward& OnhookReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

OnhookReward* OnhookReward::default_instance_ = NULL;

OnhookReward* OnhookReward::New() const {
  return new OnhookReward;
}

void OnhookReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnhookReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnhookReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnhookReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnhookReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnhookReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnhookReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnhookReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnhookReward::MergeFrom(const OnhookReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnhookReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnhookReward::CopyFrom(const OnhookReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnhookReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void OnhookReward::Swap(OnhookReward* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnhookReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnhookReward_descriptor_;
  metadata.reflection = OnhookReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MartialClub::kClubFieldNumber;
#endif  // !_MSC_VER

MartialClub::MartialClub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MartialClub::InitAsDefaultInstance() {
}

MartialClub::MartialClub(const MartialClub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MartialClub::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MartialClub::~MartialClub() {
  SharedDtor();
}

void MartialClub::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MartialClub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MartialClub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MartialClub_descriptor_;
}

const MartialClub& MartialClub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

MartialClub* MartialClub::default_instance_ = NULL;

MartialClub* MartialClub::New() const {
  return new MartialClub;
}

void MartialClub::Clear() {
  club_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MartialClub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoMartialClub.SingleMartialClub club = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_club:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_club()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_club;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MartialClub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoMartialClub.SingleMartialClub club = 1;
  for (int i = 0; i < this->club_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->club(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MartialClub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoMartialClub.SingleMartialClub club = 1;
  for (int i = 0; i < this->club_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->club(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MartialClub::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoMartialClub.SingleMartialClub club = 1;
  total_size += 1 * this->club_size();
  for (int i = 0; i < this->club_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->club(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MartialClub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MartialClub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MartialClub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MartialClub::MergeFrom(const MartialClub& from) {
  GOOGLE_CHECK_NE(&from, this);
  club_.MergeFrom(from.club_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MartialClub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MartialClub::CopyFrom(const MartialClub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MartialClub::IsInitialized() const {
  
  for (int i = 0; i < club_size(); i++) {
    if (!this->club(i).IsInitialized()) return false;
  }
  return true;
}

void MartialClub::Swap(MartialClub* other) {
  if (other != this) {
    club_.Swap(&other->club_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MartialClub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MartialClub_descriptor_;
  metadata.reflection = MartialClub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MartialHero::kHeroInfoFieldNumber;
#endif  // !_MSC_VER

MartialHero::MartialHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MartialHero::InitAsDefaultInstance() {
}

MartialHero::MartialHero(const MartialHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MartialHero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MartialHero::~MartialHero() {
  SharedDtor();
}

void MartialHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MartialHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MartialHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MartialHero_descriptor_;
}

const MartialHero& MartialHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

MartialHero* MartialHero::default_instance_ = NULL;

MartialHero* MartialHero::New() const {
  return new MartialHero;
}

void MartialHero::Clear() {
  heroinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MartialHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoMartialClub.MartialHeroInfo heroInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heroInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MartialHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoMartialClub.MartialHeroInfo heroInfo = 1;
  for (int i = 0; i < this->heroinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heroinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MartialHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoMartialClub.MartialHeroInfo heroInfo = 1;
  for (int i = 0; i < this->heroinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MartialHero::ByteSize() const {
  int total_size = 0;
  
  // repeated .ProtoMartialClub.MartialHeroInfo heroInfo = 1;
  total_size += 1 * this->heroinfo_size();
  for (int i = 0; i < this->heroinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MartialHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MartialHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MartialHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MartialHero::MergeFrom(const MartialHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroinfo_.MergeFrom(from.heroinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MartialHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MartialHero::CopyFrom(const MartialHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MartialHero::IsInitialized() const {
  
  for (int i = 0; i < heroinfo_size(); i++) {
    if (!this->heroinfo(i).IsInitialized()) return false;
  }
  return true;
}

void MartialHero::Swap(MartialHero* other) {
  if (other != this) {
    heroinfo_.Swap(&other->heroinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MartialHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MartialHero_descriptor_;
  metadata.reflection = MartialHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyPowerReq::kPropidFieldNumber;
const int BuyPowerReq::kTsFieldNumber;
#endif  // !_MSC_VER

BuyPowerReq::BuyPowerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyPowerReq::InitAsDefaultInstance() {
}

BuyPowerReq::BuyPowerReq(const BuyPowerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyPowerReq::SharedCtor() {
  _cached_size_ = 0;
  propid_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyPowerReq::~BuyPowerReq() {
  SharedDtor();
}

void BuyPowerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyPowerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyPowerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyPowerReq_descriptor_;
}

const BuyPowerReq& BuyPowerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

BuyPowerReq* BuyPowerReq::default_instance_ = NULL;

BuyPowerReq* BuyPowerReq::New() const {
  return new BuyPowerReq;
}

void BuyPowerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propid_ = 0u;
    ts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyPowerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }
      
      // required uint32 ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyPowerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 propid = 1;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propid(), output);
  }
  
  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyPowerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 propid = 1;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propid(), target);
  }
  
  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyPowerReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propid = 1;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propid());
    }
    
    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyPowerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyPowerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyPowerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyPowerReq::MergeFrom(const BuyPowerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyPowerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyPowerReq::CopyFrom(const BuyPowerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyPowerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BuyPowerReq::Swap(BuyPowerReq* other) {
  if (other != this) {
    std::swap(propid_, other->propid_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyPowerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyPowerReq_descriptor_;
  metadata.reflection = BuyPowerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyPowerResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

BuyPowerResp::BuyPowerResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyPowerResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

BuyPowerResp::BuyPowerResp(const BuyPowerResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyPowerResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyPowerResp::~BuyPowerResp() {
  SharedDtor();
}

void BuyPowerResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void BuyPowerResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyPowerResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyPowerResp_descriptor_;
}

const BuyPowerResp& BuyPowerResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

BuyPowerResp* BuyPowerResp::default_instance_ = NULL;

BuyPowerResp* BuyPowerResp::New() const {
  return new BuyPowerResp;
}

void BuyPowerResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyPowerResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyPowerResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyPowerResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyPowerResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyPowerResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyPowerResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyPowerResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyPowerResp::MergeFrom(const BuyPowerResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyPowerResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyPowerResp::CopyFrom(const BuyPowerResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyPowerResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void BuyPowerResp::Swap(BuyPowerResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyPowerResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyPowerResp_descriptor_;
  metadata.reflection = BuyPowerResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnhookOnlinePropReward::kCommonsFieldNumber;
#endif  // !_MSC_VER

OnhookOnlinePropReward::OnhookOnlinePropReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnhookOnlinePropReward::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

OnhookOnlinePropReward::OnhookOnlinePropReward(const OnhookOnlinePropReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnhookOnlinePropReward::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnhookOnlinePropReward::~OnhookOnlinePropReward() {
  SharedDtor();
}

void OnhookOnlinePropReward::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void OnhookOnlinePropReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnhookOnlinePropReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnhookOnlinePropReward_descriptor_;
}

const OnhookOnlinePropReward& OnhookOnlinePropReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

OnhookOnlinePropReward* OnhookOnlinePropReward::default_instance_ = NULL;

OnhookOnlinePropReward* OnhookOnlinePropReward::New() const {
  return new OnhookOnlinePropReward;
}

void OnhookOnlinePropReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnhookOnlinePropReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnhookOnlinePropReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnhookOnlinePropReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnhookOnlinePropReward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnhookOnlinePropReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnhookOnlinePropReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnhookOnlinePropReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnhookOnlinePropReward::MergeFrom(const OnhookOnlinePropReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnhookOnlinePropReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnhookOnlinePropReward::CopyFrom(const OnhookOnlinePropReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnhookOnlinePropReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void OnhookOnlinePropReward::Swap(OnhookOnlinePropReward* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnhookOnlinePropReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnhookOnlinePropReward_descriptor_;
  metadata.reflection = OnhookOnlinePropReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InivteUserInfoCPP::kUidFieldNumber;
const int InivteUserInfoCPP::kNameFieldNumber;
const int InivteUserInfoCPP::kFigFieldNumber;
#endif  // !_MSC_VER

InivteUserInfoCPP::InivteUserInfoCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InivteUserInfoCPP::InitAsDefaultInstance() {
}

InivteUserInfoCPP::InivteUserInfoCPP(const InivteUserInfoCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InivteUserInfoCPP::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InivteUserInfoCPP::~InivteUserInfoCPP() {
  SharedDtor();
}

void InivteUserInfoCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void InivteUserInfoCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InivteUserInfoCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InivteUserInfoCPP_descriptor_;
}

const InivteUserInfoCPP& InivteUserInfoCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

InivteUserInfoCPP* InivteUserInfoCPP::default_instance_ = NULL;

InivteUserInfoCPP* InivteUserInfoCPP::New() const {
  return new InivteUserInfoCPP;
}

void InivteUserInfoCPP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::kEmptyString) {
        fig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InivteUserInfoCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fig;
        break;
      }
      
      // required bytes fig = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InivteUserInfoCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // required bytes fig = 3;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->fig(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InivteUserInfoCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }
  
  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // required bytes fig = 3;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->fig(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InivteUserInfoCPP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // required bytes fig = 3;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InivteUserInfoCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InivteUserInfoCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InivteUserInfoCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InivteUserInfoCPP::MergeFrom(const InivteUserInfoCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InivteUserInfoCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InivteUserInfoCPP::CopyFrom(const InivteUserInfoCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InivteUserInfoCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void InivteUserInfoCPP::Swap(InivteUserInfoCPP* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InivteUserInfoCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InivteUserInfoCPP_descriptor_;
  metadata.reflection = InivteUserInfoCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteActivityUrlReq::kUuidFieldNumber;
#endif  // !_MSC_VER

InviteActivityUrlReq::InviteActivityUrlReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteActivityUrlReq::InitAsDefaultInstance() {
}

InviteActivityUrlReq::InviteActivityUrlReq(const InviteActivityUrlReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteActivityUrlReq::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteActivityUrlReq::~InviteActivityUrlReq() {
  SharedDtor();
}

void InviteActivityUrlReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteActivityUrlReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteActivityUrlReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteActivityUrlReq_descriptor_;
}

const InviteActivityUrlReq& InviteActivityUrlReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

InviteActivityUrlReq* InviteActivityUrlReq::default_instance_ = NULL;

InviteActivityUrlReq* InviteActivityUrlReq::New() const {
  return new InviteActivityUrlReq;
}

void InviteActivityUrlReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteActivityUrlReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteActivityUrlReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteActivityUrlReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteActivityUrlReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteActivityUrlReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteActivityUrlReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteActivityUrlReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteActivityUrlReq::MergeFrom(const InviteActivityUrlReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteActivityUrlReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteActivityUrlReq::CopyFrom(const InviteActivityUrlReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteActivityUrlReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InviteActivityUrlReq::Swap(InviteActivityUrlReq* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteActivityUrlReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteActivityUrlReq_descriptor_;
  metadata.reflection = InviteActivityUrlReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSInviteActivityUrlReq::kUuidFieldNumber;
const int CSInviteActivityUrlReq::kUidFieldNumber;
#endif  // !_MSC_VER

CSInviteActivityUrlReq::CSInviteActivityUrlReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSInviteActivityUrlReq::InitAsDefaultInstance() {
}

CSInviteActivityUrlReq::CSInviteActivityUrlReq(const CSInviteActivityUrlReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSInviteActivityUrlReq::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = 0u;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInviteActivityUrlReq::~CSInviteActivityUrlReq() {
  SharedDtor();
}

void CSInviteActivityUrlReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSInviteActivityUrlReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSInviteActivityUrlReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSInviteActivityUrlReq_descriptor_;
}

const CSInviteActivityUrlReq& CSInviteActivityUrlReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

CSInviteActivityUrlReq* CSInviteActivityUrlReq::default_instance_ = NULL;

CSInviteActivityUrlReq* CSInviteActivityUrlReq::New() const {
  return new CSInviteActivityUrlReq;
}

void CSInviteActivityUrlReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = 0u;
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSInviteActivityUrlReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }
      
      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInviteActivityUrlReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uuid(), output);
  }
  
  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSInviteActivityUrlReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uuid(), target);
  }
  
  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSInviteActivityUrlReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuid());
    }
    
    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInviteActivityUrlReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSInviteActivityUrlReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSInviteActivityUrlReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSInviteActivityUrlReq::MergeFrom(const CSInviteActivityUrlReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSInviteActivityUrlReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSInviteActivityUrlReq::CopyFrom(const CSInviteActivityUrlReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInviteActivityUrlReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSInviteActivityUrlReq::Swap(CSInviteActivityUrlReq* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSInviteActivityUrlReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSInviteActivityUrlReq_descriptor_;
  metadata.reflection = CSInviteActivityUrlReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInviteRewardReq::kSeqFieldNumber;
#endif  // !_MSC_VER

GetInviteRewardReq::GetInviteRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInviteRewardReq::InitAsDefaultInstance() {
}

GetInviteRewardReq::GetInviteRewardReq(const GetInviteRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInviteRewardReq::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInviteRewardReq::~GetInviteRewardReq() {
  SharedDtor();
}

void GetInviteRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInviteRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInviteRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInviteRewardReq_descriptor_;
}

const GetInviteRewardReq& GetInviteRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

GetInviteRewardReq* GetInviteRewardReq::default_instance_ = NULL;

GetInviteRewardReq* GetInviteRewardReq::New() const {
  return new GetInviteRewardReq;
}

void GetInviteRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInviteRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInviteRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInviteRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInviteRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInviteRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInviteRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInviteRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInviteRewardReq::MergeFrom(const GetInviteRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInviteRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInviteRewardReq::CopyFrom(const GetInviteRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInviteRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetInviteRewardReq::Swap(GetInviteRewardReq* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInviteRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInviteRewardReq_descriptor_;
  metadata.reflection = GetInviteRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInviteRewardResp::kMarkFieldNumber;
const int GetInviteRewardResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

GetInviteRewardResp::GetInviteRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInviteRewardResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

GetInviteRewardResp::GetInviteRewardResp(const GetInviteRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInviteRewardResp::SharedCtor() {
  _cached_size_ = 0;
  mark_ = GOOGLE_ULONGLONG(0);
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInviteRewardResp::~GetInviteRewardResp() {
  SharedDtor();
}

void GetInviteRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void GetInviteRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInviteRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInviteRewardResp_descriptor_;
}

const GetInviteRewardResp& GetInviteRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

GetInviteRewardResp* GetInviteRewardResp::default_instance_ = NULL;

GetInviteRewardResp* GetInviteRewardResp::New() const {
  return new GetInviteRewardResp;
}

void GetInviteRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mark_ = GOOGLE_ULONGLONG(0);
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInviteRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mark = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInviteRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mark = 1;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mark(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInviteRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mark = 1;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mark(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInviteRewardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mark = 1;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mark());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInviteRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInviteRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInviteRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInviteRewardResp::MergeFrom(const GetInviteRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mark()) {
      set_mark(from.mark());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInviteRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInviteRewardResp::CopyFrom(const GetInviteRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInviteRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void GetInviteRewardResp::Swap(GetInviteRewardResp* other) {
  if (other != this) {
    std::swap(mark_, other->mark_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInviteRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInviteRewardResp_descriptor_;
  metadata.reflection = GetInviteRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAddInviteRewardReq::kNumFieldNumber;
#endif  // !_MSC_VER

GetAddInviteRewardReq::GetAddInviteRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAddInviteRewardReq::InitAsDefaultInstance() {
}

GetAddInviteRewardReq::GetAddInviteRewardReq(const GetAddInviteRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAddInviteRewardReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAddInviteRewardReq::~GetAddInviteRewardReq() {
  SharedDtor();
}

void GetAddInviteRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAddInviteRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAddInviteRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAddInviteRewardReq_descriptor_;
}

const GetAddInviteRewardReq& GetAddInviteRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

GetAddInviteRewardReq* GetAddInviteRewardReq::default_instance_ = NULL;

GetAddInviteRewardReq* GetAddInviteRewardReq::New() const {
  return new GetAddInviteRewardReq;
}

void GetAddInviteRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAddInviteRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAddInviteRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAddInviteRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAddInviteRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAddInviteRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAddInviteRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAddInviteRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAddInviteRewardReq::MergeFrom(const GetAddInviteRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAddInviteRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddInviteRewardReq::CopyFrom(const GetAddInviteRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddInviteRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetAddInviteRewardReq::Swap(GetAddInviteRewardReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAddInviteRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAddInviteRewardReq_descriptor_;
  metadata.reflection = GetAddInviteRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAddInviteRewardResp::kMarkFieldNumber;
const int GetAddInviteRewardResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

GetAddInviteRewardResp::GetAddInviteRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAddInviteRewardResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

GetAddInviteRewardResp::GetAddInviteRewardResp(const GetAddInviteRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAddInviteRewardResp::SharedCtor() {
  _cached_size_ = 0;
  mark_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAddInviteRewardResp::~GetAddInviteRewardResp() {
  SharedDtor();
}

void GetAddInviteRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void GetAddInviteRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAddInviteRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAddInviteRewardResp_descriptor_;
}

const GetAddInviteRewardResp& GetAddInviteRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

GetAddInviteRewardResp* GetAddInviteRewardResp::default_instance_ = NULL;

GetAddInviteRewardResp* GetAddInviteRewardResp::New() const {
  return new GetAddInviteRewardResp;
}

void GetAddInviteRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mark_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAddInviteRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mark = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAddInviteRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mark = 1;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mark(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAddInviteRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mark = 1;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mark(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAddInviteRewardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mark = 1;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mark());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAddInviteRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAddInviteRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAddInviteRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAddInviteRewardResp::MergeFrom(const GetAddInviteRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mark()) {
      set_mark(from.mark());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAddInviteRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddInviteRewardResp::CopyFrom(const GetAddInviteRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddInviteRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void GetAddInviteRewardResp::Swap(GetAddInviteRewardResp* other) {
  if (other != this) {
    std::swap(mark_, other->mark_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAddInviteRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAddInviteRewardResp_descriptor_;
  metadata.reflection = GetAddInviteRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDrawRewardReq::kFreeFieldNumber;
#endif  // !_MSC_VER

GetDrawRewardReq::GetDrawRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDrawRewardReq::InitAsDefaultInstance() {
}

GetDrawRewardReq::GetDrawRewardReq(const GetDrawRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDrawRewardReq::SharedCtor() {
  _cached_size_ = 0;
  free_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDrawRewardReq::~GetDrawRewardReq() {
  SharedDtor();
}

void GetDrawRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDrawRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDrawRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDrawRewardReq_descriptor_;
}

const GetDrawRewardReq& GetDrawRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

GetDrawRewardReq* GetDrawRewardReq::default_instance_ = NULL;

GetDrawRewardReq* GetDrawRewardReq::New() const {
  return new GetDrawRewardReq;
}

void GetDrawRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    free_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDrawRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 free = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_)));
          set_has_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDrawRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 free = 1;
  if (has_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->free(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDrawRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 free = 1;
  if (has_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->free(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDrawRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 free = 1;
    if (has_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDrawRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDrawRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDrawRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDrawRewardReq::MergeFrom(const GetDrawRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_free()) {
      set_free(from.free());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDrawRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDrawRewardReq::CopyFrom(const GetDrawRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDrawRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetDrawRewardReq::Swap(GetDrawRewardReq* other) {
  if (other != this) {
    std::swap(free_, other->free_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDrawRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDrawRewardReq_descriptor_;
  metadata.reflection = GetDrawRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDrawRewardResp::kNextIdFieldNumber;
const int GetDrawRewardResp::kIndexFieldNumber;
const int GetDrawRewardResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

GetDrawRewardResp::GetDrawRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDrawRewardResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

GetDrawRewardResp::GetDrawRewardResp(const GetDrawRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDrawRewardResp::SharedCtor() {
  _cached_size_ = 0;
  nextid_ = 0u;
  index_ = 0u;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDrawRewardResp::~GetDrawRewardResp() {
  SharedDtor();
}

void GetDrawRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void GetDrawRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDrawRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDrawRewardResp_descriptor_;
}

const GetDrawRewardResp& GetDrawRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

GetDrawRewardResp* GetDrawRewardResp::default_instance_ = NULL;

GetDrawRewardResp* GetDrawRewardResp::New() const {
  return new GetDrawRewardResp;
}

void GetDrawRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nextid_ = 0u;
    index_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDrawRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nextId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextid_)));
          set_has_nextid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDrawRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nextId = 1;
  if (has_nextid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nextid(), output);
  }
  
  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDrawRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nextId = 1;
  if (has_nextid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nextid(), target);
  }
  
  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDrawRewardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nextId = 1;
    if (has_nextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextid());
    }
    
    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDrawRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDrawRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDrawRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDrawRewardResp::MergeFrom(const GetDrawRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nextid()) {
      set_nextid(from.nextid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDrawRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDrawRewardResp::CopyFrom(const GetDrawRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDrawRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void GetDrawRewardResp::Swap(GetDrawRewardResp* other) {
  if (other != this) {
    std::swap(nextid_, other->nextid_);
    std::swap(index_, other->index_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDrawRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDrawRewardResp_descriptor_;
  metadata.reflection = GetDrawRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewUserAddExpReq::kExpFieldNumber;
#endif  // !_MSC_VER

NewUserAddExpReq::NewUserAddExpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewUserAddExpReq::InitAsDefaultInstance() {
}

NewUserAddExpReq::NewUserAddExpReq(const NewUserAddExpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewUserAddExpReq::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewUserAddExpReq::~NewUserAddExpReq() {
  SharedDtor();
}

void NewUserAddExpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewUserAddExpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewUserAddExpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewUserAddExpReq_descriptor_;
}

const NewUserAddExpReq& NewUserAddExpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

NewUserAddExpReq* NewUserAddExpReq::default_instance_ = NULL;

NewUserAddExpReq* NewUserAddExpReq::New() const {
  return new NewUserAddExpReq;
}

void NewUserAddExpReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewUserAddExpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewUserAddExpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewUserAddExpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewUserAddExpReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewUserAddExpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewUserAddExpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewUserAddExpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewUserAddExpReq::MergeFrom(const NewUserAddExpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewUserAddExpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewUserAddExpReq::CopyFrom(const NewUserAddExpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUserAddExpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NewUserAddExpReq::Swap(NewUserAddExpReq* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewUserAddExpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewUserAddExpReq_descriptor_;
  metadata.reflection = NewUserAddExpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewUserAddExpResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

NewUserAddExpResp::NewUserAddExpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewUserAddExpResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

NewUserAddExpResp::NewUserAddExpResp(const NewUserAddExpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewUserAddExpResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewUserAddExpResp::~NewUserAddExpResp() {
  SharedDtor();
}

void NewUserAddExpResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void NewUserAddExpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewUserAddExpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewUserAddExpResp_descriptor_;
}

const NewUserAddExpResp& NewUserAddExpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();  return *default_instance_;
}

NewUserAddExpResp* NewUserAddExpResp::default_instance_ = NULL;

NewUserAddExpResp* NewUserAddExpResp::New() const {
  return new NewUserAddExpResp;
}

void NewUserAddExpResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewUserAddExpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewUserAddExpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewUserAddExpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewUserAddExpResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewUserAddExpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewUserAddExpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewUserAddExpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewUserAddExpResp::MergeFrom(const NewUserAddExpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewUserAddExpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewUserAddExpResp::CopyFrom(const NewUserAddExpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewUserAddExpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void NewUserAddExpResp::Swap(NewUserAddExpResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewUserAddExpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewUserAddExpResp_descriptor_;
  metadata.reflection = NewUserAddExpResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace User

// @@protoc_insertion_point(global_scope)
