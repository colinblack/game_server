// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoChampionship.proto

#ifndef PROTOBUF_ProtoChampionship_2eproto__INCLUDED
#define PROTOBUF_ProtoChampionship_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "ProtoBattleDemo.pb.h"
#include "DataCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoChampionship {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoChampionship_2eproto();
void protobuf_AssignDesc_ProtoChampionship_2eproto();
void protobuf_ShutdownFile_ProtoChampionship_2eproto();

class MatchUserInfoCPP;
class MatchInfoCPP;
class BattleInfoCPP;
class ProtoJoinInMatchReq;
class ProtoJoinInMatchResp;
class ProtoStartBattleReq;

// ===================================================================

class MatchUserInfoCPP : public ::google::protobuf::Message {
 public:
  MatchUserInfoCPP();
  virtual ~MatchUserInfoCPP();
  
  MatchUserInfoCPP(const MatchUserInfoCPP& from);
  
  inline MatchUserInfoCPP& operator=(const MatchUserInfoCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchUserInfoCPP& default_instance();
  
  void Swap(MatchUserInfoCPP* other);
  
  // implements Message ----------------------------------------------
  
  MatchUserInfoCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchUserInfoCPP& from);
  void MergeFrom(const MatchUserInfoCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 battleid = 2;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleidFieldNumber = 2;
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);
  
  // optional string fig = 3;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 3;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const char* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 grade = 5;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 5;
  inline ::google::protobuf::uint32 grade() const;
  inline void set_grade(::google::protobuf::uint32 value);
  
  // optional uint32 heroid = 6;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 6;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoChampionship.MatchUserInfoCPP)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_battleid();
  inline void clear_has_battleid();
  inline void set_has_fig();
  inline void clear_has_fig();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 battleid_;
  ::std::string* fig_;
  ::std::string* name_;
  ::google::protobuf::uint32 grade_;
  ::google::protobuf::uint32 heroid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoChampionship_2eproto();
  friend void protobuf_AssignDesc_ProtoChampionship_2eproto();
  friend void protobuf_ShutdownFile_ProtoChampionship_2eproto();
  
  void InitAsDefaultInstance();
  static MatchUserInfoCPP* default_instance_;
};
// -------------------------------------------------------------------

class MatchInfoCPP : public ::google::protobuf::Message {
 public:
  MatchInfoCPP();
  virtual ~MatchInfoCPP();
  
  MatchInfoCPP(const MatchInfoCPP& from);
  
  inline MatchInfoCPP& operator=(const MatchInfoCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchInfoCPP& default_instance();
  
  void Swap(MatchInfoCPP* other);
  
  // implements Message ----------------------------------------------
  
  MatchInfoCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchInfoCPP& from);
  void MergeFrom(const MatchInfoCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ProtoChampionship.MatchUserInfoCPP players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::ProtoChampionship::MatchUserInfoCPP& players(int index) const;
  inline ::ProtoChampionship::MatchUserInfoCPP* mutable_players(int index);
  inline ::ProtoChampionship::MatchUserInfoCPP* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoChampionship::MatchUserInfoCPP >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoChampionship::MatchUserInfoCPP >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:ProtoChampionship.MatchInfoCPP)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ProtoChampionship::MatchUserInfoCPP > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoChampionship_2eproto();
  friend void protobuf_AssignDesc_ProtoChampionship_2eproto();
  friend void protobuf_ShutdownFile_ProtoChampionship_2eproto();
  
  void InitAsDefaultInstance();
  static MatchInfoCPP* default_instance_;
};
// -------------------------------------------------------------------

class BattleInfoCPP : public ::google::protobuf::Message {
 public:
  BattleInfoCPP();
  virtual ~BattleInfoCPP();
  
  BattleInfoCPP(const BattleInfoCPP& from);
  
  inline BattleInfoCPP& operator=(const BattleInfoCPP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleInfoCPP& default_instance();
  
  void Swap(BattleInfoCPP* other);
  
  // implements Message ----------------------------------------------
  
  BattleInfoCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleInfoCPP& from);
  void MergeFrom(const BattleInfoCPP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 attack = 1;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 1;
  inline ::google::protobuf::uint32 attack() const;
  inline void set_attack(::google::protobuf::uint32 value);
  
  // optional .ProtoBattleDemo.ProtoBattleDemo battle = 2;
  inline bool has_battle() const;
  inline void clear_battle();
  static const int kBattleFieldNumber = 2;
  inline const ::ProtoBattleDemo::ProtoBattleDemo& battle() const;
  inline ::ProtoBattleDemo::ProtoBattleDemo* mutable_battle();
  inline ::ProtoBattleDemo::ProtoBattleDemo* release_battle();
  
  // optional .DataCommon.CommonItemsCPP commons = 3;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 3;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  
  // @@protoc_insertion_point(class_scope:ProtoChampionship.BattleInfoCPP)
 private:
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_battle();
  inline void clear_has_battle();
  inline void set_has_commons();
  inline void clear_has_commons();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ProtoBattleDemo::ProtoBattleDemo* battle_;
  ::DataCommon::CommonItemsCPP* commons_;
  ::google::protobuf::uint32 attack_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoChampionship_2eproto();
  friend void protobuf_AssignDesc_ProtoChampionship_2eproto();
  friend void protobuf_ShutdownFile_ProtoChampionship_2eproto();
  
  void InitAsDefaultInstance();
  static BattleInfoCPP* default_instance_;
};
// -------------------------------------------------------------------

class ProtoJoinInMatchReq : public ::google::protobuf::Message {
 public:
  ProtoJoinInMatchReq();
  virtual ~ProtoJoinInMatchReq();
  
  ProtoJoinInMatchReq(const ProtoJoinInMatchReq& from);
  
  inline ProtoJoinInMatchReq& operator=(const ProtoJoinInMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoJoinInMatchReq& default_instance();
  
  void Swap(ProtoJoinInMatchReq* other);
  
  // implements Message ----------------------------------------------
  
  ProtoJoinInMatchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoJoinInMatchReq& from);
  void MergeFrom(const ProtoJoinInMatchReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required uint32 heroid = 2;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 2;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);
  
  // required uint32 free = 3;
  inline bool has_free() const;
  inline void clear_free();
  static const int kFreeFieldNumber = 3;
  inline ::google::protobuf::uint32 free() const;
  inline void set_free(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProtoChampionship.ProtoJoinInMatchReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_free();
  inline void clear_has_free();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 free_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoChampionship_2eproto();
  friend void protobuf_AssignDesc_ProtoChampionship_2eproto();
  friend void protobuf_ShutdownFile_ProtoChampionship_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoJoinInMatchReq* default_instance_;
};
// -------------------------------------------------------------------

class ProtoJoinInMatchResp : public ::google::protobuf::Message {
 public:
  ProtoJoinInMatchResp();
  virtual ~ProtoJoinInMatchResp();
  
  ProtoJoinInMatchResp(const ProtoJoinInMatchResp& from);
  
  inline ProtoJoinInMatchResp& operator=(const ProtoJoinInMatchResp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoJoinInMatchResp& default_instance();
  
  void Swap(ProtoJoinInMatchResp* other);
  
  // implements Message ----------------------------------------------
  
  ProtoJoinInMatchResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoJoinInMatchResp& from);
  void MergeFrom(const ProtoJoinInMatchResp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .DataCommon.CommonItemsCPP commons = 1;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 1;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  
  // @@protoc_insertion_point(class_scope:ProtoChampionship.ProtoJoinInMatchResp)
 private:
  inline void set_has_commons();
  inline void clear_has_commons();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::DataCommon::CommonItemsCPP* commons_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoChampionship_2eproto();
  friend void protobuf_AssignDesc_ProtoChampionship_2eproto();
  friend void protobuf_ShutdownFile_ProtoChampionship_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoJoinInMatchResp* default_instance_;
};
// -------------------------------------------------------------------

class ProtoStartBattleReq : public ::google::protobuf::Message {
 public:
  ProtoStartBattleReq();
  virtual ~ProtoStartBattleReq();
  
  ProtoStartBattleReq(const ProtoStartBattleReq& from);
  
  inline ProtoStartBattleReq& operator=(const ProtoStartBattleReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoStartBattleReq& default_instance();
  
  void Swap(ProtoStartBattleReq* other);
  
  // implements Message ----------------------------------------------
  
  ProtoStartBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtoStartBattleReq& from);
  void MergeFrom(const ProtoStartBattleReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 battleid = 1;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleidFieldNumber = 1;
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);
  
  // repeated uint32 props = 2;
  inline int props_size() const;
  inline void clear_props();
  static const int kPropsFieldNumber = 2;
  inline ::google::protobuf::uint32 props(int index) const;
  inline void set_props(int index, ::google::protobuf::uint32 value);
  inline void add_props(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      props() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_props();
  
  // @@protoc_insertion_point(class_scope:ProtoChampionship.ProtoStartBattleReq)
 private:
  inline void set_has_battleid();
  inline void clear_has_battleid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > props_;
  ::google::protobuf::uint32 battleid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ProtoChampionship_2eproto();
  friend void protobuf_AssignDesc_ProtoChampionship_2eproto();
  friend void protobuf_ShutdownFile_ProtoChampionship_2eproto();
  
  void InitAsDefaultInstance();
  static ProtoStartBattleReq* default_instance_;
};
// ===================================================================


// ===================================================================

// MatchUserInfoCPP

// required uint32 uid = 1;
inline bool MatchUserInfoCPP::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchUserInfoCPP::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchUserInfoCPP::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchUserInfoCPP::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 MatchUserInfoCPP::uid() const {
  return uid_;
}
inline void MatchUserInfoCPP::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 battleid = 2;
inline bool MatchUserInfoCPP::has_battleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchUserInfoCPP::set_has_battleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchUserInfoCPP::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchUserInfoCPP::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 MatchUserInfoCPP::battleid() const {
  return battleid_;
}
inline void MatchUserInfoCPP::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
}

// optional string fig = 3;
inline bool MatchUserInfoCPP::has_fig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchUserInfoCPP::set_has_fig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchUserInfoCPP::clear_has_fig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchUserInfoCPP::clear_fig() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& MatchUserInfoCPP::fig() const {
  return *fig_;
}
inline void MatchUserInfoCPP::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void MatchUserInfoCPP::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
}
inline void MatchUserInfoCPP::set_fig(const char* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchUserInfoCPP::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    fig_ = new ::std::string;
  }
  return fig_;
}
inline ::std::string* MatchUserInfoCPP::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 4;
inline bool MatchUserInfoCPP::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchUserInfoCPP::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchUserInfoCPP::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchUserInfoCPP::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MatchUserInfoCPP::name() const {
  return *name_;
}
inline void MatchUserInfoCPP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MatchUserInfoCPP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MatchUserInfoCPP::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MatchUserInfoCPP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MatchUserInfoCPP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 grade = 5;
inline bool MatchUserInfoCPP::has_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchUserInfoCPP::set_has_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchUserInfoCPP::clear_has_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchUserInfoCPP::clear_grade() {
  grade_ = 0u;
  clear_has_grade();
}
inline ::google::protobuf::uint32 MatchUserInfoCPP::grade() const {
  return grade_;
}
inline void MatchUserInfoCPP::set_grade(::google::protobuf::uint32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint32 heroid = 6;
inline bool MatchUserInfoCPP::has_heroid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchUserInfoCPP::set_has_heroid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchUserInfoCPP::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchUserInfoCPP::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 MatchUserInfoCPP::heroid() const {
  return heroid_;
}
inline void MatchUserInfoCPP::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// MatchInfoCPP

// repeated .ProtoChampionship.MatchUserInfoCPP players = 1;
inline int MatchInfoCPP::players_size() const {
  return players_.size();
}
inline void MatchInfoCPP::clear_players() {
  players_.Clear();
}
inline const ::ProtoChampionship::MatchUserInfoCPP& MatchInfoCPP::players(int index) const {
  return players_.Get(index);
}
inline ::ProtoChampionship::MatchUserInfoCPP* MatchInfoCPP::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::ProtoChampionship::MatchUserInfoCPP* MatchInfoCPP::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoChampionship::MatchUserInfoCPP >&
MatchInfoCPP::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoChampionship::MatchUserInfoCPP >*
MatchInfoCPP::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// BattleInfoCPP

// required uint32 attack = 1;
inline bool BattleInfoCPP::has_attack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleInfoCPP::set_has_attack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleInfoCPP::clear_has_attack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleInfoCPP::clear_attack() {
  attack_ = 0u;
  clear_has_attack();
}
inline ::google::protobuf::uint32 BattleInfoCPP::attack() const {
  return attack_;
}
inline void BattleInfoCPP::set_attack(::google::protobuf::uint32 value) {
  set_has_attack();
  attack_ = value;
}

// optional .ProtoBattleDemo.ProtoBattleDemo battle = 2;
inline bool BattleInfoCPP::has_battle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleInfoCPP::set_has_battle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleInfoCPP::clear_has_battle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleInfoCPP::clear_battle() {
  if (battle_ != NULL) battle_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
  clear_has_battle();
}
inline const ::ProtoBattleDemo::ProtoBattleDemo& BattleInfoCPP::battle() const {
  return battle_ != NULL ? *battle_ : *default_instance_->battle_;
}
inline ::ProtoBattleDemo::ProtoBattleDemo* BattleInfoCPP::mutable_battle() {
  set_has_battle();
  if (battle_ == NULL) battle_ = new ::ProtoBattleDemo::ProtoBattleDemo;
  return battle_;
}
inline ::ProtoBattleDemo::ProtoBattleDemo* BattleInfoCPP::release_battle() {
  clear_has_battle();
  ::ProtoBattleDemo::ProtoBattleDemo* temp = battle_;
  battle_ = NULL;
  return temp;
}

// optional .DataCommon.CommonItemsCPP commons = 3;
inline bool BattleInfoCPP::has_commons() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleInfoCPP::set_has_commons() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleInfoCPP::clear_has_commons() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleInfoCPP::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& BattleInfoCPP::commons() const {
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* BattleInfoCPP::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* BattleInfoCPP::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoJoinInMatchReq

// required uint32 id = 1;
inline bool ProtoJoinInMatchReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoJoinInMatchReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoJoinInMatchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoJoinInMatchReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ProtoJoinInMatchReq::id() const {
  return id_;
}
inline void ProtoJoinInMatchReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 heroid = 2;
inline bool ProtoJoinInMatchReq::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtoJoinInMatchReq::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtoJoinInMatchReq::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtoJoinInMatchReq::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 ProtoJoinInMatchReq::heroid() const {
  return heroid_;
}
inline void ProtoJoinInMatchReq::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// required uint32 free = 3;
inline bool ProtoJoinInMatchReq::has_free() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProtoJoinInMatchReq::set_has_free() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProtoJoinInMatchReq::clear_has_free() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProtoJoinInMatchReq::clear_free() {
  free_ = 0u;
  clear_has_free();
}
inline ::google::protobuf::uint32 ProtoJoinInMatchReq::free() const {
  return free_;
}
inline void ProtoJoinInMatchReq::set_free(::google::protobuf::uint32 value) {
  set_has_free();
  free_ = value;
}

// -------------------------------------------------------------------

// ProtoJoinInMatchResp

// optional .DataCommon.CommonItemsCPP commons = 1;
inline bool ProtoJoinInMatchResp::has_commons() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoJoinInMatchResp::set_has_commons() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoJoinInMatchResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoJoinInMatchResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& ProtoJoinInMatchResp::commons() const {
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* ProtoJoinInMatchResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* ProtoJoinInMatchResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ProtoStartBattleReq

// required uint32 battleid = 1;
inline bool ProtoStartBattleReq::has_battleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtoStartBattleReq::set_has_battleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtoStartBattleReq::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtoStartBattleReq::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 ProtoStartBattleReq::battleid() const {
  return battleid_;
}
inline void ProtoStartBattleReq::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
}

// repeated uint32 props = 2;
inline int ProtoStartBattleReq::props_size() const {
  return props_.size();
}
inline void ProtoStartBattleReq::clear_props() {
  props_.Clear();
}
inline ::google::protobuf::uint32 ProtoStartBattleReq::props(int index) const {
  return props_.Get(index);
}
inline void ProtoStartBattleReq::set_props(int index, ::google::protobuf::uint32 value) {
  props_.Set(index, value);
}
inline void ProtoStartBattleReq::add_props(::google::protobuf::uint32 value) {
  props_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProtoStartBattleReq::props() const {
  return props_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProtoStartBattleReq::mutable_props() {
  return &props_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoChampionship

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoChampionship_2eproto__INCLUDED
