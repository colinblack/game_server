// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBattle {

namespace {

const ::google::protobuf::Descriptor* BattleCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPveBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPveBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPveBattleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPveBattleResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoGradeBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoGradeBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoGradeBattleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoGradeBattleResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMatchResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMatchResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WinStreakRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WinStreakRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WinStreakRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WinStreakRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeShareRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeShareRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeShareRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeShareRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetFormationResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetFormationResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRandomUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRandomUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRandomUserResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRandomUserResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRevengeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRevengeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRevengeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRevengeResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRefreshReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRefreshReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoRefreshResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoRefreshResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoPost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoPost_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFriendBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFriendBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoFriendBattleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoFriendBattleResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMartialClubBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMartialClubBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoMartialClubBattleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoMartialClubBattleResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCSMartialClubBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCSMartialClubBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCSBattleResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCSBattleResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoCSMartialClubBattleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoCSMartialClubBattleResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBattle_2eproto() {
  protobuf_AddDesc_ProtoBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBattle.proto");
  GOOGLE_CHECK(file != NULL);
  BattleCommon_descriptor_ = file->message_type(0);
  static const int BattleCommon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommon, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommon, propid_),
  };
  BattleCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleCommon_descriptor_,
      BattleCommon::default_instance_,
      BattleCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleCommon));
  ProtoPveBattleReq_descriptor_ = file->message_type(1);
  static const int ProtoPveBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPveBattleReq, common_),
  };
  ProtoPveBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPveBattleReq_descriptor_,
      ProtoPveBattleReq::default_instance_,
      ProtoPveBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPveBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPveBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPveBattleReq));
  ProtoPveBattleResp_descriptor_ = file->message_type(2);
  static const int ProtoPveBattleResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPveBattleResp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPveBattleResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPveBattleResp, hero_),
  };
  ProtoPveBattleResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPveBattleResp_descriptor_,
      ProtoPveBattleResp::default_instance_,
      ProtoPveBattleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPveBattleResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPveBattleResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPveBattleResp));
  ProtoGradeBattleReq_descriptor_ = file->message_type(3);
  static const int ProtoGradeBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleReq, common_),
  };
  ProtoGradeBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoGradeBattleReq_descriptor_,
      ProtoGradeBattleReq::default_instance_,
      ProtoGradeBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoGradeBattleReq));
  ProtoGradeBattleResp_descriptor_ = file->message_type(4);
  static const int ProtoGradeBattleResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleResp, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleResp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleResp, dailyscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleResp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleResp, commons_),
  };
  ProtoGradeBattleResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoGradeBattleResp_descriptor_,
      ProtoGradeBattleResp::default_instance_,
      ProtoGradeBattleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoGradeBattleResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoGradeBattleResp));
  ProtoMatchReq_descriptor_ = file->message_type(5);
  static const int ProtoMatchReq_offsets_[1] = {
  };
  ProtoMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMatchReq_descriptor_,
      ProtoMatchReq::default_instance_,
      ProtoMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMatchReq));
  ProtoMatchResp_descriptor_ = file->message_type(6);
  static const int ProtoMatchResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMatchResp, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMatchResp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMatchResp, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMatchResp, heroid_),
  };
  ProtoMatchResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMatchResp_descriptor_,
      ProtoMatchResp::default_instance_,
      ProtoMatchResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMatchResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMatchResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMatchResp));
  UpgradeRewardReq_descriptor_ = file->message_type(7);
  static const int UpgradeRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRewardReq, grade_),
  };
  UpgradeRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeRewardReq_descriptor_,
      UpgradeRewardReq::default_instance_,
      UpgradeRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeRewardReq));
  UpgradeRewardResp_descriptor_ = file->message_type(8);
  static const int UpgradeRewardResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRewardResp, rewards_),
  };
  UpgradeRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeRewardResp_descriptor_,
      UpgradeRewardResp::default_instance_,
      UpgradeRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeRewardResp));
  DailyRewardReq_descriptor_ = file->message_type(9);
  static const int DailyRewardReq_offsets_[1] = {
  };
  DailyRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyRewardReq_descriptor_,
      DailyRewardReq::default_instance_,
      DailyRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyRewardReq));
  DailRewardResp_descriptor_ = file->message_type(10);
  static const int DailRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailRewardResp, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailRewardResp, rewards_),
  };
  DailRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailRewardResp_descriptor_,
      DailRewardResp::default_instance_,
      DailRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailRewardResp));
  WinStreakRewardReq_descriptor_ = file->message_type(11);
  static const int WinStreakRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinStreakRewardReq, count_),
  };
  WinStreakRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WinStreakRewardReq_descriptor_,
      WinStreakRewardReq::default_instance_,
      WinStreakRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinStreakRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinStreakRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WinStreakRewardReq));
  WinStreakRewardResp_descriptor_ = file->message_type(12);
  static const int WinStreakRewardResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinStreakRewardResp, rewards_),
  };
  WinStreakRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WinStreakRewardResp_descriptor_,
      WinStreakRewardResp::default_instance_,
      WinStreakRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinStreakRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WinStreakRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WinStreakRewardResp));
  UpgradeShareRewardReq_descriptor_ = file->message_type(13);
  static const int UpgradeShareRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeShareRewardReq, grade_),
  };
  UpgradeShareRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeShareRewardReq_descriptor_,
      UpgradeShareRewardReq::default_instance_,
      UpgradeShareRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeShareRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeShareRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeShareRewardReq));
  UpgradeShareRewardResp_descriptor_ = file->message_type(14);
  static const int UpgradeShareRewardResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeShareRewardResp, rewards_),
  };
  UpgradeShareRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeShareRewardResp_descriptor_,
      UpgradeShareRewardResp::default_instance_,
      UpgradeShareRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeShareRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeShareRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeShareRewardResp));
  SetFormationReq_descriptor_ = file->message_type(15);
  static const int SetFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFormationReq, heroid_),
  };
  SetFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetFormationReq_descriptor_,
      SetFormationReq::default_instance_,
      SetFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetFormationReq));
  SetFormationResp_descriptor_ = file->message_type(16);
  static const int SetFormationResp_offsets_[1] = {
  };
  SetFormationResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetFormationResp_descriptor_,
      SetFormationResp::default_instance_,
      SetFormationResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFormationResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetFormationResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetFormationResp));
  ProtoRandomUserReq_descriptor_ = file->message_type(17);
  static const int ProtoRandomUserReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRandomUserReq, common_),
  };
  ProtoRandomUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRandomUserReq_descriptor_,
      ProtoRandomUserReq::default_instance_,
      ProtoRandomUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRandomUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRandomUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRandomUserReq));
  ProtoRandomUserResp_descriptor_ = file->message_type(18);
  static const int ProtoRandomUserResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRandomUserResp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRandomUserResp, commons_),
  };
  ProtoRandomUserResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRandomUserResp_descriptor_,
      ProtoRandomUserResp::default_instance_,
      ProtoRandomUserResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRandomUserResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRandomUserResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRandomUserResp));
  ProtoRevengeReq_descriptor_ = file->message_type(19);
  static const int ProtoRevengeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRevengeReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRevengeReq, common_),
  };
  ProtoRevengeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRevengeReq_descriptor_,
      ProtoRevengeReq::default_instance_,
      ProtoRevengeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRevengeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRevengeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRevengeReq));
  ProtoRevengeResp_descriptor_ = file->message_type(20);
  static const int ProtoRevengeResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRevengeResp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRevengeResp, commons_),
  };
  ProtoRevengeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRevengeResp_descriptor_,
      ProtoRevengeResp::default_instance_,
      ProtoRevengeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRevengeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRevengeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRevengeResp));
  ProtoRefreshReq_descriptor_ = file->message_type(21);
  static const int ProtoRefreshReq_offsets_[1] = {
  };
  ProtoRefreshReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRefreshReq_descriptor_,
      ProtoRefreshReq::default_instance_,
      ProtoRefreshReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefreshReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefreshReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRefreshReq));
  ProtoRefreshResp_descriptor_ = file->message_type(22);
  static const int ProtoRefreshResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefreshResp, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefreshResp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefreshResp, hero_),
  };
  ProtoRefreshResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoRefreshResp_descriptor_,
      ProtoRefreshResp::default_instance_,
      ProtoRefreshResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefreshResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoRefreshResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoRefreshResp));
  ProtoPost_descriptor_ = file->message_type(23);
  static const int ProtoPost_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPost, info_),
  };
  ProtoPost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoPost_descriptor_,
      ProtoPost::default_instance_,
      ProtoPost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoPost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoPost));
  ProtoFriendBattleReq_descriptor_ = file->message_type(24);
  static const int ProtoFriendBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendBattleReq, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendBattleReq, common_),
  };
  ProtoFriendBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFriendBattleReq_descriptor_,
      ProtoFriendBattleReq::default_instance_,
      ProtoFriendBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFriendBattleReq));
  ProtoFriendBattleResp_descriptor_ = file->message_type(25);
  static const int ProtoFriendBattleResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendBattleResp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendBattleResp, commons_),
  };
  ProtoFriendBattleResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoFriendBattleResp_descriptor_,
      ProtoFriendBattleResp::default_instance_,
      ProtoFriendBattleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendBattleResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoFriendBattleResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoFriendBattleResp));
  ProtoMartialClubBattleReq_descriptor_ = file->message_type(26);
  static const int ProtoMartialClubBattleReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleReq, mymartialgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleReq, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleReq, othmartialgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleReq, common_),
  };
  ProtoMartialClubBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMartialClubBattleReq_descriptor_,
      ProtoMartialClubBattleReq::default_instance_,
      ProtoMartialClubBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMartialClubBattleReq));
  ProtoMartialClubBattleResp_descriptor_ = file->message_type(27);
  static const int ProtoMartialClubBattleResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleResp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleResp, commons_),
  };
  ProtoMartialClubBattleResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoMartialClubBattleResp_descriptor_,
      ProtoMartialClubBattleResp::default_instance_,
      ProtoMartialClubBattleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoMartialClubBattleResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoMartialClubBattleResp));
  ProtoCSMartialClubBattleReq_descriptor_ = file->message_type(28);
  static const int ProtoCSMartialClubBattleReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, myname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, myfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, mymartialgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, othuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, othmartialgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, hero_),
  };
  ProtoCSMartialClubBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCSMartialClubBattleReq_descriptor_,
      ProtoCSMartialClubBattleReq::default_instance_,
      ProtoCSMartialClubBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCSMartialClubBattleReq));
  ProtoCSBattleResultReq_descriptor_ = file->message_type(29);
  static const int ProtoCSBattleResultReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSBattleResultReq, myuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSBattleResultReq, mymartialgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSBattleResultReq, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSBattleResultReq, info_),
  };
  ProtoCSBattleResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCSBattleResultReq_descriptor_,
      ProtoCSBattleResultReq::default_instance_,
      ProtoCSBattleResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSBattleResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSBattleResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCSBattleResultReq));
  ProtoCSMartialClubBattleResp_descriptor_ = file->message_type(30);
  static const int ProtoCSMartialClubBattleResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleResp, info_),
  };
  ProtoCSMartialClubBattleResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoCSMartialClubBattleResp_descriptor_,
      ProtoCSMartialClubBattleResp::default_instance_,
      ProtoCSMartialClubBattleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoCSMartialClubBattleResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoCSMartialClubBattleResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleCommon_descriptor_, &BattleCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPveBattleReq_descriptor_, &ProtoPveBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPveBattleResp_descriptor_, &ProtoPveBattleResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoGradeBattleReq_descriptor_, &ProtoGradeBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoGradeBattleResp_descriptor_, &ProtoGradeBattleResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMatchReq_descriptor_, &ProtoMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMatchResp_descriptor_, &ProtoMatchResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeRewardReq_descriptor_, &UpgradeRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeRewardResp_descriptor_, &UpgradeRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyRewardReq_descriptor_, &DailyRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailRewardResp_descriptor_, &DailRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WinStreakRewardReq_descriptor_, &WinStreakRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WinStreakRewardResp_descriptor_, &WinStreakRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeShareRewardReq_descriptor_, &UpgradeShareRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeShareRewardResp_descriptor_, &UpgradeShareRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetFormationReq_descriptor_, &SetFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetFormationResp_descriptor_, &SetFormationResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRandomUserReq_descriptor_, &ProtoRandomUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRandomUserResp_descriptor_, &ProtoRandomUserResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRevengeReq_descriptor_, &ProtoRevengeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRevengeResp_descriptor_, &ProtoRevengeResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRefreshReq_descriptor_, &ProtoRefreshReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoRefreshResp_descriptor_, &ProtoRefreshResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoPost_descriptor_, &ProtoPost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFriendBattleReq_descriptor_, &ProtoFriendBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoFriendBattleResp_descriptor_, &ProtoFriendBattleResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMartialClubBattleReq_descriptor_, &ProtoMartialClubBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoMartialClubBattleResp_descriptor_, &ProtoMartialClubBattleResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCSMartialClubBattleReq_descriptor_, &ProtoCSMartialClubBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCSBattleResultReq_descriptor_, &ProtoCSBattleResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoCSMartialClubBattleResp_descriptor_, &ProtoCSMartialClubBattleResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBattle_2eproto() {
  delete BattleCommon::default_instance_;
  delete BattleCommon_reflection_;
  delete ProtoPveBattleReq::default_instance_;
  delete ProtoPveBattleReq_reflection_;
  delete ProtoPveBattleResp::default_instance_;
  delete ProtoPveBattleResp_reflection_;
  delete ProtoGradeBattleReq::default_instance_;
  delete ProtoGradeBattleReq_reflection_;
  delete ProtoGradeBattleResp::default_instance_;
  delete ProtoGradeBattleResp_reflection_;
  delete ProtoMatchReq::default_instance_;
  delete ProtoMatchReq_reflection_;
  delete ProtoMatchResp::default_instance_;
  delete ProtoMatchResp_reflection_;
  delete UpgradeRewardReq::default_instance_;
  delete UpgradeRewardReq_reflection_;
  delete UpgradeRewardResp::default_instance_;
  delete UpgradeRewardResp_reflection_;
  delete DailyRewardReq::default_instance_;
  delete DailyRewardReq_reflection_;
  delete DailRewardResp::default_instance_;
  delete DailRewardResp_reflection_;
  delete WinStreakRewardReq::default_instance_;
  delete WinStreakRewardReq_reflection_;
  delete WinStreakRewardResp::default_instance_;
  delete WinStreakRewardResp_reflection_;
  delete UpgradeShareRewardReq::default_instance_;
  delete UpgradeShareRewardReq_reflection_;
  delete UpgradeShareRewardResp::default_instance_;
  delete UpgradeShareRewardResp_reflection_;
  delete SetFormationReq::default_instance_;
  delete SetFormationReq_reflection_;
  delete SetFormationResp::default_instance_;
  delete SetFormationResp_reflection_;
  delete ProtoRandomUserReq::default_instance_;
  delete ProtoRandomUserReq_reflection_;
  delete ProtoRandomUserResp::default_instance_;
  delete ProtoRandomUserResp_reflection_;
  delete ProtoRevengeReq::default_instance_;
  delete ProtoRevengeReq_reflection_;
  delete ProtoRevengeResp::default_instance_;
  delete ProtoRevengeResp_reflection_;
  delete ProtoRefreshReq::default_instance_;
  delete ProtoRefreshReq_reflection_;
  delete ProtoRefreshResp::default_instance_;
  delete ProtoRefreshResp_reflection_;
  delete ProtoPost::default_instance_;
  delete ProtoPost_reflection_;
  delete ProtoFriendBattleReq::default_instance_;
  delete ProtoFriendBattleReq_reflection_;
  delete ProtoFriendBattleResp::default_instance_;
  delete ProtoFriendBattleResp_reflection_;
  delete ProtoMartialClubBattleReq::default_instance_;
  delete ProtoMartialClubBattleReq_reflection_;
  delete ProtoMartialClubBattleResp::default_instance_;
  delete ProtoMartialClubBattleResp_reflection_;
  delete ProtoCSMartialClubBattleReq::default_instance_;
  delete ProtoCSMartialClubBattleReq_reflection_;
  delete ProtoCSBattleResultReq::default_instance_;
  delete ProtoCSBattleResultReq_reflection_;
  delete ProtoCSMartialClubBattleResp::default_instance_;
  delete ProtoCSMartialClubBattleResp_reflection_;
}

void protobuf_AddDesc_ProtoBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoBattleDemo::protobuf_AddDesc_ProtoBattleDemo_2eproto();
  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoHero::protobuf_AddDesc_ProtoHero_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ProtoBattle.proto\022\013ProtoBattle\032\025ProtoB"
    "attleDemo.proto\032\020DataCommon.proto\032\017Proto"
    "Hero.proto\"/\n\014BattleCommon\022\017\n\007stageId\030\001 "
    "\001(\r\022\016\n\006propId\030\002 \003(\r\">\n\021ProtoPveBattleReq"
    "\022)\n\006common\030\001 \002(\0132\031.ProtoBattle.BattleCom"
    "mon\"\233\001\n\022ProtoPveBattleResp\022.\n\004info\030\001 \002(\013"
    "2 .ProtoBattleDemo.ProtoBattleDemo\022+\n\007co"
    "mmons\030\002 \002(\0132\032.DataCommon.CommonItemsCPP\022"
    "(\n\004hero\030\003 \003(\0132\032.ProtoHero.HeroBaseInfoCP"
    "P\"@\n\023ProtoGradeBattleReq\022)\n\006common\030\001 \002(\013"
    "2\031.ProtoBattle.BattleCommon\"\245\001\n\024ProtoGra"
    "deBattleResp\022\r\n\005grade\030\001 \002(\r\022\r\n\005score\030\002 \002"
    "(\r\022\022\n\ndailyScore\030\003 \002(\r\022.\n\004info\030\004 \002(\0132 .P"
    "rotoBattleDemo.ProtoBattleDemo\022+\n\007common"
    "s\030\005 \002(\0132\032.DataCommon.CommonItemsCPP\"\017\n\rP"
    "rotoMatchReq\"J\n\016ProtoMatchResp\022\013\n\003fig\030\001 "
    "\001(\t\022\014\n\004name\030\002 \002(\t\022\r\n\005grade\030\003 \002(\r\022\016\n\006hero"
    "id\030\004 \003(\r\"!\n\020UpgradeRewardReq\022\r\n\005grade\030\001 "
    "\002(\r\"@\n\021UpgradeRewardResp\022+\n\007rewards\030\001 \002("
    "\0132\032.DataCommon.CommonItemsCPP\"\020\n\016DailyRe"
    "wardReq\"I\n\016DailRewardResp\022\n\n\002ts\030\001 \002(\r\022+\n"
    "\007rewards\030\002 \002(\0132\032.DataCommon.CommonItemsC"
    "PP\"#\n\022WinStreakRewardReq\022\r\n\005count\030\001 \002(\r\""
    "B\n\023WinStreakRewardResp\022+\n\007rewards\030\001 \002(\0132"
    "\032.DataCommon.CommonItemsCPP\"&\n\025UpgradeSh"
    "areRewardReq\022\r\n\005grade\030\001 \002(\r\"E\n\026UpgradeSh"
    "areRewardResp\022+\n\007rewards\030\001 \002(\0132\032.DataCom"
    "mon.CommonItemsCPP\"!\n\017SetFormationReq\022\016\n"
    "\006heroid\030\001 \003(\r\"\022\n\020SetFormationResp\"\?\n\022Pro"
    "toRandomUserReq\022)\n\006common\030\001 \002(\0132\031.ProtoB"
    "attle.BattleCommon\"r\n\023ProtoRandomUserRes"
    "p\022.\n\004info\030\001 \002(\0132 .ProtoBattleDemo.ProtoB"
    "attleDemo\022+\n\007commons\030\002 \002(\0132\032.DataCommon."
    "CommonItemsCPP\"M\n\017ProtoRevengeReq\022\017\n\007ene"
    "myId\030\001 \002(\r\022)\n\006common\030\002 \002(\0132\031.ProtoBattle"
    ".BattleCommon\"o\n\020ProtoRevengeResp\022.\n\004inf"
    "o\030\001 \002(\0132 .ProtoBattleDemo.ProtoBattleDem"
    "o\022+\n\007commons\030\002 \002(\0132\032.DataCommon.CommonIt"
    "emsCPP\"\021\n\017ProtoRefreshReq\"W\n\020ProtoRefres"
    "hResp\022\013\n\003fig\030\001 \001(\t\022\014\n\004name\030\002 \002(\t\022(\n\004hero"
    "\030\003 \003(\0132\032.ProtoHero.HeroBaseInfoCPP\"\031\n\tPr"
    "otoPost\022\014\n\004info\030\001 \002(\t\"R\n\024ProtoFriendBatt"
    "leReq\022\017\n\007otherId\030\001 \002(\r\022)\n\006common\030\002 \002(\0132\031"
    ".ProtoBattle.BattleCommon\"t\n\025ProtoFriend"
    "BattleResp\022.\n\004info\030\001 \002(\0132 .ProtoBattleDe"
    "mo.ProtoBattleDemo\022+\n\007commons\030\002 \002(\0132\032.Da"
    "taCommon.CommonItemsCPP\"\207\001\n\031ProtoMartial"
    "ClubBattleReq\022\026\n\016myMartialGrade\030\001 \002(\r\022\016\n"
    "\006othUid\030\002 \002(\r\022\027\n\017othMartialGrade\030\003 \002(\r\022)"
    "\n\006common\030\004 \002(\0132\031.ProtoBattle.BattleCommo"
    "n\"y\n\032ProtoMartialClubBattleResp\022.\n\004info\030"
    "\001 \002(\0132 .ProtoBattleDemo.ProtoBattleDemo\022"
    "+\n\007commons\030\002 \002(\0132\032.DataCommon.CommonItem"
    "sCPP\"\360\001\n\033ProtoCSMartialClubBattleReq\022\r\n\005"
    "myUid\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\016\n\006myName\030\003 \002"
    "(\t\022\r\n\005myFig\030\004 \002(\t\022\026\n\016myMartialGrade\030\005 \002("
    "\r\022\016\n\006othUid\030\006 \002(\r\022\027\n\017othMartialGrade\030\007 \002"
    "(\r\022)\n\006common\030\010 \002(\0132\031.ProtoBattle.BattleC"
    "ommon\022(\n\004hero\030\t \003(\0132\032.ProtoHero.HeroBase"
    "InfoCPP\"\234\001\n\026ProtoCSBattleResultReq\022\r\n\005my"
    "Uid\030\001 \002(\r\022\026\n\016myMartialGrade\030\002 \002(\r\022+\n\007com"
    "mons\030\003 \002(\0132\032.DataCommon.CommonItemsCPP\022."
    "\n\004info\030\004 \002(\0132 .ProtoBattleDemo.ProtoBatt"
    "leDemo\"{\n\034ProtoCSMartialClubBattleResp\022+"
    "\n\007commons\030\001 \002(\0132\032.DataCommon.CommonItems"
    "CPP\022.\n\004info\030\002 \002(\0132 .ProtoBattleDemo.Prot"
    "oBattleDemo", 2651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBattle.proto", &protobuf_RegisterTypes);
  BattleCommon::default_instance_ = new BattleCommon();
  ProtoPveBattleReq::default_instance_ = new ProtoPveBattleReq();
  ProtoPveBattleResp::default_instance_ = new ProtoPveBattleResp();
  ProtoGradeBattleReq::default_instance_ = new ProtoGradeBattleReq();
  ProtoGradeBattleResp::default_instance_ = new ProtoGradeBattleResp();
  ProtoMatchReq::default_instance_ = new ProtoMatchReq();
  ProtoMatchResp::default_instance_ = new ProtoMatchResp();
  UpgradeRewardReq::default_instance_ = new UpgradeRewardReq();
  UpgradeRewardResp::default_instance_ = new UpgradeRewardResp();
  DailyRewardReq::default_instance_ = new DailyRewardReq();
  DailRewardResp::default_instance_ = new DailRewardResp();
  WinStreakRewardReq::default_instance_ = new WinStreakRewardReq();
  WinStreakRewardResp::default_instance_ = new WinStreakRewardResp();
  UpgradeShareRewardReq::default_instance_ = new UpgradeShareRewardReq();
  UpgradeShareRewardResp::default_instance_ = new UpgradeShareRewardResp();
  SetFormationReq::default_instance_ = new SetFormationReq();
  SetFormationResp::default_instance_ = new SetFormationResp();
  ProtoRandomUserReq::default_instance_ = new ProtoRandomUserReq();
  ProtoRandomUserResp::default_instance_ = new ProtoRandomUserResp();
  ProtoRevengeReq::default_instance_ = new ProtoRevengeReq();
  ProtoRevengeResp::default_instance_ = new ProtoRevengeResp();
  ProtoRefreshReq::default_instance_ = new ProtoRefreshReq();
  ProtoRefreshResp::default_instance_ = new ProtoRefreshResp();
  ProtoPost::default_instance_ = new ProtoPost();
  ProtoFriendBattleReq::default_instance_ = new ProtoFriendBattleReq();
  ProtoFriendBattleResp::default_instance_ = new ProtoFriendBattleResp();
  ProtoMartialClubBattleReq::default_instance_ = new ProtoMartialClubBattleReq();
  ProtoMartialClubBattleResp::default_instance_ = new ProtoMartialClubBattleResp();
  ProtoCSMartialClubBattleReq::default_instance_ = new ProtoCSMartialClubBattleReq();
  ProtoCSBattleResultReq::default_instance_ = new ProtoCSBattleResultReq();
  ProtoCSMartialClubBattleResp::default_instance_ = new ProtoCSMartialClubBattleResp();
  BattleCommon::default_instance_->InitAsDefaultInstance();
  ProtoPveBattleReq::default_instance_->InitAsDefaultInstance();
  ProtoPveBattleResp::default_instance_->InitAsDefaultInstance();
  ProtoGradeBattleReq::default_instance_->InitAsDefaultInstance();
  ProtoGradeBattleResp::default_instance_->InitAsDefaultInstance();
  ProtoMatchReq::default_instance_->InitAsDefaultInstance();
  ProtoMatchResp::default_instance_->InitAsDefaultInstance();
  UpgradeRewardReq::default_instance_->InitAsDefaultInstance();
  UpgradeRewardResp::default_instance_->InitAsDefaultInstance();
  DailyRewardReq::default_instance_->InitAsDefaultInstance();
  DailRewardResp::default_instance_->InitAsDefaultInstance();
  WinStreakRewardReq::default_instance_->InitAsDefaultInstance();
  WinStreakRewardResp::default_instance_->InitAsDefaultInstance();
  UpgradeShareRewardReq::default_instance_->InitAsDefaultInstance();
  UpgradeShareRewardResp::default_instance_->InitAsDefaultInstance();
  SetFormationReq::default_instance_->InitAsDefaultInstance();
  SetFormationResp::default_instance_->InitAsDefaultInstance();
  ProtoRandomUserReq::default_instance_->InitAsDefaultInstance();
  ProtoRandomUserResp::default_instance_->InitAsDefaultInstance();
  ProtoRevengeReq::default_instance_->InitAsDefaultInstance();
  ProtoRevengeResp::default_instance_->InitAsDefaultInstance();
  ProtoRefreshReq::default_instance_->InitAsDefaultInstance();
  ProtoRefreshResp::default_instance_->InitAsDefaultInstance();
  ProtoPost::default_instance_->InitAsDefaultInstance();
  ProtoFriendBattleReq::default_instance_->InitAsDefaultInstance();
  ProtoFriendBattleResp::default_instance_->InitAsDefaultInstance();
  ProtoMartialClubBattleReq::default_instance_->InitAsDefaultInstance();
  ProtoMartialClubBattleResp::default_instance_->InitAsDefaultInstance();
  ProtoCSMartialClubBattleReq::default_instance_->InitAsDefaultInstance();
  ProtoCSBattleResultReq::default_instance_->InitAsDefaultInstance();
  ProtoCSMartialClubBattleResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBattle_2eproto {
  StaticDescriptorInitializer_ProtoBattle_2eproto() {
    protobuf_AddDesc_ProtoBattle_2eproto();
  }
} static_descriptor_initializer_ProtoBattle_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BattleCommon::kStageIdFieldNumber;
const int BattleCommon::kPropIdFieldNumber;
#endif  // !_MSC_VER

BattleCommon::BattleCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleCommon::InitAsDefaultInstance() {
}

BattleCommon::BattleCommon(const BattleCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleCommon::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleCommon::~BattleCommon() {
  SharedDtor();
}

void BattleCommon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleCommon_descriptor_;
}

const BattleCommon& BattleCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

BattleCommon* BattleCommon::default_instance_ = NULL;

BattleCommon* BattleCommon::New() const {
  return new BattleCommon;
}

void BattleCommon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0u;
  }
  propid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propId;
        break;
      }
      
      // repeated uint32 propId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_propid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_propid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stageId = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }
  
  // repeated uint32 propId = 2;
  for (int i = 0; i < this->propid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->propid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stageId = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stageid(), target);
  }
  
  // repeated uint32 propId = 2;
  for (int i = 0; i < this->propid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->propid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleCommon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageId = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }
    
  }
  // repeated uint32 propId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->propid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->propid(i));
    }
    total_size += 1 * this->propid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleCommon::MergeFrom(const BattleCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  propid_.MergeFrom(from.propid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleCommon::CopyFrom(const BattleCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleCommon::IsInitialized() const {
  
  return true;
}

void BattleCommon::Swap(BattleCommon* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    propid_.Swap(&other->propid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleCommon_descriptor_;
  metadata.reflection = BattleCommon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPveBattleReq::kCommonFieldNumber;
#endif  // !_MSC_VER

ProtoPveBattleReq::ProtoPveBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPveBattleReq::InitAsDefaultInstance() {
  common_ = const_cast< ::ProtoBattle::BattleCommon*>(&::ProtoBattle::BattleCommon::default_instance());
}

ProtoPveBattleReq::ProtoPveBattleReq(const ProtoPveBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPveBattleReq::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPveBattleReq::~ProtoPveBattleReq() {
  SharedDtor();
}

void ProtoPveBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void ProtoPveBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPveBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPveBattleReq_descriptor_;
}

const ProtoPveBattleReq& ProtoPveBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoPveBattleReq* ProtoPveBattleReq::default_instance_ = NULL;

ProtoPveBattleReq* ProtoPveBattleReq::New() const {
  return new ProtoPveBattleReq;
}

void ProtoPveBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::ProtoBattle::BattleCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPveBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBattle.BattleCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPveBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBattle.BattleCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPveBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBattle.BattleCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPveBattleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBattle.BattleCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPveBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPveBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPveBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPveBattleReq::MergeFrom(const ProtoPveBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::ProtoBattle::BattleCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPveBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPveBattleReq::CopyFrom(const ProtoPveBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPveBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoPveBattleReq::Swap(ProtoPveBattleReq* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPveBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPveBattleReq_descriptor_;
  metadata.reflection = ProtoPveBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPveBattleResp::kInfoFieldNumber;
const int ProtoPveBattleResp::kCommonsFieldNumber;
const int ProtoPveBattleResp::kHeroFieldNumber;
#endif  // !_MSC_VER

ProtoPveBattleResp::ProtoPveBattleResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPveBattleResp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemo*>(&::ProtoBattleDemo::ProtoBattleDemo::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoPveBattleResp::ProtoPveBattleResp(const ProtoPveBattleResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPveBattleResp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPveBattleResp::~ProtoPveBattleResp() {
  SharedDtor();
}

void ProtoPveBattleResp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete commons_;
  }
}

void ProtoPveBattleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPveBattleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPveBattleResp_descriptor_;
}

const ProtoPveBattleResp& ProtoPveBattleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoPveBattleResp* ProtoPveBattleResp::default_instance_ = NULL;

ProtoPveBattleResp* ProtoPveBattleResp::New() const {
  return new ProtoPveBattleResp;
}

void ProtoPveBattleResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPveBattleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero;
        break;
      }
      
      // repeated .ProtoHero.HeroBaseInfoCPP hero = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPveBattleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 3;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPveBattleResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 3;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPveBattleResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 3;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPveBattleResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPveBattleResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPveBattleResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPveBattleResp::MergeFrom(const ProtoPveBattleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ProtoBattleDemo::ProtoBattleDemo::MergeFrom(from.info());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPveBattleResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPveBattleResp::CopyFrom(const ProtoPveBattleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPveBattleResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoPveBattleResp::Swap(ProtoPveBattleResp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(commons_, other->commons_);
    hero_.Swap(&other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPveBattleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPveBattleResp_descriptor_;
  metadata.reflection = ProtoPveBattleResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoGradeBattleReq::kCommonFieldNumber;
#endif  // !_MSC_VER

ProtoGradeBattleReq::ProtoGradeBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoGradeBattleReq::InitAsDefaultInstance() {
  common_ = const_cast< ::ProtoBattle::BattleCommon*>(&::ProtoBattle::BattleCommon::default_instance());
}

ProtoGradeBattleReq::ProtoGradeBattleReq(const ProtoGradeBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoGradeBattleReq::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoGradeBattleReq::~ProtoGradeBattleReq() {
  SharedDtor();
}

void ProtoGradeBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void ProtoGradeBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoGradeBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoGradeBattleReq_descriptor_;
}

const ProtoGradeBattleReq& ProtoGradeBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoGradeBattleReq* ProtoGradeBattleReq::default_instance_ = NULL;

ProtoGradeBattleReq* ProtoGradeBattleReq::New() const {
  return new ProtoGradeBattleReq;
}

void ProtoGradeBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::ProtoBattle::BattleCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoGradeBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBattle.BattleCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoGradeBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBattle.BattleCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoGradeBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBattle.BattleCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoGradeBattleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBattle.BattleCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoGradeBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoGradeBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoGradeBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoGradeBattleReq::MergeFrom(const ProtoGradeBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::ProtoBattle::BattleCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoGradeBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoGradeBattleReq::CopyFrom(const ProtoGradeBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoGradeBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoGradeBattleReq::Swap(ProtoGradeBattleReq* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoGradeBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoGradeBattleReq_descriptor_;
  metadata.reflection = ProtoGradeBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoGradeBattleResp::kGradeFieldNumber;
const int ProtoGradeBattleResp::kScoreFieldNumber;
const int ProtoGradeBattleResp::kDailyScoreFieldNumber;
const int ProtoGradeBattleResp::kInfoFieldNumber;
const int ProtoGradeBattleResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoGradeBattleResp::ProtoGradeBattleResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoGradeBattleResp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemo*>(&::ProtoBattleDemo::ProtoBattleDemo::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoGradeBattleResp::ProtoGradeBattleResp(const ProtoGradeBattleResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoGradeBattleResp::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0u;
  score_ = 0u;
  dailyscore_ = 0u;
  info_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoGradeBattleResp::~ProtoGradeBattleResp() {
  SharedDtor();
}

void ProtoGradeBattleResp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete commons_;
  }
}

void ProtoGradeBattleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoGradeBattleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoGradeBattleResp_descriptor_;
}

const ProtoGradeBattleResp& ProtoGradeBattleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoGradeBattleResp* ProtoGradeBattleResp::default_instance_ = NULL;

ProtoGradeBattleResp* ProtoGradeBattleResp::New() const {
  return new ProtoGradeBattleResp;
}

void ProtoGradeBattleResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0u;
    score_ = 0u;
    dailyscore_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoGradeBattleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }
      
      // required uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dailyScore;
        break;
      }
      
      // required uint32 dailyScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyscore_)));
          set_has_dailyscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }
      
      // required .ProtoBattleDemo.ProtoBattleDemo info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoGradeBattleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grade(), output);
  }
  
  // required uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }
  
  // required uint32 dailyScore = 3;
  if (has_dailyscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dailyscore(), output);
  }
  
  // required .ProtoBattleDemo.ProtoBattleDemo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 5;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoGradeBattleResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grade(), target);
  }
  
  // required uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }
  
  // required uint32 dailyScore = 3;
  if (has_dailyscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dailyscore(), target);
  }
  
  // required .ProtoBattleDemo.ProtoBattleDemo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 5;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoGradeBattleResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }
    
    // required uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }
    
    // required uint32 dailyScore = 3;
    if (has_dailyscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyscore());
    }
    
    // required .ProtoBattleDemo.ProtoBattleDemo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 5;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoGradeBattleResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoGradeBattleResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoGradeBattleResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoGradeBattleResp::MergeFrom(const ProtoGradeBattleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_dailyscore()) {
      set_dailyscore(from.dailyscore());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBattleDemo::ProtoBattleDemo::MergeFrom(from.info());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoGradeBattleResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoGradeBattleResp::CopyFrom(const ProtoGradeBattleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoGradeBattleResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoGradeBattleResp::Swap(ProtoGradeBattleResp* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(score_, other->score_);
    std::swap(dailyscore_, other->dailyscore_);
    std::swap(info_, other->info_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoGradeBattleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoGradeBattleResp_descriptor_;
  metadata.reflection = ProtoGradeBattleResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProtoMatchReq::ProtoMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMatchReq::InitAsDefaultInstance() {
}

ProtoMatchReq::ProtoMatchReq(const ProtoMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMatchReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMatchReq::~ProtoMatchReq() {
  SharedDtor();
}

void ProtoMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMatchReq_descriptor_;
}

const ProtoMatchReq& ProtoMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoMatchReq* ProtoMatchReq::default_instance_ = NULL;

ProtoMatchReq* ProtoMatchReq::New() const {
  return new ProtoMatchReq;
}

void ProtoMatchReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProtoMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMatchReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMatchReq::MergeFrom(const ProtoMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMatchReq::CopyFrom(const ProtoMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMatchReq::IsInitialized() const {
  
  return true;
}

void ProtoMatchReq::Swap(ProtoMatchReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMatchReq_descriptor_;
  metadata.reflection = ProtoMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMatchResp::kFigFieldNumber;
const int ProtoMatchResp::kNameFieldNumber;
const int ProtoMatchResp::kGradeFieldNumber;
const int ProtoMatchResp::kHeroidFieldNumber;
#endif  // !_MSC_VER

ProtoMatchResp::ProtoMatchResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMatchResp::InitAsDefaultInstance() {
}

ProtoMatchResp::ProtoMatchResp(const ProtoMatchResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMatchResp::SharedCtor() {
  _cached_size_ = 0;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMatchResp::~ProtoMatchResp() {
  SharedDtor();
}

void ProtoMatchResp::SharedDtor() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    delete fig_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoMatchResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMatchResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMatchResp_descriptor_;
}

const ProtoMatchResp& ProtoMatchResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoMatchResp* ProtoMatchResp::default_instance_ = NULL;

ProtoMatchResp* ProtoMatchResp::New() const {
  return new ProtoMatchResp;
}

void ProtoMatchResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::kEmptyString) {
        fig_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    grade_ = 0u;
  }
  heroid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMatchResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fig = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fig().data(), this->fig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }
      
      // required uint32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_heroid;
        break;
      }
      
      // repeated uint32 heroid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_heroid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_heroid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMatchResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fig = 1;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fig(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required uint32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grade(), output);
  }
  
  // repeated uint32 heroid = 4;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->heroid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMatchResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fig = 1;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fig(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required uint32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grade(), target);
  }
  
  // repeated uint32 heroid = 4;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->heroid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMatchResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fig = 1;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fig());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }
    
  }
  // repeated uint32 heroid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMatchResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMatchResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMatchResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMatchResp::MergeFrom(const ProtoMatchResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMatchResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMatchResp::CopyFrom(const ProtoMatchResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMatchResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void ProtoMatchResp::Swap(ProtoMatchResp* other) {
  if (other != this) {
    std::swap(fig_, other->fig_);
    std::swap(name_, other->name_);
    std::swap(grade_, other->grade_);
    heroid_.Swap(&other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMatchResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMatchResp_descriptor_;
  metadata.reflection = ProtoMatchResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeRewardReq::kGradeFieldNumber;
#endif  // !_MSC_VER

UpgradeRewardReq::UpgradeRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeRewardReq::InitAsDefaultInstance() {
}

UpgradeRewardReq::UpgradeRewardReq(const UpgradeRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeRewardReq::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeRewardReq::~UpgradeRewardReq() {
  SharedDtor();
}

void UpgradeRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeRewardReq_descriptor_;
}

const UpgradeRewardReq& UpgradeRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

UpgradeRewardReq* UpgradeRewardReq::default_instance_ = NULL;

UpgradeRewardReq* UpgradeRewardReq::New() const {
  return new UpgradeRewardReq;
}

void UpgradeRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeRewardReq::MergeFrom(const UpgradeRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeRewardReq::CopyFrom(const UpgradeRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpgradeRewardReq::Swap(UpgradeRewardReq* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeRewardReq_descriptor_;
  metadata.reflection = UpgradeRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeRewardResp::kRewardsFieldNumber;
#endif  // !_MSC_VER

UpgradeRewardResp::UpgradeRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeRewardResp::InitAsDefaultInstance() {
  rewards_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

UpgradeRewardResp::UpgradeRewardResp(const UpgradeRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeRewardResp::SharedCtor() {
  _cached_size_ = 0;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeRewardResp::~UpgradeRewardResp() {
  SharedDtor();
}

void UpgradeRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void UpgradeRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeRewardResp_descriptor_;
}

const UpgradeRewardResp& UpgradeRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

UpgradeRewardResp* UpgradeRewardResp::default_instance_ = NULL;

UpgradeRewardResp* UpgradeRewardResp::New() const {
  return new UpgradeRewardResp;
}

void UpgradeRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP rewards = 1;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP rewards = 1;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeRewardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP rewards = 1;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeRewardResp::MergeFrom(const UpgradeRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewards()) {
      mutable_rewards()->::DataCommon::CommonItemsCPP::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeRewardResp::CopyFrom(const UpgradeRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void UpgradeRewardResp::Swap(UpgradeRewardResp* other) {
  if (other != this) {
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeRewardResp_descriptor_;
  metadata.reflection = UpgradeRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DailyRewardReq::DailyRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyRewardReq::InitAsDefaultInstance() {
}

DailyRewardReq::DailyRewardReq(const DailyRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyRewardReq::~DailyRewardReq() {
  SharedDtor();
}

void DailyRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyRewardReq_descriptor_;
}

const DailyRewardReq& DailyRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

DailyRewardReq* DailyRewardReq::default_instance_ = NULL;

DailyRewardReq* DailyRewardReq::New() const {
  return new DailyRewardReq;
}

void DailyRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DailyRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyRewardReq::MergeFrom(const DailyRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyRewardReq::CopyFrom(const DailyRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyRewardReq::IsInitialized() const {
  
  return true;
}

void DailyRewardReq::Swap(DailyRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyRewardReq_descriptor_;
  metadata.reflection = DailyRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailRewardResp::kTsFieldNumber;
const int DailRewardResp::kRewardsFieldNumber;
#endif  // !_MSC_VER

DailRewardResp::DailRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailRewardResp::InitAsDefaultInstance() {
  rewards_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

DailRewardResp::DailRewardResp(const DailRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailRewardResp::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailRewardResp::~DailRewardResp() {
  SharedDtor();
}

void DailRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void DailRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailRewardResp_descriptor_;
}

const DailRewardResp& DailRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

DailRewardResp* DailRewardResp::default_instance_ = NULL;

DailRewardResp* DailRewardResp::New() const {
  return new DailRewardResp;
}

void DailRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ts_ = 0u;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }
  
  // required .DataCommon.CommonItemsCPP rewards = 2;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }
  
  // required .DataCommon.CommonItemsCPP rewards = 2;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailRewardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }
    
    // required .DataCommon.CommonItemsCPP rewards = 2;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailRewardResp::MergeFrom(const DailRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::DataCommon::CommonItemsCPP::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailRewardResp::CopyFrom(const DailRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void DailRewardResp::Swap(DailRewardResp* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailRewardResp_descriptor_;
  metadata.reflection = DailRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WinStreakRewardReq::kCountFieldNumber;
#endif  // !_MSC_VER

WinStreakRewardReq::WinStreakRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WinStreakRewardReq::InitAsDefaultInstance() {
}

WinStreakRewardReq::WinStreakRewardReq(const WinStreakRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WinStreakRewardReq::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WinStreakRewardReq::~WinStreakRewardReq() {
  SharedDtor();
}

void WinStreakRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WinStreakRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinStreakRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WinStreakRewardReq_descriptor_;
}

const WinStreakRewardReq& WinStreakRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

WinStreakRewardReq* WinStreakRewardReq::default_instance_ = NULL;

WinStreakRewardReq* WinStreakRewardReq::New() const {
  return new WinStreakRewardReq;
}

void WinStreakRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WinStreakRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WinStreakRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WinStreakRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WinStreakRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinStreakRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WinStreakRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WinStreakRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WinStreakRewardReq::MergeFrom(const WinStreakRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WinStreakRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinStreakRewardReq::CopyFrom(const WinStreakRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinStreakRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WinStreakRewardReq::Swap(WinStreakRewardReq* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WinStreakRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WinStreakRewardReq_descriptor_;
  metadata.reflection = WinStreakRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WinStreakRewardResp::kRewardsFieldNumber;
#endif  // !_MSC_VER

WinStreakRewardResp::WinStreakRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WinStreakRewardResp::InitAsDefaultInstance() {
  rewards_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

WinStreakRewardResp::WinStreakRewardResp(const WinStreakRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WinStreakRewardResp::SharedCtor() {
  _cached_size_ = 0;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WinStreakRewardResp::~WinStreakRewardResp() {
  SharedDtor();
}

void WinStreakRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void WinStreakRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WinStreakRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WinStreakRewardResp_descriptor_;
}

const WinStreakRewardResp& WinStreakRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

WinStreakRewardResp* WinStreakRewardResp::default_instance_ = NULL;

WinStreakRewardResp* WinStreakRewardResp::New() const {
  return new WinStreakRewardResp;
}

void WinStreakRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WinStreakRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WinStreakRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP rewards = 1;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WinStreakRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP rewards = 1;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WinStreakRewardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP rewards = 1;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WinStreakRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WinStreakRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WinStreakRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WinStreakRewardResp::MergeFrom(const WinStreakRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewards()) {
      mutable_rewards()->::DataCommon::CommonItemsCPP::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WinStreakRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WinStreakRewardResp::CopyFrom(const WinStreakRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WinStreakRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void WinStreakRewardResp::Swap(WinStreakRewardResp* other) {
  if (other != this) {
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WinStreakRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WinStreakRewardResp_descriptor_;
  metadata.reflection = WinStreakRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeShareRewardReq::kGradeFieldNumber;
#endif  // !_MSC_VER

UpgradeShareRewardReq::UpgradeShareRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeShareRewardReq::InitAsDefaultInstance() {
}

UpgradeShareRewardReq::UpgradeShareRewardReq(const UpgradeShareRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeShareRewardReq::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeShareRewardReq::~UpgradeShareRewardReq() {
  SharedDtor();
}

void UpgradeShareRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeShareRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeShareRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeShareRewardReq_descriptor_;
}

const UpgradeShareRewardReq& UpgradeShareRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

UpgradeShareRewardReq* UpgradeShareRewardReq::default_instance_ = NULL;

UpgradeShareRewardReq* UpgradeShareRewardReq::New() const {
  return new UpgradeShareRewardReq;
}

void UpgradeShareRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeShareRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeShareRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->grade(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeShareRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->grade(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeShareRewardReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeShareRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeShareRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeShareRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeShareRewardReq::MergeFrom(const UpgradeShareRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeShareRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeShareRewardReq::CopyFrom(const UpgradeShareRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeShareRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpgradeShareRewardReq::Swap(UpgradeShareRewardReq* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeShareRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeShareRewardReq_descriptor_;
  metadata.reflection = UpgradeShareRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeShareRewardResp::kRewardsFieldNumber;
#endif  // !_MSC_VER

UpgradeShareRewardResp::UpgradeShareRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeShareRewardResp::InitAsDefaultInstance() {
  rewards_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

UpgradeShareRewardResp::UpgradeShareRewardResp(const UpgradeShareRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeShareRewardResp::SharedCtor() {
  _cached_size_ = 0;
  rewards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeShareRewardResp::~UpgradeShareRewardResp() {
  SharedDtor();
}

void UpgradeShareRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
  }
}

void UpgradeShareRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeShareRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeShareRewardResp_descriptor_;
}

const UpgradeShareRewardResp& UpgradeShareRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

UpgradeShareRewardResp* UpgradeShareRewardResp::default_instance_ = NULL;

UpgradeShareRewardResp* UpgradeShareRewardResp::New() const {
  return new UpgradeShareRewardResp;
}

void UpgradeShareRewardResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeShareRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeShareRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP rewards = 1;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeShareRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP rewards = 1;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeShareRewardResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP rewards = 1;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeShareRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeShareRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeShareRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeShareRewardResp::MergeFrom(const UpgradeShareRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewards()) {
      mutable_rewards()->::DataCommon::CommonItemsCPP::MergeFrom(from.rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeShareRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeShareRewardResp::CopyFrom(const UpgradeShareRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeShareRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rewards()) {
    if (!this->rewards().IsInitialized()) return false;
  }
  return true;
}

void UpgradeShareRewardResp::Swap(UpgradeShareRewardResp* other) {
  if (other != this) {
    std::swap(rewards_, other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeShareRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeShareRewardResp_descriptor_;
  metadata.reflection = UpgradeShareRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetFormationReq::kHeroidFieldNumber;
#endif  // !_MSC_VER

SetFormationReq::SetFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetFormationReq::InitAsDefaultInstance() {
}

SetFormationReq::SetFormationReq(const SetFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetFormationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetFormationReq::~SetFormationReq() {
  SharedDtor();
}

void SetFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetFormationReq_descriptor_;
}

const SetFormationReq& SetFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

SetFormationReq* SetFormationReq::default_instance_ = NULL;

SetFormationReq* SetFormationReq::New() const {
  return new SetFormationReq;
}

void SetFormationReq::Clear() {
  heroid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 heroid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_heroid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_heroid;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 heroid = 1;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->heroid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 heroid = 1;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->heroid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetFormationReq::ByteSize() const {
  int total_size = 0;
  
  // repeated uint32 heroid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetFormationReq::MergeFrom(const SetFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFormationReq::CopyFrom(const SetFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFormationReq::IsInitialized() const {
  
  return true;
}

void SetFormationReq::Swap(SetFormationReq* other) {
  if (other != this) {
    heroid_.Swap(&other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetFormationReq_descriptor_;
  metadata.reflection = SetFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetFormationResp::SetFormationResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetFormationResp::InitAsDefaultInstance() {
}

SetFormationResp::SetFormationResp(const SetFormationResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetFormationResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetFormationResp::~SetFormationResp() {
  SharedDtor();
}

void SetFormationResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetFormationResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetFormationResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetFormationResp_descriptor_;
}

const SetFormationResp& SetFormationResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

SetFormationResp* SetFormationResp::default_instance_ = NULL;

SetFormationResp* SetFormationResp::New() const {
  return new SetFormationResp;
}

void SetFormationResp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetFormationResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetFormationResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetFormationResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetFormationResp::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetFormationResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetFormationResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetFormationResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetFormationResp::MergeFrom(const SetFormationResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetFormationResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFormationResp::CopyFrom(const SetFormationResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFormationResp::IsInitialized() const {
  
  return true;
}

void SetFormationResp::Swap(SetFormationResp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetFormationResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetFormationResp_descriptor_;
  metadata.reflection = SetFormationResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRandomUserReq::kCommonFieldNumber;
#endif  // !_MSC_VER

ProtoRandomUserReq::ProtoRandomUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRandomUserReq::InitAsDefaultInstance() {
  common_ = const_cast< ::ProtoBattle::BattleCommon*>(&::ProtoBattle::BattleCommon::default_instance());
}

ProtoRandomUserReq::ProtoRandomUserReq(const ProtoRandomUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRandomUserReq::SharedCtor() {
  _cached_size_ = 0;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRandomUserReq::~ProtoRandomUserReq() {
  SharedDtor();
}

void ProtoRandomUserReq::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void ProtoRandomUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRandomUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRandomUserReq_descriptor_;
}

const ProtoRandomUserReq& ProtoRandomUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoRandomUserReq* ProtoRandomUserReq::default_instance_ = NULL;

ProtoRandomUserReq* ProtoRandomUserReq::New() const {
  return new ProtoRandomUserReq;
}

void ProtoRandomUserReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_common()) {
      if (common_ != NULL) common_->::ProtoBattle::BattleCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRandomUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBattle.BattleCommon common = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRandomUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBattle.BattleCommon common = 1;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRandomUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBattle.BattleCommon common = 1;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRandomUserReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBattle.BattleCommon common = 1;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRandomUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRandomUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRandomUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRandomUserReq::MergeFrom(const ProtoRandomUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_common()) {
      mutable_common()->::ProtoBattle::BattleCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRandomUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRandomUserReq::CopyFrom(const ProtoRandomUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRandomUserReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoRandomUserReq::Swap(ProtoRandomUserReq* other) {
  if (other != this) {
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRandomUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRandomUserReq_descriptor_;
  metadata.reflection = ProtoRandomUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRandomUserResp::kInfoFieldNumber;
const int ProtoRandomUserResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoRandomUserResp::ProtoRandomUserResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRandomUserResp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemo*>(&::ProtoBattleDemo::ProtoBattleDemo::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoRandomUserResp::ProtoRandomUserResp(const ProtoRandomUserResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRandomUserResp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRandomUserResp::~ProtoRandomUserResp() {
  SharedDtor();
}

void ProtoRandomUserResp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete commons_;
  }
}

void ProtoRandomUserResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRandomUserResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRandomUserResp_descriptor_;
}

const ProtoRandomUserResp& ProtoRandomUserResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoRandomUserResp* ProtoRandomUserResp::default_instance_ = NULL;

ProtoRandomUserResp* ProtoRandomUserResp::New() const {
  return new ProtoRandomUserResp;
}

void ProtoRandomUserResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRandomUserResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRandomUserResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRandomUserResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRandomUserResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRandomUserResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRandomUserResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRandomUserResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRandomUserResp::MergeFrom(const ProtoRandomUserResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ProtoBattleDemo::ProtoBattleDemo::MergeFrom(from.info());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRandomUserResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRandomUserResp::CopyFrom(const ProtoRandomUserResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRandomUserResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoRandomUserResp::Swap(ProtoRandomUserResp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRandomUserResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRandomUserResp_descriptor_;
  metadata.reflection = ProtoRandomUserResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRevengeReq::kEnemyIdFieldNumber;
const int ProtoRevengeReq::kCommonFieldNumber;
#endif  // !_MSC_VER

ProtoRevengeReq::ProtoRevengeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRevengeReq::InitAsDefaultInstance() {
  common_ = const_cast< ::ProtoBattle::BattleCommon*>(&::ProtoBattle::BattleCommon::default_instance());
}

ProtoRevengeReq::ProtoRevengeReq(const ProtoRevengeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRevengeReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRevengeReq::~ProtoRevengeReq() {
  SharedDtor();
}

void ProtoRevengeReq::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void ProtoRevengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRevengeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRevengeReq_descriptor_;
}

const ProtoRevengeReq& ProtoRevengeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoRevengeReq* ProtoRevengeReq::default_instance_ = NULL;

ProtoRevengeReq* ProtoRevengeReq::New() const {
  return new ProtoRevengeReq;
}

void ProtoRevengeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enemyid_ = 0u;
    if (has_common()) {
      if (common_ != NULL) common_->::ProtoBattle::BattleCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRevengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 enemyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_common;
        break;
      }
      
      // required .ProtoBattle.BattleCommon common = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRevengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 enemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }
  
  // required .ProtoBattle.BattleCommon common = 2;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRevengeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 enemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }
  
  // required .ProtoBattle.BattleCommon common = 2;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRevengeReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 enemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }
    
    // required .ProtoBattle.BattleCommon common = 2;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRevengeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRevengeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRevengeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRevengeReq::MergeFrom(const ProtoRevengeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_common()) {
      mutable_common()->::ProtoBattle::BattleCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRevengeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRevengeReq::CopyFrom(const ProtoRevengeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRevengeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProtoRevengeReq::Swap(ProtoRevengeReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRevengeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRevengeReq_descriptor_;
  metadata.reflection = ProtoRevengeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRevengeResp::kInfoFieldNumber;
const int ProtoRevengeResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoRevengeResp::ProtoRevengeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRevengeResp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemo*>(&::ProtoBattleDemo::ProtoBattleDemo::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoRevengeResp::ProtoRevengeResp(const ProtoRevengeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRevengeResp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRevengeResp::~ProtoRevengeResp() {
  SharedDtor();
}

void ProtoRevengeResp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete commons_;
  }
}

void ProtoRevengeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRevengeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRevengeResp_descriptor_;
}

const ProtoRevengeResp& ProtoRevengeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoRevengeResp* ProtoRevengeResp::default_instance_ = NULL;

ProtoRevengeResp* ProtoRevengeResp::New() const {
  return new ProtoRevengeResp;
}

void ProtoRevengeResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRevengeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRevengeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRevengeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRevengeResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRevengeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRevengeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRevengeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRevengeResp::MergeFrom(const ProtoRevengeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ProtoBattleDemo::ProtoBattleDemo::MergeFrom(from.info());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRevengeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRevengeResp::CopyFrom(const ProtoRevengeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRevengeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoRevengeResp::Swap(ProtoRevengeResp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRevengeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRevengeResp_descriptor_;
  metadata.reflection = ProtoRevengeResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProtoRefreshReq::ProtoRefreshReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRefreshReq::InitAsDefaultInstance() {
}

ProtoRefreshReq::ProtoRefreshReq(const ProtoRefreshReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRefreshReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRefreshReq::~ProtoRefreshReq() {
  SharedDtor();
}

void ProtoRefreshReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoRefreshReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRefreshReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRefreshReq_descriptor_;
}

const ProtoRefreshReq& ProtoRefreshReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoRefreshReq* ProtoRefreshReq::default_instance_ = NULL;

ProtoRefreshReq* ProtoRefreshReq::New() const {
  return new ProtoRefreshReq;
}

void ProtoRefreshReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRefreshReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProtoRefreshReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRefreshReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRefreshReq::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRefreshReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRefreshReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRefreshReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRefreshReq::MergeFrom(const ProtoRefreshReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRefreshReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRefreshReq::CopyFrom(const ProtoRefreshReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRefreshReq::IsInitialized() const {
  
  return true;
}

void ProtoRefreshReq::Swap(ProtoRefreshReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRefreshReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRefreshReq_descriptor_;
  metadata.reflection = ProtoRefreshReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoRefreshResp::kFigFieldNumber;
const int ProtoRefreshResp::kNameFieldNumber;
const int ProtoRefreshResp::kHeroFieldNumber;
#endif  // !_MSC_VER

ProtoRefreshResp::ProtoRefreshResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoRefreshResp::InitAsDefaultInstance() {
}

ProtoRefreshResp::ProtoRefreshResp(const ProtoRefreshResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoRefreshResp::SharedCtor() {
  _cached_size_ = 0;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoRefreshResp::~ProtoRefreshResp() {
  SharedDtor();
}

void ProtoRefreshResp::SharedDtor() {
  if (fig_ != &::google::protobuf::internal::kEmptyString) {
    delete fig_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProtoRefreshResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoRefreshResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoRefreshResp_descriptor_;
}

const ProtoRefreshResp& ProtoRefreshResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoRefreshResp* ProtoRefreshResp::default_instance_ = NULL;

ProtoRefreshResp* ProtoRefreshResp::New() const {
  return new ProtoRefreshResp;
}

void ProtoRefreshResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::kEmptyString) {
        fig_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoRefreshResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fig = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fig().data(), this->fig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero;
        break;
      }
      
      // repeated .ProtoHero.HeroBaseInfoCPP hero = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoRefreshResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fig = 1;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fig(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 3;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoRefreshResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fig = 1;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fig(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 3;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoRefreshResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fig = 1;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fig());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 3;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoRefreshResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoRefreshResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoRefreshResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoRefreshResp::MergeFrom(const ProtoRefreshResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoRefreshResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoRefreshResp::CopyFrom(const ProtoRefreshResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRefreshResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoRefreshResp::Swap(ProtoRefreshResp* other) {
  if (other != this) {
    std::swap(fig_, other->fig_);
    std::swap(name_, other->name_);
    hero_.Swap(&other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoRefreshResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoRefreshResp_descriptor_;
  metadata.reflection = ProtoRefreshResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoPost::kInfoFieldNumber;
#endif  // !_MSC_VER

ProtoPost::ProtoPost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoPost::InitAsDefaultInstance() {
}

ProtoPost::ProtoPost(const ProtoPost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoPost::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoPost::~ProtoPost() {
  SharedDtor();
}

void ProtoPost::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void ProtoPost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoPost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoPost_descriptor_;
}

const ProtoPost& ProtoPost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoPost* ProtoPost::default_instance_ = NULL;

ProtoPost* ProtoPost::New() const {
  return new ProtoPost;
}

void ProtoPost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoPost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoPost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoPost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoPost::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoPost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoPost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoPost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoPost::MergeFrom(const ProtoPost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoPost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoPost::CopyFrom(const ProtoPost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoPost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoPost::Swap(ProtoPost* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoPost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoPost_descriptor_;
  metadata.reflection = ProtoPost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFriendBattleReq::kOtherIdFieldNumber;
const int ProtoFriendBattleReq::kCommonFieldNumber;
#endif  // !_MSC_VER

ProtoFriendBattleReq::ProtoFriendBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFriendBattleReq::InitAsDefaultInstance() {
  common_ = const_cast< ::ProtoBattle::BattleCommon*>(&::ProtoBattle::BattleCommon::default_instance());
}

ProtoFriendBattleReq::ProtoFriendBattleReq(const ProtoFriendBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFriendBattleReq::SharedCtor() {
  _cached_size_ = 0;
  otherid_ = 0u;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFriendBattleReq::~ProtoFriendBattleReq() {
  SharedDtor();
}

void ProtoFriendBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void ProtoFriendBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFriendBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFriendBattleReq_descriptor_;
}

const ProtoFriendBattleReq& ProtoFriendBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoFriendBattleReq* ProtoFriendBattleReq::default_instance_ = NULL;

ProtoFriendBattleReq* ProtoFriendBattleReq::New() const {
  return new ProtoFriendBattleReq;
}

void ProtoFriendBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    otherid_ = 0u;
    if (has_common()) {
      if (common_ != NULL) common_->::ProtoBattle::BattleCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFriendBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 otherId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_common;
        break;
      }
      
      // required .ProtoBattle.BattleCommon common = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFriendBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 otherId = 1;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->otherid(), output);
  }
  
  // required .ProtoBattle.BattleCommon common = 2;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFriendBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 otherId = 1;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->otherid(), target);
  }
  
  // required .ProtoBattle.BattleCommon common = 2;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFriendBattleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 otherId = 1;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otherid());
    }
    
    // required .ProtoBattle.BattleCommon common = 2;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFriendBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFriendBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFriendBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFriendBattleReq::MergeFrom(const ProtoFriendBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_common()) {
      mutable_common()->::ProtoBattle::BattleCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFriendBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFriendBattleReq::CopyFrom(const ProtoFriendBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFriendBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProtoFriendBattleReq::Swap(ProtoFriendBattleReq* other) {
  if (other != this) {
    std::swap(otherid_, other->otherid_);
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFriendBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFriendBattleReq_descriptor_;
  metadata.reflection = ProtoFriendBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoFriendBattleResp::kInfoFieldNumber;
const int ProtoFriendBattleResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoFriendBattleResp::ProtoFriendBattleResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoFriendBattleResp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemo*>(&::ProtoBattleDemo::ProtoBattleDemo::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoFriendBattleResp::ProtoFriendBattleResp(const ProtoFriendBattleResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoFriendBattleResp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoFriendBattleResp::~ProtoFriendBattleResp() {
  SharedDtor();
}

void ProtoFriendBattleResp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete commons_;
  }
}

void ProtoFriendBattleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoFriendBattleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoFriendBattleResp_descriptor_;
}

const ProtoFriendBattleResp& ProtoFriendBattleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoFriendBattleResp* ProtoFriendBattleResp::default_instance_ = NULL;

ProtoFriendBattleResp* ProtoFriendBattleResp::New() const {
  return new ProtoFriendBattleResp;
}

void ProtoFriendBattleResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoFriendBattleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoFriendBattleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoFriendBattleResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoFriendBattleResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoFriendBattleResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoFriendBattleResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoFriendBattleResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoFriendBattleResp::MergeFrom(const ProtoFriendBattleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ProtoBattleDemo::ProtoBattleDemo::MergeFrom(from.info());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoFriendBattleResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoFriendBattleResp::CopyFrom(const ProtoFriendBattleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoFriendBattleResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoFriendBattleResp::Swap(ProtoFriendBattleResp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoFriendBattleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoFriendBattleResp_descriptor_;
  metadata.reflection = ProtoFriendBattleResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMartialClubBattleReq::kMyMartialGradeFieldNumber;
const int ProtoMartialClubBattleReq::kOthUidFieldNumber;
const int ProtoMartialClubBattleReq::kOthMartialGradeFieldNumber;
const int ProtoMartialClubBattleReq::kCommonFieldNumber;
#endif  // !_MSC_VER

ProtoMartialClubBattleReq::ProtoMartialClubBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMartialClubBattleReq::InitAsDefaultInstance() {
  common_ = const_cast< ::ProtoBattle::BattleCommon*>(&::ProtoBattle::BattleCommon::default_instance());
}

ProtoMartialClubBattleReq::ProtoMartialClubBattleReq(const ProtoMartialClubBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMartialClubBattleReq::SharedCtor() {
  _cached_size_ = 0;
  mymartialgrade_ = 0u;
  othuid_ = 0u;
  othmartialgrade_ = 0u;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMartialClubBattleReq::~ProtoMartialClubBattleReq() {
  SharedDtor();
}

void ProtoMartialClubBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete common_;
  }
}

void ProtoMartialClubBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMartialClubBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMartialClubBattleReq_descriptor_;
}

const ProtoMartialClubBattleReq& ProtoMartialClubBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoMartialClubBattleReq* ProtoMartialClubBattleReq::default_instance_ = NULL;

ProtoMartialClubBattleReq* ProtoMartialClubBattleReq::New() const {
  return new ProtoMartialClubBattleReq;
}

void ProtoMartialClubBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mymartialgrade_ = 0u;
    othuid_ = 0u;
    othmartialgrade_ = 0u;
    if (has_common()) {
      if (common_ != NULL) common_->::ProtoBattle::BattleCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMartialClubBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myMartialGrade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mymartialgrade_)));
          set_has_mymartialgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_othUid;
        break;
      }
      
      // required uint32 othUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_othUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_othMartialGrade;
        break;
      }
      
      // required uint32 othMartialGrade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_othMartialGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othmartialgrade_)));
          set_has_othmartialgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_common;
        break;
      }
      
      // required .ProtoBattle.BattleCommon common = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMartialClubBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 myMartialGrade = 1;
  if (has_mymartialgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mymartialgrade(), output);
  }
  
  // required uint32 othUid = 2;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othuid(), output);
  }
  
  // required uint32 othMartialGrade = 3;
  if (has_othmartialgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->othmartialgrade(), output);
  }
  
  // required .ProtoBattle.BattleCommon common = 4;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->common(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMartialClubBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 myMartialGrade = 1;
  if (has_mymartialgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mymartialgrade(), target);
  }
  
  // required uint32 othUid = 2;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othuid(), target);
  }
  
  // required uint32 othMartialGrade = 3;
  if (has_othmartialgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->othmartialgrade(), target);
  }
  
  // required .ProtoBattle.BattleCommon common = 4;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->common(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMartialClubBattleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myMartialGrade = 1;
    if (has_mymartialgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mymartialgrade());
    }
    
    // required uint32 othUid = 2;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }
    
    // required uint32 othMartialGrade = 3;
    if (has_othmartialgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othmartialgrade());
    }
    
    // required .ProtoBattle.BattleCommon common = 4;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMartialClubBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMartialClubBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMartialClubBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMartialClubBattleReq::MergeFrom(const ProtoMartialClubBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mymartialgrade()) {
      set_mymartialgrade(from.mymartialgrade());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_othmartialgrade()) {
      set_othmartialgrade(from.othmartialgrade());
    }
    if (from.has_common()) {
      mutable_common()->::ProtoBattle::BattleCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMartialClubBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMartialClubBattleReq::CopyFrom(const ProtoMartialClubBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMartialClubBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ProtoMartialClubBattleReq::Swap(ProtoMartialClubBattleReq* other) {
  if (other != this) {
    std::swap(mymartialgrade_, other->mymartialgrade_);
    std::swap(othuid_, other->othuid_);
    std::swap(othmartialgrade_, other->othmartialgrade_);
    std::swap(common_, other->common_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMartialClubBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMartialClubBattleReq_descriptor_;
  metadata.reflection = ProtoMartialClubBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoMartialClubBattleResp::kInfoFieldNumber;
const int ProtoMartialClubBattleResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ProtoMartialClubBattleResp::ProtoMartialClubBattleResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoMartialClubBattleResp::InitAsDefaultInstance() {
  info_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemo*>(&::ProtoBattleDemo::ProtoBattleDemo::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ProtoMartialClubBattleResp::ProtoMartialClubBattleResp(const ProtoMartialClubBattleResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoMartialClubBattleResp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoMartialClubBattleResp::~ProtoMartialClubBattleResp() {
  SharedDtor();
}

void ProtoMartialClubBattleResp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete commons_;
  }
}

void ProtoMartialClubBattleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoMartialClubBattleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoMartialClubBattleResp_descriptor_;
}

const ProtoMartialClubBattleResp& ProtoMartialClubBattleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoMartialClubBattleResp* ProtoMartialClubBattleResp::default_instance_ = NULL;

ProtoMartialClubBattleResp* ProtoMartialClubBattleResp::New() const {
  return new ProtoMartialClubBattleResp;
}

void ProtoMartialClubBattleResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoMartialClubBattleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoMartialClubBattleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoMartialClubBattleResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoMartialClubBattleResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBattleDemo.ProtoBattleDemo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoMartialClubBattleResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoMartialClubBattleResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoMartialClubBattleResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoMartialClubBattleResp::MergeFrom(const ProtoMartialClubBattleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::ProtoBattleDemo::ProtoBattleDemo::MergeFrom(from.info());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoMartialClubBattleResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoMartialClubBattleResp::CopyFrom(const ProtoMartialClubBattleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoMartialClubBattleResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ProtoMartialClubBattleResp::Swap(ProtoMartialClubBattleResp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoMartialClubBattleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoMartialClubBattleResp_descriptor_;
  metadata.reflection = ProtoMartialClubBattleResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCSMartialClubBattleReq::kMyUidFieldNumber;
const int ProtoCSMartialClubBattleReq::kLevelFieldNumber;
const int ProtoCSMartialClubBattleReq::kMyNameFieldNumber;
const int ProtoCSMartialClubBattleReq::kMyFigFieldNumber;
const int ProtoCSMartialClubBattleReq::kMyMartialGradeFieldNumber;
const int ProtoCSMartialClubBattleReq::kOthUidFieldNumber;
const int ProtoCSMartialClubBattleReq::kOthMartialGradeFieldNumber;
const int ProtoCSMartialClubBattleReq::kCommonFieldNumber;
const int ProtoCSMartialClubBattleReq::kHeroFieldNumber;
#endif  // !_MSC_VER

ProtoCSMartialClubBattleReq::ProtoCSMartialClubBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCSMartialClubBattleReq::InitAsDefaultInstance() {
  common_ = const_cast< ::ProtoBattle::BattleCommon*>(&::ProtoBattle::BattleCommon::default_instance());
}

ProtoCSMartialClubBattleReq::ProtoCSMartialClubBattleReq(const ProtoCSMartialClubBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCSMartialClubBattleReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  level_ = 0u;
  myname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  myfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mymartialgrade_ = 0u;
  othuid_ = 0u;
  othmartialgrade_ = 0u;
  common_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCSMartialClubBattleReq::~ProtoCSMartialClubBattleReq() {
  SharedDtor();
}

void ProtoCSMartialClubBattleReq::SharedDtor() {
  if (myname_ != &::google::protobuf::internal::kEmptyString) {
    delete myname_;
  }
  if (myfig_ != &::google::protobuf::internal::kEmptyString) {
    delete myfig_;
  }
  if (this != default_instance_) {
    delete common_;
  }
}

void ProtoCSMartialClubBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCSMartialClubBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCSMartialClubBattleReq_descriptor_;
}

const ProtoCSMartialClubBattleReq& ProtoCSMartialClubBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoCSMartialClubBattleReq* ProtoCSMartialClubBattleReq::default_instance_ = NULL;

ProtoCSMartialClubBattleReq* ProtoCSMartialClubBattleReq::New() const {
  return new ProtoCSMartialClubBattleReq;
}

void ProtoCSMartialClubBattleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    myuid_ = 0u;
    level_ = 0u;
    if (has_myname()) {
      if (myname_ != &::google::protobuf::internal::kEmptyString) {
        myname_->clear();
      }
    }
    if (has_myfig()) {
      if (myfig_ != &::google::protobuf::internal::kEmptyString) {
        myfig_->clear();
      }
    }
    mymartialgrade_ = 0u;
    othuid_ = 0u;
    othmartialgrade_ = 0u;
    if (has_common()) {
      if (common_ != NULL) common_->::ProtoBattle::BattleCommon::Clear();
    }
  }
  hero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCSMartialClubBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_myName;
        break;
      }
      
      // required string myName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->myname().data(), this->myname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_myFig;
        break;
      }
      
      // required string myFig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myFig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myfig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->myfig().data(), this->myfig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_myMartialGrade;
        break;
      }
      
      // required uint32 myMartialGrade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myMartialGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mymartialgrade_)));
          set_has_mymartialgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_othUid;
        break;
      }
      
      // required uint32 othUid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_othUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othuid_)));
          set_has_othuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_othMartialGrade;
        break;
      }
      
      // required uint32 othMartialGrade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_othMartialGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othmartialgrade_)));
          set_has_othmartialgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_common;
        break;
      }
      
      // required .ProtoBattle.BattleCommon common = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_common:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_common()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_hero;
        break;
      }
      
      // repeated .ProtoHero.HeroBaseInfoCPP hero = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_hero;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCSMartialClubBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 myUid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }
  
  // required string myName = 3;
  if (has_myname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myname().data(), this->myname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->myname(), output);
  }
  
  // required string myFig = 4;
  if (has_myfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myfig().data(), this->myfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->myfig(), output);
  }
  
  // required uint32 myMartialGrade = 5;
  if (has_mymartialgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mymartialgrade(), output);
  }
  
  // required uint32 othUid = 6;
  if (has_othuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->othuid(), output);
  }
  
  // required uint32 othMartialGrade = 7;
  if (has_othmartialgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->othmartialgrade(), output);
  }
  
  // required .ProtoBattle.BattleCommon common = 8;
  if (has_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->common(), output);
  }
  
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 9;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->hero(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCSMartialClubBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 myUid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }
  
  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }
  
  // required string myName = 3;
  if (has_myname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myname().data(), this->myname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->myname(), target);
  }
  
  // required string myFig = 4;
  if (has_myfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myfig().data(), this->myfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->myfig(), target);
  }
  
  // required uint32 myMartialGrade = 5;
  if (has_mymartialgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mymartialgrade(), target);
  }
  
  // required uint32 othUid = 6;
  if (has_othuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->othuid(), target);
  }
  
  // required uint32 othMartialGrade = 7;
  if (has_othmartialgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->othmartialgrade(), target);
  }
  
  // required .ProtoBattle.BattleCommon common = 8;
  if (has_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->common(), target);
  }
  
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 9;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->hero(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCSMartialClubBattleReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myUid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }
    
    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required string myName = 3;
    if (has_myname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myname());
    }
    
    // required string myFig = 4;
    if (has_myfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myfig());
    }
    
    // required uint32 myMartialGrade = 5;
    if (has_mymartialgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mymartialgrade());
    }
    
    // required uint32 othUid = 6;
    if (has_othuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othuid());
    }
    
    // required uint32 othMartialGrade = 7;
    if (has_othmartialgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othmartialgrade());
    }
    
    // required .ProtoBattle.BattleCommon common = 8;
    if (has_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->common());
    }
    
  }
  // repeated .ProtoHero.HeroBaseInfoCPP hero = 9;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCSMartialClubBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCSMartialClubBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCSMartialClubBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCSMartialClubBattleReq::MergeFrom(const ProtoCSMartialClubBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_myname()) {
      set_myname(from.myname());
    }
    if (from.has_myfig()) {
      set_myfig(from.myfig());
    }
    if (from.has_mymartialgrade()) {
      set_mymartialgrade(from.mymartialgrade());
    }
    if (from.has_othuid()) {
      set_othuid(from.othuid());
    }
    if (from.has_othmartialgrade()) {
      set_othmartialgrade(from.othmartialgrade());
    }
    if (from.has_common()) {
      mutable_common()->::ProtoBattle::BattleCommon::MergeFrom(from.common());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCSMartialClubBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCSMartialClubBattleReq::CopyFrom(const ProtoCSMartialClubBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCSMartialClubBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoCSMartialClubBattleReq::Swap(ProtoCSMartialClubBattleReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(level_, other->level_);
    std::swap(myname_, other->myname_);
    std::swap(myfig_, other->myfig_);
    std::swap(mymartialgrade_, other->mymartialgrade_);
    std::swap(othuid_, other->othuid_);
    std::swap(othmartialgrade_, other->othmartialgrade_);
    std::swap(common_, other->common_);
    hero_.Swap(&other->hero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCSMartialClubBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCSMartialClubBattleReq_descriptor_;
  metadata.reflection = ProtoCSMartialClubBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCSBattleResultReq::kMyUidFieldNumber;
const int ProtoCSBattleResultReq::kMyMartialGradeFieldNumber;
const int ProtoCSBattleResultReq::kCommonsFieldNumber;
const int ProtoCSBattleResultReq::kInfoFieldNumber;
#endif  // !_MSC_VER

ProtoCSBattleResultReq::ProtoCSBattleResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCSBattleResultReq::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  info_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemo*>(&::ProtoBattleDemo::ProtoBattleDemo::default_instance());
}

ProtoCSBattleResultReq::ProtoCSBattleResultReq(const ProtoCSBattleResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCSBattleResultReq::SharedCtor() {
  _cached_size_ = 0;
  myuid_ = 0u;
  mymartialgrade_ = 0u;
  commons_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCSBattleResultReq::~ProtoCSBattleResultReq() {
  SharedDtor();
}

void ProtoCSBattleResultReq::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete info_;
  }
}

void ProtoCSBattleResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCSBattleResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCSBattleResultReq_descriptor_;
}

const ProtoCSBattleResultReq& ProtoCSBattleResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoCSBattleResultReq* ProtoCSBattleResultReq::default_instance_ = NULL;

ProtoCSBattleResultReq* ProtoCSBattleResultReq::New() const {
  return new ProtoCSBattleResultReq;
}

void ProtoCSBattleResultReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    myuid_ = 0u;
    mymartialgrade_ = 0u;
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCSBattleResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 myUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myuid_)));
          set_has_myuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myMartialGrade;
        break;
      }
      
      // required uint32 myMartialGrade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myMartialGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mymartialgrade_)));
          set_has_mymartialgrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }
      
      // required .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }
      
      // required .ProtoBattleDemo.ProtoBattleDemo info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCSBattleResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 myUid = 1;
  if (has_myuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myuid(), output);
  }
  
  // required uint32 myMartialGrade = 2;
  if (has_mymartialgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mymartialgrade(), output);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }
  
  // required .ProtoBattleDemo.ProtoBattleDemo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCSBattleResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 myUid = 1;
  if (has_myuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myuid(), target);
  }
  
  // required uint32 myMartialGrade = 2;
  if (has_mymartialgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mymartialgrade(), target);
  }
  
  // required .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }
  
  // required .ProtoBattleDemo.ProtoBattleDemo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCSBattleResultReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 myUid = 1;
    if (has_myuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myuid());
    }
    
    // required uint32 myMartialGrade = 2;
    if (has_mymartialgrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mymartialgrade());
    }
    
    // required .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
    // required .ProtoBattleDemo.ProtoBattleDemo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCSBattleResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCSBattleResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCSBattleResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCSBattleResultReq::MergeFrom(const ProtoCSBattleResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myuid()) {
      set_myuid(from.myuid());
    }
    if (from.has_mymartialgrade()) {
      set_mymartialgrade(from.mymartialgrade());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBattleDemo::ProtoBattleDemo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCSBattleResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCSBattleResultReq::CopyFrom(const ProtoCSBattleResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCSBattleResultReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ProtoCSBattleResultReq::Swap(ProtoCSBattleResultReq* other) {
  if (other != this) {
    std::swap(myuid_, other->myuid_);
    std::swap(mymartialgrade_, other->mymartialgrade_);
    std::swap(commons_, other->commons_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCSBattleResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCSBattleResultReq_descriptor_;
  metadata.reflection = ProtoCSBattleResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoCSMartialClubBattleResp::kCommonsFieldNumber;
const int ProtoCSMartialClubBattleResp::kInfoFieldNumber;
#endif  // !_MSC_VER

ProtoCSMartialClubBattleResp::ProtoCSMartialClubBattleResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoCSMartialClubBattleResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  info_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemo*>(&::ProtoBattleDemo::ProtoBattleDemo::default_instance());
}

ProtoCSMartialClubBattleResp::ProtoCSMartialClubBattleResp(const ProtoCSMartialClubBattleResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoCSMartialClubBattleResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoCSMartialClubBattleResp::~ProtoCSMartialClubBattleResp() {
  SharedDtor();
}

void ProtoCSMartialClubBattleResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
    delete info_;
  }
}

void ProtoCSMartialClubBattleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoCSMartialClubBattleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoCSMartialClubBattleResp_descriptor_;
}

const ProtoCSMartialClubBattleResp& ProtoCSMartialClubBattleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattle_2eproto();  return *default_instance_;
}

ProtoCSMartialClubBattleResp* ProtoCSMartialClubBattleResp::default_instance_ = NULL;

ProtoCSMartialClubBattleResp* ProtoCSMartialClubBattleResp::New() const {
  return new ProtoCSMartialClubBattleResp;
}

void ProtoCSMartialClubBattleResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::ProtoBattleDemo::ProtoBattleDemo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoCSMartialClubBattleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // required .ProtoBattleDemo.ProtoBattleDemo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoCSMartialClubBattleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }
  
  // required .ProtoBattleDemo.ProtoBattleDemo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoCSMartialClubBattleResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }
  
  // required .ProtoBattleDemo.ProtoBattleDemo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoCSMartialClubBattleResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }
    
    // required .ProtoBattleDemo.ProtoBattleDemo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoCSMartialClubBattleResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoCSMartialClubBattleResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoCSMartialClubBattleResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoCSMartialClubBattleResp::MergeFrom(const ProtoCSMartialClubBattleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_info()) {
      mutable_info()->::ProtoBattleDemo::ProtoBattleDemo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoCSMartialClubBattleResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoCSMartialClubBattleResp::CopyFrom(const ProtoCSMartialClubBattleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoCSMartialClubBattleResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ProtoCSMartialClubBattleResp::Swap(ProtoCSMartialClubBattleResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoCSMartialClubBattleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoCSMartialClubBattleResp_descriptor_;
  metadata.reflection = ProtoCSMartialClubBattleResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBattle

// @@protoc_insertion_point(global_scope)
