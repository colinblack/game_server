// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBattleDemo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBattleDemo {

namespace {

const ::google::protobuf::Descriptor* ProtoBattleDemoHeroSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleDemoHeroSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleDemoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleDemoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleDemoHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleDemoHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleDemoTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleDemoTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleDemoTurn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleDemoTurn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleDemoTurnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleDemoTurnInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoBattleDemo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoBattleDemo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBattleDemo_2eproto() {
  protobuf_AddDesc_ProtoBattleDemo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBattleDemo.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoBattleDemoHeroSkill_descriptor_ = file->message_type(0);
  static const int ProtoBattleDemoHeroSkill_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHeroSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHeroSkill, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHeroSkill, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHeroSkill, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHeroSkill, pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHeroSkill, pa_),
  };
  ProtoBattleDemoHeroSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleDemoHeroSkill_descriptor_,
      ProtoBattleDemoHeroSkill::default_instance_,
      ProtoBattleDemoHeroSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHeroSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHeroSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleDemoHeroSkill));
  ProtoBattleDemoItem_descriptor_ = file->message_type(1);
  static const int ProtoBattleDemoItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoItem, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoItem, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoItem, turn_),
  };
  ProtoBattleDemoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleDemoItem_descriptor_,
      ProtoBattleDemoItem::default_instance_,
      ProtoBattleDemoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleDemoItem));
  ProtoBattleDemoHero_descriptor_ = file->message_type(2);
  static const int ProtoBattleDemoHero_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, att_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, acrit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, adodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, critt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, skill_),
  };
  ProtoBattleDemoHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleDemoHero_descriptor_,
      ProtoBattleDemoHero::default_instance_,
      ProtoBattleDemoHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleDemoHero));
  ProtoBattleDemoTeam_descriptor_ = file->message_type(3);
  static const int ProtoBattleDemoTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTeam, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTeam, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTeam, level_),
  };
  ProtoBattleDemoTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleDemoTeam_descriptor_,
      ProtoBattleDemoTeam::default_instance_,
      ProtoBattleDemoTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleDemoTeam));
  ProtoBattleDemoTurn_descriptor_ = file->message_type(4);
  static const int ProtoBattleDemoTurn_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurn, skillindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurn, itemindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurn, skilldam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurn, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurn, extradam_),
  };
  ProtoBattleDemoTurn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleDemoTurn_descriptor_,
      ProtoBattleDemoTurn::default_instance_,
      ProtoBattleDemoTurn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleDemoTurn));
  ProtoBattleDemoTurnInfo_descriptor_ = file->message_type(5);
  static const int ProtoBattleDemoTurnInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurnInfo, ahp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurnInfo, ap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurnInfo, dhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurnInfo, dp_),
  };
  ProtoBattleDemoTurnInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleDemoTurnInfo_descriptor_,
      ProtoBattleDemoTurnInfo::default_instance_,
      ProtoBattleDemoTurnInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurnInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemoTurnInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleDemoTurnInfo));
  ProtoBattleDemo_descriptor_ = file->message_type(6);
  static const int ProtoBattleDemo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemo, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemo, defender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemo, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemo, attackerwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemo, turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemo, info_),
  };
  ProtoBattleDemo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtoBattleDemo_descriptor_,
      ProtoBattleDemo::default_instance_,
      ProtoBattleDemo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoBattleDemo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtoBattleDemo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBattleDemo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleDemoHeroSkill_descriptor_, &ProtoBattleDemoHeroSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleDemoItem_descriptor_, &ProtoBattleDemoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleDemoHero_descriptor_, &ProtoBattleDemoHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleDemoTeam_descriptor_, &ProtoBattleDemoTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleDemoTurn_descriptor_, &ProtoBattleDemoTurn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleDemoTurnInfo_descriptor_, &ProtoBattleDemoTurnInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtoBattleDemo_descriptor_, &ProtoBattleDemo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBattleDemo_2eproto() {
  delete ProtoBattleDemoHeroSkill::default_instance_;
  delete ProtoBattleDemoHeroSkill_reflection_;
  delete ProtoBattleDemoItem::default_instance_;
  delete ProtoBattleDemoItem_reflection_;
  delete ProtoBattleDemoHero::default_instance_;
  delete ProtoBattleDemoHero_reflection_;
  delete ProtoBattleDemoTeam::default_instance_;
  delete ProtoBattleDemoTeam_reflection_;
  delete ProtoBattleDemoTurn::default_instance_;
  delete ProtoBattleDemoTurn_reflection_;
  delete ProtoBattleDemoTurnInfo::default_instance_;
  delete ProtoBattleDemoTurnInfo_reflection_;
  delete ProtoBattleDemo::default_instance_;
  delete ProtoBattleDemo_reflection_;
}

void protobuf_AddDesc_ProtoBattleDemo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ProtoBattleDemo.proto\022\017ProtoBattleDemo"
    "\"b\n\030ProtoBattleDemoHeroSkill\022\n\n\002id\030\001 \002(\r"
    "\022\014\n\004type\030\002 \001(\r\022\t\n\001s\030\003 \001(\001\022\t\n\001c\030\004 \001(\005\022\n\n\002"
    "pc\030\005 \001(\r\022\n\n\002pa\030\006 \001(\r\"S\n\023ProtoBattleDemoI"
    "tem\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 \001(\r\022\t\n\001s\030\003 \001(\001"
    "\022\t\n\001c\030\004 \001(\005\022\014\n\004turn\030\005 \001(\r\"\360\001\n\023ProtoBattl"
    "eDemoHero\022\n\n\002id\030\001 \002(\r\022\n\n\002hp\030\002 \001(\r\022\013\n\003att"
    "\030\003 \001(\r\022\013\n\003def\030\004 \001(\r\022\014\n\004crit\030\005 \001(\r\022\r\n\005acr"
    "it\030\006 \001(\r\022\r\n\005dodge\030\007 \001(\r\022\016\n\006adodge\030\010 \001(\r\022"
    "\r\n\005critt\030\t \001(\001\022\r\n\005speed\030\n \001(\r\022\023\n\013battleP"
    "ower\030\013 \001(\r\0228\n\005skill\030\014 \003(\0132).ProtoBattleD"
    "emo.ProtoBattleDemoHeroSkill\"\214\001\n\023ProtoBa"
    "ttleDemoTeam\0222\n\004hero\030\001 \003(\0132$.ProtoBattle"
    "Demo.ProtoBattleDemoHero\0222\n\004item\030\002 \003(\0132$"
    ".ProtoBattleDemo.ProtoBattleDemoItem\022\r\n\005"
    "level\030\003 \002(\r\"n\n\023ProtoBattleDemoTurn\022\022\n\nsk"
    "illindex\030\001 \002(\r\022\021\n\titemindex\030\002 \002(\r\022\020\n\010ski"
    "lldam\030\003 \001(\r\022\014\n\004crit\030\004 \001(\010\022\020\n\010extradam\030\005 "
    "\001(\r\"K\n\027ProtoBattleDemoTurnInfo\022\013\n\003ahp\030\001 "
    "\002(\005\022\n\n\002ap\030\002 \002(\r\022\013\n\003dhp\030\003 \002(\005\022\n\n\002dp\030\004 \002(\r"
    "\"\221\002\n\017ProtoBattleDemo\0226\n\010attacker\030\001 \002(\0132$"
    ".ProtoBattleDemo.ProtoBattleDemoTeam\0226\n\010"
    "defender\030\002 \002(\0132$.ProtoBattleDemo.ProtoBa"
    "ttleDemoTeam\022\r\n\005first\030\003 \001(\r\022\023\n\013attackerW"
    "in\030\004 \001(\010\0222\n\004turn\030\005 \003(\0132$.ProtoBattleDemo"
    ".ProtoBattleDemoTurn\0226\n\004info\030\006 \003(\0132(.Pro"
    "toBattleDemo.ProtoBattleDemoTurnInfo", 1076);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBattleDemo.proto", &protobuf_RegisterTypes);
  ProtoBattleDemoHeroSkill::default_instance_ = new ProtoBattleDemoHeroSkill();
  ProtoBattleDemoItem::default_instance_ = new ProtoBattleDemoItem();
  ProtoBattleDemoHero::default_instance_ = new ProtoBattleDemoHero();
  ProtoBattleDemoTeam::default_instance_ = new ProtoBattleDemoTeam();
  ProtoBattleDemoTurn::default_instance_ = new ProtoBattleDemoTurn();
  ProtoBattleDemoTurnInfo::default_instance_ = new ProtoBattleDemoTurnInfo();
  ProtoBattleDemo::default_instance_ = new ProtoBattleDemo();
  ProtoBattleDemoHeroSkill::default_instance_->InitAsDefaultInstance();
  ProtoBattleDemoItem::default_instance_->InitAsDefaultInstance();
  ProtoBattleDemoHero::default_instance_->InitAsDefaultInstance();
  ProtoBattleDemoTeam::default_instance_->InitAsDefaultInstance();
  ProtoBattleDemoTurn::default_instance_->InitAsDefaultInstance();
  ProtoBattleDemoTurnInfo::default_instance_->InitAsDefaultInstance();
  ProtoBattleDemo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBattleDemo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBattleDemo_2eproto {
  StaticDescriptorInitializer_ProtoBattleDemo_2eproto() {
    protobuf_AddDesc_ProtoBattleDemo_2eproto();
  }
} static_descriptor_initializer_ProtoBattleDemo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleDemoHeroSkill::kIdFieldNumber;
const int ProtoBattleDemoHeroSkill::kTypeFieldNumber;
const int ProtoBattleDemoHeroSkill::kSFieldNumber;
const int ProtoBattleDemoHeroSkill::kCFieldNumber;
const int ProtoBattleDemoHeroSkill::kPcFieldNumber;
const int ProtoBattleDemoHeroSkill::kPaFieldNumber;
#endif  // !_MSC_VER

ProtoBattleDemoHeroSkill::ProtoBattleDemoHeroSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleDemoHeroSkill::InitAsDefaultInstance() {
}

ProtoBattleDemoHeroSkill::ProtoBattleDemoHeroSkill(const ProtoBattleDemoHeroSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleDemoHeroSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  s_ = 0;
  c_ = 0;
  pc_ = 0u;
  pa_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleDemoHeroSkill::~ProtoBattleDemoHeroSkill() {
  SharedDtor();
}

void ProtoBattleDemoHeroSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleDemoHeroSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleDemoHeroSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleDemoHeroSkill_descriptor_;
}

const ProtoBattleDemoHeroSkill& ProtoBattleDemoHeroSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleDemo_2eproto();  return *default_instance_;
}

ProtoBattleDemoHeroSkill* ProtoBattleDemoHeroSkill::default_instance_ = NULL;

ProtoBattleDemoHeroSkill* ProtoBattleDemoHeroSkill::New() const {
  return new ProtoBattleDemoHeroSkill;
}

void ProtoBattleDemoHeroSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    s_ = 0;
    c_ = 0;
    pc_ = 0u;
    pa_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleDemoHeroSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_s;
        break;
      }
      
      // optional double s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_c;
        break;
      }
      
      // optional int32 c = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pc;
        break;
      }
      
      // optional uint32 pc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pc_)));
          set_has_pc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pa;
        break;
      }
      
      // optional uint32 pa = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pa_)));
          set_has_pa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleDemoHeroSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional double s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->s(), output);
  }
  
  // optional int32 c = 4;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->c(), output);
  }
  
  // optional uint32 pc = 5;
  if (has_pc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pc(), output);
  }
  
  // optional uint32 pa = 6;
  if (has_pa()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pa(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleDemoHeroSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional double s = 3;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->s(), target);
  }
  
  // optional int32 c = 4;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->c(), target);
  }
  
  // optional uint32 pc = 5;
  if (has_pc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pc(), target);
  }
  
  // optional uint32 pa = 6;
  if (has_pa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pa(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleDemoHeroSkill::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional double s = 3;
    if (has_s()) {
      total_size += 1 + 8;
    }
    
    // optional int32 c = 4;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c());
    }
    
    // optional uint32 pc = 5;
    if (has_pc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pc());
    }
    
    // optional uint32 pa = 6;
    if (has_pa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pa());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleDemoHeroSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleDemoHeroSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleDemoHeroSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleDemoHeroSkill::MergeFrom(const ProtoBattleDemoHeroSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_pc()) {
      set_pc(from.pc());
    }
    if (from.has_pa()) {
      set_pa(from.pa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleDemoHeroSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleDemoHeroSkill::CopyFrom(const ProtoBattleDemoHeroSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleDemoHeroSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoBattleDemoHeroSkill::Swap(ProtoBattleDemoHeroSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(s_, other->s_);
    std::swap(c_, other->c_);
    std::swap(pc_, other->pc_);
    std::swap(pa_, other->pa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleDemoHeroSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleDemoHeroSkill_descriptor_;
  metadata.reflection = ProtoBattleDemoHeroSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleDemoItem::kIdFieldNumber;
const int ProtoBattleDemoItem::kTypeFieldNumber;
const int ProtoBattleDemoItem::kSFieldNumber;
const int ProtoBattleDemoItem::kCFieldNumber;
const int ProtoBattleDemoItem::kTurnFieldNumber;
#endif  // !_MSC_VER

ProtoBattleDemoItem::ProtoBattleDemoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleDemoItem::InitAsDefaultInstance() {
}

ProtoBattleDemoItem::ProtoBattleDemoItem(const ProtoBattleDemoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleDemoItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  s_ = 0;
  c_ = 0;
  turn_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleDemoItem::~ProtoBattleDemoItem() {
  SharedDtor();
}

void ProtoBattleDemoItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleDemoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleDemoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleDemoItem_descriptor_;
}

const ProtoBattleDemoItem& ProtoBattleDemoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleDemo_2eproto();  return *default_instance_;
}

ProtoBattleDemoItem* ProtoBattleDemoItem::default_instance_ = NULL;

ProtoBattleDemoItem* ProtoBattleDemoItem::New() const {
  return new ProtoBattleDemoItem;
}

void ProtoBattleDemoItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    s_ = 0;
    c_ = 0;
    turn_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleDemoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_s;
        break;
      }
      
      // optional double s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
          set_has_s();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_c;
        break;
      }
      
      // optional int32 c = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_turn;
        break;
      }
      
      // optional uint32 turn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_)));
          set_has_turn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleDemoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional double s = 3;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->s(), output);
  }
  
  // optional int32 c = 4;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->c(), output);
  }
  
  // optional uint32 turn = 5;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->turn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleDemoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional double s = 3;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->s(), target);
  }
  
  // optional int32 c = 4;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->c(), target);
  }
  
  // optional uint32 turn = 5;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->turn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleDemoItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional double s = 3;
    if (has_s()) {
      total_size += 1 + 8;
    }
    
    // optional int32 c = 4;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c());
    }
    
    // optional uint32 turn = 5;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleDemoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleDemoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleDemoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleDemoItem::MergeFrom(const ProtoBattleDemoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_turn()) {
      set_turn(from.turn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleDemoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleDemoItem::CopyFrom(const ProtoBattleDemoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleDemoItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ProtoBattleDemoItem::Swap(ProtoBattleDemoItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(s_, other->s_);
    std::swap(c_, other->c_);
    std::swap(turn_, other->turn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleDemoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleDemoItem_descriptor_;
  metadata.reflection = ProtoBattleDemoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleDemoHero::kIdFieldNumber;
const int ProtoBattleDemoHero::kHpFieldNumber;
const int ProtoBattleDemoHero::kAttFieldNumber;
const int ProtoBattleDemoHero::kDefFieldNumber;
const int ProtoBattleDemoHero::kCritFieldNumber;
const int ProtoBattleDemoHero::kAcritFieldNumber;
const int ProtoBattleDemoHero::kDodgeFieldNumber;
const int ProtoBattleDemoHero::kAdodgeFieldNumber;
const int ProtoBattleDemoHero::kCrittFieldNumber;
const int ProtoBattleDemoHero::kSpeedFieldNumber;
const int ProtoBattleDemoHero::kBattlePowerFieldNumber;
const int ProtoBattleDemoHero::kSkillFieldNumber;
#endif  // !_MSC_VER

ProtoBattleDemoHero::ProtoBattleDemoHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleDemoHero::InitAsDefaultInstance() {
}

ProtoBattleDemoHero::ProtoBattleDemoHero(const ProtoBattleDemoHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleDemoHero::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  hp_ = 0u;
  att_ = 0u;
  def_ = 0u;
  crit_ = 0u;
  acrit_ = 0u;
  dodge_ = 0u;
  adodge_ = 0u;
  critt_ = 0;
  speed_ = 0u;
  battlepower_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleDemoHero::~ProtoBattleDemoHero() {
  SharedDtor();
}

void ProtoBattleDemoHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleDemoHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleDemoHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleDemoHero_descriptor_;
}

const ProtoBattleDemoHero& ProtoBattleDemoHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleDemo_2eproto();  return *default_instance_;
}

ProtoBattleDemoHero* ProtoBattleDemoHero::default_instance_ = NULL;

ProtoBattleDemoHero* ProtoBattleDemoHero::New() const {
  return new ProtoBattleDemoHero;
}

void ProtoBattleDemoHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    hp_ = 0u;
    att_ = 0u;
    def_ = 0u;
    crit_ = 0u;
    acrit_ = 0u;
    dodge_ = 0u;
    adodge_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    critt_ = 0;
    speed_ = 0u;
    battlepower_ = 0u;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleDemoHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }
      
      // optional uint32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_att;
        break;
      }
      
      // optional uint32 att = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &att_)));
          set_has_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_def;
        break;
      }
      
      // optional uint32 def = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }
      
      // optional uint32 crit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_acrit;
        break;
      }
      
      // optional uint32 acrit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acrit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acrit_)));
          set_has_acrit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dodge;
        break;
      }
      
      // optional uint32 dodge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodge_)));
          set_has_dodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_adodge;
        break;
      }
      
      // optional uint32 adodge = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adodge_)));
          set_has_adodge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_critt;
        break;
      }
      
      // optional double critt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_critt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &critt_)));
          set_has_critt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_speed;
        break;
      }
      
      // optional uint32 speed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_battlePower;
        break;
      }
      
      // optional uint32 battlePower = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill;
        break;
      }
      
      // repeated .ProtoBattleDemo.ProtoBattleDemoHeroSkill skill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleDemoHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }
  
  // optional uint32 att = 3;
  if (has_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->att(), output);
  }
  
  // optional uint32 def = 4;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def(), output);
  }
  
  // optional uint32 crit = 5;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->crit(), output);
  }
  
  // optional uint32 acrit = 6;
  if (has_acrit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->acrit(), output);
  }
  
  // optional uint32 dodge = 7;
  if (has_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dodge(), output);
  }
  
  // optional uint32 adodge = 8;
  if (has_adodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->adodge(), output);
  }
  
  // optional double critt = 9;
  if (has_critt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->critt(), output);
  }
  
  // optional uint32 speed = 10;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->speed(), output);
  }
  
  // optional uint32 battlePower = 11;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->battlepower(), output);
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoHeroSkill skill = 12;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skill(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleDemoHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }
  
  // optional uint32 att = 3;
  if (has_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->att(), target);
  }
  
  // optional uint32 def = 4;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def(), target);
  }
  
  // optional uint32 crit = 5;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->crit(), target);
  }
  
  // optional uint32 acrit = 6;
  if (has_acrit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->acrit(), target);
  }
  
  // optional uint32 dodge = 7;
  if (has_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dodge(), target);
  }
  
  // optional uint32 adodge = 8;
  if (has_adodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->adodge(), target);
  }
  
  // optional double critt = 9;
  if (has_critt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->critt(), target);
  }
  
  // optional uint32 speed = 10;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->speed(), target);
  }
  
  // optional uint32 battlePower = 11;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->battlepower(), target);
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoHeroSkill skill = 12;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skill(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleDemoHero::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }
    
    // optional uint32 att = 3;
    if (has_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->att());
    }
    
    // optional uint32 def = 4;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }
    
    // optional uint32 crit = 5;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crit());
    }
    
    // optional uint32 acrit = 6;
    if (has_acrit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acrit());
    }
    
    // optional uint32 dodge = 7;
    if (has_dodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodge());
    }
    
    // optional uint32 adodge = 8;
    if (has_adodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adodge());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double critt = 9;
    if (has_critt()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 speed = 10;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }
    
    // optional uint32 battlePower = 11;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }
    
  }
  // repeated .ProtoBattleDemo.ProtoBattleDemoHeroSkill skill = 12;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleDemoHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleDemoHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleDemoHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleDemoHero::MergeFrom(const ProtoBattleDemoHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_att()) {
      set_att(from.att());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_acrit()) {
      set_acrit(from.acrit());
    }
    if (from.has_dodge()) {
      set_dodge(from.dodge());
    }
    if (from.has_adodge()) {
      set_adodge(from.adodge());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_critt()) {
      set_critt(from.critt());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleDemoHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleDemoHero::CopyFrom(const ProtoBattleDemoHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleDemoHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < skill_size(); i++) {
    if (!this->skill(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoBattleDemoHero::Swap(ProtoBattleDemoHero* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hp_, other->hp_);
    std::swap(att_, other->att_);
    std::swap(def_, other->def_);
    std::swap(crit_, other->crit_);
    std::swap(acrit_, other->acrit_);
    std::swap(dodge_, other->dodge_);
    std::swap(adodge_, other->adodge_);
    std::swap(critt_, other->critt_);
    std::swap(speed_, other->speed_);
    std::swap(battlepower_, other->battlepower_);
    skill_.Swap(&other->skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleDemoHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleDemoHero_descriptor_;
  metadata.reflection = ProtoBattleDemoHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleDemoTeam::kHeroFieldNumber;
const int ProtoBattleDemoTeam::kItemFieldNumber;
const int ProtoBattleDemoTeam::kLevelFieldNumber;
#endif  // !_MSC_VER

ProtoBattleDemoTeam::ProtoBattleDemoTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleDemoTeam::InitAsDefaultInstance() {
}

ProtoBattleDemoTeam::ProtoBattleDemoTeam(const ProtoBattleDemoTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleDemoTeam::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleDemoTeam::~ProtoBattleDemoTeam() {
  SharedDtor();
}

void ProtoBattleDemoTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleDemoTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleDemoTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleDemoTeam_descriptor_;
}

const ProtoBattleDemoTeam& ProtoBattleDemoTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleDemo_2eproto();  return *default_instance_;
}

ProtoBattleDemoTeam* ProtoBattleDemoTeam::default_instance_ = NULL;

ProtoBattleDemoTeam* ProtoBattleDemoTeam::New() const {
  return new ProtoBattleDemoTeam;
}

void ProtoBattleDemoTeam::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    level_ = 0u;
  }
  hero_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleDemoTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoBattleDemo.ProtoBattleDemoHero hero = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_hero;
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }
      
      // repeated .ProtoBattleDemo.ProtoBattleDemoItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleDemoTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ProtoBattleDemo.ProtoBattleDemoHero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero(i), output);
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleDemoTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ProtoBattleDemo.ProtoBattleDemoHero hero = 1;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero(i), target);
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }
  
  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleDemoTeam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  // repeated .ProtoBattleDemo.ProtoBattleDemoHero hero = 1;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleDemoTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleDemoTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleDemoTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleDemoTeam::MergeFrom(const ProtoBattleDemoTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleDemoTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleDemoTeam::CopyFrom(const ProtoBattleDemoTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleDemoTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < hero_size(); i++) {
    if (!this->hero(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoBattleDemoTeam::Swap(ProtoBattleDemoTeam* other) {
  if (other != this) {
    hero_.Swap(&other->hero_);
    item_.Swap(&other->item_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleDemoTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleDemoTeam_descriptor_;
  metadata.reflection = ProtoBattleDemoTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleDemoTurn::kSkillindexFieldNumber;
const int ProtoBattleDemoTurn::kItemindexFieldNumber;
const int ProtoBattleDemoTurn::kSkilldamFieldNumber;
const int ProtoBattleDemoTurn::kCritFieldNumber;
const int ProtoBattleDemoTurn::kExtradamFieldNumber;
#endif  // !_MSC_VER

ProtoBattleDemoTurn::ProtoBattleDemoTurn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleDemoTurn::InitAsDefaultInstance() {
}

ProtoBattleDemoTurn::ProtoBattleDemoTurn(const ProtoBattleDemoTurn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleDemoTurn::SharedCtor() {
  _cached_size_ = 0;
  skillindex_ = 0u;
  itemindex_ = 0u;
  skilldam_ = 0u;
  crit_ = false;
  extradam_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleDemoTurn::~ProtoBattleDemoTurn() {
  SharedDtor();
}

void ProtoBattleDemoTurn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleDemoTurn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleDemoTurn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleDemoTurn_descriptor_;
}

const ProtoBattleDemoTurn& ProtoBattleDemoTurn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleDemo_2eproto();  return *default_instance_;
}

ProtoBattleDemoTurn* ProtoBattleDemoTurn::default_instance_ = NULL;

ProtoBattleDemoTurn* ProtoBattleDemoTurn::New() const {
  return new ProtoBattleDemoTurn;
}

void ProtoBattleDemoTurn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillindex_ = 0u;
    itemindex_ = 0u;
    skilldam_ = 0u;
    crit_ = false;
    extradam_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleDemoTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skillindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillindex_)));
          set_has_skillindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemindex;
        break;
      }
      
      // required uint32 itemindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemindex_)));
          set_has_itemindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skilldam;
        break;
      }
      
      // optional uint32 skilldam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilldam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilldam_)));
          set_has_skilldam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_crit;
        break;
      }
      
      // optional bool crit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_extradam;
        break;
      }
      
      // optional uint32 extradam = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extradam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extradam_)));
          set_has_extradam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleDemoTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skillindex = 1;
  if (has_skillindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillindex(), output);
  }
  
  // required uint32 itemindex = 2;
  if (has_itemindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemindex(), output);
  }
  
  // optional uint32 skilldam = 3;
  if (has_skilldam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skilldam(), output);
  }
  
  // optional bool crit = 4;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->crit(), output);
  }
  
  // optional uint32 extradam = 5;
  if (has_extradam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extradam(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleDemoTurn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skillindex = 1;
  if (has_skillindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillindex(), target);
  }
  
  // required uint32 itemindex = 2;
  if (has_itemindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemindex(), target);
  }
  
  // optional uint32 skilldam = 3;
  if (has_skilldam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skilldam(), target);
  }
  
  // optional bool crit = 4;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->crit(), target);
  }
  
  // optional uint32 extradam = 5;
  if (has_extradam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->extradam(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleDemoTurn::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skillindex = 1;
    if (has_skillindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillindex());
    }
    
    // required uint32 itemindex = 2;
    if (has_itemindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemindex());
    }
    
    // optional uint32 skilldam = 3;
    if (has_skilldam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilldam());
    }
    
    // optional bool crit = 4;
    if (has_crit()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 extradam = 5;
    if (has_extradam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extradam());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleDemoTurn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleDemoTurn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleDemoTurn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleDemoTurn::MergeFrom(const ProtoBattleDemoTurn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillindex()) {
      set_skillindex(from.skillindex());
    }
    if (from.has_itemindex()) {
      set_itemindex(from.itemindex());
    }
    if (from.has_skilldam()) {
      set_skilldam(from.skilldam());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_extradam()) {
      set_extradam(from.extradam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleDemoTurn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleDemoTurn::CopyFrom(const ProtoBattleDemoTurn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleDemoTurn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProtoBattleDemoTurn::Swap(ProtoBattleDemoTurn* other) {
  if (other != this) {
    std::swap(skillindex_, other->skillindex_);
    std::swap(itemindex_, other->itemindex_);
    std::swap(skilldam_, other->skilldam_);
    std::swap(crit_, other->crit_);
    std::swap(extradam_, other->extradam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleDemoTurn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleDemoTurn_descriptor_;
  metadata.reflection = ProtoBattleDemoTurn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleDemoTurnInfo::kAhpFieldNumber;
const int ProtoBattleDemoTurnInfo::kApFieldNumber;
const int ProtoBattleDemoTurnInfo::kDhpFieldNumber;
const int ProtoBattleDemoTurnInfo::kDpFieldNumber;
#endif  // !_MSC_VER

ProtoBattleDemoTurnInfo::ProtoBattleDemoTurnInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleDemoTurnInfo::InitAsDefaultInstance() {
}

ProtoBattleDemoTurnInfo::ProtoBattleDemoTurnInfo(const ProtoBattleDemoTurnInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleDemoTurnInfo::SharedCtor() {
  _cached_size_ = 0;
  ahp_ = 0;
  ap_ = 0u;
  dhp_ = 0;
  dp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleDemoTurnInfo::~ProtoBattleDemoTurnInfo() {
  SharedDtor();
}

void ProtoBattleDemoTurnInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoBattleDemoTurnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleDemoTurnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleDemoTurnInfo_descriptor_;
}

const ProtoBattleDemoTurnInfo& ProtoBattleDemoTurnInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleDemo_2eproto();  return *default_instance_;
}

ProtoBattleDemoTurnInfo* ProtoBattleDemoTurnInfo::default_instance_ = NULL;

ProtoBattleDemoTurnInfo* ProtoBattleDemoTurnInfo::New() const {
  return new ProtoBattleDemoTurnInfo;
}

void ProtoBattleDemoTurnInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ahp_ = 0;
    ap_ = 0u;
    dhp_ = 0;
    dp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleDemoTurnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ahp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ahp_)));
          set_has_ahp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ap;
        break;
      }
      
      // required uint32 ap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ap_)));
          set_has_ap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dhp;
        break;
      }
      
      // required int32 dhp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dhp_)));
          set_has_dhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dp;
        break;
      }
      
      // required uint32 dp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dp_)));
          set_has_dp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleDemoTurnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ahp = 1;
  if (has_ahp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ahp(), output);
  }
  
  // required uint32 ap = 2;
  if (has_ap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ap(), output);
  }
  
  // required int32 dhp = 3;
  if (has_dhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dhp(), output);
  }
  
  // required uint32 dp = 4;
  if (has_dp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleDemoTurnInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ahp = 1;
  if (has_ahp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ahp(), target);
  }
  
  // required uint32 ap = 2;
  if (has_ap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ap(), target);
  }
  
  // required int32 dhp = 3;
  if (has_dhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dhp(), target);
  }
  
  // required uint32 dp = 4;
  if (has_dp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleDemoTurnInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ahp = 1;
    if (has_ahp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ahp());
    }
    
    // required uint32 ap = 2;
    if (has_ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ap());
    }
    
    // required int32 dhp = 3;
    if (has_dhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dhp());
    }
    
    // required uint32 dp = 4;
    if (has_dp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleDemoTurnInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleDemoTurnInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleDemoTurnInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleDemoTurnInfo::MergeFrom(const ProtoBattleDemoTurnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ahp()) {
      set_ahp(from.ahp());
    }
    if (from.has_ap()) {
      set_ap(from.ap());
    }
    if (from.has_dhp()) {
      set_dhp(from.dhp());
    }
    if (from.has_dp()) {
      set_dp(from.dp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleDemoTurnInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleDemoTurnInfo::CopyFrom(const ProtoBattleDemoTurnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleDemoTurnInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ProtoBattleDemoTurnInfo::Swap(ProtoBattleDemoTurnInfo* other) {
  if (other != this) {
    std::swap(ahp_, other->ahp_);
    std::swap(ap_, other->ap_);
    std::swap(dhp_, other->dhp_);
    std::swap(dp_, other->dp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleDemoTurnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleDemoTurnInfo_descriptor_;
  metadata.reflection = ProtoBattleDemoTurnInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtoBattleDemo::kAttackerFieldNumber;
const int ProtoBattleDemo::kDefenderFieldNumber;
const int ProtoBattleDemo::kFirstFieldNumber;
const int ProtoBattleDemo::kAttackerWinFieldNumber;
const int ProtoBattleDemo::kTurnFieldNumber;
const int ProtoBattleDemo::kInfoFieldNumber;
#endif  // !_MSC_VER

ProtoBattleDemo::ProtoBattleDemo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProtoBattleDemo::InitAsDefaultInstance() {
  attacker_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemoTeam*>(&::ProtoBattleDemo::ProtoBattleDemoTeam::default_instance());
  defender_ = const_cast< ::ProtoBattleDemo::ProtoBattleDemoTeam*>(&::ProtoBattleDemo::ProtoBattleDemoTeam::default_instance());
}

ProtoBattleDemo::ProtoBattleDemo(const ProtoBattleDemo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProtoBattleDemo::SharedCtor() {
  _cached_size_ = 0;
  attacker_ = NULL;
  defender_ = NULL;
  first_ = 0u;
  attackerwin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtoBattleDemo::~ProtoBattleDemo() {
  SharedDtor();
}

void ProtoBattleDemo::SharedDtor() {
  if (this != default_instance_) {
    delete attacker_;
    delete defender_;
  }
}

void ProtoBattleDemo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoBattleDemo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoBattleDemo_descriptor_;
}

const ProtoBattleDemo& ProtoBattleDemo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBattleDemo_2eproto();  return *default_instance_;
}

ProtoBattleDemo* ProtoBattleDemo::default_instance_ = NULL;

ProtoBattleDemo* ProtoBattleDemo::New() const {
  return new ProtoBattleDemo;
}

void ProtoBattleDemo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attacker()) {
      if (attacker_ != NULL) attacker_->::ProtoBattleDemo::ProtoBattleDemoTeam::Clear();
    }
    if (has_defender()) {
      if (defender_ != NULL) defender_->::ProtoBattleDemo::ProtoBattleDemoTeam::Clear();
    }
    first_ = 0u;
    attackerwin_ = false;
  }
  turn_.Clear();
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtoBattleDemo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBattleDemo.ProtoBattleDemoTeam attacker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attacker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_defender;
        break;
      }
      
      // required .ProtoBattleDemo.ProtoBattleDemoTeam defender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defender()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_first;
        break;
      }
      
      // optional uint32 first = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attackerWin;
        break;
      }
      
      // optional bool attackerWin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackerWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attackerwin_)));
          set_has_attackerwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_turn;
        break;
      }
      
      // repeated .ProtoBattleDemo.ProtoBattleDemoTurn turn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_turn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_turn;
        if (input->ExpectTag(50)) goto parse_info;
        break;
      }
      
      // repeated .ProtoBattleDemo.ProtoBattleDemoTurnInfo info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProtoBattleDemo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ProtoBattleDemo.ProtoBattleDemoTeam attacker = 1;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attacker(), output);
  }
  
  // required .ProtoBattleDemo.ProtoBattleDemoTeam defender = 2;
  if (has_defender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defender(), output);
  }
  
  // optional uint32 first = 3;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->first(), output);
  }
  
  // optional bool attackerWin = 4;
  if (has_attackerwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->attackerwin(), output);
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoTurn turn = 5;
  for (int i = 0; i < this->turn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->turn(i), output);
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoTurnInfo info = 6;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProtoBattleDemo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoBattleDemo.ProtoBattleDemoTeam attacker = 1;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attacker(), target);
  }
  
  // required .ProtoBattleDemo.ProtoBattleDemoTeam defender = 2;
  if (has_defender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defender(), target);
  }
  
  // optional uint32 first = 3;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->first(), target);
  }
  
  // optional bool attackerWin = 4;
  if (has_attackerwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->attackerwin(), target);
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoTurn turn = 5;
  for (int i = 0; i < this->turn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->turn(i), target);
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoTurnInfo info = 6;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProtoBattleDemo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBattleDemo.ProtoBattleDemoTeam attacker = 1;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attacker());
    }
    
    // required .ProtoBattleDemo.ProtoBattleDemoTeam defender = 2;
    if (has_defender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defender());
    }
    
    // optional uint32 first = 3;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }
    
    // optional bool attackerWin = 4;
    if (has_attackerwin()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .ProtoBattleDemo.ProtoBattleDemoTurn turn = 5;
  total_size += 1 * this->turn_size();
  for (int i = 0; i < this->turn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turn(i));
  }
  
  // repeated .ProtoBattleDemo.ProtoBattleDemoTurnInfo info = 6;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoBattleDemo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtoBattleDemo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtoBattleDemo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtoBattleDemo::MergeFrom(const ProtoBattleDemo& from) {
  GOOGLE_CHECK_NE(&from, this);
  turn_.MergeFrom(from.turn_);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker()) {
      mutable_attacker()->::ProtoBattleDemo::ProtoBattleDemoTeam::MergeFrom(from.attacker());
    }
    if (from.has_defender()) {
      mutable_defender()->::ProtoBattleDemo::ProtoBattleDemoTeam::MergeFrom(from.defender());
    }
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_attackerwin()) {
      set_attackerwin(from.attackerwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtoBattleDemo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoBattleDemo::CopyFrom(const ProtoBattleDemo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoBattleDemo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_attacker()) {
    if (!this->attacker().IsInitialized()) return false;
  }
  if (has_defender()) {
    if (!this->defender().IsInitialized()) return false;
  }
  for (int i = 0; i < turn_size(); i++) {
    if (!this->turn(i).IsInitialized()) return false;
  }
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void ProtoBattleDemo::Swap(ProtoBattleDemo* other) {
  if (other != this) {
    std::swap(attacker_, other->attacker_);
    std::swap(defender_, other->defender_);
    std::swap(first_, other->first_);
    std::swap(attackerwin_, other->attackerwin_);
    turn_.Swap(&other->turn_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtoBattleDemo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoBattleDemo_descriptor_;
  metadata.reflection = ProtoBattleDemo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBattleDemo

// @@protoc_insertion_point(global_scope)
