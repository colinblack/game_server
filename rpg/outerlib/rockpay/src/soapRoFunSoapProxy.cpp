/* soapRoFunSoapProxy.cpp
   Generated by gSOAP 2.8.3 from pockpay.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapRoFunSoapProxy.h"

RoFunSoapProxy::RoFunSoapProxy()
{	RoFunSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RoFunSoapProxy::RoFunSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

RoFunSoapProxy::RoFunSoapProxy(const char *url)
{	RoFunSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

RoFunSoapProxy::RoFunSoapProxy(soap_mode iomode)
{	RoFunSoapProxy_init(iomode, iomode);
}

RoFunSoapProxy::RoFunSoapProxy(const char *url, soap_mode iomode)
{	RoFunSoapProxy_init(iomode, iomode);
	soap_endpoint = url;
}

RoFunSoapProxy::RoFunSoapProxy(soap_mode imode, soap_mode omode)
{	RoFunSoapProxy_init(imode, omode);
}

RoFunSoapProxy::~RoFunSoapProxy()
{ }

void RoFunSoapProxy::RoFunSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://tempuri.org/RoFunSoap", NULL, NULL},
	{"ns1", "http://tempuri.org/", NULL, NULL},
	{"ns3", "http://tempuri.org/RoFunSoap12", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void RoFunSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void RoFunSoapProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *RoFunSoapProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *RoFunSoapProxy::soap_fault()
{	return this->fault;
}

const char *RoFunSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *RoFunSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int RoFunSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

void RoFunSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void RoFunSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *RoFunSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int RoFunSoapProxy::CheckTransaction(const char *endpoint, const char *soap_action, _ns1__CheckTransaction *ns1__CheckTransaction, _ns1__CheckTransactionResponse *ns1__CheckTransactionResponse)
{	struct soap *soap = this;
	struct __ns2__CheckTransaction soap_tmp___ns2__CheckTransaction;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://rockpay.rojo.tw/RoFun.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/CheckTransaction";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CheckTransaction.ns1__CheckTransaction = ns1__CheckTransaction;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__CheckTransaction(soap, &soap_tmp___ns2__CheckTransaction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__CheckTransaction(soap, &soap_tmp___ns2__CheckTransaction, "-ns2:CheckTransaction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__CheckTransaction(soap, &soap_tmp___ns2__CheckTransaction, "-ns2:CheckTransaction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckTransactionResponse)
		return soap_closesock(soap);
	ns1__CheckTransactionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckTransactionResponse->soap_get(soap, "ns1:CheckTransactionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RoFunSoapProxy::CheckTransactionWithCurrency(const char *endpoint, const char *soap_action, _ns1__CheckTransactionWithCurrency *ns1__CheckTransactionWithCurrency, _ns1__CheckTransactionWithCurrencyResponse *ns1__CheckTransactionWithCurrencyResponse)
{	struct soap *soap = this;
	struct __ns2__CheckTransactionWithCurrency soap_tmp___ns2__CheckTransactionWithCurrency;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://rockpay.rojo.tw/RoFun.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/CheckTransactionWithCurrency";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CheckTransactionWithCurrency.ns1__CheckTransactionWithCurrency = ns1__CheckTransactionWithCurrency;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__CheckTransactionWithCurrency(soap, &soap_tmp___ns2__CheckTransactionWithCurrency);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__CheckTransactionWithCurrency(soap, &soap_tmp___ns2__CheckTransactionWithCurrency, "-ns2:CheckTransactionWithCurrency", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__CheckTransactionWithCurrency(soap, &soap_tmp___ns2__CheckTransactionWithCurrency, "-ns2:CheckTransactionWithCurrency", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CheckTransactionWithCurrencyResponse)
		return soap_closesock(soap);
	ns1__CheckTransactionWithCurrencyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CheckTransactionWithCurrencyResponse->soap_get(soap, "ns1:CheckTransactionWithCurrencyResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RoFunSoapProxy::CommitTransaction(const char *endpoint, const char *soap_action, _ns1__CommitTransaction *ns1__CommitTransaction, _ns1__CommitTransactionResponse *ns1__CommitTransactionResponse)
{	struct soap *soap = this;
	struct __ns2__CommitTransaction soap_tmp___ns2__CommitTransaction;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://rockpay.rojo.tw/RoFun.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/CommitTransaction";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CommitTransaction.ns1__CommitTransaction = ns1__CommitTransaction;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__CommitTransaction(soap, &soap_tmp___ns2__CommitTransaction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__CommitTransaction(soap, &soap_tmp___ns2__CommitTransaction, "-ns2:CommitTransaction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__CommitTransaction(soap, &soap_tmp___ns2__CommitTransaction, "-ns2:CommitTransaction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CommitTransactionResponse)
		return soap_closesock(soap);
	ns1__CommitTransactionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CommitTransactionResponse->soap_get(soap, "ns1:CommitTransactionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RoFunSoapProxy::CommitTransactionNTD(const char *endpoint, const char *soap_action, _ns1__CommitTransactionNTD *ns1__CommitTransactionNTD, _ns1__CommitTransactionNTDResponse *ns1__CommitTransactionNTDResponse)
{	struct soap *soap = this;
	struct __ns2__CommitTransactionNTD soap_tmp___ns2__CommitTransactionNTD;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://rockpay.rojo.tw/RoFun.asmx";
	if (!soap_action)
		soap_action = "http://tempuri.org/CommitTransactionNTD";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__CommitTransactionNTD.ns1__CommitTransactionNTD = ns1__CommitTransactionNTD;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__CommitTransactionNTD(soap, &soap_tmp___ns2__CommitTransactionNTD);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__CommitTransactionNTD(soap, &soap_tmp___ns2__CommitTransactionNTD, "-ns2:CommitTransactionNTD", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__CommitTransactionNTD(soap, &soap_tmp___ns2__CommitTransactionNTD, "-ns2:CommitTransactionNTD", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CommitTransactionNTDResponse)
		return soap_closesock(soap);
	ns1__CommitTransactionNTDResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CommitTransactionNTDResponse->soap_get(soap, "ns1:CommitTransactionNTDResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
