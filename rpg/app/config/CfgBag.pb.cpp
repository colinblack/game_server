// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgBag.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgBag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgBag {

namespace {

const ::google::protobuf::Descriptor* Grid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grid_reflection_ = NULL;
const ::google::protobuf::Descriptor* Grids_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grids_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgBag_2eproto() {
  protobuf_AddDesc_CfgBag_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgBag.proto");
  GOOGLE_CHECK(file != NULL);
  Grid_descriptor_ = file->message_type(0);
  static const int Grid_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, cost_),
  };
  Grid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Grid_descriptor_,
      Grid::default_instance_,
      Grid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Grid));
  Grids_descriptor_ = file->message_type(1);
  static const int Grids_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grids, grids_),
  };
  Grids_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Grids_descriptor_,
      Grids::default_instance_,
      Grids_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grids, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grids, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Grids));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgBag_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Grid_descriptor_, &Grid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Grids_descriptor_, &Grids::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgBag_2eproto() {
  delete Grid::default_instance_;
  delete Grid_reflection_;
  delete Grids::default_instance_;
  delete Grids_reflection_;
}

void protobuf_AddDesc_CfgBag_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CfgBag.proto\022\006CfgBag\"/\n\004Grid\022\014\n\004type\030\001"
    " \002(\r\022\013\n\003num\030\002 \002(\r\022\014\n\004cost\030\003 \002(\r\"$\n\005Grids"
    "\022\033\n\005grids\030\001 \003(\0132\014.CfgBag.Grid", 109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgBag.proto", &protobuf_RegisterTypes);
  Grid::default_instance_ = new Grid();
  Grids::default_instance_ = new Grids();
  Grid::default_instance_->InitAsDefaultInstance();
  Grids::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgBag_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgBag_2eproto {
  StaticDescriptorInitializer_CfgBag_2eproto() {
    protobuf_AddDesc_CfgBag_2eproto();
  }
} static_descriptor_initializer_CfgBag_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Grid::kTypeFieldNumber;
const int Grid::kNumFieldNumber;
const int Grid::kCostFieldNumber;
#endif  // !_MSC_VER

Grid::Grid()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgBag.Grid)
}

void Grid::InitAsDefaultInstance() {
}

Grid::Grid(const Grid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgBag.Grid)
}

void Grid::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  num_ = 0u;
  cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Grid::~Grid() {
  // @@protoc_insertion_point(destructor:CfgBag.Grid)
  SharedDtor();
}

void Grid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Grid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grid_descriptor_;
}

const Grid& Grid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgBag_2eproto();
  return *default_instance_;
}

Grid* Grid::default_instance_ = NULL;

Grid* Grid::New() const {
  return new Grid;
}

void Grid::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Grid*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Grid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgBag.Grid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // required uint32 cost = 3;
      case 3: {
        if (tag == 24) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgBag.Grid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgBag.Grid)
  return false;
#undef DO_
}

void Grid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgBag.Grid)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // required uint32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgBag.Grid)
}

::google::protobuf::uint8* Grid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgBag.Grid)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // required uint32 cost = 3;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgBag.Grid)
  return target;
}

int Grid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Grid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Grid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Grid::MergeFrom(const Grid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Grid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid::CopyFrom(const Grid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Grid::Swap(Grid* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Grid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grid_descriptor_;
  metadata.reflection = Grid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Grids::kGridsFieldNumber;
#endif  // !_MSC_VER

Grids::Grids()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgBag.Grids)
}

void Grids::InitAsDefaultInstance() {
}

Grids::Grids(const Grids& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgBag.Grids)
}

void Grids::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Grids::~Grids() {
  // @@protoc_insertion_point(destructor:CfgBag.Grids)
  SharedDtor();
}

void Grids::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Grids::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grids::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grids_descriptor_;
}

const Grids& Grids::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgBag_2eproto();
  return *default_instance_;
}

Grids* Grids::default_instance_ = NULL;

Grids* Grids::New() const {
  return new Grids;
}

void Grids::Clear() {
  grids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Grids::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgBag.Grids)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgBag.Grid grids = 1;
      case 1: {
        if (tag == 10) {
         parse_grids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_grids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgBag.Grids)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgBag.Grids)
  return false;
#undef DO_
}

void Grids::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgBag.Grids)
  // repeated .CfgBag.Grid grids = 1;
  for (int i = 0; i < this->grids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgBag.Grids)
}

::google::protobuf::uint8* Grids::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgBag.Grids)
  // repeated .CfgBag.Grid grids = 1;
  for (int i = 0; i < this->grids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgBag.Grids)
  return target;
}

int Grids::ByteSize() const {
  int total_size = 0;

  // repeated .CfgBag.Grid grids = 1;
  total_size += 1 * this->grids_size();
  for (int i = 0; i < this->grids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grids::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Grids* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Grids*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Grids::MergeFrom(const Grids& from) {
  GOOGLE_CHECK_NE(&from, this);
  grids_.MergeFrom(from.grids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Grids::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grids::CopyFrom(const Grids& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grids::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->grids())) return false;
  return true;
}

void Grids::Swap(Grids* other) {
  if (other != this) {
    grids_.Swap(&other->grids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Grids::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grids_descriptor_;
  metadata.reflection = Grids_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgBag

// @@protoc_insertion_point(global_scope)
