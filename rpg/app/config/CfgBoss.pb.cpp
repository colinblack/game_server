// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgBoss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgBoss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgBoss {

namespace {

const ::google::protobuf::Descriptor* Boss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boss_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bosses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bosses_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgBoss_2eproto() {
  protobuf_AddDesc_CfgBoss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgBoss.proto");
  GOOGLE_CHECK(file != NULL);
  Boss_descriptor_ = file->message_type(0);
  static const int Boss_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boss, reincarnlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boss, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boss, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boss, usetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boss, reward_),
  };
  Boss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boss_descriptor_,
      Boss::default_instance_,
      Boss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boss));
  Bosses_descriptor_ = file->message_type(1);
  static const int Bosses_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bosses, boss_),
  };
  Bosses_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bosses_descriptor_,
      Bosses::default_instance_,
      Bosses_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bosses, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bosses, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bosses));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgBoss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boss_descriptor_, &Boss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bosses_descriptor_, &Bosses::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgBoss_2eproto() {
  delete Boss::default_instance_;
  delete Boss_reflection_;
  delete Bosses::default_instance_;
  delete Bosses_reflection_;
}

void protobuf_AddDesc_CfgBoss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rCfgBoss.proto\022\007CfgBoss\032\017CfgCommon.prot"
    "o\"q\n\004Boss\022\025\n\rreincarnLevel\030\001 \002(\r\022\016\n\006boss"
    "id\030\002 \002(\r\022\016\n\006copyId\030\003 \002(\r\022\017\n\007useType\030\004 \002("
    "\r\022!\n\006reward\030\005 \003(\0132\021.CfgCommon.Reward\"%\n\006"
    "Bosses\022\033\n\004boss\030\001 \003(\0132\r.CfgBoss.Boss", 195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgBoss.proto", &protobuf_RegisterTypes);
  Boss::default_instance_ = new Boss();
  Bosses::default_instance_ = new Bosses();
  Boss::default_instance_->InitAsDefaultInstance();
  Bosses::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgBoss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgBoss_2eproto {
  StaticDescriptorInitializer_CfgBoss_2eproto() {
    protobuf_AddDesc_CfgBoss_2eproto();
  }
} static_descriptor_initializer_CfgBoss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Boss::kReincarnLevelFieldNumber;
const int Boss::kBossidFieldNumber;
const int Boss::kCopyIdFieldNumber;
const int Boss::kUseTypeFieldNumber;
const int Boss::kRewardFieldNumber;
#endif  // !_MSC_VER

Boss::Boss()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgBoss.Boss)
}

void Boss::InitAsDefaultInstance() {
}

Boss::Boss(const Boss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgBoss.Boss)
}

void Boss::SharedCtor() {
  _cached_size_ = 0;
  reincarnlevel_ = 0u;
  bossid_ = 0u;
  copyid_ = 0u;
  usetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boss::~Boss() {
  // @@protoc_insertion_point(destructor:CfgBoss.Boss)
  SharedDtor();
}

void Boss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boss_descriptor_;
}

const Boss& Boss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgBoss_2eproto();
  return *default_instance_;
}

Boss* Boss::default_instance_ = NULL;

Boss* Boss::New() const {
  return new Boss;
}

void Boss::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Boss*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(reincarnlevel_, usetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgBoss.Boss)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reincarnLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reincarnlevel_)));
          set_has_reincarnlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bossid;
        break;
      }

      // required uint32 bossid = 2;
      case 2: {
        if (tag == 16) {
         parse_bossid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_copyId;
        break;
      }

      // required uint32 copyId = 3;
      case 3: {
        if (tag == 24) {
         parse_copyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_useType;
        break;
      }

      // required uint32 useType = 4;
      case 4: {
        if (tag == 32) {
         parse_useType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetype_)));
          set_has_usetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // repeated .CfgCommon.Reward reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgBoss.Boss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgBoss.Boss)
  return false;
#undef DO_
}

void Boss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgBoss.Boss)
  // required uint32 reincarnLevel = 1;
  if (has_reincarnlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reincarnlevel(), output);
  }

  // required uint32 bossid = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  // required uint32 copyId = 3;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->copyid(), output);
  }

  // required uint32 useType = 4;
  if (has_usetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->usetype(), output);
  }

  // repeated .CfgCommon.Reward reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgBoss.Boss)
}

::google::protobuf::uint8* Boss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgBoss.Boss)
  // required uint32 reincarnLevel = 1;
  if (has_reincarnlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reincarnlevel(), target);
  }

  // required uint32 bossid = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossid(), target);
  }

  // required uint32 copyId = 3;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->copyid(), target);
  }

  // required uint32 useType = 4;
  if (has_usetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->usetype(), target);
  }

  // repeated .CfgCommon.Reward reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgBoss.Boss)
  return target;
}

int Boss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reincarnLevel = 1;
    if (has_reincarnlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reincarnlevel());
    }

    // required uint32 bossid = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // required uint32 copyId = 3;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copyid());
    }

    // required uint32 useType = 4;
    if (has_usetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usetype());
    }

  }
  // repeated .CfgCommon.Reward reward = 5;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boss::MergeFrom(const Boss& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reincarnlevel()) {
      set_reincarnlevel(from.reincarnlevel());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_usetype()) {
      set_usetype(from.usetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boss::CopyFrom(const Boss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boss::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void Boss::Swap(Boss* other) {
  if (other != this) {
    std::swap(reincarnlevel_, other->reincarnlevel_);
    std::swap(bossid_, other->bossid_);
    std::swap(copyid_, other->copyid_);
    std::swap(usetype_, other->usetype_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boss_descriptor_;
  metadata.reflection = Boss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bosses::kBossFieldNumber;
#endif  // !_MSC_VER

Bosses::Bosses()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgBoss.Bosses)
}

void Bosses::InitAsDefaultInstance() {
}

Bosses::Bosses(const Bosses& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgBoss.Bosses)
}

void Bosses::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bosses::~Bosses() {
  // @@protoc_insertion_point(destructor:CfgBoss.Bosses)
  SharedDtor();
}

void Bosses::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bosses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bosses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bosses_descriptor_;
}

const Bosses& Bosses::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgBoss_2eproto();
  return *default_instance_;
}

Bosses* Bosses::default_instance_ = NULL;

Bosses* Bosses::New() const {
  return new Bosses;
}

void Bosses::Clear() {
  boss_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bosses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgBoss.Bosses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgBoss.Boss boss = 1;
      case 1: {
        if (tag == 10) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boss()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_boss;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgBoss.Bosses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgBoss.Bosses)
  return false;
#undef DO_
}

void Bosses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgBoss.Bosses)
  // repeated .CfgBoss.Boss boss = 1;
  for (int i = 0; i < this->boss_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boss(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgBoss.Bosses)
}

::google::protobuf::uint8* Bosses::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgBoss.Bosses)
  // repeated .CfgBoss.Boss boss = 1;
  for (int i = 0; i < this->boss_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boss(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgBoss.Bosses)
  return target;
}

int Bosses::ByteSize() const {
  int total_size = 0;

  // repeated .CfgBoss.Boss boss = 1;
  total_size += 1 * this->boss_size();
  for (int i = 0; i < this->boss_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boss(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bosses::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bosses* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bosses*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bosses::MergeFrom(const Bosses& from) {
  GOOGLE_CHECK_NE(&from, this);
  boss_.MergeFrom(from.boss_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bosses::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bosses::CopyFrom(const Bosses& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bosses::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->boss())) return false;
  return true;
}

void Bosses::Swap(Bosses* other) {
  if (other != this) {
    boss_.Swap(&other->boss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bosses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bosses_descriptor_;
  metadata.reflection = Bosses_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgBoss

// @@protoc_insertion_point(global_scope)
