// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgHang.proto

#ifndef PROTOBUF_CfgHang_2eproto__INCLUDED
#define PROTOBUF_CfgHang_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CfgHang {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CfgHang_2eproto();
void protobuf_AssignDesc_CfgHang_2eproto();
void protobuf_ShutdownFile_CfgHang_2eproto();

class Plan;
class Plans;
class Hang;
class Hangs;

// ===================================================================

class Plan : public ::google::protobuf::Message {
 public:
  Plan();
  virtual ~Plan();

  Plan(const Plan& from);

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plan& default_instance();

  void Swap(Plan* other);

  // implements Message ----------------------------------------------

  Plan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // required int32 plan = 3;
  inline bool has_plan() const;
  inline void clear_plan();
  static const int kPlanFieldNumber = 3;
  inline ::google::protobuf::int32 plan() const;
  inline void set_plan(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CfgHang.Plan)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_plan();
  inline void clear_has_plan();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 plan_;
  friend void  protobuf_AddDesc_CfgHang_2eproto();
  friend void protobuf_AssignDesc_CfgHang_2eproto();
  friend void protobuf_ShutdownFile_CfgHang_2eproto();

  void InitAsDefaultInstance();
  static Plan* default_instance_;
};
// -------------------------------------------------------------------

class Plans : public ::google::protobuf::Message {
 public:
  Plans();
  virtual ~Plans();

  Plans(const Plans& from);

  inline Plans& operator=(const Plans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plans& default_instance();

  void Swap(Plans* other);

  // implements Message ----------------------------------------------

  Plans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Plans& from);
  void MergeFrom(const Plans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgHang.Plan plans = 1;
  inline int plans_size() const;
  inline void clear_plans();
  static const int kPlansFieldNumber = 1;
  inline const ::CfgHang::Plan& plans(int index) const;
  inline ::CfgHang::Plan* mutable_plans(int index);
  inline ::CfgHang::Plan* add_plans();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgHang::Plan >&
      plans() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgHang::Plan >*
      mutable_plans();

  // @@protoc_insertion_point(class_scope:CfgHang.Plans)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgHang::Plan > plans_;
  friend void  protobuf_AddDesc_CfgHang_2eproto();
  friend void protobuf_AssignDesc_CfgHang_2eproto();
  friend void protobuf_ShutdownFile_CfgHang_2eproto();

  void InitAsDefaultInstance();
  static Plans* default_instance_;
};
// -------------------------------------------------------------------

class Hang : public ::google::protobuf::Message {
 public:
  Hang();
  virtual ~Hang();

  Hang(const Hang& from);

  inline Hang& operator=(const Hang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hang& default_instance();

  void Swap(Hang* other);

  // implements Message ----------------------------------------------

  Hang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hang& from);
  void MergeFrom(const Hang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // required int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // required int32 coin = 4;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 4;
  inline ::google::protobuf::int32 coin() const;
  inline void set_coin(::google::protobuf::int32 value);

  // required int32 plan = 5;
  inline bool has_plan() const;
  inline void clear_plan();
  static const int kPlanFieldNumber = 5;
  inline ::google::protobuf::int32 plan() const;
  inline void set_plan(::google::protobuf::int32 value);

  // required int32 power = 6;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 6;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CfgHang.Hang)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_plan();
  inline void clear_has_plan();
  inline void set_has_power();
  inline void clear_has_power();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 coin_;
  ::google::protobuf::int32 plan_;
  ::google::protobuf::int32 power_;
  friend void  protobuf_AddDesc_CfgHang_2eproto();
  friend void protobuf_AssignDesc_CfgHang_2eproto();
  friend void protobuf_ShutdownFile_CfgHang_2eproto();

  void InitAsDefaultInstance();
  static Hang* default_instance_;
};
// -------------------------------------------------------------------

class Hangs : public ::google::protobuf::Message {
 public:
  Hangs();
  virtual ~Hangs();

  Hangs(const Hangs& from);

  inline Hangs& operator=(const Hangs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hangs& default_instance();

  void Swap(Hangs* other);

  // implements Message ----------------------------------------------

  Hangs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hangs& from);
  void MergeFrom(const Hangs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgHang.Hang hangs = 1;
  inline int hangs_size() const;
  inline void clear_hangs();
  static const int kHangsFieldNumber = 1;
  inline const ::CfgHang::Hang& hangs(int index) const;
  inline ::CfgHang::Hang* mutable_hangs(int index);
  inline ::CfgHang::Hang* add_hangs();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgHang::Hang >&
      hangs() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgHang::Hang >*
      mutable_hangs();

  // @@protoc_insertion_point(class_scope:CfgHang.Hangs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgHang::Hang > hangs_;
  friend void  protobuf_AddDesc_CfgHang_2eproto();
  friend void protobuf_AssignDesc_CfgHang_2eproto();
  friend void protobuf_ShutdownFile_CfgHang_2eproto();

  void InitAsDefaultInstance();
  static Hangs* default_instance_;
};
// ===================================================================


// ===================================================================

// Plan

// required int32 id = 1;
inline bool Plan::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Plan::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Plan::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Plan::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Plan::id() const {
  // @@protoc_insertion_point(field_get:CfgHang.Plan.id)
  return id_;
}
inline void Plan::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CfgHang.Plan.id)
}

// required int32 mapid = 2;
inline bool Plan::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Plan::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Plan::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Plan::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 Plan::mapid() const {
  // @@protoc_insertion_point(field_get:CfgHang.Plan.mapid)
  return mapid_;
}
inline void Plan::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CfgHang.Plan.mapid)
}

// required int32 plan = 3;
inline bool Plan::has_plan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Plan::set_has_plan() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Plan::clear_has_plan() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Plan::clear_plan() {
  plan_ = 0;
  clear_has_plan();
}
inline ::google::protobuf::int32 Plan::plan() const {
  // @@protoc_insertion_point(field_get:CfgHang.Plan.plan)
  return plan_;
}
inline void Plan::set_plan(::google::protobuf::int32 value) {
  set_has_plan();
  plan_ = value;
  // @@protoc_insertion_point(field_set:CfgHang.Plan.plan)
}

// -------------------------------------------------------------------

// Plans

// repeated .CfgHang.Plan plans = 1;
inline int Plans::plans_size() const {
  return plans_.size();
}
inline void Plans::clear_plans() {
  plans_.Clear();
}
inline const ::CfgHang::Plan& Plans::plans(int index) const {
  // @@protoc_insertion_point(field_get:CfgHang.Plans.plans)
  return plans_.Get(index);
}
inline ::CfgHang::Plan* Plans::mutable_plans(int index) {
  // @@protoc_insertion_point(field_mutable:CfgHang.Plans.plans)
  return plans_.Mutable(index);
}
inline ::CfgHang::Plan* Plans::add_plans() {
  // @@protoc_insertion_point(field_add:CfgHang.Plans.plans)
  return plans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgHang::Plan >&
Plans::plans() const {
  // @@protoc_insertion_point(field_list:CfgHang.Plans.plans)
  return plans_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgHang::Plan >*
Plans::mutable_plans() {
  // @@protoc_insertion_point(field_mutable_list:CfgHang.Plans.plans)
  return &plans_;
}

// -------------------------------------------------------------------

// Hang

// required int32 id = 1;
inline bool Hang::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hang::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hang::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hang::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Hang::id() const {
  // @@protoc_insertion_point(field_get:CfgHang.Hang.id)
  return id_;
}
inline void Hang::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CfgHang.Hang.id)
}

// required int32 mapid = 2;
inline bool Hang::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hang::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hang::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hang::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 Hang::mapid() const {
  // @@protoc_insertion_point(field_get:CfgHang.Hang.mapid)
  return mapid_;
}
inline void Hang::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CfgHang.Hang.mapid)
}

// required int32 exp = 3;
inline bool Hang::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Hang::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Hang::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Hang::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 Hang::exp() const {
  // @@protoc_insertion_point(field_get:CfgHang.Hang.exp)
  return exp_;
}
inline void Hang::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:CfgHang.Hang.exp)
}

// required int32 coin = 4;
inline bool Hang::has_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Hang::set_has_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Hang::clear_has_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Hang::clear_coin() {
  coin_ = 0;
  clear_has_coin();
}
inline ::google::protobuf::int32 Hang::coin() const {
  // @@protoc_insertion_point(field_get:CfgHang.Hang.coin)
  return coin_;
}
inline void Hang::set_coin(::google::protobuf::int32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:CfgHang.Hang.coin)
}

// required int32 plan = 5;
inline bool Hang::has_plan() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Hang::set_has_plan() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Hang::clear_has_plan() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Hang::clear_plan() {
  plan_ = 0;
  clear_has_plan();
}
inline ::google::protobuf::int32 Hang::plan() const {
  // @@protoc_insertion_point(field_get:CfgHang.Hang.plan)
  return plan_;
}
inline void Hang::set_plan(::google::protobuf::int32 value) {
  set_has_plan();
  plan_ = value;
  // @@protoc_insertion_point(field_set:CfgHang.Hang.plan)
}

// required int32 power = 6;
inline bool Hang::has_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Hang::set_has_power() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Hang::clear_has_power() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Hang::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 Hang::power() const {
  // @@protoc_insertion_point(field_get:CfgHang.Hang.power)
  return power_;
}
inline void Hang::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:CfgHang.Hang.power)
}

// -------------------------------------------------------------------

// Hangs

// repeated .CfgHang.Hang hangs = 1;
inline int Hangs::hangs_size() const {
  return hangs_.size();
}
inline void Hangs::clear_hangs() {
  hangs_.Clear();
}
inline const ::CfgHang::Hang& Hangs::hangs(int index) const {
  // @@protoc_insertion_point(field_get:CfgHang.Hangs.hangs)
  return hangs_.Get(index);
}
inline ::CfgHang::Hang* Hangs::mutable_hangs(int index) {
  // @@protoc_insertion_point(field_mutable:CfgHang.Hangs.hangs)
  return hangs_.Mutable(index);
}
inline ::CfgHang::Hang* Hangs::add_hangs() {
  // @@protoc_insertion_point(field_add:CfgHang.Hangs.hangs)
  return hangs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgHang::Hang >&
Hangs::hangs() const {
  // @@protoc_insertion_point(field_list:CfgHang.Hangs.hangs)
  return hangs_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgHang::Hang >*
Hangs::mutable_hangs() {
  // @@protoc_insertion_point(field_mutable_list:CfgHang.Hangs.hangs)
  return &hangs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgHang

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CfgHang_2eproto__INCLUDED
