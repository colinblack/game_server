// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgPartnerIsland.proto

#ifndef PROTOBUF_CfgPartnerIsland_2eproto__INCLUDED
#define PROTOBUF_CfgPartnerIsland_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CfgCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace CfgPartnerIsland {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CfgPartnerIsland_2eproto();
void protobuf_AssignDesc_CfgPartnerIsland_2eproto();
void protobuf_ShutdownFile_CfgPartnerIsland_2eproto();

class PartnerIsland;
class PartnerIslands;

// ===================================================================

class PartnerIsland : public ::google::protobuf::Message {
 public:
  PartnerIsland();
  virtual ~PartnerIsland();

  PartnerIsland(const PartnerIsland& from);

  inline PartnerIsland& operator=(const PartnerIsland& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartnerIsland& default_instance();

  void Swap(PartnerIsland* other);

  // implements Message ----------------------------------------------

  PartnerIsland* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PartnerIsland& from);
  void MergeFrom(const PartnerIsland& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 layer = 1;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline ::google::protobuf::uint32 layer() const;
  inline void set_layer(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .CfgCommon.Reward reward = 3;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::CfgCommon::Reward& reward(int index) const;
  inline ::CfgCommon::Reward* mutable_reward(int index);
  inline ::CfgCommon::Reward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >*
      mutable_reward();

  // repeated .CfgCommon.Reward exReward = 4;
  inline int exreward_size() const;
  inline void clear_exreward();
  static const int kExRewardFieldNumber = 4;
  inline const ::CfgCommon::Reward& exreward(int index) const;
  inline ::CfgCommon::Reward* mutable_exreward(int index);
  inline ::CfgCommon::Reward* add_exreward();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >&
      exreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >*
      mutable_exreward();

  // @@protoc_insertion_point(class_scope:CfgPartnerIsland.PartnerIsland)
 private:
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layer_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward > reward_;
  ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward > exreward_;
  friend void  protobuf_AddDesc_CfgPartnerIsland_2eproto();
  friend void protobuf_AssignDesc_CfgPartnerIsland_2eproto();
  friend void protobuf_ShutdownFile_CfgPartnerIsland_2eproto();

  void InitAsDefaultInstance();
  static PartnerIsland* default_instance_;
};
// -------------------------------------------------------------------

class PartnerIslands : public ::google::protobuf::Message {
 public:
  PartnerIslands();
  virtual ~PartnerIslands();

  PartnerIslands(const PartnerIslands& from);

  inline PartnerIslands& operator=(const PartnerIslands& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartnerIslands& default_instance();

  void Swap(PartnerIslands* other);

  // implements Message ----------------------------------------------

  PartnerIslands* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PartnerIslands& from);
  void MergeFrom(const PartnerIslands& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgPartnerIsland.PartnerIsland partner_islands = 1;
  inline int partner_islands_size() const;
  inline void clear_partner_islands();
  static const int kPartnerIslandsFieldNumber = 1;
  inline const ::CfgPartnerIsland::PartnerIsland& partner_islands(int index) const;
  inline ::CfgPartnerIsland::PartnerIsland* mutable_partner_islands(int index);
  inline ::CfgPartnerIsland::PartnerIsland* add_partner_islands();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgPartnerIsland::PartnerIsland >&
      partner_islands() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgPartnerIsland::PartnerIsland >*
      mutable_partner_islands();

  // @@protoc_insertion_point(class_scope:CfgPartnerIsland.PartnerIslands)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgPartnerIsland::PartnerIsland > partner_islands_;
  friend void  protobuf_AddDesc_CfgPartnerIsland_2eproto();
  friend void protobuf_AssignDesc_CfgPartnerIsland_2eproto();
  friend void protobuf_ShutdownFile_CfgPartnerIsland_2eproto();

  void InitAsDefaultInstance();
  static PartnerIslands* default_instance_;
};
// ===================================================================


// ===================================================================

// PartnerIsland

// required uint32 layer = 1;
inline bool PartnerIsland::has_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PartnerIsland::set_has_layer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PartnerIsland::clear_has_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PartnerIsland::clear_layer() {
  layer_ = 0u;
  clear_has_layer();
}
inline ::google::protobuf::uint32 PartnerIsland::layer() const {
  // @@protoc_insertion_point(field_get:CfgPartnerIsland.PartnerIsland.layer)
  return layer_;
}
inline void PartnerIsland::set_layer(::google::protobuf::uint32 value) {
  set_has_layer();
  layer_ = value;
  // @@protoc_insertion_point(field_set:CfgPartnerIsland.PartnerIsland.layer)
}

// required uint32 type = 2;
inline bool PartnerIsland::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PartnerIsland::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PartnerIsland::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PartnerIsland::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PartnerIsland::type() const {
  // @@protoc_insertion_point(field_get:CfgPartnerIsland.PartnerIsland.type)
  return type_;
}
inline void PartnerIsland::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CfgPartnerIsland.PartnerIsland.type)
}

// repeated .CfgCommon.Reward reward = 3;
inline int PartnerIsland::reward_size() const {
  return reward_.size();
}
inline void PartnerIsland::clear_reward() {
  reward_.Clear();
}
inline const ::CfgCommon::Reward& PartnerIsland::reward(int index) const {
  // @@protoc_insertion_point(field_get:CfgPartnerIsland.PartnerIsland.reward)
  return reward_.Get(index);
}
inline ::CfgCommon::Reward* PartnerIsland::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:CfgPartnerIsland.PartnerIsland.reward)
  return reward_.Mutable(index);
}
inline ::CfgCommon::Reward* PartnerIsland::add_reward() {
  // @@protoc_insertion_point(field_add:CfgPartnerIsland.PartnerIsland.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >&
PartnerIsland::reward() const {
  // @@protoc_insertion_point(field_list:CfgPartnerIsland.PartnerIsland.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >*
PartnerIsland::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:CfgPartnerIsland.PartnerIsland.reward)
  return &reward_;
}

// repeated .CfgCommon.Reward exReward = 4;
inline int PartnerIsland::exreward_size() const {
  return exreward_.size();
}
inline void PartnerIsland::clear_exreward() {
  exreward_.Clear();
}
inline const ::CfgCommon::Reward& PartnerIsland::exreward(int index) const {
  // @@protoc_insertion_point(field_get:CfgPartnerIsland.PartnerIsland.exReward)
  return exreward_.Get(index);
}
inline ::CfgCommon::Reward* PartnerIsland::mutable_exreward(int index) {
  // @@protoc_insertion_point(field_mutable:CfgPartnerIsland.PartnerIsland.exReward)
  return exreward_.Mutable(index);
}
inline ::CfgCommon::Reward* PartnerIsland::add_exreward() {
  // @@protoc_insertion_point(field_add:CfgPartnerIsland.PartnerIsland.exReward)
  return exreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >&
PartnerIsland::exreward() const {
  // @@protoc_insertion_point(field_list:CfgPartnerIsland.PartnerIsland.exReward)
  return exreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >*
PartnerIsland::mutable_exreward() {
  // @@protoc_insertion_point(field_mutable_list:CfgPartnerIsland.PartnerIsland.exReward)
  return &exreward_;
}

// -------------------------------------------------------------------

// PartnerIslands

// repeated .CfgPartnerIsland.PartnerIsland partner_islands = 1;
inline int PartnerIslands::partner_islands_size() const {
  return partner_islands_.size();
}
inline void PartnerIslands::clear_partner_islands() {
  partner_islands_.Clear();
}
inline const ::CfgPartnerIsland::PartnerIsland& PartnerIslands::partner_islands(int index) const {
  // @@protoc_insertion_point(field_get:CfgPartnerIsland.PartnerIslands.partner_islands)
  return partner_islands_.Get(index);
}
inline ::CfgPartnerIsland::PartnerIsland* PartnerIslands::mutable_partner_islands(int index) {
  // @@protoc_insertion_point(field_mutable:CfgPartnerIsland.PartnerIslands.partner_islands)
  return partner_islands_.Mutable(index);
}
inline ::CfgPartnerIsland::PartnerIsland* PartnerIslands::add_partner_islands() {
  // @@protoc_insertion_point(field_add:CfgPartnerIsland.PartnerIslands.partner_islands)
  return partner_islands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgPartnerIsland::PartnerIsland >&
PartnerIslands::partner_islands() const {
  // @@protoc_insertion_point(field_list:CfgPartnerIsland.PartnerIslands.partner_islands)
  return partner_islands_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgPartnerIsland::PartnerIsland >*
PartnerIslands::mutable_partner_islands() {
  // @@protoc_insertion_point(field_mutable_list:CfgPartnerIsland.PartnerIslands.partner_islands)
  return &partner_islands_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgPartnerIsland

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CfgPartnerIsland_2eproto__INCLUDED
