// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgMagic.proto

#ifndef PROTOBUF_CfgMagic_2eproto__INCLUDED
#define PROTOBUF_CfgMagic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CfgCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace CfgMagic {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CfgMagic_2eproto();
void protobuf_AssignDesc_CfgMagic_2eproto();
void protobuf_ShutdownFile_CfgMagic_2eproto();

class Magic;
class Magics;
class MagicTower;
class MagicTowers;

// ===================================================================

class Magic : public ::google::protobuf::Message {
 public:
  Magic();
  virtual ~Magic();

  Magic(const Magic& from);

  inline Magic& operator=(const Magic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Magic& default_instance();

  void Swap(Magic* other);

  // implements Message ----------------------------------------------

  Magic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Magic& from);
  void MergeFrom(const Magic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 attrType = 1;
  inline bool has_attrtype() const;
  inline void clear_attrtype();
  static const int kAttrTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 attrtype() const;
  inline void set_attrtype(::google::protobuf::uint32 value);

  // required uint32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // required uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 lock = 5;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 5;
  inline ::google::protobuf::uint32 lock() const;
  inline void set_lock(::google::protobuf::uint32 value);

  // required uint32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 id = 7;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 7;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint64 smelt = 8;
  inline bool has_smelt() const;
  inline void clear_smelt();
  static const int kSmeltFieldNumber = 8;
  inline ::google::protobuf::uint64 smelt() const;
  inline void set_smelt(::google::protobuf::uint64 value);

  // repeated uint32 attrCal = 9;
  inline int attrcal_size() const;
  inline void clear_attrcal();
  static const int kAttrCalFieldNumber = 9;
  inline ::google::protobuf::uint32 attrcal(int index) const;
  inline void set_attrcal(int index, ::google::protobuf::uint32 value);
  inline void add_attrcal(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      attrcal() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_attrcal();

  // repeated uint32 expCal = 10;
  inline int expcal_size() const;
  inline void clear_expcal();
  static const int kExpCalFieldNumber = 10;
  inline ::google::protobuf::uint32 expcal(int index) const;
  inline void set_expcal(int index, ::google::protobuf::uint32 value);
  inline void add_expcal(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      expcal() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_expcal();

  // repeated uint64 smeltCal = 11;
  inline int smeltcal_size() const;
  inline void clear_smeltcal();
  static const int kSmeltCalFieldNumber = 11;
  inline ::google::protobuf::uint64 smeltcal(int index) const;
  inline void set_smeltcal(int index, ::google::protobuf::uint64 value);
  inline void add_smeltcal(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      smeltcal() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_smeltcal();

  // repeated .CfgCommon.Attribute attr = 12;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 12;
  inline const ::CfgCommon::Attribute& attr(int index) const;
  inline ::CfgCommon::Attribute* mutable_attr(int index);
  inline ::CfgCommon::Attribute* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute >*
      mutable_attr();

  // @@protoc_insertion_point(class_scope:CfgMagic.Magic)
 private:
  inline void set_has_attrtype();
  inline void clear_has_attrtype();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_lock();
  inline void clear_has_lock();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_smelt();
  inline void clear_has_smelt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 attrtype_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 lock_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint64 smelt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > attrcal_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > expcal_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > smeltcal_;
  ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute > attr_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_CfgMagic_2eproto();
  friend void protobuf_AssignDesc_CfgMagic_2eproto();
  friend void protobuf_ShutdownFile_CfgMagic_2eproto();

  void InitAsDefaultInstance();
  static Magic* default_instance_;
};
// -------------------------------------------------------------------

class Magics : public ::google::protobuf::Message {
 public:
  Magics();
  virtual ~Magics();

  Magics(const Magics& from);

  inline Magics& operator=(const Magics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Magics& default_instance();

  void Swap(Magics* other);

  // implements Message ----------------------------------------------

  Magics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Magics& from);
  void MergeFrom(const Magics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgMagic.Magic magics = 1;
  inline int magics_size() const;
  inline void clear_magics();
  static const int kMagicsFieldNumber = 1;
  inline const ::CfgMagic::Magic& magics(int index) const;
  inline ::CfgMagic::Magic* mutable_magics(int index);
  inline ::CfgMagic::Magic* add_magics();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMagic::Magic >&
      magics() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMagic::Magic >*
      mutable_magics();

  // @@protoc_insertion_point(class_scope:CfgMagic.Magics)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgMagic::Magic > magics_;
  friend void  protobuf_AddDesc_CfgMagic_2eproto();
  friend void protobuf_AssignDesc_CfgMagic_2eproto();
  friend void protobuf_ShutdownFile_CfgMagic_2eproto();

  void InitAsDefaultInstance();
  static Magics* default_instance_;
};
// -------------------------------------------------------------------

class MagicTower : public ::google::protobuf::Message {
 public:
  MagicTower();
  virtual ~MagicTower();

  MagicTower(const MagicTower& from);

  inline MagicTower& operator=(const MagicTower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MagicTower& default_instance();

  void Swap(MagicTower* other);

  // implements Message ----------------------------------------------

  MagicTower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MagicTower& from);
  void MergeFrom(const MagicTower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 dailyReward = 2;
  inline bool has_dailyreward() const;
  inline void clear_dailyreward();
  static const int kDailyRewardFieldNumber = 2;
  inline ::google::protobuf::uint32 dailyreward() const;
  inline void set_dailyreward(::google::protobuf::uint32 value);

  // repeated .CfgCommon.Reward reward = 3;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::CfgCommon::Reward& reward(int index) const;
  inline ::CfgCommon::Reward* mutable_reward(int index);
  inline ::CfgCommon::Reward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:CfgMagic.MagicTower)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_dailyreward();
  inline void clear_has_dailyreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 dailyreward_;
  ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward > reward_;
  friend void  protobuf_AddDesc_CfgMagic_2eproto();
  friend void protobuf_AssignDesc_CfgMagic_2eproto();
  friend void protobuf_ShutdownFile_CfgMagic_2eproto();

  void InitAsDefaultInstance();
  static MagicTower* default_instance_;
};
// -------------------------------------------------------------------

class MagicTowers : public ::google::protobuf::Message {
 public:
  MagicTowers();
  virtual ~MagicTowers();

  MagicTowers(const MagicTowers& from);

  inline MagicTowers& operator=(const MagicTowers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MagicTowers& default_instance();

  void Swap(MagicTowers* other);

  // implements Message ----------------------------------------------

  MagicTowers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MagicTowers& from);
  void MergeFrom(const MagicTowers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgMagic.MagicTower magic_towers = 1;
  inline int magic_towers_size() const;
  inline void clear_magic_towers();
  static const int kMagicTowersFieldNumber = 1;
  inline const ::CfgMagic::MagicTower& magic_towers(int index) const;
  inline ::CfgMagic::MagicTower* mutable_magic_towers(int index);
  inline ::CfgMagic::MagicTower* add_magic_towers();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMagic::MagicTower >&
      magic_towers() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMagic::MagicTower >*
      mutable_magic_towers();

  // @@protoc_insertion_point(class_scope:CfgMagic.MagicTowers)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgMagic::MagicTower > magic_towers_;
  friend void  protobuf_AddDesc_CfgMagic_2eproto();
  friend void protobuf_AssignDesc_CfgMagic_2eproto();
  friend void protobuf_ShutdownFile_CfgMagic_2eproto();

  void InitAsDefaultInstance();
  static MagicTowers* default_instance_;
};
// ===================================================================


// ===================================================================

// Magic

// required uint32 attrType = 1;
inline bool Magic::has_attrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Magic::set_has_attrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Magic::clear_has_attrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Magic::clear_attrtype() {
  attrtype_ = 0u;
  clear_has_attrtype();
}
inline ::google::protobuf::uint32 Magic::attrtype() const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.attrType)
  return attrtype_;
}
inline void Magic::set_attrtype(::google::protobuf::uint32 value) {
  set_has_attrtype();
  attrtype_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.attrType)
}

// required uint32 color = 2;
inline bool Magic::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Magic::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Magic::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Magic::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 Magic::color() const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.color)
  return color_;
}
inline void Magic::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.color)
}

// required uint32 exp = 3;
inline bool Magic::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Magic::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Magic::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Magic::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 Magic::exp() const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.exp)
  return exp_;
}
inline void Magic::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.exp)
}

// required uint32 level = 4;
inline bool Magic::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Magic::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Magic::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Magic::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Magic::level() const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.level)
  return level_;
}
inline void Magic::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.level)
}

// required uint32 lock = 5;
inline bool Magic::has_lock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Magic::set_has_lock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Magic::clear_has_lock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Magic::clear_lock() {
  lock_ = 0u;
  clear_has_lock();
}
inline ::google::protobuf::uint32 Magic::lock() const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.lock)
  return lock_;
}
inline void Magic::set_lock(::google::protobuf::uint32 value) {
  set_has_lock();
  lock_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.lock)
}

// required uint32 type = 6;
inline bool Magic::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Magic::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Magic::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Magic::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Magic::type() const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.type)
  return type_;
}
inline void Magic::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.type)
}

// required uint32 id = 7;
inline bool Magic::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Magic::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Magic::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Magic::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Magic::id() const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.id)
  return id_;
}
inline void Magic::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.id)
}

// required uint64 smelt = 8;
inline bool Magic::has_smelt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Magic::set_has_smelt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Magic::clear_has_smelt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Magic::clear_smelt() {
  smelt_ = GOOGLE_ULONGLONG(0);
  clear_has_smelt();
}
inline ::google::protobuf::uint64 Magic::smelt() const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.smelt)
  return smelt_;
}
inline void Magic::set_smelt(::google::protobuf::uint64 value) {
  set_has_smelt();
  smelt_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.smelt)
}

// repeated uint32 attrCal = 9;
inline int Magic::attrcal_size() const {
  return attrcal_.size();
}
inline void Magic::clear_attrcal() {
  attrcal_.Clear();
}
inline ::google::protobuf::uint32 Magic::attrcal(int index) const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.attrCal)
  return attrcal_.Get(index);
}
inline void Magic::set_attrcal(int index, ::google::protobuf::uint32 value) {
  attrcal_.Set(index, value);
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.attrCal)
}
inline void Magic::add_attrcal(::google::protobuf::uint32 value) {
  attrcal_.Add(value);
  // @@protoc_insertion_point(field_add:CfgMagic.Magic.attrCal)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Magic::attrcal() const {
  // @@protoc_insertion_point(field_list:CfgMagic.Magic.attrCal)
  return attrcal_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Magic::mutable_attrcal() {
  // @@protoc_insertion_point(field_mutable_list:CfgMagic.Magic.attrCal)
  return &attrcal_;
}

// repeated uint32 expCal = 10;
inline int Magic::expcal_size() const {
  return expcal_.size();
}
inline void Magic::clear_expcal() {
  expcal_.Clear();
}
inline ::google::protobuf::uint32 Magic::expcal(int index) const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.expCal)
  return expcal_.Get(index);
}
inline void Magic::set_expcal(int index, ::google::protobuf::uint32 value) {
  expcal_.Set(index, value);
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.expCal)
}
inline void Magic::add_expcal(::google::protobuf::uint32 value) {
  expcal_.Add(value);
  // @@protoc_insertion_point(field_add:CfgMagic.Magic.expCal)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Magic::expcal() const {
  // @@protoc_insertion_point(field_list:CfgMagic.Magic.expCal)
  return expcal_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Magic::mutable_expcal() {
  // @@protoc_insertion_point(field_mutable_list:CfgMagic.Magic.expCal)
  return &expcal_;
}

// repeated uint64 smeltCal = 11;
inline int Magic::smeltcal_size() const {
  return smeltcal_.size();
}
inline void Magic::clear_smeltcal() {
  smeltcal_.Clear();
}
inline ::google::protobuf::uint64 Magic::smeltcal(int index) const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.smeltCal)
  return smeltcal_.Get(index);
}
inline void Magic::set_smeltcal(int index, ::google::protobuf::uint64 value) {
  smeltcal_.Set(index, value);
  // @@protoc_insertion_point(field_set:CfgMagic.Magic.smeltCal)
}
inline void Magic::add_smeltcal(::google::protobuf::uint64 value) {
  smeltcal_.Add(value);
  // @@protoc_insertion_point(field_add:CfgMagic.Magic.smeltCal)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Magic::smeltcal() const {
  // @@protoc_insertion_point(field_list:CfgMagic.Magic.smeltCal)
  return smeltcal_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Magic::mutable_smeltcal() {
  // @@protoc_insertion_point(field_mutable_list:CfgMagic.Magic.smeltCal)
  return &smeltcal_;
}

// repeated .CfgCommon.Attribute attr = 12;
inline int Magic::attr_size() const {
  return attr_.size();
}
inline void Magic::clear_attr() {
  attr_.Clear();
}
inline const ::CfgCommon::Attribute& Magic::attr(int index) const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magic.attr)
  return attr_.Get(index);
}
inline ::CfgCommon::Attribute* Magic::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMagic.Magic.attr)
  return attr_.Mutable(index);
}
inline ::CfgCommon::Attribute* Magic::add_attr() {
  // @@protoc_insertion_point(field_add:CfgMagic.Magic.attr)
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute >&
Magic::attr() const {
  // @@protoc_insertion_point(field_list:CfgMagic.Magic.attr)
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute >*
Magic::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:CfgMagic.Magic.attr)
  return &attr_;
}

// -------------------------------------------------------------------

// Magics

// repeated .CfgMagic.Magic magics = 1;
inline int Magics::magics_size() const {
  return magics_.size();
}
inline void Magics::clear_magics() {
  magics_.Clear();
}
inline const ::CfgMagic::Magic& Magics::magics(int index) const {
  // @@protoc_insertion_point(field_get:CfgMagic.Magics.magics)
  return magics_.Get(index);
}
inline ::CfgMagic::Magic* Magics::mutable_magics(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMagic.Magics.magics)
  return magics_.Mutable(index);
}
inline ::CfgMagic::Magic* Magics::add_magics() {
  // @@protoc_insertion_point(field_add:CfgMagic.Magics.magics)
  return magics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMagic::Magic >&
Magics::magics() const {
  // @@protoc_insertion_point(field_list:CfgMagic.Magics.magics)
  return magics_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMagic::Magic >*
Magics::mutable_magics() {
  // @@protoc_insertion_point(field_mutable_list:CfgMagic.Magics.magics)
  return &magics_;
}

// -------------------------------------------------------------------

// MagicTower

// required uint32 id = 1;
inline bool MagicTower::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MagicTower::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MagicTower::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MagicTower::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MagicTower::id() const {
  // @@protoc_insertion_point(field_get:CfgMagic.MagicTower.id)
  return id_;
}
inline void MagicTower::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.MagicTower.id)
}

// required uint32 dailyReward = 2;
inline bool MagicTower::has_dailyreward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MagicTower::set_has_dailyreward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MagicTower::clear_has_dailyreward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MagicTower::clear_dailyreward() {
  dailyreward_ = 0u;
  clear_has_dailyreward();
}
inline ::google::protobuf::uint32 MagicTower::dailyreward() const {
  // @@protoc_insertion_point(field_get:CfgMagic.MagicTower.dailyReward)
  return dailyreward_;
}
inline void MagicTower::set_dailyreward(::google::protobuf::uint32 value) {
  set_has_dailyreward();
  dailyreward_ = value;
  // @@protoc_insertion_point(field_set:CfgMagic.MagicTower.dailyReward)
}

// repeated .CfgCommon.Reward reward = 3;
inline int MagicTower::reward_size() const {
  return reward_.size();
}
inline void MagicTower::clear_reward() {
  reward_.Clear();
}
inline const ::CfgCommon::Reward& MagicTower::reward(int index) const {
  // @@protoc_insertion_point(field_get:CfgMagic.MagicTower.reward)
  return reward_.Get(index);
}
inline ::CfgCommon::Reward* MagicTower::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMagic.MagicTower.reward)
  return reward_.Mutable(index);
}
inline ::CfgCommon::Reward* MagicTower::add_reward() {
  // @@protoc_insertion_point(field_add:CfgMagic.MagicTower.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >&
MagicTower::reward() const {
  // @@protoc_insertion_point(field_list:CfgMagic.MagicTower.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >*
MagicTower::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:CfgMagic.MagicTower.reward)
  return &reward_;
}

// -------------------------------------------------------------------

// MagicTowers

// repeated .CfgMagic.MagicTower magic_towers = 1;
inline int MagicTowers::magic_towers_size() const {
  return magic_towers_.size();
}
inline void MagicTowers::clear_magic_towers() {
  magic_towers_.Clear();
}
inline const ::CfgMagic::MagicTower& MagicTowers::magic_towers(int index) const {
  // @@protoc_insertion_point(field_get:CfgMagic.MagicTowers.magic_towers)
  return magic_towers_.Get(index);
}
inline ::CfgMagic::MagicTower* MagicTowers::mutable_magic_towers(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMagic.MagicTowers.magic_towers)
  return magic_towers_.Mutable(index);
}
inline ::CfgMagic::MagicTower* MagicTowers::add_magic_towers() {
  // @@protoc_insertion_point(field_add:CfgMagic.MagicTowers.magic_towers)
  return magic_towers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMagic::MagicTower >&
MagicTowers::magic_towers() const {
  // @@protoc_insertion_point(field_list:CfgMagic.MagicTowers.magic_towers)
  return magic_towers_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMagic::MagicTower >*
MagicTowers::mutable_magic_towers() {
  // @@protoc_insertion_point(field_mutable_list:CfgMagic.MagicTowers.magic_towers)
  return &magic_towers_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgMagic

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CfgMagic_2eproto__INCLUDED
