// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgPartnerIsland.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgPartnerIsland.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgPartnerIsland {

namespace {

const ::google::protobuf::Descriptor* PartnerIsland_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartnerIsland_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartnerIslands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartnerIslands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgPartnerIsland_2eproto() {
  protobuf_AddDesc_CfgPartnerIsland_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgPartnerIsland.proto");
  GOOGLE_CHECK(file != NULL);
  PartnerIsland_descriptor_ = file->message_type(0);
  static const int PartnerIsland_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerIsland, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerIsland, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerIsland, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerIsland, exreward_),
  };
  PartnerIsland_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartnerIsland_descriptor_,
      PartnerIsland::default_instance_,
      PartnerIsland_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerIsland, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerIsland, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartnerIsland));
  PartnerIslands_descriptor_ = file->message_type(1);
  static const int PartnerIslands_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerIslands, partner_islands_),
  };
  PartnerIslands_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartnerIslands_descriptor_,
      PartnerIslands::default_instance_,
      PartnerIslands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerIslands, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartnerIslands, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartnerIslands));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgPartnerIsland_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartnerIsland_descriptor_, &PartnerIsland::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartnerIslands_descriptor_, &PartnerIslands::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgPartnerIsland_2eproto() {
  delete PartnerIsland::default_instance_;
  delete PartnerIsland_reflection_;
  delete PartnerIslands::default_instance_;
  delete PartnerIslands_reflection_;
}

void protobuf_AddDesc_CfgPartnerIsland_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026CfgPartnerIsland.proto\022\020CfgPartnerIsla"
    "nd\032\017CfgCommon.proto\"t\n\rPartnerIsland\022\r\n\005"
    "layer\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022!\n\006reward\030\003 \003("
    "\0132\021.CfgCommon.Reward\022#\n\010exReward\030\004 \003(\0132\021"
    ".CfgCommon.Reward\"J\n\016PartnerIslands\0228\n\017p"
    "artner_islands\030\001 \003(\0132\037.CfgPartnerIsland."
    "PartnerIsland", 253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgPartnerIsland.proto", &protobuf_RegisterTypes);
  PartnerIsland::default_instance_ = new PartnerIsland();
  PartnerIslands::default_instance_ = new PartnerIslands();
  PartnerIsland::default_instance_->InitAsDefaultInstance();
  PartnerIslands::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgPartnerIsland_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgPartnerIsland_2eproto {
  StaticDescriptorInitializer_CfgPartnerIsland_2eproto() {
    protobuf_AddDesc_CfgPartnerIsland_2eproto();
  }
} static_descriptor_initializer_CfgPartnerIsland_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PartnerIsland::kLayerFieldNumber;
const int PartnerIsland::kTypeFieldNumber;
const int PartnerIsland::kRewardFieldNumber;
const int PartnerIsland::kExRewardFieldNumber;
#endif  // !_MSC_VER

PartnerIsland::PartnerIsland()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgPartnerIsland.PartnerIsland)
}

void PartnerIsland::InitAsDefaultInstance() {
}

PartnerIsland::PartnerIsland(const PartnerIsland& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgPartnerIsland.PartnerIsland)
}

void PartnerIsland::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartnerIsland::~PartnerIsland() {
  // @@protoc_insertion_point(destructor:CfgPartnerIsland.PartnerIsland)
  SharedDtor();
}

void PartnerIsland::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartnerIsland::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartnerIsland::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartnerIsland_descriptor_;
}

const PartnerIsland& PartnerIsland::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgPartnerIsland_2eproto();
  return *default_instance_;
}

PartnerIsland* PartnerIsland::default_instance_ = NULL;

PartnerIsland* PartnerIsland::New() const {
  return new PartnerIsland;
}

void PartnerIsland::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PartnerIsland*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(layer_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  exreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartnerIsland::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgPartnerIsland.PartnerIsland)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 layer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .CfgCommon.Reward reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectTag(34)) goto parse_exReward;
        break;
      }

      // repeated .CfgCommon.Reward exReward = 4;
      case 4: {
        if (tag == 34) {
         parse_exReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgPartnerIsland.PartnerIsland)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgPartnerIsland.PartnerIsland)
  return false;
#undef DO_
}

void PartnerIsland::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgPartnerIsland.PartnerIsland)
  // required uint32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layer(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // repeated .CfgCommon.Reward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  // repeated .CfgCommon.Reward exReward = 4;
  for (int i = 0; i < this->exreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->exreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgPartnerIsland.PartnerIsland)
}

::google::protobuf::uint8* PartnerIsland::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgPartnerIsland.PartnerIsland)
  // required uint32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layer(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // repeated .CfgCommon.Reward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  // repeated .CfgCommon.Reward exReward = 4;
  for (int i = 0; i < this->exreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->exreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgPartnerIsland.PartnerIsland)
  return target;
}

int PartnerIsland::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .CfgCommon.Reward reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .CfgCommon.Reward exReward = 4;
  total_size += 1 * this->exreward_size();
  for (int i = 0; i < this->exreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartnerIsland::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartnerIsland* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartnerIsland*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartnerIsland::MergeFrom(const PartnerIsland& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  exreward_.MergeFrom(from.exreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartnerIsland::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartnerIsland::CopyFrom(const PartnerIsland& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartnerIsland::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->exreward())) return false;
  return true;
}

void PartnerIsland::Swap(PartnerIsland* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(type_, other->type_);
    reward_.Swap(&other->reward_);
    exreward_.Swap(&other->exreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartnerIsland::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartnerIsland_descriptor_;
  metadata.reflection = PartnerIsland_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartnerIslands::kPartnerIslandsFieldNumber;
#endif  // !_MSC_VER

PartnerIslands::PartnerIslands()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgPartnerIsland.PartnerIslands)
}

void PartnerIslands::InitAsDefaultInstance() {
}

PartnerIslands::PartnerIslands(const PartnerIslands& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgPartnerIsland.PartnerIslands)
}

void PartnerIslands::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartnerIslands::~PartnerIslands() {
  // @@protoc_insertion_point(destructor:CfgPartnerIsland.PartnerIslands)
  SharedDtor();
}

void PartnerIslands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartnerIslands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartnerIslands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartnerIslands_descriptor_;
}

const PartnerIslands& PartnerIslands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgPartnerIsland_2eproto();
  return *default_instance_;
}

PartnerIslands* PartnerIslands::default_instance_ = NULL;

PartnerIslands* PartnerIslands::New() const {
  return new PartnerIslands;
}

void PartnerIslands::Clear() {
  partner_islands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartnerIslands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgPartnerIsland.PartnerIslands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgPartnerIsland.PartnerIsland partner_islands = 1;
      case 1: {
        if (tag == 10) {
         parse_partner_islands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partner_islands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_partner_islands;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgPartnerIsland.PartnerIslands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgPartnerIsland.PartnerIslands)
  return false;
#undef DO_
}

void PartnerIslands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgPartnerIsland.PartnerIslands)
  // repeated .CfgPartnerIsland.PartnerIsland partner_islands = 1;
  for (int i = 0; i < this->partner_islands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partner_islands(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgPartnerIsland.PartnerIslands)
}

::google::protobuf::uint8* PartnerIslands::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgPartnerIsland.PartnerIslands)
  // repeated .CfgPartnerIsland.PartnerIsland partner_islands = 1;
  for (int i = 0; i < this->partner_islands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partner_islands(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgPartnerIsland.PartnerIslands)
  return target;
}

int PartnerIslands::ByteSize() const {
  int total_size = 0;

  // repeated .CfgPartnerIsland.PartnerIsland partner_islands = 1;
  total_size += 1 * this->partner_islands_size();
  for (int i = 0; i < this->partner_islands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partner_islands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartnerIslands::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartnerIslands* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartnerIslands*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartnerIslands::MergeFrom(const PartnerIslands& from) {
  GOOGLE_CHECK_NE(&from, this);
  partner_islands_.MergeFrom(from.partner_islands_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartnerIslands::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartnerIslands::CopyFrom(const PartnerIslands& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartnerIslands::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->partner_islands())) return false;
  return true;
}

void PartnerIslands::Swap(PartnerIslands* other) {
  if (other != this) {
    partner_islands_.Swap(&other->partner_islands_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartnerIslands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartnerIslands_descriptor_;
  metadata.reflection = PartnerIslands_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgPartnerIsland

// @@protoc_insertion_point(global_scope)
