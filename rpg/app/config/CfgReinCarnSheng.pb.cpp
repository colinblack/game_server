// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgReinCarnSheng.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgReinCarnSheng.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgReinCarnSheng {

namespace {

const ::google::protobuf::Descriptor* ShengMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShengMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShengMissions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShengMissions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgReinCarnSheng_2eproto() {
  protobuf_AddDesc_CfgReinCarnSheng_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgReinCarnSheng.proto");
  GOOGLE_CHECK(file != NULL);
  ShengMission_descriptor_ = file->message_type(0);
  static const int ShengMission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMission, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMission, reincarnlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMission, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMission, rate_),
  };
  ShengMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShengMission_descriptor_,
      ShengMission::default_instance_,
      ShengMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShengMission));
  ShengMissions_descriptor_ = file->message_type(1);
  static const int ShengMissions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMissions, sheng_mission_),
  };
  ShengMissions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShengMissions_descriptor_,
      ShengMissions::default_instance_,
      ShengMissions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMissions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShengMissions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShengMissions));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgReinCarnSheng_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShengMission_descriptor_, &ShengMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShengMissions_descriptor_, &ShengMissions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgReinCarnSheng_2eproto() {
  delete ShengMission::default_instance_;
  delete ShengMission_reflection_;
  delete ShengMissions::default_instance_;
  delete ShengMissions_reflection_;
}

void protobuf_AddDesc_CfgReinCarnSheng_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026CfgReinCarnSheng.proto\022\020CfgReinCarnShe"
    "ng\032\017CfgCommon.proto\"q\n\014ShengMission\022\n\n\002i"
    "d\030\001 \002(\r\022\014\n\004part\030\002 \002(\005\022\025\n\rreincarnlevel\030\003"
    " \002(\r\022\"\n\004attr\030\004 \003(\0132\024.CfgCommon.Attribute"
    "\022\014\n\004rate\030\005 \002(\r\"F\n\rShengMissions\0225\n\rsheng"
    "_mission\030\001 \003(\0132\036.CfgReinCarnSheng.ShengM"
    "ission", 246);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgReinCarnSheng.proto", &protobuf_RegisterTypes);
  ShengMission::default_instance_ = new ShengMission();
  ShengMissions::default_instance_ = new ShengMissions();
  ShengMission::default_instance_->InitAsDefaultInstance();
  ShengMissions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgReinCarnSheng_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgReinCarnSheng_2eproto {
  StaticDescriptorInitializer_CfgReinCarnSheng_2eproto() {
    protobuf_AddDesc_CfgReinCarnSheng_2eproto();
  }
} static_descriptor_initializer_CfgReinCarnSheng_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShengMission::kIdFieldNumber;
const int ShengMission::kPartFieldNumber;
const int ShengMission::kReincarnlevelFieldNumber;
const int ShengMission::kAttrFieldNumber;
const int ShengMission::kRateFieldNumber;
#endif  // !_MSC_VER

ShengMission::ShengMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgReinCarnSheng.ShengMission)
}

void ShengMission::InitAsDefaultInstance() {
}

ShengMission::ShengMission(const ShengMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgReinCarnSheng.ShengMission)
}

void ShengMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  part_ = 0;
  reincarnlevel_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShengMission::~ShengMission() {
  // @@protoc_insertion_point(destructor:CfgReinCarnSheng.ShengMission)
  SharedDtor();
}

void ShengMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShengMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShengMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShengMission_descriptor_;
}

const ShengMission& ShengMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgReinCarnSheng_2eproto();
  return *default_instance_;
}

ShengMission* ShengMission::default_instance_ = NULL;

ShengMission* ShengMission::New() const {
  return new ShengMission;
}

void ShengMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShengMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, part_);
  ZR_(reincarnlevel_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShengMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgReinCarnSheng.ShengMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_part;
        break;
      }

      // required int32 part = 2;
      case 2: {
        if (tag == 16) {
         parse_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reincarnlevel;
        break;
      }

      // required uint32 reincarnlevel = 3;
      case 3: {
        if (tag == 24) {
         parse_reincarnlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reincarnlevel_)));
          set_has_reincarnlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attr;
        break;
      }

      // repeated .CfgCommon.Attribute attr = 4;
      case 4: {
        if (tag == 34) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attr;
        if (input->ExpectTag(40)) goto parse_rate;
        break;
      }

      // required uint32 rate = 5;
      case 5: {
        if (tag == 40) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgReinCarnSheng.ShengMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgReinCarnSheng.ShengMission)
  return false;
#undef DO_
}

void ShengMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgReinCarnSheng.ShengMission)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int32 part = 2;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->part(), output);
  }

  // required uint32 reincarnlevel = 3;
  if (has_reincarnlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reincarnlevel(), output);
  }

  // repeated .CfgCommon.Attribute attr = 4;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attr(i), output);
  }

  // required uint32 rate = 5;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgReinCarnSheng.ShengMission)
}

::google::protobuf::uint8* ShengMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgReinCarnSheng.ShengMission)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int32 part = 2;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->part(), target);
  }

  // required uint32 reincarnlevel = 3;
  if (has_reincarnlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reincarnlevel(), target);
  }

  // repeated .CfgCommon.Attribute attr = 4;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attr(i), target);
  }

  // required uint32 rate = 5;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgReinCarnSheng.ShengMission)
  return target;
}

int ShengMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int32 part = 2;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->part());
    }

    // required uint32 reincarnlevel = 3;
    if (has_reincarnlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reincarnlevel());
    }

    // required uint32 rate = 5;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  // repeated .CfgCommon.Attribute attr = 4;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShengMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShengMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShengMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShengMission::MergeFrom(const ShengMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_reincarnlevel()) {
      set_reincarnlevel(from.reincarnlevel());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShengMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShengMission::CopyFrom(const ShengMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShengMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void ShengMission::Swap(ShengMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(part_, other->part_);
    std::swap(reincarnlevel_, other->reincarnlevel_);
    attr_.Swap(&other->attr_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShengMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShengMission_descriptor_;
  metadata.reflection = ShengMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShengMissions::kShengMissionFieldNumber;
#endif  // !_MSC_VER

ShengMissions::ShengMissions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgReinCarnSheng.ShengMissions)
}

void ShengMissions::InitAsDefaultInstance() {
}

ShengMissions::ShengMissions(const ShengMissions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgReinCarnSheng.ShengMissions)
}

void ShengMissions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShengMissions::~ShengMissions() {
  // @@protoc_insertion_point(destructor:CfgReinCarnSheng.ShengMissions)
  SharedDtor();
}

void ShengMissions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShengMissions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShengMissions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShengMissions_descriptor_;
}

const ShengMissions& ShengMissions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgReinCarnSheng_2eproto();
  return *default_instance_;
}

ShengMissions* ShengMissions::default_instance_ = NULL;

ShengMissions* ShengMissions::New() const {
  return new ShengMissions;
}

void ShengMissions::Clear() {
  sheng_mission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShengMissions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgReinCarnSheng.ShengMissions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgReinCarnSheng.ShengMission sheng_mission = 1;
      case 1: {
        if (tag == 10) {
         parse_sheng_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sheng_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_sheng_mission;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgReinCarnSheng.ShengMissions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgReinCarnSheng.ShengMissions)
  return false;
#undef DO_
}

void ShengMissions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgReinCarnSheng.ShengMissions)
  // repeated .CfgReinCarnSheng.ShengMission sheng_mission = 1;
  for (int i = 0; i < this->sheng_mission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sheng_mission(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgReinCarnSheng.ShengMissions)
}

::google::protobuf::uint8* ShengMissions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgReinCarnSheng.ShengMissions)
  // repeated .CfgReinCarnSheng.ShengMission sheng_mission = 1;
  for (int i = 0; i < this->sheng_mission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sheng_mission(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgReinCarnSheng.ShengMissions)
  return target;
}

int ShengMissions::ByteSize() const {
  int total_size = 0;

  // repeated .CfgReinCarnSheng.ShengMission sheng_mission = 1;
  total_size += 1 * this->sheng_mission_size();
  for (int i = 0; i < this->sheng_mission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sheng_mission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShengMissions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShengMissions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShengMissions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShengMissions::MergeFrom(const ShengMissions& from) {
  GOOGLE_CHECK_NE(&from, this);
  sheng_mission_.MergeFrom(from.sheng_mission_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShengMissions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShengMissions::CopyFrom(const ShengMissions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShengMissions::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->sheng_mission())) return false;
  return true;
}

void ShengMissions::Swap(ShengMissions* other) {
  if (other != this) {
    sheng_mission_.Swap(&other->sheng_mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShengMissions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShengMissions_descriptor_;
  metadata.reflection = ShengMissions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgReinCarnSheng

// @@protoc_insertion_point(global_scope)
