// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgTitle.proto

#ifndef PROTOBUF_CfgTitle_2eproto__INCLUDED
#define PROTOBUF_CfgTitle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CfgCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace CfgTitle {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CfgTitle_2eproto();
void protobuf_AssignDesc_CfgTitle_2eproto();
void protobuf_ShutdownFile_CfgTitle_2eproto();

class Title;
class Titles;

// ===================================================================

class Title : public ::google::protobuf::Message {
 public:
  Title();
  virtual ~Title();

  Title(const Title& from);

  inline Title& operator=(const Title& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Title& default_instance();

  void Swap(Title* other);

  // implements Message ----------------------------------------------

  Title* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Title& from);
  void MergeFrom(const Title& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 limitTime = 4;
  inline bool has_limittime() const;
  inline void clear_limittime();
  static const int kLimitTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 limittime() const;
  inline void set_limittime(::google::protobuf::uint32 value);

  // repeated .CfgCommon.Attribute attr = 5;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 5;
  inline const ::CfgCommon::Attribute& attr(int index) const;
  inline ::CfgCommon::Attribute* mutable_attr(int index);
  inline ::CfgCommon::Attribute* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute >*
      mutable_attr();

  // @@protoc_insertion_point(class_scope:CfgTitle.Title)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_limittime();
  inline void clear_has_limittime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 itemid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute > attr_;
  ::google::protobuf::uint32 limittime_;
  friend void  protobuf_AddDesc_CfgTitle_2eproto();
  friend void protobuf_AssignDesc_CfgTitle_2eproto();
  friend void protobuf_ShutdownFile_CfgTitle_2eproto();

  void InitAsDefaultInstance();
  static Title* default_instance_;
};
// -------------------------------------------------------------------

class Titles : public ::google::protobuf::Message {
 public:
  Titles();
  virtual ~Titles();

  Titles(const Titles& from);

  inline Titles& operator=(const Titles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Titles& default_instance();

  void Swap(Titles* other);

  // implements Message ----------------------------------------------

  Titles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Titles& from);
  void MergeFrom(const Titles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgTitle.Title title = 1;
  inline int title_size() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::CfgTitle::Title& title(int index) const;
  inline ::CfgTitle::Title* mutable_title(int index);
  inline ::CfgTitle::Title* add_title();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgTitle::Title >&
      title() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgTitle::Title >*
      mutable_title();

  // @@protoc_insertion_point(class_scope:CfgTitle.Titles)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgTitle::Title > title_;
  friend void  protobuf_AddDesc_CfgTitle_2eproto();
  friend void protobuf_AssignDesc_CfgTitle_2eproto();
  friend void protobuf_ShutdownFile_CfgTitle_2eproto();

  void InitAsDefaultInstance();
  static Titles* default_instance_;
};
// ===================================================================


// ===================================================================

// Title

// required uint32 id = 1;
inline bool Title::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Title::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Title::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Title::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Title::id() const {
  // @@protoc_insertion_point(field_get:CfgTitle.Title.id)
  return id_;
}
inline void Title::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CfgTitle.Title.id)
}

// required uint32 itemId = 2;
inline bool Title::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Title::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Title::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Title::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 Title::itemid() const {
  // @@protoc_insertion_point(field_get:CfgTitle.Title.itemId)
  return itemid_;
}
inline void Title::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:CfgTitle.Title.itemId)
}

// required string name = 3;
inline bool Title::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Title::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Title::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Title::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Title::name() const {
  // @@protoc_insertion_point(field_get:CfgTitle.Title.name)
  return *name_;
}
inline void Title::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CfgTitle.Title.name)
}
inline void Title::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CfgTitle.Title.name)
}
inline void Title::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CfgTitle.Title.name)
}
inline ::std::string* Title::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CfgTitle.Title.name)
  return name_;
}
inline ::std::string* Title::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Title::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CfgTitle.Title.name)
}

// required uint32 limitTime = 4;
inline bool Title::has_limittime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Title::set_has_limittime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Title::clear_has_limittime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Title::clear_limittime() {
  limittime_ = 0u;
  clear_has_limittime();
}
inline ::google::protobuf::uint32 Title::limittime() const {
  // @@protoc_insertion_point(field_get:CfgTitle.Title.limitTime)
  return limittime_;
}
inline void Title::set_limittime(::google::protobuf::uint32 value) {
  set_has_limittime();
  limittime_ = value;
  // @@protoc_insertion_point(field_set:CfgTitle.Title.limitTime)
}

// repeated .CfgCommon.Attribute attr = 5;
inline int Title::attr_size() const {
  return attr_.size();
}
inline void Title::clear_attr() {
  attr_.Clear();
}
inline const ::CfgCommon::Attribute& Title::attr(int index) const {
  // @@protoc_insertion_point(field_get:CfgTitle.Title.attr)
  return attr_.Get(index);
}
inline ::CfgCommon::Attribute* Title::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:CfgTitle.Title.attr)
  return attr_.Mutable(index);
}
inline ::CfgCommon::Attribute* Title::add_attr() {
  // @@protoc_insertion_point(field_add:CfgTitle.Title.attr)
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute >&
Title::attr() const {
  // @@protoc_insertion_point(field_list:CfgTitle.Title.attr)
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Attribute >*
Title::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:CfgTitle.Title.attr)
  return &attr_;
}

// -------------------------------------------------------------------

// Titles

// repeated .CfgTitle.Title title = 1;
inline int Titles::title_size() const {
  return title_.size();
}
inline void Titles::clear_title() {
  title_.Clear();
}
inline const ::CfgTitle::Title& Titles::title(int index) const {
  // @@protoc_insertion_point(field_get:CfgTitle.Titles.title)
  return title_.Get(index);
}
inline ::CfgTitle::Title* Titles::mutable_title(int index) {
  // @@protoc_insertion_point(field_mutable:CfgTitle.Titles.title)
  return title_.Mutable(index);
}
inline ::CfgTitle::Title* Titles::add_title() {
  // @@protoc_insertion_point(field_add:CfgTitle.Titles.title)
  return title_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgTitle::Title >&
Titles::title() const {
  // @@protoc_insertion_point(field_list:CfgTitle.Titles.title)
  return title_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgTitle::Title >*
Titles::mutable_title() {
  // @@protoc_insertion_point(field_mutable_list:CfgTitle.Titles.title)
  return &title_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgTitle

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CfgTitle_2eproto__INCLUDED
