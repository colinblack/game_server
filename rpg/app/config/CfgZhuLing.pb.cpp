// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgZhuLing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgZhuLing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgZhuLing {

namespace {

const ::google::protobuf::Descriptor* zhuLing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zhuLing_reflection_ = NULL;
const ::google::protobuf::Descriptor* zhuLings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  zhuLings_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spets_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgZhuLing_2eproto() {
  protobuf_AddDesc_CfgZhuLing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgZhuLing.proto");
  GOOGLE_CHECK(file != NULL);
  zhuLing_descriptor_ = file->message_type(0);
  static const int zhuLing_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLing, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLing, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLing, consum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLing, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLing, id_),
  };
  zhuLing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      zhuLing_descriptor_,
      zhuLing::default_instance_,
      zhuLing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(zhuLing));
  zhuLings_descriptor_ = file->message_type(1);
  static const int zhuLings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLings, zhuling_),
  };
  zhuLings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      zhuLings_descriptor_,
      zhuLings::default_instance_,
      zhuLings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(zhuLings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(zhuLings));
  Spet_descriptor_ = file->message_type(2);
  static const int Spet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spet, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spet, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spet, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spet, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spet, part_),
  };
  Spet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spet_descriptor_,
      Spet::default_instance_,
      Spet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spet));
  Spets_descriptor_ = file->message_type(3);
  static const int Spets_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spets, spets_),
  };
  Spets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spets_descriptor_,
      Spets::default_instance_,
      Spets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spets));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgZhuLing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    zhuLing_descriptor_, &zhuLing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    zhuLings_descriptor_, &zhuLings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spet_descriptor_, &Spet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spets_descriptor_, &Spets::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgZhuLing_2eproto() {
  delete zhuLing::default_instance_;
  delete zhuLing_reflection_;
  delete zhuLings::default_instance_;
  delete zhuLings_reflection_;
  delete Spet::default_instance_;
  delete Spet_reflection_;
  delete Spets::default_instance_;
  delete Spets_reflection_;
}

void protobuf_AddDesc_CfgZhuLing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020CfgZhuLing.proto\022\nCfgZhuLing\032\017CfgCommo"
    "n.proto\"S\n\007zhuLing\022\017\n\007advance\030\001 \002(\r\022\014\n\004r"
    "ate\030\002 \002(\r\022\016\n\006consum\030\003 \002(\r\022\r\n\005level\030\004 \002(\r"
    "\022\n\n\002id\030\005 \002(\r\"0\n\010zhuLings\022$\n\007zhuling\030\001 \003("
    "\0132\023.CfgZhuLing.zhuLing\"r\n\004Spet\022\017\n\007advanc"
    "e\030\001 \002(\r\022\"\n\004attr\030\002 \003(\0132\024.CfgCommon.Attrib"
    "ute\022\014\n\004rate\030\003 \002(\r\022\r\n\005limit\030\004 \002(\r\022\n\n\002id\030\005"
    " \002(\r\022\014\n\004part\030\006 \002(\r\"(\n\005Spets\022\037\n\005spets\030\001 \003"
    "(\0132\020.CfgZhuLing.Spet", 340);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgZhuLing.proto", &protobuf_RegisterTypes);
  zhuLing::default_instance_ = new zhuLing();
  zhuLings::default_instance_ = new zhuLings();
  Spet::default_instance_ = new Spet();
  Spets::default_instance_ = new Spets();
  zhuLing::default_instance_->InitAsDefaultInstance();
  zhuLings::default_instance_->InitAsDefaultInstance();
  Spet::default_instance_->InitAsDefaultInstance();
  Spets::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgZhuLing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgZhuLing_2eproto {
  StaticDescriptorInitializer_CfgZhuLing_2eproto() {
    protobuf_AddDesc_CfgZhuLing_2eproto();
  }
} static_descriptor_initializer_CfgZhuLing_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int zhuLing::kAdvanceFieldNumber;
const int zhuLing::kRateFieldNumber;
const int zhuLing::kConsumFieldNumber;
const int zhuLing::kLevelFieldNumber;
const int zhuLing::kIdFieldNumber;
#endif  // !_MSC_VER

zhuLing::zhuLing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgZhuLing.zhuLing)
}

void zhuLing::InitAsDefaultInstance() {
}

zhuLing::zhuLing(const zhuLing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgZhuLing.zhuLing)
}

void zhuLing::SharedCtor() {
  _cached_size_ = 0;
  advance_ = 0u;
  rate_ = 0u;
  consum_ = 0u;
  level_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

zhuLing::~zhuLing() {
  // @@protoc_insertion_point(destructor:CfgZhuLing.zhuLing)
  SharedDtor();
}

void zhuLing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void zhuLing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zhuLing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zhuLing_descriptor_;
}

const zhuLing& zhuLing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgZhuLing_2eproto();
  return *default_instance_;
}

zhuLing* zhuLing::default_instance_ = NULL;

zhuLing* zhuLing::New() const {
  return new zhuLing;
}

void zhuLing::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<zhuLing*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(advance_, id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool zhuLing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgZhuLing.zhuLing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 advance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // required uint32 rate = 2;
      case 2: {
        if (tag == 16) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_consum;
        break;
      }

      // required uint32 consum = 3;
      case 3: {
        if (tag == 24) {
         parse_consum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consum_)));
          set_has_consum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // required uint32 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgZhuLing.zhuLing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgZhuLing.zhuLing)
  return false;
#undef DO_
}

void zhuLing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgZhuLing.zhuLing)
  // required uint32 advance = 1;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->advance(), output);
  }

  // required uint32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate(), output);
  }

  // required uint32 consum = 3;
  if (has_consum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->consum(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgZhuLing.zhuLing)
}

::google::protobuf::uint8* zhuLing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgZhuLing.zhuLing)
  // required uint32 advance = 1;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->advance(), target);
  }

  // required uint32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate(), target);
  }

  // required uint32 consum = 3;
  if (has_consum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->consum(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgZhuLing.zhuLing)
  return target;
}

int zhuLing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 advance = 1;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance());
    }

    // required uint32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // required uint32 consum = 3;
    if (has_consum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consum());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zhuLing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const zhuLing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const zhuLing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void zhuLing::MergeFrom(const zhuLing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_consum()) {
      set_consum(from.consum());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void zhuLing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zhuLing::CopyFrom(const zhuLing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zhuLing::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void zhuLing::Swap(zhuLing* other) {
  if (other != this) {
    std::swap(advance_, other->advance_);
    std::swap(rate_, other->rate_);
    std::swap(consum_, other->consum_);
    std::swap(level_, other->level_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata zhuLing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zhuLing_descriptor_;
  metadata.reflection = zhuLing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int zhuLings::kZhulingFieldNumber;
#endif  // !_MSC_VER

zhuLings::zhuLings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgZhuLing.zhuLings)
}

void zhuLings::InitAsDefaultInstance() {
}

zhuLings::zhuLings(const zhuLings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgZhuLing.zhuLings)
}

void zhuLings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

zhuLings::~zhuLings() {
  // @@protoc_insertion_point(destructor:CfgZhuLing.zhuLings)
  SharedDtor();
}

void zhuLings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void zhuLings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* zhuLings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return zhuLings_descriptor_;
}

const zhuLings& zhuLings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgZhuLing_2eproto();
  return *default_instance_;
}

zhuLings* zhuLings::default_instance_ = NULL;

zhuLings* zhuLings::New() const {
  return new zhuLings;
}

void zhuLings::Clear() {
  zhuling_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool zhuLings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgZhuLing.zhuLings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgZhuLing.zhuLing zhuling = 1;
      case 1: {
        if (tag == 10) {
         parse_zhuling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zhuling()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_zhuling;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgZhuLing.zhuLings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgZhuLing.zhuLings)
  return false;
#undef DO_
}

void zhuLings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgZhuLing.zhuLings)
  // repeated .CfgZhuLing.zhuLing zhuling = 1;
  for (int i = 0; i < this->zhuling_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->zhuling(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgZhuLing.zhuLings)
}

::google::protobuf::uint8* zhuLings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgZhuLing.zhuLings)
  // repeated .CfgZhuLing.zhuLing zhuling = 1;
  for (int i = 0; i < this->zhuling_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->zhuling(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgZhuLing.zhuLings)
  return target;
}

int zhuLings::ByteSize() const {
  int total_size = 0;

  // repeated .CfgZhuLing.zhuLing zhuling = 1;
  total_size += 1 * this->zhuling_size();
  for (int i = 0; i < this->zhuling_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zhuling(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void zhuLings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const zhuLings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const zhuLings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void zhuLings::MergeFrom(const zhuLings& from) {
  GOOGLE_CHECK_NE(&from, this);
  zhuling_.MergeFrom(from.zhuling_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void zhuLings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void zhuLings::CopyFrom(const zhuLings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool zhuLings::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->zhuling())) return false;
  return true;
}

void zhuLings::Swap(zhuLings* other) {
  if (other != this) {
    zhuling_.Swap(&other->zhuling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata zhuLings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = zhuLings_descriptor_;
  metadata.reflection = zhuLings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Spet::kAdvanceFieldNumber;
const int Spet::kAttrFieldNumber;
const int Spet::kRateFieldNumber;
const int Spet::kLimitFieldNumber;
const int Spet::kIdFieldNumber;
const int Spet::kPartFieldNumber;
#endif  // !_MSC_VER

Spet::Spet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgZhuLing.Spet)
}

void Spet::InitAsDefaultInstance() {
}

Spet::Spet(const Spet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgZhuLing.Spet)
}

void Spet::SharedCtor() {
  _cached_size_ = 0;
  advance_ = 0u;
  rate_ = 0u;
  limit_ = 0u;
  id_ = 0u;
  part_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spet::~Spet() {
  // @@protoc_insertion_point(destructor:CfgZhuLing.Spet)
  SharedDtor();
}

void Spet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Spet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spet_descriptor_;
}

const Spet& Spet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgZhuLing_2eproto();
  return *default_instance_;
}

Spet* Spet::default_instance_ = NULL;

Spet* Spet::New() const {
  return new Spet;
}

void Spet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Spet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(advance_, part_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgZhuLing.Spet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 advance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // repeated .CfgCommon.Attribute attr = 2;
      case 2: {
        if (tag == 18) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // required uint32 rate = 3;
      case 3: {
        if (tag == 24) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // required uint32 limit = 4;
      case 4: {
        if (tag == 32) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // required uint32 id = 5;
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_part;
        break;
      }

      // required uint32 part = 6;
      case 6: {
        if (tag == 48) {
         parse_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgZhuLing.Spet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgZhuLing.Spet)
  return false;
#undef DO_
}

void Spet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgZhuLing.Spet)
  // required uint32 advance = 1;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->advance(), output);
  }

  // repeated .CfgCommon.Attribute attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(i), output);
  }

  // required uint32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rate(), output);
  }

  // required uint32 limit = 4;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit(), output);
  }

  // required uint32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  // required uint32 part = 6;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->part(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgZhuLing.Spet)
}

::google::protobuf::uint8* Spet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgZhuLing.Spet)
  // required uint32 advance = 1;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->advance(), target);
  }

  // repeated .CfgCommon.Attribute attr = 2;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(i), target);
  }

  // required uint32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rate(), target);
  }

  // required uint32 limit = 4;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit(), target);
  }

  // required uint32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  // required uint32 part = 6;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->part(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgZhuLing.Spet)
  return target;
}

int Spet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 advance = 1;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance());
    }

    // required uint32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // required uint32 limit = 4;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required uint32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 part = 6;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part());
    }

  }
  // repeated .CfgCommon.Attribute attr = 2;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spet::MergeFrom(const Spet& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spet::CopyFrom(const Spet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void Spet::Swap(Spet* other) {
  if (other != this) {
    std::swap(advance_, other->advance_);
    attr_.Swap(&other->attr_);
    std::swap(rate_, other->rate_);
    std::swap(limit_, other->limit_);
    std::swap(id_, other->id_);
    std::swap(part_, other->part_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spet_descriptor_;
  metadata.reflection = Spet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Spets::kSpetsFieldNumber;
#endif  // !_MSC_VER

Spets::Spets()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgZhuLing.Spets)
}

void Spets::InitAsDefaultInstance() {
}

Spets::Spets(const Spets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgZhuLing.Spets)
}

void Spets::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spets::~Spets() {
  // @@protoc_insertion_point(destructor:CfgZhuLing.Spets)
  SharedDtor();
}

void Spets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Spets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spets_descriptor_;
}

const Spets& Spets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgZhuLing_2eproto();
  return *default_instance_;
}

Spets* Spets::default_instance_ = NULL;

Spets* Spets::New() const {
  return new Spets;
}

void Spets::Clear() {
  spets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgZhuLing.Spets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgZhuLing.Spet spets = 1;
      case 1: {
        if (tag == 10) {
         parse_spets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_spets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgZhuLing.Spets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgZhuLing.Spets)
  return false;
#undef DO_
}

void Spets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgZhuLing.Spets)
  // repeated .CfgZhuLing.Spet spets = 1;
  for (int i = 0; i < this->spets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->spets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgZhuLing.Spets)
}

::google::protobuf::uint8* Spets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgZhuLing.Spets)
  // repeated .CfgZhuLing.Spet spets = 1;
  for (int i = 0; i < this->spets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->spets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgZhuLing.Spets)
  return target;
}

int Spets::ByteSize() const {
  int total_size = 0;

  // repeated .CfgZhuLing.Spet spets = 1;
  total_size += 1 * this->spets_size();
  for (int i = 0; i < this->spets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spets::MergeFrom(const Spets& from) {
  GOOGLE_CHECK_NE(&from, this);
  spets_.MergeFrom(from.spets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spets::CopyFrom(const Spets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spets::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->spets())) return false;
  return true;
}

void Spets::Swap(Spets* other) {
  if (other != this) {
    spets_.Swap(&other->spets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spets_descriptor_;
  metadata.reflection = Spets_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgZhuLing

// @@protoc_insertion_point(global_scope)
