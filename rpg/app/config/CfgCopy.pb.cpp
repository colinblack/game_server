// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgCopy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgCopy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgCopy {

namespace {

const ::google::protobuf::Descriptor* Copy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Copy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Copys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Copys_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgCopy_2eproto() {
  protobuf_AddDesc_CfgCopy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgCopy.proto");
  GOOGLE_CHECK(file != NULL);
  Copy_descriptor_ = file->message_type(0);
  static const int Copy_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, quickday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, costid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, needlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, firstreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, reincarnlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, duringtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, preaparetime_),
  };
  Copy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Copy_descriptor_,
      Copy::default_instance_,
      Copy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Copy));
  Copys_descriptor_ = file->message_type(1);
  static const int Copys_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copys, copys_),
  };
  Copys_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Copys_descriptor_,
      Copys::default_instance_,
      Copys_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copys, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Copys, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Copys));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgCopy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Copy_descriptor_, &Copy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Copys_descriptor_, &Copys::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgCopy_2eproto() {
  delete Copy::default_instance_;
  delete Copy_reflection_;
  delete Copys::default_instance_;
  delete Copys_reflection_;
}

void protobuf_AddDesc_CfgCopy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rCfgCopy.proto\022\007CfgCopy\032\017CfgCommon.prot"
    "o\"\257\002\n\004Copy\022\020\n\010quickDay\030\001 \002(\r\022\016\n\006costId\030\002"
    " \002(\r\022\021\n\tneedLevel\030\003 \002(\r\022\r\n\005daily\030\004 \002(\r\022&"
    "\n\013firstReward\030\005 \003(\0132\021.CfgCommon.Reward\022\013"
    "\n\003num\030\006 \002(\r\022\017\n\007costNum\030\007 \002(\r\022\014\n\004time\030\010 \002"
    "(\r\022\025\n\rreincarnLevel\030\t \002(\r\022!\n\006reward\030\n \003("
    "\0132\021.CfgCommon.Reward\022\014\n\004type\030\013 \002(\r\022\016\n\006co"
    "pyId\030\014 \002(\r\022\r\n\005mapId\030\r \002(\r\022\022\n\nduringTime\030"
    "\016 \001(\r\022\024\n\014preapareTime\030\017 \001(\r\"%\n\005Copys\022\034\n\005"
    "copys\030\001 \003(\0132\r.CfgCopy.Copy", 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgCopy.proto", &protobuf_RegisterTypes);
  Copy::default_instance_ = new Copy();
  Copys::default_instance_ = new Copys();
  Copy::default_instance_->InitAsDefaultInstance();
  Copys::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgCopy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgCopy_2eproto {
  StaticDescriptorInitializer_CfgCopy_2eproto() {
    protobuf_AddDesc_CfgCopy_2eproto();
  }
} static_descriptor_initializer_CfgCopy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Copy::kQuickDayFieldNumber;
const int Copy::kCostIdFieldNumber;
const int Copy::kNeedLevelFieldNumber;
const int Copy::kDailyFieldNumber;
const int Copy::kFirstRewardFieldNumber;
const int Copy::kNumFieldNumber;
const int Copy::kCostNumFieldNumber;
const int Copy::kTimeFieldNumber;
const int Copy::kReincarnLevelFieldNumber;
const int Copy::kRewardFieldNumber;
const int Copy::kTypeFieldNumber;
const int Copy::kCopyIdFieldNumber;
const int Copy::kMapIdFieldNumber;
const int Copy::kDuringTimeFieldNumber;
const int Copy::kPreapareTimeFieldNumber;
#endif  // !_MSC_VER

Copy::Copy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgCopy.Copy)
}

void Copy::InitAsDefaultInstance() {
}

Copy::Copy(const Copy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgCopy.Copy)
}

void Copy::SharedCtor() {
  _cached_size_ = 0;
  quickday_ = 0u;
  costid_ = 0u;
  needlevel_ = 0u;
  daily_ = 0u;
  num_ = 0u;
  costnum_ = 0u;
  time_ = 0u;
  reincarnlevel_ = 0u;
  type_ = 0u;
  copyid_ = 0u;
  mapid_ = 0u;
  duringtime_ = 0u;
  preaparetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Copy::~Copy() {
  // @@protoc_insertion_point(destructor:CfgCopy.Copy)
  SharedDtor();
}

void Copy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Copy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Copy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Copy_descriptor_;
}

const Copy& Copy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgCopy_2eproto();
  return *default_instance_;
}

Copy* Copy::default_instance_ = NULL;

Copy* Copy::New() const {
  return new Copy;
}

void Copy::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Copy*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(quickday_, daily_);
    ZR_(num_, time_);
  }
  if (_has_bits_[8 / 32] & 32000) {
    ZR_(type_, preaparetime_);
    reincarnlevel_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  firstreward_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Copy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgCopy.Copy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 quickDay = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quickday_)));
          set_has_quickday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_costId;
        break;
      }

      // required uint32 costId = 2;
      case 2: {
        if (tag == 16) {
         parse_costId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costid_)));
          set_has_costid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_needLevel;
        break;
      }

      // required uint32 needLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_needLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needlevel_)));
          set_has_needlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_daily;
        break;
      }

      // required uint32 daily = 4;
      case 4: {
        if (tag == 32) {
         parse_daily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_)));
          set_has_daily();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_firstReward;
        break;
      }

      // repeated .CfgCommon.Reward firstReward = 5;
      case 5: {
        if (tag == 42) {
         parse_firstReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firstreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_firstReward;
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // required uint32 num = 6;
      case 6: {
        if (tag == 48) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_costNum;
        break;
      }

      // required uint32 costNum = 7;
      case 7: {
        if (tag == 56) {
         parse_costNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costnum_)));
          set_has_costnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // required uint32 time = 8;
      case 8: {
        if (tag == 64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reincarnLevel;
        break;
      }

      // required uint32 reincarnLevel = 9;
      case 9: {
        if (tag == 72) {
         parse_reincarnLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reincarnlevel_)));
          set_has_reincarnlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_reward;
        break;
      }

      // repeated .CfgCommon.Reward reward = 10;
      case 10: {
        if (tag == 82) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_reward;
        if (input->ExpectTag(88)) goto parse_type;
        break;
      }

      // required uint32 type = 11;
      case 11: {
        if (tag == 88) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_copyId;
        break;
      }

      // required uint32 copyId = 12;
      case 12: {
        if (tag == 96) {
         parse_copyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mapId;
        break;
      }

      // required uint32 mapId = 13;
      case 13: {
        if (tag == 104) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_duringTime;
        break;
      }

      // optional uint32 duringTime = 14;
      case 14: {
        if (tag == 112) {
         parse_duringTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duringtime_)));
          set_has_duringtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_preapareTime;
        break;
      }

      // optional uint32 preapareTime = 15;
      case 15: {
        if (tag == 120) {
         parse_preapareTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preaparetime_)));
          set_has_preaparetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgCopy.Copy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgCopy.Copy)
  return false;
#undef DO_
}

void Copy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgCopy.Copy)
  // required uint32 quickDay = 1;
  if (has_quickday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quickday(), output);
  }

  // required uint32 costId = 2;
  if (has_costid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->costid(), output);
  }

  // required uint32 needLevel = 3;
  if (has_needlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->needlevel(), output);
  }

  // required uint32 daily = 4;
  if (has_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->daily(), output);
  }

  // repeated .CfgCommon.Reward firstReward = 5;
  for (int i = 0; i < this->firstreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->firstreward(i), output);
  }

  // required uint32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num(), output);
  }

  // required uint32 costNum = 7;
  if (has_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->costnum(), output);
  }

  // required uint32 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time(), output);
  }

  // required uint32 reincarnLevel = 9;
  if (has_reincarnlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reincarnlevel(), output);
  }

  // repeated .CfgCommon.Reward reward = 10;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->reward(i), output);
  }

  // required uint32 type = 11;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->type(), output);
  }

  // required uint32 copyId = 12;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->copyid(), output);
  }

  // required uint32 mapId = 13;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mapid(), output);
  }

  // optional uint32 duringTime = 14;
  if (has_duringtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->duringtime(), output);
  }

  // optional uint32 preapareTime = 15;
  if (has_preaparetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->preaparetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgCopy.Copy)
}

::google::protobuf::uint8* Copy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgCopy.Copy)
  // required uint32 quickDay = 1;
  if (has_quickday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quickday(), target);
  }

  // required uint32 costId = 2;
  if (has_costid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->costid(), target);
  }

  // required uint32 needLevel = 3;
  if (has_needlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->needlevel(), target);
  }

  // required uint32 daily = 4;
  if (has_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->daily(), target);
  }

  // repeated .CfgCommon.Reward firstReward = 5;
  for (int i = 0; i < this->firstreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->firstreward(i), target);
  }

  // required uint32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num(), target);
  }

  // required uint32 costNum = 7;
  if (has_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->costnum(), target);
  }

  // required uint32 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time(), target);
  }

  // required uint32 reincarnLevel = 9;
  if (has_reincarnlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reincarnlevel(), target);
  }

  // repeated .CfgCommon.Reward reward = 10;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->reward(i), target);
  }

  // required uint32 type = 11;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->type(), target);
  }

  // required uint32 copyId = 12;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->copyid(), target);
  }

  // required uint32 mapId = 13;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->mapid(), target);
  }

  // optional uint32 duringTime = 14;
  if (has_duringtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->duringtime(), target);
  }

  // optional uint32 preapareTime = 15;
  if (has_preaparetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->preaparetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgCopy.Copy)
  return target;
}

int Copy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 quickDay = 1;
    if (has_quickday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quickday());
    }

    // required uint32 costId = 2;
    if (has_costid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costid());
    }

    // required uint32 needLevel = 3;
    if (has_needlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needlevel());
    }

    // required uint32 daily = 4;
    if (has_daily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily());
    }

    // required uint32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 costNum = 7;
    if (has_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costnum());
    }

    // required uint32 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 reincarnLevel = 9;
    if (has_reincarnlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reincarnlevel());
    }

    // required uint32 type = 11;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 copyId = 12;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copyid());
    }

    // required uint32 mapId = 13;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 duringTime = 14;
    if (has_duringtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duringtime());
    }

    // optional uint32 preapareTime = 15;
    if (has_preaparetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preaparetime());
    }

  }
  // repeated .CfgCommon.Reward firstReward = 5;
  total_size += 1 * this->firstreward_size();
  for (int i = 0; i < this->firstreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firstreward(i));
  }

  // repeated .CfgCommon.Reward reward = 10;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Copy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Copy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Copy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Copy::MergeFrom(const Copy& from) {
  GOOGLE_CHECK_NE(&from, this);
  firstreward_.MergeFrom(from.firstreward_);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quickday()) {
      set_quickday(from.quickday());
    }
    if (from.has_costid()) {
      set_costid(from.costid());
    }
    if (from.has_needlevel()) {
      set_needlevel(from.needlevel());
    }
    if (from.has_daily()) {
      set_daily(from.daily());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_costnum()) {
      set_costnum(from.costnum());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reincarnlevel()) {
      set_reincarnlevel(from.reincarnlevel());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_duringtime()) {
      set_duringtime(from.duringtime());
    }
    if (from.has_preaparetime()) {
      set_preaparetime(from.preaparetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Copy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Copy::CopyFrom(const Copy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Copy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001def) != 0x00001def) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->firstreward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void Copy::Swap(Copy* other) {
  if (other != this) {
    std::swap(quickday_, other->quickday_);
    std::swap(costid_, other->costid_);
    std::swap(needlevel_, other->needlevel_);
    std::swap(daily_, other->daily_);
    firstreward_.Swap(&other->firstreward_);
    std::swap(num_, other->num_);
    std::swap(costnum_, other->costnum_);
    std::swap(time_, other->time_);
    std::swap(reincarnlevel_, other->reincarnlevel_);
    reward_.Swap(&other->reward_);
    std::swap(type_, other->type_);
    std::swap(copyid_, other->copyid_);
    std::swap(mapid_, other->mapid_);
    std::swap(duringtime_, other->duringtime_);
    std::swap(preaparetime_, other->preaparetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Copy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Copy_descriptor_;
  metadata.reflection = Copy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Copys::kCopysFieldNumber;
#endif  // !_MSC_VER

Copys::Copys()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgCopy.Copys)
}

void Copys::InitAsDefaultInstance() {
}

Copys::Copys(const Copys& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgCopy.Copys)
}

void Copys::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Copys::~Copys() {
  // @@protoc_insertion_point(destructor:CfgCopy.Copys)
  SharedDtor();
}

void Copys::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Copys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Copys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Copys_descriptor_;
}

const Copys& Copys::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgCopy_2eproto();
  return *default_instance_;
}

Copys* Copys::default_instance_ = NULL;

Copys* Copys::New() const {
  return new Copys;
}

void Copys::Clear() {
  copys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Copys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgCopy.Copys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgCopy.Copy copys = 1;
      case 1: {
        if (tag == 10) {
         parse_copys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_copys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_copys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgCopy.Copys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgCopy.Copys)
  return false;
#undef DO_
}

void Copys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgCopy.Copys)
  // repeated .CfgCopy.Copy copys = 1;
  for (int i = 0; i < this->copys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->copys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgCopy.Copys)
}

::google::protobuf::uint8* Copys::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgCopy.Copys)
  // repeated .CfgCopy.Copy copys = 1;
  for (int i = 0; i < this->copys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->copys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgCopy.Copys)
  return target;
}

int Copys::ByteSize() const {
  int total_size = 0;

  // repeated .CfgCopy.Copy copys = 1;
  total_size += 1 * this->copys_size();
  for (int i = 0; i < this->copys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->copys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Copys::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Copys* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Copys*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Copys::MergeFrom(const Copys& from) {
  GOOGLE_CHECK_NE(&from, this);
  copys_.MergeFrom(from.copys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Copys::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Copys::CopyFrom(const Copys& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Copys::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->copys())) return false;
  return true;
}

void Copys::Swap(Copys* other) {
  if (other != this) {
    copys_.Swap(&other->copys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Copys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Copys_descriptor_;
  metadata.reflection = Copys_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgCopy

// @@protoc_insertion_point(global_scope)
