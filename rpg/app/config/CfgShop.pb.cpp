// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgShop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgShop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgShop {

namespace {

const ::google::protobuf::Descriptor* ShopCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopCells_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopCells_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgShop_2eproto() {
  protobuf_AddDesc_CfgShop_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgShop.proto");
  GOOGLE_CHECK(file != NULL);
  ShopCell_descriptor_ = file->message_type(0);
  static const int ShopCell_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, buy_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, real_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, money_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, limit_type_),
  };
  ShopCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopCell_descriptor_,
      ShopCell::default_instance_,
      ShopCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopCell));
  ShopCells_descriptor_ = file->message_type(1);
  static const int ShopCells_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCells, shop_cell_),
  };
  ShopCells_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopCells_descriptor_,
      ShopCells::default_instance_,
      ShopCells_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCells, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopCells, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopCells));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgShop_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopCell_descriptor_, &ShopCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopCells_descriptor_, &ShopCells::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgShop_2eproto() {
  delete ShopCell::default_instance_;
  delete ShopCell_reflection_;
  delete ShopCells::default_instance_;
  delete ShopCells_reflection_;
}

void protobuf_AddDesc_CfgShop_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rCfgShop.proto\022\007CfgShop\"\203\001\n\010ShopCell\022\n\n"
    "\002id\030\001 \002(\r\022\017\n\007item_id\030\002 \002(\r\022\021\n\tbuy_limit\030"
    "\003 \002(\r\022\013\n\003num\030\004 \002(\r\022\022\n\nreal_price\030\005 \002(\r\022\022"
    "\n\nmoney_type\030\006 \002(\r\022\022\n\nlimit_type\030\007 \002(\r\"1"
    "\n\tShopCells\022$\n\tshop_cell\030\001 \003(\0132\021.CfgShop"
    ".ShopCell", 209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgShop.proto", &protobuf_RegisterTypes);
  ShopCell::default_instance_ = new ShopCell();
  ShopCells::default_instance_ = new ShopCells();
  ShopCell::default_instance_->InitAsDefaultInstance();
  ShopCells::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgShop_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgShop_2eproto {
  StaticDescriptorInitializer_CfgShop_2eproto() {
    protobuf_AddDesc_CfgShop_2eproto();
  }
} static_descriptor_initializer_CfgShop_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShopCell::kIdFieldNumber;
const int ShopCell::kItemIdFieldNumber;
const int ShopCell::kBuyLimitFieldNumber;
const int ShopCell::kNumFieldNumber;
const int ShopCell::kRealPriceFieldNumber;
const int ShopCell::kMoneyTypeFieldNumber;
const int ShopCell::kLimitTypeFieldNumber;
#endif  // !_MSC_VER

ShopCell::ShopCell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgShop.ShopCell)
}

void ShopCell::InitAsDefaultInstance() {
}

ShopCell::ShopCell(const ShopCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgShop.ShopCell)
}

void ShopCell::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  item_id_ = 0u;
  buy_limit_ = 0u;
  num_ = 0u;
  real_price_ = 0u;
  money_type_ = 0u;
  limit_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCell::~ShopCell() {
  // @@protoc_insertion_point(destructor:CfgShop.ShopCell)
  SharedDtor();
}

void ShopCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopCell_descriptor_;
}

const ShopCell& ShopCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgShop_2eproto();
  return *default_instance_;
}

ShopCell* ShopCell::default_instance_ = NULL;

ShopCell* ShopCell::New() const {
  return new ShopCell;
}

void ShopCell::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopCell*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, limit_type_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgShop.ShopCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // required uint32 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buy_limit;
        break;
      }

      // required uint32 buy_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_buy_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_limit_)));
          set_has_buy_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // required uint32 num = 4;
      case 4: {
        if (tag == 32) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_real_price;
        break;
      }

      // required uint32 real_price = 5;
      case 5: {
        if (tag == 40) {
         parse_real_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &real_price_)));
          set_has_real_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_money_type;
        break;
      }

      // required uint32 money_type = 6;
      case 6: {
        if (tag == 48) {
         parse_money_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_type_)));
          set_has_money_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_limit_type;
        break;
      }

      // required uint32 limit_type = 7;
      case 7: {
        if (tag == 56) {
         parse_limit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_type_)));
          set_has_limit_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgShop.ShopCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgShop.ShopCell)
  return false;
#undef DO_
}

void ShopCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgShop.ShopCell)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // required uint32 buy_limit = 3;
  if (has_buy_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_limit(), output);
  }

  // required uint32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // required uint32 real_price = 5;
  if (has_real_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->real_price(), output);
  }

  // required uint32 money_type = 6;
  if (has_money_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->money_type(), output);
  }

  // required uint32 limit_type = 7;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->limit_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgShop.ShopCell)
}

::google::protobuf::uint8* ShopCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgShop.ShopCell)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  // required uint32 buy_limit = 3;
  if (has_buy_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_limit(), target);
  }

  // required uint32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // required uint32 real_price = 5;
  if (has_real_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->real_price(), target);
  }

  // required uint32 money_type = 6;
  if (has_money_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->money_type(), target);
  }

  // required uint32 limit_type = 7;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->limit_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgShop.ShopCell)
  return target;
}

int ShopCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 buy_limit = 3;
    if (has_buy_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_limit());
    }

    // required uint32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 real_price = 5;
    if (has_real_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->real_price());
    }

    // required uint32 money_type = 6;
    if (has_money_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money_type());
    }

    // required uint32 limit_type = 7;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopCell::MergeFrom(const ShopCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_buy_limit()) {
      set_buy_limit(from.buy_limit());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_real_price()) {
      set_real_price(from.real_price());
    }
    if (from.has_money_type()) {
      set_money_type(from.money_type());
    }
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopCell::CopyFrom(const ShopCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void ShopCell::Swap(ShopCell* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(item_id_, other->item_id_);
    std::swap(buy_limit_, other->buy_limit_);
    std::swap(num_, other->num_);
    std::swap(real_price_, other->real_price_);
    std::swap(money_type_, other->money_type_);
    std::swap(limit_type_, other->limit_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopCell_descriptor_;
  metadata.reflection = ShopCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopCells::kShopCellFieldNumber;
#endif  // !_MSC_VER

ShopCells::ShopCells()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgShop.ShopCells)
}

void ShopCells::InitAsDefaultInstance() {
}

ShopCells::ShopCells(const ShopCells& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgShop.ShopCells)
}

void ShopCells::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopCells::~ShopCells() {
  // @@protoc_insertion_point(destructor:CfgShop.ShopCells)
  SharedDtor();
}

void ShopCells::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopCells::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopCells::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopCells_descriptor_;
}

const ShopCells& ShopCells::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgShop_2eproto();
  return *default_instance_;
}

ShopCells* ShopCells::default_instance_ = NULL;

ShopCells* ShopCells::New() const {
  return new ShopCells;
}

void ShopCells::Clear() {
  shop_cell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopCells::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgShop.ShopCells)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgShop.ShopCell shop_cell = 1;
      case 1: {
        if (tag == 10) {
         parse_shop_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_cell()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shop_cell;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgShop.ShopCells)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgShop.ShopCells)
  return false;
#undef DO_
}

void ShopCells::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgShop.ShopCells)
  // repeated .CfgShop.ShopCell shop_cell = 1;
  for (int i = 0; i < this->shop_cell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shop_cell(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgShop.ShopCells)
}

::google::protobuf::uint8* ShopCells::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgShop.ShopCells)
  // repeated .CfgShop.ShopCell shop_cell = 1;
  for (int i = 0; i < this->shop_cell_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shop_cell(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgShop.ShopCells)
  return target;
}

int ShopCells::ByteSize() const {
  int total_size = 0;

  // repeated .CfgShop.ShopCell shop_cell = 1;
  total_size += 1 * this->shop_cell_size();
  for (int i = 0; i < this->shop_cell_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_cell(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopCells::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopCells* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopCells*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopCells::MergeFrom(const ShopCells& from) {
  GOOGLE_CHECK_NE(&from, this);
  shop_cell_.MergeFrom(from.shop_cell_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopCells::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopCells::CopyFrom(const ShopCells& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopCells::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->shop_cell())) return false;
  return true;
}

void ShopCells::Swap(ShopCells* other) {
  if (other != this) {
    shop_cell_.Swap(&other->shop_cell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopCells::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopCells_descriptor_;
  metadata.reflection = ShopCells_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgShop

// @@protoc_insertion_point(global_scope)
