// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgMonster.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgMonster.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgMonster {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Monsters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Monsters_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Plans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Plans_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgMonster_2eproto() {
  protobuf_AddDesc_CfgMonster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgMonster.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Monster_descriptor_ = file->message_type(1);
  static const int Monster_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, hppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, defence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, skill2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, wuxing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, fixdmgdec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, dmgdec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, critbreakrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, critbreak_),
  };
  Monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Monster_descriptor_,
      Monster::default_instance_,
      Monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Monster));
  Monsters_descriptor_ = file->message_type(2);
  static const int Monsters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monsters, monsters_),
  };
  Monsters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Monsters_descriptor_,
      Monsters::default_instance_,
      Monsters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monsters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monsters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Monsters));
  Plan_descriptor_ = file->message_type(3);
  static const int Plan_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plan, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plan, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plan, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plan, plan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plan, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plan, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plan, index_),
  };
  Plan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plan_descriptor_,
      Plan::default_instance_,
      Plan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plan));
  Plans_descriptor_ = file->message_type(4);
  static const int Plans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, plans_),
  };
  Plans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Plans_descriptor_,
      Plans::default_instance_,
      Plans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Plans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Plans));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgMonster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Monster_descriptor_, &Monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Monsters_descriptor_, &Monsters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plan_descriptor_, &Plan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Plans_descriptor_, &Plans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgMonster_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Monster::default_instance_;
  delete Monster_reflection_;
  delete Monsters::default_instance_;
  delete Monsters_reflection_;
  delete Plan::default_instance_;
  delete Plan_reflection_;
  delete Plans::default_instance_;
  delete Plans_reflection_;
}

void protobuf_AddDesc_CfgMonster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020CfgMonster.proto\022\nCfgMonster\032\017CfgCommo"
    "n.proto\"\035\n\005Point\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"\275"
    "\002\n\007Monster\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\n\n"
    "\002hp\030\003 \002(\004\022\021\n\thpPercent\030\004 \002(\r\022\r\n\005speed\030\005 "
    "\002(\r\022\r\n\005width\030\006 \002(\r\022\r\n\005skill\030\007 \002(\r\022\017\n\007def"
    "ence\030\010 \002(\r\022\r\n\005alive\030\t \002(\r\022\016\n\006attack\030\n \002("
    "\r\022!\n\006reward\030\013 \003(\0132\021.CfgCommon.Reward\022\013\n\003"
    "exp\030\014 \002(\r\022\016\n\006skill2\030\r \002(\t\022\016\n\006wuxing\030\016 \002("
    "\r\022\021\n\tfixDmgDec\030\017 \002(\r\022\016\n\006dmgDec\030\020 \002(\r\022\025\n\r"
    "critBreakRate\030\021 \002(\r\022\021\n\tcritBreak\030\022 \002(\r\"1"
    "\n\010Monsters\022%\n\010monsters\030\001 \003(\0132\023.CfgMonste"
    "r.Monster\"{\n\004Plan\022\n\n\002id\030\001 \002(\r\022\r\n\005mapid\030\002"
    " \002(\r\022\014\n\004boss\030\003 \002(\r\022\014\n\004plan\030\004 \002(\r\022\036\n\003pos\030"
    "\005 \003(\0132\021.CfgMonster.Point\022\r\n\005count\030\006 \002(\r\022"
    "\r\n\005index\030\007 \002(\005\"(\n\005Plans\022\037\n\005plans\030\001 \003(\0132\020"
    ".CfgMonster.Plan", 616);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgMonster.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  Monster::default_instance_ = new Monster();
  Monsters::default_instance_ = new Monsters();
  Plan::default_instance_ = new Plan();
  Plans::default_instance_ = new Plans();
  Point::default_instance_->InitAsDefaultInstance();
  Monster::default_instance_->InitAsDefaultInstance();
  Monsters::default_instance_->InitAsDefaultInstance();
  Plan::default_instance_->InitAsDefaultInstance();
  Plans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgMonster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgMonster_2eproto {
  StaticDescriptorInitializer_CfgMonster_2eproto() {
    protobuf_AddDesc_CfgMonster_2eproto();
  }
} static_descriptor_initializer_CfgMonster_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMonster.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMonster.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:CfgMonster.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMonster_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMonster.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMonster.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMonster.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMonster.Point)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMonster.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMonster.Point)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMonster.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Monster::kIdFieldNumber;
const int Monster::kLevelFieldNumber;
const int Monster::kHpFieldNumber;
const int Monster::kHpPercentFieldNumber;
const int Monster::kSpeedFieldNumber;
const int Monster::kWidthFieldNumber;
const int Monster::kSkillFieldNumber;
const int Monster::kDefenceFieldNumber;
const int Monster::kAliveFieldNumber;
const int Monster::kAttackFieldNumber;
const int Monster::kRewardFieldNumber;
const int Monster::kExpFieldNumber;
const int Monster::kSkill2FieldNumber;
const int Monster::kWuxingFieldNumber;
const int Monster::kFixDmgDecFieldNumber;
const int Monster::kDmgDecFieldNumber;
const int Monster::kCritBreakRateFieldNumber;
const int Monster::kCritBreakFieldNumber;
#endif  // !_MSC_VER

Monster::Monster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMonster.Monster)
}

void Monster::InitAsDefaultInstance() {
}

Monster::Monster(const Monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMonster.Monster)
}

void Monster::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  hp_ = GOOGLE_ULONGLONG(0);
  hppercent_ = 0u;
  speed_ = 0u;
  width_ = 0u;
  skill_ = 0u;
  defence_ = 0u;
  alive_ = 0u;
  attack_ = 0u;
  exp_ = 0u;
  skill2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wuxing_ = 0u;
  fixdmgdec_ = 0u;
  dmgdec_ = 0u;
  critbreakrate_ = 0u;
  critbreak_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Monster::~Monster() {
  // @@protoc_insertion_point(destructor:CfgMonster.Monster)
  SharedDtor();
}

void Monster::SharedDtor() {
  if (skill2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill2_;
  }
  if (this != default_instance_) {
  }
}

void Monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Monster_descriptor_;
}

const Monster& Monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMonster_2eproto();
  return *default_instance_;
}

Monster* Monster::default_instance_ = NULL;

Monster* Monster::New() const {
  return new Monster;
}

void Monster::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Monster*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, defence_);
  }
  if (_has_bits_[8 / 32] & 64256) {
    ZR_(attack_, exp_);
    ZR_(wuxing_, dmgdec_);
    alive_ = 0u;
    if (has_skill2()) {
      if (skill2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        skill2_->clear();
      }
    }
  }
  ZR_(critbreakrate_, critbreak_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMonster.Monster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required uint64 hp = 3;
      case 3: {
        if (tag == 24) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hpPercent;
        break;
      }

      // required uint32 hpPercent = 4;
      case 4: {
        if (tag == 32) {
         parse_hpPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hppercent_)));
          set_has_hppercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_speed;
        break;
      }

      // required uint32 speed = 5;
      case 5: {
        if (tag == 40) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_width;
        break;
      }

      // required uint32 width = 6;
      case 6: {
        if (tag == 48) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_skill;
        break;
      }

      // required uint32 skill = 7;
      case 7: {
        if (tag == 56) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_defence;
        break;
      }

      // required uint32 defence = 8;
      case 8: {
        if (tag == 64) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_alive;
        break;
      }

      // required uint32 alive = 9;
      case 9: {
        if (tag == 72) {
         parse_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alive_)));
          set_has_alive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_attack;
        break;
      }

      // required uint32 attack = 10;
      case 10: {
        if (tag == 80) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_reward;
        break;
      }

      // repeated .CfgCommon.Reward reward = 11;
      case 11: {
        if (tag == 90) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_reward;
        if (input->ExpectTag(96)) goto parse_exp;
        break;
      }

      // required uint32 exp = 12;
      case 12: {
        if (tag == 96) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_skill2;
        break;
      }

      // required string skill2 = 13;
      case 13: {
        if (tag == 106) {
         parse_skill2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skill2().data(), this->skill2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "skill2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_wuxing;
        break;
      }

      // required uint32 wuxing = 14;
      case 14: {
        if (tag == 112) {
         parse_wuxing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wuxing_)));
          set_has_wuxing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_fixDmgDec;
        break;
      }

      // required uint32 fixDmgDec = 15;
      case 15: {
        if (tag == 120) {
         parse_fixDmgDec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fixdmgdec_)));
          set_has_fixdmgdec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dmgDec;
        break;
      }

      // required uint32 dmgDec = 16;
      case 16: {
        if (tag == 128) {
         parse_dmgDec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dmgdec_)));
          set_has_dmgdec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_critBreakRate;
        break;
      }

      // required uint32 critBreakRate = 17;
      case 17: {
        if (tag == 136) {
         parse_critBreakRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critbreakrate_)));
          set_has_critbreakrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_critBreak;
        break;
      }

      // required uint32 critBreak = 18;
      case 18: {
        if (tag == 144) {
         parse_critBreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critbreak_)));
          set_has_critbreak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMonster.Monster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMonster.Monster)
  return false;
#undef DO_
}

void Monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMonster.Monster)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint64 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hp(), output);
  }

  // required uint32 hpPercent = 4;
  if (has_hppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hppercent(), output);
  }

  // required uint32 speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speed(), output);
  }

  // required uint32 width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->width(), output);
  }

  // required uint32 skill = 7;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->skill(), output);
  }

  // required uint32 defence = 8;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->defence(), output);
  }

  // required uint32 alive = 9;
  if (has_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->alive(), output);
  }

  // required uint32 attack = 10;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->attack(), output);
  }

  // repeated .CfgCommon.Reward reward = 11;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->reward(i), output);
  }

  // required uint32 exp = 12;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->exp(), output);
  }

  // required string skill2 = 13;
  if (has_skill2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill2().data(), this->skill2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->skill2(), output);
  }

  // required uint32 wuxing = 14;
  if (has_wuxing()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->wuxing(), output);
  }

  // required uint32 fixDmgDec = 15;
  if (has_fixdmgdec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fixdmgdec(), output);
  }

  // required uint32 dmgDec = 16;
  if (has_dmgdec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dmgdec(), output);
  }

  // required uint32 critBreakRate = 17;
  if (has_critbreakrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->critbreakrate(), output);
  }

  // required uint32 critBreak = 18;
  if (has_critbreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->critbreak(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMonster.Monster)
}

::google::protobuf::uint8* Monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMonster.Monster)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint64 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hp(), target);
  }

  // required uint32 hpPercent = 4;
  if (has_hppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hppercent(), target);
  }

  // required uint32 speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->speed(), target);
  }

  // required uint32 width = 6;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->width(), target);
  }

  // required uint32 skill = 7;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->skill(), target);
  }

  // required uint32 defence = 8;
  if (has_defence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->defence(), target);
  }

  // required uint32 alive = 9;
  if (has_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->alive(), target);
  }

  // required uint32 attack = 10;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->attack(), target);
  }

  // repeated .CfgCommon.Reward reward = 11;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->reward(i), target);
  }

  // required uint32 exp = 12;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->exp(), target);
  }

  // required string skill2 = 13;
  if (has_skill2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skill2().data(), this->skill2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "skill2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->skill2(), target);
  }

  // required uint32 wuxing = 14;
  if (has_wuxing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->wuxing(), target);
  }

  // required uint32 fixDmgDec = 15;
  if (has_fixdmgdec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fixdmgdec(), target);
  }

  // required uint32 dmgDec = 16;
  if (has_dmgdec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dmgdec(), target);
  }

  // required uint32 critBreakRate = 17;
  if (has_critbreakrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->critbreakrate(), target);
  }

  // required uint32 critBreak = 18;
  if (has_critbreak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->critbreak(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMonster.Monster)
  return target;
}

int Monster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // required uint32 hpPercent = 4;
    if (has_hppercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hppercent());
    }

    // required uint32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

    // required uint32 width = 6;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 skill = 7;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill());
    }

    // required uint32 defence = 8;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defence());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 alive = 9;
    if (has_alive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alive());
    }

    // required uint32 attack = 10;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }

    // required uint32 exp = 12;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required string skill2 = 13;
    if (has_skill2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill2());
    }

    // required uint32 wuxing = 14;
    if (has_wuxing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wuxing());
    }

    // required uint32 fixDmgDec = 15;
    if (has_fixdmgdec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fixdmgdec());
    }

    // required uint32 dmgDec = 16;
    if (has_dmgdec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dmgdec());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 critBreakRate = 17;
    if (has_critbreakrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critbreakrate());
    }

    // required uint32 critBreak = 18;
    if (has_critbreak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critbreak());
    }

  }
  // repeated .CfgCommon.Reward reward = 11;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Monster::MergeFrom(const Monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hppercent()) {
      set_hppercent(from.hppercent());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_alive()) {
      set_alive(from.alive());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_skill2()) {
      set_skill2(from.skill2());
    }
    if (from.has_wuxing()) {
      set_wuxing(from.wuxing());
    }
    if (from.has_fixdmgdec()) {
      set_fixdmgdec(from.fixdmgdec());
    }
    if (from.has_dmgdec()) {
      set_dmgdec(from.dmgdec());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_critbreakrate()) {
      set_critbreakrate(from.critbreakrate());
    }
    if (from.has_critbreak()) {
      set_critbreak(from.critbreak());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Monster::CopyFrom(const Monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monster::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003fbff) != 0x0003fbff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void Monster::Swap(Monster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(hppercent_, other->hppercent_);
    std::swap(speed_, other->speed_);
    std::swap(width_, other->width_);
    std::swap(skill_, other->skill_);
    std::swap(defence_, other->defence_);
    std::swap(alive_, other->alive_);
    std::swap(attack_, other->attack_);
    reward_.Swap(&other->reward_);
    std::swap(exp_, other->exp_);
    std::swap(skill2_, other->skill2_);
    std::swap(wuxing_, other->wuxing_);
    std::swap(fixdmgdec_, other->fixdmgdec_);
    std::swap(dmgdec_, other->dmgdec_);
    std::swap(critbreakrate_, other->critbreakrate_);
    std::swap(critbreak_, other->critbreak_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Monster_descriptor_;
  metadata.reflection = Monster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Monsters::kMonstersFieldNumber;
#endif  // !_MSC_VER

Monsters::Monsters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMonster.Monsters)
}

void Monsters::InitAsDefaultInstance() {
}

Monsters::Monsters(const Monsters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMonster.Monsters)
}

void Monsters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Monsters::~Monsters() {
  // @@protoc_insertion_point(destructor:CfgMonster.Monsters)
  SharedDtor();
}

void Monsters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Monsters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Monsters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Monsters_descriptor_;
}

const Monsters& Monsters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMonster_2eproto();
  return *default_instance_;
}

Monsters* Monsters::default_instance_ = NULL;

Monsters* Monsters::New() const {
  return new Monsters;
}

void Monsters::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Monsters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMonster.Monsters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgMonster.Monster monsters = 1;
      case 1: {
        if (tag == 10) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_monsters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMonster.Monsters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMonster.Monsters)
  return false;
#undef DO_
}

void Monsters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMonster.Monsters)
  // repeated .CfgMonster.Monster monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMonster.Monsters)
}

::google::protobuf::uint8* Monsters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMonster.Monsters)
  // repeated .CfgMonster.Monster monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMonster.Monsters)
  return target;
}

int Monsters::ByteSize() const {
  int total_size = 0;

  // repeated .CfgMonster.Monster monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monsters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Monsters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Monsters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Monsters::MergeFrom(const Monsters& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Monsters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Monsters::CopyFrom(const Monsters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monsters::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->monsters())) return false;
  return true;
}

void Monsters::Swap(Monsters* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Monsters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Monsters_descriptor_;
  metadata.reflection = Monsters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Plan::kIdFieldNumber;
const int Plan::kMapidFieldNumber;
const int Plan::kBossFieldNumber;
const int Plan::kPlanFieldNumber;
const int Plan::kPosFieldNumber;
const int Plan::kCountFieldNumber;
const int Plan::kIndexFieldNumber;
#endif  // !_MSC_VER

Plan::Plan()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMonster.Plan)
}

void Plan::InitAsDefaultInstance() {
}

Plan::Plan(const Plan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMonster.Plan)
}

void Plan::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  mapid_ = 0u;
  boss_ = 0u;
  plan_ = 0u;
  count_ = 0u;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:CfgMonster.Plan)
  SharedDtor();
}

void Plan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plan_descriptor_;
}

const Plan& Plan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMonster_2eproto();
  return *default_instance_;
}

Plan* Plan::default_instance_ = NULL;

Plan* Plan::New() const {
  return new Plan;
}

void Plan::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Plan*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(id_, plan_);
    ZR_(count_, index_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMonster.Plan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // required uint32 mapid = 2;
      case 2: {
        if (tag == 16) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_boss;
        break;
      }

      // required uint32 boss = 3;
      case 3: {
        if (tag == 24) {
         parse_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_plan;
        break;
      }

      // required uint32 plan = 4;
      case 4: {
        if (tag == 32) {
         parse_plan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plan_)));
          set_has_plan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // repeated .CfgMonster.Point pos = 5;
      case 5: {
        if (tag == 42) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // required uint32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_index;
        break;
      }

      // required int32 index = 7;
      case 7: {
        if (tag == 56) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMonster.Plan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMonster.Plan)
  return false;
#undef DO_
}

void Plan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMonster.Plan)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // required uint32 boss = 3;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boss(), output);
  }

  // required uint32 plan = 4;
  if (has_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->plan(), output);
  }

  // repeated .CfgMonster.Point pos = 5;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(i), output);
  }

  // required uint32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->count(), output);
  }

  // required int32 index = 7;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMonster.Plan)
}

::google::protobuf::uint8* Plan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMonster.Plan)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // required uint32 boss = 3;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->boss(), target);
  }

  // required uint32 plan = 4;
  if (has_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->plan(), target);
  }

  // repeated .CfgMonster.Point pos = 5;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(i), target);
  }

  // required uint32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->count(), target);
  }

  // required int32 index = 7;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMonster.Plan)
  return target;
}

int Plan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint32 boss = 3;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boss());
    }

    // required uint32 plan = 4;
    if (has_plan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plan());
    }

    // required uint32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required int32 index = 7;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .CfgMonster.Point pos = 5;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plan::MergeFrom(const Plan& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_boss()) {
      set_boss(from.boss());
    }
    if (from.has_plan()) {
      set_plan(from.plan());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plan::CopyFrom(const Plan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->pos())) return false;
  return true;
}

void Plan::Swap(Plan* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mapid_, other->mapid_);
    std::swap(boss_, other->boss_);
    std::swap(plan_, other->plan_);
    pos_.Swap(&other->pos_);
    std::swap(count_, other->count_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plan_descriptor_;
  metadata.reflection = Plan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Plans::kPlansFieldNumber;
#endif  // !_MSC_VER

Plans::Plans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMonster.Plans)
}

void Plans::InitAsDefaultInstance() {
}

Plans::Plans(const Plans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMonster.Plans)
}

void Plans::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Plans::~Plans() {
  // @@protoc_insertion_point(destructor:CfgMonster.Plans)
  SharedDtor();
}

void Plans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Plans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Plans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Plans_descriptor_;
}

const Plans& Plans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMonster_2eproto();
  return *default_instance_;
}

Plans* Plans::default_instance_ = NULL;

Plans* Plans::New() const {
  return new Plans;
}

void Plans::Clear() {
  plans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Plans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMonster.Plans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgMonster.Plan plans = 1;
      case 1: {
        if (tag == 10) {
         parse_plans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_plans;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMonster.Plans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMonster.Plans)
  return false;
#undef DO_
}

void Plans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMonster.Plans)
  // repeated .CfgMonster.Plan plans = 1;
  for (int i = 0; i < this->plans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->plans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMonster.Plans)
}

::google::protobuf::uint8* Plans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMonster.Plans)
  // repeated .CfgMonster.Plan plans = 1;
  for (int i = 0; i < this->plans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMonster.Plans)
  return target;
}

int Plans::ByteSize() const {
  int total_size = 0;

  // repeated .CfgMonster.Plan plans = 1;
  total_size += 1 * this->plans_size();
  for (int i = 0; i < this->plans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Plans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Plans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Plans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Plans::MergeFrom(const Plans& from) {
  GOOGLE_CHECK_NE(&from, this);
  plans_.MergeFrom(from.plans_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Plans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plans::CopyFrom(const Plans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plans::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->plans())) return false;
  return true;
}

void Plans::Swap(Plans* other) {
  if (other != this) {
    plans_.Swap(&other->plans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Plans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Plans_descriptor_;
  metadata.reflection = Plans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgMonster

// @@protoc_insertion_point(global_scope)
