// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgMap.proto

#ifndef PROTOBUF_CfgMap_2eproto__INCLUDED
#define PROTOBUF_CfgMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CfgMap {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CfgMap_2eproto();
void protobuf_AssignDesc_CfgMap_2eproto();
void protobuf_ShutdownFile_CfgMap_2eproto();

class Map;
class Maps;
class Point;
class PassTo;
class PassPoint;
class BossPoint;
class Scene;
class Scenes;

// ===================================================================

class Map : public ::google::protobuf::Message {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();

  void Swap(Map* other);

  // implements Message ----------------------------------------------

  Map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 mapscene = 2;
  inline bool has_mapscene() const;
  inline void clear_mapscene();
  static const int kMapsceneFieldNumber = 2;
  inline ::google::protobuf::uint32 mapscene() const;
  inline void set_mapscene(::google::protobuf::uint32 value);

  // required uint32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bool hasBossPoint = 5;
  inline bool has_hasbosspoint() const;
  inline void clear_hasbosspoint();
  static const int kHasBossPointFieldNumber = 5;
  inline bool hasbosspoint() const;
  inline void set_hasbosspoint(bool value);

  // required uint32 copyid = 6;
  inline bool has_copyid() const;
  inline void clear_copyid();
  static const int kCopyidFieldNumber = 6;
  inline ::google::protobuf::uint32 copyid() const;
  inline void set_copyid(::google::protobuf::uint32 value);

  // required uint32 copyType = 7;
  inline bool has_copytype() const;
  inline void clear_copytype();
  static const int kCopyTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 copytype() const;
  inline void set_copytype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CfgMap.Map)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapscene();
  inline void clear_has_mapscene();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hasbosspoint();
  inline void clear_has_hasbosspoint();
  inline void set_has_copyid();
  inline void clear_has_copyid();
  inline void set_has_copytype();
  inline void clear_has_copytype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 mapscene_;
  ::std::string* name_;
  ::google::protobuf::uint32 version_;
  bool hasbosspoint_;
  ::google::protobuf::uint32 copyid_;
  ::google::protobuf::uint32 copytype_;
  friend void  protobuf_AddDesc_CfgMap_2eproto();
  friend void protobuf_AssignDesc_CfgMap_2eproto();
  friend void protobuf_ShutdownFile_CfgMap_2eproto();

  void InitAsDefaultInstance();
  static Map* default_instance_;
};
// -------------------------------------------------------------------

class Maps : public ::google::protobuf::Message {
 public:
  Maps();
  virtual ~Maps();

  Maps(const Maps& from);

  inline Maps& operator=(const Maps& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Maps& default_instance();

  void Swap(Maps* other);

  // implements Message ----------------------------------------------

  Maps* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Maps& from);
  void MergeFrom(const Maps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgMap.Map maps = 1;
  inline int maps_size() const;
  inline void clear_maps();
  static const int kMapsFieldNumber = 1;
  inline const ::CfgMap::Map& maps(int index) const;
  inline ::CfgMap::Map* mutable_maps(int index);
  inline ::CfgMap::Map* add_maps();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::Map >&
      maps() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMap::Map >*
      mutable_maps();

  // @@protoc_insertion_point(class_scope:CfgMap.Maps)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgMap::Map > maps_;
  friend void  protobuf_AddDesc_CfgMap_2eproto();
  friend void protobuf_AssignDesc_CfgMap_2eproto();
  friend void protobuf_ShutdownFile_CfgMap_2eproto();

  void InitAsDefaultInstance();
  static Maps* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CfgMap.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_CfgMap_2eproto();
  friend void protobuf_AssignDesc_CfgMap_2eproto();
  friend void protobuf_ShutdownFile_CfgMap_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class PassTo : public ::google::protobuf::Message {
 public:
  PassTo();
  virtual ~PassTo();

  PassTo(const PassTo& from);

  inline PassTo& operator=(const PassTo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassTo& default_instance();

  void Swap(PassTo* other);

  // implements Message ----------------------------------------------

  PassTo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassTo& from);
  void MergeFrom(const PassTo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 passToId = 1;
  inline bool has_passtoid() const;
  inline void clear_passtoid();
  static const int kPassToIdFieldNumber = 1;
  inline ::google::protobuf::int32 passtoid() const;
  inline void set_passtoid(::google::protobuf::int32 value);

  // required uint32 mapId = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // required .CfgMap.Point toPoint = 3;
  inline bool has_topoint() const;
  inline void clear_topoint();
  static const int kToPointFieldNumber = 3;
  inline const ::CfgMap::Point& topoint() const;
  inline ::CfgMap::Point* mutable_topoint();
  inline ::CfgMap::Point* release_topoint();
  inline void set_allocated_topoint(::CfgMap::Point* topoint);

  // @@protoc_insertion_point(class_scope:CfgMap.PassTo)
 private:
  inline void set_has_passtoid();
  inline void clear_has_passtoid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_topoint();
  inline void clear_has_topoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 passtoid_;
  ::google::protobuf::uint32 mapid_;
  ::CfgMap::Point* topoint_;
  friend void  protobuf_AddDesc_CfgMap_2eproto();
  friend void protobuf_AssignDesc_CfgMap_2eproto();
  friend void protobuf_ShutdownFile_CfgMap_2eproto();

  void InitAsDefaultInstance();
  static PassTo* default_instance_;
};
// -------------------------------------------------------------------

class PassPoint : public ::google::protobuf::Message {
 public:
  PassPoint();
  virtual ~PassPoint();

  PassPoint(const PassPoint& from);

  inline PassPoint& operator=(const PassPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassPoint& default_instance();

  void Swap(PassPoint* other);

  // implements Message ----------------------------------------------

  PassPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassPoint& from);
  void MergeFrom(const PassPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 passPointId = 1;
  inline bool has_passpointid() const;
  inline void clear_passpointid();
  static const int kPassPointIdFieldNumber = 1;
  inline ::google::protobuf::int32 passpointid() const;
  inline void set_passpointid(::google::protobuf::int32 value);

  // repeated .CfgMap.PassTo passTo = 2;
  inline int passto_size() const;
  inline void clear_passto();
  static const int kPassToFieldNumber = 2;
  inline const ::CfgMap::PassTo& passto(int index) const;
  inline ::CfgMap::PassTo* mutable_passto(int index);
  inline ::CfgMap::PassTo* add_passto();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::PassTo >&
      passto() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMap::PassTo >*
      mutable_passto();

  // @@protoc_insertion_point(class_scope:CfgMap.PassPoint)
 private:
  inline void set_has_passpointid();
  inline void clear_has_passpointid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgMap::PassTo > passto_;
  ::google::protobuf::int32 passpointid_;
  friend void  protobuf_AddDesc_CfgMap_2eproto();
  friend void protobuf_AssignDesc_CfgMap_2eproto();
  friend void protobuf_ShutdownFile_CfgMap_2eproto();

  void InitAsDefaultInstance();
  static PassPoint* default_instance_;
};
// -------------------------------------------------------------------

class BossPoint : public ::google::protobuf::Message {
 public:
  BossPoint();
  virtual ~BossPoint();

  BossPoint(const BossPoint& from);

  inline BossPoint& operator=(const BossPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossPoint& default_instance();

  void Swap(BossPoint* other);

  // implements Message ----------------------------------------------

  BossPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossPoint& from);
  void MergeFrom(const BossPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 plan = 1;
  inline bool has_plan() const;
  inline void clear_plan();
  static const int kPlanFieldNumber = 1;
  inline ::google::protobuf::int32 plan() const;
  inline void set_plan(::google::protobuf::int32 value);

  // required .CfgMap.Point point = 2;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 2;
  inline const ::CfgMap::Point& point() const;
  inline ::CfgMap::Point* mutable_point();
  inline ::CfgMap::Point* release_point();
  inline void set_allocated_point(::CfgMap::Point* point);

  // @@protoc_insertion_point(class_scope:CfgMap.BossPoint)
 private:
  inline void set_has_plan();
  inline void clear_has_plan();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CfgMap::Point* point_;
  ::google::protobuf::int32 plan_;
  friend void  protobuf_AddDesc_CfgMap_2eproto();
  friend void protobuf_AssignDesc_CfgMap_2eproto();
  friend void protobuf_ShutdownFile_CfgMap_2eproto();

  void InitAsDefaultInstance();
  static BossPoint* default_instance_;
};
// -------------------------------------------------------------------

class Scene : public ::google::protobuf::Message {
 public:
  Scene();
  virtual ~Scene();

  Scene(const Scene& from);

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene& default_instance();

  void Swap(Scene* other);

  // implements Message ----------------------------------------------

  Scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 mapId = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional int32 aiMode = 3;
  inline bool has_aimode() const;
  inline void clear_aimode();
  static const int kAiModeFieldNumber = 3;
  inline ::google::protobuf::int32 aimode() const;
  inline void set_aimode(::google::protobuf::int32 value);

  // required uint32 instanceType = 4;
  inline bool has_instancetype() const;
  inline void clear_instancetype();
  static const int kInstanceTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 instancetype() const;
  inline void set_instancetype(::google::protobuf::uint32 value);

  // required uint32 fightModel = 5;
  inline bool has_fightmodel() const;
  inline void clear_fightmodel();
  static const int kFightModelFieldNumber = 5;
  inline ::google::protobuf::uint32 fightmodel() const;
  inline void set_fightmodel(::google::protobuf::uint32 value);

  // repeated .CfgMap.BossPoint bossCenterPoints = 6;
  inline int bosscenterpoints_size() const;
  inline void clear_bosscenterpoints();
  static const int kBossCenterPointsFieldNumber = 6;
  inline const ::CfgMap::BossPoint& bosscenterpoints(int index) const;
  inline ::CfgMap::BossPoint* mutable_bosscenterpoints(int index);
  inline ::CfgMap::BossPoint* add_bosscenterpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::BossPoint >&
      bosscenterpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMap::BossPoint >*
      mutable_bosscenterpoints();

  // repeated .CfgMap.PassPoint passPoints = 7;
  inline int passpoints_size() const;
  inline void clear_passpoints();
  static const int kPassPointsFieldNumber = 7;
  inline const ::CfgMap::PassPoint& passpoints(int index) const;
  inline ::CfgMap::PassPoint* mutable_passpoints(int index);
  inline ::CfgMap::PassPoint* add_passpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::PassPoint >&
      passpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMap::PassPoint >*
      mutable_passpoints();

  // optional uint32 addEnterPoint_x = 8;
  inline bool has_addenterpoint_x() const;
  inline void clear_addenterpoint_x();
  static const int kAddEnterPointXFieldNumber = 8;
  inline ::google::protobuf::uint32 addenterpoint_x() const;
  inline void set_addenterpoint_x(::google::protobuf::uint32 value);

  // optional uint32 addEnterPoint_y = 9;
  inline bool has_addenterpoint_y() const;
  inline void clear_addenterpoint_y();
  static const int kAddEnterPointYFieldNumber = 9;
  inline ::google::protobuf::uint32 addenterpoint_y() const;
  inline void set_addenterpoint_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CfgMap.Scene)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_aimode();
  inline void clear_has_aimode();
  inline void set_has_instancetype();
  inline void clear_has_instancetype();
  inline void set_has_fightmodel();
  inline void clear_has_fightmodel();
  inline void set_has_addenterpoint_x();
  inline void clear_has_addenterpoint_x();
  inline void set_has_addenterpoint_y();
  inline void clear_has_addenterpoint_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 aimode_;
  ::google::protobuf::uint32 instancetype_;
  ::google::protobuf::RepeatedPtrField< ::CfgMap::BossPoint > bosscenterpoints_;
  ::google::protobuf::uint32 fightmodel_;
  ::google::protobuf::uint32 addenterpoint_x_;
  ::google::protobuf::RepeatedPtrField< ::CfgMap::PassPoint > passpoints_;
  ::google::protobuf::uint32 addenterpoint_y_;
  friend void  protobuf_AddDesc_CfgMap_2eproto();
  friend void protobuf_AssignDesc_CfgMap_2eproto();
  friend void protobuf_ShutdownFile_CfgMap_2eproto();

  void InitAsDefaultInstance();
  static Scene* default_instance_;
};
// -------------------------------------------------------------------

class Scenes : public ::google::protobuf::Message {
 public:
  Scenes();
  virtual ~Scenes();

  Scenes(const Scenes& from);

  inline Scenes& operator=(const Scenes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scenes& default_instance();

  void Swap(Scenes* other);

  // implements Message ----------------------------------------------

  Scenes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scenes& from);
  void MergeFrom(const Scenes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgMap.Scene scenes = 1;
  inline int scenes_size() const;
  inline void clear_scenes();
  static const int kScenesFieldNumber = 1;
  inline const ::CfgMap::Scene& scenes(int index) const;
  inline ::CfgMap::Scene* mutable_scenes(int index);
  inline ::CfgMap::Scene* add_scenes();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::Scene >&
      scenes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMap::Scene >*
      mutable_scenes();

  // @@protoc_insertion_point(class_scope:CfgMap.Scenes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgMap::Scene > scenes_;
  friend void  protobuf_AddDesc_CfgMap_2eproto();
  friend void protobuf_AssignDesc_CfgMap_2eproto();
  friend void protobuf_ShutdownFile_CfgMap_2eproto();

  void InitAsDefaultInstance();
  static Scenes* default_instance_;
};
// ===================================================================


// ===================================================================

// Map

// required uint32 id = 1;
inline bool Map::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Map::id() const {
  // @@protoc_insertion_point(field_get:CfgMap.Map.id)
  return id_;
}
inline void Map::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Map.id)
}

// required uint32 mapscene = 2;
inline bool Map::has_mapscene() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map::set_has_mapscene() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map::clear_has_mapscene() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map::clear_mapscene() {
  mapscene_ = 0u;
  clear_has_mapscene();
}
inline ::google::protobuf::uint32 Map::mapscene() const {
  // @@protoc_insertion_point(field_get:CfgMap.Map.mapscene)
  return mapscene_;
}
inline void Map::set_mapscene(::google::protobuf::uint32 value) {
  set_has_mapscene();
  mapscene_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Map.mapscene)
}

// required uint32 version = 3;
inline bool Map::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Map::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Map::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Map::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Map::version() const {
  // @@protoc_insertion_point(field_get:CfgMap.Map.version)
  return version_;
}
inline void Map::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Map.version)
}

// required string name = 4;
inline bool Map::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Map::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Map::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Map::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Map::name() const {
  // @@protoc_insertion_point(field_get:CfgMap.Map.name)
  return *name_;
}
inline void Map::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:CfgMap.Map.name)
}
inline void Map::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:CfgMap.Map.name)
}
inline void Map::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CfgMap.Map.name)
}
inline ::std::string* Map::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CfgMap.Map.name)
  return name_;
}
inline ::std::string* Map::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Map::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CfgMap.Map.name)
}

// required bool hasBossPoint = 5;
inline bool Map::has_hasbosspoint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Map::set_has_hasbosspoint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Map::clear_has_hasbosspoint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Map::clear_hasbosspoint() {
  hasbosspoint_ = false;
  clear_has_hasbosspoint();
}
inline bool Map::hasbosspoint() const {
  // @@protoc_insertion_point(field_get:CfgMap.Map.hasBossPoint)
  return hasbosspoint_;
}
inline void Map::set_hasbosspoint(bool value) {
  set_has_hasbosspoint();
  hasbosspoint_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Map.hasBossPoint)
}

// required uint32 copyid = 6;
inline bool Map::has_copyid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Map::set_has_copyid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Map::clear_has_copyid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Map::clear_copyid() {
  copyid_ = 0u;
  clear_has_copyid();
}
inline ::google::protobuf::uint32 Map::copyid() const {
  // @@protoc_insertion_point(field_get:CfgMap.Map.copyid)
  return copyid_;
}
inline void Map::set_copyid(::google::protobuf::uint32 value) {
  set_has_copyid();
  copyid_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Map.copyid)
}

// required uint32 copyType = 7;
inline bool Map::has_copytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Map::set_has_copytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Map::clear_has_copytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Map::clear_copytype() {
  copytype_ = 0u;
  clear_has_copytype();
}
inline ::google::protobuf::uint32 Map::copytype() const {
  // @@protoc_insertion_point(field_get:CfgMap.Map.copyType)
  return copytype_;
}
inline void Map::set_copytype(::google::protobuf::uint32 value) {
  set_has_copytype();
  copytype_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Map.copyType)
}

// -------------------------------------------------------------------

// Maps

// repeated .CfgMap.Map maps = 1;
inline int Maps::maps_size() const {
  return maps_.size();
}
inline void Maps::clear_maps() {
  maps_.Clear();
}
inline const ::CfgMap::Map& Maps::maps(int index) const {
  // @@protoc_insertion_point(field_get:CfgMap.Maps.maps)
  return maps_.Get(index);
}
inline ::CfgMap::Map* Maps::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMap.Maps.maps)
  return maps_.Mutable(index);
}
inline ::CfgMap::Map* Maps::add_maps() {
  // @@protoc_insertion_point(field_add:CfgMap.Maps.maps)
  return maps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::Map >&
Maps::maps() const {
  // @@protoc_insertion_point(field_list:CfgMap.Maps.maps)
  return maps_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMap::Map >*
Maps::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:CfgMap.Maps.maps)
  return &maps_;
}

// -------------------------------------------------------------------

// Point

// required int32 x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:CfgMap.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Point.x)
}

// required int32 y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:CfgMap.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Point.y)
}

// -------------------------------------------------------------------

// PassTo

// required int32 passToId = 1;
inline bool PassTo::has_passtoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassTo::set_has_passtoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassTo::clear_has_passtoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassTo::clear_passtoid() {
  passtoid_ = 0;
  clear_has_passtoid();
}
inline ::google::protobuf::int32 PassTo::passtoid() const {
  // @@protoc_insertion_point(field_get:CfgMap.PassTo.passToId)
  return passtoid_;
}
inline void PassTo::set_passtoid(::google::protobuf::int32 value) {
  set_has_passtoid();
  passtoid_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.PassTo.passToId)
}

// required uint32 mapId = 2;
inline bool PassTo::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PassTo::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PassTo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PassTo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 PassTo::mapid() const {
  // @@protoc_insertion_point(field_get:CfgMap.PassTo.mapId)
  return mapid_;
}
inline void PassTo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.PassTo.mapId)
}

// required .CfgMap.Point toPoint = 3;
inline bool PassTo::has_topoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PassTo::set_has_topoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PassTo::clear_has_topoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PassTo::clear_topoint() {
  if (topoint_ != NULL) topoint_->::CfgMap::Point::Clear();
  clear_has_topoint();
}
inline const ::CfgMap::Point& PassTo::topoint() const {
  // @@protoc_insertion_point(field_get:CfgMap.PassTo.toPoint)
  return topoint_ != NULL ? *topoint_ : *default_instance_->topoint_;
}
inline ::CfgMap::Point* PassTo::mutable_topoint() {
  set_has_topoint();
  if (topoint_ == NULL) topoint_ = new ::CfgMap::Point;
  // @@protoc_insertion_point(field_mutable:CfgMap.PassTo.toPoint)
  return topoint_;
}
inline ::CfgMap::Point* PassTo::release_topoint() {
  clear_has_topoint();
  ::CfgMap::Point* temp = topoint_;
  topoint_ = NULL;
  return temp;
}
inline void PassTo::set_allocated_topoint(::CfgMap::Point* topoint) {
  delete topoint_;
  topoint_ = topoint;
  if (topoint) {
    set_has_topoint();
  } else {
    clear_has_topoint();
  }
  // @@protoc_insertion_point(field_set_allocated:CfgMap.PassTo.toPoint)
}

// -------------------------------------------------------------------

// PassPoint

// required int32 passPointId = 1;
inline bool PassPoint::has_passpointid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassPoint::set_has_passpointid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassPoint::clear_has_passpointid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassPoint::clear_passpointid() {
  passpointid_ = 0;
  clear_has_passpointid();
}
inline ::google::protobuf::int32 PassPoint::passpointid() const {
  // @@protoc_insertion_point(field_get:CfgMap.PassPoint.passPointId)
  return passpointid_;
}
inline void PassPoint::set_passpointid(::google::protobuf::int32 value) {
  set_has_passpointid();
  passpointid_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.PassPoint.passPointId)
}

// repeated .CfgMap.PassTo passTo = 2;
inline int PassPoint::passto_size() const {
  return passto_.size();
}
inline void PassPoint::clear_passto() {
  passto_.Clear();
}
inline const ::CfgMap::PassTo& PassPoint::passto(int index) const {
  // @@protoc_insertion_point(field_get:CfgMap.PassPoint.passTo)
  return passto_.Get(index);
}
inline ::CfgMap::PassTo* PassPoint::mutable_passto(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMap.PassPoint.passTo)
  return passto_.Mutable(index);
}
inline ::CfgMap::PassTo* PassPoint::add_passto() {
  // @@protoc_insertion_point(field_add:CfgMap.PassPoint.passTo)
  return passto_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::PassTo >&
PassPoint::passto() const {
  // @@protoc_insertion_point(field_list:CfgMap.PassPoint.passTo)
  return passto_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMap::PassTo >*
PassPoint::mutable_passto() {
  // @@protoc_insertion_point(field_mutable_list:CfgMap.PassPoint.passTo)
  return &passto_;
}

// -------------------------------------------------------------------

// BossPoint

// required int32 plan = 1;
inline bool BossPoint::has_plan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossPoint::set_has_plan() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossPoint::clear_has_plan() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossPoint::clear_plan() {
  plan_ = 0;
  clear_has_plan();
}
inline ::google::protobuf::int32 BossPoint::plan() const {
  // @@protoc_insertion_point(field_get:CfgMap.BossPoint.plan)
  return plan_;
}
inline void BossPoint::set_plan(::google::protobuf::int32 value) {
  set_has_plan();
  plan_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.BossPoint.plan)
}

// required .CfgMap.Point point = 2;
inline bool BossPoint::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossPoint::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossPoint::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossPoint::clear_point() {
  if (point_ != NULL) point_->::CfgMap::Point::Clear();
  clear_has_point();
}
inline const ::CfgMap::Point& BossPoint::point() const {
  // @@protoc_insertion_point(field_get:CfgMap.BossPoint.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::CfgMap::Point* BossPoint::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::CfgMap::Point;
  // @@protoc_insertion_point(field_mutable:CfgMap.BossPoint.point)
  return point_;
}
inline ::CfgMap::Point* BossPoint::release_point() {
  clear_has_point();
  ::CfgMap::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void BossPoint::set_allocated_point(::CfgMap::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:CfgMap.BossPoint.point)
}

// -------------------------------------------------------------------

// Scene

// required int32 id = 1;
inline bool Scene::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scene::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scene::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scene::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Scene::id() const {
  // @@protoc_insertion_point(field_get:CfgMap.Scene.id)
  return id_;
}
inline void Scene::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Scene.id)
}

// required int32 mapId = 2;
inline bool Scene::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scene::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scene::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scene::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 Scene::mapid() const {
  // @@protoc_insertion_point(field_get:CfgMap.Scene.mapId)
  return mapid_;
}
inline void Scene::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Scene.mapId)
}

// optional int32 aiMode = 3;
inline bool Scene::has_aimode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scene::set_has_aimode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scene::clear_has_aimode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scene::clear_aimode() {
  aimode_ = 0;
  clear_has_aimode();
}
inline ::google::protobuf::int32 Scene::aimode() const {
  // @@protoc_insertion_point(field_get:CfgMap.Scene.aiMode)
  return aimode_;
}
inline void Scene::set_aimode(::google::protobuf::int32 value) {
  set_has_aimode();
  aimode_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Scene.aiMode)
}

// required uint32 instanceType = 4;
inline bool Scene::has_instancetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scene::set_has_instancetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scene::clear_has_instancetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scene::clear_instancetype() {
  instancetype_ = 0u;
  clear_has_instancetype();
}
inline ::google::protobuf::uint32 Scene::instancetype() const {
  // @@protoc_insertion_point(field_get:CfgMap.Scene.instanceType)
  return instancetype_;
}
inline void Scene::set_instancetype(::google::protobuf::uint32 value) {
  set_has_instancetype();
  instancetype_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Scene.instanceType)
}

// required uint32 fightModel = 5;
inline bool Scene::has_fightmodel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scene::set_has_fightmodel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scene::clear_has_fightmodel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scene::clear_fightmodel() {
  fightmodel_ = 0u;
  clear_has_fightmodel();
}
inline ::google::protobuf::uint32 Scene::fightmodel() const {
  // @@protoc_insertion_point(field_get:CfgMap.Scene.fightModel)
  return fightmodel_;
}
inline void Scene::set_fightmodel(::google::protobuf::uint32 value) {
  set_has_fightmodel();
  fightmodel_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Scene.fightModel)
}

// repeated .CfgMap.BossPoint bossCenterPoints = 6;
inline int Scene::bosscenterpoints_size() const {
  return bosscenterpoints_.size();
}
inline void Scene::clear_bosscenterpoints() {
  bosscenterpoints_.Clear();
}
inline const ::CfgMap::BossPoint& Scene::bosscenterpoints(int index) const {
  // @@protoc_insertion_point(field_get:CfgMap.Scene.bossCenterPoints)
  return bosscenterpoints_.Get(index);
}
inline ::CfgMap::BossPoint* Scene::mutable_bosscenterpoints(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMap.Scene.bossCenterPoints)
  return bosscenterpoints_.Mutable(index);
}
inline ::CfgMap::BossPoint* Scene::add_bosscenterpoints() {
  // @@protoc_insertion_point(field_add:CfgMap.Scene.bossCenterPoints)
  return bosscenterpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::BossPoint >&
Scene::bosscenterpoints() const {
  // @@protoc_insertion_point(field_list:CfgMap.Scene.bossCenterPoints)
  return bosscenterpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMap::BossPoint >*
Scene::mutable_bosscenterpoints() {
  // @@protoc_insertion_point(field_mutable_list:CfgMap.Scene.bossCenterPoints)
  return &bosscenterpoints_;
}

// repeated .CfgMap.PassPoint passPoints = 7;
inline int Scene::passpoints_size() const {
  return passpoints_.size();
}
inline void Scene::clear_passpoints() {
  passpoints_.Clear();
}
inline const ::CfgMap::PassPoint& Scene::passpoints(int index) const {
  // @@protoc_insertion_point(field_get:CfgMap.Scene.passPoints)
  return passpoints_.Get(index);
}
inline ::CfgMap::PassPoint* Scene::mutable_passpoints(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMap.Scene.passPoints)
  return passpoints_.Mutable(index);
}
inline ::CfgMap::PassPoint* Scene::add_passpoints() {
  // @@protoc_insertion_point(field_add:CfgMap.Scene.passPoints)
  return passpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::PassPoint >&
Scene::passpoints() const {
  // @@protoc_insertion_point(field_list:CfgMap.Scene.passPoints)
  return passpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMap::PassPoint >*
Scene::mutable_passpoints() {
  // @@protoc_insertion_point(field_mutable_list:CfgMap.Scene.passPoints)
  return &passpoints_;
}

// optional uint32 addEnterPoint_x = 8;
inline bool Scene::has_addenterpoint_x() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Scene::set_has_addenterpoint_x() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Scene::clear_has_addenterpoint_x() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Scene::clear_addenterpoint_x() {
  addenterpoint_x_ = 0u;
  clear_has_addenterpoint_x();
}
inline ::google::protobuf::uint32 Scene::addenterpoint_x() const {
  // @@protoc_insertion_point(field_get:CfgMap.Scene.addEnterPoint_x)
  return addenterpoint_x_;
}
inline void Scene::set_addenterpoint_x(::google::protobuf::uint32 value) {
  set_has_addenterpoint_x();
  addenterpoint_x_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Scene.addEnterPoint_x)
}

// optional uint32 addEnterPoint_y = 9;
inline bool Scene::has_addenterpoint_y() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Scene::set_has_addenterpoint_y() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Scene::clear_has_addenterpoint_y() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Scene::clear_addenterpoint_y() {
  addenterpoint_y_ = 0u;
  clear_has_addenterpoint_y();
}
inline ::google::protobuf::uint32 Scene::addenterpoint_y() const {
  // @@protoc_insertion_point(field_get:CfgMap.Scene.addEnterPoint_y)
  return addenterpoint_y_;
}
inline void Scene::set_addenterpoint_y(::google::protobuf::uint32 value) {
  set_has_addenterpoint_y();
  addenterpoint_y_ = value;
  // @@protoc_insertion_point(field_set:CfgMap.Scene.addEnterPoint_y)
}

// -------------------------------------------------------------------

// Scenes

// repeated .CfgMap.Scene scenes = 1;
inline int Scenes::scenes_size() const {
  return scenes_.size();
}
inline void Scenes::clear_scenes() {
  scenes_.Clear();
}
inline const ::CfgMap::Scene& Scenes::scenes(int index) const {
  // @@protoc_insertion_point(field_get:CfgMap.Scenes.scenes)
  return scenes_.Get(index);
}
inline ::CfgMap::Scene* Scenes::mutable_scenes(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMap.Scenes.scenes)
  return scenes_.Mutable(index);
}
inline ::CfgMap::Scene* Scenes::add_scenes() {
  // @@protoc_insertion_point(field_add:CfgMap.Scenes.scenes)
  return scenes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMap::Scene >&
Scenes::scenes() const {
  // @@protoc_insertion_point(field_list:CfgMap.Scenes.scenes)
  return scenes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMap::Scene >*
Scenes::mutable_scenes() {
  // @@protoc_insertion_point(field_mutable_list:CfgMap.Scenes.scenes)
  return &scenes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgMap

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CfgMap_2eproto__INCLUDED
