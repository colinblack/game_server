// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgMonster.proto

#ifndef PROTOBUF_CfgMonster_2eproto__INCLUDED
#define PROTOBUF_CfgMonster_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CfgCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace CfgMonster {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CfgMonster_2eproto();
void protobuf_AssignDesc_CfgMonster_2eproto();
void protobuf_ShutdownFile_CfgMonster_2eproto();

class Point;
class Monster;
class Monsters;
class Plan;
class Plans;

// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CfgMonster.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_CfgMonster_2eproto();
  friend void protobuf_AssignDesc_CfgMonster_2eproto();
  friend void protobuf_ShutdownFile_CfgMonster_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Monster : public ::google::protobuf::Message {
 public:
  Monster();
  virtual ~Monster();

  Monster(const Monster& from);

  inline Monster& operator=(const Monster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Monster& default_instance();

  void Swap(Monster* other);

  // implements Message ----------------------------------------------

  Monster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Monster& from);
  void MergeFrom(const Monster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint64 hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  inline ::google::protobuf::uint64 hp() const;
  inline void set_hp(::google::protobuf::uint64 value);

  // required uint32 hpPercent = 4;
  inline bool has_hppercent() const;
  inline void clear_hppercent();
  static const int kHpPercentFieldNumber = 4;
  inline ::google::protobuf::uint32 hppercent() const;
  inline void set_hppercent(::google::protobuf::uint32 value);

  // required uint32 speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // required uint32 width = 6;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 6;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 skill = 7;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 7;
  inline ::google::protobuf::uint32 skill() const;
  inline void set_skill(::google::protobuf::uint32 value);

  // required uint32 defence = 8;
  inline bool has_defence() const;
  inline void clear_defence();
  static const int kDefenceFieldNumber = 8;
  inline ::google::protobuf::uint32 defence() const;
  inline void set_defence(::google::protobuf::uint32 value);

  // required uint32 alive = 9;
  inline bool has_alive() const;
  inline void clear_alive();
  static const int kAliveFieldNumber = 9;
  inline ::google::protobuf::uint32 alive() const;
  inline void set_alive(::google::protobuf::uint32 value);

  // required uint32 attack = 10;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 10;
  inline ::google::protobuf::uint32 attack() const;
  inline void set_attack(::google::protobuf::uint32 value);

  // repeated .CfgCommon.Reward reward = 11;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 11;
  inline const ::CfgCommon::Reward& reward(int index) const;
  inline ::CfgCommon::Reward* mutable_reward(int index);
  inline ::CfgCommon::Reward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >*
      mutable_reward();

  // required uint32 exp = 12;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 12;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required string skill2 = 13;
  inline bool has_skill2() const;
  inline void clear_skill2();
  static const int kSkill2FieldNumber = 13;
  inline const ::std::string& skill2() const;
  inline void set_skill2(const ::std::string& value);
  inline void set_skill2(const char* value);
  inline void set_skill2(const char* value, size_t size);
  inline ::std::string* mutable_skill2();
  inline ::std::string* release_skill2();
  inline void set_allocated_skill2(::std::string* skill2);

  // required uint32 wuxing = 14;
  inline bool has_wuxing() const;
  inline void clear_wuxing();
  static const int kWuxingFieldNumber = 14;
  inline ::google::protobuf::uint32 wuxing() const;
  inline void set_wuxing(::google::protobuf::uint32 value);

  // required uint32 fixDmgDec = 15;
  inline bool has_fixdmgdec() const;
  inline void clear_fixdmgdec();
  static const int kFixDmgDecFieldNumber = 15;
  inline ::google::protobuf::uint32 fixdmgdec() const;
  inline void set_fixdmgdec(::google::protobuf::uint32 value);

  // required uint32 dmgDec = 16;
  inline bool has_dmgdec() const;
  inline void clear_dmgdec();
  static const int kDmgDecFieldNumber = 16;
  inline ::google::protobuf::uint32 dmgdec() const;
  inline void set_dmgdec(::google::protobuf::uint32 value);

  // required uint32 critBreakRate = 17;
  inline bool has_critbreakrate() const;
  inline void clear_critbreakrate();
  static const int kCritBreakRateFieldNumber = 17;
  inline ::google::protobuf::uint32 critbreakrate() const;
  inline void set_critbreakrate(::google::protobuf::uint32 value);

  // required uint32 critBreak = 18;
  inline bool has_critbreak() const;
  inline void clear_critbreak();
  static const int kCritBreakFieldNumber = 18;
  inline ::google::protobuf::uint32 critbreak() const;
  inline void set_critbreak(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CfgMonster.Monster)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hppercent();
  inline void clear_has_hppercent();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_defence();
  inline void clear_has_defence();
  inline void set_has_alive();
  inline void clear_has_alive();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_skill2();
  inline void clear_has_skill2();
  inline void set_has_wuxing();
  inline void clear_has_wuxing();
  inline void set_has_fixdmgdec();
  inline void clear_has_fixdmgdec();
  inline void set_has_dmgdec();
  inline void clear_has_dmgdec();
  inline void set_has_critbreakrate();
  inline void clear_has_critbreakrate();
  inline void set_has_critbreak();
  inline void clear_has_critbreak();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 hp_;
  ::google::protobuf::uint32 hppercent_;
  ::google::protobuf::uint32 speed_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 skill_;
  ::google::protobuf::uint32 defence_;
  ::google::protobuf::uint32 alive_;
  ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward > reward_;
  ::google::protobuf::uint32 attack_;
  ::google::protobuf::uint32 exp_;
  ::std::string* skill2_;
  ::google::protobuf::uint32 wuxing_;
  ::google::protobuf::uint32 fixdmgdec_;
  ::google::protobuf::uint32 dmgdec_;
  ::google::protobuf::uint32 critbreakrate_;
  ::google::protobuf::uint32 critbreak_;
  friend void  protobuf_AddDesc_CfgMonster_2eproto();
  friend void protobuf_AssignDesc_CfgMonster_2eproto();
  friend void protobuf_ShutdownFile_CfgMonster_2eproto();

  void InitAsDefaultInstance();
  static Monster* default_instance_;
};
// -------------------------------------------------------------------

class Monsters : public ::google::protobuf::Message {
 public:
  Monsters();
  virtual ~Monsters();

  Monsters(const Monsters& from);

  inline Monsters& operator=(const Monsters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Monsters& default_instance();

  void Swap(Monsters* other);

  // implements Message ----------------------------------------------

  Monsters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Monsters& from);
  void MergeFrom(const Monsters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgMonster.Monster monsters = 1;
  inline int monsters_size() const;
  inline void clear_monsters();
  static const int kMonstersFieldNumber = 1;
  inline const ::CfgMonster::Monster& monsters(int index) const;
  inline ::CfgMonster::Monster* mutable_monsters(int index);
  inline ::CfgMonster::Monster* add_monsters();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMonster::Monster >&
      monsters() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMonster::Monster >*
      mutable_monsters();

  // @@protoc_insertion_point(class_scope:CfgMonster.Monsters)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgMonster::Monster > monsters_;
  friend void  protobuf_AddDesc_CfgMonster_2eproto();
  friend void protobuf_AssignDesc_CfgMonster_2eproto();
  friend void protobuf_ShutdownFile_CfgMonster_2eproto();

  void InitAsDefaultInstance();
  static Monsters* default_instance_;
};
// -------------------------------------------------------------------

class Plan : public ::google::protobuf::Message {
 public:
  Plan();
  virtual ~Plan();

  Plan(const Plan& from);

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plan& default_instance();

  void Swap(Plan* other);

  // implements Message ----------------------------------------------

  Plan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Plan& from);
  void MergeFrom(const Plan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // required uint32 boss = 3;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 3;
  inline ::google::protobuf::uint32 boss() const;
  inline void set_boss(::google::protobuf::uint32 value);

  // required uint32 plan = 4;
  inline bool has_plan() const;
  inline void clear_plan();
  static const int kPlanFieldNumber = 4;
  inline ::google::protobuf::uint32 plan() const;
  inline void set_plan(::google::protobuf::uint32 value);

  // repeated .CfgMonster.Point pos = 5;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::CfgMonster::Point& pos(int index) const;
  inline ::CfgMonster::Point* mutable_pos(int index);
  inline ::CfgMonster::Point* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMonster::Point >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMonster::Point >*
      mutable_pos();

  // @@protoc_insertion_point(class_scope:CfgMonster.Plan)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_plan();
  inline void clear_has_plan();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 boss_;
  ::google::protobuf::uint32 plan_;
  ::google::protobuf::RepeatedPtrField< ::CfgMonster::Point > pos_;
  friend void  protobuf_AddDesc_CfgMonster_2eproto();
  friend void protobuf_AssignDesc_CfgMonster_2eproto();
  friend void protobuf_ShutdownFile_CfgMonster_2eproto();

  void InitAsDefaultInstance();
  static Plan* default_instance_;
};
// -------------------------------------------------------------------

class Plans : public ::google::protobuf::Message {
 public:
  Plans();
  virtual ~Plans();

  Plans(const Plans& from);

  inline Plans& operator=(const Plans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Plans& default_instance();

  void Swap(Plans* other);

  // implements Message ----------------------------------------------

  Plans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Plans& from);
  void MergeFrom(const Plans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CfgMonster.Plan plans = 1;
  inline int plans_size() const;
  inline void clear_plans();
  static const int kPlansFieldNumber = 1;
  inline const ::CfgMonster::Plan& plans(int index) const;
  inline ::CfgMonster::Plan* mutable_plans(int index);
  inline ::CfgMonster::Plan* add_plans();
  inline const ::google::protobuf::RepeatedPtrField< ::CfgMonster::Plan >&
      plans() const;
  inline ::google::protobuf::RepeatedPtrField< ::CfgMonster::Plan >*
      mutable_plans();

  // @@protoc_insertion_point(class_scope:CfgMonster.Plans)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CfgMonster::Plan > plans_;
  friend void  protobuf_AddDesc_CfgMonster_2eproto();
  friend void protobuf_AssignDesc_CfgMonster_2eproto();
  friend void protobuf_ShutdownFile_CfgMonster_2eproto();

  void InitAsDefaultInstance();
  static Plans* default_instance_;
};
// ===================================================================


// ===================================================================

// Point

// required int32 x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Point.x)
}

// required int32 y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Point.y)
}

// -------------------------------------------------------------------

// Monster

// required uint32 id = 1;
inline bool Monster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Monster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Monster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Monster::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Monster::id() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.id)
  return id_;
}
inline void Monster::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.id)
}

// required uint32 level = 2;
inline bool Monster::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Monster::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Monster::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Monster::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Monster::level() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.level)
  return level_;
}
inline void Monster::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.level)
}

// required uint64 hp = 3;
inline bool Monster::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Monster::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Monster::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Monster::clear_hp() {
  hp_ = GOOGLE_ULONGLONG(0);
  clear_has_hp();
}
inline ::google::protobuf::uint64 Monster::hp() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.hp)
  return hp_;
}
inline void Monster::set_hp(::google::protobuf::uint64 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.hp)
}

// required uint32 hpPercent = 4;
inline bool Monster::has_hppercent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Monster::set_has_hppercent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Monster::clear_has_hppercent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Monster::clear_hppercent() {
  hppercent_ = 0u;
  clear_has_hppercent();
}
inline ::google::protobuf::uint32 Monster::hppercent() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.hpPercent)
  return hppercent_;
}
inline void Monster::set_hppercent(::google::protobuf::uint32 value) {
  set_has_hppercent();
  hppercent_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.hpPercent)
}

// required uint32 speed = 5;
inline bool Monster::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Monster::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Monster::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Monster::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 Monster::speed() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.speed)
  return speed_;
}
inline void Monster::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.speed)
}

// required uint32 width = 6;
inline bool Monster::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Monster::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Monster::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Monster::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Monster::width() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.width)
  return width_;
}
inline void Monster::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.width)
}

// required uint32 skill = 7;
inline bool Monster::has_skill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Monster::set_has_skill() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Monster::clear_has_skill() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Monster::clear_skill() {
  skill_ = 0u;
  clear_has_skill();
}
inline ::google::protobuf::uint32 Monster::skill() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.skill)
  return skill_;
}
inline void Monster::set_skill(::google::protobuf::uint32 value) {
  set_has_skill();
  skill_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.skill)
}

// required uint32 defence = 8;
inline bool Monster::has_defence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Monster::set_has_defence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Monster::clear_has_defence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Monster::clear_defence() {
  defence_ = 0u;
  clear_has_defence();
}
inline ::google::protobuf::uint32 Monster::defence() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.defence)
  return defence_;
}
inline void Monster::set_defence(::google::protobuf::uint32 value) {
  set_has_defence();
  defence_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.defence)
}

// required uint32 alive = 9;
inline bool Monster::has_alive() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Monster::set_has_alive() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Monster::clear_has_alive() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Monster::clear_alive() {
  alive_ = 0u;
  clear_has_alive();
}
inline ::google::protobuf::uint32 Monster::alive() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.alive)
  return alive_;
}
inline void Monster::set_alive(::google::protobuf::uint32 value) {
  set_has_alive();
  alive_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.alive)
}

// required uint32 attack = 10;
inline bool Monster::has_attack() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Monster::set_has_attack() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Monster::clear_has_attack() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Monster::clear_attack() {
  attack_ = 0u;
  clear_has_attack();
}
inline ::google::protobuf::uint32 Monster::attack() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.attack)
  return attack_;
}
inline void Monster::set_attack(::google::protobuf::uint32 value) {
  set_has_attack();
  attack_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.attack)
}

// repeated .CfgCommon.Reward reward = 11;
inline int Monster::reward_size() const {
  return reward_.size();
}
inline void Monster::clear_reward() {
  reward_.Clear();
}
inline const ::CfgCommon::Reward& Monster::reward(int index) const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.reward)
  return reward_.Get(index);
}
inline ::CfgCommon::Reward* Monster::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMonster.Monster.reward)
  return reward_.Mutable(index);
}
inline ::CfgCommon::Reward* Monster::add_reward() {
  // @@protoc_insertion_point(field_add:CfgMonster.Monster.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >&
Monster::reward() const {
  // @@protoc_insertion_point(field_list:CfgMonster.Monster.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgCommon::Reward >*
Monster::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:CfgMonster.Monster.reward)
  return &reward_;
}

// required uint32 exp = 12;
inline bool Monster::has_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Monster::set_has_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Monster::clear_has_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Monster::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 Monster::exp() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.exp)
  return exp_;
}
inline void Monster::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.exp)
}

// required string skill2 = 13;
inline bool Monster::has_skill2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Monster::set_has_skill2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Monster::clear_has_skill2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Monster::clear_skill2() {
  if (skill2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill2_->clear();
  }
  clear_has_skill2();
}
inline const ::std::string& Monster::skill2() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.skill2)
  return *skill2_;
}
inline void Monster::set_skill2(const ::std::string& value) {
  set_has_skill2();
  if (skill2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill2_ = new ::std::string;
  }
  skill2_->assign(value);
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.skill2)
}
inline void Monster::set_skill2(const char* value) {
  set_has_skill2();
  if (skill2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill2_ = new ::std::string;
  }
  skill2_->assign(value);
  // @@protoc_insertion_point(field_set_char:CfgMonster.Monster.skill2)
}
inline void Monster::set_skill2(const char* value, size_t size) {
  set_has_skill2();
  if (skill2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill2_ = new ::std::string;
  }
  skill2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CfgMonster.Monster.skill2)
}
inline ::std::string* Monster::mutable_skill2() {
  set_has_skill2();
  if (skill2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    skill2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CfgMonster.Monster.skill2)
  return skill2_;
}
inline ::std::string* Monster::release_skill2() {
  clear_has_skill2();
  if (skill2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = skill2_;
    skill2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Monster::set_allocated_skill2(::std::string* skill2) {
  if (skill2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete skill2_;
  }
  if (skill2) {
    set_has_skill2();
    skill2_ = skill2;
  } else {
    clear_has_skill2();
    skill2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CfgMonster.Monster.skill2)
}

// required uint32 wuxing = 14;
inline bool Monster::has_wuxing() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Monster::set_has_wuxing() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Monster::clear_has_wuxing() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Monster::clear_wuxing() {
  wuxing_ = 0u;
  clear_has_wuxing();
}
inline ::google::protobuf::uint32 Monster::wuxing() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.wuxing)
  return wuxing_;
}
inline void Monster::set_wuxing(::google::protobuf::uint32 value) {
  set_has_wuxing();
  wuxing_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.wuxing)
}

// required uint32 fixDmgDec = 15;
inline bool Monster::has_fixdmgdec() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Monster::set_has_fixdmgdec() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Monster::clear_has_fixdmgdec() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Monster::clear_fixdmgdec() {
  fixdmgdec_ = 0u;
  clear_has_fixdmgdec();
}
inline ::google::protobuf::uint32 Monster::fixdmgdec() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.fixDmgDec)
  return fixdmgdec_;
}
inline void Monster::set_fixdmgdec(::google::protobuf::uint32 value) {
  set_has_fixdmgdec();
  fixdmgdec_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.fixDmgDec)
}

// required uint32 dmgDec = 16;
inline bool Monster::has_dmgdec() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Monster::set_has_dmgdec() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Monster::clear_has_dmgdec() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Monster::clear_dmgdec() {
  dmgdec_ = 0u;
  clear_has_dmgdec();
}
inline ::google::protobuf::uint32 Monster::dmgdec() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.dmgDec)
  return dmgdec_;
}
inline void Monster::set_dmgdec(::google::protobuf::uint32 value) {
  set_has_dmgdec();
  dmgdec_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.dmgDec)
}

// required uint32 critBreakRate = 17;
inline bool Monster::has_critbreakrate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Monster::set_has_critbreakrate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Monster::clear_has_critbreakrate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Monster::clear_critbreakrate() {
  critbreakrate_ = 0u;
  clear_has_critbreakrate();
}
inline ::google::protobuf::uint32 Monster::critbreakrate() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.critBreakRate)
  return critbreakrate_;
}
inline void Monster::set_critbreakrate(::google::protobuf::uint32 value) {
  set_has_critbreakrate();
  critbreakrate_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.critBreakRate)
}

// required uint32 critBreak = 18;
inline bool Monster::has_critbreak() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Monster::set_has_critbreak() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Monster::clear_has_critbreak() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Monster::clear_critbreak() {
  critbreak_ = 0u;
  clear_has_critbreak();
}
inline ::google::protobuf::uint32 Monster::critbreak() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monster.critBreak)
  return critbreak_;
}
inline void Monster::set_critbreak(::google::protobuf::uint32 value) {
  set_has_critbreak();
  critbreak_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Monster.critBreak)
}

// -------------------------------------------------------------------

// Monsters

// repeated .CfgMonster.Monster monsters = 1;
inline int Monsters::monsters_size() const {
  return monsters_.size();
}
inline void Monsters::clear_monsters() {
  monsters_.Clear();
}
inline const ::CfgMonster::Monster& Monsters::monsters(int index) const {
  // @@protoc_insertion_point(field_get:CfgMonster.Monsters.monsters)
  return monsters_.Get(index);
}
inline ::CfgMonster::Monster* Monsters::mutable_monsters(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMonster.Monsters.monsters)
  return monsters_.Mutable(index);
}
inline ::CfgMonster::Monster* Monsters::add_monsters() {
  // @@protoc_insertion_point(field_add:CfgMonster.Monsters.monsters)
  return monsters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMonster::Monster >&
Monsters::monsters() const {
  // @@protoc_insertion_point(field_list:CfgMonster.Monsters.monsters)
  return monsters_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMonster::Monster >*
Monsters::mutable_monsters() {
  // @@protoc_insertion_point(field_mutable_list:CfgMonster.Monsters.monsters)
  return &monsters_;
}

// -------------------------------------------------------------------

// Plan

// required uint32 id = 1;
inline bool Plan::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Plan::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Plan::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Plan::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Plan::id() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Plan.id)
  return id_;
}
inline void Plan::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Plan.id)
}

// required uint32 mapid = 2;
inline bool Plan::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Plan::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Plan::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Plan::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 Plan::mapid() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Plan.mapid)
  return mapid_;
}
inline void Plan::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Plan.mapid)
}

// required uint32 boss = 3;
inline bool Plan::has_boss() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Plan::set_has_boss() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Plan::clear_has_boss() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Plan::clear_boss() {
  boss_ = 0u;
  clear_has_boss();
}
inline ::google::protobuf::uint32 Plan::boss() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Plan.boss)
  return boss_;
}
inline void Plan::set_boss(::google::protobuf::uint32 value) {
  set_has_boss();
  boss_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Plan.boss)
}

// required uint32 plan = 4;
inline bool Plan::has_plan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Plan::set_has_plan() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Plan::clear_has_plan() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Plan::clear_plan() {
  plan_ = 0u;
  clear_has_plan();
}
inline ::google::protobuf::uint32 Plan::plan() const {
  // @@protoc_insertion_point(field_get:CfgMonster.Plan.plan)
  return plan_;
}
inline void Plan::set_plan(::google::protobuf::uint32 value) {
  set_has_plan();
  plan_ = value;
  // @@protoc_insertion_point(field_set:CfgMonster.Plan.plan)
}

// repeated .CfgMonster.Point pos = 5;
inline int Plan::pos_size() const {
  return pos_.size();
}
inline void Plan::clear_pos() {
  pos_.Clear();
}
inline const ::CfgMonster::Point& Plan::pos(int index) const {
  // @@protoc_insertion_point(field_get:CfgMonster.Plan.pos)
  return pos_.Get(index);
}
inline ::CfgMonster::Point* Plan::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMonster.Plan.pos)
  return pos_.Mutable(index);
}
inline ::CfgMonster::Point* Plan::add_pos() {
  // @@protoc_insertion_point(field_add:CfgMonster.Plan.pos)
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMonster::Point >&
Plan::pos() const {
  // @@protoc_insertion_point(field_list:CfgMonster.Plan.pos)
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMonster::Point >*
Plan::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:CfgMonster.Plan.pos)
  return &pos_;
}

// -------------------------------------------------------------------

// Plans

// repeated .CfgMonster.Plan plans = 1;
inline int Plans::plans_size() const {
  return plans_.size();
}
inline void Plans::clear_plans() {
  plans_.Clear();
}
inline const ::CfgMonster::Plan& Plans::plans(int index) const {
  // @@protoc_insertion_point(field_get:CfgMonster.Plans.plans)
  return plans_.Get(index);
}
inline ::CfgMonster::Plan* Plans::mutable_plans(int index) {
  // @@protoc_insertion_point(field_mutable:CfgMonster.Plans.plans)
  return plans_.Mutable(index);
}
inline ::CfgMonster::Plan* Plans::add_plans() {
  // @@protoc_insertion_point(field_add:CfgMonster.Plans.plans)
  return plans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CfgMonster::Plan >&
Plans::plans() const {
  // @@protoc_insertion_point(field_list:CfgMonster.Plans.plans)
  return plans_;
}
inline ::google::protobuf::RepeatedPtrField< ::CfgMonster::Plan >*
Plans::mutable_plans() {
  // @@protoc_insertion_point(field_mutable_list:CfgMonster.Plans.plans)
  return &plans_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgMonster

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CfgMonster_2eproto__INCLUDED
