// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgSignRewards.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgSignRewards.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgSignRewards {

namespace {

const ::google::protobuf::Descriptor* signDaliyReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  signDaliyReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* levelTargetRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  levelTargetRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignRewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelRewards_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgSignRewards_2eproto() {
  protobuf_AddDesc_CfgSignRewards_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgSignRewards.proto");
  GOOGLE_CHECK(file != NULL);
  signDaliyReward_descriptor_ = file->message_type(0);
  static const int signDaliyReward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signDaliyReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signDaliyReward, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signDaliyReward, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signDaliyReward, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signDaliyReward, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signDaliyReward, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signDaliyReward, extra_item_),
  };
  signDaliyReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      signDaliyReward_descriptor_,
      signDaliyReward::default_instance_,
      signDaliyReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signDaliyReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signDaliyReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(signDaliyReward));
  levelTargetRewards_descriptor_ = file->message_type(1);
  static const int levelTargetRewards_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(levelTargetRewards, career_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(levelTargetRewards, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(levelTargetRewards, limit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(levelTargetRewards, gift_id_),
  };
  levelTargetRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      levelTargetRewards_descriptor_,
      levelTargetRewards::default_instance_,
      levelTargetRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(levelTargetRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(levelTargetRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(levelTargetRewards));
  SignRewards_descriptor_ = file->message_type(2);
  static const int SignRewards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRewards, signdaliyrewards_),
  };
  SignRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignRewards_descriptor_,
      SignRewards::default_instance_,
      SignRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignRewards));
  LevelRewards_descriptor_ = file->message_type(3);
  static const int LevelRewards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelRewards, levelreward_),
  };
  LevelRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelRewards_descriptor_,
      LevelRewards::default_instance_,
      LevelRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelRewards));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgSignRewards_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    signDaliyReward_descriptor_, &signDaliyReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    levelTargetRewards_descriptor_, &levelTargetRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignRewards_descriptor_, &SignRewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelRewards_descriptor_, &LevelRewards::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgSignRewards_2eproto() {
  delete signDaliyReward::default_instance_;
  delete signDaliyReward_reflection_;
  delete levelTargetRewards::default_instance_;
  delete levelTargetRewards_reflection_;
  delete SignRewards::default_instance_;
  delete SignRewards_reflection_;
  delete LevelRewards::default_instance_;
  delete LevelRewards_reflection_;
}

void protobuf_AddDesc_CfgSignRewards_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024CfgSignRewards.proto\022\016CfgSignRewards\"~"
    "\n\017signDaliyReward\022\n\n\002id\030\001 \002(\005\022\014\n\004days\030\002 "
    "\002(\005\022\014\n\004item\030\003 \002(\005\022\r\n\005count\030\004 \002(\005\022\021\n\tvip_"
    "level\030\005 \002(\005\022\r\n\005times\030\006 \002(\005\022\022\n\nextra_item"
    "\030\007 \002(\005\"_\n\022levelTargetRewards\022\024\n\014career_l"
    "evel\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\023\n\013limit_count"
    "\030\003 \002(\005\022\017\n\007gift_id\030\004 \002(\005\"H\n\013SignRewards\0229"
    "\n\020signDaliyRewards\030\001 \003(\0132\037.CfgSignReward"
    "s.signDaliyReward\"G\n\014LevelRewards\0227\n\013lev"
    "elReward\030\001 \003(\0132\".CfgSignRewards.levelTar"
    "getRewards", 410);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgSignRewards.proto", &protobuf_RegisterTypes);
  signDaliyReward::default_instance_ = new signDaliyReward();
  levelTargetRewards::default_instance_ = new levelTargetRewards();
  SignRewards::default_instance_ = new SignRewards();
  LevelRewards::default_instance_ = new LevelRewards();
  signDaliyReward::default_instance_->InitAsDefaultInstance();
  levelTargetRewards::default_instance_->InitAsDefaultInstance();
  SignRewards::default_instance_->InitAsDefaultInstance();
  LevelRewards::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgSignRewards_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgSignRewards_2eproto {
  StaticDescriptorInitializer_CfgSignRewards_2eproto() {
    protobuf_AddDesc_CfgSignRewards_2eproto();
  }
} static_descriptor_initializer_CfgSignRewards_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int signDaliyReward::kIdFieldNumber;
const int signDaliyReward::kDaysFieldNumber;
const int signDaliyReward::kItemFieldNumber;
const int signDaliyReward::kCountFieldNumber;
const int signDaliyReward::kVipLevelFieldNumber;
const int signDaliyReward::kTimesFieldNumber;
const int signDaliyReward::kExtraItemFieldNumber;
#endif  // !_MSC_VER

signDaliyReward::signDaliyReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSignRewards.signDaliyReward)
}

void signDaliyReward::InitAsDefaultInstance() {
}

signDaliyReward::signDaliyReward(const signDaliyReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSignRewards.signDaliyReward)
}

void signDaliyReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  days_ = 0;
  item_ = 0;
  count_ = 0;
  vip_level_ = 0;
  times_ = 0;
  extra_item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

signDaliyReward::~signDaliyReward() {
  // @@protoc_insertion_point(destructor:CfgSignRewards.signDaliyReward)
  SharedDtor();
}

void signDaliyReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void signDaliyReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signDaliyReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return signDaliyReward_descriptor_;
}

const signDaliyReward& signDaliyReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSignRewards_2eproto();
  return *default_instance_;
}

signDaliyReward* signDaliyReward::default_instance_ = NULL;

signDaliyReward* signDaliyReward::New() const {
  return new signDaliyReward;
}

void signDaliyReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<signDaliyReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, extra_item_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool signDaliyReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSignRewards.signDaliyReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_days;
        break;
      }

      // required int32 days = 2;
      case 2: {
        if (tag == 16) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item;
        break;
      }

      // required int32 item = 3;
      case 3: {
        if (tag == 24) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_vip_level;
        break;
      }

      // required int32 vip_level = 5;
      case 5: {
        if (tag == 40) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_times;
        break;
      }

      // required int32 times = 6;
      case 6: {
        if (tag == 48) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_extra_item;
        break;
      }

      // required int32 extra_item = 7;
      case 7: {
        if (tag == 56) {
         parse_extra_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_item_)));
          set_has_extra_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSignRewards.signDaliyReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSignRewards.signDaliyReward)
  return false;
#undef DO_
}

void signDaliyReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSignRewards.signDaliyReward)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 days = 2;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->days(), output);
  }

  // required int32 item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // required int32 vip_level = 5;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vip_level(), output);
  }

  // required int32 times = 6;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->times(), output);
  }

  // required int32 extra_item = 7;
  if (has_extra_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->extra_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSignRewards.signDaliyReward)
}

::google::protobuf::uint8* signDaliyReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSignRewards.signDaliyReward)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 days = 2;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->days(), target);
  }

  // required int32 item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // required int32 vip_level = 5;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vip_level(), target);
  }

  // required int32 times = 6;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->times(), target);
  }

  // required int32 extra_item = 7;
  if (has_extra_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->extra_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSignRewards.signDaliyReward)
  return target;
}

int signDaliyReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 days = 2;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days());
    }

    // required int32 item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }

    // required int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 vip_level = 5;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // required int32 times = 6;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // required int32 extra_item = 7;
    if (has_extra_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signDaliyReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const signDaliyReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const signDaliyReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void signDaliyReward::MergeFrom(const signDaliyReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_extra_item()) {
      set_extra_item(from.extra_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void signDaliyReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signDaliyReward::CopyFrom(const signDaliyReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signDaliyReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void signDaliyReward::Swap(signDaliyReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(days_, other->days_);
    std::swap(item_, other->item_);
    std::swap(count_, other->count_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(times_, other->times_);
    std::swap(extra_item_, other->extra_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata signDaliyReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = signDaliyReward_descriptor_;
  metadata.reflection = signDaliyReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int levelTargetRewards::kCareerLevelFieldNumber;
const int levelTargetRewards::kLevelFieldNumber;
const int levelTargetRewards::kLimitCountFieldNumber;
const int levelTargetRewards::kGiftIdFieldNumber;
#endif  // !_MSC_VER

levelTargetRewards::levelTargetRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSignRewards.levelTargetRewards)
}

void levelTargetRewards::InitAsDefaultInstance() {
}

levelTargetRewards::levelTargetRewards(const levelTargetRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSignRewards.levelTargetRewards)
}

void levelTargetRewards::SharedCtor() {
  _cached_size_ = 0;
  career_level_ = 0;
  level_ = 0;
  limit_count_ = 0;
  gift_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

levelTargetRewards::~levelTargetRewards() {
  // @@protoc_insertion_point(destructor:CfgSignRewards.levelTargetRewards)
  SharedDtor();
}

void levelTargetRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void levelTargetRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* levelTargetRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return levelTargetRewards_descriptor_;
}

const levelTargetRewards& levelTargetRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSignRewards_2eproto();
  return *default_instance_;
}

levelTargetRewards* levelTargetRewards::default_instance_ = NULL;

levelTargetRewards* levelTargetRewards::New() const {
  return new levelTargetRewards;
}

void levelTargetRewards::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<levelTargetRewards*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(career_level_, gift_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool levelTargetRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSignRewards.levelTargetRewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 career_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_level_)));
          set_has_career_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit_count;
        break;
      }

      // required int32 limit_count = 3;
      case 3: {
        if (tag == 24) {
         parse_limit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_count_)));
          set_has_limit_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gift_id;
        break;
      }

      // required int32 gift_id = 4;
      case 4: {
        if (tag == 32) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSignRewards.levelTargetRewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSignRewards.levelTargetRewards)
  return false;
#undef DO_
}

void levelTargetRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSignRewards.levelTargetRewards)
  // required int32 career_level = 1;
  if (has_career_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->career_level(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 limit_count = 3;
  if (has_limit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit_count(), output);
  }

  // required int32 gift_id = 4;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gift_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSignRewards.levelTargetRewards)
}

::google::protobuf::uint8* levelTargetRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSignRewards.levelTargetRewards)
  // required int32 career_level = 1;
  if (has_career_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->career_level(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 limit_count = 3;
  if (has_limit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit_count(), target);
  }

  // required int32 gift_id = 4;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gift_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSignRewards.levelTargetRewards)
  return target;
}

int levelTargetRewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 career_level = 1;
    if (has_career_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->career_level());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 limit_count = 3;
    if (has_limit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_count());
    }

    // required int32 gift_id = 4;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gift_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void levelTargetRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const levelTargetRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const levelTargetRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void levelTargetRewards::MergeFrom(const levelTargetRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_career_level()) {
      set_career_level(from.career_level());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_limit_count()) {
      set_limit_count(from.limit_count());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void levelTargetRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void levelTargetRewards::CopyFrom(const levelTargetRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool levelTargetRewards::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void levelTargetRewards::Swap(levelTargetRewards* other) {
  if (other != this) {
    std::swap(career_level_, other->career_level_);
    std::swap(level_, other->level_);
    std::swap(limit_count_, other->limit_count_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata levelTargetRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = levelTargetRewards_descriptor_;
  metadata.reflection = levelTargetRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignRewards::kSignDaliyRewardsFieldNumber;
#endif  // !_MSC_VER

SignRewards::SignRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSignRewards.SignRewards)
}

void SignRewards::InitAsDefaultInstance() {
}

SignRewards::SignRewards(const SignRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSignRewards.SignRewards)
}

void SignRewards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignRewards::~SignRewards() {
  // @@protoc_insertion_point(destructor:CfgSignRewards.SignRewards)
  SharedDtor();
}

void SignRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignRewards_descriptor_;
}

const SignRewards& SignRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSignRewards_2eproto();
  return *default_instance_;
}

SignRewards* SignRewards::default_instance_ = NULL;

SignRewards* SignRewards::New() const {
  return new SignRewards;
}

void SignRewards::Clear() {
  signdaliyrewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSignRewards.SignRewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgSignRewards.signDaliyReward signDaliyRewards = 1;
      case 1: {
        if (tag == 10) {
         parse_signDaliyRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signdaliyrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_signDaliyRewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSignRewards.SignRewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSignRewards.SignRewards)
  return false;
#undef DO_
}

void SignRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSignRewards.SignRewards)
  // repeated .CfgSignRewards.signDaliyReward signDaliyRewards = 1;
  for (int i = 0; i < this->signdaliyrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->signdaliyrewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSignRewards.SignRewards)
}

::google::protobuf::uint8* SignRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSignRewards.SignRewards)
  // repeated .CfgSignRewards.signDaliyReward signDaliyRewards = 1;
  for (int i = 0; i < this->signdaliyrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->signdaliyrewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSignRewards.SignRewards)
  return target;
}

int SignRewards::ByteSize() const {
  int total_size = 0;

  // repeated .CfgSignRewards.signDaliyReward signDaliyRewards = 1;
  total_size += 1 * this->signdaliyrewards_size();
  for (int i = 0; i < this->signdaliyrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signdaliyrewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignRewards::MergeFrom(const SignRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  signdaliyrewards_.MergeFrom(from.signdaliyrewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignRewards::CopyFrom(const SignRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignRewards::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->signdaliyrewards())) return false;
  return true;
}

void SignRewards::Swap(SignRewards* other) {
  if (other != this) {
    signdaliyrewards_.Swap(&other->signdaliyrewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignRewards_descriptor_;
  metadata.reflection = SignRewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelRewards::kLevelRewardFieldNumber;
#endif  // !_MSC_VER

LevelRewards::LevelRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSignRewards.LevelRewards)
}

void LevelRewards::InitAsDefaultInstance() {
}

LevelRewards::LevelRewards(const LevelRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSignRewards.LevelRewards)
}

void LevelRewards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelRewards::~LevelRewards() {
  // @@protoc_insertion_point(destructor:CfgSignRewards.LevelRewards)
  SharedDtor();
}

void LevelRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelRewards_descriptor_;
}

const LevelRewards& LevelRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSignRewards_2eproto();
  return *default_instance_;
}

LevelRewards* LevelRewards::default_instance_ = NULL;

LevelRewards* LevelRewards::New() const {
  return new LevelRewards;
}

void LevelRewards::Clear() {
  levelreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSignRewards.LevelRewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgSignRewards.levelTargetRewards levelReward = 1;
      case 1: {
        if (tag == 10) {
         parse_levelReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_levelReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSignRewards.LevelRewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSignRewards.LevelRewards)
  return false;
#undef DO_
}

void LevelRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSignRewards.LevelRewards)
  // repeated .CfgSignRewards.levelTargetRewards levelReward = 1;
  for (int i = 0; i < this->levelreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->levelreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSignRewards.LevelRewards)
}

::google::protobuf::uint8* LevelRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSignRewards.LevelRewards)
  // repeated .CfgSignRewards.levelTargetRewards levelReward = 1;
  for (int i = 0; i < this->levelreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->levelreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSignRewards.LevelRewards)
  return target;
}

int LevelRewards::ByteSize() const {
  int total_size = 0;

  // repeated .CfgSignRewards.levelTargetRewards levelReward = 1;
  total_size += 1 * this->levelreward_size();
  for (int i = 0; i < this->levelreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelRewards::MergeFrom(const LevelRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelreward_.MergeFrom(from.levelreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelRewards::CopyFrom(const LevelRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelRewards::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->levelreward())) return false;
  return true;
}

void LevelRewards::Swap(LevelRewards* other) {
  if (other != this) {
    levelreward_.Swap(&other->levelreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelRewards_descriptor_;
  metadata.reflection = LevelRewards_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgSignRewards

// @@protoc_insertion_point(global_scope)
