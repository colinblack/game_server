// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgAdvance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgAdvance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgAdvance {

namespace {

const ::google::protobuf::Descriptor* Advance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Advance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Advances_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Advances_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dans_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dans_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgAdvance_2eproto() {
  protobuf_AddDesc_CfgAdvance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgAdvance.proto");
  GOOGLE_CHECK(file != NULL);
  Advance_descriptor_ = file->message_type(0);
  static const int Advance_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, cost_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, cost_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, bless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, max_bless_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, attr_),
  };
  Advance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Advance_descriptor_,
      Advance::default_instance_,
      Advance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Advance));
  Advances_descriptor_ = file->message_type(1);
  static const int Advances_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advances, advances_),
  };
  Advances_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Advances_descriptor_,
      Advances::default_instance_,
      Advances_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advances, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advances, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Advances));
  Dan_descriptor_ = file->message_type(2);
  static const int Dan_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dan, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dan, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dan, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dan, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dan, attr_),
  };
  Dan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dan_descriptor_,
      Dan::default_instance_,
      Dan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dan));
  Dans_descriptor_ = file->message_type(3);
  static const int Dans_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dans, dans_),
  };
  Dans_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dans_descriptor_,
      Dans::default_instance_,
      Dans_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dans, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dans, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dans));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgAdvance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Advance_descriptor_, &Advance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Advances_descriptor_, &Advances::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dan_descriptor_, &Dan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dans_descriptor_, &Dans::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgAdvance_2eproto() {
  delete Advance::default_instance_;
  delete Advance_reflection_;
  delete Advances::default_instance_;
  delete Advances_reflection_;
  delete Dan::default_instance_;
  delete Dan_reflection_;
  delete Dans::default_instance_;
  delete Dans_reflection_;
}

void protobuf_AddDesc_CfgAdvance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020CfgAdvance.proto\022\nCfgAdvance\032\017CfgCommo"
    "n.proto\"\255\001\n\007Advance\022\014\n\004type\030\001 \002(\r\022\r\n\005gro"
    "up\030\002 \002(\r\022\014\n\004star\030\003 \002(\r\022\021\n\tcost_item\030\004 \002("
    "\r\022\020\n\010cost_num\030\005 \002(\r\022\r\n\005bless\030\006 \002(\r\022\021\n\tma"
    "x_bless\030\007 \002(\r\022\014\n\004mode\030\010 \002(\r\022\"\n\004attr\030\t \003("
    "\0132\024.CfgCommon.Attribute\"1\n\010Advances\022%\n\010a"
    "dvances\030\001 \003(\0132\023.CfgAdvance.Advance\"o\n\003Da"
    "n\022\014\n\004item\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\014\n\004type\030\003 \002("
    "\r\022\r\n\005level\030\004 \002(\r\022\r\n\005total\030\005 \002(\r\022\"\n\004attr\030"
    "\006 \003(\0132\024.CfgCommon.Attribute\"%\n\004Dans\022\035\n\004d"
    "ans\030\001 \003(\0132\017.CfgAdvance.Dan", 426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgAdvance.proto", &protobuf_RegisterTypes);
  Advance::default_instance_ = new Advance();
  Advances::default_instance_ = new Advances();
  Dan::default_instance_ = new Dan();
  Dans::default_instance_ = new Dans();
  Advance::default_instance_->InitAsDefaultInstance();
  Advances::default_instance_->InitAsDefaultInstance();
  Dan::default_instance_->InitAsDefaultInstance();
  Dans::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgAdvance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgAdvance_2eproto {
  StaticDescriptorInitializer_CfgAdvance_2eproto() {
    protobuf_AddDesc_CfgAdvance_2eproto();
  }
} static_descriptor_initializer_CfgAdvance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Advance::kTypeFieldNumber;
const int Advance::kGroupFieldNumber;
const int Advance::kStarFieldNumber;
const int Advance::kCostItemFieldNumber;
const int Advance::kCostNumFieldNumber;
const int Advance::kBlessFieldNumber;
const int Advance::kMaxBlessFieldNumber;
const int Advance::kModeFieldNumber;
const int Advance::kAttrFieldNumber;
#endif  // !_MSC_VER

Advance::Advance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgAdvance.Advance)
}

void Advance::InitAsDefaultInstance() {
}

Advance::Advance(const Advance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgAdvance.Advance)
}

void Advance::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  group_ = 0u;
  star_ = 0u;
  cost_item_ = 0u;
  cost_num_ = 0u;
  bless_ = 0u;
  max_bless_ = 0u;
  mode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Advance::~Advance() {
  // @@protoc_insertion_point(destructor:CfgAdvance.Advance)
  SharedDtor();
}

void Advance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Advance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Advance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Advance_descriptor_;
}

const Advance& Advance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgAdvance_2eproto();
  return *default_instance_;
}

Advance* Advance::default_instance_ = NULL;

Advance* Advance::New() const {
  return new Advance;
}

void Advance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Advance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, mode_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Advance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgAdvance.Advance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // required uint32 group = 2;
      case 2: {
        if (tag == 16) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // required uint32 star = 3;
      case 3: {
        if (tag == 24) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cost_item;
        break;
      }

      // required uint32 cost_item = 4;
      case 4: {
        if (tag == 32) {
         parse_cost_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_item_)));
          set_has_cost_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cost_num;
        break;
      }

      // required uint32 cost_num = 5;
      case 5: {
        if (tag == 40) {
         parse_cost_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_num_)));
          set_has_cost_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bless;
        break;
      }

      // required uint32 bless = 6;
      case 6: {
        if (tag == 48) {
         parse_bless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bless_)));
          set_has_bless();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_bless;
        break;
      }

      // required uint32 max_bless = 7;
      case 7: {
        if (tag == 56) {
         parse_max_bless:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bless_)));
          set_has_max_bless();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mode;
        break;
      }

      // required uint32 mode = 8;
      case 8: {
        if (tag == 64) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_attr;
        break;
      }

      // repeated .CfgCommon.Attribute attr = 9;
      case 9: {
        if (tag == 74) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_attr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgAdvance.Advance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgAdvance.Advance)
  return false;
#undef DO_
}

void Advance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgAdvance.Advance)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group(), output);
  }

  // required uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // required uint32 cost_item = 4;
  if (has_cost_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost_item(), output);
  }

  // required uint32 cost_num = 5;
  if (has_cost_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cost_num(), output);
  }

  // required uint32 bless = 6;
  if (has_bless()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bless(), output);
  }

  // required uint32 max_bless = 7;
  if (has_max_bless()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_bless(), output);
  }

  // required uint32 mode = 8;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mode(), output);
  }

  // repeated .CfgCommon.Attribute attr = 9;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgAdvance.Advance)
}

::google::protobuf::uint8* Advance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgAdvance.Advance)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group(), target);
  }

  // required uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  // required uint32 cost_item = 4;
  if (has_cost_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost_item(), target);
  }

  // required uint32 cost_num = 5;
  if (has_cost_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cost_num(), target);
  }

  // required uint32 bless = 6;
  if (has_bless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bless(), target);
  }

  // required uint32 max_bless = 7;
  if (has_max_bless()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_bless(), target);
  }

  // required uint32 mode = 8;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mode(), target);
  }

  // repeated .CfgCommon.Attribute attr = 9;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgAdvance.Advance)
  return target;
}

int Advance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // required uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 cost_item = 4;
    if (has_cost_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_item());
    }

    // required uint32 cost_num = 5;
    if (has_cost_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_num());
    }

    // required uint32 bless = 6;
    if (has_bless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bless());
    }

    // required uint32 max_bless = 7;
    if (has_max_bless()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_bless());
    }

    // required uint32 mode = 8;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  // repeated .CfgCommon.Attribute attr = 9;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Advance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Advance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Advance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Advance::MergeFrom(const Advance& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_cost_item()) {
      set_cost_item(from.cost_item());
    }
    if (from.has_cost_num()) {
      set_cost_num(from.cost_num());
    }
    if (from.has_bless()) {
      set_bless(from.bless());
    }
    if (from.has_max_bless()) {
      set_max_bless(from.max_bless());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Advance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Advance::CopyFrom(const Advance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Advance::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void Advance::Swap(Advance* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(group_, other->group_);
    std::swap(star_, other->star_);
    std::swap(cost_item_, other->cost_item_);
    std::swap(cost_num_, other->cost_num_);
    std::swap(bless_, other->bless_);
    std::swap(max_bless_, other->max_bless_);
    std::swap(mode_, other->mode_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Advance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Advance_descriptor_;
  metadata.reflection = Advance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Advances::kAdvancesFieldNumber;
#endif  // !_MSC_VER

Advances::Advances()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgAdvance.Advances)
}

void Advances::InitAsDefaultInstance() {
}

Advances::Advances(const Advances& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgAdvance.Advances)
}

void Advances::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Advances::~Advances() {
  // @@protoc_insertion_point(destructor:CfgAdvance.Advances)
  SharedDtor();
}

void Advances::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Advances::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Advances::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Advances_descriptor_;
}

const Advances& Advances::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgAdvance_2eproto();
  return *default_instance_;
}

Advances* Advances::default_instance_ = NULL;

Advances* Advances::New() const {
  return new Advances;
}

void Advances::Clear() {
  advances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Advances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgAdvance.Advances)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgAdvance.Advance advances = 1;
      case 1: {
        if (tag == 10) {
         parse_advances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_advances()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_advances;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgAdvance.Advances)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgAdvance.Advances)
  return false;
#undef DO_
}

void Advances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgAdvance.Advances)
  // repeated .CfgAdvance.Advance advances = 1;
  for (int i = 0; i < this->advances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->advances(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgAdvance.Advances)
}

::google::protobuf::uint8* Advances::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgAdvance.Advances)
  // repeated .CfgAdvance.Advance advances = 1;
  for (int i = 0; i < this->advances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->advances(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgAdvance.Advances)
  return target;
}

int Advances::ByteSize() const {
  int total_size = 0;

  // repeated .CfgAdvance.Advance advances = 1;
  total_size += 1 * this->advances_size();
  for (int i = 0; i < this->advances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->advances(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Advances::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Advances* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Advances*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Advances::MergeFrom(const Advances& from) {
  GOOGLE_CHECK_NE(&from, this);
  advances_.MergeFrom(from.advances_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Advances::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Advances::CopyFrom(const Advances& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Advances::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->advances())) return false;
  return true;
}

void Advances::Swap(Advances* other) {
  if (other != this) {
    advances_.Swap(&other->advances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Advances::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Advances_descriptor_;
  metadata.reflection = Advances_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dan::kItemFieldNumber;
const int Dan::kIdFieldNumber;
const int Dan::kTypeFieldNumber;
const int Dan::kLevelFieldNumber;
const int Dan::kTotalFieldNumber;
const int Dan::kAttrFieldNumber;
#endif  // !_MSC_VER

Dan::Dan()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgAdvance.Dan)
}

void Dan::InitAsDefaultInstance() {
}

Dan::Dan(const Dan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgAdvance.Dan)
}

void Dan::SharedCtor() {
  _cached_size_ = 0;
  item_ = 0u;
  id_ = 0u;
  type_ = 0u;
  level_ = 0u;
  total_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dan::~Dan() {
  // @@protoc_insertion_point(destructor:CfgAdvance.Dan)
  SharedDtor();
}

void Dan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dan_descriptor_;
}

const Dan& Dan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgAdvance_2eproto();
  return *default_instance_;
}

Dan* Dan::default_instance_ = NULL;

Dan* Dan::New() const {
  return new Dan;
}

void Dan::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Dan*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(item_, level_);
    total_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgAdvance.Dan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total;
        break;
      }

      // required uint32 total = 5;
      case 5: {
        if (tag == 40) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        break;
      }

      // repeated .CfgCommon.Attribute attr = 6;
      case 6: {
        if (tag == 50) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgAdvance.Dan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgAdvance.Dan)
  return false;
#undef DO_
}

void Dan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgAdvance.Dan)
  // required uint32 item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 total = 5;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total(), output);
  }

  // repeated .CfgCommon.Attribute attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgAdvance.Dan)
}

::google::protobuf::uint8* Dan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgAdvance.Dan)
  // required uint32 item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint32 total = 5;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total(), target);
  }

  // repeated .CfgCommon.Attribute attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgAdvance.Dan)
  return target;
}

int Dan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 total = 5;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

  }
  // repeated .CfgCommon.Attribute attr = 6;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dan::MergeFrom(const Dan& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dan::CopyFrom(const Dan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dan::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void Dan::Swap(Dan* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(total_, other->total_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dan_descriptor_;
  metadata.reflection = Dan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dans::kDansFieldNumber;
#endif  // !_MSC_VER

Dans::Dans()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgAdvance.Dans)
}

void Dans::InitAsDefaultInstance() {
}

Dans::Dans(const Dans& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgAdvance.Dans)
}

void Dans::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dans::~Dans() {
  // @@protoc_insertion_point(destructor:CfgAdvance.Dans)
  SharedDtor();
}

void Dans::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dans::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dans::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dans_descriptor_;
}

const Dans& Dans::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgAdvance_2eproto();
  return *default_instance_;
}

Dans* Dans::default_instance_ = NULL;

Dans* Dans::New() const {
  return new Dans;
}

void Dans::Clear() {
  dans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dans::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgAdvance.Dans)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgAdvance.Dan dans = 1;
      case 1: {
        if (tag == 10) {
         parse_dans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dans;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgAdvance.Dans)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgAdvance.Dans)
  return false;
#undef DO_
}

void Dans::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgAdvance.Dans)
  // repeated .CfgAdvance.Dan dans = 1;
  for (int i = 0; i < this->dans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgAdvance.Dans)
}

::google::protobuf::uint8* Dans::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgAdvance.Dans)
  // repeated .CfgAdvance.Dan dans = 1;
  for (int i = 0; i < this->dans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgAdvance.Dans)
  return target;
}

int Dans::ByteSize() const {
  int total_size = 0;

  // repeated .CfgAdvance.Dan dans = 1;
  total_size += 1 * this->dans_size();
  for (int i = 0; i < this->dans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dans::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dans* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dans*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dans::MergeFrom(const Dans& from) {
  GOOGLE_CHECK_NE(&from, this);
  dans_.MergeFrom(from.dans_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dans::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dans::CopyFrom(const Dans& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dans::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->dans())) return false;
  return true;
}

void Dans::Swap(Dans* other) {
  if (other != this) {
    dans_.Swap(&other->dans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dans::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dans_descriptor_;
  metadata.reflection = Dans_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgAdvance

// @@protoc_insertion_point(global_scope)
