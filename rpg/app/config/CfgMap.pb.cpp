// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgMap {

namespace {

const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* Maps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Maps_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassTo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassTo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scene_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scenes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scenes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgMap_2eproto() {
  protobuf_AddDesc_CfgMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgMap.proto");
  GOOGLE_CHECK(file != NULL);
  Map_descriptor_ = file->message_type(0);
  static const int Map_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, mapscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, hasbosspoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, copytype_),
  };
  Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_descriptor_,
      Map::default_instance_,
      Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map));
  Maps_descriptor_ = file->message_type(1);
  static const int Maps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maps, maps_),
  };
  Maps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Maps_descriptor_,
      Maps::default_instance_,
      Maps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Maps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Maps));
  Point_descriptor_ = file->message_type(2);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  PassTo_descriptor_ = file->message_type(3);
  static const int PassTo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTo, passtoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTo, topoint_),
  };
  PassTo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassTo_descriptor_,
      PassTo::default_instance_,
      PassTo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassTo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassTo));
  PassPoint_descriptor_ = file->message_type(4);
  static const int PassPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPoint, passpointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPoint, passto_),
  };
  PassPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassPoint_descriptor_,
      PassPoint::default_instance_,
      PassPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassPoint));
  BossPoint_descriptor_ = file->message_type(5);
  static const int BossPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPoint, plan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPoint, point_),
  };
  BossPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossPoint_descriptor_,
      BossPoint::default_instance_,
      BossPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossPoint));
  Scene_descriptor_ = file->message_type(6);
  static const int Scene_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, aimode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, instancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, fightmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, bosscenterpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, passpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, addenterpoint_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, addenterpoint_y_),
  };
  Scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scene_descriptor_,
      Scene::default_instance_,
      Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scene));
  Scenes_descriptor_ = file->message_type(7);
  static const int Scenes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenes, scenes_),
  };
  Scenes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scenes_descriptor_,
      Scenes::default_instance_,
      Scenes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scenes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_descriptor_, &Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Maps_descriptor_, &Maps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassTo_descriptor_, &PassTo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassPoint_descriptor_, &PassPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossPoint_descriptor_, &BossPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scene_descriptor_, &Scene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scenes_descriptor_, &Scenes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgMap_2eproto() {
  delete Map::default_instance_;
  delete Map_reflection_;
  delete Maps::default_instance_;
  delete Maps_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete PassTo::default_instance_;
  delete PassTo_reflection_;
  delete PassPoint::default_instance_;
  delete PassPoint_reflection_;
  delete BossPoint::default_instance_;
  delete BossPoint_reflection_;
  delete Scene::default_instance_;
  delete Scene_reflection_;
  delete Scenes::default_instance_;
  delete Scenes_reflection_;
}

void protobuf_AddDesc_CfgMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CfgMap.proto\022\006CfgMap\"z\n\003Map\022\n\n\002id\030\001 \002("
    "\r\022\020\n\010mapscene\030\002 \002(\r\022\017\n\007version\030\003 \002(\r\022\014\n\004"
    "name\030\004 \002(\t\022\024\n\014hasBossPoint\030\005 \002(\010\022\016\n\006copy"
    "id\030\006 \002(\r\022\020\n\010copyType\030\007 \002(\r\"!\n\004Maps\022\031\n\004ma"
    "ps\030\001 \003(\0132\013.CfgMap.Map\"\035\n\005Point\022\t\n\001x\030\001 \002("
    "\005\022\t\n\001y\030\002 \002(\005\"I\n\006PassTo\022\020\n\010passToId\030\001 \002(\005"
    "\022\r\n\005mapId\030\002 \002(\r\022\036\n\007toPoint\030\003 \002(\0132\r.CfgMa"
    "p.Point\"@\n\tPassPoint\022\023\n\013passPointId\030\001 \002("
    "\005\022\036\n\006passTo\030\002 \003(\0132\016.CfgMap.PassTo\"7\n\tBos"
    "sPoint\022\014\n\004plan\030\001 \002(\005\022\034\n\005point\030\002 \002(\0132\r.Cf"
    "gMap.Point\"\342\001\n\005Scene\022\n\n\002id\030\001 \002(\005\022\r\n\005mapI"
    "d\030\002 \002(\005\022\016\n\006aiMode\030\003 \001(\005\022\024\n\014instanceType\030"
    "\004 \002(\r\022\022\n\nfightModel\030\005 \002(\r\022+\n\020bossCenterP"
    "oints\030\006 \003(\0132\021.CfgMap.BossPoint\022%\n\npassPo"
    "ints\030\007 \003(\0132\021.CfgMap.PassPoint\022\027\n\017addEnte"
    "rPoint_x\030\010 \001(\r\022\027\n\017addEnterPoint_y\030\t \001(\r\""
    "\'\n\006Scenes\022\035\n\006scenes\030\001 \003(\0132\r.CfgMap.Scene", 680);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgMap.proto", &protobuf_RegisterTypes);
  Map::default_instance_ = new Map();
  Maps::default_instance_ = new Maps();
  Point::default_instance_ = new Point();
  PassTo::default_instance_ = new PassTo();
  PassPoint::default_instance_ = new PassPoint();
  BossPoint::default_instance_ = new BossPoint();
  Scene::default_instance_ = new Scene();
  Scenes::default_instance_ = new Scenes();
  Map::default_instance_->InitAsDefaultInstance();
  Maps::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  PassTo::default_instance_->InitAsDefaultInstance();
  PassPoint::default_instance_->InitAsDefaultInstance();
  BossPoint::default_instance_->InitAsDefaultInstance();
  Scene::default_instance_->InitAsDefaultInstance();
  Scenes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgMap_2eproto {
  StaticDescriptorInitializer_CfgMap_2eproto() {
    protobuf_AddDesc_CfgMap_2eproto();
  }
} static_descriptor_initializer_CfgMap_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Map::kIdFieldNumber;
const int Map::kMapsceneFieldNumber;
const int Map::kVersionFieldNumber;
const int Map::kNameFieldNumber;
const int Map::kHasBossPointFieldNumber;
const int Map::kCopyidFieldNumber;
const int Map::kCopyTypeFieldNumber;
#endif  // !_MSC_VER

Map::Map()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMap.Map)
}

void Map::InitAsDefaultInstance() {
}

Map::Map(const Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMap.Map)
}

void Map::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  mapscene_ = 0u;
  version_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hasbosspoint_ = false;
  copyid_ = 0u;
  copytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:CfgMap.Map)
  SharedDtor();
}

void Map::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMap_2eproto();
  return *default_instance_;
}

Map* Map::default_instance_ = NULL;

Map* Map::New() const {
  return new Map;
}

void Map::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Map*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, mapscene_);
    ZR_(version_, copytype_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMap.Map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapscene;
        break;
      }

      // required uint32 mapscene = 2;
      case 2: {
        if (tag == 16) {
         parse_mapscene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapscene_)));
          set_has_mapscene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required uint32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hasBossPoint;
        break;
      }

      // required bool hasBossPoint = 5;
      case 5: {
        if (tag == 40) {
         parse_hasBossPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbosspoint_)));
          set_has_hasbosspoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_copyid;
        break;
      }

      // required uint32 copyid = 6;
      case 6: {
        if (tag == 48) {
         parse_copyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_copyType;
        break;
      }

      // required uint32 copyType = 7;
      case 7: {
        if (tag == 56) {
         parse_copyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copytype_)));
          set_has_copytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMap.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMap.Map)
  return false;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMap.Map)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 mapscene = 2;
  if (has_mapscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapscene(), output);
  }

  // required uint32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required bool hasBossPoint = 5;
  if (has_hasbosspoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hasbosspoint(), output);
  }

  // required uint32 copyid = 6;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->copyid(), output);
  }

  // required uint32 copyType = 7;
  if (has_copytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->copytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMap.Map)
}

::google::protobuf::uint8* Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMap.Map)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 mapscene = 2;
  if (has_mapscene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapscene(), target);
  }

  // required uint32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required bool hasBossPoint = 5;
  if (has_hasbosspoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hasbosspoint(), target);
  }

  // required uint32 copyid = 6;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->copyid(), target);
  }

  // required uint32 copyType = 7;
  if (has_copytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->copytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMap.Map)
  return target;
}

int Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 mapscene = 2;
    if (has_mapscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapscene());
    }

    // required uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool hasBossPoint = 5;
    if (has_hasbosspoint()) {
      total_size += 1 + 1;
    }

    // required uint32 copyid = 6;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copyid());
    }

    // required uint32 copyType = 7;
    if (has_copytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapscene()) {
      set_mapscene(from.mapscene());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hasbosspoint()) {
      set_hasbosspoint(from.hasbosspoint());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_copytype()) {
      set_copytype(from.copytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Map::Swap(Map* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mapscene_, other->mapscene_);
    std::swap(version_, other->version_);
    std::swap(name_, other->name_);
    std::swap(hasbosspoint_, other->hasbosspoint_);
    std::swap(copyid_, other->copyid_);
    std::swap(copytype_, other->copytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Maps::kMapsFieldNumber;
#endif  // !_MSC_VER

Maps::Maps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMap.Maps)
}

void Maps::InitAsDefaultInstance() {
}

Maps::Maps(const Maps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMap.Maps)
}

void Maps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Maps::~Maps() {
  // @@protoc_insertion_point(destructor:CfgMap.Maps)
  SharedDtor();
}

void Maps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Maps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Maps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Maps_descriptor_;
}

const Maps& Maps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMap_2eproto();
  return *default_instance_;
}

Maps* Maps::default_instance_ = NULL;

Maps* Maps::New() const {
  return new Maps;
}

void Maps::Clear() {
  maps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Maps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMap.Maps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgMap.Map maps = 1;
      case 1: {
        if (tag == 10) {
         parse_maps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_maps;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMap.Maps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMap.Maps)
  return false;
#undef DO_
}

void Maps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMap.Maps)
  // repeated .CfgMap.Map maps = 1;
  for (int i = 0; i < this->maps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMap.Maps)
}

::google::protobuf::uint8* Maps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMap.Maps)
  // repeated .CfgMap.Map maps = 1;
  for (int i = 0; i < this->maps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMap.Maps)
  return target;
}

int Maps::ByteSize() const {
  int total_size = 0;

  // repeated .CfgMap.Map maps = 1;
  total_size += 1 * this->maps_size();
  for (int i = 0; i < this->maps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Maps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Maps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Maps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Maps::MergeFrom(const Maps& from) {
  GOOGLE_CHECK_NE(&from, this);
  maps_.MergeFrom(from.maps_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Maps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Maps::CopyFrom(const Maps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Maps::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->maps())) return false;
  return true;
}

void Maps::Swap(Maps* other) {
  if (other != this) {
    maps_.Swap(&other->maps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Maps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Maps_descriptor_;
  metadata.reflection = Maps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMap.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMap.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:CfgMap.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMap_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMap.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMap.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMap.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMap.Point)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMap.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMap.Point)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMap.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassTo::kPassToIdFieldNumber;
const int PassTo::kMapIdFieldNumber;
const int PassTo::kToPointFieldNumber;
#endif  // !_MSC_VER

PassTo::PassTo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMap.PassTo)
}

void PassTo::InitAsDefaultInstance() {
  topoint_ = const_cast< ::CfgMap::Point*>(&::CfgMap::Point::default_instance());
}

PassTo::PassTo(const PassTo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMap.PassTo)
}

void PassTo::SharedCtor() {
  _cached_size_ = 0;
  passtoid_ = 0;
  mapid_ = 0u;
  topoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassTo::~PassTo() {
  // @@protoc_insertion_point(destructor:CfgMap.PassTo)
  SharedDtor();
}

void PassTo::SharedDtor() {
  if (this != default_instance_) {
    delete topoint_;
  }
}

void PassTo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassTo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassTo_descriptor_;
}

const PassTo& PassTo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMap_2eproto();
  return *default_instance_;
}

PassTo* PassTo::default_instance_ = NULL;

PassTo* PassTo::New() const {
  return new PassTo;
}

void PassTo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PassTo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(passtoid_, mapid_);
    if (has_topoint()) {
      if (topoint_ != NULL) topoint_->::CfgMap::Point::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassTo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMap.PassTo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 passToId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passtoid_)));
          set_has_passtoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // required uint32 mapId = 2;
      case 2: {
        if (tag == 16) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toPoint;
        break;
      }

      // required .CfgMap.Point toPoint = 3;
      case 3: {
        if (tag == 26) {
         parse_toPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMap.PassTo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMap.PassTo)
  return false;
#undef DO_
}

void PassTo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMap.PassTo)
  // required int32 passToId = 1;
  if (has_passtoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->passtoid(), output);
  }

  // required uint32 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // required .CfgMap.Point toPoint = 3;
  if (has_topoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->topoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMap.PassTo)
}

::google::protobuf::uint8* PassTo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMap.PassTo)
  // required int32 passToId = 1;
  if (has_passtoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->passtoid(), target);
  }

  // required uint32 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // required .CfgMap.Point toPoint = 3;
  if (has_topoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->topoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMap.PassTo)
  return target;
}

int PassTo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 passToId = 1;
    if (has_passtoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passtoid());
    }

    // required uint32 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required .CfgMap.Point toPoint = 3;
    if (has_topoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassTo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassTo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassTo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassTo::MergeFrom(const PassTo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passtoid()) {
      set_passtoid(from.passtoid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_topoint()) {
      mutable_topoint()->::CfgMap::Point::MergeFrom(from.topoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassTo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassTo::CopyFrom(const PassTo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassTo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_topoint()) {
    if (!this->topoint().IsInitialized()) return false;
  }
  return true;
}

void PassTo::Swap(PassTo* other) {
  if (other != this) {
    std::swap(passtoid_, other->passtoid_);
    std::swap(mapid_, other->mapid_);
    std::swap(topoint_, other->topoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassTo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassTo_descriptor_;
  metadata.reflection = PassTo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassPoint::kPassPointIdFieldNumber;
const int PassPoint::kPassToFieldNumber;
#endif  // !_MSC_VER

PassPoint::PassPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMap.PassPoint)
}

void PassPoint::InitAsDefaultInstance() {
}

PassPoint::PassPoint(const PassPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMap.PassPoint)
}

void PassPoint::SharedCtor() {
  _cached_size_ = 0;
  passpointid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassPoint::~PassPoint() {
  // @@protoc_insertion_point(destructor:CfgMap.PassPoint)
  SharedDtor();
}

void PassPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassPoint_descriptor_;
}

const PassPoint& PassPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMap_2eproto();
  return *default_instance_;
}

PassPoint* PassPoint::default_instance_ = NULL;

PassPoint* PassPoint::New() const {
  return new PassPoint;
}

void PassPoint::Clear() {
  passpointid_ = 0;
  passto_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMap.PassPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 passPointId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passpointid_)));
          set_has_passpointid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passTo;
        break;
      }

      // repeated .CfgMap.PassTo passTo = 2;
      case 2: {
        if (tag == 18) {
         parse_passTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passto()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passTo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMap.PassPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMap.PassPoint)
  return false;
#undef DO_
}

void PassPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMap.PassPoint)
  // required int32 passPointId = 1;
  if (has_passpointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->passpointid(), output);
  }

  // repeated .CfgMap.PassTo passTo = 2;
  for (int i = 0; i < this->passto_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->passto(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMap.PassPoint)
}

::google::protobuf::uint8* PassPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMap.PassPoint)
  // required int32 passPointId = 1;
  if (has_passpointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->passpointid(), target);
  }

  // repeated .CfgMap.PassTo passTo = 2;
  for (int i = 0; i < this->passto_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->passto(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMap.PassPoint)
  return target;
}

int PassPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 passPointId = 1;
    if (has_passpointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passpointid());
    }

  }
  // repeated .CfgMap.PassTo passTo = 2;
  total_size += 1 * this->passto_size();
  for (int i = 0; i < this->passto_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passto(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassPoint::MergeFrom(const PassPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  passto_.MergeFrom(from.passto_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passpointid()) {
      set_passpointid(from.passpointid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassPoint::CopyFrom(const PassPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->passto())) return false;
  return true;
}

void PassPoint::Swap(PassPoint* other) {
  if (other != this) {
    std::swap(passpointid_, other->passpointid_);
    passto_.Swap(&other->passto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassPoint_descriptor_;
  metadata.reflection = PassPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossPoint::kPlanFieldNumber;
const int BossPoint::kPointFieldNumber;
#endif  // !_MSC_VER

BossPoint::BossPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMap.BossPoint)
}

void BossPoint::InitAsDefaultInstance() {
  point_ = const_cast< ::CfgMap::Point*>(&::CfgMap::Point::default_instance());
}

BossPoint::BossPoint(const BossPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMap.BossPoint)
}

void BossPoint::SharedCtor() {
  _cached_size_ = 0;
  plan_ = 0;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossPoint::~BossPoint() {
  // @@protoc_insertion_point(destructor:CfgMap.BossPoint)
  SharedDtor();
}

void BossPoint::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void BossPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossPoint_descriptor_;
}

const BossPoint& BossPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMap_2eproto();
  return *default_instance_;
}

BossPoint* BossPoint::default_instance_ = NULL;

BossPoint* BossPoint::New() const {
  return new BossPoint;
}

void BossPoint::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    plan_ = 0;
    if (has_point()) {
      if (point_ != NULL) point_->::CfgMap::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMap.BossPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plan = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plan_)));
          set_has_plan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // required .CfgMap.Point point = 2;
      case 2: {
        if (tag == 18) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMap.BossPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMap.BossPoint)
  return false;
#undef DO_
}

void BossPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMap.BossPoint)
  // required int32 plan = 1;
  if (has_plan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plan(), output);
  }

  // required .CfgMap.Point point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMap.BossPoint)
}

::google::protobuf::uint8* BossPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMap.BossPoint)
  // required int32 plan = 1;
  if (has_plan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plan(), target);
  }

  // required .CfgMap.Point point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMap.BossPoint)
  return target;
}

int BossPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 plan = 1;
    if (has_plan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plan());
    }

    // required .CfgMap.Point point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossPoint::MergeFrom(const BossPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plan()) {
      set_plan(from.plan());
    }
    if (from.has_point()) {
      mutable_point()->::CfgMap::Point::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossPoint::CopyFrom(const BossPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void BossPoint::Swap(BossPoint* other) {
  if (other != this) {
    std::swap(plan_, other->plan_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossPoint_descriptor_;
  metadata.reflection = BossPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scene::kIdFieldNumber;
const int Scene::kMapIdFieldNumber;
const int Scene::kAiModeFieldNumber;
const int Scene::kInstanceTypeFieldNumber;
const int Scene::kFightModelFieldNumber;
const int Scene::kBossCenterPointsFieldNumber;
const int Scene::kPassPointsFieldNumber;
const int Scene::kAddEnterPointXFieldNumber;
const int Scene::kAddEnterPointYFieldNumber;
#endif  // !_MSC_VER

Scene::Scene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMap.Scene)
}

void Scene::InitAsDefaultInstance() {
}

Scene::Scene(const Scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMap.Scene)
}

void Scene::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mapid_ = 0;
  aimode_ = 0;
  instancetype_ = 0u;
  fightmodel_ = 0u;
  addenterpoint_x_ = 0u;
  addenterpoint_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:CfgMap.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scene_descriptor_;
}

const Scene& Scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMap_2eproto();
  return *default_instance_;
}

Scene* Scene::default_instance_ = NULL;

Scene* Scene::New() const {
  return new Scene;
}

void Scene::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Scene*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(id_, instancetype_);
    ZR_(fightmodel_, addenterpoint_x_);
  }
  addenterpoint_y_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  bosscenterpoints_.Clear();
  passpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMap.Scene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // required int32 mapId = 2;
      case 2: {
        if (tag == 16) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aiMode;
        break;
      }

      // optional int32 aiMode = 3;
      case 3: {
        if (tag == 24) {
         parse_aiMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aimode_)));
          set_has_aimode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_instanceType;
        break;
      }

      // required uint32 instanceType = 4;
      case 4: {
        if (tag == 32) {
         parse_instanceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instancetype_)));
          set_has_instancetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fightModel;
        break;
      }

      // required uint32 fightModel = 5;
      case 5: {
        if (tag == 40) {
         parse_fightModel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightmodel_)));
          set_has_fightmodel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bossCenterPoints;
        break;
      }

      // repeated .CfgMap.BossPoint bossCenterPoints = 6;
      case 6: {
        if (tag == 50) {
         parse_bossCenterPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosscenterpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bossCenterPoints;
        if (input->ExpectTag(58)) goto parse_passPoints;
        break;
      }

      // repeated .CfgMap.PassPoint passPoints = 7;
      case 7: {
        if (tag == 58) {
         parse_passPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_passPoints;
        if (input->ExpectTag(64)) goto parse_addEnterPoint_x;
        break;
      }

      // optional uint32 addEnterPoint_x = 8;
      case 8: {
        if (tag == 64) {
         parse_addEnterPoint_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addenterpoint_x_)));
          set_has_addenterpoint_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_addEnterPoint_y;
        break;
      }

      // optional uint32 addEnterPoint_y = 9;
      case 9: {
        if (tag == 72) {
         parse_addEnterPoint_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addenterpoint_y_)));
          set_has_addenterpoint_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMap.Scene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMap.Scene)
  return false;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMap.Scene)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional int32 aiMode = 3;
  if (has_aimode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->aimode(), output);
  }

  // required uint32 instanceType = 4;
  if (has_instancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->instancetype(), output);
  }

  // required uint32 fightModel = 5;
  if (has_fightmodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fightmodel(), output);
  }

  // repeated .CfgMap.BossPoint bossCenterPoints = 6;
  for (int i = 0; i < this->bosscenterpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bosscenterpoints(i), output);
  }

  // repeated .CfgMap.PassPoint passPoints = 7;
  for (int i = 0; i < this->passpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->passpoints(i), output);
  }

  // optional uint32 addEnterPoint_x = 8;
  if (has_addenterpoint_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->addenterpoint_x(), output);
  }

  // optional uint32 addEnterPoint_y = 9;
  if (has_addenterpoint_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->addenterpoint_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMap.Scene)
}

::google::protobuf::uint8* Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMap.Scene)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional int32 aiMode = 3;
  if (has_aimode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->aimode(), target);
  }

  // required uint32 instanceType = 4;
  if (has_instancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->instancetype(), target);
  }

  // required uint32 fightModel = 5;
  if (has_fightmodel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fightmodel(), target);
  }

  // repeated .CfgMap.BossPoint bossCenterPoints = 6;
  for (int i = 0; i < this->bosscenterpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bosscenterpoints(i), target);
  }

  // repeated .CfgMap.PassPoint passPoints = 7;
  for (int i = 0; i < this->passpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->passpoints(i), target);
  }

  // optional uint32 addEnterPoint_x = 8;
  if (has_addenterpoint_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->addenterpoint_x(), target);
  }

  // optional uint32 addEnterPoint_y = 9;
  if (has_addenterpoint_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->addenterpoint_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMap.Scene)
  return target;
}

int Scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 aiMode = 3;
    if (has_aimode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aimode());
    }

    // required uint32 instanceType = 4;
    if (has_instancetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instancetype());
    }

    // required uint32 fightModel = 5;
    if (has_fightmodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightmodel());
    }

    // optional uint32 addEnterPoint_x = 8;
    if (has_addenterpoint_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addenterpoint_x());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 addEnterPoint_y = 9;
    if (has_addenterpoint_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addenterpoint_y());
    }

  }
  // repeated .CfgMap.BossPoint bossCenterPoints = 6;
  total_size += 1 * this->bosscenterpoints_size();
  for (int i = 0; i < this->bosscenterpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosscenterpoints(i));
  }

  // repeated .CfgMap.PassPoint passPoints = 7;
  total_size += 1 * this->passpoints_size();
  for (int i = 0; i < this->passpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passpoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  bosscenterpoints_.MergeFrom(from.bosscenterpoints_);
  passpoints_.MergeFrom(from.passpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_aimode()) {
      set_aimode(from.aimode());
    }
    if (from.has_instancetype()) {
      set_instancetype(from.instancetype());
    }
    if (from.has_fightmodel()) {
      set_fightmodel(from.fightmodel());
    }
    if (from.has_addenterpoint_x()) {
      set_addenterpoint_x(from.addenterpoint_x());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_addenterpoint_y()) {
      set_addenterpoint_y(from.addenterpoint_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->bosscenterpoints())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->passpoints())) return false;
  return true;
}

void Scene::Swap(Scene* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mapid_, other->mapid_);
    std::swap(aimode_, other->aimode_);
    std::swap(instancetype_, other->instancetype_);
    std::swap(fightmodel_, other->fightmodel_);
    bosscenterpoints_.Swap(&other->bosscenterpoints_);
    passpoints_.Swap(&other->passpoints_);
    std::swap(addenterpoint_x_, other->addenterpoint_x_);
    std::swap(addenterpoint_y_, other->addenterpoint_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scene_descriptor_;
  metadata.reflection = Scene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scenes::kScenesFieldNumber;
#endif  // !_MSC_VER

Scenes::Scenes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMap.Scenes)
}

void Scenes::InitAsDefaultInstance() {
}

Scenes::Scenes(const Scenes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMap.Scenes)
}

void Scenes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scenes::~Scenes() {
  // @@protoc_insertion_point(destructor:CfgMap.Scenes)
  SharedDtor();
}

void Scenes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Scenes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scenes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scenes_descriptor_;
}

const Scenes& Scenes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMap_2eproto();
  return *default_instance_;
}

Scenes* Scenes::default_instance_ = NULL;

Scenes* Scenes::New() const {
  return new Scenes;
}

void Scenes::Clear() {
  scenes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scenes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMap.Scenes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgMap.Scene scenes = 1;
      case 1: {
        if (tag == 10) {
         parse_scenes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scenes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_scenes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMap.Scenes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMap.Scenes)
  return false;
#undef DO_
}

void Scenes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMap.Scenes)
  // repeated .CfgMap.Scene scenes = 1;
  for (int i = 0; i < this->scenes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scenes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMap.Scenes)
}

::google::protobuf::uint8* Scenes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMap.Scenes)
  // repeated .CfgMap.Scene scenes = 1;
  for (int i = 0; i < this->scenes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scenes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMap.Scenes)
  return target;
}

int Scenes::ByteSize() const {
  int total_size = 0;

  // repeated .CfgMap.Scene scenes = 1;
  total_size += 1 * this->scenes_size();
  for (int i = 0; i < this->scenes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scenes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scenes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scenes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scenes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scenes::MergeFrom(const Scenes& from) {
  GOOGLE_CHECK_NE(&from, this);
  scenes_.MergeFrom(from.scenes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scenes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenes::CopyFrom(const Scenes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenes::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->scenes())) return false;
  return true;
}

void Scenes::Swap(Scenes* other) {
  if (other != this) {
    scenes_.Swap(&other->scenes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scenes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scenes_descriptor_;
  metadata.reflection = Scenes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgMap

// @@protoc_insertion_point(global_scope)
