// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgItem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgItem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgItem {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Items_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Items_reflection_ = NULL;
const ::google::protobuf::Descriptor* StarRate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarRate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sundry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sundry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equips_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equips_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attrs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attrs_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShenQi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShenQi_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShenQis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShenQis_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gifts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gifts_reflection_ = NULL;
const ::google::protobuf::Descriptor* Drop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Drop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Drops_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Drops_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgItem_2eproto() {
  protobuf_AddDesc_CfgItem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgItem.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, smeltaward_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Items_descriptor_ = file->message_type(1);
  static const int Items_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, items_),
  };
  Items_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Items_descriptor_,
      Items::default_instance_,
      Items_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Items, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Items));
  StarRate_descriptor_ = file->message_type(2);
  static const int StarRate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarRate, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarRate, rate_),
  };
  StarRate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarRate_descriptor_,
      StarRate::default_instance_,
      StarRate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarRate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarRate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarRate));
  Sundry_descriptor_ = file->message_type(3);
  static const int Sundry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sundry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sundry, num_),
  };
  Sundry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sundry_descriptor_,
      Sundry::default_instance_,
      Sundry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sundry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sundry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sundry));
  Equip_descriptor_ = file->message_type(4);
  static const int Equip_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, smeltaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, starrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, sub_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, changelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, active_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, sundry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, type_),
  };
  Equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equip_descriptor_,
      Equip::default_instance_,
      Equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equip));
  Equips_descriptor_ = file->message_type(5);
  static const int Equips_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equips, equips_),
  };
  Equips_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equips_descriptor_,
      Equips::default_instance_,
      Equips_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equips, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equips, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equips));
  Attr_descriptor_ = file->message_type(6);
  static const int Attr_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, best_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, attr_),
  };
  Attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attr_descriptor_,
      Attr::default_instance_,
      Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attr));
  Attrs_descriptor_ = file->message_type(7);
  static const int Attrs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attrs, attrs_),
  };
  Attrs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attrs_descriptor_,
      Attrs::default_instance_,
      Attrs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attrs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attrs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attrs));
  ShenQi_descriptor_ = file->message_type(8);
  static const int ShenQi_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQi, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQi, id_),
  };
  ShenQi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShenQi_descriptor_,
      ShenQi::default_instance_,
      ShenQi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShenQi));
  ShenQis_descriptor_ = file->message_type(9);
  static const int ShenQis_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQis, shenqis_),
  };
  ShenQis_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShenQis_descriptor_,
      ShenQis::default_instance_,
      ShenQis_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQis, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShenQis, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShenQis));
  Gift_descriptor_ = file->message_type(10);
  static const int Gift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, extend_),
  };
  Gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gift_descriptor_,
      Gift::default_instance_,
      Gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gift));
  Gifts_descriptor_ = file->message_type(11);
  static const int Gifts_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gifts, gifts_),
  };
  Gifts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gifts_descriptor_,
      Gifts::default_instance_,
      Gifts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gifts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gifts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gifts));
  Drop_descriptor_ = file->message_type(12);
  static const int Drop_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, randomcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, fixedreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, randomreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, ownrewardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, ownreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, killrewardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, killreward_),
  };
  Drop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Drop_descriptor_,
      Drop::default_instance_,
      Drop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Drop));
  Drops_descriptor_ = file->message_type(13);
  static const int Drops_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, drops_),
  };
  Drops_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Drops_descriptor_,
      Drops::default_instance_,
      Drops_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drops, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Drops));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgItem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Items_descriptor_, &Items::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarRate_descriptor_, &StarRate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sundry_descriptor_, &Sundry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equip_descriptor_, &Equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equips_descriptor_, &Equips::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attr_descriptor_, &Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attrs_descriptor_, &Attrs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShenQi_descriptor_, &ShenQi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShenQis_descriptor_, &ShenQis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gift_descriptor_, &Gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gifts_descriptor_, &Gifts::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Drop_descriptor_, &Drop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Drops_descriptor_, &Drops::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgItem_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Items::default_instance_;
  delete Items_reflection_;
  delete StarRate::default_instance_;
  delete StarRate_reflection_;
  delete Sundry::default_instance_;
  delete Sundry_reflection_;
  delete Equip::default_instance_;
  delete Equip_reflection_;
  delete Equips::default_instance_;
  delete Equips_reflection_;
  delete Attr::default_instance_;
  delete Attr_reflection_;
  delete Attrs::default_instance_;
  delete Attrs_reflection_;
  delete ShenQi::default_instance_;
  delete ShenQi_reflection_;
  delete ShenQis::default_instance_;
  delete ShenQis_reflection_;
  delete Gift::default_instance_;
  delete Gift_reflection_;
  delete Gifts::default_instance_;
  delete Gifts_reflection_;
  delete Drop::default_instance_;
  delete Drop_reflection_;
  delete Drops::default_instance_;
  delete Drops_reflection_;
}

void protobuf_AddDesc_CfgItem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rCfgItem.proto\022\007CfgItem\032\017CfgCommon.prot"
    "o\"\272\001\n\004Item\022\n\n\002id\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\020\n\010"
    "itemType\030\003 \002(\r\022\017\n\007subType\030\004 \002(\r\022\r\n\005color"
    "\030\005 \002(\r\022\r\n\005level\030\006 \002(\r\022\014\n\004data\030\007 \002(\r\022\"\n\004a"
    "ttr\030\010 \003(\0132\024.CfgCommon.Attribute\022%\n\nsmelt"
    "Award\030\t \003(\0132\021.CfgCommon.Reward\"%\n\005Items\022"
    "\034\n\005items\030\001 \003(\0132\r.CfgItem.Item\"&\n\010StarRat"
    "e\022\014\n\004star\030\001 \002(\r\022\014\n\004rate\030\002 \002(\r\"!\n\006Sundry\022"
    "\n\n\002id\030\001 \002(\r\022\013\n\003num\030\002 \002(\r\"\225\002\n\005Equip\022\n\n\002id"
    "\030\001 \002(\r\022%\n\nsmeltAward\030\002 \003(\0132\021.CfgCommon.R"
    "eward\022\014\n\004part\030\003 \002(\r\022\016\n\006career\030\004 \002(\r\022\"\n\004a"
    "ttr\030\005 \003(\0132\024.CfgCommon.Attribute\022#\n\010starR"
    "ate\030\006 \003(\0132\021.CfgItem.StarRate\022\r\n\005color\030\007 "
    "\002(\r\022\013\n\003sub\030\010 \002(\r\022\023\n\013changeLevel\030\t \002(\r\022\022\n"
    "\nactive_min\030\n \002(\r\022\037\n\006sundry\030\013 \001(\0132\017.CfgI"
    "tem.Sundry\022\014\n\004type\030\014 \002(\r\"(\n\006Equips\022\036\n\006eq"
    "uips\030\001 \003(\0132\016.CfgItem.Equip\"o\n\004Attr\022\n\n\002id"
    "\030\001 \002(\r\022\014\n\004star\030\002 \002(\r\022\014\n\004rate\030\003 \002(\r\022\014\n\004be"
    "st\030\004 \002(\010\022\r\n\005group\030\005 \002(\r\022\"\n\004attr\030\006 \003(\0132\024."
    "CfgCommon.Attribute\"%\n\005Attrs\022\034\n\005attrs\030\001 "
    "\003(\0132\r.CfgItem.Attr\"\"\n\006ShenQi\022\014\n\004item\030\001 \002"
    "(\r\022\n\n\002id\030\002 \002(\r\"+\n\007ShenQis\022 \n\007shenqis\030\001 \003"
    "(\0132\017.CfgItem.ShenQi\"i\n\004Gift\022\n\n\002id\030\001 \002(\r\022"
    "\017\n\007subtype\030\002 \002(\r\022!\n\006reward\030\003 \003(\0132\021.CfgCo"
    "mmon.Reward\022!\n\006extend\030\004 \003(\0132\021.CfgCommon."
    "Reward\"%\n\005Gifts\022\034\n\005gifts\030\001 \003(\0132\r.CfgItem"
    ".Gift\"\366\001\n\004Drop\022\n\n\002id\030\001 \002(\r\022\023\n\013randomCoun"
    "t\030\002 \002(\r\022&\n\013fixedReward\030\003 \003(\0132\021.CfgCommon"
    ".Reward\022\'\n\014randomReward\030\004 \003(\0132\021.CfgCommo"
    "n.Reward\022\026\n\016ownRewardCount\030\006 \001(\r\022$\n\townR"
    "eward\030\007 \003(\0132\021.CfgCommon.Reward\022\027\n\017killRe"
    "wardCount\030\010 \001(\r\022%\n\nkillReward\030\t \003(\0132\021.Cf"
    "gCommon.Reward\"%\n\005Drops\022\034\n\005drops\030\001 \003(\0132\r"
    ".CfgItem.Drop", 1333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgItem.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  Items::default_instance_ = new Items();
  StarRate::default_instance_ = new StarRate();
  Sundry::default_instance_ = new Sundry();
  Equip::default_instance_ = new Equip();
  Equips::default_instance_ = new Equips();
  Attr::default_instance_ = new Attr();
  Attrs::default_instance_ = new Attrs();
  ShenQi::default_instance_ = new ShenQi();
  ShenQis::default_instance_ = new ShenQis();
  Gift::default_instance_ = new Gift();
  Gifts::default_instance_ = new Gifts();
  Drop::default_instance_ = new Drop();
  Drops::default_instance_ = new Drops();
  Item::default_instance_->InitAsDefaultInstance();
  Items::default_instance_->InitAsDefaultInstance();
  StarRate::default_instance_->InitAsDefaultInstance();
  Sundry::default_instance_->InitAsDefaultInstance();
  Equip::default_instance_->InitAsDefaultInstance();
  Equips::default_instance_->InitAsDefaultInstance();
  Attr::default_instance_->InitAsDefaultInstance();
  Attrs::default_instance_->InitAsDefaultInstance();
  ShenQi::default_instance_->InitAsDefaultInstance();
  ShenQis::default_instance_->InitAsDefaultInstance();
  Gift::default_instance_->InitAsDefaultInstance();
  Gifts::default_instance_->InitAsDefaultInstance();
  Drop::default_instance_->InitAsDefaultInstance();
  Drops::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgItem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgItem_2eproto {
  StaticDescriptorInitializer_CfgItem_2eproto() {
    protobuf_AddDesc_CfgItem_2eproto();
  }
} static_descriptor_initializer_CfgItem_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kIdFieldNumber;
const int Item::kTypeFieldNumber;
const int Item::kItemTypeFieldNumber;
const int Item::kSubTypeFieldNumber;
const int Item::kColorFieldNumber;
const int Item::kLevelFieldNumber;
const int Item::kDataFieldNumber;
const int Item::kAttrFieldNumber;
const int Item::kSmeltAwardFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Item)
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Item)
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  itemtype_ = 0u;
  subtype_ = 0u;
  color_ = 0u;
  level_ = 0u;
  data_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:CfgItem.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, level_);
    data_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attr_.Clear();
  smeltaward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_itemType;
        break;
      }

      // required uint32 itemType = 3;
      case 3: {
        if (tag == 24) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_subType;
        break;
      }

      // required uint32 subType = 4;
      case 4: {
        if (tag == 32) {
         parse_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }

      // required uint32 color = 5;
      case 5: {
        if (tag == 40) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_data;
        break;
      }

      // required uint32 data = 7;
      case 7: {
        if (tag == 56) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attr;
        break;
      }

      // repeated .CfgCommon.Attribute attr = 8;
      case 8: {
        if (tag == 66) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attr;
        if (input->ExpectTag(74)) goto parse_smeltAward;
        break;
      }

      // repeated .CfgCommon.Reward smeltAward = 9;
      case 9: {
        if (tag == 74) {
         parse_smeltAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_smeltaward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_smeltAward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Item)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 itemType = 3;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemtype(), output);
  }

  // required uint32 subType = 4;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subtype(), output);
  }

  // required uint32 color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->color(), output);
  }

  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // required uint32 data = 7;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->data(), output);
  }

  // repeated .CfgCommon.Attribute attr = 8;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attr(i), output);
  }

  // repeated .CfgCommon.Reward smeltAward = 9;
  for (int i = 0; i < this->smeltaward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->smeltaward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Item)
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Item)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 itemType = 3;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemtype(), target);
  }

  // required uint32 subType = 4;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subtype(), target);
  }

  // required uint32 color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->color(), target);
  }

  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // required uint32 data = 7;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->data(), target);
  }

  // repeated .CfgCommon.Attribute attr = 8;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attr(i), target);
  }

  // repeated .CfgCommon.Reward smeltAward = 9;
  for (int i = 0; i < this->smeltaward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->smeltaward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Item)
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 itemType = 3;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }

    // required uint32 subType = 4;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtype());
    }

    // required uint32 color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 data = 7;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data());
    }

  }
  // repeated .CfgCommon.Attribute attr = 8;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .CfgCommon.Reward smeltAward = 9;
  total_size += 1 * this->smeltaward_size();
  for (int i = 0; i < this->smeltaward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->smeltaward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  smeltaward_.MergeFrom(from.smeltaward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->smeltaward())) return false;
  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(subtype_, other->subtype_);
    std::swap(color_, other->color_);
    std::swap(level_, other->level_);
    std::swap(data_, other->data_);
    attr_.Swap(&other->attr_);
    smeltaward_.Swap(&other->smeltaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Items::kItemsFieldNumber;
#endif  // !_MSC_VER

Items::Items()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Items)
}

void Items::InitAsDefaultInstance() {
}

Items::Items(const Items& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Items)
}

void Items::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Items::~Items() {
  // @@protoc_insertion_point(destructor:CfgItem.Items)
  SharedDtor();
}

void Items::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Items::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Items::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Items_descriptor_;
}

const Items& Items::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Items* Items::default_instance_ = NULL;

Items* Items::New() const {
  return new Items;
}

void Items::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Items::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Items)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgItem.Item items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Items)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Items)
  return false;
#undef DO_
}

void Items::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Items)
  // repeated .CfgItem.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Items)
}

::google::protobuf::uint8* Items::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Items)
  // repeated .CfgItem.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Items)
  return target;
}

int Items::ByteSize() const {
  int total_size = 0;

  // repeated .CfgItem.Item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Items::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Items* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Items*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Items::MergeFrom(const Items& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Items::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Items::CopyFrom(const Items& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Items::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void Items::Swap(Items* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Items::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Items_descriptor_;
  metadata.reflection = Items_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StarRate::kStarFieldNumber;
const int StarRate::kRateFieldNumber;
#endif  // !_MSC_VER

StarRate::StarRate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.StarRate)
}

void StarRate::InitAsDefaultInstance() {
}

StarRate::StarRate(const StarRate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.StarRate)
}

void StarRate::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarRate::~StarRate() {
  // @@protoc_insertion_point(destructor:CfgItem.StarRate)
  SharedDtor();
}

void StarRate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StarRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarRate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarRate_descriptor_;
}

const StarRate& StarRate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

StarRate* StarRate::default_instance_ = NULL;

StarRate* StarRate::New() const {
  return new StarRate;
}

void StarRate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StarRate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(star_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.StarRate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 star = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // required uint32 rate = 2;
      case 2: {
        if (tag == 16) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.StarRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.StarRate)
  return false;
#undef DO_
}

void StarRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.StarRate)
  // required uint32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star(), output);
  }

  // required uint32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.StarRate)
}

::google::protobuf::uint8* StarRate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.StarRate)
  // required uint32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star(), target);
  }

  // required uint32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.StarRate)
  return target;
}

int StarRate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarRate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarRate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarRate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarRate::MergeFrom(const StarRate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarRate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarRate::CopyFrom(const StarRate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarRate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StarRate::Swap(StarRate* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarRate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarRate_descriptor_;
  metadata.reflection = StarRate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sundry::kIdFieldNumber;
const int Sundry::kNumFieldNumber;
#endif  // !_MSC_VER

Sundry::Sundry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Sundry)
}

void Sundry::InitAsDefaultInstance() {
}

Sundry::Sundry(const Sundry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Sundry)
}

void Sundry::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sundry::~Sundry() {
  // @@protoc_insertion_point(destructor:CfgItem.Sundry)
  SharedDtor();
}

void Sundry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sundry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sundry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sundry_descriptor_;
}

const Sundry& Sundry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Sundry* Sundry::default_instance_ = NULL;

Sundry* Sundry::New() const {
  return new Sundry;
}

void Sundry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Sundry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sundry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Sundry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Sundry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Sundry)
  return false;
#undef DO_
}

void Sundry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Sundry)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Sundry)
}

::google::protobuf::uint8* Sundry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Sundry)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Sundry)
  return target;
}

int Sundry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sundry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sundry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sundry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sundry::MergeFrom(const Sundry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sundry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sundry::CopyFrom(const Sundry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sundry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Sundry::Swap(Sundry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sundry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sundry_descriptor_;
  metadata.reflection = Sundry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Equip::kIdFieldNumber;
const int Equip::kSmeltAwardFieldNumber;
const int Equip::kPartFieldNumber;
const int Equip::kCareerFieldNumber;
const int Equip::kAttrFieldNumber;
const int Equip::kStarRateFieldNumber;
const int Equip::kColorFieldNumber;
const int Equip::kSubFieldNumber;
const int Equip::kChangeLevelFieldNumber;
const int Equip::kActiveMinFieldNumber;
const int Equip::kSundryFieldNumber;
const int Equip::kTypeFieldNumber;
#endif  // !_MSC_VER

Equip::Equip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Equip)
}

void Equip::InitAsDefaultInstance() {
  sundry_ = const_cast< ::CfgItem::Sundry*>(&::CfgItem::Sundry::default_instance());
}

Equip::Equip(const Equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Equip)
}

void Equip::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  part_ = 0u;
  career_ = 0u;
  color_ = 0u;
  sub_ = 0u;
  changelevel_ = 0u;
  active_min_ = 0u;
  sundry_ = NULL;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equip::~Equip() {
  // @@protoc_insertion_point(destructor:CfgItem.Equip)
  SharedDtor();
}

void Equip::SharedDtor() {
  if (this != default_instance_) {
    delete sundry_;
  }
}

void Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equip_descriptor_;
}

const Equip& Equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Equip* Equip::default_instance_ = NULL;

Equip* Equip::New() const {
  return new Equip;
}

void Equip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Equip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 205) {
    ZR_(id_, part_);
    ZR_(career_, color_);
    sub_ = 0u;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(active_min_, type_);
    changelevel_ = 0u;
    if (has_sundry()) {
      if (sundry_ != NULL) sundry_->::CfgItem::Sundry::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  smeltaward_.Clear();
  attr_.Clear();
  starrate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Equip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_smeltAward;
        break;
      }

      // repeated .CfgCommon.Reward smeltAward = 2;
      case 2: {
        if (tag == 18) {
         parse_smeltAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_smeltaward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_smeltAward;
        if (input->ExpectTag(24)) goto parse_part;
        break;
      }

      // required uint32 part = 3;
      case 3: {
        if (tag == 24) {
         parse_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_career;
        break;
      }

      // required uint32 career = 4;
      case 4: {
        if (tag == 32) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attr;
        break;
      }

      // repeated .CfgCommon.Attribute attr = 5;
      case 5: {
        if (tag == 42) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attr;
        if (input->ExpectTag(50)) goto parse_starRate;
        break;
      }

      // repeated .CfgItem.StarRate starRate = 6;
      case 6: {
        if (tag == 50) {
         parse_starRate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_starrate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_starRate;
        if (input->ExpectTag(56)) goto parse_color;
        break;
      }

      // required uint32 color = 7;
      case 7: {
        if (tag == 56) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sub;
        break;
      }

      // required uint32 sub = 8;
      case 8: {
        if (tag == 64) {
         parse_sub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_)));
          set_has_sub();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_changeLevel;
        break;
      }

      // required uint32 changeLevel = 9;
      case 9: {
        if (tag == 72) {
         parse_changeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &changelevel_)));
          set_has_changelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_active_min;
        break;
      }

      // required uint32 active_min = 10;
      case 10: {
        if (tag == 80) {
         parse_active_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_min_)));
          set_has_active_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sundry;
        break;
      }

      // optional .CfgItem.Sundry sundry = 11;
      case 11: {
        if (tag == 90) {
         parse_sundry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sundry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // required uint32 type = 12;
      case 12: {
        if (tag == 96) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Equip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Equip)
  return false;
#undef DO_
}

void Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Equip)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .CfgCommon.Reward smeltAward = 2;
  for (int i = 0; i < this->smeltaward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->smeltaward(i), output);
  }

  // required uint32 part = 3;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->part(), output);
  }

  // required uint32 career = 4;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->career(), output);
  }

  // repeated .CfgCommon.Attribute attr = 5;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attr(i), output);
  }

  // repeated .CfgItem.StarRate starRate = 6;
  for (int i = 0; i < this->starrate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->starrate(i), output);
  }

  // required uint32 color = 7;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->color(), output);
  }

  // required uint32 sub = 8;
  if (has_sub()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sub(), output);
  }

  // required uint32 changeLevel = 9;
  if (has_changelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->changelevel(), output);
  }

  // required uint32 active_min = 10;
  if (has_active_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->active_min(), output);
  }

  // optional .CfgItem.Sundry sundry = 11;
  if (has_sundry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->sundry(), output);
  }

  // required uint32 type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Equip)
}

::google::protobuf::uint8* Equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Equip)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .CfgCommon.Reward smeltAward = 2;
  for (int i = 0; i < this->smeltaward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->smeltaward(i), target);
  }

  // required uint32 part = 3;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->part(), target);
  }

  // required uint32 career = 4;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->career(), target);
  }

  // repeated .CfgCommon.Attribute attr = 5;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attr(i), target);
  }

  // repeated .CfgItem.StarRate starRate = 6;
  for (int i = 0; i < this->starrate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->starrate(i), target);
  }

  // required uint32 color = 7;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->color(), target);
  }

  // required uint32 sub = 8;
  if (has_sub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sub(), target);
  }

  // required uint32 changeLevel = 9;
  if (has_changelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->changelevel(), target);
  }

  // required uint32 active_min = 10;
  if (has_active_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->active_min(), target);
  }

  // optional .CfgItem.Sundry sundry = 11;
  if (has_sundry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->sundry(), target);
  }

  // required uint32 type = 12;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Equip)
  return target;
}

int Equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 part = 3;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part());
    }

    // required uint32 career = 4;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->career());
    }

    // required uint32 color = 7;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // required uint32 sub = 8;
    if (has_sub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 changeLevel = 9;
    if (has_changelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->changelevel());
    }

    // required uint32 active_min = 10;
    if (has_active_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_min());
    }

    // optional .CfgItem.Sundry sundry = 11;
    if (has_sundry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sundry());
    }

    // required uint32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .CfgCommon.Reward smeltAward = 2;
  total_size += 1 * this->smeltaward_size();
  for (int i = 0; i < this->smeltaward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->smeltaward(i));
  }

  // repeated .CfgCommon.Attribute attr = 5;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .CfgItem.StarRate starRate = 6;
  total_size += 1 * this->starrate_size();
  for (int i = 0; i < this->starrate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->starrate(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equip::MergeFrom(const Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  smeltaward_.MergeFrom(from.smeltaward_);
  attr_.MergeFrom(from.attr_);
  starrate_.MergeFrom(from.starrate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_sub()) {
      set_sub(from.sub());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_changelevel()) {
      set_changelevel(from.changelevel());
    }
    if (from.has_active_min()) {
      set_active_min(from.active_min());
    }
    if (from.has_sundry()) {
      mutable_sundry()->::CfgItem::Sundry::MergeFrom(from.sundry());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equip::CopyFrom(const Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000bcd) != 0x00000bcd) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->smeltaward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->starrate())) return false;
  if (has_sundry()) {
    if (!this->sundry().IsInitialized()) return false;
  }
  return true;
}

void Equip::Swap(Equip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    smeltaward_.Swap(&other->smeltaward_);
    std::swap(part_, other->part_);
    std::swap(career_, other->career_);
    attr_.Swap(&other->attr_);
    starrate_.Swap(&other->starrate_);
    std::swap(color_, other->color_);
    std::swap(sub_, other->sub_);
    std::swap(changelevel_, other->changelevel_);
    std::swap(active_min_, other->active_min_);
    std::swap(sundry_, other->sundry_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equip_descriptor_;
  metadata.reflection = Equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Equips::kEquipsFieldNumber;
#endif  // !_MSC_VER

Equips::Equips()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Equips)
}

void Equips::InitAsDefaultInstance() {
}

Equips::Equips(const Equips& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Equips)
}

void Equips::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equips::~Equips() {
  // @@protoc_insertion_point(destructor:CfgItem.Equips)
  SharedDtor();
}

void Equips::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Equips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equips::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equips_descriptor_;
}

const Equips& Equips::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Equips* Equips::default_instance_ = NULL;

Equips* Equips::New() const {
  return new Equips;
}

void Equips::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Equips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgItem.Equip equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Equips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Equips)
  return false;
#undef DO_
}

void Equips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Equips)
  // repeated .CfgItem.Equip equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Equips)
}

::google::protobuf::uint8* Equips::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Equips)
  // repeated .CfgItem.Equip equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Equips)
  return target;
}

int Equips::ByteSize() const {
  int total_size = 0;

  // repeated .CfgItem.Equip equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equips::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equips* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equips*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equips::MergeFrom(const Equips& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equips::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equips::CopyFrom(const Equips& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equips::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->equips())) return false;
  return true;
}

void Equips::Swap(Equips* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equips::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equips_descriptor_;
  metadata.reflection = Equips_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attr::kIdFieldNumber;
const int Attr::kStarFieldNumber;
const int Attr::kRateFieldNumber;
const int Attr::kBestFieldNumber;
const int Attr::kGroupFieldNumber;
const int Attr::kAttrFieldNumber;
#endif  // !_MSC_VER

Attr::Attr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Attr)
}

void Attr::InitAsDefaultInstance() {
}

Attr::Attr(const Attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Attr)
}

void Attr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  star_ = 0u;
  rate_ = 0u;
  best_ = false;
  group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attr::~Attr() {
  // @@protoc_insertion_point(destructor:CfgItem.Attr)
  SharedDtor();
}

void Attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr_descriptor_;
}

const Attr& Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Attr* Attr::default_instance_ = NULL;

Attr* Attr::New() const {
  return new Attr;
}

void Attr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Attr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, best_);
    group_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Attr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // required uint32 rate = 3;
      case 3: {
        if (tag == 24) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_best;
        break;
      }

      // required bool best = 4;
      case 4: {
        if (tag == 32) {
         parse_best:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &best_)));
          set_has_best();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // required uint32 group = 5;
      case 5: {
        if (tag == 40) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        break;
      }

      // repeated .CfgCommon.Attribute attr = 6;
      case 6: {
        if (tag == 50) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Attr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Attr)
  return false;
#undef DO_
}

void Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Attr)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rate(), output);
  }

  // required bool best = 4;
  if (has_best()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->best(), output);
  }

  // required uint32 group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->group(), output);
  }

  // repeated .CfgCommon.Attribute attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Attr)
}

::google::protobuf::uint8* Attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Attr)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rate(), target);
  }

  // required bool best = 4;
  if (has_best()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->best(), target);
  }

  // required uint32 group = 5;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->group(), target);
  }

  // repeated .CfgCommon.Attribute attr = 6;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Attr)
  return target;
}

int Attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

    // required bool best = 4;
    if (has_best()) {
      total_size += 1 + 1;
    }

    // required uint32 group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

  }
  // repeated .CfgCommon.Attribute attr = 6;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attr::MergeFrom(const Attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_best()) {
      set_best(from.best());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr::CopyFrom(const Attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void Attr::Swap(Attr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(rate_, other->rate_);
    std::swap(best_, other->best_);
    std::swap(group_, other->group_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr_descriptor_;
  metadata.reflection = Attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attrs::kAttrsFieldNumber;
#endif  // !_MSC_VER

Attrs::Attrs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Attrs)
}

void Attrs::InitAsDefaultInstance() {
}

Attrs::Attrs(const Attrs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Attrs)
}

void Attrs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attrs::~Attrs() {
  // @@protoc_insertion_point(destructor:CfgItem.Attrs)
  SharedDtor();
}

void Attrs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attrs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attrs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attrs_descriptor_;
}

const Attrs& Attrs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Attrs* Attrs::default_instance_ = NULL;

Attrs* Attrs::New() const {
  return new Attrs;
}

void Attrs::Clear() {
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attrs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Attrs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgItem.Attr attrs = 1;
      case 1: {
        if (tag == 10) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Attrs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Attrs)
  return false;
#undef DO_
}

void Attrs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Attrs)
  // repeated .CfgItem.Attr attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Attrs)
}

::google::protobuf::uint8* Attrs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Attrs)
  // repeated .CfgItem.Attr attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Attrs)
  return target;
}

int Attrs::ByteSize() const {
  int total_size = 0;

  // repeated .CfgItem.Attr attrs = 1;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attrs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attrs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attrs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attrs::MergeFrom(const Attrs& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attrs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attrs::CopyFrom(const Attrs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attrs::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void Attrs::Swap(Attrs* other) {
  if (other != this) {
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attrs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attrs_descriptor_;
  metadata.reflection = Attrs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShenQi::kItemFieldNumber;
const int ShenQi::kIdFieldNumber;
#endif  // !_MSC_VER

ShenQi::ShenQi()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.ShenQi)
}

void ShenQi::InitAsDefaultInstance() {
}

ShenQi::ShenQi(const ShenQi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.ShenQi)
}

void ShenQi::SharedCtor() {
  _cached_size_ = 0;
  item_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShenQi::~ShenQi() {
  // @@protoc_insertion_point(destructor:CfgItem.ShenQi)
  SharedDtor();
}

void ShenQi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShenQi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShenQi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShenQi_descriptor_;
}

const ShenQi& ShenQi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

ShenQi* ShenQi::default_instance_ = NULL;

ShenQi* ShenQi::New() const {
  return new ShenQi;
}

void ShenQi::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShenQi*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShenQi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.ShenQi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.ShenQi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.ShenQi)
  return false;
#undef DO_
}

void ShenQi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.ShenQi)
  // required uint32 item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.ShenQi)
}

::google::protobuf::uint8* ShenQi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.ShenQi)
  // required uint32 item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.ShenQi)
  return target;
}

int ShenQi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShenQi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShenQi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShenQi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShenQi::MergeFrom(const ShenQi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShenQi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShenQi::CopyFrom(const ShenQi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShenQi::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShenQi::Swap(ShenQi* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShenQi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShenQi_descriptor_;
  metadata.reflection = ShenQi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShenQis::kShenqisFieldNumber;
#endif  // !_MSC_VER

ShenQis::ShenQis()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.ShenQis)
}

void ShenQis::InitAsDefaultInstance() {
}

ShenQis::ShenQis(const ShenQis& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.ShenQis)
}

void ShenQis::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShenQis::~ShenQis() {
  // @@protoc_insertion_point(destructor:CfgItem.ShenQis)
  SharedDtor();
}

void ShenQis::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShenQis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShenQis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShenQis_descriptor_;
}

const ShenQis& ShenQis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

ShenQis* ShenQis::default_instance_ = NULL;

ShenQis* ShenQis::New() const {
  return new ShenQis;
}

void ShenQis::Clear() {
  shenqis_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShenQis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.ShenQis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgItem.ShenQi shenqis = 1;
      case 1: {
        if (tag == 10) {
         parse_shenqis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shenqis()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_shenqis;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.ShenQis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.ShenQis)
  return false;
#undef DO_
}

void ShenQis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.ShenQis)
  // repeated .CfgItem.ShenQi shenqis = 1;
  for (int i = 0; i < this->shenqis_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shenqis(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.ShenQis)
}

::google::protobuf::uint8* ShenQis::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.ShenQis)
  // repeated .CfgItem.ShenQi shenqis = 1;
  for (int i = 0; i < this->shenqis_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shenqis(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.ShenQis)
  return target;
}

int ShenQis::ByteSize() const {
  int total_size = 0;

  // repeated .CfgItem.ShenQi shenqis = 1;
  total_size += 1 * this->shenqis_size();
  for (int i = 0; i < this->shenqis_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shenqis(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShenQis::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShenQis* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShenQis*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShenQis::MergeFrom(const ShenQis& from) {
  GOOGLE_CHECK_NE(&from, this);
  shenqis_.MergeFrom(from.shenqis_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShenQis::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShenQis::CopyFrom(const ShenQis& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShenQis::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->shenqis())) return false;
  return true;
}

void ShenQis::Swap(ShenQis* other) {
  if (other != this) {
    shenqis_.Swap(&other->shenqis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShenQis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShenQis_descriptor_;
  metadata.reflection = ShenQis_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gift::kIdFieldNumber;
const int Gift::kSubtypeFieldNumber;
const int Gift::kRewardFieldNumber;
const int Gift::kExtendFieldNumber;
#endif  // !_MSC_VER

Gift::Gift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Gift)
}

void Gift::InitAsDefaultInstance() {
}

Gift::Gift(const Gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Gift)
}

void Gift::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  subtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gift::~Gift() {
  // @@protoc_insertion_point(destructor:CfgItem.Gift)
  SharedDtor();
}

void Gift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gift_descriptor_;
}

const Gift& Gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Gift* Gift::default_instance_ = NULL;

Gift* Gift::New() const {
  return new Gift;
}

void Gift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, subtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  extend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Gift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_subtype;
        break;
      }

      // required uint32 subtype = 2;
      case 2: {
        if (tag == 16) {
         parse_subtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .CfgCommon.Reward reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectTag(34)) goto parse_extend;
        break;
      }

      // repeated .CfgCommon.Reward extend = 4;
      case 4: {
        if (tag == 34) {
         parse_extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_extend;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Gift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Gift)
  return false;
#undef DO_
}

void Gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Gift)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 subtype = 2;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->subtype(), output);
  }

  // repeated .CfgCommon.Reward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  // repeated .CfgCommon.Reward extend = 4;
  for (int i = 0; i < this->extend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extend(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Gift)
}

::google::protobuf::uint8* Gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Gift)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 subtype = 2;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->subtype(), target);
  }

  // repeated .CfgCommon.Reward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  // repeated .CfgCommon.Reward extend = 4;
  for (int i = 0; i < this->extend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extend(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Gift)
  return target;
}

int Gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 subtype = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtype());
    }

  }
  // repeated .CfgCommon.Reward reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .CfgCommon.Reward extend = 4;
  total_size += 1 * this->extend_size();
  for (int i = 0; i < this->extend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extend(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gift::MergeFrom(const Gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  extend_.MergeFrom(from.extend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gift::CopyFrom(const Gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->extend())) return false;
  return true;
}

void Gift::Swap(Gift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(subtype_, other->subtype_);
    reward_.Swap(&other->reward_);
    extend_.Swap(&other->extend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gift_descriptor_;
  metadata.reflection = Gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gifts::kGiftsFieldNumber;
#endif  // !_MSC_VER

Gifts::Gifts()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Gifts)
}

void Gifts::InitAsDefaultInstance() {
}

Gifts::Gifts(const Gifts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Gifts)
}

void Gifts::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gifts::~Gifts() {
  // @@protoc_insertion_point(destructor:CfgItem.Gifts)
  SharedDtor();
}

void Gifts::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gifts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gifts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gifts_descriptor_;
}

const Gifts& Gifts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Gifts* Gifts::default_instance_ = NULL;

Gifts* Gifts::New() const {
  return new Gifts;
}

void Gifts::Clear() {
  gifts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gifts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Gifts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgItem.Gift gifts = 1;
      case 1: {
        if (tag == 10) {
         parse_gifts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gifts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gifts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Gifts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Gifts)
  return false;
#undef DO_
}

void Gifts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Gifts)
  // repeated .CfgItem.Gift gifts = 1;
  for (int i = 0; i < this->gifts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gifts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Gifts)
}

::google::protobuf::uint8* Gifts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Gifts)
  // repeated .CfgItem.Gift gifts = 1;
  for (int i = 0; i < this->gifts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gifts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Gifts)
  return target;
}

int Gifts::ByteSize() const {
  int total_size = 0;

  // repeated .CfgItem.Gift gifts = 1;
  total_size += 1 * this->gifts_size();
  for (int i = 0; i < this->gifts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gifts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gifts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gifts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gifts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gifts::MergeFrom(const Gifts& from) {
  GOOGLE_CHECK_NE(&from, this);
  gifts_.MergeFrom(from.gifts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gifts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gifts::CopyFrom(const Gifts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gifts::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->gifts())) return false;
  return true;
}

void Gifts::Swap(Gifts* other) {
  if (other != this) {
    gifts_.Swap(&other->gifts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gifts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gifts_descriptor_;
  metadata.reflection = Gifts_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Drop::kIdFieldNumber;
const int Drop::kRandomCountFieldNumber;
const int Drop::kFixedRewardFieldNumber;
const int Drop::kRandomRewardFieldNumber;
const int Drop::kOwnRewardCountFieldNumber;
const int Drop::kOwnRewardFieldNumber;
const int Drop::kKillRewardCountFieldNumber;
const int Drop::kKillRewardFieldNumber;
#endif  // !_MSC_VER

Drop::Drop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Drop)
}

void Drop::InitAsDefaultInstance() {
}

Drop::Drop(const Drop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Drop)
}

void Drop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  randomcount_ = 0u;
  ownrewardcount_ = 0u;
  killrewardcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Drop::~Drop() {
  // @@protoc_insertion_point(destructor:CfgItem.Drop)
  SharedDtor();
}

void Drop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Drop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Drop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Drop_descriptor_;
}

const Drop& Drop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Drop* Drop::default_instance_ = NULL;

Drop* Drop::New() const {
  return new Drop;
}

void Drop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Drop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, randomcount_);
  ZR_(ownrewardcount_, killrewardcount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  fixedreward_.Clear();
  randomreward_.Clear();
  ownreward_.Clear();
  killreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Drop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Drop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_randomCount;
        break;
      }

      // required uint32 randomCount = 2;
      case 2: {
        if (tag == 16) {
         parse_randomCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randomcount_)));
          set_has_randomcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fixedReward;
        break;
      }

      // repeated .CfgCommon.Reward fixedReward = 3;
      case 3: {
        if (tag == 26) {
         parse_fixedReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fixedreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fixedReward;
        if (input->ExpectTag(34)) goto parse_randomReward;
        break;
      }

      // repeated .CfgCommon.Reward randomReward = 4;
      case 4: {
        if (tag == 34) {
         parse_randomReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randomreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_randomReward;
        if (input->ExpectTag(48)) goto parse_ownRewardCount;
        break;
      }

      // optional uint32 ownRewardCount = 6;
      case 6: {
        if (tag == 48) {
         parse_ownRewardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownrewardcount_)));
          set_has_ownrewardcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ownReward;
        break;
      }

      // repeated .CfgCommon.Reward ownReward = 7;
      case 7: {
        if (tag == 58) {
         parse_ownReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ownreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ownReward;
        if (input->ExpectTag(64)) goto parse_killRewardCount;
        break;
      }

      // optional uint32 killRewardCount = 8;
      case 8: {
        if (tag == 64) {
         parse_killRewardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killrewardcount_)));
          set_has_killrewardcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_killReward;
        break;
      }

      // repeated .CfgCommon.Reward killReward = 9;
      case 9: {
        if (tag == 74) {
         parse_killReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_killreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_killReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Drop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Drop)
  return false;
#undef DO_
}

void Drop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Drop)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 randomCount = 2;
  if (has_randomcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->randomcount(), output);
  }

  // repeated .CfgCommon.Reward fixedReward = 3;
  for (int i = 0; i < this->fixedreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fixedreward(i), output);
  }

  // repeated .CfgCommon.Reward randomReward = 4;
  for (int i = 0; i < this->randomreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->randomreward(i), output);
  }

  // optional uint32 ownRewardCount = 6;
  if (has_ownrewardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ownrewardcount(), output);
  }

  // repeated .CfgCommon.Reward ownReward = 7;
  for (int i = 0; i < this->ownreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ownreward(i), output);
  }

  // optional uint32 killRewardCount = 8;
  if (has_killrewardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->killrewardcount(), output);
  }

  // repeated .CfgCommon.Reward killReward = 9;
  for (int i = 0; i < this->killreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->killreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Drop)
}

::google::protobuf::uint8* Drop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Drop)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 randomCount = 2;
  if (has_randomcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->randomcount(), target);
  }

  // repeated .CfgCommon.Reward fixedReward = 3;
  for (int i = 0; i < this->fixedreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fixedreward(i), target);
  }

  // repeated .CfgCommon.Reward randomReward = 4;
  for (int i = 0; i < this->randomreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->randomreward(i), target);
  }

  // optional uint32 ownRewardCount = 6;
  if (has_ownrewardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ownrewardcount(), target);
  }

  // repeated .CfgCommon.Reward ownReward = 7;
  for (int i = 0; i < this->ownreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ownreward(i), target);
  }

  // optional uint32 killRewardCount = 8;
  if (has_killrewardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->killrewardcount(), target);
  }

  // repeated .CfgCommon.Reward killReward = 9;
  for (int i = 0; i < this->killreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->killreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Drop)
  return target;
}

int Drop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 randomCount = 2;
    if (has_randomcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randomcount());
    }

    // optional uint32 ownRewardCount = 6;
    if (has_ownrewardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownrewardcount());
    }

    // optional uint32 killRewardCount = 8;
    if (has_killrewardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killrewardcount());
    }

  }
  // repeated .CfgCommon.Reward fixedReward = 3;
  total_size += 1 * this->fixedreward_size();
  for (int i = 0; i < this->fixedreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fixedreward(i));
  }

  // repeated .CfgCommon.Reward randomReward = 4;
  total_size += 1 * this->randomreward_size();
  for (int i = 0; i < this->randomreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randomreward(i));
  }

  // repeated .CfgCommon.Reward ownReward = 7;
  total_size += 1 * this->ownreward_size();
  for (int i = 0; i < this->ownreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ownreward(i));
  }

  // repeated .CfgCommon.Reward killReward = 9;
  total_size += 1 * this->killreward_size();
  for (int i = 0; i < this->killreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->killreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Drop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Drop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Drop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Drop::MergeFrom(const Drop& from) {
  GOOGLE_CHECK_NE(&from, this);
  fixedreward_.MergeFrom(from.fixedreward_);
  randomreward_.MergeFrom(from.randomreward_);
  ownreward_.MergeFrom(from.ownreward_);
  killreward_.MergeFrom(from.killreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_randomcount()) {
      set_randomcount(from.randomcount());
    }
    if (from.has_ownrewardcount()) {
      set_ownrewardcount(from.ownrewardcount());
    }
    if (from.has_killrewardcount()) {
      set_killrewardcount(from.killrewardcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Drop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Drop::CopyFrom(const Drop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Drop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fixedreward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->randomreward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ownreward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->killreward())) return false;
  return true;
}

void Drop::Swap(Drop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(randomcount_, other->randomcount_);
    fixedreward_.Swap(&other->fixedreward_);
    randomreward_.Swap(&other->randomreward_);
    std::swap(ownrewardcount_, other->ownrewardcount_);
    ownreward_.Swap(&other->ownreward_);
    std::swap(killrewardcount_, other->killrewardcount_);
    killreward_.Swap(&other->killreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Drop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Drop_descriptor_;
  metadata.reflection = Drop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Drops::kDropsFieldNumber;
#endif  // !_MSC_VER

Drops::Drops()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgItem.Drops)
}

void Drops::InitAsDefaultInstance() {
}

Drops::Drops(const Drops& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgItem.Drops)
}

void Drops::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Drops::~Drops() {
  // @@protoc_insertion_point(destructor:CfgItem.Drops)
  SharedDtor();
}

void Drops::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Drops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Drops::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Drops_descriptor_;
}

const Drops& Drops::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgItem_2eproto();
  return *default_instance_;
}

Drops* Drops::default_instance_ = NULL;

Drops* Drops::New() const {
  return new Drops;
}

void Drops::Clear() {
  drops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Drops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgItem.Drops)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgItem.Drop drops = 1;
      case 1: {
        if (tag == 10) {
         parse_drops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_drops;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgItem.Drops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgItem.Drops)
  return false;
#undef DO_
}

void Drops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgItem.Drops)
  // repeated .CfgItem.Drop drops = 1;
  for (int i = 0; i < this->drops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgItem.Drops)
}

::google::protobuf::uint8* Drops::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgItem.Drops)
  // repeated .CfgItem.Drop drops = 1;
  for (int i = 0; i < this->drops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgItem.Drops)
  return target;
}

int Drops::ByteSize() const {
  int total_size = 0;

  // repeated .CfgItem.Drop drops = 1;
  total_size += 1 * this->drops_size();
  for (int i = 0; i < this->drops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Drops::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Drops* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Drops*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Drops::MergeFrom(const Drops& from) {
  GOOGLE_CHECK_NE(&from, this);
  drops_.MergeFrom(from.drops_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Drops::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Drops::CopyFrom(const Drops& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Drops::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->drops())) return false;
  return true;
}

void Drops::Swap(Drops* other) {
  if (other != this) {
    drops_.Swap(&other->drops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Drops::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Drops_descriptor_;
  metadata.reflection = Drops_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgItem

// @@protoc_insertion_point(global_scope)
