// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgSkill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgSkill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgSkill {

namespace {

const ::google::protobuf::Descriptor* Skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skills_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skills_reflection_ = NULL;
const ::google::protobuf::Descriptor* Monsters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Monsters_reflection_ = NULL;
const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bases_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bases_reflection_ = NULL;
const ::google::protobuf::Descriptor* Buff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Buff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Buffs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Buffs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgSkill_2eproto() {
  protobuf_AddDesc_CfgSkill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgSkill.proto");
  GOOGLE_CHECK(file != NULL);
  Skill_descriptor_ = file->message_type(0);
  static const int Skill_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, career_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, range2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, type2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, careerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, zhanlinghurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, hurtadd_),
  };
  Skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_descriptor_,
      Skill::default_instance_,
      Skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill));
  Skills_descriptor_ = file->message_type(1);
  static const int Skills_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skills, skills_),
  };
  Skills_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skills_descriptor_,
      Skills::default_instance_,
      Skills_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skills, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skills, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skills));
  Monsters_descriptor_ = file->message_type(2);
  static const int Monsters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monsters, monsters_),
  };
  Monsters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Monsters_descriptor_,
      Monsters::default_instance_,
      Monsters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monsters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monsters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Monsters));
  Base_descriptor_ = file->message_type(3);
  static const int Base_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, xishu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, hurt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, unlocklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, hurtadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, maxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, learnlevel_),
  };
  Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Base));
  Bases_descriptor_ = file->message_type(4);
  static const int Bases_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bases, bases_),
  };
  Bases_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bases_descriptor_,
      Bases::default_instance_,
      Bases_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bases, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bases, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bases));
  Buff_descriptor_ = file->message_type(5);
  static const int Buff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, type_),
  };
  Buff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Buff_descriptor_,
      Buff::default_instance_,
      Buff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Buff));
  Buffs_descriptor_ = file->message_type(6);
  static const int Buffs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buffs, buffs_),
  };
  Buffs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Buffs_descriptor_,
      Buffs::default_instance_,
      Buffs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buffs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Buffs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Buffs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgSkill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_descriptor_, &Skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skills_descriptor_, &Skills::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Monsters_descriptor_, &Monsters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Base_descriptor_, &Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bases_descriptor_, &Bases::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Buff_descriptor_, &Buff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Buffs_descriptor_, &Buffs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgSkill_2eproto() {
  delete Skill::default_instance_;
  delete Skill_reflection_;
  delete Skills::default_instance_;
  delete Skills_reflection_;
  delete Monsters::default_instance_;
  delete Monsters_reflection_;
  delete Base::default_instance_;
  delete Base_reflection_;
  delete Bases::default_instance_;
  delete Bases_reflection_;
  delete Buff::default_instance_;
  delete Buff_reflection_;
  delete Buffs::default_instance_;
  delete Buffs_reflection_;
}

void protobuf_AddDesc_CfgSkill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CfgSkill.proto\022\010CfgSkill\032\017CfgCommon.pr"
    "oto\"\244\002\n\005Skill\022\016\n\006serial\030\001 \002(\r\022\016\n\006career\030"
    "\002 \002(\r\022\n\n\002id\030\003 \002(\r\022\n\n\002cd\030\004 \002(\r\022\r\n\005range\030\005"
    " \002(\r\022\016\n\006range2\030\006 \002(\r\022\r\n\005level\030\007 \002(\r\022\014\n\004b"
    "uff\030\010 \002(\t\022\014\n\004type\030\t \002(\r\022\r\n\005type2\030\n \002(\r\022\014"
    "\n\004hurt\030\013 \002(\r\022\016\n\006unlock\030\014 \002(\r\022\014\n\004cost\030\r \002"
    "(\r\022\023\n\013careerlevel\030\016 \001(\r\022\"\n\004attr\030\017 \003(\0132\024."
    "CfgCommon.Attribute\022\024\n\014zhanlinghurt\030\020 \001("
    "\r\022\017\n\007hurtAdd\030\021 \001(\r\")\n\006Skills\022\037\n\006skills\030\001"
    " \003(\0132\017.CfgSkill.Skill\"-\n\010Monsters\022!\n\010mon"
    "sters\030\001 \003(\0132\017.CfgSkill.Skill\"\211\001\n\004Base\022\n\n"
    "\002id\030\001 \002(\r\022\014\n\004cost\030\002 \002(\r\022\r\n\005xishu\030\003 \002(\r\022\014"
    "\n\004hurt\030\004 \002(\r\022\023\n\013unlocklevel\030\005 \002(\r\022\017\n\007hur"
    "tAdd\030\006 \002(\r\022\020\n\010maxLevel\030\007 \002(\r\022\022\n\nlearnLev"
    "el\030\010 \002(\r\"&\n\005Bases\022\035\n\005bases\030\001 \003(\0132\016.CfgSk"
    "ill.Base\",\n\004Buff\022\n\n\002id\030\001 \002(\r\022\n\n\002ts\030\002 \002(\005"
    "\022\014\n\004type\030\003 \002(\r\"&\n\005Buffs\022\035\n\005buffs\030\001 \003(\0132\016"
    ".CfgSkill.Buff", 694);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgSkill.proto", &protobuf_RegisterTypes);
  Skill::default_instance_ = new Skill();
  Skills::default_instance_ = new Skills();
  Monsters::default_instance_ = new Monsters();
  Base::default_instance_ = new Base();
  Bases::default_instance_ = new Bases();
  Buff::default_instance_ = new Buff();
  Buffs::default_instance_ = new Buffs();
  Skill::default_instance_->InitAsDefaultInstance();
  Skills::default_instance_->InitAsDefaultInstance();
  Monsters::default_instance_->InitAsDefaultInstance();
  Base::default_instance_->InitAsDefaultInstance();
  Bases::default_instance_->InitAsDefaultInstance();
  Buff::default_instance_->InitAsDefaultInstance();
  Buffs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgSkill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgSkill_2eproto {
  StaticDescriptorInitializer_CfgSkill_2eproto() {
    protobuf_AddDesc_CfgSkill_2eproto();
  }
} static_descriptor_initializer_CfgSkill_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Skill::kSerialFieldNumber;
const int Skill::kCareerFieldNumber;
const int Skill::kIdFieldNumber;
const int Skill::kCdFieldNumber;
const int Skill::kRangeFieldNumber;
const int Skill::kRange2FieldNumber;
const int Skill::kLevelFieldNumber;
const int Skill::kBuffFieldNumber;
const int Skill::kTypeFieldNumber;
const int Skill::kType2FieldNumber;
const int Skill::kHurtFieldNumber;
const int Skill::kUnlockFieldNumber;
const int Skill::kCostFieldNumber;
const int Skill::kCareerlevelFieldNumber;
const int Skill::kAttrFieldNumber;
const int Skill::kZhanlinghurtFieldNumber;
const int Skill::kHurtAddFieldNumber;
#endif  // !_MSC_VER

Skill::Skill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSkill.Skill)
}

void Skill::InitAsDefaultInstance() {
}

Skill::Skill(const Skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSkill.Skill)
}

void Skill::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serial_ = 0u;
  career_ = 0u;
  id_ = 0u;
  cd_ = 0u;
  range_ = 0u;
  range2_ = 0u;
  level_ = 0u;
  buff_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  type2_ = 0u;
  hurt_ = 0u;
  unlock_ = 0u;
  cost_ = 0u;
  careerlevel_ = 0u;
  zhanlinghurt_ = 0u;
  hurtadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill::~Skill() {
  // @@protoc_insertion_point(destructor:CfgSkill.Skill)
  SharedDtor();
}

void Skill::SharedDtor() {
  if (buff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buff_;
  }
  if (this != default_instance_) {
  }
}

void Skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_descriptor_;
}

const Skill& Skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSkill_2eproto();
  return *default_instance_;
}

Skill* Skill::default_instance_ = NULL;

Skill* Skill::New() const {
  return new Skill;
}

void Skill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Skill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(serial_, range2_);
    level_ = 0u;
    if (has_buff()) {
      if (buff_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buff_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(type_, cost_);
    ZR_(careerlevel_, zhanlinghurt_);
  }
  hurtadd_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSkill.Skill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serial = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_career;
        break;
      }

      // required uint32 career = 2;
      case 2: {
        if (tag == 16) {
         parse_career:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &career_)));
          set_has_career();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cd;
        break;
      }

      // required uint32 cd = 4;
      case 4: {
        if (tag == 32) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_range;
        break;
      }

      // required uint32 range = 5;
      case 5: {
        if (tag == 40) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_range2;
        break;
      }

      // required uint32 range2 = 6;
      case 6: {
        if (tag == 48) {
         parse_range2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range2_)));
          set_has_range2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // required uint32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_buff;
        break;
      }

      // required string buff = 8;
      case 8: {
        if (tag == 66) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buff()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buff().data(), this->buff().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buff");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_type;
        break;
      }

      // required uint32 type = 9;
      case 9: {
        if (tag == 72) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type2;
        break;
      }

      // required uint32 type2 = 10;
      case 10: {
        if (tag == 80) {
         parse_type2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type2_)));
          set_has_type2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_hurt;
        break;
      }

      // required uint32 hurt = 11;
      case 11: {
        if (tag == 88) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_unlock;
        break;
      }

      // required uint32 unlock = 12;
      case 12: {
        if (tag == 96) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cost;
        break;
      }

      // required uint32 cost = 13;
      case 13: {
        if (tag == 104) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_careerlevel;
        break;
      }

      // optional uint32 careerlevel = 14;
      case 14: {
        if (tag == 112) {
         parse_careerlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &careerlevel_)));
          set_has_careerlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_attr;
        break;
      }

      // repeated .CfgCommon.Attribute attr = 15;
      case 15: {
        if (tag == 122) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_attr;
        if (input->ExpectTag(128)) goto parse_zhanlinghurt;
        break;
      }

      // optional uint32 zhanlinghurt = 16;
      case 16: {
        if (tag == 128) {
         parse_zhanlinghurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zhanlinghurt_)));
          set_has_zhanlinghurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_hurtAdd;
        break;
      }

      // optional uint32 hurtAdd = 17;
      case 17: {
        if (tag == 136) {
         parse_hurtAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurtadd_)));
          set_has_hurtadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSkill.Skill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSkill.Skill)
  return false;
#undef DO_
}

void Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSkill.Skill)
  // required uint32 serial = 1;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serial(), output);
  }

  // required uint32 career = 2;
  if (has_career()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->career(), output);
  }

  // required uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // required uint32 cd = 4;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cd(), output);
  }

  // required uint32 range = 5;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->range(), output);
  }

  // required uint32 range2 = 6;
  if (has_range2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->range2(), output);
  }

  // required uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // required string buff = 8;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buff().data(), this->buff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buff");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->buff(), output);
  }

  // required uint32 type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->type(), output);
  }

  // required uint32 type2 = 10;
  if (has_type2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->type2(), output);
  }

  // required uint32 hurt = 11;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->hurt(), output);
  }

  // required uint32 unlock = 12;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->unlock(), output);
  }

  // required uint32 cost = 13;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cost(), output);
  }

  // optional uint32 careerlevel = 14;
  if (has_careerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->careerlevel(), output);
  }

  // repeated .CfgCommon.Attribute attr = 15;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->attr(i), output);
  }

  // optional uint32 zhanlinghurt = 16;
  if (has_zhanlinghurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->zhanlinghurt(), output);
  }

  // optional uint32 hurtAdd = 17;
  if (has_hurtadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->hurtadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSkill.Skill)
}

::google::protobuf::uint8* Skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSkill.Skill)
  // required uint32 serial = 1;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serial(), target);
  }

  // required uint32 career = 2;
  if (has_career()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->career(), target);
  }

  // required uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // required uint32 cd = 4;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cd(), target);
  }

  // required uint32 range = 5;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->range(), target);
  }

  // required uint32 range2 = 6;
  if (has_range2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->range2(), target);
  }

  // required uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // required string buff = 8;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buff().data(), this->buff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buff");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->buff(), target);
  }

  // required uint32 type = 9;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->type(), target);
  }

  // required uint32 type2 = 10;
  if (has_type2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->type2(), target);
  }

  // required uint32 hurt = 11;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->hurt(), target);
  }

  // required uint32 unlock = 12;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->unlock(), target);
  }

  // required uint32 cost = 13;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cost(), target);
  }

  // optional uint32 careerlevel = 14;
  if (has_careerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->careerlevel(), target);
  }

  // repeated .CfgCommon.Attribute attr = 15;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->attr(i), target);
  }

  // optional uint32 zhanlinghurt = 16;
  if (has_zhanlinghurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->zhanlinghurt(), target);
  }

  // optional uint32 hurtAdd = 17;
  if (has_hurtadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->hurtadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSkill.Skill)
  return target;
}

int Skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serial = 1;
    if (has_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serial());
    }

    // required uint32 career = 2;
    if (has_career()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->career());
    }

    // required uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 cd = 4;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // required uint32 range = 5;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range());
    }

    // required uint32 range2 = 6;
    if (has_range2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range2());
    }

    // required uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required string buff = 8;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 type2 = 10;
    if (has_type2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type2());
    }

    // required uint32 hurt = 11;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt());
    }

    // required uint32 unlock = 12;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock());
    }

    // required uint32 cost = 13;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // optional uint32 careerlevel = 14;
    if (has_careerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->careerlevel());
    }

    // optional uint32 zhanlinghurt = 16;
    if (has_zhanlinghurt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zhanlinghurt());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 hurtAdd = 17;
    if (has_hurtadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurtadd());
    }

  }
  // repeated .CfgCommon.Attribute attr = 15;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill::MergeFrom(const Skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serial()) {
      set_serial(from.serial());
    }
    if (from.has_career()) {
      set_career(from.career());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_range2()) {
      set_range2(from.range2());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_buff()) {
      set_buff(from.buff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_type2()) {
      set_type2(from.type2());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_careerlevel()) {
      set_careerlevel(from.careerlevel());
    }
    if (from.has_zhanlinghurt()) {
      set_zhanlinghurt(from.zhanlinghurt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hurtadd()) {
      set_hurtadd(from.hurtadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill::CopyFrom(const Skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void Skill::Swap(Skill* other) {
  if (other != this) {
    std::swap(serial_, other->serial_);
    std::swap(career_, other->career_);
    std::swap(id_, other->id_);
    std::swap(cd_, other->cd_);
    std::swap(range_, other->range_);
    std::swap(range2_, other->range2_);
    std::swap(level_, other->level_);
    std::swap(buff_, other->buff_);
    std::swap(type_, other->type_);
    std::swap(type2_, other->type2_);
    std::swap(hurt_, other->hurt_);
    std::swap(unlock_, other->unlock_);
    std::swap(cost_, other->cost_);
    std::swap(careerlevel_, other->careerlevel_);
    attr_.Swap(&other->attr_);
    std::swap(zhanlinghurt_, other->zhanlinghurt_);
    std::swap(hurtadd_, other->hurtadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_descriptor_;
  metadata.reflection = Skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skills::kSkillsFieldNumber;
#endif  // !_MSC_VER

Skills::Skills()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSkill.Skills)
}

void Skills::InitAsDefaultInstance() {
}

Skills::Skills(const Skills& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSkill.Skills)
}

void Skills::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skills::~Skills() {
  // @@protoc_insertion_point(destructor:CfgSkill.Skills)
  SharedDtor();
}

void Skills::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skills::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skills::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skills_descriptor_;
}

const Skills& Skills::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSkill_2eproto();
  return *default_instance_;
}

Skills* Skills::default_instance_ = NULL;

Skills* Skills::New() const {
  return new Skills;
}

void Skills::Clear() {
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skills::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSkill.Skills)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgSkill.Skill skills = 1;
      case 1: {
        if (tag == 10) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_skills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSkill.Skills)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSkill.Skills)
  return false;
#undef DO_
}

void Skills::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSkill.Skills)
  // repeated .CfgSkill.Skill skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSkill.Skills)
}

::google::protobuf::uint8* Skills::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSkill.Skills)
  // repeated .CfgSkill.Skill skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSkill.Skills)
  return target;
}

int Skills::ByteSize() const {
  int total_size = 0;

  // repeated .CfgSkill.Skill skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skills::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skills* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skills*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skills::MergeFrom(const Skills& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skills::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skills::CopyFrom(const Skills& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skills::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->skills())) return false;
  return true;
}

void Skills::Swap(Skills* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skills::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skills_descriptor_;
  metadata.reflection = Skills_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Monsters::kMonstersFieldNumber;
#endif  // !_MSC_VER

Monsters::Monsters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSkill.Monsters)
}

void Monsters::InitAsDefaultInstance() {
}

Monsters::Monsters(const Monsters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSkill.Monsters)
}

void Monsters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Monsters::~Monsters() {
  // @@protoc_insertion_point(destructor:CfgSkill.Monsters)
  SharedDtor();
}

void Monsters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Monsters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Monsters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Monsters_descriptor_;
}

const Monsters& Monsters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSkill_2eproto();
  return *default_instance_;
}

Monsters* Monsters::default_instance_ = NULL;

Monsters* Monsters::New() const {
  return new Monsters;
}

void Monsters::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Monsters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSkill.Monsters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgSkill.Skill monsters = 1;
      case 1: {
        if (tag == 10) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_monsters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSkill.Monsters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSkill.Monsters)
  return false;
#undef DO_
}

void Monsters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSkill.Monsters)
  // repeated .CfgSkill.Skill monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSkill.Monsters)
}

::google::protobuf::uint8* Monsters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSkill.Monsters)
  // repeated .CfgSkill.Skill monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSkill.Monsters)
  return target;
}

int Monsters::ByteSize() const {
  int total_size = 0;

  // repeated .CfgSkill.Skill monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monsters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Monsters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Monsters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Monsters::MergeFrom(const Monsters& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Monsters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Monsters::CopyFrom(const Monsters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monsters::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->monsters())) return false;
  return true;
}

void Monsters::Swap(Monsters* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Monsters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Monsters_descriptor_;
  metadata.reflection = Monsters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Base::kIdFieldNumber;
const int Base::kCostFieldNumber;
const int Base::kXishuFieldNumber;
const int Base::kHurtFieldNumber;
const int Base::kUnlocklevelFieldNumber;
const int Base::kHurtAddFieldNumber;
const int Base::kMaxLevelFieldNumber;
const int Base::kLearnLevelFieldNumber;
#endif  // !_MSC_VER

Base::Base()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSkill.Base)
}

void Base::InitAsDefaultInstance() {
}

Base::Base(const Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSkill.Base)
}

void Base::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cost_ = 0u;
  xishu_ = 0u;
  hurt_ = 0u;
  unlocklevel_ = 0u;
  hurtadd_ = 0u;
  maxlevel_ = 0u;
  learnlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Base::~Base() {
  // @@protoc_insertion_point(destructor:CfgSkill.Base)
  SharedDtor();
}

void Base::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSkill_2eproto();
  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New() const {
  return new Base;
}

void Base::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Base*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, learnlevel_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSkill.Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // required uint32 cost = 2;
      case 2: {
        if (tag == 16) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_xishu;
        break;
      }

      // required uint32 xishu = 3;
      case 3: {
        if (tag == 24) {
         parse_xishu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xishu_)));
          set_has_xishu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hurt;
        break;
      }

      // required uint32 hurt = 4;
      case 4: {
        if (tag == 32) {
         parse_hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unlocklevel;
        break;
      }

      // required uint32 unlocklevel = 5;
      case 5: {
        if (tag == 40) {
         parse_unlocklevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hurtAdd;
        break;
      }

      // required uint32 hurtAdd = 6;
      case 6: {
        if (tag == 48) {
         parse_hurtAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurtadd_)));
          set_has_hurtadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_maxLevel;
        break;
      }

      // required uint32 maxLevel = 7;
      case 7: {
        if (tag == 56) {
         parse_maxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_learnLevel;
        break;
      }

      // required uint32 learnLevel = 8;
      case 8: {
        if (tag == 64) {
         parse_learnLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &learnlevel_)));
          set_has_learnlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSkill.Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSkill.Base)
  return false;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSkill.Base)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost(), output);
  }

  // required uint32 xishu = 3;
  if (has_xishu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->xishu(), output);
  }

  // required uint32 hurt = 4;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hurt(), output);
  }

  // required uint32 unlocklevel = 5;
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unlocklevel(), output);
  }

  // required uint32 hurtAdd = 6;
  if (has_hurtadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hurtadd(), output);
  }

  // required uint32 maxLevel = 7;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxlevel(), output);
  }

  // required uint32 learnLevel = 8;
  if (has_learnlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->learnlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSkill.Base)
}

::google::protobuf::uint8* Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSkill.Base)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost(), target);
  }

  // required uint32 xishu = 3;
  if (has_xishu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->xishu(), target);
  }

  // required uint32 hurt = 4;
  if (has_hurt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hurt(), target);
  }

  // required uint32 unlocklevel = 5;
  if (has_unlocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->unlocklevel(), target);
  }

  // required uint32 hurtAdd = 6;
  if (has_hurtadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hurtadd(), target);
  }

  // required uint32 maxLevel = 7;
  if (has_maxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxlevel(), target);
  }

  // required uint32 learnLevel = 8;
  if (has_learnlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->learnlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSkill.Base)
  return target;
}

int Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required uint32 xishu = 3;
    if (has_xishu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xishu());
    }

    // required uint32 hurt = 4;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt());
    }

    // required uint32 unlocklevel = 5;
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlocklevel());
    }

    // required uint32 hurtAdd = 6;
    if (has_hurtadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurtadd());
    }

    // required uint32 maxLevel = 7;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlevel());
    }

    // required uint32 learnLevel = 8;
    if (has_learnlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->learnlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_xishu()) {
      set_xishu(from.xishu());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
    if (from.has_hurtadd()) {
      set_hurtadd(from.hurtadd());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_learnlevel()) {
      set_learnlevel(from.learnlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Base::Swap(Base* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cost_, other->cost_);
    std::swap(xishu_, other->xishu_);
    std::swap(hurt_, other->hurt_);
    std::swap(unlocklevel_, other->unlocklevel_);
    std::swap(hurtadd_, other->hurtadd_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(learnlevel_, other->learnlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bases::kBasesFieldNumber;
#endif  // !_MSC_VER

Bases::Bases()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSkill.Bases)
}

void Bases::InitAsDefaultInstance() {
}

Bases::Bases(const Bases& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSkill.Bases)
}

void Bases::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bases::~Bases() {
  // @@protoc_insertion_point(destructor:CfgSkill.Bases)
  SharedDtor();
}

void Bases::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bases::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bases::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bases_descriptor_;
}

const Bases& Bases::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSkill_2eproto();
  return *default_instance_;
}

Bases* Bases::default_instance_ = NULL;

Bases* Bases::New() const {
  return new Bases;
}

void Bases::Clear() {
  bases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bases::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSkill.Bases)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgSkill.Base bases = 1;
      case 1: {
        if (tag == 10) {
         parse_bases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bases()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_bases;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSkill.Bases)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSkill.Bases)
  return false;
#undef DO_
}

void Bases::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSkill.Bases)
  // repeated .CfgSkill.Base bases = 1;
  for (int i = 0; i < this->bases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bases(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSkill.Bases)
}

::google::protobuf::uint8* Bases::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSkill.Bases)
  // repeated .CfgSkill.Base bases = 1;
  for (int i = 0; i < this->bases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bases(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSkill.Bases)
  return target;
}

int Bases::ByteSize() const {
  int total_size = 0;

  // repeated .CfgSkill.Base bases = 1;
  total_size += 1 * this->bases_size();
  for (int i = 0; i < this->bases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bases(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bases::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bases* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bases*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bases::MergeFrom(const Bases& from) {
  GOOGLE_CHECK_NE(&from, this);
  bases_.MergeFrom(from.bases_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bases::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bases::CopyFrom(const Bases& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bases::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->bases())) return false;
  return true;
}

void Bases::Swap(Bases* other) {
  if (other != this) {
    bases_.Swap(&other->bases_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bases::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bases_descriptor_;
  metadata.reflection = Bases_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Buff::kIdFieldNumber;
const int Buff::kTsFieldNumber;
const int Buff::kTypeFieldNumber;
#endif  // !_MSC_VER

Buff::Buff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSkill.Buff)
}

void Buff::InitAsDefaultInstance() {
}

Buff::Buff(const Buff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSkill.Buff)
}

void Buff::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ts_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Buff::~Buff() {
  // @@protoc_insertion_point(destructor:CfgSkill.Buff)
  SharedDtor();
}

void Buff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Buff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Buff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Buff_descriptor_;
}

const Buff& Buff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSkill_2eproto();
  return *default_instance_;
}

Buff* Buff::default_instance_ = NULL;

Buff* Buff::New() const {
  return new Buff;
}

void Buff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Buff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Buff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSkill.Buff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required int32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSkill.Buff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSkill.Buff)
  return false;
#undef DO_
}

void Buff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSkill.Buff)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ts(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSkill.Buff)
}

::google::protobuf::uint8* Buff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSkill.Buff)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ts(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSkill.Buff)
  return target;
}

int Buff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Buff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Buff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Buff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Buff::MergeFrom(const Buff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Buff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Buff::CopyFrom(const Buff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Buff::Swap(Buff* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ts_, other->ts_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Buff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Buff_descriptor_;
  metadata.reflection = Buff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Buffs::kBuffsFieldNumber;
#endif  // !_MSC_VER

Buffs::Buffs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgSkill.Buffs)
}

void Buffs::InitAsDefaultInstance() {
}

Buffs::Buffs(const Buffs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgSkill.Buffs)
}

void Buffs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Buffs::~Buffs() {
  // @@protoc_insertion_point(destructor:CfgSkill.Buffs)
  SharedDtor();
}

void Buffs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Buffs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Buffs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Buffs_descriptor_;
}

const Buffs& Buffs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgSkill_2eproto();
  return *default_instance_;
}

Buffs* Buffs::default_instance_ = NULL;

Buffs* Buffs::New() const {
  return new Buffs;
}

void Buffs::Clear() {
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Buffs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgSkill.Buffs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgSkill.Buff buffs = 1;
      case 1: {
        if (tag == 10) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buffs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgSkill.Buffs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgSkill.Buffs)
  return false;
#undef DO_
}

void Buffs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgSkill.Buffs)
  // repeated .CfgSkill.Buff buffs = 1;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buffs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgSkill.Buffs)
}

::google::protobuf::uint8* Buffs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgSkill.Buffs)
  // repeated .CfgSkill.Buff buffs = 1;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buffs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgSkill.Buffs)
  return target;
}

int Buffs::ByteSize() const {
  int total_size = 0;

  // repeated .CfgSkill.Buff buffs = 1;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Buffs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Buffs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Buffs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Buffs::MergeFrom(const Buffs& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffs_.MergeFrom(from.buffs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Buffs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Buffs::CopyFrom(const Buffs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buffs::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->buffs())) return false;
  return true;
}

void Buffs::Swap(Buffs* other) {
  if (other != this) {
    buffs_.Swap(&other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Buffs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Buffs_descriptor_;
  metadata.reflection = Buffs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgSkill

// @@protoc_insertion_point(global_scope)
