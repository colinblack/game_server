// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgMoney.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgMoney.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgMoney {

namespace {

const ::google::protobuf::Descriptor* ItemMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemMoneys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemMoneys_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgMoney_2eproto() {
  protobuf_AddDesc_CfgMoney_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgMoney.proto");
  GOOGLE_CHECK(file != NULL);
  ItemMoney_descriptor_ = file->message_type(0);
  static const int ItemMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMoney, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMoney, limit_),
  };
  ItemMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemMoney_descriptor_,
      ItemMoney::default_instance_,
      ItemMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemMoney));
  ItemMoneys_descriptor_ = file->message_type(1);
  static const int ItemMoneys_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMoneys, item_money_),
  };
  ItemMoneys_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemMoneys_descriptor_,
      ItemMoneys::default_instance_,
      ItemMoneys_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMoneys, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMoneys, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemMoneys));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgMoney_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemMoney_descriptor_, &ItemMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemMoneys_descriptor_, &ItemMoneys::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgMoney_2eproto() {
  delete ItemMoney::default_instance_;
  delete ItemMoney_reflection_;
  delete ItemMoneys::default_instance_;
  delete ItemMoneys_reflection_;
}

void protobuf_AddDesc_CfgMoney_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CfgMoney.proto\022\010CfgMoney\"&\n\tItemMoney\022"
    "\n\n\002id\030\001 \002(\r\022\r\n\005limit\030\002 \002(\r\"5\n\nItemMoneys"
    "\022\'\n\nitem_money\030\001 \003(\0132\023.CfgMoney.ItemMone"
    "y", 121);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgMoney.proto", &protobuf_RegisterTypes);
  ItemMoney::default_instance_ = new ItemMoney();
  ItemMoneys::default_instance_ = new ItemMoneys();
  ItemMoney::default_instance_->InitAsDefaultInstance();
  ItemMoneys::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgMoney_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgMoney_2eproto {
  StaticDescriptorInitializer_CfgMoney_2eproto() {
    protobuf_AddDesc_CfgMoney_2eproto();
  }
} static_descriptor_initializer_CfgMoney_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ItemMoney::kIdFieldNumber;
const int ItemMoney::kLimitFieldNumber;
#endif  // !_MSC_VER

ItemMoney::ItemMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMoney.ItemMoney)
}

void ItemMoney::InitAsDefaultInstance() {
}

ItemMoney::ItemMoney(const ItemMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMoney.ItemMoney)
}

void ItemMoney::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemMoney::~ItemMoney() {
  // @@protoc_insertion_point(destructor:CfgMoney.ItemMoney)
  SharedDtor();
}

void ItemMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemMoney_descriptor_;
}

const ItemMoney& ItemMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMoney_2eproto();
  return *default_instance_;
}

ItemMoney* ItemMoney::default_instance_ = NULL;

ItemMoney* ItemMoney::New() const {
  return new ItemMoney;
}

void ItemMoney::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemMoney*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMoney.ItemMoney)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // required uint32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMoney.ItemMoney)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMoney.ItemMoney)
  return false;
#undef DO_
}

void ItemMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMoney.ItemMoney)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMoney.ItemMoney)
}

::google::protobuf::uint8* ItemMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMoney.ItemMoney)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMoney.ItemMoney)
  return target;
}

int ItemMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemMoney::MergeFrom(const ItemMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemMoney::CopyFrom(const ItemMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemMoney::Swap(ItemMoney* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemMoney_descriptor_;
  metadata.reflection = ItemMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemMoneys::kItemMoneyFieldNumber;
#endif  // !_MSC_VER

ItemMoneys::ItemMoneys()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgMoney.ItemMoneys)
}

void ItemMoneys::InitAsDefaultInstance() {
}

ItemMoneys::ItemMoneys(const ItemMoneys& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgMoney.ItemMoneys)
}

void ItemMoneys::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemMoneys::~ItemMoneys() {
  // @@protoc_insertion_point(destructor:CfgMoney.ItemMoneys)
  SharedDtor();
}

void ItemMoneys::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemMoneys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemMoneys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemMoneys_descriptor_;
}

const ItemMoneys& ItemMoneys::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgMoney_2eproto();
  return *default_instance_;
}

ItemMoneys* ItemMoneys::default_instance_ = NULL;

ItemMoneys* ItemMoneys::New() const {
  return new ItemMoneys;
}

void ItemMoneys::Clear() {
  item_money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemMoneys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgMoney.ItemMoneys)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgMoney.ItemMoney item_money = 1;
      case 1: {
        if (tag == 10) {
         parse_item_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_money()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item_money;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgMoney.ItemMoneys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgMoney.ItemMoneys)
  return false;
#undef DO_
}

void ItemMoneys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgMoney.ItemMoneys)
  // repeated .CfgMoney.ItemMoney item_money = 1;
  for (int i = 0; i < this->item_money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_money(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgMoney.ItemMoneys)
}

::google::protobuf::uint8* ItemMoneys::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgMoney.ItemMoneys)
  // repeated .CfgMoney.ItemMoney item_money = 1;
  for (int i = 0; i < this->item_money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_money(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgMoney.ItemMoneys)
  return target;
}

int ItemMoneys::ByteSize() const {
  int total_size = 0;

  // repeated .CfgMoney.ItemMoney item_money = 1;
  total_size += 1 * this->item_money_size();
  for (int i = 0; i < this->item_money_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_money(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemMoneys::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemMoneys* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemMoneys*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemMoneys::MergeFrom(const ItemMoneys& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_money_.MergeFrom(from.item_money_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemMoneys::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemMoneys::CopyFrom(const ItemMoneys& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemMoneys::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item_money())) return false;
  return true;
}

void ItemMoneys::Swap(ItemMoneys* other) {
  if (other != this) {
    item_money_.Swap(&other->item_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemMoneys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemMoneys_descriptor_;
  metadata.reflection = ItemMoneys_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgMoney

// @@protoc_insertion_point(global_scope)
