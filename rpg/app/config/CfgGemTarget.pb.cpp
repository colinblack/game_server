// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgGemTarget.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgGemTarget.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgGemTarget {

namespace {

const ::google::protobuf::Descriptor* GemTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemTargets_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemTargets_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgGemTarget_2eproto() {
  protobuf_AddDesc_CfgGemTarget_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgGemTarget.proto");
  GOOGLE_CHECK(file != NULL);
  GemTarget_descriptor_ = file->message_type(0);
  static const int GemTarget_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTarget, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTarget, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTarget, gemlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTarget, gemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTarget, attr_),
  };
  GemTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemTarget_descriptor_,
      GemTarget::default_instance_,
      GemTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemTarget));
  GemTargets_descriptor_ = file->message_type(1);
  static const int GemTargets_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTargets, gem_targets_),
  };
  GemTargets_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemTargets_descriptor_,
      GemTargets::default_instance_,
      GemTargets_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTargets, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemTargets, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemTargets));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgGemTarget_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemTarget_descriptor_, &GemTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemTargets_descriptor_, &GemTargets::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgGemTarget_2eproto() {
  delete GemTarget::default_instance_;
  delete GemTarget_reflection_;
  delete GemTargets::default_instance_;
  delete GemTargets_reflection_;
}

void protobuf_AddDesc_CfgGemTarget_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022CfgGemTarget.proto\022\014CfgGemTarget\032\017CfgC"
    "ommon.proto\"j\n\tGemTarget\022\n\n\002id\030\001 \002(\r\022\r\n\005"
    "count\030\002 \002(\r\022\r\n\005gemLV\030\003 \002(\r\022\017\n\007gemType\030\004 "
    "\003(\r\022\"\n\004attr\030\005 \003(\0132\024.CfgCommon.Attribute\""
    ":\n\nGemTargets\022,\n\013gem_targets\030\001 \003(\0132\027.Cfg"
    "GemTarget.GemTarget", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgGemTarget.proto", &protobuf_RegisterTypes);
  GemTarget::default_instance_ = new GemTarget();
  GemTargets::default_instance_ = new GemTargets();
  GemTarget::default_instance_->InitAsDefaultInstance();
  GemTargets::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgGemTarget_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgGemTarget_2eproto {
  StaticDescriptorInitializer_CfgGemTarget_2eproto() {
    protobuf_AddDesc_CfgGemTarget_2eproto();
  }
} static_descriptor_initializer_CfgGemTarget_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GemTarget::kIdFieldNumber;
const int GemTarget::kCountFieldNumber;
const int GemTarget::kGemLVFieldNumber;
const int GemTarget::kGemTypeFieldNumber;
const int GemTarget::kAttrFieldNumber;
#endif  // !_MSC_VER

GemTarget::GemTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgGemTarget.GemTarget)
}

void GemTarget::InitAsDefaultInstance() {
}

GemTarget::GemTarget(const GemTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgGemTarget.GemTarget)
}

void GemTarget::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  gemlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemTarget::~GemTarget() {
  // @@protoc_insertion_point(destructor:CfgGemTarget.GemTarget)
  SharedDtor();
}

void GemTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemTarget_descriptor_;
}

const GemTarget& GemTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgGemTarget_2eproto();
  return *default_instance_;
}

GemTarget* GemTarget::default_instance_ = NULL;

GemTarget* GemTarget::New() const {
  return new GemTarget;
}

void GemTarget::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GemTarget*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, count_);
    gemlv_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gemtype_.Clear();
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgGemTarget.GemTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gemLV;
        break;
      }

      // required uint32 gemLV = 3;
      case 3: {
        if (tag == 24) {
         parse_gemLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gemlv_)));
          set_has_gemlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gemType;
        break;
      }

      // repeated uint32 gemType = 4;
      case 4: {
        if (tag == 32) {
         parse_gemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_gemtype())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gemtype())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gemType;
        if (input->ExpectTag(42)) goto parse_attr;
        break;
      }

      // repeated .CfgCommon.Attribute attr = 5;
      case 5: {
        if (tag == 42) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgGemTarget.GemTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgGemTarget.GemTarget)
  return false;
#undef DO_
}

void GemTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgGemTarget.GemTarget)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 gemLV = 3;
  if (has_gemlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gemlv(), output);
  }

  // repeated uint32 gemType = 4;
  for (int i = 0; i < this->gemtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->gemtype(i), output);
  }

  // repeated .CfgCommon.Attribute attr = 5;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgGemTarget.GemTarget)
}

::google::protobuf::uint8* GemTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgGemTarget.GemTarget)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 gemLV = 3;
  if (has_gemlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gemlv(), target);
  }

  // repeated uint32 gemType = 4;
  for (int i = 0; i < this->gemtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->gemtype(i), target);
  }

  // repeated .CfgCommon.Attribute attr = 5;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgGemTarget.GemTarget)
  return target;
}

int GemTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 gemLV = 3;
    if (has_gemlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gemlv());
    }

  }
  // repeated uint32 gemType = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->gemtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gemtype(i));
    }
    total_size += 1 * this->gemtype_size() + data_size;
  }

  // repeated .CfgCommon.Attribute attr = 5;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemTarget::MergeFrom(const GemTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  gemtype_.MergeFrom(from.gemtype_);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_gemlv()) {
      set_gemlv(from.gemlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemTarget::CopyFrom(const GemTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void GemTarget::Swap(GemTarget* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(gemlv_, other->gemlv_);
    gemtype_.Swap(&other->gemtype_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemTarget_descriptor_;
  metadata.reflection = GemTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemTargets::kGemTargetsFieldNumber;
#endif  // !_MSC_VER

GemTargets::GemTargets()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgGemTarget.GemTargets)
}

void GemTargets::InitAsDefaultInstance() {
}

GemTargets::GemTargets(const GemTargets& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgGemTarget.GemTargets)
}

void GemTargets::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemTargets::~GemTargets() {
  // @@protoc_insertion_point(destructor:CfgGemTarget.GemTargets)
  SharedDtor();
}

void GemTargets::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemTargets::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemTargets::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemTargets_descriptor_;
}

const GemTargets& GemTargets::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgGemTarget_2eproto();
  return *default_instance_;
}

GemTargets* GemTargets::default_instance_ = NULL;

GemTargets* GemTargets::New() const {
  return new GemTargets;
}

void GemTargets::Clear() {
  gem_targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemTargets::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgGemTarget.GemTargets)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgGemTarget.GemTarget gem_targets = 1;
      case 1: {
        if (tag == 10) {
         parse_gem_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gem_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gem_targets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgGemTarget.GemTargets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgGemTarget.GemTargets)
  return false;
#undef DO_
}

void GemTargets::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgGemTarget.GemTargets)
  // repeated .CfgGemTarget.GemTarget gem_targets = 1;
  for (int i = 0; i < this->gem_targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gem_targets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgGemTarget.GemTargets)
}

::google::protobuf::uint8* GemTargets::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgGemTarget.GemTargets)
  // repeated .CfgGemTarget.GemTarget gem_targets = 1;
  for (int i = 0; i < this->gem_targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gem_targets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgGemTarget.GemTargets)
  return target;
}

int GemTargets::ByteSize() const {
  int total_size = 0;

  // repeated .CfgGemTarget.GemTarget gem_targets = 1;
  total_size += 1 * this->gem_targets_size();
  for (int i = 0; i < this->gem_targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gem_targets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemTargets::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemTargets* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemTargets*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemTargets::MergeFrom(const GemTargets& from) {
  GOOGLE_CHECK_NE(&from, this);
  gem_targets_.MergeFrom(from.gem_targets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemTargets::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemTargets::CopyFrom(const GemTargets& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemTargets::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->gem_targets())) return false;
  return true;
}

void GemTargets::Swap(GemTargets* other) {
  if (other != this) {
    gem_targets_.Swap(&other->gem_targets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemTargets::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemTargets_descriptor_;
  metadata.reflection = GemTargets_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgGemTarget

// @@protoc_insertion_point(global_scope)
