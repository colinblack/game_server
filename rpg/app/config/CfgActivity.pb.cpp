// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgActivity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgActivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgActivity {

namespace {

const ::google::protobuf::Descriptor* LimitTs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitTs_reflection_ = NULL;
const ::google::protobuf::Descriptor* DaliyAct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DaliyAct_reflection_ = NULL;
const ::google::protobuf::Descriptor* DaliyActs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DaliyActs_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Active_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Active_reflection_ = NULL;
const ::google::protobuf::Descriptor* Actives_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Actives_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgActivity_2eproto() {
  protobuf_AddDesc_CfgActivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgActivity.proto");
  GOOGLE_CHECK(file != NULL);
  LimitTs_descriptor_ = file->message_type(0);
  static const int LimitTs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTs, startts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTs, endts_),
  };
  LimitTs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitTs_descriptor_,
      LimitTs::default_instance_,
      LimitTs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitTs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitTs));
  DaliyAct_descriptor_ = file->message_type(1);
  static const int DaliyAct_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyAct, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyAct, copycfg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyAct, copyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyAct, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyAct, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyAct, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyAct, limits_),
  };
  DaliyAct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DaliyAct_descriptor_,
      DaliyAct::default_instance_,
      DaliyAct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyAct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyAct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DaliyAct));
  DaliyActs_descriptor_ = file->message_type(2);
  static const int DaliyActs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyActs, daliy_act_),
  };
  DaliyActs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DaliyActs_descriptor_,
      DaliyActs::default_instance_,
      DaliyActs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyActs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DaliyActs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DaliyActs));
  Reward_descriptor_ = file->message_type(3);
  static const int Reward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, count_),
  };
  Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reward_descriptor_,
      Reward::default_instance_,
      Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reward));
  Active_descriptor_ = file->message_type(4);
  static const int Active_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Active, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Active, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Active, reward_),
  };
  Active_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Active_descriptor_,
      Active::default_instance_,
      Active_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Active, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Active, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Active));
  Actives_descriptor_ = file->message_type(5);
  static const int Actives_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actives, active_),
  };
  Actives_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Actives_descriptor_,
      Actives::default_instance_,
      Actives_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actives, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Actives, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Actives));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgActivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitTs_descriptor_, &LimitTs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DaliyAct_descriptor_, &DaliyAct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DaliyActs_descriptor_, &DaliyActs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reward_descriptor_, &Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Active_descriptor_, &Active::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Actives_descriptor_, &Actives::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgActivity_2eproto() {
  delete LimitTs::default_instance_;
  delete LimitTs_reflection_;
  delete DaliyAct::default_instance_;
  delete DaliyAct_reflection_;
  delete DaliyActs::default_instance_;
  delete DaliyActs_reflection_;
  delete Reward::default_instance_;
  delete Reward_reflection_;
  delete Active::default_instance_;
  delete Active_reflection_;
  delete Actives::default_instance_;
  delete Actives_reflection_;
}

void protobuf_AddDesc_CfgActivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021CfgActivity.proto\022\013CfgActivity\032\017CfgCom"
    "mon.proto\")\n\007LimitTs\022\017\n\007startTs\030\001 \002(\r\022\r\n"
    "\005endTs\030\002 \002(\r\"\217\001\n\010DaliyAct\022\020\n\010activity\030\001 "
    "\002(\r\022\017\n\007copyCfg\030\002 \002(\r\022\016\n\006copyId\030\003 \002(\r\022\r\n\005"
    "count\030\004 \002(\r\022\014\n\004type\030\005 \002(\r\022\r\n\005actId\030\006 \002(\r"
    "\022$\n\006limits\030\007 \003(\0132\024.CfgActivity.LimitTs\"5"
    "\n\tDaliyActs\022(\n\tdaliy_act\030\001 \003(\0132\025.CfgActi"
    "vity.DaliyAct\"#\n\006Reward\022\n\n\002id\030\001 \002(\r\022\r\n\005c"
    "ount\030\002 \002(\r\"H\n\006Active\022\r\n\005limit\030\001 \002(\r\022\014\n\004t"
    "ype\030\002 \002(\r\022!\n\006reward\030\003 \003(\0132\021.CfgCommon.Re"
    "ward\".\n\007Actives\022#\n\006active\030\001 \003(\0132\023.CfgAct"
    "ivity.Active", 452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgActivity.proto", &protobuf_RegisterTypes);
  LimitTs::default_instance_ = new LimitTs();
  DaliyAct::default_instance_ = new DaliyAct();
  DaliyActs::default_instance_ = new DaliyActs();
  Reward::default_instance_ = new Reward();
  Active::default_instance_ = new Active();
  Actives::default_instance_ = new Actives();
  LimitTs::default_instance_->InitAsDefaultInstance();
  DaliyAct::default_instance_->InitAsDefaultInstance();
  DaliyActs::default_instance_->InitAsDefaultInstance();
  Reward::default_instance_->InitAsDefaultInstance();
  Active::default_instance_->InitAsDefaultInstance();
  Actives::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgActivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgActivity_2eproto {
  StaticDescriptorInitializer_CfgActivity_2eproto() {
    protobuf_AddDesc_CfgActivity_2eproto();
  }
} static_descriptor_initializer_CfgActivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LimitTs::kStartTsFieldNumber;
const int LimitTs::kEndTsFieldNumber;
#endif  // !_MSC_VER

LimitTs::LimitTs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgActivity.LimitTs)
}

void LimitTs::InitAsDefaultInstance() {
}

LimitTs::LimitTs(const LimitTs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgActivity.LimitTs)
}

void LimitTs::SharedCtor() {
  _cached_size_ = 0;
  startts_ = 0u;
  endts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitTs::~LimitTs() {
  // @@protoc_insertion_point(destructor:CfgActivity.LimitTs)
  SharedDtor();
}

void LimitTs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitTs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitTs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitTs_descriptor_;
}

const LimitTs& LimitTs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgActivity_2eproto();
  return *default_instance_;
}

LimitTs* LimitTs::default_instance_ = NULL;

LimitTs* LimitTs::New() const {
  return new LimitTs;
}

void LimitTs::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LimitTs*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(startts_, endts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitTs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgActivity.LimitTs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startTs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startts_)));
          set_has_startts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endTs;
        break;
      }

      // required uint32 endTs = 2;
      case 2: {
        if (tag == 16) {
         parse_endTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endts_)));
          set_has_endts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgActivity.LimitTs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgActivity.LimitTs)
  return false;
#undef DO_
}

void LimitTs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgActivity.LimitTs)
  // required uint32 startTs = 1;
  if (has_startts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startts(), output);
  }

  // required uint32 endTs = 2;
  if (has_endts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgActivity.LimitTs)
}

::google::protobuf::uint8* LimitTs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgActivity.LimitTs)
  // required uint32 startTs = 1;
  if (has_startts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startts(), target);
  }

  // required uint32 endTs = 2;
  if (has_endts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->endts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgActivity.LimitTs)
  return target;
}

int LimitTs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 startTs = 1;
    if (has_startts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startts());
    }

    // required uint32 endTs = 2;
    if (has_endts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitTs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitTs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitTs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitTs::MergeFrom(const LimitTs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startts()) {
      set_startts(from.startts());
    }
    if (from.has_endts()) {
      set_endts(from.endts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitTs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitTs::CopyFrom(const LimitTs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitTs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LimitTs::Swap(LimitTs* other) {
  if (other != this) {
    std::swap(startts_, other->startts_);
    std::swap(endts_, other->endts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitTs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitTs_descriptor_;
  metadata.reflection = LimitTs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DaliyAct::kActivityFieldNumber;
const int DaliyAct::kCopyCfgFieldNumber;
const int DaliyAct::kCopyIdFieldNumber;
const int DaliyAct::kCountFieldNumber;
const int DaliyAct::kTypeFieldNumber;
const int DaliyAct::kActIdFieldNumber;
const int DaliyAct::kLimitsFieldNumber;
#endif  // !_MSC_VER

DaliyAct::DaliyAct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgActivity.DaliyAct)
}

void DaliyAct::InitAsDefaultInstance() {
}

DaliyAct::DaliyAct(const DaliyAct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgActivity.DaliyAct)
}

void DaliyAct::SharedCtor() {
  _cached_size_ = 0;
  activity_ = 0u;
  copycfg_ = 0u;
  copyid_ = 0u;
  count_ = 0u;
  type_ = 0u;
  actid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DaliyAct::~DaliyAct() {
  // @@protoc_insertion_point(destructor:CfgActivity.DaliyAct)
  SharedDtor();
}

void DaliyAct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DaliyAct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DaliyAct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DaliyAct_descriptor_;
}

const DaliyAct& DaliyAct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgActivity_2eproto();
  return *default_instance_;
}

DaliyAct* DaliyAct::default_instance_ = NULL;

DaliyAct* DaliyAct::New() const {
  return new DaliyAct;
}

void DaliyAct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DaliyAct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(activity_, actid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  limits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DaliyAct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgActivity.DaliyAct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 activity = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_)));
          set_has_activity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_copyCfg;
        break;
      }

      // required uint32 copyCfg = 2;
      case 2: {
        if (tag == 16) {
         parse_copyCfg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copycfg_)));
          set_has_copycfg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_copyId;
        break;
      }

      // required uint32 copyId = 3;
      case 3: {
        if (tag == 24) {
         parse_copyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copyid_)));
          set_has_copyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required uint32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required uint32 type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_actId;
        break;
      }

      // required uint32 actId = 6;
      case 6: {
        if (tag == 48) {
         parse_actId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_limits;
        break;
      }

      // repeated .CfgActivity.LimitTs limits = 7;
      case 7: {
        if (tag == 58) {
         parse_limits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_limits;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgActivity.DaliyAct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgActivity.DaliyAct)
  return false;
#undef DO_
}

void DaliyAct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgActivity.DaliyAct)
  // required uint32 activity = 1;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activity(), output);
  }

  // required uint32 copyCfg = 2;
  if (has_copycfg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copycfg(), output);
  }

  // required uint32 copyId = 3;
  if (has_copyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->copyid(), output);
  }

  // required uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // required uint32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // required uint32 actId = 6;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->actid(), output);
  }

  // repeated .CfgActivity.LimitTs limits = 7;
  for (int i = 0; i < this->limits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->limits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgActivity.DaliyAct)
}

::google::protobuf::uint8* DaliyAct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgActivity.DaliyAct)
  // required uint32 activity = 1;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activity(), target);
  }

  // required uint32 copyCfg = 2;
  if (has_copycfg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copycfg(), target);
  }

  // required uint32 copyId = 3;
  if (has_copyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->copyid(), target);
  }

  // required uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // required uint32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // required uint32 actId = 6;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->actid(), target);
  }

  // repeated .CfgActivity.LimitTs limits = 7;
  for (int i = 0; i < this->limits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->limits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgActivity.DaliyAct)
  return target;
}

int DaliyAct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 activity = 1;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity());
    }

    // required uint32 copyCfg = 2;
    if (has_copycfg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copycfg());
    }

    // required uint32 copyId = 3;
    if (has_copyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copyid());
    }

    // required uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 actId = 6;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

  }
  // repeated .CfgActivity.LimitTs limits = 7;
  total_size += 1 * this->limits_size();
  for (int i = 0; i < this->limits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DaliyAct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DaliyAct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DaliyAct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DaliyAct::MergeFrom(const DaliyAct& from) {
  GOOGLE_CHECK_NE(&from, this);
  limits_.MergeFrom(from.limits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_copycfg()) {
      set_copycfg(from.copycfg());
    }
    if (from.has_copyid()) {
      set_copyid(from.copyid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_actid()) {
      set_actid(from.actid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DaliyAct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaliyAct::CopyFrom(const DaliyAct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaliyAct::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->limits())) return false;
  return true;
}

void DaliyAct::Swap(DaliyAct* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(copycfg_, other->copycfg_);
    std::swap(copyid_, other->copyid_);
    std::swap(count_, other->count_);
    std::swap(type_, other->type_);
    std::swap(actid_, other->actid_);
    limits_.Swap(&other->limits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DaliyAct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DaliyAct_descriptor_;
  metadata.reflection = DaliyAct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DaliyActs::kDaliyActFieldNumber;
#endif  // !_MSC_VER

DaliyActs::DaliyActs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgActivity.DaliyActs)
}

void DaliyActs::InitAsDefaultInstance() {
}

DaliyActs::DaliyActs(const DaliyActs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgActivity.DaliyActs)
}

void DaliyActs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DaliyActs::~DaliyActs() {
  // @@protoc_insertion_point(destructor:CfgActivity.DaliyActs)
  SharedDtor();
}

void DaliyActs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DaliyActs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DaliyActs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DaliyActs_descriptor_;
}

const DaliyActs& DaliyActs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgActivity_2eproto();
  return *default_instance_;
}

DaliyActs* DaliyActs::default_instance_ = NULL;

DaliyActs* DaliyActs::New() const {
  return new DaliyActs;
}

void DaliyActs::Clear() {
  daliy_act_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DaliyActs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgActivity.DaliyActs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgActivity.DaliyAct daliy_act = 1;
      case 1: {
        if (tag == 10) {
         parse_daliy_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daliy_act()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_daliy_act;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgActivity.DaliyActs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgActivity.DaliyActs)
  return false;
#undef DO_
}

void DaliyActs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgActivity.DaliyActs)
  // repeated .CfgActivity.DaliyAct daliy_act = 1;
  for (int i = 0; i < this->daliy_act_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daliy_act(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgActivity.DaliyActs)
}

::google::protobuf::uint8* DaliyActs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgActivity.DaliyActs)
  // repeated .CfgActivity.DaliyAct daliy_act = 1;
  for (int i = 0; i < this->daliy_act_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daliy_act(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgActivity.DaliyActs)
  return target;
}

int DaliyActs::ByteSize() const {
  int total_size = 0;

  // repeated .CfgActivity.DaliyAct daliy_act = 1;
  total_size += 1 * this->daliy_act_size();
  for (int i = 0; i < this->daliy_act_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daliy_act(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DaliyActs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DaliyActs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DaliyActs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DaliyActs::MergeFrom(const DaliyActs& from) {
  GOOGLE_CHECK_NE(&from, this);
  daliy_act_.MergeFrom(from.daliy_act_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DaliyActs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DaliyActs::CopyFrom(const DaliyActs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DaliyActs::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->daliy_act())) return false;
  return true;
}

void DaliyActs::Swap(DaliyActs* other) {
  if (other != this) {
    daliy_act_.Swap(&other->daliy_act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DaliyActs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DaliyActs_descriptor_;
  metadata.reflection = DaliyActs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reward::kIdFieldNumber;
const int Reward::kCountFieldNumber;
#endif  // !_MSC_VER

Reward::Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgActivity.Reward)
}

void Reward::InitAsDefaultInstance() {
}

Reward::Reward(const Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgActivity.Reward)
}

void Reward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reward::~Reward() {
  // @@protoc_insertion_point(destructor:CfgActivity.Reward)
  SharedDtor();
}

void Reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reward_descriptor_;
}

const Reward& Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgActivity_2eproto();
  return *default_instance_;
}

Reward* Reward::default_instance_ = NULL;

Reward* Reward::New() const {
  return new Reward;
}

void Reward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Reward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgActivity.Reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgActivity.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgActivity.Reward)
  return false;
#undef DO_
}

void Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgActivity.Reward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgActivity.Reward)
}

::google::protobuf::uint8* Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgActivity.Reward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgActivity.Reward)
  return target;
}

int Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reward::MergeFrom(const Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reward::CopyFrom(const Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Reward::Swap(Reward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reward_descriptor_;
  metadata.reflection = Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Active::kLimitFieldNumber;
const int Active::kTypeFieldNumber;
const int Active::kRewardFieldNumber;
#endif  // !_MSC_VER

Active::Active()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgActivity.Active)
}

void Active::InitAsDefaultInstance() {
}

Active::Active(const Active& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgActivity.Active)
}

void Active::SharedCtor() {
  _cached_size_ = 0;
  limit_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Active::~Active() {
  // @@protoc_insertion_point(destructor:CfgActivity.Active)
  SharedDtor();
}

void Active::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Active::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Active::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Active_descriptor_;
}

const Active& Active::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgActivity_2eproto();
  return *default_instance_;
}

Active* Active::default_instance_ = NULL;

Active* Active::New() const {
  return new Active;
}

void Active::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Active*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(limit_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Active::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgActivity.Active)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 limit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .CfgCommon.Reward reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgActivity.Active)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgActivity.Active)
  return false;
#undef DO_
}

void Active::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgActivity.Active)
  // required uint32 limit = 1;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->limit(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // repeated .CfgCommon.Reward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgActivity.Active)
}

::google::protobuf::uint8* Active::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgActivity.Active)
  // required uint32 limit = 1;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->limit(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // repeated .CfgCommon.Reward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgActivity.Active)
  return target;
}

int Active::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 limit = 1;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .CfgCommon.Reward reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Active::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Active* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Active*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Active::MergeFrom(const Active& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Active::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Active::CopyFrom(const Active& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Active::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void Active::Swap(Active* other) {
  if (other != this) {
    std::swap(limit_, other->limit_);
    std::swap(type_, other->type_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Active::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Active_descriptor_;
  metadata.reflection = Active_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Actives::kActiveFieldNumber;
#endif  // !_MSC_VER

Actives::Actives()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgActivity.Actives)
}

void Actives::InitAsDefaultInstance() {
}

Actives::Actives(const Actives& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgActivity.Actives)
}

void Actives::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Actives::~Actives() {
  // @@protoc_insertion_point(destructor:CfgActivity.Actives)
  SharedDtor();
}

void Actives::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Actives::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Actives::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Actives_descriptor_;
}

const Actives& Actives::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgActivity_2eproto();
  return *default_instance_;
}

Actives* Actives::default_instance_ = NULL;

Actives* Actives::New() const {
  return new Actives;
}

void Actives::Clear() {
  active_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Actives::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgActivity.Actives)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgActivity.Active active = 1;
      case 1: {
        if (tag == 10) {
         parse_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_active;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgActivity.Actives)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgActivity.Actives)
  return false;
#undef DO_
}

void Actives::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgActivity.Actives)
  // repeated .CfgActivity.Active active = 1;
  for (int i = 0; i < this->active_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->active(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgActivity.Actives)
}

::google::protobuf::uint8* Actives::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgActivity.Actives)
  // repeated .CfgActivity.Active active = 1;
  for (int i = 0; i < this->active_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->active(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgActivity.Actives)
  return target;
}

int Actives::ByteSize() const {
  int total_size = 0;

  // repeated .CfgActivity.Active active = 1;
  total_size += 1 * this->active_size();
  for (int i = 0; i < this->active_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Actives::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Actives* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Actives*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Actives::MergeFrom(const Actives& from) {
  GOOGLE_CHECK_NE(&from, this);
  active_.MergeFrom(from.active_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Actives::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actives::CopyFrom(const Actives& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actives::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->active())) return false;
  return true;
}

void Actives::Swap(Actives* other) {
  if (other != this) {
    active_.Swap(&other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Actives::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Actives_descriptor_;
  metadata.reflection = Actives_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgActivity

// @@protoc_insertion_point(global_scope)
