// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CfgOnlineReward.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CfgOnlineReward.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CfgOnlineReward {

namespace {

const ::google::protobuf::Descriptor* OnlineReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineRewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineRewards_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CfgOnlineReward_2eproto() {
  protobuf_AddDesc_CfgOnlineReward_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CfgOnlineReward.proto");
  GOOGLE_CHECK(file != NULL);
  OnlineReward_descriptor_ = file->message_type(0);
  static const int OnlineReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineReward, registeredday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineReward, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineReward, reward_),
  };
  OnlineReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineReward_descriptor_,
      OnlineReward::default_instance_,
      OnlineReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineReward));
  OnlineRewards_descriptor_ = file->message_type(1);
  static const int OnlineRewards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewards, onlinerewards_),
  };
  OnlineRewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineRewards_descriptor_,
      OnlineRewards::default_instance_,
      OnlineRewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineRewards));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CfgOnlineReward_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineReward_descriptor_, &OnlineReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineRewards_descriptor_, &OnlineRewards::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CfgOnlineReward_2eproto() {
  delete OnlineReward::default_instance_;
  delete OnlineReward_reflection_;
  delete OnlineRewards::default_instance_;
  delete OnlineRewards_reflection_;
}

void protobuf_AddDesc_CfgOnlineReward_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CfgCommon::protobuf_AddDesc_CfgCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025CfgOnlineReward.proto\022\017CfgOnlineReward"
    "\032\017CfgCommon.proto\"h\n\014OnlineReward\022\n\n\002id\030"
    "\001 \002(\r\022\025\n\rregisteredDay\030\002 \002(\r\022\022\n\nonlineTi"
    "me\030\003 \002(\r\022!\n\006reward\030\004 \003(\0132\021.CfgCommon.Rew"
    "ard\"E\n\rOnlineRewards\0224\n\ronlineRewards\030\001 "
    "\003(\0132\035.CfgOnlineReward.OnlineReward", 234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CfgOnlineReward.proto", &protobuf_RegisterTypes);
  OnlineReward::default_instance_ = new OnlineReward();
  OnlineRewards::default_instance_ = new OnlineRewards();
  OnlineReward::default_instance_->InitAsDefaultInstance();
  OnlineRewards::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CfgOnlineReward_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CfgOnlineReward_2eproto {
  StaticDescriptorInitializer_CfgOnlineReward_2eproto() {
    protobuf_AddDesc_CfgOnlineReward_2eproto();
  }
} static_descriptor_initializer_CfgOnlineReward_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OnlineReward::kIdFieldNumber;
const int OnlineReward::kRegisteredDayFieldNumber;
const int OnlineReward::kOnlineTimeFieldNumber;
const int OnlineReward::kRewardFieldNumber;
#endif  // !_MSC_VER

OnlineReward::OnlineReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgOnlineReward.OnlineReward)
}

void OnlineReward::InitAsDefaultInstance() {
}

OnlineReward::OnlineReward(const OnlineReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgOnlineReward.OnlineReward)
}

void OnlineReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  registeredday_ = 0u;
  onlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineReward::~OnlineReward() {
  // @@protoc_insertion_point(destructor:CfgOnlineReward.OnlineReward)
  SharedDtor();
}

void OnlineReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineReward_descriptor_;
}

const OnlineReward& OnlineReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgOnlineReward_2eproto();
  return *default_instance_;
}

OnlineReward* OnlineReward::default_instance_ = NULL;

OnlineReward* OnlineReward::New() const {
  return new OnlineReward;
}

void OnlineReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OnlineReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, registeredday_);
    onlinetime_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgOnlineReward.OnlineReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_registeredDay;
        break;
      }

      // required uint32 registeredDay = 2;
      case 2: {
        if (tag == 16) {
         parse_registeredDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registeredday_)));
          set_has_registeredday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_onlineTime;
        break;
      }

      // required uint32 onlineTime = 3;
      case 3: {
        if (tag == 24) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // repeated .CfgCommon.Reward reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgOnlineReward.OnlineReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgOnlineReward.OnlineReward)
  return false;
#undef DO_
}

void OnlineReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgOnlineReward.OnlineReward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 registeredDay = 2;
  if (has_registeredday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->registeredday(), output);
  }

  // required uint32 onlineTime = 3;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->onlinetime(), output);
  }

  // repeated .CfgCommon.Reward reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgOnlineReward.OnlineReward)
}

::google::protobuf::uint8* OnlineReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgOnlineReward.OnlineReward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 registeredDay = 2;
  if (has_registeredday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->registeredday(), target);
  }

  // required uint32 onlineTime = 3;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->onlinetime(), target);
  }

  // repeated .CfgCommon.Reward reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgOnlineReward.OnlineReward)
  return target;
}

int OnlineReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 registeredDay = 2;
    if (has_registeredday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registeredday());
    }

    // required uint32 onlineTime = 3;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

  }
  // repeated .CfgCommon.Reward reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineReward::MergeFrom(const OnlineReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_registeredday()) {
      set_registeredday(from.registeredday());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineReward::CopyFrom(const OnlineReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void OnlineReward::Swap(OnlineReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(registeredday_, other->registeredday_);
    std::swap(onlinetime_, other->onlinetime_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineReward_descriptor_;
  metadata.reflection = OnlineReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineRewards::kOnlineRewardsFieldNumber;
#endif  // !_MSC_VER

OnlineRewards::OnlineRewards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CfgOnlineReward.OnlineRewards)
}

void OnlineRewards::InitAsDefaultInstance() {
}

OnlineRewards::OnlineRewards(const OnlineRewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CfgOnlineReward.OnlineRewards)
}

void OnlineRewards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineRewards::~OnlineRewards() {
  // @@protoc_insertion_point(destructor:CfgOnlineReward.OnlineRewards)
  SharedDtor();
}

void OnlineRewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineRewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineRewards_descriptor_;
}

const OnlineRewards& OnlineRewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CfgOnlineReward_2eproto();
  return *default_instance_;
}

OnlineRewards* OnlineRewards::default_instance_ = NULL;

OnlineRewards* OnlineRewards::New() const {
  return new OnlineRewards;
}

void OnlineRewards::Clear() {
  onlinerewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CfgOnlineReward.OnlineRewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CfgOnlineReward.OnlineReward onlineRewards = 1;
      case 1: {
        if (tag == 10) {
         parse_onlineRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onlinerewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_onlineRewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CfgOnlineReward.OnlineRewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CfgOnlineReward.OnlineRewards)
  return false;
#undef DO_
}

void OnlineRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CfgOnlineReward.OnlineRewards)
  // repeated .CfgOnlineReward.OnlineReward onlineRewards = 1;
  for (int i = 0; i < this->onlinerewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->onlinerewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CfgOnlineReward.OnlineRewards)
}

::google::protobuf::uint8* OnlineRewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CfgOnlineReward.OnlineRewards)
  // repeated .CfgOnlineReward.OnlineReward onlineRewards = 1;
  for (int i = 0; i < this->onlinerewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->onlinerewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CfgOnlineReward.OnlineRewards)
  return target;
}

int OnlineRewards::ByteSize() const {
  int total_size = 0;

  // repeated .CfgOnlineReward.OnlineReward onlineRewards = 1;
  total_size += 1 * this->onlinerewards_size();
  for (int i = 0; i < this->onlinerewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->onlinerewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineRewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineRewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineRewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineRewards::MergeFrom(const OnlineRewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  onlinerewards_.MergeFrom(from.onlinerewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineRewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineRewards::CopyFrom(const OnlineRewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineRewards::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->onlinerewards())) return false;
  return true;
}

void OnlineRewards::Swap(OnlineRewards* other) {
  if (other != this) {
    onlinerewards_.Swap(&other->onlinerewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineRewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineRewards_descriptor_;
  metadata.reflection = OnlineRewards_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CfgOnlineReward

// @@protoc_insertion_point(global_scope)
