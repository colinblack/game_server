// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllianceTorch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AllianceTorch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AllianceTorch {

namespace {

const ::google::protobuf::Descriptor* CurrTorchStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrTorchStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogBuyRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogBuyRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleAllianceTorch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleAllianceTorch_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceTorch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceTorch_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AllianceTorch_2eproto() {
  protobuf_AddDesc_AllianceTorch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AllianceTorch.proto");
  GOOGLE_CHECK(file != NULL);
  CurrTorchStatus_descriptor_ = file->message_type(0);
  static const int CurrTorchStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrTorchStatus, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrTorchStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrTorchStatus, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrTorchStatus, ts_),
  };
  CurrTorchStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrTorchStatus_descriptor_,
      CurrTorchStatus::default_instance_,
      CurrTorchStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrTorchStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrTorchStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrTorchStatus));
  LogBuyRecord_descriptor_ = file->message_type(1);
  static const int LogBuyRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuyRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuyRecord, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuyRecord, tid_),
  };
  LogBuyRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogBuyRecord_descriptor_,
      LogBuyRecord::default_instance_,
      LogBuyRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuyRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogBuyRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogBuyRecord));
  SingleAllianceTorch_descriptor_ = file->message_type(2);
  static const int SingleAllianceTorch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAllianceTorch, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAllianceTorch, curr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAllianceTorch, log_),
  };
  SingleAllianceTorch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleAllianceTorch_descriptor_,
      SingleAllianceTorch::default_instance_,
      SingleAllianceTorch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAllianceTorch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAllianceTorch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleAllianceTorch));
  AllianceTorch_descriptor_ = file->message_type(3);
  static const int AllianceTorch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTorch, alliance_),
  };
  AllianceTorch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceTorch_descriptor_,
      AllianceTorch::default_instance_,
      AllianceTorch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTorch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceTorch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceTorch));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AllianceTorch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrTorchStatus_descriptor_, &CurrTorchStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogBuyRecord_descriptor_, &LogBuyRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleAllianceTorch_descriptor_, &SingleAllianceTorch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceTorch_descriptor_, &AllianceTorch::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AllianceTorch_2eproto() {
  delete CurrTorchStatus::default_instance_;
  delete CurrTorchStatus_reflection_;
  delete LogBuyRecord::default_instance_;
  delete LogBuyRecord_reflection_;
  delete SingleAllianceTorch::default_instance_;
  delete SingleAllianceTorch_reflection_;
  delete AllianceTorch::default_instance_;
  delete AllianceTorch_reflection_;
}

void protobuf_AddDesc_AllianceTorch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023AllianceTorch.proto\022\rAllianceTorch\"G\n\017"
    "CurrTorchStatus\022\013\n\003tid\030\001 \002(\r\022\016\n\006status\030\002"
    " \002(\r\022\013\n\003uid\030\003 \002(\r\022\n\n\002ts\030\004 \002(\r\"6\n\014LogBuyR"
    "ecord\022\014\n\004time\030\001 \002(\r\022\013\n\003uid\030\002 \002(\r\022\013\n\003tid\030"
    "\003 \002(\r\"z\n\023SingleAllianceTorch\022\013\n\003aid\030\001 \002("
    "\r\022,\n\004curr\030\002 \003(\0132\036.AllianceTorch.CurrTorc"
    "hStatus\022(\n\003log\030\003 \003(\0132\033.AllianceTorch.Log"
    "BuyRecord\"E\n\rAllianceTorch\0224\n\010alliance\030\001"
    " \003(\0132\".AllianceTorch.SingleAllianceTorch", 360);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AllianceTorch.proto", &protobuf_RegisterTypes);
  CurrTorchStatus::default_instance_ = new CurrTorchStatus();
  LogBuyRecord::default_instance_ = new LogBuyRecord();
  SingleAllianceTorch::default_instance_ = new SingleAllianceTorch();
  AllianceTorch::default_instance_ = new AllianceTorch();
  CurrTorchStatus::default_instance_->InitAsDefaultInstance();
  LogBuyRecord::default_instance_->InitAsDefaultInstance();
  SingleAllianceTorch::default_instance_->InitAsDefaultInstance();
  AllianceTorch::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AllianceTorch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AllianceTorch_2eproto {
  StaticDescriptorInitializer_AllianceTorch_2eproto() {
    protobuf_AddDesc_AllianceTorch_2eproto();
  }
} static_descriptor_initializer_AllianceTorch_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CurrTorchStatus::kTidFieldNumber;
const int CurrTorchStatus::kStatusFieldNumber;
const int CurrTorchStatus::kUidFieldNumber;
const int CurrTorchStatus::kTsFieldNumber;
#endif  // !_MSC_VER

CurrTorchStatus::CurrTorchStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllianceTorch.CurrTorchStatus)
}

void CurrTorchStatus::InitAsDefaultInstance() {
}

CurrTorchStatus::CurrTorchStatus(const CurrTorchStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllianceTorch.CurrTorchStatus)
}

void CurrTorchStatus::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  status_ = 0u;
  uid_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrTorchStatus::~CurrTorchStatus() {
  // @@protoc_insertion_point(destructor:AllianceTorch.CurrTorchStatus)
  SharedDtor();
}

void CurrTorchStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrTorchStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrTorchStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrTorchStatus_descriptor_;
}

const CurrTorchStatus& CurrTorchStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllianceTorch_2eproto();
  return *default_instance_;
}

CurrTorchStatus* CurrTorchStatus::default_instance_ = NULL;

CurrTorchStatus* CurrTorchStatus::New() const {
  return new CurrTorchStatus;
}

void CurrTorchStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CurrTorchStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tid_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrTorchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllianceTorch.CurrTorchStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ts;
        break;
      }

      // required uint32 ts = 4;
      case 4: {
        if (tag == 32) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllianceTorch.CurrTorchStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllianceTorch.CurrTorchStatus)
  return false;
#undef DO_
}

void CurrTorchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllianceTorch.CurrTorchStatus)
  // required uint32 tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required uint32 ts = 4;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllianceTorch.CurrTorchStatus)
}

::google::protobuf::uint8* CurrTorchStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllianceTorch.CurrTorchStatus)
  // required uint32 tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required uint32 ts = 4;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllianceTorch.CurrTorchStatus)
  return target;
}

int CurrTorchStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 ts = 4;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrTorchStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrTorchStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrTorchStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrTorchStatus::MergeFrom(const CurrTorchStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrTorchStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrTorchStatus::CopyFrom(const CurrTorchStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrTorchStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CurrTorchStatus::Swap(CurrTorchStatus* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(status_, other->status_);
    std::swap(uid_, other->uid_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrTorchStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrTorchStatus_descriptor_;
  metadata.reflection = CurrTorchStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogBuyRecord::kTimeFieldNumber;
const int LogBuyRecord::kUidFieldNumber;
const int LogBuyRecord::kTidFieldNumber;
#endif  // !_MSC_VER

LogBuyRecord::LogBuyRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllianceTorch.LogBuyRecord)
}

void LogBuyRecord::InitAsDefaultInstance() {
}

LogBuyRecord::LogBuyRecord(const LogBuyRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllianceTorch.LogBuyRecord)
}

void LogBuyRecord::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  uid_ = 0u;
  tid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogBuyRecord::~LogBuyRecord() {
  // @@protoc_insertion_point(destructor:AllianceTorch.LogBuyRecord)
  SharedDtor();
}

void LogBuyRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogBuyRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogBuyRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogBuyRecord_descriptor_;
}

const LogBuyRecord& LogBuyRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllianceTorch_2eproto();
  return *default_instance_;
}

LogBuyRecord* LogBuyRecord::default_instance_ = NULL;

LogBuyRecord* LogBuyRecord::New() const {
  return new LogBuyRecord;
}

void LogBuyRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogBuyRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, tid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogBuyRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllianceTorch.LogBuyRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tid;
        break;
      }

      // required uint32 tid = 3;
      case 3: {
        if (tag == 24) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllianceTorch.LogBuyRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllianceTorch.LogBuyRecord)
  return false;
#undef DO_
}

void LogBuyRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllianceTorch.LogBuyRecord)
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllianceTorch.LogBuyRecord)
}

::google::protobuf::uint8* LogBuyRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllianceTorch.LogBuyRecord)
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 tid = 3;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllianceTorch.LogBuyRecord)
  return target;
}

int LogBuyRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogBuyRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogBuyRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogBuyRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogBuyRecord::MergeFrom(const LogBuyRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogBuyRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogBuyRecord::CopyFrom(const LogBuyRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogBuyRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LogBuyRecord::Swap(LogBuyRecord* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(uid_, other->uid_);
    std::swap(tid_, other->tid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogBuyRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogBuyRecord_descriptor_;
  metadata.reflection = LogBuyRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleAllianceTorch::kAidFieldNumber;
const int SingleAllianceTorch::kCurrFieldNumber;
const int SingleAllianceTorch::kLogFieldNumber;
#endif  // !_MSC_VER

SingleAllianceTorch::SingleAllianceTorch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllianceTorch.SingleAllianceTorch)
}

void SingleAllianceTorch::InitAsDefaultInstance() {
}

SingleAllianceTorch::SingleAllianceTorch(const SingleAllianceTorch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllianceTorch.SingleAllianceTorch)
}

void SingleAllianceTorch::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleAllianceTorch::~SingleAllianceTorch() {
  // @@protoc_insertion_point(destructor:AllianceTorch.SingleAllianceTorch)
  SharedDtor();
}

void SingleAllianceTorch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleAllianceTorch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleAllianceTorch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleAllianceTorch_descriptor_;
}

const SingleAllianceTorch& SingleAllianceTorch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllianceTorch_2eproto();
  return *default_instance_;
}

SingleAllianceTorch* SingleAllianceTorch::default_instance_ = NULL;

SingleAllianceTorch* SingleAllianceTorch::New() const {
  return new SingleAllianceTorch;
}

void SingleAllianceTorch::Clear() {
  aid_ = 0u;
  curr_.Clear();
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleAllianceTorch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllianceTorch.SingleAllianceTorch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_curr;
        break;
      }

      // repeated .AllianceTorch.CurrTorchStatus curr = 2;
      case 2: {
        if (tag == 18) {
         parse_curr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_curr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_curr;
        if (input->ExpectTag(26)) goto parse_log;
        break;
      }

      // repeated .AllianceTorch.LogBuyRecord log = 3;
      case 3: {
        if (tag == 26) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_log;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllianceTorch.SingleAllianceTorch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllianceTorch.SingleAllianceTorch)
  return false;
#undef DO_
}

void SingleAllianceTorch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllianceTorch.SingleAllianceTorch)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // repeated .AllianceTorch.CurrTorchStatus curr = 2;
  for (int i = 0; i < this->curr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->curr(i), output);
  }

  // repeated .AllianceTorch.LogBuyRecord log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllianceTorch.SingleAllianceTorch)
}

::google::protobuf::uint8* SingleAllianceTorch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllianceTorch.SingleAllianceTorch)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // repeated .AllianceTorch.CurrTorchStatus curr = 2;
  for (int i = 0; i < this->curr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->curr(i), target);
  }

  // repeated .AllianceTorch.LogBuyRecord log = 3;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllianceTorch.SingleAllianceTorch)
  return target;
}

int SingleAllianceTorch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

  }
  // repeated .AllianceTorch.CurrTorchStatus curr = 2;
  total_size += 1 * this->curr_size();
  for (int i = 0; i < this->curr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->curr(i));
  }

  // repeated .AllianceTorch.LogBuyRecord log = 3;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleAllianceTorch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleAllianceTorch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleAllianceTorch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleAllianceTorch::MergeFrom(const SingleAllianceTorch& from) {
  GOOGLE_CHECK_NE(&from, this);
  curr_.MergeFrom(from.curr_);
  log_.MergeFrom(from.log_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleAllianceTorch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAllianceTorch::CopyFrom(const SingleAllianceTorch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAllianceTorch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->curr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->log())) return false;
  return true;
}

void SingleAllianceTorch::Swap(SingleAllianceTorch* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    curr_.Swap(&other->curr_);
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleAllianceTorch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleAllianceTorch_descriptor_;
  metadata.reflection = SingleAllianceTorch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceTorch::kAllianceFieldNumber;
#endif  // !_MSC_VER

AllianceTorch::AllianceTorch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllianceTorch.AllianceTorch)
}

void AllianceTorch::InitAsDefaultInstance() {
}

AllianceTorch::AllianceTorch(const AllianceTorch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllianceTorch.AllianceTorch)
}

void AllianceTorch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceTorch::~AllianceTorch() {
  // @@protoc_insertion_point(destructor:AllianceTorch.AllianceTorch)
  SharedDtor();
}

void AllianceTorch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceTorch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceTorch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceTorch_descriptor_;
}

const AllianceTorch& AllianceTorch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllianceTorch_2eproto();
  return *default_instance_;
}

AllianceTorch* AllianceTorch::default_instance_ = NULL;

AllianceTorch* AllianceTorch::New() const {
  return new AllianceTorch;
}

void AllianceTorch::Clear() {
  alliance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceTorch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllianceTorch.AllianceTorch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AllianceTorch.SingleAllianceTorch alliance = 1;
      case 1: {
        if (tag == 10) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_alliance;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllianceTorch.AllianceTorch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllianceTorch.AllianceTorch)
  return false;
#undef DO_
}

void AllianceTorch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllianceTorch.AllianceTorch)
  // repeated .AllianceTorch.SingleAllianceTorch alliance = 1;
  for (int i = 0; i < this->alliance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllianceTorch.AllianceTorch)
}

::google::protobuf::uint8* AllianceTorch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllianceTorch.AllianceTorch)
  // repeated .AllianceTorch.SingleAllianceTorch alliance = 1;
  for (int i = 0; i < this->alliance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllianceTorch.AllianceTorch)
  return target;
}

int AllianceTorch::ByteSize() const {
  int total_size = 0;

  // repeated .AllianceTorch.SingleAllianceTorch alliance = 1;
  total_size += 1 * this->alliance_size();
  for (int i = 0; i < this->alliance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alliance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceTorch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceTorch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceTorch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceTorch::MergeFrom(const AllianceTorch& from) {
  GOOGLE_CHECK_NE(&from, this);
  alliance_.MergeFrom(from.alliance_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceTorch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceTorch::CopyFrom(const AllianceTorch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceTorch::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->alliance())) return false;
  return true;
}

void AllianceTorch::Swap(AllianceTorch* other) {
  if (other != this) {
    alliance_.Swap(&other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceTorch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceTorch_descriptor_;
  metadata.reflection = AllianceTorch_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AllianceTorch

// @@protoc_insertion_point(global_scope)
