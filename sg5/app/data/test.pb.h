// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class tm;
class test;

// ===================================================================

class tm : public ::google::protobuf::Message {
 public:
  tm();
  virtual ~tm();

  tm(const tm& from);

  inline tm& operator=(const tm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tm& default_instance();

  void Swap(tm* other);

  // implements Message ----------------------------------------------

  tm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tm& from);
  void MergeFrom(const tm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tm1 = 1;
  inline bool has_tm1() const;
  inline void clear_tm1();
  static const int kTm1FieldNumber = 1;
  inline ::google::protobuf::int32 tm1() const;
  inline void set_tm1(::google::protobuf::int32 value);

  // required uint32 tm2 = 2;
  inline bool has_tm2() const;
  inline void clear_tm2();
  static const int kTm2FieldNumber = 2;
  inline ::google::protobuf::uint32 tm2() const;
  inline void set_tm2(::google::protobuf::uint32 value);

  // required int64 tm3 = 3;
  inline bool has_tm3() const;
  inline void clear_tm3();
  static const int kTm3FieldNumber = 3;
  inline ::google::protobuf::int64 tm3() const;
  inline void set_tm3(::google::protobuf::int64 value);

  // required uint64 tm4 = 4;
  inline bool has_tm4() const;
  inline void clear_tm4();
  static const int kTm4FieldNumber = 4;
  inline ::google::protobuf::uint64 tm4() const;
  inline void set_tm4(::google::protobuf::uint64 value);

  // required float tm5 = 5;
  inline bool has_tm5() const;
  inline void clear_tm5();
  static const int kTm5FieldNumber = 5;
  inline float tm5() const;
  inline void set_tm5(float value);

  // required double tm6 = 6;
  inline bool has_tm6() const;
  inline void clear_tm6();
  static const int kTm6FieldNumber = 6;
  inline double tm6() const;
  inline void set_tm6(double value);

  // required string tm7 = 7;
  inline bool has_tm7() const;
  inline void clear_tm7();
  static const int kTm7FieldNumber = 7;
  inline const ::std::string& tm7() const;
  inline void set_tm7(const ::std::string& value);
  inline void set_tm7(const char* value);
  inline void set_tm7(const char* value, size_t size);
  inline ::std::string* mutable_tm7();
  inline ::std::string* release_tm7();
  inline void set_allocated_tm7(::std::string* tm7);

  // required bool tm8 = 8;
  inline bool has_tm8() const;
  inline void clear_tm8();
  static const int kTm8FieldNumber = 8;
  inline bool tm8() const;
  inline void set_tm8(bool value);

  // @@protoc_insertion_point(class_scope:test.tm)
 private:
  inline void set_has_tm1();
  inline void clear_has_tm1();
  inline void set_has_tm2();
  inline void clear_has_tm2();
  inline void set_has_tm3();
  inline void clear_has_tm3();
  inline void set_has_tm4();
  inline void clear_has_tm4();
  inline void set_has_tm5();
  inline void clear_has_tm5();
  inline void set_has_tm6();
  inline void clear_has_tm6();
  inline void set_has_tm7();
  inline void clear_has_tm7();
  inline void set_has_tm8();
  inline void clear_has_tm8();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tm1_;
  ::google::protobuf::uint32 tm2_;
  ::google::protobuf::int64 tm3_;
  ::google::protobuf::uint64 tm4_;
  double tm6_;
  float tm5_;
  bool tm8_;
  ::std::string* tm7_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static tm* default_instance_;
};
// -------------------------------------------------------------------

class test : public ::google::protobuf::Message {
 public:
  test();
  virtual ~test();

  test(const test& from);

  inline test& operator=(const test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const test& default_instance();

  void Swap(test* other);

  // implements Message ----------------------------------------------

  test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const test& from);
  void MergeFrom(const test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 test1 = 1;
  inline int test1_size() const;
  inline void clear_test1();
  static const int kTest1FieldNumber = 1;
  inline ::google::protobuf::int32 test1(int index) const;
  inline void set_test1(int index, ::google::protobuf::int32 value);
  inline void add_test1(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      test1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_test1();

  // repeated uint32 test2 = 2;
  inline int test2_size() const;
  inline void clear_test2();
  static const int kTest2FieldNumber = 2;
  inline ::google::protobuf::uint32 test2(int index) const;
  inline void set_test2(int index, ::google::protobuf::uint32 value);
  inline void add_test2(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      test2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_test2();

  // repeated int64 test3 = 3;
  inline int test3_size() const;
  inline void clear_test3();
  static const int kTest3FieldNumber = 3;
  inline ::google::protobuf::int64 test3(int index) const;
  inline void set_test3(int index, ::google::protobuf::int64 value);
  inline void add_test3(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      test3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_test3();

  // repeated uint64 test4 = 4;
  inline int test4_size() const;
  inline void clear_test4();
  static const int kTest4FieldNumber = 4;
  inline ::google::protobuf::uint64 test4(int index) const;
  inline void set_test4(int index, ::google::protobuf::uint64 value);
  inline void add_test4(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      test4() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_test4();

  // repeated float test5 = 5;
  inline int test5_size() const;
  inline void clear_test5();
  static const int kTest5FieldNumber = 5;
  inline float test5(int index) const;
  inline void set_test5(int index, float value);
  inline void add_test5(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      test5() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_test5();

  // repeated double test6 = 6;
  inline int test6_size() const;
  inline void clear_test6();
  static const int kTest6FieldNumber = 6;
  inline double test6(int index) const;
  inline void set_test6(int index, double value);
  inline void add_test6(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      test6() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_test6();

  // repeated string test7 = 7;
  inline int test7_size() const;
  inline void clear_test7();
  static const int kTest7FieldNumber = 7;
  inline const ::std::string& test7(int index) const;
  inline ::std::string* mutable_test7(int index);
  inline void set_test7(int index, const ::std::string& value);
  inline void set_test7(int index, const char* value);
  inline void set_test7(int index, const char* value, size_t size);
  inline ::std::string* add_test7();
  inline void add_test7(const ::std::string& value);
  inline void add_test7(const char* value);
  inline void add_test7(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& test7() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_test7();

  // repeated bool test8 = 8;
  inline int test8_size() const;
  inline void clear_test8();
  static const int kTest8FieldNumber = 8;
  inline bool test8(int index) const;
  inline void set_test8(int index, bool value);
  inline void add_test8(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      test8() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_test8();

  // required .test.tm test9 = 9;
  inline bool has_test9() const;
  inline void clear_test9();
  static const int kTest9FieldNumber = 9;
  inline const ::test::tm& test9() const;
  inline ::test::tm* mutable_test9();
  inline ::test::tm* release_test9();
  inline void set_allocated_test9(::test::tm* test9);

  // repeated .test.tm test10 = 10;
  inline int test10_size() const;
  inline void clear_test10();
  static const int kTest10FieldNumber = 10;
  inline const ::test::tm& test10(int index) const;
  inline ::test::tm* mutable_test10(int index);
  inline ::test::tm* add_test10();
  inline const ::google::protobuf::RepeatedPtrField< ::test::tm >&
      test10() const;
  inline ::google::protobuf::RepeatedPtrField< ::test::tm >*
      mutable_test10();

  // @@protoc_insertion_point(class_scope:test.test)
 private:
  inline void set_has_test9();
  inline void clear_has_test9();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > test2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > test3_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > test4_;
  ::google::protobuf::RepeatedField< float > test5_;
  ::google::protobuf::RepeatedField< double > test6_;
  ::google::protobuf::RepeatedPtrField< ::std::string> test7_;
  ::google::protobuf::RepeatedField< bool > test8_;
  ::test::tm* test9_;
  ::google::protobuf::RepeatedPtrField< ::test::tm > test10_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static test* default_instance_;
};
// ===================================================================


// ===================================================================

// tm

// required int32 tm1 = 1;
inline bool tm::has_tm1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tm::set_has_tm1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tm::clear_has_tm1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tm::clear_tm1() {
  tm1_ = 0;
  clear_has_tm1();
}
inline ::google::protobuf::int32 tm::tm1() const {
  // @@protoc_insertion_point(field_get:test.tm.tm1)
  return tm1_;
}
inline void tm::set_tm1(::google::protobuf::int32 value) {
  set_has_tm1();
  tm1_ = value;
  // @@protoc_insertion_point(field_set:test.tm.tm1)
}

// required uint32 tm2 = 2;
inline bool tm::has_tm2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tm::set_has_tm2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tm::clear_has_tm2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tm::clear_tm2() {
  tm2_ = 0u;
  clear_has_tm2();
}
inline ::google::protobuf::uint32 tm::tm2() const {
  // @@protoc_insertion_point(field_get:test.tm.tm2)
  return tm2_;
}
inline void tm::set_tm2(::google::protobuf::uint32 value) {
  set_has_tm2();
  tm2_ = value;
  // @@protoc_insertion_point(field_set:test.tm.tm2)
}

// required int64 tm3 = 3;
inline bool tm::has_tm3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tm::set_has_tm3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tm::clear_has_tm3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tm::clear_tm3() {
  tm3_ = GOOGLE_LONGLONG(0);
  clear_has_tm3();
}
inline ::google::protobuf::int64 tm::tm3() const {
  // @@protoc_insertion_point(field_get:test.tm.tm3)
  return tm3_;
}
inline void tm::set_tm3(::google::protobuf::int64 value) {
  set_has_tm3();
  tm3_ = value;
  // @@protoc_insertion_point(field_set:test.tm.tm3)
}

// required uint64 tm4 = 4;
inline bool tm::has_tm4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tm::set_has_tm4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tm::clear_has_tm4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tm::clear_tm4() {
  tm4_ = GOOGLE_ULONGLONG(0);
  clear_has_tm4();
}
inline ::google::protobuf::uint64 tm::tm4() const {
  // @@protoc_insertion_point(field_get:test.tm.tm4)
  return tm4_;
}
inline void tm::set_tm4(::google::protobuf::uint64 value) {
  set_has_tm4();
  tm4_ = value;
  // @@protoc_insertion_point(field_set:test.tm.tm4)
}

// required float tm5 = 5;
inline bool tm::has_tm5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tm::set_has_tm5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tm::clear_has_tm5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tm::clear_tm5() {
  tm5_ = 0;
  clear_has_tm5();
}
inline float tm::tm5() const {
  // @@protoc_insertion_point(field_get:test.tm.tm5)
  return tm5_;
}
inline void tm::set_tm5(float value) {
  set_has_tm5();
  tm5_ = value;
  // @@protoc_insertion_point(field_set:test.tm.tm5)
}

// required double tm6 = 6;
inline bool tm::has_tm6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tm::set_has_tm6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tm::clear_has_tm6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tm::clear_tm6() {
  tm6_ = 0;
  clear_has_tm6();
}
inline double tm::tm6() const {
  // @@protoc_insertion_point(field_get:test.tm.tm6)
  return tm6_;
}
inline void tm::set_tm6(double value) {
  set_has_tm6();
  tm6_ = value;
  // @@protoc_insertion_point(field_set:test.tm.tm6)
}

// required string tm7 = 7;
inline bool tm::has_tm7() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tm::set_has_tm7() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tm::clear_has_tm7() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tm::clear_tm7() {
  if (tm7_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tm7_->clear();
  }
  clear_has_tm7();
}
inline const ::std::string& tm::tm7() const {
  // @@protoc_insertion_point(field_get:test.tm.tm7)
  return *tm7_;
}
inline void tm::set_tm7(const ::std::string& value) {
  set_has_tm7();
  if (tm7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tm7_ = new ::std::string;
  }
  tm7_->assign(value);
  // @@protoc_insertion_point(field_set:test.tm.tm7)
}
inline void tm::set_tm7(const char* value) {
  set_has_tm7();
  if (tm7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tm7_ = new ::std::string;
  }
  tm7_->assign(value);
  // @@protoc_insertion_point(field_set_char:test.tm.tm7)
}
inline void tm::set_tm7(const char* value, size_t size) {
  set_has_tm7();
  if (tm7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tm7_ = new ::std::string;
  }
  tm7_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.tm.tm7)
}
inline ::std::string* tm::mutable_tm7() {
  set_has_tm7();
  if (tm7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tm7_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:test.tm.tm7)
  return tm7_;
}
inline ::std::string* tm::release_tm7() {
  clear_has_tm7();
  if (tm7_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tm7_;
    tm7_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void tm::set_allocated_tm7(::std::string* tm7) {
  if (tm7_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tm7_;
  }
  if (tm7) {
    set_has_tm7();
    tm7_ = tm7;
  } else {
    clear_has_tm7();
    tm7_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:test.tm.tm7)
}

// required bool tm8 = 8;
inline bool tm::has_tm8() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tm::set_has_tm8() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tm::clear_has_tm8() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tm::clear_tm8() {
  tm8_ = false;
  clear_has_tm8();
}
inline bool tm::tm8() const {
  // @@protoc_insertion_point(field_get:test.tm.tm8)
  return tm8_;
}
inline void tm::set_tm8(bool value) {
  set_has_tm8();
  tm8_ = value;
  // @@protoc_insertion_point(field_set:test.tm.tm8)
}

// -------------------------------------------------------------------

// test

// repeated int32 test1 = 1;
inline int test::test1_size() const {
  return test1_.size();
}
inline void test::clear_test1() {
  test1_.Clear();
}
inline ::google::protobuf::int32 test::test1(int index) const {
  // @@protoc_insertion_point(field_get:test.test.test1)
  return test1_.Get(index);
}
inline void test::set_test1(int index, ::google::protobuf::int32 value) {
  test1_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.test.test1)
}
inline void test::add_test1(::google::protobuf::int32 value) {
  test1_.Add(value);
  // @@protoc_insertion_point(field_add:test.test.test1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
test::test1() const {
  // @@protoc_insertion_point(field_list:test.test.test1)
  return test1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
test::mutable_test1() {
  // @@protoc_insertion_point(field_mutable_list:test.test.test1)
  return &test1_;
}

// repeated uint32 test2 = 2;
inline int test::test2_size() const {
  return test2_.size();
}
inline void test::clear_test2() {
  test2_.Clear();
}
inline ::google::protobuf::uint32 test::test2(int index) const {
  // @@protoc_insertion_point(field_get:test.test.test2)
  return test2_.Get(index);
}
inline void test::set_test2(int index, ::google::protobuf::uint32 value) {
  test2_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.test.test2)
}
inline void test::add_test2(::google::protobuf::uint32 value) {
  test2_.Add(value);
  // @@protoc_insertion_point(field_add:test.test.test2)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
test::test2() const {
  // @@protoc_insertion_point(field_list:test.test.test2)
  return test2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
test::mutable_test2() {
  // @@protoc_insertion_point(field_mutable_list:test.test.test2)
  return &test2_;
}

// repeated int64 test3 = 3;
inline int test::test3_size() const {
  return test3_.size();
}
inline void test::clear_test3() {
  test3_.Clear();
}
inline ::google::protobuf::int64 test::test3(int index) const {
  // @@protoc_insertion_point(field_get:test.test.test3)
  return test3_.Get(index);
}
inline void test::set_test3(int index, ::google::protobuf::int64 value) {
  test3_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.test.test3)
}
inline void test::add_test3(::google::protobuf::int64 value) {
  test3_.Add(value);
  // @@protoc_insertion_point(field_add:test.test.test3)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
test::test3() const {
  // @@protoc_insertion_point(field_list:test.test.test3)
  return test3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
test::mutable_test3() {
  // @@protoc_insertion_point(field_mutable_list:test.test.test3)
  return &test3_;
}

// repeated uint64 test4 = 4;
inline int test::test4_size() const {
  return test4_.size();
}
inline void test::clear_test4() {
  test4_.Clear();
}
inline ::google::protobuf::uint64 test::test4(int index) const {
  // @@protoc_insertion_point(field_get:test.test.test4)
  return test4_.Get(index);
}
inline void test::set_test4(int index, ::google::protobuf::uint64 value) {
  test4_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.test.test4)
}
inline void test::add_test4(::google::protobuf::uint64 value) {
  test4_.Add(value);
  // @@protoc_insertion_point(field_add:test.test.test4)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
test::test4() const {
  // @@protoc_insertion_point(field_list:test.test.test4)
  return test4_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
test::mutable_test4() {
  // @@protoc_insertion_point(field_mutable_list:test.test.test4)
  return &test4_;
}

// repeated float test5 = 5;
inline int test::test5_size() const {
  return test5_.size();
}
inline void test::clear_test5() {
  test5_.Clear();
}
inline float test::test5(int index) const {
  // @@protoc_insertion_point(field_get:test.test.test5)
  return test5_.Get(index);
}
inline void test::set_test5(int index, float value) {
  test5_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.test.test5)
}
inline void test::add_test5(float value) {
  test5_.Add(value);
  // @@protoc_insertion_point(field_add:test.test.test5)
}
inline const ::google::protobuf::RepeatedField< float >&
test::test5() const {
  // @@protoc_insertion_point(field_list:test.test.test5)
  return test5_;
}
inline ::google::protobuf::RepeatedField< float >*
test::mutable_test5() {
  // @@protoc_insertion_point(field_mutable_list:test.test.test5)
  return &test5_;
}

// repeated double test6 = 6;
inline int test::test6_size() const {
  return test6_.size();
}
inline void test::clear_test6() {
  test6_.Clear();
}
inline double test::test6(int index) const {
  // @@protoc_insertion_point(field_get:test.test.test6)
  return test6_.Get(index);
}
inline void test::set_test6(int index, double value) {
  test6_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.test.test6)
}
inline void test::add_test6(double value) {
  test6_.Add(value);
  // @@protoc_insertion_point(field_add:test.test.test6)
}
inline const ::google::protobuf::RepeatedField< double >&
test::test6() const {
  // @@protoc_insertion_point(field_list:test.test.test6)
  return test6_;
}
inline ::google::protobuf::RepeatedField< double >*
test::mutable_test6() {
  // @@protoc_insertion_point(field_mutable_list:test.test.test6)
  return &test6_;
}

// repeated string test7 = 7;
inline int test::test7_size() const {
  return test7_.size();
}
inline void test::clear_test7() {
  test7_.Clear();
}
inline const ::std::string& test::test7(int index) const {
  // @@protoc_insertion_point(field_get:test.test.test7)
  return test7_.Get(index);
}
inline ::std::string* test::mutable_test7(int index) {
  // @@protoc_insertion_point(field_mutable:test.test.test7)
  return test7_.Mutable(index);
}
inline void test::set_test7(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:test.test.test7)
  test7_.Mutable(index)->assign(value);
}
inline void test::set_test7(int index, const char* value) {
  test7_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.test.test7)
}
inline void test::set_test7(int index, const char* value, size_t size) {
  test7_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.test.test7)
}
inline ::std::string* test::add_test7() {
  return test7_.Add();
}
inline void test::add_test7(const ::std::string& value) {
  test7_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.test.test7)
}
inline void test::add_test7(const char* value) {
  test7_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.test.test7)
}
inline void test::add_test7(const char* value, size_t size) {
  test7_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.test.test7)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
test::test7() const {
  // @@protoc_insertion_point(field_list:test.test.test7)
  return test7_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
test::mutable_test7() {
  // @@protoc_insertion_point(field_mutable_list:test.test.test7)
  return &test7_;
}

// repeated bool test8 = 8;
inline int test::test8_size() const {
  return test8_.size();
}
inline void test::clear_test8() {
  test8_.Clear();
}
inline bool test::test8(int index) const {
  // @@protoc_insertion_point(field_get:test.test.test8)
  return test8_.Get(index);
}
inline void test::set_test8(int index, bool value) {
  test8_.Set(index, value);
  // @@protoc_insertion_point(field_set:test.test.test8)
}
inline void test::add_test8(bool value) {
  test8_.Add(value);
  // @@protoc_insertion_point(field_add:test.test.test8)
}
inline const ::google::protobuf::RepeatedField< bool >&
test::test8() const {
  // @@protoc_insertion_point(field_list:test.test.test8)
  return test8_;
}
inline ::google::protobuf::RepeatedField< bool >*
test::mutable_test8() {
  // @@protoc_insertion_point(field_mutable_list:test.test.test8)
  return &test8_;
}

// required .test.tm test9 = 9;
inline bool test::has_test9() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void test::set_has_test9() {
  _has_bits_[0] |= 0x00000100u;
}
inline void test::clear_has_test9() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void test::clear_test9() {
  if (test9_ != NULL) test9_->::test::tm::Clear();
  clear_has_test9();
}
inline const ::test::tm& test::test9() const {
  // @@protoc_insertion_point(field_get:test.test.test9)
  return test9_ != NULL ? *test9_ : *default_instance_->test9_;
}
inline ::test::tm* test::mutable_test9() {
  set_has_test9();
  if (test9_ == NULL) test9_ = new ::test::tm;
  // @@protoc_insertion_point(field_mutable:test.test.test9)
  return test9_;
}
inline ::test::tm* test::release_test9() {
  clear_has_test9();
  ::test::tm* temp = test9_;
  test9_ = NULL;
  return temp;
}
inline void test::set_allocated_test9(::test::tm* test9) {
  delete test9_;
  test9_ = test9;
  if (test9) {
    set_has_test9();
  } else {
    clear_has_test9();
  }
  // @@protoc_insertion_point(field_set_allocated:test.test.test9)
}

// repeated .test.tm test10 = 10;
inline int test::test10_size() const {
  return test10_.size();
}
inline void test::clear_test10() {
  test10_.Clear();
}
inline const ::test::tm& test::test10(int index) const {
  // @@protoc_insertion_point(field_get:test.test.test10)
  return test10_.Get(index);
}
inline ::test::tm* test::mutable_test10(int index) {
  // @@protoc_insertion_point(field_mutable:test.test.test10)
  return test10_.Mutable(index);
}
inline ::test::tm* test::add_test10() {
  // @@protoc_insertion_point(field_add:test.test.test10)
  return test10_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::test::tm >&
test::test10() const {
  // @@protoc_insertion_point(field_list:test.test.test10)
  return test10_;
}
inline ::google::protobuf::RepeatedPtrField< ::test::tm >*
test::mutable_test10() {
  // @@protoc_insertion_point(field_mutable_list:test.test.test10)
  return &test10_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
