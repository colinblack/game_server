// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllianceConsumeConfig.proto

#ifndef PROTOBUF_AllianceConsumeConfig_2eproto__INCLUDED
#define PROTOBUF_AllianceConsumeConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace AllianceConsumeConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AllianceConsumeConfig_2eproto();
void protobuf_AssignDesc_AllianceConsumeConfig_2eproto();
void protobuf_ShutdownFile_AllianceConsumeConfig_2eproto();

class AllianceConsumeConfigItem;
class AllianceConsumeConfigItemLimit;
class AllianceConsumeConfig;

// ===================================================================

class AllianceConsumeConfigItem : public ::google::protobuf::Message {
 public:
  AllianceConsumeConfigItem();
  virtual ~AllianceConsumeConfigItem();

  AllianceConsumeConfigItem(const AllianceConsumeConfigItem& from);

  inline AllianceConsumeConfigItem& operator=(const AllianceConsumeConfigItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceConsumeConfigItem& default_instance();

  void Swap(AllianceConsumeConfigItem* other);

  // implements Message ----------------------------------------------

  AllianceConsumeConfigItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceConsumeConfigItem& from);
  void MergeFrom(const AllianceConsumeConfigItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required int32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // required int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AllianceConsumeConfig.AllianceConsumeConfigItem)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_AllianceConsumeConfig_2eproto();
  friend void protobuf_AssignDesc_AllianceConsumeConfig_2eproto();
  friend void protobuf_ShutdownFile_AllianceConsumeConfig_2eproto();

  void InitAsDefaultInstance();
  static AllianceConsumeConfigItem* default_instance_;
};
// -------------------------------------------------------------------

class AllianceConsumeConfigItemLimit : public ::google::protobuf::Message {
 public:
  AllianceConsumeConfigItemLimit();
  virtual ~AllianceConsumeConfigItemLimit();

  AllianceConsumeConfigItemLimit(const AllianceConsumeConfigItemLimit& from);

  inline AllianceConsumeConfigItemLimit& operator=(const AllianceConsumeConfigItemLimit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceConsumeConfigItemLimit& default_instance();

  void Swap(AllianceConsumeConfigItemLimit* other);

  // implements Message ----------------------------------------------

  AllianceConsumeConfigItemLimit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceConsumeConfigItemLimit& from);
  void MergeFrom(const AllianceConsumeConfigItemLimit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required int32 price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // required uint32 limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // required int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::uint32 limit_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_AllianceConsumeConfig_2eproto();
  friend void protobuf_AssignDesc_AllianceConsumeConfig_2eproto();
  friend void protobuf_ShutdownFile_AllianceConsumeConfig_2eproto();

  void InitAsDefaultInstance();
  static AllianceConsumeConfigItemLimit* default_instance_;
};
// -------------------------------------------------------------------

class AllianceConsumeConfig : public ::google::protobuf::Message {
 public:
  AllianceConsumeConfig();
  virtual ~AllianceConsumeConfig();

  AllianceConsumeConfig(const AllianceConsumeConfig& from);

  inline AllianceConsumeConfig& operator=(const AllianceConsumeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllianceConsumeConfig& default_instance();

  void Swap(AllianceConsumeConfig* other);

  // implements Message ----------------------------------------------

  AllianceConsumeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllianceConsumeConfig& from);
  void MergeFrom(const AllianceConsumeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItem a = 1;
  inline int a_size() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::AllianceConsumeConfig::AllianceConsumeConfigItem& a(int index) const;
  inline ::AllianceConsumeConfig::AllianceConsumeConfigItem* mutable_a(int index);
  inline ::AllianceConsumeConfig::AllianceConsumeConfigItem* add_a();
  inline const ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItem >&
      a() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItem >*
      mutable_a();

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit b = 2;
  inline int b_size() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit& b(int index) const;
  inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* mutable_b(int index);
  inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* add_b();
  inline const ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >&
      b() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >*
      mutable_b();

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit c = 3;
  inline int c_size() const;
  inline void clear_c();
  static const int kCFieldNumber = 3;
  inline const ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit& c(int index) const;
  inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* mutable_c(int index);
  inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* add_c();
  inline const ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >&
      c() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >*
      mutable_c();

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit d = 4;
  inline int d_size() const;
  inline void clear_d();
  static const int kDFieldNumber = 4;
  inline const ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit& d(int index) const;
  inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* mutable_d(int index);
  inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* add_d();
  inline const ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >&
      d() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >*
      mutable_d();

  // @@protoc_insertion_point(class_scope:AllianceConsumeConfig.AllianceConsumeConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItem > a_;
  ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit > b_;
  ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit > c_;
  ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit > d_;
  friend void  protobuf_AddDesc_AllianceConsumeConfig_2eproto();
  friend void protobuf_AssignDesc_AllianceConsumeConfig_2eproto();
  friend void protobuf_ShutdownFile_AllianceConsumeConfig_2eproto();

  void InitAsDefaultInstance();
  static AllianceConsumeConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// AllianceConsumeConfigItem

// required uint32 eqid = 1;
inline bool AllianceConsumeConfigItem::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceConsumeConfigItem::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceConsumeConfigItem::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceConsumeConfigItem::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 AllianceConsumeConfigItem::eqid() const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfigItem.eqid)
  return eqid_;
}
inline void AllianceConsumeConfigItem::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:AllianceConsumeConfig.AllianceConsumeConfigItem.eqid)
}

// required int32 price = 2;
inline bool AllianceConsumeConfigItem::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceConsumeConfigItem::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceConsumeConfigItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceConsumeConfigItem::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 AllianceConsumeConfigItem::price() const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfigItem.price)
  return price_;
}
inline void AllianceConsumeConfigItem::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:AllianceConsumeConfig.AllianceConsumeConfigItem.price)
}

// required int32 count = 3;
inline bool AllianceConsumeConfigItem::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceConsumeConfigItem::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceConsumeConfigItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceConsumeConfigItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 AllianceConsumeConfigItem::count() const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfigItem.count)
  return count_;
}
inline void AllianceConsumeConfigItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:AllianceConsumeConfig.AllianceConsumeConfigItem.count)
}

// -------------------------------------------------------------------

// AllianceConsumeConfigItemLimit

// required uint32 eqid = 1;
inline bool AllianceConsumeConfigItemLimit::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllianceConsumeConfigItemLimit::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllianceConsumeConfigItemLimit::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllianceConsumeConfigItemLimit::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 AllianceConsumeConfigItemLimit::eqid() const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfigItemLimit.eqid)
  return eqid_;
}
inline void AllianceConsumeConfigItemLimit::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:AllianceConsumeConfig.AllianceConsumeConfigItemLimit.eqid)
}

// required int32 price = 2;
inline bool AllianceConsumeConfigItemLimit::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AllianceConsumeConfigItemLimit::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AllianceConsumeConfigItemLimit::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AllianceConsumeConfigItemLimit::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 AllianceConsumeConfigItemLimit::price() const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfigItemLimit.price)
  return price_;
}
inline void AllianceConsumeConfigItemLimit::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:AllianceConsumeConfig.AllianceConsumeConfigItemLimit.price)
}

// required uint32 limit = 3;
inline bool AllianceConsumeConfigItemLimit::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AllianceConsumeConfigItemLimit::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AllianceConsumeConfigItemLimit::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AllianceConsumeConfigItemLimit::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 AllianceConsumeConfigItemLimit::limit() const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfigItemLimit.limit)
  return limit_;
}
inline void AllianceConsumeConfigItemLimit::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:AllianceConsumeConfig.AllianceConsumeConfigItemLimit.limit)
}

// required int32 count = 4;
inline bool AllianceConsumeConfigItemLimit::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AllianceConsumeConfigItemLimit::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AllianceConsumeConfigItemLimit::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AllianceConsumeConfigItemLimit::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 AllianceConsumeConfigItemLimit::count() const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfigItemLimit.count)
  return count_;
}
inline void AllianceConsumeConfigItemLimit::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:AllianceConsumeConfig.AllianceConsumeConfigItemLimit.count)
}

// -------------------------------------------------------------------

// AllianceConsumeConfig

// repeated .AllianceConsumeConfig.AllianceConsumeConfigItem a = 1;
inline int AllianceConsumeConfig::a_size() const {
  return a_.size();
}
inline void AllianceConsumeConfig::clear_a() {
  a_.Clear();
}
inline const ::AllianceConsumeConfig::AllianceConsumeConfigItem& AllianceConsumeConfig::a(int index) const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfig.a)
  return a_.Get(index);
}
inline ::AllianceConsumeConfig::AllianceConsumeConfigItem* AllianceConsumeConfig::mutable_a(int index) {
  // @@protoc_insertion_point(field_mutable:AllianceConsumeConfig.AllianceConsumeConfig.a)
  return a_.Mutable(index);
}
inline ::AllianceConsumeConfig::AllianceConsumeConfigItem* AllianceConsumeConfig::add_a() {
  // @@protoc_insertion_point(field_add:AllianceConsumeConfig.AllianceConsumeConfig.a)
  return a_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItem >&
AllianceConsumeConfig::a() const {
  // @@protoc_insertion_point(field_list:AllianceConsumeConfig.AllianceConsumeConfig.a)
  return a_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItem >*
AllianceConsumeConfig::mutable_a() {
  // @@protoc_insertion_point(field_mutable_list:AllianceConsumeConfig.AllianceConsumeConfig.a)
  return &a_;
}

// repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit b = 2;
inline int AllianceConsumeConfig::b_size() const {
  return b_.size();
}
inline void AllianceConsumeConfig::clear_b() {
  b_.Clear();
}
inline const ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit& AllianceConsumeConfig::b(int index) const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfig.b)
  return b_.Get(index);
}
inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* AllianceConsumeConfig::mutable_b(int index) {
  // @@protoc_insertion_point(field_mutable:AllianceConsumeConfig.AllianceConsumeConfig.b)
  return b_.Mutable(index);
}
inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* AllianceConsumeConfig::add_b() {
  // @@protoc_insertion_point(field_add:AllianceConsumeConfig.AllianceConsumeConfig.b)
  return b_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >&
AllianceConsumeConfig::b() const {
  // @@protoc_insertion_point(field_list:AllianceConsumeConfig.AllianceConsumeConfig.b)
  return b_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >*
AllianceConsumeConfig::mutable_b() {
  // @@protoc_insertion_point(field_mutable_list:AllianceConsumeConfig.AllianceConsumeConfig.b)
  return &b_;
}

// repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit c = 3;
inline int AllianceConsumeConfig::c_size() const {
  return c_.size();
}
inline void AllianceConsumeConfig::clear_c() {
  c_.Clear();
}
inline const ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit& AllianceConsumeConfig::c(int index) const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfig.c)
  return c_.Get(index);
}
inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* AllianceConsumeConfig::mutable_c(int index) {
  // @@protoc_insertion_point(field_mutable:AllianceConsumeConfig.AllianceConsumeConfig.c)
  return c_.Mutable(index);
}
inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* AllianceConsumeConfig::add_c() {
  // @@protoc_insertion_point(field_add:AllianceConsumeConfig.AllianceConsumeConfig.c)
  return c_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >&
AllianceConsumeConfig::c() const {
  // @@protoc_insertion_point(field_list:AllianceConsumeConfig.AllianceConsumeConfig.c)
  return c_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >*
AllianceConsumeConfig::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:AllianceConsumeConfig.AllianceConsumeConfig.c)
  return &c_;
}

// repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit d = 4;
inline int AllianceConsumeConfig::d_size() const {
  return d_.size();
}
inline void AllianceConsumeConfig::clear_d() {
  d_.Clear();
}
inline const ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit& AllianceConsumeConfig::d(int index) const {
  // @@protoc_insertion_point(field_get:AllianceConsumeConfig.AllianceConsumeConfig.d)
  return d_.Get(index);
}
inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* AllianceConsumeConfig::mutable_d(int index) {
  // @@protoc_insertion_point(field_mutable:AllianceConsumeConfig.AllianceConsumeConfig.d)
  return d_.Mutable(index);
}
inline ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit* AllianceConsumeConfig::add_d() {
  // @@protoc_insertion_point(field_add:AllianceConsumeConfig.AllianceConsumeConfig.d)
  return d_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >&
AllianceConsumeConfig::d() const {
  // @@protoc_insertion_point(field_list:AllianceConsumeConfig.AllianceConsumeConfig.d)
  return d_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllianceConsumeConfig::AllianceConsumeConfigItemLimit >*
AllianceConsumeConfig::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:AllianceConsumeConfig.AllianceConsumeConfig.d)
  return &d_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AllianceConsumeConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AllianceConsumeConfig_2eproto__INCLUDED
