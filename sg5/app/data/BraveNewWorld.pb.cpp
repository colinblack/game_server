// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BraveNewWorld.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BraveNewWorld.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BraveNewWorld {

namespace {

const ::google::protobuf::Descriptor* BraveNewWorldHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorldHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveNewWorldFavourate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorldFavourate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveNewWorldUserMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorldUserMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveNewWorldAllianceMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorldAllianceMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveNewWorldAlliance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorldAlliance_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveNewWorldUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorldUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveNewWorldPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorldPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveNewWorldZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorldZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveNewWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorld_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BraveNewWorld_2eproto() {
  protobuf_AddDesc_BraveNewWorld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BraveNewWorld.proto");
  GOOGLE_CHECK(file != NULL);
  BraveNewWorldHistory_descriptor_ = file->message_type(0);
  static const int BraveNewWorldHistory_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, lm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, nm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, lh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, nh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, ts_),
  };
  BraveNewWorldHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorldHistory_descriptor_,
      BraveNewWorldHistory::default_instance_,
      BraveNewWorldHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorldHistory));
  BraveNewWorldFavourate_descriptor_ = file->message_type(1);
  static const int BraveNewWorldFavourate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldFavourate, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldFavourate, y_),
  };
  BraveNewWorldFavourate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorldFavourate_descriptor_,
      BraveNewWorldFavourate::default_instance_,
      BraveNewWorldFavourate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldFavourate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldFavourate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorldFavourate));
  BraveNewWorldUserMission_descriptor_ = file->message_type(2);
  static const int BraveNewWorldUserMission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUserMission, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUserMission, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUserMission, mx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUserMission, my_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUserMission, m3_),
  };
  BraveNewWorldUserMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorldUserMission_descriptor_,
      BraveNewWorldUserMission::default_instance_,
      BraveNewWorldUserMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUserMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUserMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorldUserMission));
  BraveNewWorldAllianceMission_descriptor_ = file->message_type(3);
  static const int BraveNewWorldAllianceMission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldAllianceMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldAllianceMission, m_),
  };
  BraveNewWorldAllianceMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorldAllianceMission_descriptor_,
      BraveNewWorldAllianceMission::default_instance_,
      BraveNewWorldAllianceMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldAllianceMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldAllianceMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorldAllianceMission));
  BraveNewWorldAlliance_descriptor_ = file->message_type(4);
  static const int BraveNewWorldAlliance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldAlliance, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldAlliance, mission_),
  };
  BraveNewWorldAlliance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorldAlliance_descriptor_,
      BraveNewWorldAlliance::default_instance_,
      BraveNewWorldAlliance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldAlliance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldAlliance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorldAlliance));
  BraveNewWorldUser_descriptor_ = file->message_type(5);
  static const int BraveNewWorldUser_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, rts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, hts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, pts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, bts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, bt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, tts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, his_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, fav_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, mission_),
  };
  BraveNewWorldUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorldUser_descriptor_,
      BraveNewWorldUser::default_instance_,
      BraveNewWorldUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorldUser));
  BraveNewWorldPoint_descriptor_ = file->message_type(6);
  static const int BraveNewWorldPoint_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, fts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, rts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, rc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, mtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, mcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, defts_),
  };
  BraveNewWorldPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorldPoint_descriptor_,
      BraveNewWorldPoint::default_instance_,
      BraveNewWorldPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorldPoint));
  BraveNewWorldZone_descriptor_ = file->message_type(7);
  static const int BraveNewWorldZone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldZone, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldZone, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldZone, ts_),
  };
  BraveNewWorldZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorldZone_descriptor_,
      BraveNewWorldZone::default_instance_,
      BraveNewWorldZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorldZone));
  BraveNewWorld_descriptor_ = file->message_type(8);
  static const int BraveNewWorld_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorld, land_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorld, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorld, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorld, alliance_),
  };
  BraveNewWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorld_descriptor_,
      BraveNewWorld::default_instance_,
      BraveNewWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorld));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BraveNewWorld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorldHistory_descriptor_, &BraveNewWorldHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorldFavourate_descriptor_, &BraveNewWorldFavourate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorldUserMission_descriptor_, &BraveNewWorldUserMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorldAllianceMission_descriptor_, &BraveNewWorldAllianceMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorldAlliance_descriptor_, &BraveNewWorldAlliance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorldUser_descriptor_, &BraveNewWorldUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorldPoint_descriptor_, &BraveNewWorldPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorldZone_descriptor_, &BraveNewWorldZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorld_descriptor_, &BraveNewWorld::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BraveNewWorld_2eproto() {
  delete BraveNewWorldHistory::default_instance_;
  delete BraveNewWorldHistory_reflection_;
  delete BraveNewWorldFavourate::default_instance_;
  delete BraveNewWorldFavourate_reflection_;
  delete BraveNewWorldUserMission::default_instance_;
  delete BraveNewWorldUserMission_reflection_;
  delete BraveNewWorldAllianceMission::default_instance_;
  delete BraveNewWorldAllianceMission_reflection_;
  delete BraveNewWorldAlliance::default_instance_;
  delete BraveNewWorldAlliance_reflection_;
  delete BraveNewWorldUser::default_instance_;
  delete BraveNewWorldUser_reflection_;
  delete BraveNewWorldPoint::default_instance_;
  delete BraveNewWorldPoint_reflection_;
  delete BraveNewWorldZone::default_instance_;
  delete BraveNewWorldZone_reflection_;
  delete BraveNewWorld::default_instance_;
  delete BraveNewWorld_reflection_;
}

void protobuf_AddDesc_BraveNewWorld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023BraveNewWorld.proto\022\rBraveNewWorld\"\203\001\n"
    "\024BraveNewWorldHistory\022\013\n\003uid\030\001 \002(\r\022\014\n\004ty"
    "pe\030\002 \002(\r\022\t\n\001x\030\003 \002(\r\022\t\n\001y\030\004 \002(\r\022\n\n\002lm\030\005 \002"
    "(\r\022\n\n\002nm\030\006 \002(\r\022\n\n\002lh\030\007 \002(\r\022\n\n\002nh\030\010 \002(\r\022\n"
    "\n\002ts\030\t \002(\r\".\n\026BraveNewWorldFavourate\022\t\n\001"
    "x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\"V\n\030BraveNewWorldUserM"
    "ission\022\n\n\002m1\030\001 \002(\005\022\n\n\002m2\030\002 \002(\005\022\n\n\002mx\030\003 \002"
    "(\r\022\n\n\002my\030\004 \002(\r\022\n\n\002m3\030\005 \002(\005\"5\n\034BraveNewWo"
    "rldAllianceMission\022\n\n\002id\030\001 \002(\r\022\t\n\001m\030\002 \002("
    "\010\"b\n\025BraveNewWorldAlliance\022\013\n\003aid\030\001 \002(\r\022"
    "<\n\007mission\030\002 \003(\0132+.BraveNewWorld.BraveNe"
    "wWorldAllianceMission\"\341\002\n\021BraveNewWorldU"
    "ser\022\013\n\003uid\030\001 \002(\r\022\013\n\003seq\030\002 \002(\r\022\013\n\003aid\030\003 \002"
    "(\r\022\n\n\002lv\030\004 \002(\r\022\t\n\001x\030\005 \002(\r\022\t\n\001y\030\006 \002(\r\022\013\n\003"
    "rts\030\007 \002(\r\022\013\n\003hts\030\010 \002(\r\022\013\n\003pts\030\t \002(\r\022\013\n\003b"
    "ts\030\n \002(\r\022\n\n\002bt\030\013 \002(\r\022\013\n\003tts\030\014 \002(\r\022\n\n\002hp\030"
    "\r \003(\r\0220\n\003his\030\016 \003(\0132#.BraveNewWorld.Brave"
    "NewWorldHistory\0222\n\003fav\030\017 \003(\0132%.BraveNewW"
    "orld.BraveNewWorldFavourate\022\n\n\002rl\030\020 \001(\r\022"
    "8\n\007mission\030\021 \001(\0132\'.BraveNewWorld.BraveNe"
    "wWorldUserMission\"\277\001\n\022BraveNewWorldPoint"
    "\022\t\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\022\013\n\003uid\030\003 \002(\r\022\013\n\003d"
    "ef\030\004 \002(\010\022\014\n\004hero\030\005 \002(\r\022\n\n\002hp\030\006 \002(\r\022\013\n\003fi"
    "d\030\007 \002(\r\022\013\n\003fts\030\010 \002(\r\022\013\n\003rts\030\t \002(\r\022\n\n\002rc\030"
    "\n \001(\r\022\r\n\005mtype\030\013 \001(\r\022\016\n\006mcount\030\014 \001(\r\022\r\n\005"
    "defts\030\r \001(\r\"8\n\021BraveNewWorldZone\022\n\n\002id\030\001"
    " \002(\r\022\013\n\003aid\030\002 \002(\r\022\n\n\002ts\030\003 \002(\r\"\330\001\n\rBraveN"
    "ewWorld\022/\n\004land\030\001 \003(\0132!.BraveNewWorld.Br"
    "aveNewWorldPoint\022.\n\004user\030\002 \003(\0132 .BraveNe"
    "wWorld.BraveNewWorldUser\022.\n\004zone\030\003 \003(\0132 "
    ".BraveNewWorld.BraveNewWorldZone\0226\n\010alli"
    "ance\030\004 \003(\0132$.BraveNewWorld.BraveNewWorld"
    "Alliance", 1288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BraveNewWorld.proto", &protobuf_RegisterTypes);
  BraveNewWorldHistory::default_instance_ = new BraveNewWorldHistory();
  BraveNewWorldFavourate::default_instance_ = new BraveNewWorldFavourate();
  BraveNewWorldUserMission::default_instance_ = new BraveNewWorldUserMission();
  BraveNewWorldAllianceMission::default_instance_ = new BraveNewWorldAllianceMission();
  BraveNewWorldAlliance::default_instance_ = new BraveNewWorldAlliance();
  BraveNewWorldUser::default_instance_ = new BraveNewWorldUser();
  BraveNewWorldPoint::default_instance_ = new BraveNewWorldPoint();
  BraveNewWorldZone::default_instance_ = new BraveNewWorldZone();
  BraveNewWorld::default_instance_ = new BraveNewWorld();
  BraveNewWorldHistory::default_instance_->InitAsDefaultInstance();
  BraveNewWorldFavourate::default_instance_->InitAsDefaultInstance();
  BraveNewWorldUserMission::default_instance_->InitAsDefaultInstance();
  BraveNewWorldAllianceMission::default_instance_->InitAsDefaultInstance();
  BraveNewWorldAlliance::default_instance_->InitAsDefaultInstance();
  BraveNewWorldUser::default_instance_->InitAsDefaultInstance();
  BraveNewWorldPoint::default_instance_->InitAsDefaultInstance();
  BraveNewWorldZone::default_instance_->InitAsDefaultInstance();
  BraveNewWorld::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BraveNewWorld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BraveNewWorld_2eproto {
  StaticDescriptorInitializer_BraveNewWorld_2eproto() {
    protobuf_AddDesc_BraveNewWorld_2eproto();
  }
} static_descriptor_initializer_BraveNewWorld_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorldHistory::kUidFieldNumber;
const int BraveNewWorldHistory::kTypeFieldNumber;
const int BraveNewWorldHistory::kXFieldNumber;
const int BraveNewWorldHistory::kYFieldNumber;
const int BraveNewWorldHistory::kLmFieldNumber;
const int BraveNewWorldHistory::kNmFieldNumber;
const int BraveNewWorldHistory::kLhFieldNumber;
const int BraveNewWorldHistory::kNhFieldNumber;
const int BraveNewWorldHistory::kTsFieldNumber;
#endif  // !_MSC_VER

BraveNewWorldHistory::BraveNewWorldHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorld.BraveNewWorldHistory)
}

void BraveNewWorldHistory::InitAsDefaultInstance() {
}

BraveNewWorldHistory::BraveNewWorldHistory(const BraveNewWorldHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorld.BraveNewWorldHistory)
}

void BraveNewWorldHistory::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  type_ = 0u;
  x_ = 0u;
  y_ = 0u;
  lm_ = 0u;
  nm_ = 0u;
  lh_ = 0u;
  nh_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorldHistory::~BraveNewWorldHistory() {
  // @@protoc_insertion_point(destructor:BraveNewWorld.BraveNewWorldHistory)
  SharedDtor();
}

void BraveNewWorldHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BraveNewWorldHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorldHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorldHistory_descriptor_;
}

const BraveNewWorldHistory& BraveNewWorldHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorld_2eproto();
  return *default_instance_;
}

BraveNewWorldHistory* BraveNewWorldHistory::default_instance_ = NULL;

BraveNewWorldHistory* BraveNewWorldHistory::New() const {
  return new BraveNewWorldHistory;
}

void BraveNewWorldHistory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BraveNewWorldHistory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, nh_);
  }
  ts_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorldHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorld.BraveNewWorldHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // required uint32 x = 3;
      case 3: {
        if (tag == 24) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }

      // required uint32 y = 4;
      case 4: {
        if (tag == 32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lm;
        break;
      }

      // required uint32 lm = 5;
      case 5: {
        if (tag == 40) {
         parse_lm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lm_)));
          set_has_lm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nm;
        break;
      }

      // required uint32 nm = 6;
      case 6: {
        if (tag == 48) {
         parse_nm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nm_)));
          set_has_nm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lh;
        break;
      }

      // required uint32 lh = 7;
      case 7: {
        if (tag == 56) {
         parse_lh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lh_)));
          set_has_lh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_nh;
        break;
      }

      // required uint32 nh = 8;
      case 8: {
        if (tag == 64) {
         parse_nh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nh_)));
          set_has_nh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ts;
        break;
      }

      // required uint32 ts = 9;
      case 9: {
        if (tag == 72) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorld.BraveNewWorldHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorld.BraveNewWorldHistory)
  return false;
#undef DO_
}

void BraveNewWorldHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorld.BraveNewWorldHistory)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // required uint32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->y(), output);
  }

  // required uint32 lm = 5;
  if (has_lm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lm(), output);
  }

  // required uint32 nm = 6;
  if (has_nm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->nm(), output);
  }

  // required uint32 lh = 7;
  if (has_lh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lh(), output);
  }

  // required uint32 nh = 8;
  if (has_nh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nh(), output);
  }

  // required uint32 ts = 9;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorld.BraveNewWorldHistory)
}

::google::protobuf::uint8* BraveNewWorldHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorld.BraveNewWorldHistory)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // required uint32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->y(), target);
  }

  // required uint32 lm = 5;
  if (has_lm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lm(), target);
  }

  // required uint32 nm = 6;
  if (has_nm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->nm(), target);
  }

  // required uint32 lh = 7;
  if (has_lh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lh(), target);
  }

  // required uint32 nh = 8;
  if (has_nh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->nh(), target);
  }

  // required uint32 ts = 9;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorld.BraveNewWorldHistory)
  return target;
}

int BraveNewWorldHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 lm = 5;
    if (has_lm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lm());
    }

    // required uint32 nm = 6;
    if (has_nm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nm());
    }

    // required uint32 lh = 7;
    if (has_lh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lh());
    }

    // required uint32 nh = 8;
    if (has_nh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nh());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 ts = 9;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorldHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorldHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorldHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorldHistory::MergeFrom(const BraveNewWorldHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_lm()) {
      set_lm(from.lm());
    }
    if (from.has_nm()) {
      set_nm(from.nm());
    }
    if (from.has_lh()) {
      set_lh(from.lh());
    }
    if (from.has_nh()) {
      set_nh(from.nh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorldHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorldHistory::CopyFrom(const BraveNewWorldHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorldHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void BraveNewWorldHistory::Swap(BraveNewWorldHistory* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(lm_, other->lm_);
    std::swap(nm_, other->nm_);
    std::swap(lh_, other->lh_);
    std::swap(nh_, other->nh_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorldHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorldHistory_descriptor_;
  metadata.reflection = BraveNewWorldHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorldFavourate::kXFieldNumber;
const int BraveNewWorldFavourate::kYFieldNumber;
#endif  // !_MSC_VER

BraveNewWorldFavourate::BraveNewWorldFavourate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorld.BraveNewWorldFavourate)
}

void BraveNewWorldFavourate::InitAsDefaultInstance() {
}

BraveNewWorldFavourate::BraveNewWorldFavourate(const BraveNewWorldFavourate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorld.BraveNewWorldFavourate)
}

void BraveNewWorldFavourate::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorldFavourate::~BraveNewWorldFavourate() {
  // @@protoc_insertion_point(destructor:BraveNewWorld.BraveNewWorldFavourate)
  SharedDtor();
}

void BraveNewWorldFavourate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BraveNewWorldFavourate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorldFavourate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorldFavourate_descriptor_;
}

const BraveNewWorldFavourate& BraveNewWorldFavourate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorld_2eproto();
  return *default_instance_;
}

BraveNewWorldFavourate* BraveNewWorldFavourate::default_instance_ = NULL;

BraveNewWorldFavourate* BraveNewWorldFavourate::New() const {
  return new BraveNewWorldFavourate;
}

void BraveNewWorldFavourate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BraveNewWorldFavourate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorldFavourate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorld.BraveNewWorldFavourate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorld.BraveNewWorldFavourate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorld.BraveNewWorldFavourate)
  return false;
#undef DO_
}

void BraveNewWorldFavourate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorld.BraveNewWorldFavourate)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorld.BraveNewWorldFavourate)
}

::google::protobuf::uint8* BraveNewWorldFavourate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorld.BraveNewWorldFavourate)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorld.BraveNewWorldFavourate)
  return target;
}

int BraveNewWorldFavourate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorldFavourate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorldFavourate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorldFavourate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorldFavourate::MergeFrom(const BraveNewWorldFavourate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorldFavourate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorldFavourate::CopyFrom(const BraveNewWorldFavourate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorldFavourate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BraveNewWorldFavourate::Swap(BraveNewWorldFavourate* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorldFavourate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorldFavourate_descriptor_;
  metadata.reflection = BraveNewWorldFavourate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorldUserMission::kM1FieldNumber;
const int BraveNewWorldUserMission::kM2FieldNumber;
const int BraveNewWorldUserMission::kMxFieldNumber;
const int BraveNewWorldUserMission::kMyFieldNumber;
const int BraveNewWorldUserMission::kM3FieldNumber;
#endif  // !_MSC_VER

BraveNewWorldUserMission::BraveNewWorldUserMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorld.BraveNewWorldUserMission)
}

void BraveNewWorldUserMission::InitAsDefaultInstance() {
}

BraveNewWorldUserMission::BraveNewWorldUserMission(const BraveNewWorldUserMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorld.BraveNewWorldUserMission)
}

void BraveNewWorldUserMission::SharedCtor() {
  _cached_size_ = 0;
  m1_ = 0;
  m2_ = 0;
  mx_ = 0u;
  my_ = 0u;
  m3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorldUserMission::~BraveNewWorldUserMission() {
  // @@protoc_insertion_point(destructor:BraveNewWorld.BraveNewWorldUserMission)
  SharedDtor();
}

void BraveNewWorldUserMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BraveNewWorldUserMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorldUserMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorldUserMission_descriptor_;
}

const BraveNewWorldUserMission& BraveNewWorldUserMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorld_2eproto();
  return *default_instance_;
}

BraveNewWorldUserMission* BraveNewWorldUserMission::default_instance_ = NULL;

BraveNewWorldUserMission* BraveNewWorldUserMission::New() const {
  return new BraveNewWorldUserMission;
}

void BraveNewWorldUserMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BraveNewWorldUserMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(m1_, m3_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorldUserMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorld.BraveNewWorldUserMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m2;
        break;
      }

      // required int32 m2 = 2;
      case 2: {
        if (tag == 16) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mx;
        break;
      }

      // required uint32 mx = 3;
      case 3: {
        if (tag == 24) {
         parse_mx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mx_)));
          set_has_mx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_my;
        break;
      }

      // required uint32 my = 4;
      case 4: {
        if (tag == 32) {
         parse_my:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my_)));
          set_has_my();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m3;
        break;
      }

      // required int32 m3 = 5;
      case 5: {
        if (tag == 40) {
         parse_m3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m3_)));
          set_has_m3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorld.BraveNewWorldUserMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorld.BraveNewWorldUserMission)
  return false;
#undef DO_
}

void BraveNewWorldUserMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorld.BraveNewWorldUserMission)
  // required int32 m1 = 1;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m1(), output);
  }

  // required int32 m2 = 2;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m2(), output);
  }

  // required uint32 mx = 3;
  if (has_mx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mx(), output);
  }

  // required uint32 my = 4;
  if (has_my()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->my(), output);
  }

  // required int32 m3 = 5;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorld.BraveNewWorldUserMission)
}

::google::protobuf::uint8* BraveNewWorldUserMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorld.BraveNewWorldUserMission)
  // required int32 m1 = 1;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m1(), target);
  }

  // required int32 m2 = 2;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m2(), target);
  }

  // required uint32 mx = 3;
  if (has_mx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mx(), target);
  }

  // required uint32 my = 4;
  if (has_my()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->my(), target);
  }

  // required int32 m3 = 5;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorld.BraveNewWorldUserMission)
  return target;
}

int BraveNewWorldUserMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m1 = 1;
    if (has_m1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m1());
    }

    // required int32 m2 = 2;
    if (has_m2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m2());
    }

    // required uint32 mx = 3;
    if (has_mx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mx());
    }

    // required uint32 my = 4;
    if (has_my()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my());
    }

    // required int32 m3 = 5;
    if (has_m3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorldUserMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorldUserMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorldUserMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorldUserMission::MergeFrom(const BraveNewWorldUserMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_mx()) {
      set_mx(from.mx());
    }
    if (from.has_my()) {
      set_my(from.my());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorldUserMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorldUserMission::CopyFrom(const BraveNewWorldUserMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorldUserMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BraveNewWorldUserMission::Swap(BraveNewWorldUserMission* other) {
  if (other != this) {
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(mx_, other->mx_);
    std::swap(my_, other->my_);
    std::swap(m3_, other->m3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorldUserMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorldUserMission_descriptor_;
  metadata.reflection = BraveNewWorldUserMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorldAllianceMission::kIdFieldNumber;
const int BraveNewWorldAllianceMission::kMFieldNumber;
#endif  // !_MSC_VER

BraveNewWorldAllianceMission::BraveNewWorldAllianceMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorld.BraveNewWorldAllianceMission)
}

void BraveNewWorldAllianceMission::InitAsDefaultInstance() {
}

BraveNewWorldAllianceMission::BraveNewWorldAllianceMission(const BraveNewWorldAllianceMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorld.BraveNewWorldAllianceMission)
}

void BraveNewWorldAllianceMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  m_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorldAllianceMission::~BraveNewWorldAllianceMission() {
  // @@protoc_insertion_point(destructor:BraveNewWorld.BraveNewWorldAllianceMission)
  SharedDtor();
}

void BraveNewWorldAllianceMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BraveNewWorldAllianceMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorldAllianceMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorldAllianceMission_descriptor_;
}

const BraveNewWorldAllianceMission& BraveNewWorldAllianceMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorld_2eproto();
  return *default_instance_;
}

BraveNewWorldAllianceMission* BraveNewWorldAllianceMission::default_instance_ = NULL;

BraveNewWorldAllianceMission* BraveNewWorldAllianceMission::New() const {
  return new BraveNewWorldAllianceMission;
}

void BraveNewWorldAllianceMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BraveNewWorldAllianceMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, m_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorldAllianceMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorld.BraveNewWorldAllianceMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m;
        break;
      }

      // required bool m = 2;
      case 2: {
        if (tag == 16) {
         parse_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorld.BraveNewWorldAllianceMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorld.BraveNewWorldAllianceMission)
  return false;
#undef DO_
}

void BraveNewWorldAllianceMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorld.BraveNewWorldAllianceMission)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bool m = 2;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->m(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorld.BraveNewWorldAllianceMission)
}

::google::protobuf::uint8* BraveNewWorldAllianceMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorld.BraveNewWorldAllianceMission)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bool m = 2;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->m(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorld.BraveNewWorldAllianceMission)
  return target;
}

int BraveNewWorldAllianceMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required bool m = 2;
    if (has_m()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorldAllianceMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorldAllianceMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorldAllianceMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorldAllianceMission::MergeFrom(const BraveNewWorldAllianceMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_m()) {
      set_m(from.m());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorldAllianceMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorldAllianceMission::CopyFrom(const BraveNewWorldAllianceMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorldAllianceMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BraveNewWorldAllianceMission::Swap(BraveNewWorldAllianceMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(m_, other->m_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorldAllianceMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorldAllianceMission_descriptor_;
  metadata.reflection = BraveNewWorldAllianceMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorldAlliance::kAidFieldNumber;
const int BraveNewWorldAlliance::kMissionFieldNumber;
#endif  // !_MSC_VER

BraveNewWorldAlliance::BraveNewWorldAlliance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorld.BraveNewWorldAlliance)
}

void BraveNewWorldAlliance::InitAsDefaultInstance() {
}

BraveNewWorldAlliance::BraveNewWorldAlliance(const BraveNewWorldAlliance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorld.BraveNewWorldAlliance)
}

void BraveNewWorldAlliance::SharedCtor() {
  _cached_size_ = 0;
  aid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorldAlliance::~BraveNewWorldAlliance() {
  // @@protoc_insertion_point(destructor:BraveNewWorld.BraveNewWorldAlliance)
  SharedDtor();
}

void BraveNewWorldAlliance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BraveNewWorldAlliance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorldAlliance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorldAlliance_descriptor_;
}

const BraveNewWorldAlliance& BraveNewWorldAlliance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorld_2eproto();
  return *default_instance_;
}

BraveNewWorldAlliance* BraveNewWorldAlliance::default_instance_ = NULL;

BraveNewWorldAlliance* BraveNewWorldAlliance::New() const {
  return new BraveNewWorldAlliance;
}

void BraveNewWorldAlliance::Clear() {
  aid_ = 0u;
  mission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorldAlliance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorld.BraveNewWorldAlliance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 aid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mission;
        break;
      }

      // repeated .BraveNewWorld.BraveNewWorldAllianceMission mission = 2;
      case 2: {
        if (tag == 18) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mission;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorld.BraveNewWorldAlliance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorld.BraveNewWorldAlliance)
  return false;
#undef DO_
}

void BraveNewWorldAlliance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorld.BraveNewWorldAlliance)
  // required uint32 aid = 1;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->aid(), output);
  }

  // repeated .BraveNewWorld.BraveNewWorldAllianceMission mission = 2;
  for (int i = 0; i < this->mission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mission(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorld.BraveNewWorldAlliance)
}

::google::protobuf::uint8* BraveNewWorldAlliance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorld.BraveNewWorldAlliance)
  // required uint32 aid = 1;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->aid(), target);
  }

  // repeated .BraveNewWorld.BraveNewWorldAllianceMission mission = 2;
  for (int i = 0; i < this->mission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mission(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorld.BraveNewWorldAlliance)
  return target;
}

int BraveNewWorldAlliance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 aid = 1;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

  }
  // repeated .BraveNewWorld.BraveNewWorldAllianceMission mission = 2;
  total_size += 1 * this->mission_size();
  for (int i = 0; i < this->mission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorldAlliance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorldAlliance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorldAlliance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorldAlliance::MergeFrom(const BraveNewWorldAlliance& from) {
  GOOGLE_CHECK_NE(&from, this);
  mission_.MergeFrom(from.mission_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aid()) {
      set_aid(from.aid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorldAlliance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorldAlliance::CopyFrom(const BraveNewWorldAlliance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorldAlliance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->mission())) return false;
  return true;
}

void BraveNewWorldAlliance::Swap(BraveNewWorldAlliance* other) {
  if (other != this) {
    std::swap(aid_, other->aid_);
    mission_.Swap(&other->mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorldAlliance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorldAlliance_descriptor_;
  metadata.reflection = BraveNewWorldAlliance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorldUser::kUidFieldNumber;
const int BraveNewWorldUser::kSeqFieldNumber;
const int BraveNewWorldUser::kAidFieldNumber;
const int BraveNewWorldUser::kLvFieldNumber;
const int BraveNewWorldUser::kXFieldNumber;
const int BraveNewWorldUser::kYFieldNumber;
const int BraveNewWorldUser::kRtsFieldNumber;
const int BraveNewWorldUser::kHtsFieldNumber;
const int BraveNewWorldUser::kPtsFieldNumber;
const int BraveNewWorldUser::kBtsFieldNumber;
const int BraveNewWorldUser::kBtFieldNumber;
const int BraveNewWorldUser::kTtsFieldNumber;
const int BraveNewWorldUser::kHpFieldNumber;
const int BraveNewWorldUser::kHisFieldNumber;
const int BraveNewWorldUser::kFavFieldNumber;
const int BraveNewWorldUser::kRlFieldNumber;
const int BraveNewWorldUser::kMissionFieldNumber;
#endif  // !_MSC_VER

BraveNewWorldUser::BraveNewWorldUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorld.BraveNewWorldUser)
}

void BraveNewWorldUser::InitAsDefaultInstance() {
  mission_ = const_cast< ::BraveNewWorld::BraveNewWorldUserMission*>(&::BraveNewWorld::BraveNewWorldUserMission::default_instance());
}

BraveNewWorldUser::BraveNewWorldUser(const BraveNewWorldUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorld.BraveNewWorldUser)
}

void BraveNewWorldUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  seq_ = 0u;
  aid_ = 0u;
  lv_ = 0u;
  x_ = 0u;
  y_ = 0u;
  rts_ = 0u;
  hts_ = 0u;
  pts_ = 0u;
  bts_ = 0u;
  bt_ = 0u;
  tts_ = 0u;
  rl_ = 0u;
  mission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorldUser::~BraveNewWorldUser() {
  // @@protoc_insertion_point(destructor:BraveNewWorld.BraveNewWorldUser)
  SharedDtor();
}

void BraveNewWorldUser::SharedDtor() {
  if (this != default_instance_) {
    delete mission_;
  }
}

void BraveNewWorldUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorldUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorldUser_descriptor_;
}

const BraveNewWorldUser& BraveNewWorldUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorld_2eproto();
  return *default_instance_;
}

BraveNewWorldUser* BraveNewWorldUser::default_instance_ = NULL;

BraveNewWorldUser* BraveNewWorldUser::New() const {
  return new BraveNewWorldUser;
}

void BraveNewWorldUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BraveNewWorldUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, hts_);
  }
  if (_has_bits_[8 / 32] & 36608) {
    ZR_(pts_, tts_);
    rl_ = 0u;
  }
  if (has_mission()) {
    if (mission_ != NULL) mission_->::BraveNewWorld::BraveNewWorldUserMission::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hp_.Clear();
  his_.Clear();
  fav_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorldUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorld.BraveNewWorldUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // required uint32 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aid;
        break;
      }

      // required uint32 aid = 3;
      case 3: {
        if (tag == 24) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // required uint32 lv = 4;
      case 4: {
        if (tag == 32) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }

      // required uint32 x = 5;
      case 5: {
        if (tag == 40) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }

      // required uint32 y = 6;
      case 6: {
        if (tag == 48) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rts;
        break;
      }

      // required uint32 rts = 7;
      case 7: {
        if (tag == 56) {
         parse_rts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rts_)));
          set_has_rts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hts;
        break;
      }

      // required uint32 hts = 8;
      case 8: {
        if (tag == 64) {
         parse_hts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hts_)));
          set_has_hts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pts;
        break;
      }

      // required uint32 pts = 9;
      case 9: {
        if (tag == 72) {
         parse_pts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pts_)));
          set_has_pts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_bts;
        break;
      }

      // required uint32 bts = 10;
      case 10: {
        if (tag == 80) {
         parse_bts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bts_)));
          set_has_bts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_bt;
        break;
      }

      // required uint32 bt = 11;
      case 11: {
        if (tag == 88) {
         parse_bt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bt_)));
          set_has_bt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_tts;
        break;
      }

      // required uint32 tts = 12;
      case 12: {
        if (tag == 96) {
         parse_tts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tts_)));
          set_has_tts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hp;
        break;
      }

      // repeated uint32 hp = 13;
      case 13: {
        if (tag == 104) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_hp())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_hp;
        if (input->ExpectTag(114)) goto parse_his;
        break;
      }

      // repeated .BraveNewWorld.BraveNewWorldHistory his = 14;
      case 14: {
        if (tag == 114) {
         parse_his:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_his()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_his;
        if (input->ExpectTag(122)) goto parse_fav;
        break;
      }

      // repeated .BraveNewWorld.BraveNewWorldFavourate fav = 15;
      case 15: {
        if (tag == 122) {
         parse_fav:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fav()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_fav;
        if (input->ExpectTag(128)) goto parse_rl;
        break;
      }

      // optional uint32 rl = 16;
      case 16: {
        if (tag == 128) {
         parse_rl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rl_)));
          set_has_rl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_mission;
        break;
      }

      // optional .BraveNewWorld.BraveNewWorldUserMission mission = 17;
      case 17: {
        if (tag == 138) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorld.BraveNewWorldUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorld.BraveNewWorldUser)
  return false;
#undef DO_
}

void BraveNewWorldUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorld.BraveNewWorldUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq(), output);
  }

  // required uint32 aid = 3;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->aid(), output);
  }

  // required uint32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

  // required uint32 x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->x(), output);
  }

  // required uint32 y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->y(), output);
  }

  // required uint32 rts = 7;
  if (has_rts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rts(), output);
  }

  // required uint32 hts = 8;
  if (has_hts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hts(), output);
  }

  // required uint32 pts = 9;
  if (has_pts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pts(), output);
  }

  // required uint32 bts = 10;
  if (has_bts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bts(), output);
  }

  // required uint32 bt = 11;
  if (has_bt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bt(), output);
  }

  // required uint32 tts = 12;
  if (has_tts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tts(), output);
  }

  // repeated uint32 hp = 13;
  for (int i = 0; i < this->hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->hp(i), output);
  }

  // repeated .BraveNewWorld.BraveNewWorldHistory his = 14;
  for (int i = 0; i < this->his_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->his(i), output);
  }

  // repeated .BraveNewWorld.BraveNewWorldFavourate fav = 15;
  for (int i = 0; i < this->fav_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->fav(i), output);
  }

  // optional uint32 rl = 16;
  if (has_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->rl(), output);
  }

  // optional .BraveNewWorld.BraveNewWorldUserMission mission = 17;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->mission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorld.BraveNewWorldUser)
}

::google::protobuf::uint8* BraveNewWorldUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorld.BraveNewWorldUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq(), target);
  }

  // required uint32 aid = 3;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->aid(), target);
  }

  // required uint32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lv(), target);
  }

  // required uint32 x = 5;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->x(), target);
  }

  // required uint32 y = 6;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->y(), target);
  }

  // required uint32 rts = 7;
  if (has_rts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rts(), target);
  }

  // required uint32 hts = 8;
  if (has_hts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hts(), target);
  }

  // required uint32 pts = 9;
  if (has_pts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pts(), target);
  }

  // required uint32 bts = 10;
  if (has_bts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bts(), target);
  }

  // required uint32 bt = 11;
  if (has_bt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->bt(), target);
  }

  // required uint32 tts = 12;
  if (has_tts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tts(), target);
  }

  // repeated uint32 hp = 13;
  for (int i = 0; i < this->hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->hp(i), target);
  }

  // repeated .BraveNewWorld.BraveNewWorldHistory his = 14;
  for (int i = 0; i < this->his_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->his(i), target);
  }

  // repeated .BraveNewWorld.BraveNewWorldFavourate fav = 15;
  for (int i = 0; i < this->fav_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->fav(i), target);
  }

  // optional uint32 rl = 16;
  if (has_rl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->rl(), target);
  }

  // optional .BraveNewWorld.BraveNewWorldUserMission mission = 17;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->mission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorld.BraveNewWorldUser)
  return target;
}

int BraveNewWorldUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // required uint32 aid = 3;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 x = 5;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 6;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 rts = 7;
    if (has_rts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rts());
    }

    // required uint32 hts = 8;
    if (has_hts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hts());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 pts = 9;
    if (has_pts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pts());
    }

    // required uint32 bts = 10;
    if (has_bts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bts());
    }

    // required uint32 bt = 11;
    if (has_bt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bt());
    }

    // required uint32 tts = 12;
    if (has_tts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tts());
    }

    // optional uint32 rl = 16;
    if (has_rl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rl());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .BraveNewWorld.BraveNewWorldUserMission mission = 17;
    if (has_mission()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission());
    }

  }
  // repeated uint32 hp = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->hp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hp(i));
    }
    total_size += 1 * this->hp_size() + data_size;
  }

  // repeated .BraveNewWorld.BraveNewWorldHistory his = 14;
  total_size += 1 * this->his_size();
  for (int i = 0; i < this->his_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->his(i));
  }

  // repeated .BraveNewWorld.BraveNewWorldFavourate fav = 15;
  total_size += 1 * this->fav_size();
  for (int i = 0; i < this->fav_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fav(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorldUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorldUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorldUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorldUser::MergeFrom(const BraveNewWorldUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  hp_.MergeFrom(from.hp_);
  his_.MergeFrom(from.his_);
  fav_.MergeFrom(from.fav_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_rts()) {
      set_rts(from.rts());
    }
    if (from.has_hts()) {
      set_hts(from.hts());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pts()) {
      set_pts(from.pts());
    }
    if (from.has_bts()) {
      set_bts(from.bts());
    }
    if (from.has_bt()) {
      set_bt(from.bt());
    }
    if (from.has_tts()) {
      set_tts(from.tts());
    }
    if (from.has_rl()) {
      set_rl(from.rl());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mission()) {
      mutable_mission()->::BraveNewWorld::BraveNewWorldUserMission::MergeFrom(from.mission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorldUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorldUser::CopyFrom(const BraveNewWorldUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorldUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->his())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fav())) return false;
  if (has_mission()) {
    if (!this->mission().IsInitialized()) return false;
  }
  return true;
}

void BraveNewWorldUser::Swap(BraveNewWorldUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(seq_, other->seq_);
    std::swap(aid_, other->aid_);
    std::swap(lv_, other->lv_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(rts_, other->rts_);
    std::swap(hts_, other->hts_);
    std::swap(pts_, other->pts_);
    std::swap(bts_, other->bts_);
    std::swap(bt_, other->bt_);
    std::swap(tts_, other->tts_);
    hp_.Swap(&other->hp_);
    his_.Swap(&other->his_);
    fav_.Swap(&other->fav_);
    std::swap(rl_, other->rl_);
    std::swap(mission_, other->mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorldUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorldUser_descriptor_;
  metadata.reflection = BraveNewWorldUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorldPoint::kXFieldNumber;
const int BraveNewWorldPoint::kYFieldNumber;
const int BraveNewWorldPoint::kUidFieldNumber;
const int BraveNewWorldPoint::kDefFieldNumber;
const int BraveNewWorldPoint::kHeroFieldNumber;
const int BraveNewWorldPoint::kHpFieldNumber;
const int BraveNewWorldPoint::kFidFieldNumber;
const int BraveNewWorldPoint::kFtsFieldNumber;
const int BraveNewWorldPoint::kRtsFieldNumber;
const int BraveNewWorldPoint::kRcFieldNumber;
const int BraveNewWorldPoint::kMtypeFieldNumber;
const int BraveNewWorldPoint::kMcountFieldNumber;
const int BraveNewWorldPoint::kDeftsFieldNumber;
#endif  // !_MSC_VER

BraveNewWorldPoint::BraveNewWorldPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorld.BraveNewWorldPoint)
}

void BraveNewWorldPoint::InitAsDefaultInstance() {
}

BraveNewWorldPoint::BraveNewWorldPoint(const BraveNewWorldPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorld.BraveNewWorldPoint)
}

void BraveNewWorldPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  uid_ = 0u;
  def_ = false;
  hero_ = 0u;
  hp_ = 0u;
  fid_ = 0u;
  fts_ = 0u;
  rts_ = 0u;
  rc_ = 0u;
  mtype_ = 0u;
  mcount_ = 0u;
  defts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorldPoint::~BraveNewWorldPoint() {
  // @@protoc_insertion_point(destructor:BraveNewWorld.BraveNewWorldPoint)
  SharedDtor();
}

void BraveNewWorldPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BraveNewWorldPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorldPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorldPoint_descriptor_;
}

const BraveNewWorldPoint& BraveNewWorldPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorld_2eproto();
  return *default_instance_;
}

BraveNewWorldPoint* BraveNewWorldPoint::default_instance_ = NULL;

BraveNewWorldPoint* BraveNewWorldPoint::New() const {
  return new BraveNewWorldPoint;
}

void BraveNewWorldPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BraveNewWorldPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, fts_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(rts_, defts_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorldPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorld.BraveNewWorldPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (tag == 24) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_def;
        break;
      }

      // required bool def = 4;
      case 4: {
        if (tag == 32) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hero;
        break;
      }

      // required uint32 hero = 5;
      case 5: {
        if (tag == 40) {
         parse_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_)));
          set_has_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // required uint32 hp = 6;
      case 6: {
        if (tag == 48) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fid;
        break;
      }

      // required uint32 fid = 7;
      case 7: {
        if (tag == 56) {
         parse_fid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fid_)));
          set_has_fid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fts;
        break;
      }

      // required uint32 fts = 8;
      case 8: {
        if (tag == 64) {
         parse_fts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fts_)));
          set_has_fts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_rts;
        break;
      }

      // required uint32 rts = 9;
      case 9: {
        if (tag == 72) {
         parse_rts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rts_)));
          set_has_rts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_rc;
        break;
      }

      // optional uint32 rc = 10;
      case 10: {
        if (tag == 80) {
         parse_rc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rc_)));
          set_has_rc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mtype;
        break;
      }

      // optional uint32 mtype = 11;
      case 11: {
        if (tag == 88) {
         parse_mtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mtype_)));
          set_has_mtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mcount;
        break;
      }

      // optional uint32 mcount = 12;
      case 12: {
        if (tag == 96) {
         parse_mcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcount_)));
          set_has_mcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_defts;
        break;
      }

      // optional uint32 defts = 13;
      case 13: {
        if (tag == 104) {
         parse_defts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defts_)));
          set_has_defts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorld.BraveNewWorldPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorld.BraveNewWorldPoint)
  return false;
#undef DO_
}

void BraveNewWorldPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorld.BraveNewWorldPoint)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required bool def = 4;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->def(), output);
  }

  // required uint32 hero = 5;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hero(), output);
  }

  // required uint32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hp(), output);
  }

  // required uint32 fid = 7;
  if (has_fid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fid(), output);
  }

  // required uint32 fts = 8;
  if (has_fts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fts(), output);
  }

  // required uint32 rts = 9;
  if (has_rts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rts(), output);
  }

  // optional uint32 rc = 10;
  if (has_rc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rc(), output);
  }

  // optional uint32 mtype = 11;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mtype(), output);
  }

  // optional uint32 mcount = 12;
  if (has_mcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mcount(), output);
  }

  // optional uint32 defts = 13;
  if (has_defts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->defts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorld.BraveNewWorldPoint)
}

::google::protobuf::uint8* BraveNewWorldPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorld.BraveNewWorldPoint)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required bool def = 4;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->def(), target);
  }

  // required uint32 hero = 5;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hero(), target);
  }

  // required uint32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hp(), target);
  }

  // required uint32 fid = 7;
  if (has_fid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fid(), target);
  }

  // required uint32 fts = 8;
  if (has_fts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fts(), target);
  }

  // required uint32 rts = 9;
  if (has_rts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rts(), target);
  }

  // optional uint32 rc = 10;
  if (has_rc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rc(), target);
  }

  // optional uint32 mtype = 11;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mtype(), target);
  }

  // optional uint32 mcount = 12;
  if (has_mcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mcount(), target);
  }

  // optional uint32 defts = 13;
  if (has_defts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->defts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorld.BraveNewWorldPoint)
  return target;
}

int BraveNewWorldPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required bool def = 4;
    if (has_def()) {
      total_size += 1 + 1;
    }

    // required uint32 hero = 5;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero());
    }

    // required uint32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 fid = 7;
    if (has_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fid());
    }

    // required uint32 fts = 8;
    if (has_fts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fts());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 rts = 9;
    if (has_rts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rts());
    }

    // optional uint32 rc = 10;
    if (has_rc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rc());
    }

    // optional uint32 mtype = 11;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mtype());
    }

    // optional uint32 mcount = 12;
    if (has_mcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcount());
    }

    // optional uint32 defts = 13;
    if (has_defts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorldPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorldPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorldPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorldPoint::MergeFrom(const BraveNewWorldPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_hero()) {
      set_hero(from.hero());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_fid()) {
      set_fid(from.fid());
    }
    if (from.has_fts()) {
      set_fts(from.fts());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rts()) {
      set_rts(from.rts());
    }
    if (from.has_rc()) {
      set_rc(from.rc());
    }
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
    if (from.has_mcount()) {
      set_mcount(from.mcount());
    }
    if (from.has_defts()) {
      set_defts(from.defts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorldPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorldPoint::CopyFrom(const BraveNewWorldPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorldPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void BraveNewWorldPoint::Swap(BraveNewWorldPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(uid_, other->uid_);
    std::swap(def_, other->def_);
    std::swap(hero_, other->hero_);
    std::swap(hp_, other->hp_);
    std::swap(fid_, other->fid_);
    std::swap(fts_, other->fts_);
    std::swap(rts_, other->rts_);
    std::swap(rc_, other->rc_);
    std::swap(mtype_, other->mtype_);
    std::swap(mcount_, other->mcount_);
    std::swap(defts_, other->defts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorldPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorldPoint_descriptor_;
  metadata.reflection = BraveNewWorldPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorldZone::kIdFieldNumber;
const int BraveNewWorldZone::kAidFieldNumber;
const int BraveNewWorldZone::kTsFieldNumber;
#endif  // !_MSC_VER

BraveNewWorldZone::BraveNewWorldZone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorld.BraveNewWorldZone)
}

void BraveNewWorldZone::InitAsDefaultInstance() {
}

BraveNewWorldZone::BraveNewWorldZone(const BraveNewWorldZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorld.BraveNewWorldZone)
}

void BraveNewWorldZone::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  aid_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorldZone::~BraveNewWorldZone() {
  // @@protoc_insertion_point(destructor:BraveNewWorld.BraveNewWorldZone)
  SharedDtor();
}

void BraveNewWorldZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BraveNewWorldZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorldZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorldZone_descriptor_;
}

const BraveNewWorldZone& BraveNewWorldZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorld_2eproto();
  return *default_instance_;
}

BraveNewWorldZone* BraveNewWorldZone::default_instance_ = NULL;

BraveNewWorldZone* BraveNewWorldZone::New() const {
  return new BraveNewWorldZone;
}

void BraveNewWorldZone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BraveNewWorldZone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorldZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorld.BraveNewWorldZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aid;
        break;
      }

      // required uint32 aid = 2;
      case 2: {
        if (tag == 16) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // required uint32 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorld.BraveNewWorldZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorld.BraveNewWorldZone)
  return false;
#undef DO_
}

void BraveNewWorldZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorld.BraveNewWorldZone)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aid(), output);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorld.BraveNewWorldZone)
}

::google::protobuf::uint8* BraveNewWorldZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorld.BraveNewWorldZone)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aid(), target);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorld.BraveNewWorldZone)
  return target;
}

int BraveNewWorldZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 aid = 2;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorldZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorldZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorldZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorldZone::MergeFrom(const BraveNewWorldZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorldZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorldZone::CopyFrom(const BraveNewWorldZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorldZone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BraveNewWorldZone::Swap(BraveNewWorldZone* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(aid_, other->aid_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorldZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorldZone_descriptor_;
  metadata.reflection = BraveNewWorldZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorld::kLandFieldNumber;
const int BraveNewWorld::kUserFieldNumber;
const int BraveNewWorld::kZoneFieldNumber;
const int BraveNewWorld::kAllianceFieldNumber;
#endif  // !_MSC_VER

BraveNewWorld::BraveNewWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorld.BraveNewWorld)
}

void BraveNewWorld::InitAsDefaultInstance() {
}

BraveNewWorld::BraveNewWorld(const BraveNewWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorld.BraveNewWorld)
}

void BraveNewWorld::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorld::~BraveNewWorld() {
  // @@protoc_insertion_point(destructor:BraveNewWorld.BraveNewWorld)
  SharedDtor();
}

void BraveNewWorld::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BraveNewWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorld_descriptor_;
}

const BraveNewWorld& BraveNewWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorld_2eproto();
  return *default_instance_;
}

BraveNewWorld* BraveNewWorld::default_instance_ = NULL;

BraveNewWorld* BraveNewWorld::New() const {
  return new BraveNewWorld;
}

void BraveNewWorld::Clear() {
  land_.Clear();
  user_.Clear();
  zone_.Clear();
  alliance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorld.BraveNewWorld)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BraveNewWorld.BraveNewWorldPoint land = 1;
      case 1: {
        if (tag == 10) {
         parse_land:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_land()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_land;
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // repeated .BraveNewWorld.BraveNewWorldUser user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        if (input->ExpectTag(26)) goto parse_zone;
        break;
      }

      // repeated .BraveNewWorld.BraveNewWorldZone zone = 3;
      case 3: {
        if (tag == 26) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zone;
        if (input->ExpectTag(34)) goto parse_alliance;
        break;
      }

      // repeated .BraveNewWorld.BraveNewWorldAlliance alliance = 4;
      case 4: {
        if (tag == 34) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_alliance;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorld.BraveNewWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorld.BraveNewWorld)
  return false;
#undef DO_
}

void BraveNewWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorld.BraveNewWorld)
  // repeated .BraveNewWorld.BraveNewWorldPoint land = 1;
  for (int i = 0; i < this->land_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->land(i), output);
  }

  // repeated .BraveNewWorld.BraveNewWorldUser user = 2;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(i), output);
  }

  // repeated .BraveNewWorld.BraveNewWorldZone zone = 3;
  for (int i = 0; i < this->zone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zone(i), output);
  }

  // repeated .BraveNewWorld.BraveNewWorldAlliance alliance = 4;
  for (int i = 0; i < this->alliance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->alliance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorld.BraveNewWorld)
}

::google::protobuf::uint8* BraveNewWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorld.BraveNewWorld)
  // repeated .BraveNewWorld.BraveNewWorldPoint land = 1;
  for (int i = 0; i < this->land_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->land(i), target);
  }

  // repeated .BraveNewWorld.BraveNewWorldUser user = 2;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(i), target);
  }

  // repeated .BraveNewWorld.BraveNewWorldZone zone = 3;
  for (int i = 0; i < this->zone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zone(i), target);
  }

  // repeated .BraveNewWorld.BraveNewWorldAlliance alliance = 4;
  for (int i = 0; i < this->alliance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->alliance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorld.BraveNewWorld)
  return target;
}

int BraveNewWorld::ByteSize() const {
  int total_size = 0;

  // repeated .BraveNewWorld.BraveNewWorldPoint land = 1;
  total_size += 1 * this->land_size();
  for (int i = 0; i < this->land_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->land(i));
  }

  // repeated .BraveNewWorld.BraveNewWorldUser user = 2;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  // repeated .BraveNewWorld.BraveNewWorldZone zone = 3;
  total_size += 1 * this->zone_size();
  for (int i = 0; i < this->zone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zone(i));
  }

  // repeated .BraveNewWorld.BraveNewWorldAlliance alliance = 4;
  total_size += 1 * this->alliance_size();
  for (int i = 0; i < this->alliance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alliance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorld::MergeFrom(const BraveNewWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  land_.MergeFrom(from.land_);
  user_.MergeFrom(from.user_);
  zone_.MergeFrom(from.zone_);
  alliance_.MergeFrom(from.alliance_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorld::CopyFrom(const BraveNewWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorld::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->land())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->zone())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->alliance())) return false;
  return true;
}

void BraveNewWorld::Swap(BraveNewWorld* other) {
  if (other != this) {
    land_.Swap(&other->land_);
    user_.Swap(&other->user_);
    zone_.Swap(&other->zone_);
    alliance_.Swap(&other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorld_descriptor_;
  metadata.reflection = BraveNewWorld_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BraveNewWorld

// @@protoc_insertion_point(global_scope)
