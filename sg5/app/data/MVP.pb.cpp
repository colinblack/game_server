// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MVP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MVP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MVP {

namespace {

const ::google::protobuf::Descriptor* MVPHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVPHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVPUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVPUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* MVP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MVP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MVP_2eproto() {
  protobuf_AddDesc_MVP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MVP.proto");
  GOOGLE_CHECK(file != NULL);
  MVPHero_descriptor_ = file->message_type(0);
  static const int MVPHero_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPHero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPHero, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPHero, dehp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPHero, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPHero, name_),
  };
  MVPHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MVPHero_descriptor_,
      MVPHero::default_instance_,
      MVPHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MVPHero));
  MVPUser_descriptor_ = file->message_type(1);
  static const int MVPUser_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, mcity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, fid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, fts_),
  };
  MVPUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MVPUser_descriptor_,
      MVPUser::default_instance_,
      MVPUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVPUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MVPUser));
  MVP_descriptor_ = file->message_type(2);
  static const int MVP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVP, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVP, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVP, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVP, all_),
  };
  MVP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MVP_descriptor_,
      MVP::default_instance_,
      MVP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MVP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MVP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MVP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MVPHero_descriptor_, &MVPHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MVPUser_descriptor_, &MVPUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MVP_descriptor_, &MVP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MVP_2eproto() {
  delete MVPHero::default_instance_;
  delete MVPHero_reflection_;
  delete MVPUser::default_instance_;
  delete MVPUser_reflection_;
  delete MVP::default_instance_;
  delete MVP_reflection_;
}

void protobuf_AddDesc_MVP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tMVP.proto\022\003MVP\"K\n\007MVPHero\022\n\n\002id\030\001 \002(\r\022"
    "\n\n\002lv\030\002 \002(\r\022\014\n\004dehp\030\003 \002(\r\022\014\n\004icon\030\004 \002(\014\022"
    "\014\n\004name\030\005 \002(\014\"\222\001\n\007MVPUser\022\014\n\004rank\030\001 \002(\r\022"
    "\013\n\003uid\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\013\n\003fig\030\004 \002(\014\022"
    "\014\n\004sign\030\005 \002(\014\022\r\n\005mcity\030\006 \002(\r\022\032\n\004hero\030\007 \002"
    "(\0132\014.MVP.MVPHero\022\013\n\003fid\030\010 \002(\r\022\013\n\003fts\030\t \002"
    "(\r\"w\n\003MVP\022\032\n\004user\030\001 \003(\0132\014.MVP.MVPUser\022\034\n"
    "\006player\030\002 \003(\0132\014.MVP.MVPUser\022\033\n\005fight\030\003 \003"
    "(\0132\014.MVP.MVPUser\022\031\n\003all\030\004 \003(\0132\014.MVP.MVPU"
    "ser", 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MVP.proto", &protobuf_RegisterTypes);
  MVPHero::default_instance_ = new MVPHero();
  MVPUser::default_instance_ = new MVPUser();
  MVP::default_instance_ = new MVP();
  MVPHero::default_instance_->InitAsDefaultInstance();
  MVPUser::default_instance_->InitAsDefaultInstance();
  MVP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MVP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MVP_2eproto {
  StaticDescriptorInitializer_MVP_2eproto() {
    protobuf_AddDesc_MVP_2eproto();
  }
} static_descriptor_initializer_MVP_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MVPHero::kIdFieldNumber;
const int MVPHero::kLvFieldNumber;
const int MVPHero::kDehpFieldNumber;
const int MVPHero::kIconFieldNumber;
const int MVPHero::kNameFieldNumber;
#endif  // !_MSC_VER

MVPHero::MVPHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVP.MVPHero)
}

void MVPHero::InitAsDefaultInstance() {
}

MVPHero::MVPHero(const MVPHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVP.MVPHero)
}

void MVPHero::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  lv_ = 0u;
  dehp_ = 0u;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVPHero::~MVPHero() {
  // @@protoc_insertion_point(destructor:MVP.MVPHero)
  SharedDtor();
}

void MVPHero::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MVPHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVPHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVPHero_descriptor_;
}

const MVPHero& MVPHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MVP_2eproto();
  return *default_instance_;
}

MVPHero* MVPHero::default_instance_ = NULL;

MVPHero* MVPHero::New() const {
  return new MVPHero;
}

void MVPHero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MVPHero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, lv_);
    dehp_ = 0u;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MVPHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVP.MVPHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // required uint32 lv = 2;
      case 2: {
        if (tag == 16) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dehp;
        break;
      }

      // required uint32 dehp = 3;
      case 3: {
        if (tag == 24) {
         parse_dehp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dehp_)));
          set_has_dehp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // required bytes icon = 4;
      case 4: {
        if (tag == 34) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required bytes name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVP.MVPHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVP.MVPHero)
  return false;
#undef DO_
}

void MVPHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVP.MVPHero)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  // required uint32 dehp = 3;
  if (has_dehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dehp(), output);
  }

  // required bytes icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->icon(), output);
  }

  // required bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVP.MVPHero)
}

::google::protobuf::uint8* MVPHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVP.MVPHero)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  // required uint32 dehp = 3;
  if (has_dehp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dehp(), target);
  }

  // required bytes icon = 4;
  if (has_icon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->icon(), target);
  }

  // required bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVP.MVPHero)
  return target;
}

int MVPHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 dehp = 3;
    if (has_dehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dehp());
    }

    // required bytes icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon());
    }

    // required bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVPHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MVPHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MVPHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MVPHero::MergeFrom(const MVPHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_dehp()) {
      set_dehp(from.dehp());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MVPHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVPHero::CopyFrom(const MVPHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVPHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MVPHero::Swap(MVPHero* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(dehp_, other->dehp_);
    std::swap(icon_, other->icon_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MVPHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVPHero_descriptor_;
  metadata.reflection = MVPHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MVPUser::kRankFieldNumber;
const int MVPUser::kUidFieldNumber;
const int MVPUser::kNameFieldNumber;
const int MVPUser::kFigFieldNumber;
const int MVPUser::kSignFieldNumber;
const int MVPUser::kMcityFieldNumber;
const int MVPUser::kHeroFieldNumber;
const int MVPUser::kFidFieldNumber;
const int MVPUser::kFtsFieldNumber;
#endif  // !_MSC_VER

MVPUser::MVPUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVP.MVPUser)
}

void MVPUser::InitAsDefaultInstance() {
  hero_ = const_cast< ::MVP::MVPHero*>(&::MVP::MVPHero::default_instance());
}

MVPUser::MVPUser(const MVPUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVP.MVPUser)
}

void MVPUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rank_ = 0u;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mcity_ = 0u;
  hero_ = NULL;
  fid_ = 0u;
  fts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVPUser::~MVPUser() {
  // @@protoc_insertion_point(destructor:MVP.MVPUser)
  SharedDtor();
}

void MVPUser::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
    delete hero_;
  }
}

void MVPUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVPUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVPUser_descriptor_;
}

const MVPUser& MVPUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MVP_2eproto();
  return *default_instance_;
}

MVPUser* MVPUser::default_instance_ = NULL;

MVPUser* MVPUser::New() const {
  return new MVPUser;
}

void MVPUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MVPUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rank_, uid_);
    ZR_(mcity_, fid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::MVP::MVPHero::Clear();
    }
  }
  fts_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MVPUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVP.MVPUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (tag == 16) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fig;
        break;
      }

      // required bytes fig = 4;
      case 4: {
        if (tag == 34) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sign;
        break;
      }

      // required bytes sign = 5;
      case 5: {
        if (tag == 42) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mcity;
        break;
      }

      // required uint32 mcity = 6;
      case 6: {
        if (tag == 48) {
         parse_mcity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcity_)));
          set_has_mcity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_hero;
        break;
      }

      // required .MVP.MVPHero hero = 7;
      case 7: {
        if (tag == 58) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fid;
        break;
      }

      // required uint32 fid = 8;
      case 8: {
        if (tag == 64) {
         parse_fid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fid_)));
          set_has_fid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fts;
        break;
      }

      // required uint32 fts = 9;
      case 9: {
        if (tag == 72) {
         parse_fts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fts_)));
          set_has_fts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVP.MVPUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVP.MVPUser)
  return false;
#undef DO_
}

void MVPUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVP.MVPUser)
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->name(), output);
  }

  // required bytes fig = 4;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->fig(), output);
  }

  // required bytes sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sign(), output);
  }

  // required uint32 mcity = 6;
  if (has_mcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mcity(), output);
  }

  // required .MVP.MVPHero hero = 7;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->hero(), output);
  }

  // required uint32 fid = 8;
  if (has_fid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fid(), output);
  }

  // required uint32 fts = 9;
  if (has_fts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVP.MVPUser)
}

::google::protobuf::uint8* MVPUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVP.MVPUser)
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes fig = 4;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->fig(), target);
  }

  // required bytes sign = 5;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sign(), target);
  }

  // required uint32 mcity = 6;
  if (has_mcity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mcity(), target);
  }

  // required .MVP.MVPHero hero = 7;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->hero(), target);
  }

  // required uint32 fid = 8;
  if (has_fid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fid(), target);
  }

  // required uint32 fts = 9;
  if (has_fts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVP.MVPUser)
  return target;
}

int MVPUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes fig = 4;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

    // required bytes sign = 5;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

    // required uint32 mcity = 6;
    if (has_mcity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcity());
    }

    // required .MVP.MVPHero hero = 7;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

    // required uint32 fid = 8;
    if (has_fid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 fts = 9;
    if (has_fts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVPUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MVPUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MVPUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MVPUser::MergeFrom(const MVPUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_mcity()) {
      set_mcity(from.mcity());
    }
    if (from.has_hero()) {
      mutable_hero()->::MVP::MVPHero::MergeFrom(from.hero());
    }
    if (from.has_fid()) {
      set_fid(from.fid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fts()) {
      set_fts(from.fts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MVPUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVPUser::CopyFrom(const MVPUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVPUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void MVPUser::Swap(MVPUser* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(sign_, other->sign_);
    std::swap(mcity_, other->mcity_);
    std::swap(hero_, other->hero_);
    std::swap(fid_, other->fid_);
    std::swap(fts_, other->fts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MVPUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVPUser_descriptor_;
  metadata.reflection = MVPUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MVP::kUserFieldNumber;
const int MVP::kPlayerFieldNumber;
const int MVP::kFightFieldNumber;
const int MVP::kAllFieldNumber;
#endif  // !_MSC_VER

MVP::MVP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MVP.MVP)
}

void MVP::InitAsDefaultInstance() {
}

MVP::MVP(const MVP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MVP.MVP)
}

void MVP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MVP::~MVP() {
  // @@protoc_insertion_point(destructor:MVP.MVP)
  SharedDtor();
}

void MVP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MVP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MVP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MVP_descriptor_;
}

const MVP& MVP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MVP_2eproto();
  return *default_instance_;
}

MVP* MVP::default_instance_ = NULL;

MVP* MVP::New() const {
  return new MVP;
}

void MVP::Clear() {
  user_.Clear();
  player_.Clear();
  fight_.Clear();
  all_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MVP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MVP.MVP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MVP.MVPUser user = 1;
      case 1: {
        if (tag == 10) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // repeated .MVP.MVPUser player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        if (input->ExpectTag(26)) goto parse_fight;
        break;
      }

      // repeated .MVP.MVPUser fight = 3;
      case 3: {
        if (tag == 26) {
         parse_fight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fight;
        if (input->ExpectTag(34)) goto parse_all;
        break;
      }

      // repeated .MVP.MVPUser all = 4;
      case 4: {
        if (tag == 34) {
         parse_all:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_all;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MVP.MVP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MVP.MVP)
  return false;
#undef DO_
}

void MVP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MVP.MVP)
  // repeated .MVP.MVPUser user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(i), output);
  }

  // repeated .MVP.MVPUser player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(i), output);
  }

  // repeated .MVP.MVPUser fight = 3;
  for (int i = 0; i < this->fight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fight(i), output);
  }

  // repeated .MVP.MVPUser all = 4;
  for (int i = 0; i < this->all_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->all(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MVP.MVP)
}

::google::protobuf::uint8* MVP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MVP.MVP)
  // repeated .MVP.MVPUser user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(i), target);
  }

  // repeated .MVP.MVPUser player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(i), target);
  }

  // repeated .MVP.MVPUser fight = 3;
  for (int i = 0; i < this->fight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fight(i), target);
  }

  // repeated .MVP.MVPUser all = 4;
  for (int i = 0; i < this->all_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->all(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MVP.MVP)
  return target;
}

int MVP::ByteSize() const {
  int total_size = 0;

  // repeated .MVP.MVPUser user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  // repeated .MVP.MVPUser player = 2;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  // repeated .MVP.MVPUser fight = 3;
  total_size += 1 * this->fight_size();
  for (int i = 0; i < this->fight_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fight(i));
  }

  // repeated .MVP.MVPUser all = 4;
  total_size += 1 * this->all_size();
  for (int i = 0; i < this->all_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MVP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MVP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MVP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MVP::MergeFrom(const MVP& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  player_.MergeFrom(from.player_);
  fight_.MergeFrom(from.fight_);
  all_.MergeFrom(from.all_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MVP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MVP::CopyFrom(const MVP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MVP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->player())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fight())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->all())) return false;
  return true;
}

void MVP::Swap(MVP* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    player_.Swap(&other->player_);
    fight_.Swap(&other->fight_);
    all_.Swap(&other->all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MVP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MVP_descriptor_;
  metadata.reflection = MVP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MVP

// @@protoc_insertion_point(global_scope)
