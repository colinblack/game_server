// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NewDouJiang.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NewDouJiang.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NewDouJiang {

namespace {

const ::google::protobuf::Descriptor* NewDouJiangHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewDouJiangHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewDouJiangAttackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewDouJiangAttackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewDouJiangUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewDouJiangUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewDouJiang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewDouJiang_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NewDouJiang_2eproto() {
  protobuf_AddDesc_NewDouJiang_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NewDouJiang.proto");
  GOOGLE_CHECK(file != NULL);
  NewDouJiangHistory_descriptor_ = file->message_type(0);
  static const int NewDouJiangHistory_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangHistory, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangHistory, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangHistory, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangHistory, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangHistory, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangHistory, hasfc_),
  };
  NewDouJiangHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewDouJiangHistory_descriptor_,
      NewDouJiangHistory::default_instance_,
      NewDouJiangHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewDouJiangHistory));
  NewDouJiangAttackInfo_descriptor_ = file->message_type(1);
  static const int NewDouJiangAttackInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangAttackInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangAttackInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangAttackInfo, ts_),
  };
  NewDouJiangAttackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewDouJiangAttackInfo_descriptor_,
      NewDouJiangAttackInfo::default_instance_,
      NewDouJiangAttackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangAttackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangAttackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewDouJiangAttackInfo));
  NewDouJiangUser_descriptor_ = file->message_type(2);
  static const int NewDouJiangUser_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, pppoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, fcpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, zspoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, numpp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, szheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, ppheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, fcheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, zsheros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, his_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, flist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, seq_),
  };
  NewDouJiangUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewDouJiangUser_descriptor_,
      NewDouJiangUser::default_instance_,
      NewDouJiangUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiangUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewDouJiangUser));
  NewDouJiang_descriptor_ = file->message_type(3);
  static const int NewDouJiang_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiang, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiang, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiang, rewarded_),
  };
  NewDouJiang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewDouJiang_descriptor_,
      NewDouJiang::default_instance_,
      NewDouJiang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDouJiang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewDouJiang));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NewDouJiang_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewDouJiangHistory_descriptor_, &NewDouJiangHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewDouJiangAttackInfo_descriptor_, &NewDouJiangAttackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewDouJiangUser_descriptor_, &NewDouJiangUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewDouJiang_descriptor_, &NewDouJiang::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NewDouJiang_2eproto() {
  delete NewDouJiangHistory::default_instance_;
  delete NewDouJiangHistory_reflection_;
  delete NewDouJiangAttackInfo::default_instance_;
  delete NewDouJiangAttackInfo_reflection_;
  delete NewDouJiangUser::default_instance_;
  delete NewDouJiangUser_reflection_;
  delete NewDouJiang::default_instance_;
  delete NewDouJiang_reflection_;
}

void protobuf_AddDesc_NewDouJiang_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021NewDouJiang.proto\022\013NewDouJiang\"d\n\022NewD"
    "ouJiangHistory\022\013\n\003uid\030\001 \002(\r\022\014\n\004type\030\002 \002("
    "\r\022\t\n\001n\030\003 \002(\005\022\r\n\005point\030\004 \002(\005\022\n\n\002ts\030\005 \002(\r\022"
    "\r\n\005hasfc\030\006 \002(\010\">\n\025NewDouJiangAttackInfo\022"
    "\013\n\003uid\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\n\n\002ts\030\003 \002(\r\"\236"
    "\002\n\017NewDouJiangUser\022\013\n\003uid\030\001 \002(\r\022\n\n\002ts\030\002 "
    "\002(\r\022\017\n\007pppoint\030\003 \002(\005\022\017\n\007fcpoint\030\004 \002(\005\022\017\n"
    "\007zspoint\030\005 \002(\005\022\r\n\005numpp\030\006 \002(\r\022\017\n\007szheros"
    "\030\007 \003(\r\022\017\n\007ppheros\030\010 \003(\r\022\017\n\007fcheros\030\t \003(\r"
    "\022\017\n\007zsheros\030\n \003(\r\022,\n\003his\030\013 \003(\0132\037.NewDouJ"
    "iang.NewDouJiangHistory\0221\n\005flist\030\014 \003(\0132\""
    ".NewDouJiang.NewDouJiangAttackInfo\022\013\n\003se"
    "q\030\r \002(\r\"X\n\013NewDouJiang\022*\n\004user\030\001 \003(\0132\034.N"
    "ewDouJiang.NewDouJiangUser\022\013\n\003ver\030\002 \002(\005\022"
    "\020\n\010rewarded\030\003 \002(\005", 577);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NewDouJiang.proto", &protobuf_RegisterTypes);
  NewDouJiangHistory::default_instance_ = new NewDouJiangHistory();
  NewDouJiangAttackInfo::default_instance_ = new NewDouJiangAttackInfo();
  NewDouJiangUser::default_instance_ = new NewDouJiangUser();
  NewDouJiang::default_instance_ = new NewDouJiang();
  NewDouJiangHistory::default_instance_->InitAsDefaultInstance();
  NewDouJiangAttackInfo::default_instance_->InitAsDefaultInstance();
  NewDouJiangUser::default_instance_->InitAsDefaultInstance();
  NewDouJiang::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NewDouJiang_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NewDouJiang_2eproto {
  StaticDescriptorInitializer_NewDouJiang_2eproto() {
    protobuf_AddDesc_NewDouJiang_2eproto();
  }
} static_descriptor_initializer_NewDouJiang_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NewDouJiangHistory::kUidFieldNumber;
const int NewDouJiangHistory::kTypeFieldNumber;
const int NewDouJiangHistory::kNFieldNumber;
const int NewDouJiangHistory::kPointFieldNumber;
const int NewDouJiangHistory::kTsFieldNumber;
const int NewDouJiangHistory::kHasfcFieldNumber;
#endif  // !_MSC_VER

NewDouJiangHistory::NewDouJiangHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewDouJiang.NewDouJiangHistory)
}

void NewDouJiangHistory::InitAsDefaultInstance() {
}

NewDouJiangHistory::NewDouJiangHistory(const NewDouJiangHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewDouJiang.NewDouJiangHistory)
}

void NewDouJiangHistory::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  type_ = 0u;
  n_ = 0;
  point_ = 0;
  ts_ = 0u;
  hasfc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewDouJiangHistory::~NewDouJiangHistory() {
  // @@protoc_insertion_point(destructor:NewDouJiang.NewDouJiangHistory)
  SharedDtor();
}

void NewDouJiangHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewDouJiangHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewDouJiangHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewDouJiangHistory_descriptor_;
}

const NewDouJiangHistory& NewDouJiangHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewDouJiang_2eproto();
  return *default_instance_;
}

NewDouJiangHistory* NewDouJiangHistory::default_instance_ = NULL;

NewDouJiangHistory* NewDouJiangHistory::New() const {
  return new NewDouJiangHistory;
}

void NewDouJiangHistory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewDouJiangHistory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, hasfc_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewDouJiangHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewDouJiang.NewDouJiangHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_n;
        break;
      }

      // required int32 n = 3;
      case 3: {
        if (tag == 24) {
         parse_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_point;
        break;
      }

      // required int32 point = 4;
      case 4: {
        if (tag == 32) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // required uint32 ts = 5;
      case 5: {
        if (tag == 40) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hasfc;
        break;
      }

      // required bool hasfc = 6;
      case 6: {
        if (tag == 48) {
         parse_hasfc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasfc_)));
          set_has_hasfc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewDouJiang.NewDouJiangHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewDouJiang.NewDouJiangHistory)
  return false;
#undef DO_
}

void NewDouJiangHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewDouJiang.NewDouJiangHistory)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required int32 n = 3;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->n(), output);
  }

  // required int32 point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->point(), output);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ts(), output);
  }

  // required bool hasfc = 6;
  if (has_hasfc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->hasfc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewDouJiang.NewDouJiangHistory)
}

::google::protobuf::uint8* NewDouJiangHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewDouJiang.NewDouJiangHistory)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required int32 n = 3;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->n(), target);
  }

  // required int32 point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->point(), target);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ts(), target);
  }

  // required bool hasfc = 6;
  if (has_hasfc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->hasfc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewDouJiang.NewDouJiangHistory)
  return target;
}

int NewDouJiangHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required int32 n = 3;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n());
    }

    // required int32 point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // required uint32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required bool hasfc = 6;
    if (has_hasfc()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDouJiangHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewDouJiangHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewDouJiangHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewDouJiangHistory::MergeFrom(const NewDouJiangHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_hasfc()) {
      set_hasfc(from.hasfc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewDouJiangHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewDouJiangHistory::CopyFrom(const NewDouJiangHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDouJiangHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void NewDouJiangHistory::Swap(NewDouJiangHistory* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(n_, other->n_);
    std::swap(point_, other->point_);
    std::swap(ts_, other->ts_);
    std::swap(hasfc_, other->hasfc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewDouJiangHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewDouJiangHistory_descriptor_;
  metadata.reflection = NewDouJiangHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewDouJiangAttackInfo::kUidFieldNumber;
const int NewDouJiangAttackInfo::kTypeFieldNumber;
const int NewDouJiangAttackInfo::kTsFieldNumber;
#endif  // !_MSC_VER

NewDouJiangAttackInfo::NewDouJiangAttackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewDouJiang.NewDouJiangAttackInfo)
}

void NewDouJiangAttackInfo::InitAsDefaultInstance() {
}

NewDouJiangAttackInfo::NewDouJiangAttackInfo(const NewDouJiangAttackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewDouJiang.NewDouJiangAttackInfo)
}

void NewDouJiangAttackInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  type_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewDouJiangAttackInfo::~NewDouJiangAttackInfo() {
  // @@protoc_insertion_point(destructor:NewDouJiang.NewDouJiangAttackInfo)
  SharedDtor();
}

void NewDouJiangAttackInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewDouJiangAttackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewDouJiangAttackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewDouJiangAttackInfo_descriptor_;
}

const NewDouJiangAttackInfo& NewDouJiangAttackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewDouJiang_2eproto();
  return *default_instance_;
}

NewDouJiangAttackInfo* NewDouJiangAttackInfo::default_instance_ = NULL;

NewDouJiangAttackInfo* NewDouJiangAttackInfo::New() const {
  return new NewDouJiangAttackInfo;
}

void NewDouJiangAttackInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewDouJiangAttackInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewDouJiangAttackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewDouJiang.NewDouJiangAttackInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // required uint32 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewDouJiang.NewDouJiangAttackInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewDouJiang.NewDouJiangAttackInfo)
  return false;
#undef DO_
}

void NewDouJiangAttackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewDouJiang.NewDouJiangAttackInfo)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewDouJiang.NewDouJiangAttackInfo)
}

::google::protobuf::uint8* NewDouJiangAttackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewDouJiang.NewDouJiangAttackInfo)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewDouJiang.NewDouJiangAttackInfo)
  return target;
}

int NewDouJiangAttackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDouJiangAttackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewDouJiangAttackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewDouJiangAttackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewDouJiangAttackInfo::MergeFrom(const NewDouJiangAttackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewDouJiangAttackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewDouJiangAttackInfo::CopyFrom(const NewDouJiangAttackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDouJiangAttackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NewDouJiangAttackInfo::Swap(NewDouJiangAttackInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewDouJiangAttackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewDouJiangAttackInfo_descriptor_;
  metadata.reflection = NewDouJiangAttackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewDouJiangUser::kUidFieldNumber;
const int NewDouJiangUser::kTsFieldNumber;
const int NewDouJiangUser::kPppointFieldNumber;
const int NewDouJiangUser::kFcpointFieldNumber;
const int NewDouJiangUser::kZspointFieldNumber;
const int NewDouJiangUser::kNumppFieldNumber;
const int NewDouJiangUser::kSzherosFieldNumber;
const int NewDouJiangUser::kPpherosFieldNumber;
const int NewDouJiangUser::kFcherosFieldNumber;
const int NewDouJiangUser::kZsherosFieldNumber;
const int NewDouJiangUser::kHisFieldNumber;
const int NewDouJiangUser::kFlistFieldNumber;
const int NewDouJiangUser::kSeqFieldNumber;
#endif  // !_MSC_VER

NewDouJiangUser::NewDouJiangUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewDouJiang.NewDouJiangUser)
}

void NewDouJiangUser::InitAsDefaultInstance() {
}

NewDouJiangUser::NewDouJiangUser(const NewDouJiangUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewDouJiang.NewDouJiangUser)
}

void NewDouJiangUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ts_ = 0u;
  pppoint_ = 0;
  fcpoint_ = 0;
  zspoint_ = 0;
  numpp_ = 0u;
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewDouJiangUser::~NewDouJiangUser() {
  // @@protoc_insertion_point(destructor:NewDouJiang.NewDouJiangUser)
  SharedDtor();
}

void NewDouJiangUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewDouJiangUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewDouJiangUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewDouJiangUser_descriptor_;
}

const NewDouJiangUser& NewDouJiangUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewDouJiang_2eproto();
  return *default_instance_;
}

NewDouJiangUser* NewDouJiangUser::default_instance_ = NULL;

NewDouJiangUser* NewDouJiangUser::New() const {
  return new NewDouJiangUser;
}

void NewDouJiangUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewDouJiangUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, numpp_);
  }
  seq_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  szheros_.Clear();
  ppheros_.Clear();
  fcheros_.Clear();
  zsheros_.Clear();
  his_.Clear();
  flist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewDouJiangUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewDouJiang.NewDouJiangUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pppoint;
        break;
      }

      // required int32 pppoint = 3;
      case 3: {
        if (tag == 24) {
         parse_pppoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pppoint_)));
          set_has_pppoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fcpoint;
        break;
      }

      // required int32 fcpoint = 4;
      case 4: {
        if (tag == 32) {
         parse_fcpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcpoint_)));
          set_has_fcpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zspoint;
        break;
      }

      // required int32 zspoint = 5;
      case 5: {
        if (tag == 40) {
         parse_zspoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zspoint_)));
          set_has_zspoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_numpp;
        break;
      }

      // required uint32 numpp = 6;
      case 6: {
        if (tag == 48) {
         parse_numpp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numpp_)));
          set_has_numpp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_szheros;
        break;
      }

      // repeated uint32 szheros = 7;
      case 7: {
        if (tag == 56) {
         parse_szheros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_szheros())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_szheros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_szheros;
        if (input->ExpectTag(64)) goto parse_ppheros;
        break;
      }

      // repeated uint32 ppheros = 8;
      case 8: {
        if (tag == 64) {
         parse_ppheros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_ppheros())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ppheros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ppheros;
        if (input->ExpectTag(72)) goto parse_fcheros;
        break;
      }

      // repeated uint32 fcheros = 9;
      case 9: {
        if (tag == 72) {
         parse_fcheros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_fcheros())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fcheros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fcheros;
        if (input->ExpectTag(80)) goto parse_zsheros;
        break;
      }

      // repeated uint32 zsheros = 10;
      case 10: {
        if (tag == 80) {
         parse_zsheros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_zsheros())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_zsheros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_zsheros;
        if (input->ExpectTag(90)) goto parse_his;
        break;
      }

      // repeated .NewDouJiang.NewDouJiangHistory his = 11;
      case 11: {
        if (tag == 90) {
         parse_his:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_his()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_his;
        if (input->ExpectTag(98)) goto parse_flist;
        break;
      }

      // repeated .NewDouJiang.NewDouJiangAttackInfo flist = 12;
      case 12: {
        if (tag == 98) {
         parse_flist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_flist;
        if (input->ExpectTag(104)) goto parse_seq;
        break;
      }

      // required uint32 seq = 13;
      case 13: {
        if (tag == 104) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewDouJiang.NewDouJiangUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewDouJiang.NewDouJiangUser)
  return false;
#undef DO_
}

void NewDouJiangUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewDouJiang.NewDouJiangUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  // required int32 pppoint = 3;
  if (has_pppoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pppoint(), output);
  }

  // required int32 fcpoint = 4;
  if (has_fcpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fcpoint(), output);
  }

  // required int32 zspoint = 5;
  if (has_zspoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zspoint(), output);
  }

  // required uint32 numpp = 6;
  if (has_numpp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->numpp(), output);
  }

  // repeated uint32 szheros = 7;
  for (int i = 0; i < this->szheros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->szheros(i), output);
  }

  // repeated uint32 ppheros = 8;
  for (int i = 0; i < this->ppheros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->ppheros(i), output);
  }

  // repeated uint32 fcheros = 9;
  for (int i = 0; i < this->fcheros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->fcheros(i), output);
  }

  // repeated uint32 zsheros = 10;
  for (int i = 0; i < this->zsheros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->zsheros(i), output);
  }

  // repeated .NewDouJiang.NewDouJiangHistory his = 11;
  for (int i = 0; i < this->his_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->his(i), output);
  }

  // repeated .NewDouJiang.NewDouJiangAttackInfo flist = 12;
  for (int i = 0; i < this->flist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->flist(i), output);
  }

  // required uint32 seq = 13;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewDouJiang.NewDouJiangUser)
}

::google::protobuf::uint8* NewDouJiangUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewDouJiang.NewDouJiangUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  // required int32 pppoint = 3;
  if (has_pppoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pppoint(), target);
  }

  // required int32 fcpoint = 4;
  if (has_fcpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fcpoint(), target);
  }

  // required int32 zspoint = 5;
  if (has_zspoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zspoint(), target);
  }

  // required uint32 numpp = 6;
  if (has_numpp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->numpp(), target);
  }

  // repeated uint32 szheros = 7;
  for (int i = 0; i < this->szheros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->szheros(i), target);
  }

  // repeated uint32 ppheros = 8;
  for (int i = 0; i < this->ppheros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->ppheros(i), target);
  }

  // repeated uint32 fcheros = 9;
  for (int i = 0; i < this->fcheros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->fcheros(i), target);
  }

  // repeated uint32 zsheros = 10;
  for (int i = 0; i < this->zsheros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->zsheros(i), target);
  }

  // repeated .NewDouJiang.NewDouJiangHistory his = 11;
  for (int i = 0; i < this->his_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->his(i), target);
  }

  // repeated .NewDouJiang.NewDouJiangAttackInfo flist = 12;
  for (int i = 0; i < this->flist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->flist(i), target);
  }

  // required uint32 seq = 13;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewDouJiang.NewDouJiangUser)
  return target;
}

int NewDouJiangUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required int32 pppoint = 3;
    if (has_pppoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pppoint());
    }

    // required int32 fcpoint = 4;
    if (has_fcpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcpoint());
    }

    // required int32 zspoint = 5;
    if (has_zspoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zspoint());
    }

    // required uint32 numpp = 6;
    if (has_numpp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numpp());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // required uint32 seq = 13;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

  }
  // repeated uint32 szheros = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->szheros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->szheros(i));
    }
    total_size += 1 * this->szheros_size() + data_size;
  }

  // repeated uint32 ppheros = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->ppheros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ppheros(i));
    }
    total_size += 1 * this->ppheros_size() + data_size;
  }

  // repeated uint32 fcheros = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->fcheros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fcheros(i));
    }
    total_size += 1 * this->fcheros_size() + data_size;
  }

  // repeated uint32 zsheros = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->zsheros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->zsheros(i));
    }
    total_size += 1 * this->zsheros_size() + data_size;
  }

  // repeated .NewDouJiang.NewDouJiangHistory his = 11;
  total_size += 1 * this->his_size();
  for (int i = 0; i < this->his_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->his(i));
  }

  // repeated .NewDouJiang.NewDouJiangAttackInfo flist = 12;
  total_size += 1 * this->flist_size();
  for (int i = 0; i < this->flist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDouJiangUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewDouJiangUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewDouJiangUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewDouJiangUser::MergeFrom(const NewDouJiangUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  szheros_.MergeFrom(from.szheros_);
  ppheros_.MergeFrom(from.ppheros_);
  fcheros_.MergeFrom(from.fcheros_);
  zsheros_.MergeFrom(from.zsheros_);
  his_.MergeFrom(from.his_);
  flist_.MergeFrom(from.flist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_pppoint()) {
      set_pppoint(from.pppoint());
    }
    if (from.has_fcpoint()) {
      set_fcpoint(from.fcpoint());
    }
    if (from.has_zspoint()) {
      set_zspoint(from.zspoint());
    }
    if (from.has_numpp()) {
      set_numpp(from.numpp());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewDouJiangUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewDouJiangUser::CopyFrom(const NewDouJiangUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDouJiangUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000103f) != 0x0000103f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->his())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->flist())) return false;
  return true;
}

void NewDouJiangUser::Swap(NewDouJiangUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(ts_, other->ts_);
    std::swap(pppoint_, other->pppoint_);
    std::swap(fcpoint_, other->fcpoint_);
    std::swap(zspoint_, other->zspoint_);
    std::swap(numpp_, other->numpp_);
    szheros_.Swap(&other->szheros_);
    ppheros_.Swap(&other->ppheros_);
    fcheros_.Swap(&other->fcheros_);
    zsheros_.Swap(&other->zsheros_);
    his_.Swap(&other->his_);
    flist_.Swap(&other->flist_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewDouJiangUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewDouJiangUser_descriptor_;
  metadata.reflection = NewDouJiangUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewDouJiang::kUserFieldNumber;
const int NewDouJiang::kVerFieldNumber;
const int NewDouJiang::kRewardedFieldNumber;
#endif  // !_MSC_VER

NewDouJiang::NewDouJiang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewDouJiang.NewDouJiang)
}

void NewDouJiang::InitAsDefaultInstance() {
}

NewDouJiang::NewDouJiang(const NewDouJiang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewDouJiang.NewDouJiang)
}

void NewDouJiang::SharedCtor() {
  _cached_size_ = 0;
  ver_ = 0;
  rewarded_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewDouJiang::~NewDouJiang() {
  // @@protoc_insertion_point(destructor:NewDouJiang.NewDouJiang)
  SharedDtor();
}

void NewDouJiang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewDouJiang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewDouJiang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewDouJiang_descriptor_;
}

const NewDouJiang& NewDouJiang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewDouJiang_2eproto();
  return *default_instance_;
}

NewDouJiang* NewDouJiang::default_instance_ = NULL;

NewDouJiang* NewDouJiang::New() const {
  return new NewDouJiang;
}

void NewDouJiang::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewDouJiang*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ver_, rewarded_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewDouJiang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewDouJiang.NewDouJiang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NewDouJiang.NewDouJiangUser user = 1;
      case 1: {
        if (tag == 10) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_user;
        if (input->ExpectTag(16)) goto parse_ver;
        break;
      }

      // required int32 ver = 2;
      case 2: {
        if (tag == 16) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rewarded;
        break;
      }

      // required int32 rewarded = 3;
      case 3: {
        if (tag == 24) {
         parse_rewarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewarded_)));
          set_has_rewarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewDouJiang.NewDouJiang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewDouJiang.NewDouJiang)
  return false;
#undef DO_
}

void NewDouJiang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewDouJiang.NewDouJiang)
  // repeated .NewDouJiang.NewDouJiangUser user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(i), output);
  }

  // required int32 ver = 2;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ver(), output);
  }

  // required int32 rewarded = 3;
  if (has_rewarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewarded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewDouJiang.NewDouJiang)
}

::google::protobuf::uint8* NewDouJiang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewDouJiang.NewDouJiang)
  // repeated .NewDouJiang.NewDouJiangUser user = 1;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(i), target);
  }

  // required int32 ver = 2;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ver(), target);
  }

  // required int32 rewarded = 3;
  if (has_rewarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewarded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewDouJiang.NewDouJiang)
  return target;
}

int NewDouJiang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 ver = 2;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ver());
    }

    // required int32 rewarded = 3;
    if (has_rewarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewarded());
    }

  }
  // repeated .NewDouJiang.NewDouJiangUser user = 1;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDouJiang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewDouJiang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewDouJiang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewDouJiang::MergeFrom(const NewDouJiang& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_rewarded()) {
      set_rewarded(from.rewarded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewDouJiang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewDouJiang::CopyFrom(const NewDouJiang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDouJiang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  return true;
}

void NewDouJiang::Swap(NewDouJiang* other) {
  if (other != this) {
    user_.Swap(&other->user_);
    std::swap(ver_, other->ver_);
    std::swap(rewarded_, other->rewarded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewDouJiang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewDouJiang_descriptor_;
  metadata.reflection = NewDouJiang_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NewDouJiang

// @@protoc_insertion_point(global_scope)
