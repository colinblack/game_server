// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NewWorldAllianceMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NewWorldAllianceMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NewWorldAllianceMap {

namespace {

const ::google::protobuf::Descriptor* NewWorldAllianceMapAlliance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewWorldAllianceMapAlliance_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewWorldAllianceMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewWorldAllianceMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NewWorldAllianceMap_2eproto() {
  protobuf_AddDesc_NewWorldAllianceMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NewWorldAllianceMap.proto");
  GOOGLE_CHECK(file != NULL);
  NewWorldAllianceMapAlliance_descriptor_ = file->message_type(0);
  static const int NewWorldAllianceMapAlliance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceMapAlliance, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceMapAlliance, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceMapAlliance, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceMapAlliance, aid_),
  };
  NewWorldAllianceMapAlliance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewWorldAllianceMapAlliance_descriptor_,
      NewWorldAllianceMapAlliance::default_instance_,
      NewWorldAllianceMapAlliance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceMapAlliance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceMapAlliance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewWorldAllianceMapAlliance));
  NewWorldAllianceMap_descriptor_ = file->message_type(1);
  static const int NewWorldAllianceMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceMap, alliance_),
  };
  NewWorldAllianceMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewWorldAllianceMap_descriptor_,
      NewWorldAllianceMap::default_instance_,
      NewWorldAllianceMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewWorldAllianceMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NewWorldAllianceMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewWorldAllianceMapAlliance_descriptor_, &NewWorldAllianceMapAlliance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewWorldAllianceMap_descriptor_, &NewWorldAllianceMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NewWorldAllianceMap_2eproto() {
  delete NewWorldAllianceMapAlliance::default_instance_;
  delete NewWorldAllianceMapAlliance_reflection_;
  delete NewWorldAllianceMap::default_instance_;
  delete NewWorldAllianceMap_reflection_;
}

void protobuf_AddDesc_NewWorldAllianceMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031NewWorldAllianceMap.proto\022\023NewWorldAll"
    "ianceMap\"V\n\033NewWorldAllianceMapAlliance\022"
    "\013\n\003rid\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\016\n\006reward\030\003 "
    "\002(\r\022\013\n\003aid\030\004 \003(\r\"Y\n\023NewWorldAllianceMap\022"
    "B\n\010alliance\030\001 \003(\01320.NewWorldAllianceMap."
    "NewWorldAllianceMapAlliance", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NewWorldAllianceMap.proto", &protobuf_RegisterTypes);
  NewWorldAllianceMapAlliance::default_instance_ = new NewWorldAllianceMapAlliance();
  NewWorldAllianceMap::default_instance_ = new NewWorldAllianceMap();
  NewWorldAllianceMapAlliance::default_instance_->InitAsDefaultInstance();
  NewWorldAllianceMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NewWorldAllianceMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NewWorldAllianceMap_2eproto {
  StaticDescriptorInitializer_NewWorldAllianceMap_2eproto() {
    protobuf_AddDesc_NewWorldAllianceMap_2eproto();
  }
} static_descriptor_initializer_NewWorldAllianceMap_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NewWorldAllianceMapAlliance::kRidFieldNumber;
const int NewWorldAllianceMapAlliance::kLevelFieldNumber;
const int NewWorldAllianceMapAlliance::kRewardFieldNumber;
const int NewWorldAllianceMapAlliance::kAidFieldNumber;
#endif  // !_MSC_VER

NewWorldAllianceMapAlliance::NewWorldAllianceMapAlliance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
}

void NewWorldAllianceMapAlliance::InitAsDefaultInstance() {
}

NewWorldAllianceMapAlliance::NewWorldAllianceMapAlliance(const NewWorldAllianceMapAlliance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
}

void NewWorldAllianceMapAlliance::SharedCtor() {
  _cached_size_ = 0;
  rid_ = 0u;
  level_ = 0u;
  reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewWorldAllianceMapAlliance::~NewWorldAllianceMapAlliance() {
  // @@protoc_insertion_point(destructor:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
  SharedDtor();
}

void NewWorldAllianceMapAlliance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewWorldAllianceMapAlliance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewWorldAllianceMapAlliance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewWorldAllianceMapAlliance_descriptor_;
}

const NewWorldAllianceMapAlliance& NewWorldAllianceMapAlliance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewWorldAllianceMap_2eproto();
  return *default_instance_;
}

NewWorldAllianceMapAlliance* NewWorldAllianceMapAlliance::default_instance_ = NULL;

NewWorldAllianceMapAlliance* NewWorldAllianceMapAlliance::New() const {
  return new NewWorldAllianceMapAlliance;
}

void NewWorldAllianceMapAlliance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewWorldAllianceMapAlliance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rid_, level_);
    reward_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  aid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewWorldAllianceMapAlliance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // required uint32 reward = 3;
      case 3: {
        if (tag == 24) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_aid;
        break;
      }

      // repeated uint32 aid = 4;
      case 4: {
        if (tag == 32) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_aid())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_aid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_aid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
  return false;
#undef DO_
}

void NewWorldAllianceMapAlliance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
  // required uint32 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward(), output);
  }

  // repeated uint32 aid = 4;
  for (int i = 0; i < this->aid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->aid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
}

::google::protobuf::uint8* NewWorldAllianceMapAlliance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
  // required uint32 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reward(), target);
  }

  // repeated uint32 aid = 4;
  for (int i = 0; i < this->aid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->aid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewWorldAllianceMap.NewWorldAllianceMapAlliance)
  return target;
}

int NewWorldAllianceMapAlliance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

  }
  // repeated uint32 aid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->aid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->aid(i));
    }
    total_size += 1 * this->aid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewWorldAllianceMapAlliance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewWorldAllianceMapAlliance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewWorldAllianceMapAlliance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewWorldAllianceMapAlliance::MergeFrom(const NewWorldAllianceMapAlliance& from) {
  GOOGLE_CHECK_NE(&from, this);
  aid_.MergeFrom(from.aid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewWorldAllianceMapAlliance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewWorldAllianceMapAlliance::CopyFrom(const NewWorldAllianceMapAlliance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewWorldAllianceMapAlliance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NewWorldAllianceMapAlliance::Swap(NewWorldAllianceMapAlliance* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(level_, other->level_);
    std::swap(reward_, other->reward_);
    aid_.Swap(&other->aid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewWorldAllianceMapAlliance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewWorldAllianceMapAlliance_descriptor_;
  metadata.reflection = NewWorldAllianceMapAlliance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewWorldAllianceMap::kAllianceFieldNumber;
#endif  // !_MSC_VER

NewWorldAllianceMap::NewWorldAllianceMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewWorldAllianceMap.NewWorldAllianceMap)
}

void NewWorldAllianceMap::InitAsDefaultInstance() {
}

NewWorldAllianceMap::NewWorldAllianceMap(const NewWorldAllianceMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewWorldAllianceMap.NewWorldAllianceMap)
}

void NewWorldAllianceMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewWorldAllianceMap::~NewWorldAllianceMap() {
  // @@protoc_insertion_point(destructor:NewWorldAllianceMap.NewWorldAllianceMap)
  SharedDtor();
}

void NewWorldAllianceMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewWorldAllianceMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewWorldAllianceMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewWorldAllianceMap_descriptor_;
}

const NewWorldAllianceMap& NewWorldAllianceMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewWorldAllianceMap_2eproto();
  return *default_instance_;
}

NewWorldAllianceMap* NewWorldAllianceMap::default_instance_ = NULL;

NewWorldAllianceMap* NewWorldAllianceMap::New() const {
  return new NewWorldAllianceMap;
}

void NewWorldAllianceMap::Clear() {
  alliance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewWorldAllianceMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewWorldAllianceMap.NewWorldAllianceMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NewWorldAllianceMap.NewWorldAllianceMapAlliance alliance = 1;
      case 1: {
        if (tag == 10) {
         parse_alliance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alliance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_alliance;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewWorldAllianceMap.NewWorldAllianceMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewWorldAllianceMap.NewWorldAllianceMap)
  return false;
#undef DO_
}

void NewWorldAllianceMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewWorldAllianceMap.NewWorldAllianceMap)
  // repeated .NewWorldAllianceMap.NewWorldAllianceMapAlliance alliance = 1;
  for (int i = 0; i < this->alliance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewWorldAllianceMap.NewWorldAllianceMap)
}

::google::protobuf::uint8* NewWorldAllianceMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewWorldAllianceMap.NewWorldAllianceMap)
  // repeated .NewWorldAllianceMap.NewWorldAllianceMapAlliance alliance = 1;
  for (int i = 0; i < this->alliance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewWorldAllianceMap.NewWorldAllianceMap)
  return target;
}

int NewWorldAllianceMap::ByteSize() const {
  int total_size = 0;

  // repeated .NewWorldAllianceMap.NewWorldAllianceMapAlliance alliance = 1;
  total_size += 1 * this->alliance_size();
  for (int i = 0; i < this->alliance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alliance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewWorldAllianceMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewWorldAllianceMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewWorldAllianceMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewWorldAllianceMap::MergeFrom(const NewWorldAllianceMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  alliance_.MergeFrom(from.alliance_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewWorldAllianceMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewWorldAllianceMap::CopyFrom(const NewWorldAllianceMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewWorldAllianceMap::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->alliance())) return false;
  return true;
}

void NewWorldAllianceMap::Swap(NewWorldAllianceMap* other) {
  if (other != this) {
    alliance_.Swap(&other->alliance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewWorldAllianceMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewWorldAllianceMap_descriptor_;
  metadata.reflection = NewWorldAllianceMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NewWorldAllianceMap

// @@protoc_insertion_point(global_scope)
