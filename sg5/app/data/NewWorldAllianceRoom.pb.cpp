// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NewWorldAllianceRoom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NewWorldAllianceRoom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NewWorldAllianceRoom {

namespace {

const ::google::protobuf::Descriptor* NewWorldAllianceRoomHeroIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewWorldAllianceRoomHeroIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewWorldAllianceRoomHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewWorldAllianceRoomHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewWorldAllianceRoomTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewWorldAllianceRoomTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewWorldAllianceRoomCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewWorldAllianceRoomCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewWorldAllianceRoomBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewWorldAllianceRoomBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewWorldAllianceRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewWorldAllianceRoom_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NewWorldAllianceRoom_2eproto() {
  protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NewWorldAllianceRoom.proto");
  GOOGLE_CHECK(file != NULL);
  NewWorldAllianceRoomHeroIndex_descriptor_ = file->message_type(0);
  static const int NewWorldAllianceRoomHeroIndex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHeroIndex, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHeroIndex, index_),
  };
  NewWorldAllianceRoomHeroIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewWorldAllianceRoomHeroIndex_descriptor_,
      NewWorldAllianceRoomHeroIndex::default_instance_,
      NewWorldAllianceRoomHeroIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHeroIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHeroIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewWorldAllianceRoomHeroIndex));
  NewWorldAllianceRoomHero_descriptor_ = file->message_type(1);
  static const int NewWorldAllianceRoomHero_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, mts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, buff_),
  };
  NewWorldAllianceRoomHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewWorldAllianceRoomHero_descriptor_,
      NewWorldAllianceRoomHero::default_instance_,
      NewWorldAllianceRoomHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewWorldAllianceRoomHero));
  NewWorldAllianceRoomTower_descriptor_ = file->message_type(2);
  static const int NewWorldAllianceRoomTower_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomTower, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomTower, dps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomTower, hit_),
  };
  NewWorldAllianceRoomTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewWorldAllianceRoomTower_descriptor_,
      NewWorldAllianceRoomTower::default_instance_,
      NewWorldAllianceRoomTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewWorldAllianceRoomTower));
  NewWorldAllianceRoomCity_descriptor_ = file->message_type(3);
  static const int NewWorldAllianceRoomCity_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomCity, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomCity, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomCity, countn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomCity, npcts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomCity, npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomCity, vision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomCity, tower_),
  };
  NewWorldAllianceRoomCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewWorldAllianceRoomCity_descriptor_,
      NewWorldAllianceRoomCity::default_instance_,
      NewWorldAllianceRoomCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewWorldAllianceRoomCity));
  NewWorldAllianceRoomBattle_descriptor_ = file->message_type(4);
  static const int NewWorldAllianceRoomBattle_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomBattle, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomBattle, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomBattle, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomBattle, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomBattle, aid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomBattle, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomBattle, city_),
  };
  NewWorldAllianceRoomBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewWorldAllianceRoomBattle_descriptor_,
      NewWorldAllianceRoomBattle::default_instance_,
      NewWorldAllianceRoomBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoomBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewWorldAllianceRoomBattle));
  NewWorldAllianceRoom_descriptor_ = file->message_type(5);
  static const int NewWorldAllianceRoom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoom, room_),
  };
  NewWorldAllianceRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewWorldAllianceRoom_descriptor_,
      NewWorldAllianceRoom::default_instance_,
      NewWorldAllianceRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewWorldAllianceRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewWorldAllianceRoom));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NewWorldAllianceRoom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewWorldAllianceRoomHeroIndex_descriptor_, &NewWorldAllianceRoomHeroIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewWorldAllianceRoomHero_descriptor_, &NewWorldAllianceRoomHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewWorldAllianceRoomTower_descriptor_, &NewWorldAllianceRoomTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewWorldAllianceRoomCity_descriptor_, &NewWorldAllianceRoomCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewWorldAllianceRoomBattle_descriptor_, &NewWorldAllianceRoomBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewWorldAllianceRoom_descriptor_, &NewWorldAllianceRoom::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NewWorldAllianceRoom_2eproto() {
  delete NewWorldAllianceRoomHeroIndex::default_instance_;
  delete NewWorldAllianceRoomHeroIndex_reflection_;
  delete NewWorldAllianceRoomHero::default_instance_;
  delete NewWorldAllianceRoomHero_reflection_;
  delete NewWorldAllianceRoomTower::default_instance_;
  delete NewWorldAllianceRoomTower_reflection_;
  delete NewWorldAllianceRoomCity::default_instance_;
  delete NewWorldAllianceRoomCity_reflection_;
  delete NewWorldAllianceRoomBattle::default_instance_;
  delete NewWorldAllianceRoomBattle_reflection_;
  delete NewWorldAllianceRoom::default_instance_;
  delete NewWorldAllianceRoom_reflection_;
}

void protobuf_AddDesc_NewWorldAllianceRoom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032NewWorldAllianceRoom.proto\022\024NewWorldAl"
    "lianceRoom\";\n\035NewWorldAllianceRoomHeroIn"
    "dex\022\013\n\003uid\030\001 \002(\r\022\r\n\005index\030\002 \002(\r\"\221\002\n\030NewW"
    "orldAllianceRoomHero\022B\n\005index\030\001 \002(\01323.Ne"
    "wWorldAllianceRoom.NewWorldAllianceRoomH"
    "eroIndex\022\013\n\003aid\030\002 \002(\r\022\013\n\003hid\030\003 \002(\r\022\014\n\004na"
    "me\030\004 \002(\t\022\013\n\003job\030\005 \002(\r\022\r\n\005level\030\006 \002(\r\022\014\n\004"
    "type\030\007 \002(\r\022\013\n\003cid\030\010 \002(\r\022\013\n\003mts\030\t \002(\r\022\n\n\002"
    "hp\030\n \002(\005\022\014\n\004kill\030\013 \002(\r\022\013\n\003seq\030\014 \002(\r\022\020\n\010p"
    "roperty\030\r \003(\005\022\014\n\004buff\030\016 \001(\r\"B\n\031NewWorldA"
    "llianceRoomTower\022\013\n\003uid\030\001 \002(\r\022\013\n\003dps\030\002 \002"
    "(\r\022\013\n\003hit\030\003 \002(\r\"\220\002\n\030NewWorldAllianceRoom"
    "City\022\013\n\003cid\030\001 \002(\r\022\013\n\003aid\030\002 \002(\r\022\016\n\006countN"
    "\030\003 \002(\005\022\r\n\005npcts\030\004 \002(\r\022;\n\003npc\030\005 \003(\0132..New"
    "WorldAllianceRoom.NewWorldAllianceRoomHe"
    "ro\022>\n\006vision\030\006 \003(\0132..NewWorldAllianceRoo"
    "m.NewWorldAllianceRoomHero\022>\n\005tower\030\007 \001("
    "\0132/.NewWorldAllianceRoom.NewWorldAllianc"
    "eRoomTower\"\335\001\n\032NewWorldAllianceRoomBattl"
    "e\022\013\n\003rid\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\016\n\006reward\030"
    "\003 \002(\r\022\n\n\002ts\030\004 \002(\r\022\013\n\003aid\030\005 \003(\r\022<\n\004hero\030\006"
    " \003(\0132..NewWorldAllianceRoom.NewWorldAlli"
    "anceRoomHero\022<\n\004city\030\007 \003(\0132..NewWorldAll"
    "ianceRoom.NewWorldAllianceRoomCity\"V\n\024Ne"
    "wWorldAllianceRoom\022>\n\004room\030\001 \003(\01320.NewWo"
    "rldAllianceRoom.NewWorldAllianceRoomBatt"
    "le", 1042);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NewWorldAllianceRoom.proto", &protobuf_RegisterTypes);
  NewWorldAllianceRoomHeroIndex::default_instance_ = new NewWorldAllianceRoomHeroIndex();
  NewWorldAllianceRoomHero::default_instance_ = new NewWorldAllianceRoomHero();
  NewWorldAllianceRoomTower::default_instance_ = new NewWorldAllianceRoomTower();
  NewWorldAllianceRoomCity::default_instance_ = new NewWorldAllianceRoomCity();
  NewWorldAllianceRoomBattle::default_instance_ = new NewWorldAllianceRoomBattle();
  NewWorldAllianceRoom::default_instance_ = new NewWorldAllianceRoom();
  NewWorldAllianceRoomHeroIndex::default_instance_->InitAsDefaultInstance();
  NewWorldAllianceRoomHero::default_instance_->InitAsDefaultInstance();
  NewWorldAllianceRoomTower::default_instance_->InitAsDefaultInstance();
  NewWorldAllianceRoomCity::default_instance_->InitAsDefaultInstance();
  NewWorldAllianceRoomBattle::default_instance_->InitAsDefaultInstance();
  NewWorldAllianceRoom::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NewWorldAllianceRoom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NewWorldAllianceRoom_2eproto {
  StaticDescriptorInitializer_NewWorldAllianceRoom_2eproto() {
    protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  }
} static_descriptor_initializer_NewWorldAllianceRoom_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NewWorldAllianceRoomHeroIndex::kUidFieldNumber;
const int NewWorldAllianceRoomHeroIndex::kIndexFieldNumber;
#endif  // !_MSC_VER

NewWorldAllianceRoomHeroIndex::NewWorldAllianceRoomHeroIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
}

void NewWorldAllianceRoomHeroIndex::InitAsDefaultInstance() {
}

NewWorldAllianceRoomHeroIndex::NewWorldAllianceRoomHeroIndex(const NewWorldAllianceRoomHeroIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
}

void NewWorldAllianceRoomHeroIndex::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewWorldAllianceRoomHeroIndex::~NewWorldAllianceRoomHeroIndex() {
  // @@protoc_insertion_point(destructor:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
  SharedDtor();
}

void NewWorldAllianceRoomHeroIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewWorldAllianceRoomHeroIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewWorldAllianceRoomHeroIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewWorldAllianceRoomHeroIndex_descriptor_;
}

const NewWorldAllianceRoomHeroIndex& NewWorldAllianceRoomHeroIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  return *default_instance_;
}

NewWorldAllianceRoomHeroIndex* NewWorldAllianceRoomHeroIndex::default_instance_ = NULL;

NewWorldAllianceRoomHeroIndex* NewWorldAllianceRoomHeroIndex::New() const {
  return new NewWorldAllianceRoomHeroIndex;
}

void NewWorldAllianceRoomHeroIndex::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewWorldAllianceRoomHeroIndex*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewWorldAllianceRoomHeroIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
  return false;
#undef DO_
}

void NewWorldAllianceRoomHeroIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
}

::google::protobuf::uint8* NewWorldAllianceRoomHeroIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
  return target;
}

int NewWorldAllianceRoomHeroIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewWorldAllianceRoomHeroIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewWorldAllianceRoomHeroIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewWorldAllianceRoomHeroIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewWorldAllianceRoomHeroIndex::MergeFrom(const NewWorldAllianceRoomHeroIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewWorldAllianceRoomHeroIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewWorldAllianceRoomHeroIndex::CopyFrom(const NewWorldAllianceRoomHeroIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewWorldAllianceRoomHeroIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NewWorldAllianceRoomHeroIndex::Swap(NewWorldAllianceRoomHeroIndex* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewWorldAllianceRoomHeroIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewWorldAllianceRoomHeroIndex_descriptor_;
  metadata.reflection = NewWorldAllianceRoomHeroIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewWorldAllianceRoomHero::kIndexFieldNumber;
const int NewWorldAllianceRoomHero::kAidFieldNumber;
const int NewWorldAllianceRoomHero::kHidFieldNumber;
const int NewWorldAllianceRoomHero::kNameFieldNumber;
const int NewWorldAllianceRoomHero::kJobFieldNumber;
const int NewWorldAllianceRoomHero::kLevelFieldNumber;
const int NewWorldAllianceRoomHero::kTypeFieldNumber;
const int NewWorldAllianceRoomHero::kCidFieldNumber;
const int NewWorldAllianceRoomHero::kMtsFieldNumber;
const int NewWorldAllianceRoomHero::kHpFieldNumber;
const int NewWorldAllianceRoomHero::kKillFieldNumber;
const int NewWorldAllianceRoomHero::kSeqFieldNumber;
const int NewWorldAllianceRoomHero::kPropertyFieldNumber;
const int NewWorldAllianceRoomHero::kBuffFieldNumber;
#endif  // !_MSC_VER

NewWorldAllianceRoomHero::NewWorldAllianceRoomHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
}

void NewWorldAllianceRoomHero::InitAsDefaultInstance() {
  index_ = const_cast< ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex*>(&::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex::default_instance());
}

NewWorldAllianceRoomHero::NewWorldAllianceRoomHero(const NewWorldAllianceRoomHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
}

void NewWorldAllianceRoomHero::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = NULL;
  aid_ = 0u;
  hid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_ = 0u;
  level_ = 0u;
  type_ = 0u;
  cid_ = 0u;
  mts_ = 0u;
  hp_ = 0;
  kill_ = 0u;
  seq_ = 0u;
  buff_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewWorldAllianceRoomHero::~NewWorldAllianceRoomHero() {
  // @@protoc_insertion_point(destructor:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
  SharedDtor();
}

void NewWorldAllianceRoomHero::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete index_;
  }
}

void NewWorldAllianceRoomHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewWorldAllianceRoomHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewWorldAllianceRoomHero_descriptor_;
}

const NewWorldAllianceRoomHero& NewWorldAllianceRoomHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  return *default_instance_;
}

NewWorldAllianceRoomHero* NewWorldAllianceRoomHero::default_instance_ = NULL;

NewWorldAllianceRoomHero* NewWorldAllianceRoomHero::New() const {
  return new NewWorldAllianceRoomHero;
}

void NewWorldAllianceRoomHero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewWorldAllianceRoomHero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(aid_, hid_);
    ZR_(job_, cid_);
    if (has_index()) {
      if (index_ != NULL) index_->::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 12032) {
    ZR_(mts_, seq_);
    buff_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewWorldAllianceRoomHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex index = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aid;
        break;
      }

      // required uint32 aid = 2;
      case 2: {
        if (tag == 16) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hid;
        break;
      }

      // required uint32 hid = 3;
      case 3: {
        if (tag == 24) {
         parse_hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // required uint32 job = 5;
      case 5: {
        if (tag == 40) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // required uint32 type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cid;
        break;
      }

      // required uint32 cid = 8;
      case 8: {
        if (tag == 64) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mts;
        break;
      }

      // required uint32 mts = 9;
      case 9: {
        if (tag == 72) {
         parse_mts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mts_)));
          set_has_mts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_hp;
        break;
      }

      // required int32 hp = 10;
      case 10: {
        if (tag == 80) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_kill;
        break;
      }

      // required uint32 kill = 11;
      case 11: {
        if (tag == 88) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_seq;
        break;
      }

      // required uint32 seq = 12;
      case 12: {
        if (tag == 96) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_property;
        break;
      }

      // repeated int32 property = 13;
      case 13: {
        if (tag == 104) {
         parse_property:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_property())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_property())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_property;
        if (input->ExpectTag(112)) goto parse_buff;
        break;
      }

      // optional uint32 buff = 14;
      case 14: {
        if (tag == 112) {
         parse_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_)));
          set_has_buff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
  return false;
#undef DO_
}

void NewWorldAllianceRoomHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
  // required .NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->index(), output);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aid(), output);
  }

  // required uint32 hid = 3;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hid(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // required uint32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

  // required uint32 cid = 8;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cid(), output);
  }

  // required uint32 mts = 9;
  if (has_mts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mts(), output);
  }

  // required int32 hp = 10;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hp(), output);
  }

  // required uint32 kill = 11;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kill(), output);
  }

  // required uint32 seq = 12;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->seq(), output);
  }

  // repeated int32 property = 13;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->property(i), output);
  }

  // optional uint32 buff = 14;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->buff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
}

::google::protobuf::uint8* NewWorldAllianceRoomHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
  // required .NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->index(), target);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aid(), target);
  }

  // required uint32 hid = 3;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hid(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // required uint32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->type(), target);
  }

  // required uint32 cid = 8;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cid(), target);
  }

  // required uint32 mts = 9;
  if (has_mts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mts(), target);
  }

  // required int32 hp = 10;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hp(), target);
  }

  // required uint32 kill = 11;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kill(), target);
  }

  // required uint32 seq = 12;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->seq(), target);
  }

  // repeated int32 property = 13;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->property(i), target);
  }

  // optional uint32 buff = 14;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->buff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
  return target;
}

int NewWorldAllianceRoomHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->index());
    }

    // required uint32 aid = 2;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required uint32 hid = 3;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 cid = 8;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 mts = 9;
    if (has_mts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mts());
    }

    // required int32 hp = 10;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required uint32 kill = 11;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill());
    }

    // required uint32 seq = 12;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // optional uint32 buff = 14;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff());
    }

  }
  // repeated int32 property = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->property_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->property(i));
    }
    total_size += 1 * this->property_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewWorldAllianceRoomHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewWorldAllianceRoomHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewWorldAllianceRoomHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewWorldAllianceRoomHero::MergeFrom(const NewWorldAllianceRoomHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      mutable_index()->::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex::MergeFrom(from.index());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mts()) {
      set_mts(from.mts());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_buff()) {
      set_buff(from.buff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewWorldAllianceRoomHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewWorldAllianceRoomHero::CopyFrom(const NewWorldAllianceRoomHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewWorldAllianceRoomHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  if (has_index()) {
    if (!this->index().IsInitialized()) return false;
  }
  return true;
}

void NewWorldAllianceRoomHero::Swap(NewWorldAllianceRoomHero* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(aid_, other->aid_);
    std::swap(hid_, other->hid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(cid_, other->cid_);
    std::swap(mts_, other->mts_);
    std::swap(hp_, other->hp_);
    std::swap(kill_, other->kill_);
    std::swap(seq_, other->seq_);
    property_.Swap(&other->property_);
    std::swap(buff_, other->buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewWorldAllianceRoomHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewWorldAllianceRoomHero_descriptor_;
  metadata.reflection = NewWorldAllianceRoomHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewWorldAllianceRoomTower::kUidFieldNumber;
const int NewWorldAllianceRoomTower::kDpsFieldNumber;
const int NewWorldAllianceRoomTower::kHitFieldNumber;
#endif  // !_MSC_VER

NewWorldAllianceRoomTower::NewWorldAllianceRoomTower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
}

void NewWorldAllianceRoomTower::InitAsDefaultInstance() {
}

NewWorldAllianceRoomTower::NewWorldAllianceRoomTower(const NewWorldAllianceRoomTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
}

void NewWorldAllianceRoomTower::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  dps_ = 0u;
  hit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewWorldAllianceRoomTower::~NewWorldAllianceRoomTower() {
  // @@protoc_insertion_point(destructor:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
  SharedDtor();
}

void NewWorldAllianceRoomTower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewWorldAllianceRoomTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewWorldAllianceRoomTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewWorldAllianceRoomTower_descriptor_;
}

const NewWorldAllianceRoomTower& NewWorldAllianceRoomTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  return *default_instance_;
}

NewWorldAllianceRoomTower* NewWorldAllianceRoomTower::default_instance_ = NULL;

NewWorldAllianceRoomTower* NewWorldAllianceRoomTower::New() const {
  return new NewWorldAllianceRoomTower;
}

void NewWorldAllianceRoomTower::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewWorldAllianceRoomTower*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, hit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewWorldAllianceRoomTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dps;
        break;
      }

      // required uint32 dps = 2;
      case 2: {
        if (tag == 16) {
         parse_dps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dps_)));
          set_has_dps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hit;
        break;
      }

      // required uint32 hit = 3;
      case 3: {
        if (tag == 24) {
         parse_hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
  return false;
#undef DO_
}

void NewWorldAllianceRoomTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 dps = 2;
  if (has_dps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dps(), output);
  }

  // required uint32 hit = 3;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
}

::google::protobuf::uint8* NewWorldAllianceRoomTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 dps = 2;
  if (has_dps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dps(), target);
  }

  // required uint32 hit = 3;
  if (has_hit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
  return target;
}

int NewWorldAllianceRoomTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 dps = 2;
    if (has_dps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dps());
    }

    // required uint32 hit = 3;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewWorldAllianceRoomTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewWorldAllianceRoomTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewWorldAllianceRoomTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewWorldAllianceRoomTower::MergeFrom(const NewWorldAllianceRoomTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_dps()) {
      set_dps(from.dps());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewWorldAllianceRoomTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewWorldAllianceRoomTower::CopyFrom(const NewWorldAllianceRoomTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewWorldAllianceRoomTower::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NewWorldAllianceRoomTower::Swap(NewWorldAllianceRoomTower* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(dps_, other->dps_);
    std::swap(hit_, other->hit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewWorldAllianceRoomTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewWorldAllianceRoomTower_descriptor_;
  metadata.reflection = NewWorldAllianceRoomTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewWorldAllianceRoomCity::kCidFieldNumber;
const int NewWorldAllianceRoomCity::kAidFieldNumber;
const int NewWorldAllianceRoomCity::kCountNFieldNumber;
const int NewWorldAllianceRoomCity::kNpctsFieldNumber;
const int NewWorldAllianceRoomCity::kNpcFieldNumber;
const int NewWorldAllianceRoomCity::kVisionFieldNumber;
const int NewWorldAllianceRoomCity::kTowerFieldNumber;
#endif  // !_MSC_VER

NewWorldAllianceRoomCity::NewWorldAllianceRoomCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
}

void NewWorldAllianceRoomCity::InitAsDefaultInstance() {
  tower_ = const_cast< ::NewWorldAllianceRoom::NewWorldAllianceRoomTower*>(&::NewWorldAllianceRoom::NewWorldAllianceRoomTower::default_instance());
}

NewWorldAllianceRoomCity::NewWorldAllianceRoomCity(const NewWorldAllianceRoomCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
}

void NewWorldAllianceRoomCity::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  aid_ = 0u;
  countn_ = 0;
  npcts_ = 0u;
  tower_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewWorldAllianceRoomCity::~NewWorldAllianceRoomCity() {
  // @@protoc_insertion_point(destructor:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
  SharedDtor();
}

void NewWorldAllianceRoomCity::SharedDtor() {
  if (this != default_instance_) {
    delete tower_;
  }
}

void NewWorldAllianceRoomCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewWorldAllianceRoomCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewWorldAllianceRoomCity_descriptor_;
}

const NewWorldAllianceRoomCity& NewWorldAllianceRoomCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  return *default_instance_;
}

NewWorldAllianceRoomCity* NewWorldAllianceRoomCity::default_instance_ = NULL;

NewWorldAllianceRoomCity* NewWorldAllianceRoomCity::New() const {
  return new NewWorldAllianceRoomCity;
}

void NewWorldAllianceRoomCity::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewWorldAllianceRoomCity*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 79) {
    ZR_(cid_, npcts_);
    if (has_tower()) {
      if (tower_ != NULL) tower_->::NewWorldAllianceRoom::NewWorldAllianceRoomTower::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  npc_.Clear();
  vision_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewWorldAllianceRoomCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_aid;
        break;
      }

      // required uint32 aid = 2;
      case 2: {
        if (tag == 16) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aid_)));
          set_has_aid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_countN;
        break;
      }

      // required int32 countN = 3;
      case 3: {
        if (tag == 24) {
         parse_countN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countn_)));
          set_has_countn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcts;
        break;
      }

      // required uint32 npcts = 4;
      case 4: {
        if (tag == 32) {
         parse_npcts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcts_)));
          set_has_npcts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_npc;
        break;
      }

      // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero npc = 5;
      case 5: {
        if (tag == 42) {
         parse_npc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_npc;
        if (input->ExpectTag(50)) goto parse_vision;
        break;
      }

      // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero vision = 6;
      case 6: {
        if (tag == 50) {
         parse_vision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vision;
        if (input->ExpectTag(58)) goto parse_tower;
        break;
      }

      // optional .NewWorldAllianceRoom.NewWorldAllianceRoomTower tower = 7;
      case 7: {
        if (tag == 58) {
         parse_tower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
  return false;
#undef DO_
}

void NewWorldAllianceRoomCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aid(), output);
  }

  // required int32 countN = 3;
  if (has_countn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->countn(), output);
  }

  // required uint32 npcts = 4;
  if (has_npcts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npcts(), output);
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero npc = 5;
  for (int i = 0; i < this->npc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->npc(i), output);
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero vision = 6;
  for (int i = 0; i < this->vision_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vision(i), output);
  }

  // optional .NewWorldAllianceRoom.NewWorldAllianceRoomTower tower = 7;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
}

::google::protobuf::uint8* NewWorldAllianceRoomCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required uint32 aid = 2;
  if (has_aid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aid(), target);
  }

  // required int32 countN = 3;
  if (has_countn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->countn(), target);
  }

  // required uint32 npcts = 4;
  if (has_npcts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npcts(), target);
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero npc = 5;
  for (int i = 0; i < this->npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->npc(i), target);
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero vision = 6;
  for (int i = 0; i < this->vision_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->vision(i), target);
  }

  // optional .NewWorldAllianceRoom.NewWorldAllianceRoomTower tower = 7;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
  return target;
}

int NewWorldAllianceRoomCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required uint32 aid = 2;
    if (has_aid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aid());
    }

    // required int32 countN = 3;
    if (has_countn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countn());
    }

    // required uint32 npcts = 4;
    if (has_npcts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcts());
    }

    // optional .NewWorldAllianceRoom.NewWorldAllianceRoomTower tower = 7;
    if (has_tower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower());
    }

  }
  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero npc = 5;
  total_size += 1 * this->npc_size();
  for (int i = 0; i < this->npc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc(i));
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero vision = 6;
  total_size += 1 * this->vision_size();
  for (int i = 0; i < this->vision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vision(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewWorldAllianceRoomCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewWorldAllianceRoomCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewWorldAllianceRoomCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewWorldAllianceRoomCity::MergeFrom(const NewWorldAllianceRoomCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_.MergeFrom(from.npc_);
  vision_.MergeFrom(from.vision_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_aid()) {
      set_aid(from.aid());
    }
    if (from.has_countn()) {
      set_countn(from.countn());
    }
    if (from.has_npcts()) {
      set_npcts(from.npcts());
    }
    if (from.has_tower()) {
      mutable_tower()->::NewWorldAllianceRoom::NewWorldAllianceRoomTower::MergeFrom(from.tower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewWorldAllianceRoomCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewWorldAllianceRoomCity::CopyFrom(const NewWorldAllianceRoomCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewWorldAllianceRoomCity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->npc())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->vision())) return false;
  if (has_tower()) {
    if (!this->tower().IsInitialized()) return false;
  }
  return true;
}

void NewWorldAllianceRoomCity::Swap(NewWorldAllianceRoomCity* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(aid_, other->aid_);
    std::swap(countn_, other->countn_);
    std::swap(npcts_, other->npcts_);
    npc_.Swap(&other->npc_);
    vision_.Swap(&other->vision_);
    std::swap(tower_, other->tower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewWorldAllianceRoomCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewWorldAllianceRoomCity_descriptor_;
  metadata.reflection = NewWorldAllianceRoomCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewWorldAllianceRoomBattle::kRidFieldNumber;
const int NewWorldAllianceRoomBattle::kLevelFieldNumber;
const int NewWorldAllianceRoomBattle::kRewardFieldNumber;
const int NewWorldAllianceRoomBattle::kTsFieldNumber;
const int NewWorldAllianceRoomBattle::kAidFieldNumber;
const int NewWorldAllianceRoomBattle::kHeroFieldNumber;
const int NewWorldAllianceRoomBattle::kCityFieldNumber;
#endif  // !_MSC_VER

NewWorldAllianceRoomBattle::NewWorldAllianceRoomBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
}

void NewWorldAllianceRoomBattle::InitAsDefaultInstance() {
}

NewWorldAllianceRoomBattle::NewWorldAllianceRoomBattle(const NewWorldAllianceRoomBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
}

void NewWorldAllianceRoomBattle::SharedCtor() {
  _cached_size_ = 0;
  rid_ = 0u;
  level_ = 0u;
  reward_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewWorldAllianceRoomBattle::~NewWorldAllianceRoomBattle() {
  // @@protoc_insertion_point(destructor:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
  SharedDtor();
}

void NewWorldAllianceRoomBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewWorldAllianceRoomBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewWorldAllianceRoomBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewWorldAllianceRoomBattle_descriptor_;
}

const NewWorldAllianceRoomBattle& NewWorldAllianceRoomBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  return *default_instance_;
}

NewWorldAllianceRoomBattle* NewWorldAllianceRoomBattle::default_instance_ = NULL;

NewWorldAllianceRoomBattle* NewWorldAllianceRoomBattle::New() const {
  return new NewWorldAllianceRoomBattle;
}

void NewWorldAllianceRoomBattle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewWorldAllianceRoomBattle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rid_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  aid_.Clear();
  hero_.Clear();
  city_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewWorldAllianceRoomBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // required uint32 reward = 3;
      case 3: {
        if (tag == 24) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ts;
        break;
      }

      // required uint32 ts = 4;
      case 4: {
        if (tag == 32) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_aid;
        break;
      }

      // repeated uint32 aid = 5;
      case 5: {
        if (tag == 40) {
         parse_aid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_aid())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_aid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_aid;
        if (input->ExpectTag(50)) goto parse_hero;
        break;
      }

      // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero hero = 6;
      case 6: {
        if (tag == 50) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hero;
        if (input->ExpectTag(58)) goto parse_city;
        break;
      }

      // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomCity city = 7;
      case 7: {
        if (tag == 58) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_city;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
  return false;
#undef DO_
}

void NewWorldAllianceRoomBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
  // required uint32 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward(), output);
  }

  // required uint32 ts = 4;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ts(), output);
  }

  // repeated uint32 aid = 5;
  for (int i = 0; i < this->aid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->aid(i), output);
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero hero = 6;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hero(i), output);
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomCity city = 7;
  for (int i = 0; i < this->city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->city(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
}

::google::protobuf::uint8* NewWorldAllianceRoomBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
  // required uint32 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reward(), target);
  }

  // required uint32 ts = 4;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ts(), target);
  }

  // repeated uint32 aid = 5;
  for (int i = 0; i < this->aid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->aid(i), target);
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero hero = 6;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hero(i), target);
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomCity city = 7;
  for (int i = 0; i < this->city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->city(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
  return target;
}

int NewWorldAllianceRoomBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // required uint32 ts = 4;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  // repeated uint32 aid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->aid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->aid(i));
    }
    total_size += 1 * this->aid_size() + data_size;
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero hero = 6;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomCity city = 7;
  total_size += 1 * this->city_size();
  for (int i = 0; i < this->city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewWorldAllianceRoomBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewWorldAllianceRoomBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewWorldAllianceRoomBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewWorldAllianceRoomBattle::MergeFrom(const NewWorldAllianceRoomBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  aid_.MergeFrom(from.aid_);
  hero_.MergeFrom(from.hero_);
  city_.MergeFrom(from.city_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewWorldAllianceRoomBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewWorldAllianceRoomBattle::CopyFrom(const NewWorldAllianceRoomBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewWorldAllianceRoomBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hero())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->city())) return false;
  return true;
}

void NewWorldAllianceRoomBattle::Swap(NewWorldAllianceRoomBattle* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(level_, other->level_);
    std::swap(reward_, other->reward_);
    std::swap(ts_, other->ts_);
    aid_.Swap(&other->aid_);
    hero_.Swap(&other->hero_);
    city_.Swap(&other->city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewWorldAllianceRoomBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewWorldAllianceRoomBattle_descriptor_;
  metadata.reflection = NewWorldAllianceRoomBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewWorldAllianceRoom::kRoomFieldNumber;
#endif  // !_MSC_VER

NewWorldAllianceRoom::NewWorldAllianceRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewWorldAllianceRoom.NewWorldAllianceRoom)
}

void NewWorldAllianceRoom::InitAsDefaultInstance() {
}

NewWorldAllianceRoom::NewWorldAllianceRoom(const NewWorldAllianceRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewWorldAllianceRoom.NewWorldAllianceRoom)
}

void NewWorldAllianceRoom::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewWorldAllianceRoom::~NewWorldAllianceRoom() {
  // @@protoc_insertion_point(destructor:NewWorldAllianceRoom.NewWorldAllianceRoom)
  SharedDtor();
}

void NewWorldAllianceRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewWorldAllianceRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewWorldAllianceRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewWorldAllianceRoom_descriptor_;
}

const NewWorldAllianceRoom& NewWorldAllianceRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  return *default_instance_;
}

NewWorldAllianceRoom* NewWorldAllianceRoom::default_instance_ = NULL;

NewWorldAllianceRoom* NewWorldAllianceRoom::New() const {
  return new NewWorldAllianceRoom;
}

void NewWorldAllianceRoom::Clear() {
  room_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewWorldAllianceRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewWorldAllianceRoom.NewWorldAllianceRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomBattle room = 1;
      case 1: {
        if (tag == 10) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_room;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewWorldAllianceRoom.NewWorldAllianceRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewWorldAllianceRoom.NewWorldAllianceRoom)
  return false;
#undef DO_
}

void NewWorldAllianceRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewWorldAllianceRoom.NewWorldAllianceRoom)
  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomBattle room = 1;
  for (int i = 0; i < this->room_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewWorldAllianceRoom.NewWorldAllianceRoom)
}

::google::protobuf::uint8* NewWorldAllianceRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewWorldAllianceRoom.NewWorldAllianceRoom)
  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomBattle room = 1;
  for (int i = 0; i < this->room_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewWorldAllianceRoom.NewWorldAllianceRoom)
  return target;
}

int NewWorldAllianceRoom::ByteSize() const {
  int total_size = 0;

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomBattle room = 1;
  total_size += 1 * this->room_size();
  for (int i = 0; i < this->room_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewWorldAllianceRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewWorldAllianceRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewWorldAllianceRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewWorldAllianceRoom::MergeFrom(const NewWorldAllianceRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_.MergeFrom(from.room_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewWorldAllianceRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewWorldAllianceRoom::CopyFrom(const NewWorldAllianceRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewWorldAllianceRoom::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->room())) return false;
  return true;
}

void NewWorldAllianceRoom::Swap(NewWorldAllianceRoom* other) {
  if (other != this) {
    room_.Swap(&other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewWorldAllianceRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewWorldAllianceRoom_descriptor_;
  metadata.reflection = NewWorldAllianceRoom_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NewWorldAllianceRoom

// @@protoc_insertion_point(global_scope)
