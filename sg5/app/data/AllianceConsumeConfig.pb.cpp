// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllianceConsumeConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AllianceConsumeConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AllianceConsumeConfig {

namespace {

const ::google::protobuf::Descriptor* AllianceConsumeConfigItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceConsumeConfigItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceConsumeConfigItemLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceConsumeConfigItemLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllianceConsumeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllianceConsumeConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AllianceConsumeConfig_2eproto() {
  protobuf_AddDesc_AllianceConsumeConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AllianceConsumeConfig.proto");
  GOOGLE_CHECK(file != NULL);
  AllianceConsumeConfigItem_descriptor_ = file->message_type(0);
  static const int AllianceConsumeConfigItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItem, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItem, count_),
  };
  AllianceConsumeConfigItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceConsumeConfigItem_descriptor_,
      AllianceConsumeConfigItem::default_instance_,
      AllianceConsumeConfigItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceConsumeConfigItem));
  AllianceConsumeConfigItemLimit_descriptor_ = file->message_type(1);
  static const int AllianceConsumeConfigItemLimit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItemLimit, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItemLimit, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItemLimit, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItemLimit, count_),
  };
  AllianceConsumeConfigItemLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceConsumeConfigItemLimit_descriptor_,
      AllianceConsumeConfigItemLimit::default_instance_,
      AllianceConsumeConfigItemLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItemLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfigItemLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceConsumeConfigItemLimit));
  AllianceConsumeConfig_descriptor_ = file->message_type(2);
  static const int AllianceConsumeConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfig, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfig, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfig, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfig, d_),
  };
  AllianceConsumeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllianceConsumeConfig_descriptor_,
      AllianceConsumeConfig::default_instance_,
      AllianceConsumeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllianceConsumeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllianceConsumeConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AllianceConsumeConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceConsumeConfigItem_descriptor_, &AllianceConsumeConfigItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceConsumeConfigItemLimit_descriptor_, &AllianceConsumeConfigItemLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllianceConsumeConfig_descriptor_, &AllianceConsumeConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AllianceConsumeConfig_2eproto() {
  delete AllianceConsumeConfigItem::default_instance_;
  delete AllianceConsumeConfigItem_reflection_;
  delete AllianceConsumeConfigItemLimit::default_instance_;
  delete AllianceConsumeConfigItemLimit_reflection_;
  delete AllianceConsumeConfig::default_instance_;
  delete AllianceConsumeConfig_reflection_;
}

void protobuf_AddDesc_AllianceConsumeConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033AllianceConsumeConfig.proto\022\025AllianceC"
    "onsumeConfig\"G\n\031AllianceConsumeConfigIte"
    "m\022\014\n\004eqid\030\001 \002(\r\022\r\n\005price\030\002 \002(\005\022\r\n\005count\030"
    "\003 \002(\005\"[\n\036AllianceConsumeConfigItemLimit\022"
    "\014\n\004eqid\030\001 \002(\r\022\r\n\005price\030\002 \002(\005\022\r\n\005limit\030\003 "
    "\002(\r\022\r\n\005count\030\004 \002(\005\"\232\002\n\025AllianceConsumeCo"
    "nfig\022;\n\001a\030\001 \003(\01320.AllianceConsumeConfig."
    "AllianceConsumeConfigItem\022@\n\001b\030\002 \003(\01325.A"
    "llianceConsumeConfig.AllianceConsumeConf"
    "igItemLimit\022@\n\001c\030\003 \003(\01325.AllianceConsume"
    "Config.AllianceConsumeConfigItemLimit\022@\n"
    "\001d\030\004 \003(\01325.AllianceConsumeConfig.Allianc"
    "eConsumeConfigItemLimit", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AllianceConsumeConfig.proto", &protobuf_RegisterTypes);
  AllianceConsumeConfigItem::default_instance_ = new AllianceConsumeConfigItem();
  AllianceConsumeConfigItemLimit::default_instance_ = new AllianceConsumeConfigItemLimit();
  AllianceConsumeConfig::default_instance_ = new AllianceConsumeConfig();
  AllianceConsumeConfigItem::default_instance_->InitAsDefaultInstance();
  AllianceConsumeConfigItemLimit::default_instance_->InitAsDefaultInstance();
  AllianceConsumeConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AllianceConsumeConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AllianceConsumeConfig_2eproto {
  StaticDescriptorInitializer_AllianceConsumeConfig_2eproto() {
    protobuf_AddDesc_AllianceConsumeConfig_2eproto();
  }
} static_descriptor_initializer_AllianceConsumeConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AllianceConsumeConfigItem::kEqidFieldNumber;
const int AllianceConsumeConfigItem::kPriceFieldNumber;
const int AllianceConsumeConfigItem::kCountFieldNumber;
#endif  // !_MSC_VER

AllianceConsumeConfigItem::AllianceConsumeConfigItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllianceConsumeConfig.AllianceConsumeConfigItem)
}

void AllianceConsumeConfigItem::InitAsDefaultInstance() {
}

AllianceConsumeConfigItem::AllianceConsumeConfigItem(const AllianceConsumeConfigItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllianceConsumeConfig.AllianceConsumeConfigItem)
}

void AllianceConsumeConfigItem::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  price_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceConsumeConfigItem::~AllianceConsumeConfigItem() {
  // @@protoc_insertion_point(destructor:AllianceConsumeConfig.AllianceConsumeConfigItem)
  SharedDtor();
}

void AllianceConsumeConfigItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceConsumeConfigItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceConsumeConfigItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceConsumeConfigItem_descriptor_;
}

const AllianceConsumeConfigItem& AllianceConsumeConfigItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllianceConsumeConfig_2eproto();
  return *default_instance_;
}

AllianceConsumeConfigItem* AllianceConsumeConfigItem::default_instance_ = NULL;

AllianceConsumeConfigItem* AllianceConsumeConfigItem::New() const {
  return new AllianceConsumeConfigItem;
}

void AllianceConsumeConfigItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceConsumeConfigItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceConsumeConfigItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllianceConsumeConfig.AllianceConsumeConfigItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // required int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllianceConsumeConfig.AllianceConsumeConfigItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllianceConsumeConfig.AllianceConsumeConfigItem)
  return false;
#undef DO_
}

void AllianceConsumeConfigItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllianceConsumeConfig.AllianceConsumeConfigItem)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllianceConsumeConfig.AllianceConsumeConfigItem)
}

::google::protobuf::uint8* AllianceConsumeConfigItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllianceConsumeConfig.AllianceConsumeConfigItem)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllianceConsumeConfig.AllianceConsumeConfigItem)
  return target;
}

int AllianceConsumeConfigItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceConsumeConfigItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceConsumeConfigItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceConsumeConfigItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceConsumeConfigItem::MergeFrom(const AllianceConsumeConfigItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceConsumeConfigItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceConsumeConfigItem::CopyFrom(const AllianceConsumeConfigItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceConsumeConfigItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AllianceConsumeConfigItem::Swap(AllianceConsumeConfigItem* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(price_, other->price_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceConsumeConfigItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceConsumeConfigItem_descriptor_;
  metadata.reflection = AllianceConsumeConfigItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceConsumeConfigItemLimit::kEqidFieldNumber;
const int AllianceConsumeConfigItemLimit::kPriceFieldNumber;
const int AllianceConsumeConfigItemLimit::kLimitFieldNumber;
const int AllianceConsumeConfigItemLimit::kCountFieldNumber;
#endif  // !_MSC_VER

AllianceConsumeConfigItemLimit::AllianceConsumeConfigItemLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
}

void AllianceConsumeConfigItemLimit::InitAsDefaultInstance() {
}

AllianceConsumeConfigItemLimit::AllianceConsumeConfigItemLimit(const AllianceConsumeConfigItemLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
}

void AllianceConsumeConfigItemLimit::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  price_ = 0;
  limit_ = 0u;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceConsumeConfigItemLimit::~AllianceConsumeConfigItemLimit() {
  // @@protoc_insertion_point(destructor:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
  SharedDtor();
}

void AllianceConsumeConfigItemLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceConsumeConfigItemLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceConsumeConfigItemLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceConsumeConfigItemLimit_descriptor_;
}

const AllianceConsumeConfigItemLimit& AllianceConsumeConfigItemLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllianceConsumeConfig_2eproto();
  return *default_instance_;
}

AllianceConsumeConfigItemLimit* AllianceConsumeConfigItemLimit::default_instance_ = NULL;

AllianceConsumeConfigItemLimit* AllianceConsumeConfigItemLimit::New() const {
  return new AllianceConsumeConfigItemLimit;
}

void AllianceConsumeConfigItemLimit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AllianceConsumeConfigItemLimit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceConsumeConfigItemLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // required int32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }

      // required uint32 limit = 3;
      case 3: {
        if (tag == 24) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // required int32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
  return false;
#undef DO_
}

void AllianceConsumeConfigItemLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // required uint32 limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
}

::google::protobuf::uint8* AllianceConsumeConfigItemLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // required uint32 limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllianceConsumeConfig.AllianceConsumeConfigItemLimit)
  return target;
}

int AllianceConsumeConfigItemLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required uint32 limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceConsumeConfigItemLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceConsumeConfigItemLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceConsumeConfigItemLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceConsumeConfigItemLimit::MergeFrom(const AllianceConsumeConfigItemLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceConsumeConfigItemLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceConsumeConfigItemLimit::CopyFrom(const AllianceConsumeConfigItemLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceConsumeConfigItemLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AllianceConsumeConfigItemLimit::Swap(AllianceConsumeConfigItemLimit* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(price_, other->price_);
    std::swap(limit_, other->limit_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceConsumeConfigItemLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceConsumeConfigItemLimit_descriptor_;
  metadata.reflection = AllianceConsumeConfigItemLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllianceConsumeConfig::kAFieldNumber;
const int AllianceConsumeConfig::kBFieldNumber;
const int AllianceConsumeConfig::kCFieldNumber;
const int AllianceConsumeConfig::kDFieldNumber;
#endif  // !_MSC_VER

AllianceConsumeConfig::AllianceConsumeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllianceConsumeConfig.AllianceConsumeConfig)
}

void AllianceConsumeConfig::InitAsDefaultInstance() {
}

AllianceConsumeConfig::AllianceConsumeConfig(const AllianceConsumeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllianceConsumeConfig.AllianceConsumeConfig)
}

void AllianceConsumeConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllianceConsumeConfig::~AllianceConsumeConfig() {
  // @@protoc_insertion_point(destructor:AllianceConsumeConfig.AllianceConsumeConfig)
  SharedDtor();
}

void AllianceConsumeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllianceConsumeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllianceConsumeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllianceConsumeConfig_descriptor_;
}

const AllianceConsumeConfig& AllianceConsumeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllianceConsumeConfig_2eproto();
  return *default_instance_;
}

AllianceConsumeConfig* AllianceConsumeConfig::default_instance_ = NULL;

AllianceConsumeConfig* AllianceConsumeConfig::New() const {
  return new AllianceConsumeConfig;
}

void AllianceConsumeConfig::Clear() {
  a_.Clear();
  b_.Clear();
  c_.Clear();
  d_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllianceConsumeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllianceConsumeConfig.AllianceConsumeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AllianceConsumeConfig.AllianceConsumeConfigItem a = 1;
      case 1: {
        if (tag == 10) {
         parse_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_a;
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit b = 2;
      case 2: {
        if (tag == 18) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_b;
        if (input->ExpectTag(26)) goto parse_c;
        break;
      }

      // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit c = 3;
      case 3: {
        if (tag == 26) {
         parse_c:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_c()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_c;
        if (input->ExpectTag(34)) goto parse_d;
        break;
      }

      // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit d = 4;
      case 4: {
        if (tag == 34) {
         parse_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_d;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllianceConsumeConfig.AllianceConsumeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllianceConsumeConfig.AllianceConsumeConfig)
  return false;
#undef DO_
}

void AllianceConsumeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllianceConsumeConfig.AllianceConsumeConfig)
  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItem a = 1;
  for (int i = 0; i < this->a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->a(i), output);
  }

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit b = 2;
  for (int i = 0; i < this->b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(i), output);
  }

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit c = 3;
  for (int i = 0; i < this->c_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->c(i), output);
  }

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit d = 4;
  for (int i = 0; i < this->d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->d(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllianceConsumeConfig.AllianceConsumeConfig)
}

::google::protobuf::uint8* AllianceConsumeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllianceConsumeConfig.AllianceConsumeConfig)
  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItem a = 1;
  for (int i = 0; i < this->a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->a(i), target);
  }

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit b = 2;
  for (int i = 0; i < this->b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(i), target);
  }

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit c = 3;
  for (int i = 0; i < this->c_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->c(i), target);
  }

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit d = 4;
  for (int i = 0; i < this->d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->d(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllianceConsumeConfig.AllianceConsumeConfig)
  return target;
}

int AllianceConsumeConfig::ByteSize() const {
  int total_size = 0;

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItem a = 1;
  total_size += 1 * this->a_size();
  for (int i = 0; i < this->a_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->a(i));
  }

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit b = 2;
  total_size += 1 * this->b_size();
  for (int i = 0; i < this->b_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->b(i));
  }

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit c = 3;
  total_size += 1 * this->c_size();
  for (int i = 0; i < this->c_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->c(i));
  }

  // repeated .AllianceConsumeConfig.AllianceConsumeConfigItemLimit d = 4;
  total_size += 1 * this->d_size();
  for (int i = 0; i < this->d_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->d(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllianceConsumeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllianceConsumeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllianceConsumeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllianceConsumeConfig::MergeFrom(const AllianceConsumeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  a_.MergeFrom(from.a_);
  b_.MergeFrom(from.b_);
  c_.MergeFrom(from.c_);
  d_.MergeFrom(from.d_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllianceConsumeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllianceConsumeConfig::CopyFrom(const AllianceConsumeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllianceConsumeConfig::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->a())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->b())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->c())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->d())) return false;
  return true;
}

void AllianceConsumeConfig::Swap(AllianceConsumeConfig* other) {
  if (other != this) {
    a_.Swap(&other->a_);
    b_.Swap(&other->b_);
    c_.Swap(&other->c_);
    d_.Swap(&other->d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllianceConsumeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllianceConsumeConfig_descriptor_;
  metadata.reflection = AllianceConsumeConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AllianceConsumeConfig

// @@protoc_insertion_point(global_scope)
