// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TwoHolidayConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TwoHolidayConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TwoHolidayConfig {

namespace {

const ::google::protobuf::Descriptor* EveryDayRechargeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EveryDayRechargeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* EveryDayOnlineItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EveryDayOnlineItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* cheapItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cheapItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TwoHolidayItmCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TwoHolidayItmCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TwoHolidayConfig_2eproto() {
  protobuf_AddDesc_TwoHolidayConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TwoHolidayConfig.proto");
  GOOGLE_CHECK(file != NULL);
  EveryDayRechargeItem_descriptor_ = file->message_type(0);
  static const int EveryDayRechargeItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayRechargeItem, reward_one_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayRechargeItem, reward_seven_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayRechargeItem, reward_twelve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayRechargeItem, charge_),
  };
  EveryDayRechargeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EveryDayRechargeItem_descriptor_,
      EveryDayRechargeItem::default_instance_,
      EveryDayRechargeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayRechargeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayRechargeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EveryDayRechargeItem));
  EveryDayOnlineItem_descriptor_ = file->message_type(1);
  static const int EveryDayOnlineItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayOnlineItem, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayOnlineItem, ts_limit_),
  };
  EveryDayOnlineItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EveryDayOnlineItem_descriptor_,
      EveryDayOnlineItem::default_instance_,
      EveryDayOnlineItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayOnlineItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EveryDayOnlineItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EveryDayOnlineItem));
  cheapItem_descriptor_ = file->message_type(2);
  static const int cheapItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cheapItem, price_discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cheapItem, reward_),
  };
  cheapItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cheapItem_descriptor_,
      cheapItem::default_instance_,
      cheapItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cheapItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cheapItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cheapItem));
  BuyItem_descriptor_ = file->message_type(3);
  static const int BuyItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItem, recharge_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItem, cheap_buy_),
  };
  BuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyItem_descriptor_,
      BuyItem::default_instance_,
      BuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyItem));
  VipItem_descriptor_ = file->message_type(4);
  static const int VipItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipItem, reward_one_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipItem, reward_two_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipItem, reward_three_),
  };
  VipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipItem_descriptor_,
      VipItem::default_instance_,
      VipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipItem));
  TwoHolidayItmCfg_descriptor_ = file->message_type(5);
  static const int TwoHolidayItmCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoHolidayItmCfg, everyday_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoHolidayItmCfg, eveyday_online_),
  };
  TwoHolidayItmCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TwoHolidayItmCfg_descriptor_,
      TwoHolidayItmCfg::default_instance_,
      TwoHolidayItmCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoHolidayItmCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwoHolidayItmCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TwoHolidayItmCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TwoHolidayConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EveryDayRechargeItem_descriptor_, &EveryDayRechargeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EveryDayOnlineItem_descriptor_, &EveryDayOnlineItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cheapItem_descriptor_, &cheapItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyItem_descriptor_, &BuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipItem_descriptor_, &VipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TwoHolidayItmCfg_descriptor_, &TwoHolidayItmCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TwoHolidayConfig_2eproto() {
  delete EveryDayRechargeItem::default_instance_;
  delete EveryDayRechargeItem_reflection_;
  delete EveryDayOnlineItem::default_instance_;
  delete EveryDayOnlineItem_reflection_;
  delete cheapItem::default_instance_;
  delete cheapItem_reflection_;
  delete BuyItem::default_instance_;
  delete BuyItem_reflection_;
  delete VipItem::default_instance_;
  delete VipItem_reflection_;
  delete TwoHolidayItmCfg::default_instance_;
  delete TwoHolidayItmCfg_reflection_;
}

void protobuf_AddDesc_TwoHolidayConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026TwoHolidayConfig.proto\022\020TwoHolidayConf"
    "ig\032\022RewardConfig.proto\"\276\001\n\024EveryDayRecha"
    "rgeItem\022/\n\nreward_one\030\001 \003(\0132\033.RewardConf"
    "ig.RewardItemCfg\0221\n\014reward_seven\030\002 \003(\0132\033"
    ".RewardConfig.RewardItemCfg\0222\n\rreward_tw"
    "elve\030\003 \003(\0132\033.RewardConfig.RewardItemCfg\022"
    "\016\n\006charge\030\004 \002(\r\"S\n\022EveryDayOnlineItem\022+\n"
    "\006reward\030\001 \003(\0132\033.RewardConfig.RewardItemC"
    "fg\022\020\n\010ts_limit\030\002 \002(\r\"P\n\tcheapItem\022\026\n\016pri"
    "ce_discount\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132\033.Rewa"
    "rdConfig.RewardItemCfg\"Q\n\007BuyItem\022\026\n\016rec"
    "harge_limit\030\001 \002(\r\022.\n\tcheap_buy\030\002 \003(\0132\033.T"
    "woHolidayConfig.cheapItem\"\236\001\n\007VipItem\022/\n"
    "\nreward_one\030\001 \003(\0132\033.RewardConfig.RewardI"
    "temCfg\022/\n\nreward_two\030\002 \003(\0132\033.RewardConfi"
    "g.RewardItemCfg\0221\n\014reward_three\030\003 \003(\0132\033."
    "RewardConfig.RewardItemCfg\"\223\001\n\020TwoHolida"
    "yItmCfg\022A\n\021everyday_recharge\030\001 \002(\0132&.Two"
    "HolidayConfig.EveryDayRechargeItem\022<\n\016ev"
    "eyday_online\030\002 \002(\0132$.TwoHolidayConfig.Ev"
    "eryDayOnlineItem", 816);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TwoHolidayConfig.proto", &protobuf_RegisterTypes);
  EveryDayRechargeItem::default_instance_ = new EveryDayRechargeItem();
  EveryDayOnlineItem::default_instance_ = new EveryDayOnlineItem();
  cheapItem::default_instance_ = new cheapItem();
  BuyItem::default_instance_ = new BuyItem();
  VipItem::default_instance_ = new VipItem();
  TwoHolidayItmCfg::default_instance_ = new TwoHolidayItmCfg();
  EveryDayRechargeItem::default_instance_->InitAsDefaultInstance();
  EveryDayOnlineItem::default_instance_->InitAsDefaultInstance();
  cheapItem::default_instance_->InitAsDefaultInstance();
  BuyItem::default_instance_->InitAsDefaultInstance();
  VipItem::default_instance_->InitAsDefaultInstance();
  TwoHolidayItmCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TwoHolidayConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TwoHolidayConfig_2eproto {
  StaticDescriptorInitializer_TwoHolidayConfig_2eproto() {
    protobuf_AddDesc_TwoHolidayConfig_2eproto();
  }
} static_descriptor_initializer_TwoHolidayConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EveryDayRechargeItem::kRewardOneFieldNumber;
const int EveryDayRechargeItem::kRewardSevenFieldNumber;
const int EveryDayRechargeItem::kRewardTwelveFieldNumber;
const int EveryDayRechargeItem::kChargeFieldNumber;
#endif  // !_MSC_VER

EveryDayRechargeItem::EveryDayRechargeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TwoHolidayConfig.EveryDayRechargeItem)
}

void EveryDayRechargeItem::InitAsDefaultInstance() {
}

EveryDayRechargeItem::EveryDayRechargeItem(const EveryDayRechargeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TwoHolidayConfig.EveryDayRechargeItem)
}

void EveryDayRechargeItem::SharedCtor() {
  _cached_size_ = 0;
  charge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EveryDayRechargeItem::~EveryDayRechargeItem() {
  // @@protoc_insertion_point(destructor:TwoHolidayConfig.EveryDayRechargeItem)
  SharedDtor();
}

void EveryDayRechargeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EveryDayRechargeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EveryDayRechargeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EveryDayRechargeItem_descriptor_;
}

const EveryDayRechargeItem& EveryDayRechargeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TwoHolidayConfig_2eproto();
  return *default_instance_;
}

EveryDayRechargeItem* EveryDayRechargeItem::default_instance_ = NULL;

EveryDayRechargeItem* EveryDayRechargeItem::New() const {
  return new EveryDayRechargeItem;
}

void EveryDayRechargeItem::Clear() {
  charge_ = 0u;
  reward_one_.Clear();
  reward_seven_.Clear();
  reward_twelve_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EveryDayRechargeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TwoHolidayConfig.EveryDayRechargeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardConfig.RewardItemCfg reward_one = 1;
      case 1: {
        if (tag == 10) {
         parse_reward_one:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_one()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_reward_one;
        if (input->ExpectTag(18)) goto parse_reward_seven;
        break;
      }

      // repeated .RewardConfig.RewardItemCfg reward_seven = 2;
      case 2: {
        if (tag == 18) {
         parse_reward_seven:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_seven()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward_seven;
        if (input->ExpectTag(26)) goto parse_reward_twelve;
        break;
      }

      // repeated .RewardConfig.RewardItemCfg reward_twelve = 3;
      case 3: {
        if (tag == 26) {
         parse_reward_twelve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_twelve()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward_twelve;
        if (input->ExpectTag(32)) goto parse_charge;
        break;
      }

      // required uint32 charge = 4;
      case 4: {
        if (tag == 32) {
         parse_charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TwoHolidayConfig.EveryDayRechargeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TwoHolidayConfig.EveryDayRechargeItem)
  return false;
#undef DO_
}

void EveryDayRechargeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TwoHolidayConfig.EveryDayRechargeItem)
  // repeated .RewardConfig.RewardItemCfg reward_one = 1;
  for (int i = 0; i < this->reward_one_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward_one(i), output);
  }

  // repeated .RewardConfig.RewardItemCfg reward_seven = 2;
  for (int i = 0; i < this->reward_seven_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward_seven(i), output);
  }

  // repeated .RewardConfig.RewardItemCfg reward_twelve = 3;
  for (int i = 0; i < this->reward_twelve_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward_twelve(i), output);
  }

  // required uint32 charge = 4;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TwoHolidayConfig.EveryDayRechargeItem)
}

::google::protobuf::uint8* EveryDayRechargeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TwoHolidayConfig.EveryDayRechargeItem)
  // repeated .RewardConfig.RewardItemCfg reward_one = 1;
  for (int i = 0; i < this->reward_one_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward_one(i), target);
  }

  // repeated .RewardConfig.RewardItemCfg reward_seven = 2;
  for (int i = 0; i < this->reward_seven_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward_seven(i), target);
  }

  // repeated .RewardConfig.RewardItemCfg reward_twelve = 3;
  for (int i = 0; i < this->reward_twelve_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward_twelve(i), target);
  }

  // required uint32 charge = 4;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TwoHolidayConfig.EveryDayRechargeItem)
  return target;
}

int EveryDayRechargeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required uint32 charge = 4;
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charge());
    }

  }
  // repeated .RewardConfig.RewardItemCfg reward_one = 1;
  total_size += 1 * this->reward_one_size();
  for (int i = 0; i < this->reward_one_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_one(i));
  }

  // repeated .RewardConfig.RewardItemCfg reward_seven = 2;
  total_size += 1 * this->reward_seven_size();
  for (int i = 0; i < this->reward_seven_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_seven(i));
  }

  // repeated .RewardConfig.RewardItemCfg reward_twelve = 3;
  total_size += 1 * this->reward_twelve_size();
  for (int i = 0; i < this->reward_twelve_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_twelve(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EveryDayRechargeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EveryDayRechargeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EveryDayRechargeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EveryDayRechargeItem::MergeFrom(const EveryDayRechargeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_one_.MergeFrom(from.reward_one_);
  reward_seven_.MergeFrom(from.reward_seven_);
  reward_twelve_.MergeFrom(from.reward_twelve_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_charge()) {
      set_charge(from.charge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EveryDayRechargeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EveryDayRechargeItem::CopyFrom(const EveryDayRechargeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EveryDayRechargeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward_one())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward_seven())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward_twelve())) return false;
  return true;
}

void EveryDayRechargeItem::Swap(EveryDayRechargeItem* other) {
  if (other != this) {
    reward_one_.Swap(&other->reward_one_);
    reward_seven_.Swap(&other->reward_seven_);
    reward_twelve_.Swap(&other->reward_twelve_);
    std::swap(charge_, other->charge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EveryDayRechargeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EveryDayRechargeItem_descriptor_;
  metadata.reflection = EveryDayRechargeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EveryDayOnlineItem::kRewardFieldNumber;
const int EveryDayOnlineItem::kTsLimitFieldNumber;
#endif  // !_MSC_VER

EveryDayOnlineItem::EveryDayOnlineItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TwoHolidayConfig.EveryDayOnlineItem)
}

void EveryDayOnlineItem::InitAsDefaultInstance() {
}

EveryDayOnlineItem::EveryDayOnlineItem(const EveryDayOnlineItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TwoHolidayConfig.EveryDayOnlineItem)
}

void EveryDayOnlineItem::SharedCtor() {
  _cached_size_ = 0;
  ts_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EveryDayOnlineItem::~EveryDayOnlineItem() {
  // @@protoc_insertion_point(destructor:TwoHolidayConfig.EveryDayOnlineItem)
  SharedDtor();
}

void EveryDayOnlineItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EveryDayOnlineItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EveryDayOnlineItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EveryDayOnlineItem_descriptor_;
}

const EveryDayOnlineItem& EveryDayOnlineItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TwoHolidayConfig_2eproto();
  return *default_instance_;
}

EveryDayOnlineItem* EveryDayOnlineItem::default_instance_ = NULL;

EveryDayOnlineItem* EveryDayOnlineItem::New() const {
  return new EveryDayOnlineItem;
}

void EveryDayOnlineItem::Clear() {
  ts_limit_ = 0u;
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EveryDayOnlineItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TwoHolidayConfig.EveryDayOnlineItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardConfig.RewardItemCfg reward = 1;
      case 1: {
        if (tag == 10) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectTag(16)) goto parse_ts_limit;
        break;
      }

      // required uint32 ts_limit = 2;
      case 2: {
        if (tag == 16) {
         parse_ts_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_limit_)));
          set_has_ts_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TwoHolidayConfig.EveryDayOnlineItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TwoHolidayConfig.EveryDayOnlineItem)
  return false;
#undef DO_
}

void EveryDayOnlineItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TwoHolidayConfig.EveryDayOnlineItem)
  // repeated .RewardConfig.RewardItemCfg reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  // required uint32 ts_limit = 2;
  if (has_ts_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TwoHolidayConfig.EveryDayOnlineItem)
}

::google::protobuf::uint8* EveryDayOnlineItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TwoHolidayConfig.EveryDayOnlineItem)
  // repeated .RewardConfig.RewardItemCfg reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  // required uint32 ts_limit = 2;
  if (has_ts_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TwoHolidayConfig.EveryDayOnlineItem)
  return target;
}

int EveryDayOnlineItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 ts_limit = 2;
    if (has_ts_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts_limit());
    }

  }
  // repeated .RewardConfig.RewardItemCfg reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EveryDayOnlineItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EveryDayOnlineItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EveryDayOnlineItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EveryDayOnlineItem::MergeFrom(const EveryDayOnlineItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ts_limit()) {
      set_ts_limit(from.ts_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EveryDayOnlineItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EveryDayOnlineItem::CopyFrom(const EveryDayOnlineItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EveryDayOnlineItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void EveryDayOnlineItem::Swap(EveryDayOnlineItem* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(ts_limit_, other->ts_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EveryDayOnlineItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EveryDayOnlineItem_descriptor_;
  metadata.reflection = EveryDayOnlineItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cheapItem::kPriceDiscountFieldNumber;
const int cheapItem::kRewardFieldNumber;
#endif  // !_MSC_VER

cheapItem::cheapItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TwoHolidayConfig.cheapItem)
}

void cheapItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

cheapItem::cheapItem(const cheapItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TwoHolidayConfig.cheapItem)
}

void cheapItem::SharedCtor() {
  _cached_size_ = 0;
  price_discount_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cheapItem::~cheapItem() {
  // @@protoc_insertion_point(destructor:TwoHolidayConfig.cheapItem)
  SharedDtor();
}

void cheapItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void cheapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cheapItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cheapItem_descriptor_;
}

const cheapItem& cheapItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TwoHolidayConfig_2eproto();
  return *default_instance_;
}

cheapItem* cheapItem::default_instance_ = NULL;

cheapItem* cheapItem::New() const {
  return new cheapItem;
}

void cheapItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    price_discount_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cheapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TwoHolidayConfig.cheapItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 price_discount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_discount_)));
          set_has_price_discount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TwoHolidayConfig.cheapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TwoHolidayConfig.cheapItem)
  return false;
#undef DO_
}

void cheapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TwoHolidayConfig.cheapItem)
  // required uint32 price_discount = 1;
  if (has_price_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->price_discount(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TwoHolidayConfig.cheapItem)
}

::google::protobuf::uint8* cheapItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TwoHolidayConfig.cheapItem)
  // required uint32 price_discount = 1;
  if (has_price_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->price_discount(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TwoHolidayConfig.cheapItem)
  return target;
}

int cheapItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 price_discount = 1;
    if (has_price_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_discount());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cheapItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cheapItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cheapItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cheapItem::MergeFrom(const cheapItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price_discount()) {
      set_price_discount(from.price_discount());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cheapItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cheapItem::CopyFrom(const cheapItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cheapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void cheapItem::Swap(cheapItem* other) {
  if (other != this) {
    std::swap(price_discount_, other->price_discount_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cheapItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cheapItem_descriptor_;
  metadata.reflection = cheapItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyItem::kRechargeLimitFieldNumber;
const int BuyItem::kCheapBuyFieldNumber;
#endif  // !_MSC_VER

BuyItem::BuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TwoHolidayConfig.BuyItem)
}

void BuyItem::InitAsDefaultInstance() {
}

BuyItem::BuyItem(const BuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TwoHolidayConfig.BuyItem)
}

void BuyItem::SharedCtor() {
  _cached_size_ = 0;
  recharge_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyItem::~BuyItem() {
  // @@protoc_insertion_point(destructor:TwoHolidayConfig.BuyItem)
  SharedDtor();
}

void BuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyItem_descriptor_;
}

const BuyItem& BuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TwoHolidayConfig_2eproto();
  return *default_instance_;
}

BuyItem* BuyItem::default_instance_ = NULL;

BuyItem* BuyItem::New() const {
  return new BuyItem;
}

void BuyItem::Clear() {
  recharge_limit_ = 0u;
  cheap_buy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TwoHolidayConfig.BuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 recharge_limit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_limit_)));
          set_has_recharge_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cheap_buy;
        break;
      }

      // repeated .TwoHolidayConfig.cheapItem cheap_buy = 2;
      case 2: {
        if (tag == 18) {
         parse_cheap_buy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cheap_buy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cheap_buy;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TwoHolidayConfig.BuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TwoHolidayConfig.BuyItem)
  return false;
#undef DO_
}

void BuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TwoHolidayConfig.BuyItem)
  // required uint32 recharge_limit = 1;
  if (has_recharge_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recharge_limit(), output);
  }

  // repeated .TwoHolidayConfig.cheapItem cheap_buy = 2;
  for (int i = 0; i < this->cheap_buy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cheap_buy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TwoHolidayConfig.BuyItem)
}

::google::protobuf::uint8* BuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TwoHolidayConfig.BuyItem)
  // required uint32 recharge_limit = 1;
  if (has_recharge_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recharge_limit(), target);
  }

  // repeated .TwoHolidayConfig.cheapItem cheap_buy = 2;
  for (int i = 0; i < this->cheap_buy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cheap_buy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TwoHolidayConfig.BuyItem)
  return target;
}

int BuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 recharge_limit = 1;
    if (has_recharge_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge_limit());
    }

  }
  // repeated .TwoHolidayConfig.cheapItem cheap_buy = 2;
  total_size += 1 * this->cheap_buy_size();
  for (int i = 0; i < this->cheap_buy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cheap_buy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyItem::MergeFrom(const BuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  cheap_buy_.MergeFrom(from.cheap_buy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recharge_limit()) {
      set_recharge_limit(from.recharge_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyItem::CopyFrom(const BuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cheap_buy())) return false;
  return true;
}

void BuyItem::Swap(BuyItem* other) {
  if (other != this) {
    std::swap(recharge_limit_, other->recharge_limit_);
    cheap_buy_.Swap(&other->cheap_buy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyItem_descriptor_;
  metadata.reflection = BuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipItem::kRewardOneFieldNumber;
const int VipItem::kRewardTwoFieldNumber;
const int VipItem::kRewardThreeFieldNumber;
#endif  // !_MSC_VER

VipItem::VipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TwoHolidayConfig.VipItem)
}

void VipItem::InitAsDefaultInstance() {
}

VipItem::VipItem(const VipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TwoHolidayConfig.VipItem)
}

void VipItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipItem::~VipItem() {
  // @@protoc_insertion_point(destructor:TwoHolidayConfig.VipItem)
  SharedDtor();
}

void VipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipItem_descriptor_;
}

const VipItem& VipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TwoHolidayConfig_2eproto();
  return *default_instance_;
}

VipItem* VipItem::default_instance_ = NULL;

VipItem* VipItem::New() const {
  return new VipItem;
}

void VipItem::Clear() {
  reward_one_.Clear();
  reward_two_.Clear();
  reward_three_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TwoHolidayConfig.VipItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardConfig.RewardItemCfg reward_one = 1;
      case 1: {
        if (tag == 10) {
         parse_reward_one:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_one()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_reward_one;
        if (input->ExpectTag(18)) goto parse_reward_two;
        break;
      }

      // repeated .RewardConfig.RewardItemCfg reward_two = 2;
      case 2: {
        if (tag == 18) {
         parse_reward_two:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_two()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward_two;
        if (input->ExpectTag(26)) goto parse_reward_three;
        break;
      }

      // repeated .RewardConfig.RewardItemCfg reward_three = 3;
      case 3: {
        if (tag == 26) {
         parse_reward_three:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_three()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward_three;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TwoHolidayConfig.VipItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TwoHolidayConfig.VipItem)
  return false;
#undef DO_
}

void VipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TwoHolidayConfig.VipItem)
  // repeated .RewardConfig.RewardItemCfg reward_one = 1;
  for (int i = 0; i < this->reward_one_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward_one(i), output);
  }

  // repeated .RewardConfig.RewardItemCfg reward_two = 2;
  for (int i = 0; i < this->reward_two_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward_two(i), output);
  }

  // repeated .RewardConfig.RewardItemCfg reward_three = 3;
  for (int i = 0; i < this->reward_three_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward_three(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TwoHolidayConfig.VipItem)
}

::google::protobuf::uint8* VipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TwoHolidayConfig.VipItem)
  // repeated .RewardConfig.RewardItemCfg reward_one = 1;
  for (int i = 0; i < this->reward_one_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward_one(i), target);
  }

  // repeated .RewardConfig.RewardItemCfg reward_two = 2;
  for (int i = 0; i < this->reward_two_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward_two(i), target);
  }

  // repeated .RewardConfig.RewardItemCfg reward_three = 3;
  for (int i = 0; i < this->reward_three_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward_three(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TwoHolidayConfig.VipItem)
  return target;
}

int VipItem::ByteSize() const {
  int total_size = 0;

  // repeated .RewardConfig.RewardItemCfg reward_one = 1;
  total_size += 1 * this->reward_one_size();
  for (int i = 0; i < this->reward_one_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_one(i));
  }

  // repeated .RewardConfig.RewardItemCfg reward_two = 2;
  total_size += 1 * this->reward_two_size();
  for (int i = 0; i < this->reward_two_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_two(i));
  }

  // repeated .RewardConfig.RewardItemCfg reward_three = 3;
  total_size += 1 * this->reward_three_size();
  for (int i = 0; i < this->reward_three_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_three(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipItem::MergeFrom(const VipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_one_.MergeFrom(from.reward_one_);
  reward_two_.MergeFrom(from.reward_two_);
  reward_three_.MergeFrom(from.reward_three_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipItem::CopyFrom(const VipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->reward_one())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward_two())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward_three())) return false;
  return true;
}

void VipItem::Swap(VipItem* other) {
  if (other != this) {
    reward_one_.Swap(&other->reward_one_);
    reward_two_.Swap(&other->reward_two_);
    reward_three_.Swap(&other->reward_three_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipItem_descriptor_;
  metadata.reflection = VipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TwoHolidayItmCfg::kEverydayRechargeFieldNumber;
const int TwoHolidayItmCfg::kEveydayOnlineFieldNumber;
#endif  // !_MSC_VER

TwoHolidayItmCfg::TwoHolidayItmCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TwoHolidayConfig.TwoHolidayItmCfg)
}

void TwoHolidayItmCfg::InitAsDefaultInstance() {
  everyday_recharge_ = const_cast< ::TwoHolidayConfig::EveryDayRechargeItem*>(&::TwoHolidayConfig::EveryDayRechargeItem::default_instance());
  eveyday_online_ = const_cast< ::TwoHolidayConfig::EveryDayOnlineItem*>(&::TwoHolidayConfig::EveryDayOnlineItem::default_instance());
}

TwoHolidayItmCfg::TwoHolidayItmCfg(const TwoHolidayItmCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TwoHolidayConfig.TwoHolidayItmCfg)
}

void TwoHolidayItmCfg::SharedCtor() {
  _cached_size_ = 0;
  everyday_recharge_ = NULL;
  eveyday_online_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TwoHolidayItmCfg::~TwoHolidayItmCfg() {
  // @@protoc_insertion_point(destructor:TwoHolidayConfig.TwoHolidayItmCfg)
  SharedDtor();
}

void TwoHolidayItmCfg::SharedDtor() {
  if (this != default_instance_) {
    delete everyday_recharge_;
    delete eveyday_online_;
  }
}

void TwoHolidayItmCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwoHolidayItmCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TwoHolidayItmCfg_descriptor_;
}

const TwoHolidayItmCfg& TwoHolidayItmCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TwoHolidayConfig_2eproto();
  return *default_instance_;
}

TwoHolidayItmCfg* TwoHolidayItmCfg::default_instance_ = NULL;

TwoHolidayItmCfg* TwoHolidayItmCfg::New() const {
  return new TwoHolidayItmCfg;
}

void TwoHolidayItmCfg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_everyday_recharge()) {
      if (everyday_recharge_ != NULL) everyday_recharge_->::TwoHolidayConfig::EveryDayRechargeItem::Clear();
    }
    if (has_eveyday_online()) {
      if (eveyday_online_ != NULL) eveyday_online_->::TwoHolidayConfig::EveryDayOnlineItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TwoHolidayItmCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TwoHolidayConfig.TwoHolidayItmCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TwoHolidayConfig.EveryDayRechargeItem everyday_recharge = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_everyday_recharge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_eveyday_online;
        break;
      }

      // required .TwoHolidayConfig.EveryDayOnlineItem eveyday_online = 2;
      case 2: {
        if (tag == 18) {
         parse_eveyday_online:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eveyday_online()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TwoHolidayConfig.TwoHolidayItmCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TwoHolidayConfig.TwoHolidayItmCfg)
  return false;
#undef DO_
}

void TwoHolidayItmCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TwoHolidayConfig.TwoHolidayItmCfg)
  // required .TwoHolidayConfig.EveryDayRechargeItem everyday_recharge = 1;
  if (has_everyday_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->everyday_recharge(), output);
  }

  // required .TwoHolidayConfig.EveryDayOnlineItem eveyday_online = 2;
  if (has_eveyday_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eveyday_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TwoHolidayConfig.TwoHolidayItmCfg)
}

::google::protobuf::uint8* TwoHolidayItmCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TwoHolidayConfig.TwoHolidayItmCfg)
  // required .TwoHolidayConfig.EveryDayRechargeItem everyday_recharge = 1;
  if (has_everyday_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->everyday_recharge(), target);
  }

  // required .TwoHolidayConfig.EveryDayOnlineItem eveyday_online = 2;
  if (has_eveyday_online()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eveyday_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TwoHolidayConfig.TwoHolidayItmCfg)
  return target;
}

int TwoHolidayItmCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TwoHolidayConfig.EveryDayRechargeItem everyday_recharge = 1;
    if (has_everyday_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->everyday_recharge());
    }

    // required .TwoHolidayConfig.EveryDayOnlineItem eveyday_online = 2;
    if (has_eveyday_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eveyday_online());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwoHolidayItmCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TwoHolidayItmCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TwoHolidayItmCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TwoHolidayItmCfg::MergeFrom(const TwoHolidayItmCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_everyday_recharge()) {
      mutable_everyday_recharge()->::TwoHolidayConfig::EveryDayRechargeItem::MergeFrom(from.everyday_recharge());
    }
    if (from.has_eveyday_online()) {
      mutable_eveyday_online()->::TwoHolidayConfig::EveryDayOnlineItem::MergeFrom(from.eveyday_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TwoHolidayItmCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoHolidayItmCfg::CopyFrom(const TwoHolidayItmCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoHolidayItmCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_everyday_recharge()) {
    if (!this->everyday_recharge().IsInitialized()) return false;
  }
  if (has_eveyday_online()) {
    if (!this->eveyday_online().IsInitialized()) return false;
  }
  return true;
}

void TwoHolidayItmCfg::Swap(TwoHolidayItmCfg* other) {
  if (other != this) {
    std::swap(everyday_recharge_, other->everyday_recharge_);
    std::swap(eveyday_online_, other->eveyday_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TwoHolidayItmCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TwoHolidayItmCfg_descriptor_;
  metadata.reflection = TwoHolidayItmCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TwoHolidayConfig

// @@protoc_insertion_point(global_scope)
