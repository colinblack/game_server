// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigScrollFeedback.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigScrollFeedback.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigScrollFeedback {

namespace {

const ::google::protobuf::Descriptor* FeedBackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedBackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScrollFeedBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScrollFeedBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigScrollFeedback_2eproto() {
  protobuf_AddDesc_ConfigScrollFeedback_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigScrollFeedback.proto");
  GOOGLE_CHECK(file != NULL);
  FeedBackItem_descriptor_ = file->message_type(0);
  static const int FeedBackItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedBackItem, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedBackItem, reward_),
  };
  FeedBackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedBackItem_descriptor_,
      FeedBackItem::default_instance_,
      FeedBackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedBackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedBackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedBackItem));
  ScrollFeedBack_descriptor_ = file->message_type(1);
  static const int ScrollFeedBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollFeedBack, scrollfeedback_),
  };
  ScrollFeedBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScrollFeedBack_descriptor_,
      ScrollFeedBack::default_instance_,
      ScrollFeedBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollFeedBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScrollFeedBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScrollFeedBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigScrollFeedback_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedBackItem_descriptor_, &FeedBackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScrollFeedBack_descriptor_, &ScrollFeedBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigScrollFeedback_2eproto() {
  delete FeedBackItem::default_instance_;
  delete FeedBackItem_reflection_;
  delete ScrollFeedBack::default_instance_;
  delete ScrollFeedBack_reflection_;
}

void protobuf_AddDesc_ConfigScrollFeedback_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032ConfigScrollFeedback.proto\022\024ConfigScro"
    "llFeedback\032\022RewardConfig.proto\"L\n\014FeedBa"
    "ckItem\022\017\n\007diamond\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132"
    "\033.RewardConfig.RewardItemCfg\"L\n\016ScrollFe"
    "edBack\022:\n\016scrollfeedback\030\001 \003(\0132\".ConfigS"
    "crollFeedback.FeedBackItem", 226);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigScrollFeedback.proto", &protobuf_RegisterTypes);
  FeedBackItem::default_instance_ = new FeedBackItem();
  ScrollFeedBack::default_instance_ = new ScrollFeedBack();
  FeedBackItem::default_instance_->InitAsDefaultInstance();
  ScrollFeedBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigScrollFeedback_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigScrollFeedback_2eproto {
  StaticDescriptorInitializer_ConfigScrollFeedback_2eproto() {
    protobuf_AddDesc_ConfigScrollFeedback_2eproto();
  }
} static_descriptor_initializer_ConfigScrollFeedback_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FeedBackItem::kDiamondFieldNumber;
const int FeedBackItem::kRewardFieldNumber;
#endif  // !_MSC_VER

FeedBackItem::FeedBackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigScrollFeedback.FeedBackItem)
}

void FeedBackItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

FeedBackItem::FeedBackItem(const FeedBackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigScrollFeedback.FeedBackItem)
}

void FeedBackItem::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedBackItem::~FeedBackItem() {
  // @@protoc_insertion_point(destructor:ConfigScrollFeedback.FeedBackItem)
  SharedDtor();
}

void FeedBackItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void FeedBackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedBackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedBackItem_descriptor_;
}

const FeedBackItem& FeedBackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigScrollFeedback_2eproto();
  return *default_instance_;
}

FeedBackItem* FeedBackItem::default_instance_ = NULL;

FeedBackItem* FeedBackItem::New() const {
  return new FeedBackItem;
}

void FeedBackItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    diamond_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedBackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigScrollFeedback.FeedBackItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigScrollFeedback.FeedBackItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigScrollFeedback.FeedBackItem)
  return false;
#undef DO_
}

void FeedBackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigScrollFeedback.FeedBackItem)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigScrollFeedback.FeedBackItem)
}

::google::protobuf::uint8* FeedBackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigScrollFeedback.FeedBackItem)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigScrollFeedback.FeedBackItem)
  return target;
}

int FeedBackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedBackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedBackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedBackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedBackItem::MergeFrom(const FeedBackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedBackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedBackItem::CopyFrom(const FeedBackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedBackItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void FeedBackItem::Swap(FeedBackItem* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedBackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedBackItem_descriptor_;
  metadata.reflection = FeedBackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScrollFeedBack::kScrollfeedbackFieldNumber;
#endif  // !_MSC_VER

ScrollFeedBack::ScrollFeedBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigScrollFeedback.ScrollFeedBack)
}

void ScrollFeedBack::InitAsDefaultInstance() {
}

ScrollFeedBack::ScrollFeedBack(const ScrollFeedBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigScrollFeedback.ScrollFeedBack)
}

void ScrollFeedBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScrollFeedBack::~ScrollFeedBack() {
  // @@protoc_insertion_point(destructor:ConfigScrollFeedback.ScrollFeedBack)
  SharedDtor();
}

void ScrollFeedBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScrollFeedBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScrollFeedBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScrollFeedBack_descriptor_;
}

const ScrollFeedBack& ScrollFeedBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigScrollFeedback_2eproto();
  return *default_instance_;
}

ScrollFeedBack* ScrollFeedBack::default_instance_ = NULL;

ScrollFeedBack* ScrollFeedBack::New() const {
  return new ScrollFeedBack;
}

void ScrollFeedBack::Clear() {
  scrollfeedback_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScrollFeedBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigScrollFeedback.ScrollFeedBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigScrollFeedback.FeedBackItem scrollfeedback = 1;
      case 1: {
        if (tag == 10) {
         parse_scrollfeedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scrollfeedback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_scrollfeedback;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigScrollFeedback.ScrollFeedBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigScrollFeedback.ScrollFeedBack)
  return false;
#undef DO_
}

void ScrollFeedBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigScrollFeedback.ScrollFeedBack)
  // repeated .ConfigScrollFeedback.FeedBackItem scrollfeedback = 1;
  for (int i = 0; i < this->scrollfeedback_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scrollfeedback(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigScrollFeedback.ScrollFeedBack)
}

::google::protobuf::uint8* ScrollFeedBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigScrollFeedback.ScrollFeedBack)
  // repeated .ConfigScrollFeedback.FeedBackItem scrollfeedback = 1;
  for (int i = 0; i < this->scrollfeedback_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->scrollfeedback(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigScrollFeedback.ScrollFeedBack)
  return target;
}

int ScrollFeedBack::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigScrollFeedback.FeedBackItem scrollfeedback = 1;
  total_size += 1 * this->scrollfeedback_size();
  for (int i = 0; i < this->scrollfeedback_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scrollfeedback(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScrollFeedBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScrollFeedBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScrollFeedBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScrollFeedBack::MergeFrom(const ScrollFeedBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  scrollfeedback_.MergeFrom(from.scrollfeedback_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScrollFeedBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScrollFeedBack::CopyFrom(const ScrollFeedBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollFeedBack::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->scrollfeedback())) return false;
  return true;
}

void ScrollFeedBack::Swap(ScrollFeedBack* other) {
  if (other != this) {
    scrollfeedback_.Swap(&other->scrollfeedback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScrollFeedBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScrollFeedBack_descriptor_;
  metadata.reflection = ScrollFeedBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigScrollFeedback

// @@protoc_insertion_point(global_scope)
