// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NewWorldAllianceRoom.proto

#ifndef PROTOBUF_NewWorldAllianceRoom_2eproto__INCLUDED
#define PROTOBUF_NewWorldAllianceRoom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NewWorldAllianceRoom {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
void protobuf_AssignDesc_NewWorldAllianceRoom_2eproto();
void protobuf_ShutdownFile_NewWorldAllianceRoom_2eproto();

class NewWorldAllianceRoomHeroIndex;
class NewWorldAllianceRoomHero;
class NewWorldAllianceRoomTower;
class NewWorldAllianceRoomCity;
class NewWorldAllianceRoomBattle;
class NewWorldAllianceRoom;

// ===================================================================

class NewWorldAllianceRoomHeroIndex : public ::google::protobuf::Message {
 public:
  NewWorldAllianceRoomHeroIndex();
  virtual ~NewWorldAllianceRoomHeroIndex();

  NewWorldAllianceRoomHeroIndex(const NewWorldAllianceRoomHeroIndex& from);

  inline NewWorldAllianceRoomHeroIndex& operator=(const NewWorldAllianceRoomHeroIndex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewWorldAllianceRoomHeroIndex& default_instance();

  void Swap(NewWorldAllianceRoomHeroIndex* other);

  // implements Message ----------------------------------------------

  NewWorldAllianceRoomHeroIndex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewWorldAllianceRoomHeroIndex& from);
  void MergeFrom(const NewWorldAllianceRoomHeroIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_AssignDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_ShutdownFile_NewWorldAllianceRoom_2eproto();

  void InitAsDefaultInstance();
  static NewWorldAllianceRoomHeroIndex* default_instance_;
};
// -------------------------------------------------------------------

class NewWorldAllianceRoomHero : public ::google::protobuf::Message {
 public:
  NewWorldAllianceRoomHero();
  virtual ~NewWorldAllianceRoomHero();

  NewWorldAllianceRoomHero(const NewWorldAllianceRoomHero& from);

  inline NewWorldAllianceRoomHero& operator=(const NewWorldAllianceRoomHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewWorldAllianceRoomHero& default_instance();

  void Swap(NewWorldAllianceRoomHero* other);

  // implements Message ----------------------------------------------

  NewWorldAllianceRoomHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewWorldAllianceRoomHero& from);
  void MergeFrom(const NewWorldAllianceRoomHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex& index() const;
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex* mutable_index();
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex* release_index();
  inline void set_allocated_index(::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex* index);

  // required uint32 aid = 2;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 2;
  inline ::google::protobuf::uint32 aid() const;
  inline void set_aid(::google::protobuf::uint32 value);

  // required uint32 hid = 3;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 3;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // required uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 cid = 8;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 8;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // required uint32 mts = 9;
  inline bool has_mts() const;
  inline void clear_mts();
  static const int kMtsFieldNumber = 9;
  inline ::google::protobuf::uint32 mts() const;
  inline void set_mts(::google::protobuf::uint32 value);

  // required int32 hp = 10;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 10;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required uint32 kill = 11;
  inline bool has_kill() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 11;
  inline ::google::protobuf::uint32 kill() const;
  inline void set_kill(::google::protobuf::uint32 value);

  // required uint32 seq = 12;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 12;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);

  // repeated int32 property = 13;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 13;
  inline ::google::protobuf::int32 property(int index) const;
  inline void set_property(int index, ::google::protobuf::int32 value);
  inline void add_property(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      property() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_property();

  // optional uint32 buff = 14;
  inline bool has_buff() const;
  inline void clear_buff();
  static const int kBuffFieldNumber = 14;
  inline ::google::protobuf::uint32 buff() const;
  inline void set_buff(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NewWorldAllianceRoom.NewWorldAllianceRoomHero)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_mts();
  inline void clear_has_mts();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_kill();
  inline void clear_has_kill();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_buff();
  inline void clear_has_buff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex* index_;
  ::google::protobuf::uint32 aid_;
  ::google::protobuf::uint32 hid_;
  ::std::string* name_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 mts_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::uint32 kill_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > property_;
  ::google::protobuf::uint32 buff_;
  friend void  protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_AssignDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_ShutdownFile_NewWorldAllianceRoom_2eproto();

  void InitAsDefaultInstance();
  static NewWorldAllianceRoomHero* default_instance_;
};
// -------------------------------------------------------------------

class NewWorldAllianceRoomTower : public ::google::protobuf::Message {
 public:
  NewWorldAllianceRoomTower();
  virtual ~NewWorldAllianceRoomTower();

  NewWorldAllianceRoomTower(const NewWorldAllianceRoomTower& from);

  inline NewWorldAllianceRoomTower& operator=(const NewWorldAllianceRoomTower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewWorldAllianceRoomTower& default_instance();

  void Swap(NewWorldAllianceRoomTower* other);

  // implements Message ----------------------------------------------

  NewWorldAllianceRoomTower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewWorldAllianceRoomTower& from);
  void MergeFrom(const NewWorldAllianceRoomTower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 dps = 2;
  inline bool has_dps() const;
  inline void clear_dps();
  static const int kDpsFieldNumber = 2;
  inline ::google::protobuf::uint32 dps() const;
  inline void set_dps(::google::protobuf::uint32 value);

  // required uint32 hit = 3;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 3;
  inline ::google::protobuf::uint32 hit() const;
  inline void set_hit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NewWorldAllianceRoom.NewWorldAllianceRoomTower)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_dps();
  inline void clear_has_dps();
  inline void set_has_hit();
  inline void clear_has_hit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 dps_;
  ::google::protobuf::uint32 hit_;
  friend void  protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_AssignDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_ShutdownFile_NewWorldAllianceRoom_2eproto();

  void InitAsDefaultInstance();
  static NewWorldAllianceRoomTower* default_instance_;
};
// -------------------------------------------------------------------

class NewWorldAllianceRoomCity : public ::google::protobuf::Message {
 public:
  NewWorldAllianceRoomCity();
  virtual ~NewWorldAllianceRoomCity();

  NewWorldAllianceRoomCity(const NewWorldAllianceRoomCity& from);

  inline NewWorldAllianceRoomCity& operator=(const NewWorldAllianceRoomCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewWorldAllianceRoomCity& default_instance();

  void Swap(NewWorldAllianceRoomCity* other);

  // implements Message ----------------------------------------------

  NewWorldAllianceRoomCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewWorldAllianceRoomCity& from);
  void MergeFrom(const NewWorldAllianceRoomCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint32 cid() const;
  inline void set_cid(::google::protobuf::uint32 value);

  // required uint32 aid = 2;
  inline bool has_aid() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 2;
  inline ::google::protobuf::uint32 aid() const;
  inline void set_aid(::google::protobuf::uint32 value);

  // required int32 countN = 3;
  inline bool has_countn() const;
  inline void clear_countn();
  static const int kCountNFieldNumber = 3;
  inline ::google::protobuf::int32 countn() const;
  inline void set_countn(::google::protobuf::int32 value);

  // required uint32 npcts = 4;
  inline bool has_npcts() const;
  inline void clear_npcts();
  static const int kNpctsFieldNumber = 4;
  inline ::google::protobuf::uint32 npcts() const;
  inline void set_npcts(::google::protobuf::uint32 value);

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero npc = 5;
  inline int npc_size() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 5;
  inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomHero& npc(int index) const;
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* mutable_npc(int index);
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* add_npc();
  inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >&
      npc() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >*
      mutable_npc();

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero vision = 6;
  inline int vision_size() const;
  inline void clear_vision();
  static const int kVisionFieldNumber = 6;
  inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomHero& vision(int index) const;
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* mutable_vision(int index);
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* add_vision();
  inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >&
      vision() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >*
      mutable_vision();

  // optional .NewWorldAllianceRoom.NewWorldAllianceRoomTower tower = 7;
  inline bool has_tower() const;
  inline void clear_tower();
  static const int kTowerFieldNumber = 7;
  inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomTower& tower() const;
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomTower* mutable_tower();
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomTower* release_tower();
  inline void set_allocated_tower(::NewWorldAllianceRoom::NewWorldAllianceRoomTower* tower);

  // @@protoc_insertion_point(class_scope:NewWorldAllianceRoom.NewWorldAllianceRoomCity)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_aid();
  inline void clear_has_aid();
  inline void set_has_countn();
  inline void clear_has_countn();
  inline void set_has_npcts();
  inline void clear_has_npcts();
  inline void set_has_tower();
  inline void clear_has_tower();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cid_;
  ::google::protobuf::uint32 aid_;
  ::google::protobuf::int32 countn_;
  ::google::protobuf::uint32 npcts_;
  ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero > npc_;
  ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero > vision_;
  ::NewWorldAllianceRoom::NewWorldAllianceRoomTower* tower_;
  friend void  protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_AssignDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_ShutdownFile_NewWorldAllianceRoom_2eproto();

  void InitAsDefaultInstance();
  static NewWorldAllianceRoomCity* default_instance_;
};
// -------------------------------------------------------------------

class NewWorldAllianceRoomBattle : public ::google::protobuf::Message {
 public:
  NewWorldAllianceRoomBattle();
  virtual ~NewWorldAllianceRoomBattle();

  NewWorldAllianceRoomBattle(const NewWorldAllianceRoomBattle& from);

  inline NewWorldAllianceRoomBattle& operator=(const NewWorldAllianceRoomBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewWorldAllianceRoomBattle& default_instance();

  void Swap(NewWorldAllianceRoomBattle* other);

  // implements Message ----------------------------------------------

  NewWorldAllianceRoomBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewWorldAllianceRoomBattle& from);
  void MergeFrom(const NewWorldAllianceRoomBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  inline ::google::protobuf::uint32 rid() const;
  inline void set_rid(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline ::google::protobuf::uint32 reward() const;
  inline void set_reward(::google::protobuf::uint32 value);

  // required uint32 ts = 4;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 4;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // repeated uint32 aid = 5;
  inline int aid_size() const;
  inline void clear_aid();
  static const int kAidFieldNumber = 5;
  inline ::google::protobuf::uint32 aid(int index) const;
  inline void set_aid(int index, ::google::protobuf::uint32 value);
  inline void add_aid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      aid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_aid();

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero hero = 6;
  inline int hero_size() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 6;
  inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomHero& hero(int index) const;
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* mutable_hero(int index);
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* add_hero();
  inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >&
      hero() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >*
      mutable_hero();

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomCity city = 7;
  inline int city_size() const;
  inline void clear_city();
  static const int kCityFieldNumber = 7;
  inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomCity& city(int index) const;
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomCity* mutable_city(int index);
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomCity* add_city();
  inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomCity >&
      city() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomCity >*
      mutable_city();

  // @@protoc_insertion_point(class_scope:NewWorldAllianceRoom.NewWorldAllianceRoomBattle)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 reward_;
  ::google::protobuf::uint32 ts_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > aid_;
  ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero > hero_;
  ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomCity > city_;
  friend void  protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_AssignDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_ShutdownFile_NewWorldAllianceRoom_2eproto();

  void InitAsDefaultInstance();
  static NewWorldAllianceRoomBattle* default_instance_;
};
// -------------------------------------------------------------------

class NewWorldAllianceRoom : public ::google::protobuf::Message {
 public:
  NewWorldAllianceRoom();
  virtual ~NewWorldAllianceRoom();

  NewWorldAllianceRoom(const NewWorldAllianceRoom& from);

  inline NewWorldAllianceRoom& operator=(const NewWorldAllianceRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewWorldAllianceRoom& default_instance();

  void Swap(NewWorldAllianceRoom* other);

  // implements Message ----------------------------------------------

  NewWorldAllianceRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewWorldAllianceRoom& from);
  void MergeFrom(const NewWorldAllianceRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NewWorldAllianceRoom.NewWorldAllianceRoomBattle room = 1;
  inline int room_size() const;
  inline void clear_room();
  static const int kRoomFieldNumber = 1;
  inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle& room(int index) const;
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle* mutable_room(int index);
  inline ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle* add_room();
  inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle >&
      room() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle >*
      mutable_room();

  // @@protoc_insertion_point(class_scope:NewWorldAllianceRoom.NewWorldAllianceRoom)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle > room_;
  friend void  protobuf_AddDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_AssignDesc_NewWorldAllianceRoom_2eproto();
  friend void protobuf_ShutdownFile_NewWorldAllianceRoom_2eproto();

  void InitAsDefaultInstance();
  static NewWorldAllianceRoom* default_instance_;
};
// ===================================================================


// ===================================================================

// NewWorldAllianceRoomHeroIndex

// required uint32 uid = 1;
inline bool NewWorldAllianceRoomHeroIndex::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewWorldAllianceRoomHeroIndex::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewWorldAllianceRoomHeroIndex::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewWorldAllianceRoomHeroIndex::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHeroIndex::uid() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex.uid)
  return uid_;
}
inline void NewWorldAllianceRoomHeroIndex::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex.uid)
}

// required uint32 index = 2;
inline bool NewWorldAllianceRoomHeroIndex::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewWorldAllianceRoomHeroIndex::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewWorldAllianceRoomHeroIndex::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewWorldAllianceRoomHeroIndex::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHeroIndex::index() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex.index)
  return index_;
}
inline void NewWorldAllianceRoomHeroIndex::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex.index)
}

// -------------------------------------------------------------------

// NewWorldAllianceRoomHero

// required .NewWorldAllianceRoom.NewWorldAllianceRoomHeroIndex index = 1;
inline bool NewWorldAllianceRoomHero::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewWorldAllianceRoomHero::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewWorldAllianceRoomHero::clear_index() {
  if (index_ != NULL) index_->::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex::Clear();
  clear_has_index();
}
inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex& NewWorldAllianceRoomHero::index() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex* NewWorldAllianceRoomHero::mutable_index() {
  set_has_index();
  if (index_ == NULL) index_ = new ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex;
  // @@protoc_insertion_point(field_mutable:NewWorldAllianceRoom.NewWorldAllianceRoomHero.index)
  return index_;
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex* NewWorldAllianceRoomHero::release_index() {
  clear_has_index();
  ::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex* temp = index_;
  index_ = NULL;
  return temp;
}
inline void NewWorldAllianceRoomHero::set_allocated_index(::NewWorldAllianceRoom::NewWorldAllianceRoomHeroIndex* index) {
  delete index_;
  index_ = index;
  if (index) {
    set_has_index();
  } else {
    clear_has_index();
  }
  // @@protoc_insertion_point(field_set_allocated:NewWorldAllianceRoom.NewWorldAllianceRoomHero.index)
}

// required uint32 aid = 2;
inline bool NewWorldAllianceRoomHero::has_aid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_aid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewWorldAllianceRoomHero::clear_has_aid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewWorldAllianceRoomHero::clear_aid() {
  aid_ = 0u;
  clear_has_aid();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::aid() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.aid)
  return aid_;
}
inline void NewWorldAllianceRoomHero::set_aid(::google::protobuf::uint32 value) {
  set_has_aid();
  aid_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.aid)
}

// required uint32 hid = 3;
inline bool NewWorldAllianceRoomHero::has_hid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_hid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewWorldAllianceRoomHero::clear_has_hid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewWorldAllianceRoomHero::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::hid() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.hid)
  return hid_;
}
inline void NewWorldAllianceRoomHero::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.hid)
}

// required string name = 4;
inline bool NewWorldAllianceRoomHero::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewWorldAllianceRoomHero::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewWorldAllianceRoomHero::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NewWorldAllianceRoomHero::name() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.name)
  return *name_;
}
inline void NewWorldAllianceRoomHero::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.name)
}
inline void NewWorldAllianceRoomHero::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:NewWorldAllianceRoom.NewWorldAllianceRoomHero.name)
}
inline void NewWorldAllianceRoomHero::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NewWorldAllianceRoom.NewWorldAllianceRoomHero.name)
}
inline ::std::string* NewWorldAllianceRoomHero::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NewWorldAllianceRoom.NewWorldAllianceRoomHero.name)
  return name_;
}
inline ::std::string* NewWorldAllianceRoomHero::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewWorldAllianceRoomHero::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NewWorldAllianceRoom.NewWorldAllianceRoomHero.name)
}

// required uint32 job = 5;
inline bool NewWorldAllianceRoomHero::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewWorldAllianceRoomHero::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewWorldAllianceRoomHero::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::job() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.job)
  return job_;
}
inline void NewWorldAllianceRoomHero::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.job)
}

// required uint32 level = 6;
inline bool NewWorldAllianceRoomHero::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewWorldAllianceRoomHero::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewWorldAllianceRoomHero::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::level() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.level)
  return level_;
}
inline void NewWorldAllianceRoomHero::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.level)
}

// required uint32 type = 7;
inline bool NewWorldAllianceRoomHero::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewWorldAllianceRoomHero::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewWorldAllianceRoomHero::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::type() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.type)
  return type_;
}
inline void NewWorldAllianceRoomHero::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.type)
}

// required uint32 cid = 8;
inline bool NewWorldAllianceRoomHero::has_cid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_cid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NewWorldAllianceRoomHero::clear_has_cid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NewWorldAllianceRoomHero::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::cid() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.cid)
  return cid_;
}
inline void NewWorldAllianceRoomHero::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.cid)
}

// required uint32 mts = 9;
inline bool NewWorldAllianceRoomHero::has_mts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_mts() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NewWorldAllianceRoomHero::clear_has_mts() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NewWorldAllianceRoomHero::clear_mts() {
  mts_ = 0u;
  clear_has_mts();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::mts() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.mts)
  return mts_;
}
inline void NewWorldAllianceRoomHero::set_mts(::google::protobuf::uint32 value) {
  set_has_mts();
  mts_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.mts)
}

// required int32 hp = 10;
inline bool NewWorldAllianceRoomHero::has_hp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_hp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NewWorldAllianceRoomHero::clear_has_hp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NewWorldAllianceRoomHero::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 NewWorldAllianceRoomHero::hp() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.hp)
  return hp_;
}
inline void NewWorldAllianceRoomHero::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.hp)
}

// required uint32 kill = 11;
inline bool NewWorldAllianceRoomHero::has_kill() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_kill() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NewWorldAllianceRoomHero::clear_has_kill() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NewWorldAllianceRoomHero::clear_kill() {
  kill_ = 0u;
  clear_has_kill();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::kill() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.kill)
  return kill_;
}
inline void NewWorldAllianceRoomHero::set_kill(::google::protobuf::uint32 value) {
  set_has_kill();
  kill_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.kill)
}

// required uint32 seq = 12;
inline bool NewWorldAllianceRoomHero::has_seq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_seq() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NewWorldAllianceRoomHero::clear_has_seq() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NewWorldAllianceRoomHero::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::seq() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.seq)
  return seq_;
}
inline void NewWorldAllianceRoomHero::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.seq)
}

// repeated int32 property = 13;
inline int NewWorldAllianceRoomHero::property_size() const {
  return property_.size();
}
inline void NewWorldAllianceRoomHero::clear_property() {
  property_.Clear();
}
inline ::google::protobuf::int32 NewWorldAllianceRoomHero::property(int index) const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.property)
  return property_.Get(index);
}
inline void NewWorldAllianceRoomHero::set_property(int index, ::google::protobuf::int32 value) {
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.property)
}
inline void NewWorldAllianceRoomHero::add_property(::google::protobuf::int32 value) {
  property_.Add(value);
  // @@protoc_insertion_point(field_add:NewWorldAllianceRoom.NewWorldAllianceRoomHero.property)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NewWorldAllianceRoomHero::property() const {
  // @@protoc_insertion_point(field_list:NewWorldAllianceRoom.NewWorldAllianceRoomHero.property)
  return property_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NewWorldAllianceRoomHero::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:NewWorldAllianceRoom.NewWorldAllianceRoomHero.property)
  return &property_;
}

// optional uint32 buff = 14;
inline bool NewWorldAllianceRoomHero::has_buff() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NewWorldAllianceRoomHero::set_has_buff() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NewWorldAllianceRoomHero::clear_has_buff() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NewWorldAllianceRoomHero::clear_buff() {
  buff_ = 0u;
  clear_has_buff();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomHero::buff() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomHero.buff)
  return buff_;
}
inline void NewWorldAllianceRoomHero::set_buff(::google::protobuf::uint32 value) {
  set_has_buff();
  buff_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomHero.buff)
}

// -------------------------------------------------------------------

// NewWorldAllianceRoomTower

// required uint32 uid = 1;
inline bool NewWorldAllianceRoomTower::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewWorldAllianceRoomTower::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewWorldAllianceRoomTower::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewWorldAllianceRoomTower::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomTower::uid() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomTower.uid)
  return uid_;
}
inline void NewWorldAllianceRoomTower::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomTower.uid)
}

// required uint32 dps = 2;
inline bool NewWorldAllianceRoomTower::has_dps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewWorldAllianceRoomTower::set_has_dps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewWorldAllianceRoomTower::clear_has_dps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewWorldAllianceRoomTower::clear_dps() {
  dps_ = 0u;
  clear_has_dps();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomTower::dps() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomTower.dps)
  return dps_;
}
inline void NewWorldAllianceRoomTower::set_dps(::google::protobuf::uint32 value) {
  set_has_dps();
  dps_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomTower.dps)
}

// required uint32 hit = 3;
inline bool NewWorldAllianceRoomTower::has_hit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewWorldAllianceRoomTower::set_has_hit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewWorldAllianceRoomTower::clear_has_hit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewWorldAllianceRoomTower::clear_hit() {
  hit_ = 0u;
  clear_has_hit();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomTower::hit() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomTower.hit)
  return hit_;
}
inline void NewWorldAllianceRoomTower::set_hit(::google::protobuf::uint32 value) {
  set_has_hit();
  hit_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomTower.hit)
}

// -------------------------------------------------------------------

// NewWorldAllianceRoomCity

// required uint32 cid = 1;
inline bool NewWorldAllianceRoomCity::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewWorldAllianceRoomCity::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewWorldAllianceRoomCity::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewWorldAllianceRoomCity::clear_cid() {
  cid_ = 0u;
  clear_has_cid();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomCity::cid() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomCity.cid)
  return cid_;
}
inline void NewWorldAllianceRoomCity::set_cid(::google::protobuf::uint32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomCity.cid)
}

// required uint32 aid = 2;
inline bool NewWorldAllianceRoomCity::has_aid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewWorldAllianceRoomCity::set_has_aid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewWorldAllianceRoomCity::clear_has_aid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewWorldAllianceRoomCity::clear_aid() {
  aid_ = 0u;
  clear_has_aid();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomCity::aid() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomCity.aid)
  return aid_;
}
inline void NewWorldAllianceRoomCity::set_aid(::google::protobuf::uint32 value) {
  set_has_aid();
  aid_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomCity.aid)
}

// required int32 countN = 3;
inline bool NewWorldAllianceRoomCity::has_countn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewWorldAllianceRoomCity::set_has_countn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewWorldAllianceRoomCity::clear_has_countn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewWorldAllianceRoomCity::clear_countn() {
  countn_ = 0;
  clear_has_countn();
}
inline ::google::protobuf::int32 NewWorldAllianceRoomCity::countn() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomCity.countN)
  return countn_;
}
inline void NewWorldAllianceRoomCity::set_countn(::google::protobuf::int32 value) {
  set_has_countn();
  countn_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomCity.countN)
}

// required uint32 npcts = 4;
inline bool NewWorldAllianceRoomCity::has_npcts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewWorldAllianceRoomCity::set_has_npcts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewWorldAllianceRoomCity::clear_has_npcts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewWorldAllianceRoomCity::clear_npcts() {
  npcts_ = 0u;
  clear_has_npcts();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomCity::npcts() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomCity.npcts)
  return npcts_;
}
inline void NewWorldAllianceRoomCity::set_npcts(::google::protobuf::uint32 value) {
  set_has_npcts();
  npcts_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomCity.npcts)
}

// repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero npc = 5;
inline int NewWorldAllianceRoomCity::npc_size() const {
  return npc_.size();
}
inline void NewWorldAllianceRoomCity::clear_npc() {
  npc_.Clear();
}
inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomHero& NewWorldAllianceRoomCity::npc(int index) const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomCity.npc)
  return npc_.Get(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* NewWorldAllianceRoomCity::mutable_npc(int index) {
  // @@protoc_insertion_point(field_mutable:NewWorldAllianceRoom.NewWorldAllianceRoomCity.npc)
  return npc_.Mutable(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* NewWorldAllianceRoomCity::add_npc() {
  // @@protoc_insertion_point(field_add:NewWorldAllianceRoom.NewWorldAllianceRoomCity.npc)
  return npc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >&
NewWorldAllianceRoomCity::npc() const {
  // @@protoc_insertion_point(field_list:NewWorldAllianceRoom.NewWorldAllianceRoomCity.npc)
  return npc_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >*
NewWorldAllianceRoomCity::mutable_npc() {
  // @@protoc_insertion_point(field_mutable_list:NewWorldAllianceRoom.NewWorldAllianceRoomCity.npc)
  return &npc_;
}

// repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero vision = 6;
inline int NewWorldAllianceRoomCity::vision_size() const {
  return vision_.size();
}
inline void NewWorldAllianceRoomCity::clear_vision() {
  vision_.Clear();
}
inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomHero& NewWorldAllianceRoomCity::vision(int index) const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomCity.vision)
  return vision_.Get(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* NewWorldAllianceRoomCity::mutable_vision(int index) {
  // @@protoc_insertion_point(field_mutable:NewWorldAllianceRoom.NewWorldAllianceRoomCity.vision)
  return vision_.Mutable(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* NewWorldAllianceRoomCity::add_vision() {
  // @@protoc_insertion_point(field_add:NewWorldAllianceRoom.NewWorldAllianceRoomCity.vision)
  return vision_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >&
NewWorldAllianceRoomCity::vision() const {
  // @@protoc_insertion_point(field_list:NewWorldAllianceRoom.NewWorldAllianceRoomCity.vision)
  return vision_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >*
NewWorldAllianceRoomCity::mutable_vision() {
  // @@protoc_insertion_point(field_mutable_list:NewWorldAllianceRoom.NewWorldAllianceRoomCity.vision)
  return &vision_;
}

// optional .NewWorldAllianceRoom.NewWorldAllianceRoomTower tower = 7;
inline bool NewWorldAllianceRoomCity::has_tower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewWorldAllianceRoomCity::set_has_tower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewWorldAllianceRoomCity::clear_has_tower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewWorldAllianceRoomCity::clear_tower() {
  if (tower_ != NULL) tower_->::NewWorldAllianceRoom::NewWorldAllianceRoomTower::Clear();
  clear_has_tower();
}
inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomTower& NewWorldAllianceRoomCity::tower() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomCity.tower)
  return tower_ != NULL ? *tower_ : *default_instance_->tower_;
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomTower* NewWorldAllianceRoomCity::mutable_tower() {
  set_has_tower();
  if (tower_ == NULL) tower_ = new ::NewWorldAllianceRoom::NewWorldAllianceRoomTower;
  // @@protoc_insertion_point(field_mutable:NewWorldAllianceRoom.NewWorldAllianceRoomCity.tower)
  return tower_;
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomTower* NewWorldAllianceRoomCity::release_tower() {
  clear_has_tower();
  ::NewWorldAllianceRoom::NewWorldAllianceRoomTower* temp = tower_;
  tower_ = NULL;
  return temp;
}
inline void NewWorldAllianceRoomCity::set_allocated_tower(::NewWorldAllianceRoom::NewWorldAllianceRoomTower* tower) {
  delete tower_;
  tower_ = tower;
  if (tower) {
    set_has_tower();
  } else {
    clear_has_tower();
  }
  // @@protoc_insertion_point(field_set_allocated:NewWorldAllianceRoom.NewWorldAllianceRoomCity.tower)
}

// -------------------------------------------------------------------

// NewWorldAllianceRoomBattle

// required uint32 rid = 1;
inline bool NewWorldAllianceRoomBattle::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewWorldAllianceRoomBattle::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewWorldAllianceRoomBattle::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewWorldAllianceRoomBattle::clear_rid() {
  rid_ = 0u;
  clear_has_rid();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomBattle::rid() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.rid)
  return rid_;
}
inline void NewWorldAllianceRoomBattle::set_rid(::google::protobuf::uint32 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.rid)
}

// required uint32 level = 2;
inline bool NewWorldAllianceRoomBattle::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewWorldAllianceRoomBattle::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewWorldAllianceRoomBattle::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewWorldAllianceRoomBattle::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomBattle::level() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.level)
  return level_;
}
inline void NewWorldAllianceRoomBattle::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.level)
}

// required uint32 reward = 3;
inline bool NewWorldAllianceRoomBattle::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewWorldAllianceRoomBattle::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewWorldAllianceRoomBattle::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewWorldAllianceRoomBattle::clear_reward() {
  reward_ = 0u;
  clear_has_reward();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomBattle::reward() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.reward)
  return reward_;
}
inline void NewWorldAllianceRoomBattle::set_reward(::google::protobuf::uint32 value) {
  set_has_reward();
  reward_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.reward)
}

// required uint32 ts = 4;
inline bool NewWorldAllianceRoomBattle::has_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewWorldAllianceRoomBattle::set_has_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewWorldAllianceRoomBattle::clear_has_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewWorldAllianceRoomBattle::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomBattle::ts() const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.ts)
  return ts_;
}
inline void NewWorldAllianceRoomBattle::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.ts)
}

// repeated uint32 aid = 5;
inline int NewWorldAllianceRoomBattle::aid_size() const {
  return aid_.size();
}
inline void NewWorldAllianceRoomBattle::clear_aid() {
  aid_.Clear();
}
inline ::google::protobuf::uint32 NewWorldAllianceRoomBattle::aid(int index) const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.aid)
  return aid_.Get(index);
}
inline void NewWorldAllianceRoomBattle::set_aid(int index, ::google::protobuf::uint32 value) {
  aid_.Set(index, value);
  // @@protoc_insertion_point(field_set:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.aid)
}
inline void NewWorldAllianceRoomBattle::add_aid(::google::protobuf::uint32 value) {
  aid_.Add(value);
  // @@protoc_insertion_point(field_add:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.aid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NewWorldAllianceRoomBattle::aid() const {
  // @@protoc_insertion_point(field_list:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.aid)
  return aid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NewWorldAllianceRoomBattle::mutable_aid() {
  // @@protoc_insertion_point(field_mutable_list:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.aid)
  return &aid_;
}

// repeated .NewWorldAllianceRoom.NewWorldAllianceRoomHero hero = 6;
inline int NewWorldAllianceRoomBattle::hero_size() const {
  return hero_.size();
}
inline void NewWorldAllianceRoomBattle::clear_hero() {
  hero_.Clear();
}
inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomHero& NewWorldAllianceRoomBattle::hero(int index) const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.hero)
  return hero_.Get(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* NewWorldAllianceRoomBattle::mutable_hero(int index) {
  // @@protoc_insertion_point(field_mutable:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.hero)
  return hero_.Mutable(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomHero* NewWorldAllianceRoomBattle::add_hero() {
  // @@protoc_insertion_point(field_add:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.hero)
  return hero_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >&
NewWorldAllianceRoomBattle::hero() const {
  // @@protoc_insertion_point(field_list:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.hero)
  return hero_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomHero >*
NewWorldAllianceRoomBattle::mutable_hero() {
  // @@protoc_insertion_point(field_mutable_list:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.hero)
  return &hero_;
}

// repeated .NewWorldAllianceRoom.NewWorldAllianceRoomCity city = 7;
inline int NewWorldAllianceRoomBattle::city_size() const {
  return city_.size();
}
inline void NewWorldAllianceRoomBattle::clear_city() {
  city_.Clear();
}
inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomCity& NewWorldAllianceRoomBattle::city(int index) const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.city)
  return city_.Get(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomCity* NewWorldAllianceRoomBattle::mutable_city(int index) {
  // @@protoc_insertion_point(field_mutable:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.city)
  return city_.Mutable(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomCity* NewWorldAllianceRoomBattle::add_city() {
  // @@protoc_insertion_point(field_add:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.city)
  return city_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomCity >&
NewWorldAllianceRoomBattle::city() const {
  // @@protoc_insertion_point(field_list:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.city)
  return city_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomCity >*
NewWorldAllianceRoomBattle::mutable_city() {
  // @@protoc_insertion_point(field_mutable_list:NewWorldAllianceRoom.NewWorldAllianceRoomBattle.city)
  return &city_;
}

// -------------------------------------------------------------------

// NewWorldAllianceRoom

// repeated .NewWorldAllianceRoom.NewWorldAllianceRoomBattle room = 1;
inline int NewWorldAllianceRoom::room_size() const {
  return room_.size();
}
inline void NewWorldAllianceRoom::clear_room() {
  room_.Clear();
}
inline const ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle& NewWorldAllianceRoom::room(int index) const {
  // @@protoc_insertion_point(field_get:NewWorldAllianceRoom.NewWorldAllianceRoom.room)
  return room_.Get(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle* NewWorldAllianceRoom::mutable_room(int index) {
  // @@protoc_insertion_point(field_mutable:NewWorldAllianceRoom.NewWorldAllianceRoom.room)
  return room_.Mutable(index);
}
inline ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle* NewWorldAllianceRoom::add_room() {
  // @@protoc_insertion_point(field_add:NewWorldAllianceRoom.NewWorldAllianceRoom.room)
  return room_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle >&
NewWorldAllianceRoom::room() const {
  // @@protoc_insertion_point(field_list:NewWorldAllianceRoom.NewWorldAllianceRoom.room)
  return room_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewWorldAllianceRoom::NewWorldAllianceRoomBattle >*
NewWorldAllianceRoom::mutable_room() {
  // @@protoc_insertion_point(field_mutable_list:NewWorldAllianceRoom.NewWorldAllianceRoom.room)
  return &room_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NewWorldAllianceRoom

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NewWorldAllianceRoom_2eproto__INCLUDED
