// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RewardConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RewardConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RewardConfig {

namespace {

const ::google::protobuf::Descriptor* EquipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardItemCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardItemCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RewardConfig_2eproto() {
  protobuf_AddDesc_RewardConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RewardConfig.proto");
  GOOGLE_CHECK(file != NULL);
  EquipItem_descriptor_ = file->message_type(0);
  static const int EquipItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, ch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, ltime_),
  };
  EquipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipItem_descriptor_,
      EquipItem::default_instance_,
      EquipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipItem));
  HeroItem_descriptor_ = file->message_type(1);
  static const int HeroItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroItem, c_),
  };
  HeroItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroItem_descriptor_,
      HeroItem::default_instance_,
      HeroItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroItem));
  RewardItemCfg_descriptor_ = file->message_type(2);
  static const int RewardItemCfg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, prosper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, exp_),
  };
  RewardItemCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardItemCfg_descriptor_,
      RewardItemCfg::default_instance_,
      RewardItemCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItemCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardItemCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RewardConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipItem_descriptor_, &EquipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroItem_descriptor_, &HeroItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardItemCfg_descriptor_, &RewardItemCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RewardConfig_2eproto() {
  delete EquipItem::default_instance_;
  delete EquipItem_reflection_;
  delete HeroItem::default_instance_;
  delete HeroItem_reflection_;
  delete RewardItemCfg::default_instance_;
  delete RewardItemCfg_reflection_;
}

void protobuf_AddDesc_RewardConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RewardConfig.proto\022\014RewardConfig\"J\n\tEq"
    "uipItem\022\014\n\004eqid\030\001 \002(\r\022\t\n\001c\030\002 \002(\r\022\n\n\002ch\030\003"
    " \001(\r\022\t\n\001q\030\004 \001(\r\022\r\n\005ltime\030\005 \001(\r\"!\n\010HeroIt"
    "em\022\n\n\002id\030\001 \002(\014\022\t\n\001c\030\002 \002(\r\"\271\001\n\rRewardItem"
    "Cfg\022\'\n\006equips\030\001 \003(\0132\027.RewardConfig.Equip"
    "Item\022%\n\005heros\030\002 \003(\0132\026.RewardConfig.HeroI"
    "tem\022\013\n\003res\030\003 \003(\r\022\014\n\004gold\030\004 \001(\r\022\017\n\007diamon"
    "d\030\005 \001(\r\022\016\n\006energy\030\006 \001(\r\022\017\n\007prosper\030\007 \001(\r"
    "\022\013\n\003exp\030\010 \001(\r", 333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RewardConfig.proto", &protobuf_RegisterTypes);
  EquipItem::default_instance_ = new EquipItem();
  HeroItem::default_instance_ = new HeroItem();
  RewardItemCfg::default_instance_ = new RewardItemCfg();
  EquipItem::default_instance_->InitAsDefaultInstance();
  HeroItem::default_instance_->InitAsDefaultInstance();
  RewardItemCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RewardConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RewardConfig_2eproto {
  StaticDescriptorInitializer_RewardConfig_2eproto() {
    protobuf_AddDesc_RewardConfig_2eproto();
  }
} static_descriptor_initializer_RewardConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipItem::kEqidFieldNumber;
const int EquipItem::kCFieldNumber;
const int EquipItem::kChFieldNumber;
const int EquipItem::kQFieldNumber;
const int EquipItem::kLtimeFieldNumber;
#endif  // !_MSC_VER

EquipItem::EquipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.EquipItem)
}

void EquipItem::InitAsDefaultInstance() {
}

EquipItem::EquipItem(const EquipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.EquipItem)
}

void EquipItem::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  c_ = 0u;
  ch_ = 0u;
  q_ = 0u;
  ltime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipItem::~EquipItem() {
  // @@protoc_insertion_point(destructor:RewardConfig.EquipItem)
  SharedDtor();
}

void EquipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipItem_descriptor_;
}

const EquipItem& EquipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

EquipItem* EquipItem::default_instance_ = NULL;

EquipItem* EquipItem::New() const {
  return new EquipItem;
}

void EquipItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(eqid_, ltime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.EquipItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_c;
        break;
      }

      // required uint32 c = 2;
      case 2: {
        if (tag == 16) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ch;
        break;
      }

      // optional uint32 ch = 3;
      case 3: {
        if (tag == 24) {
         parse_ch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ch_)));
          set_has_ch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_q;
        break;
      }

      // optional uint32 q = 4;
      case 4: {
        if (tag == 32) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &q_)));
          set_has_q();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ltime;
        break;
      }

      // optional uint32 ltime = 5;
      case 5: {
        if (tag == 40) {
         parse_ltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ltime_)));
          set_has_ltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.EquipItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.EquipItem)
  return false;
#undef DO_
}

void EquipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.EquipItem)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 c = 2;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->c(), output);
  }

  // optional uint32 ch = 3;
  if (has_ch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ch(), output);
  }

  // optional uint32 q = 4;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->q(), output);
  }

  // optional uint32 ltime = 5;
  if (has_ltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.EquipItem)
}

::google::protobuf::uint8* EquipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.EquipItem)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 c = 2;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->c(), target);
  }

  // optional uint32 ch = 3;
  if (has_ch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ch(), target);
  }

  // optional uint32 q = 4;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->q(), target);
  }

  // optional uint32 ltime = 5;
  if (has_ltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.EquipItem)
  return target;
}

int EquipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 c = 2;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

    // optional uint32 ch = 3;
    if (has_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ch());
    }

    // optional uint32 q = 4;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->q());
    }

    // optional uint32 ltime = 5;
    if (has_ltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipItem::MergeFrom(const EquipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_ch()) {
      set_ch(from.ch());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
    if (from.has_ltime()) {
      set_ltime(from.ltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipItem::CopyFrom(const EquipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipItem::Swap(EquipItem* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(c_, other->c_);
    std::swap(ch_, other->ch_);
    std::swap(q_, other->q_);
    std::swap(ltime_, other->ltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipItem_descriptor_;
  metadata.reflection = EquipItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroItem::kIdFieldNumber;
const int HeroItem::kCFieldNumber;
#endif  // !_MSC_VER

HeroItem::HeroItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.HeroItem)
}

void HeroItem::InitAsDefaultInstance() {
}

HeroItem::HeroItem(const HeroItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.HeroItem)
}

void HeroItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroItem::~HeroItem() {
  // @@protoc_insertion_point(destructor:RewardConfig.HeroItem)
  SharedDtor();
}

void HeroItem::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void HeroItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroItem_descriptor_;
}

const HeroItem& HeroItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

HeroItem* HeroItem::default_instance_ = NULL;

HeroItem* HeroItem::New() const {
  return new HeroItem;
}

void HeroItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    c_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.HeroItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_c;
        break;
      }

      // required uint32 c = 2;
      case 2: {
        if (tag == 16) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.HeroItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.HeroItem)
  return false;
#undef DO_
}

void HeroItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.HeroItem)
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // required uint32 c = 2;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.HeroItem)
}

::google::protobuf::uint8* HeroItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.HeroItem)
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // required uint32 c = 2;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.HeroItem)
  return target;
}

int HeroItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->id());
    }

    // required uint32 c = 2;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroItem::MergeFrom(const HeroItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroItem::CopyFrom(const HeroItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeroItem::Swap(HeroItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroItem_descriptor_;
  metadata.reflection = HeroItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardItemCfg::kEquipsFieldNumber;
const int RewardItemCfg::kHerosFieldNumber;
const int RewardItemCfg::kResFieldNumber;
const int RewardItemCfg::kGoldFieldNumber;
const int RewardItemCfg::kDiamondFieldNumber;
const int RewardItemCfg::kEnergyFieldNumber;
const int RewardItemCfg::kProsperFieldNumber;
const int RewardItemCfg::kExpFieldNumber;
#endif  // !_MSC_VER

RewardItemCfg::RewardItemCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.RewardItemCfg)
}

void RewardItemCfg::InitAsDefaultInstance() {
}

RewardItemCfg::RewardItemCfg(const RewardItemCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.RewardItemCfg)
}

void RewardItemCfg::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0u;
  diamond_ = 0u;
  energy_ = 0u;
  prosper_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardItemCfg::~RewardItemCfg() {
  // @@protoc_insertion_point(destructor:RewardConfig.RewardItemCfg)
  SharedDtor();
}

void RewardItemCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardItemCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardItemCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardItemCfg_descriptor_;
}

const RewardItemCfg& RewardItemCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

RewardItemCfg* RewardItemCfg::default_instance_ = NULL;

RewardItemCfg* RewardItemCfg::New() const {
  return new RewardItemCfg;
}

void RewardItemCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardItemCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 248) {
    ZR_(gold_, exp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equips_.Clear();
  heros_.Clear();
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardItemCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.RewardItemCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardConfig.EquipItem equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectTag(18)) goto parse_heros;
        break;
      }

      // repeated .RewardConfig.HeroItem heros = 2;
      case 2: {
        if (tag == 18) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heros;
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // repeated uint32 res = 3;
      case 3: {
        if (tag == 24) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_res())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_res())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_res;
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 4;
      case 4: {
        if (tag == 32) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 5;
      case 5: {
        if (tag == 40) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 6;
      case 6: {
        if (tag == 48) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_prosper;
        break;
      }

      // optional uint32 prosper = 7;
      case 7: {
        if (tag == 56) {
         parse_prosper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prosper_)));
          set_has_prosper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 8;
      case 8: {
        if (tag == 64) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.RewardItemCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.RewardItemCfg)
  return false;
#undef DO_
}

void RewardItemCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.RewardItemCfg)
  // repeated .RewardConfig.EquipItem equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  // repeated .RewardConfig.HeroItem heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heros(i), output);
  }

  // repeated uint32 res = 3;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->res(i), output);
  }

  // optional uint32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gold(), output);
  }

  // optional uint32 diamond = 5;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->diamond(), output);
  }

  // optional uint32 energy = 6;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->energy(), output);
  }

  // optional uint32 prosper = 7;
  if (has_prosper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->prosper(), output);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.RewardItemCfg)
}

::google::protobuf::uint8* RewardItemCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.RewardItemCfg)
  // repeated .RewardConfig.EquipItem equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  // repeated .RewardConfig.HeroItem heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heros(i), target);
  }

  // repeated uint32 res = 3;
  for (int i = 0; i < this->res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->res(i), target);
  }

  // optional uint32 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gold(), target);
  }

  // optional uint32 diamond = 5;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->diamond(), target);
  }

  // optional uint32 energy = 6;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->energy(), target);
  }

  // optional uint32 prosper = 7;
  if (has_prosper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->prosper(), target);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.RewardItemCfg)
  return target;
}

int RewardItemCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 diamond = 5;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 energy = 6;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy());
    }

    // optional uint32 prosper = 7;
    if (has_prosper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prosper());
    }

    // optional uint32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  // repeated .RewardConfig.EquipItem equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .RewardConfig.HeroItem heros = 2;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  // repeated uint32 res = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->res_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->res(i));
    }
    total_size += 1 * this->res_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardItemCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardItemCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardItemCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardItemCfg::MergeFrom(const RewardItemCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  heros_.MergeFrom(from.heros_);
  res_.MergeFrom(from.res_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_prosper()) {
      set_prosper(from.prosper());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardItemCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardItemCfg::CopyFrom(const RewardItemCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardItemCfg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->equips())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->heros())) return false;
  return true;
}

void RewardItemCfg::Swap(RewardItemCfg* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    heros_.Swap(&other->heros_);
    res_.Swap(&other->res_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(energy_, other->energy_);
    std::swap(prosper_, other->prosper_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardItemCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardItemCfg_descriptor_;
  metadata.reflection = RewardItemCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RewardConfig

// @@protoc_insertion_point(global_scope)
