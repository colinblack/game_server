// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigActivity.proto

#ifndef PROTOBUF_ConfigActivity_2eproto__INCLUDED
#define PROTOBUF_ConfigActivity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "RewardConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace ConfigActivity {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConfigActivity_2eproto();
void protobuf_AssignDesc_ConfigActivity_2eproto();
void protobuf_ShutdownFile_ConfigActivity_2eproto();

class BuildSuitItem;
class ExchangeItem;
class BlessPoint;
class CostCoefficient;
class DiamondReward;
class DiamondRewardLimit;
class DiamondMoreReward;
class DoubleWelfare;
class PearlAdvance;
class UniqueKnowledgeDial;
class SpriteVitalityItem;
class SmeltItem;
class ShopItem;
class ForgeSmelt;
class HeroItem;
class HeroDial;
class BlackGoldEnhance;
class KingdomWar;
class RewardItem;
class OneDiamondWelfare;
class FortunePacks;
class SevenDayPacks;
class ChargeKey;
class StuffItem;
class KeyLuxuryGift;
class ConsumeGiftItem;
class EnjoySmallGiftReward;
class TurnTableItem;
class LuckyGiftItem;
class LuckyGift;
class NewYearActivity;
class ChinaDayActivity;
class PayOptionalActivity;
class MsgSoulLevel;
class MsgSoulGrowth;
class MsgWuhun;
class MsgJuexue;
class MsgStar;
class MsgHeaven;
class MsgDaoist;
class KaifuAchievement;
class KaifuDiscountShop;
class KaiFuGift;
class StarStoneChange;
class HongBaoItem;
class HongBao;
class TaskGift;
class RotaryTableCfg;
class RotaryTableCrazyReward;
class BatmanTreasureDraw;
class BatmanTreasureCfg;
class SummerChargeRewardCfg;
class SummerHolidaysTicketCfg;
class SummerHolidaysRewardCfg;
class FreeExchangeItem;
class FreeExchange;
class Activities;

// ===================================================================

class BuildSuitItem : public ::google::protobuf::Message {
 public:
  BuildSuitItem();
  virtual ~BuildSuitItem();

  BuildSuitItem(const BuildSuitItem& from);

  inline BuildSuitItem& operator=(const BuildSuitItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuildSuitItem& default_instance();

  void Swap(BuildSuitItem* other);

  // implements Message ----------------------------------------------

  BuildSuitItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuildSuitItem& from);
  void MergeFrom(const BuildSuitItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.BuildSuitItem)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 diamond_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static BuildSuitItem* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeItem : public ::google::protobuf::Message {
 public:
  ExchangeItem();
  virtual ~ExchangeItem();

  ExchangeItem(const ExchangeItem& from);

  inline ExchangeItem& operator=(const ExchangeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeItem& default_instance();

  void Swap(ExchangeItem* other);

  // implements Message ----------------------------------------------

  ExchangeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeItem& from);
  void MergeFrom(const ExchangeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 condition = 1;
  inline int condition_size() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 1;
  inline ::google::protobuf::uint32 condition(int index) const;
  inline void set_condition(int index, ::google::protobuf::uint32 value);
  inline void add_condition(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      condition() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_condition();

  // required uint32 first = 2;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 2;
  inline ::google::protobuf::uint32 first() const;
  inline void set_first(::google::protobuf::uint32 value);

  // required uint32 accumulate = 3;
  inline bool has_accumulate() const;
  inline void clear_accumulate();
  static const int kAccumulateFieldNumber = 3;
  inline ::google::protobuf::uint32 accumulate() const;
  inline void set_accumulate(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.ExchangeItem)
 private:
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_accumulate();
  inline void clear_has_accumulate();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > condition_;
  ::google::protobuf::uint32 first_;
  ::google::protobuf::uint32 accumulate_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static ExchangeItem* default_instance_;
};
// -------------------------------------------------------------------

class BlessPoint : public ::google::protobuf::Message {
 public:
  BlessPoint();
  virtual ~BlessPoint();

  BlessPoint(const BlessPoint& from);

  inline BlessPoint& operator=(const BlessPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlessPoint& default_instance();

  void Swap(BlessPoint* other);

  // implements Message ----------------------------------------------

  BlessPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlessPoint& from);
  void MergeFrom(const BlessPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.ExchangeItem exchange = 1;
  inline int exchange_size() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  inline const ::ConfigActivity::ExchangeItem& exchange(int index) const;
  inline ::ConfigActivity::ExchangeItem* mutable_exchange(int index);
  inline ::ConfigActivity::ExchangeItem* add_exchange();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ExchangeItem >&
      exchange() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ExchangeItem >*
      mutable_exchange();

  // @@protoc_insertion_point(class_scope:ConfigActivity.BlessPoint)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ExchangeItem > exchange_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static BlessPoint* default_instance_;
};
// -------------------------------------------------------------------

class CostCoefficient : public ::google::protobuf::Message {
 public:
  CostCoefficient();
  virtual ~CostCoefficient();

  CostCoefficient(const CostCoefficient& from);

  inline CostCoefficient& operator=(const CostCoefficient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CostCoefficient& default_instance();

  void Swap(CostCoefficient* other);

  // implements Message ----------------------------------------------

  CostCoefficient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CostCoefficient& from);
  void MergeFrom(const CostCoefficient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cost = 1;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 1;
  inline ::google::protobuf::uint32 cost() const;
  inline void set_cost(::google::protobuf::uint32 value);

  // required double coefficient = 2;
  inline bool has_coefficient() const;
  inline void clear_coefficient();
  static const int kCoefficientFieldNumber = 2;
  inline double coefficient() const;
  inline void set_coefficient(double value);

  // @@protoc_insertion_point(class_scope:ConfigActivity.CostCoefficient)
 private:
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_coefficient();
  inline void clear_has_coefficient();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double coefficient_;
  ::google::protobuf::uint32 cost_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static CostCoefficient* default_instance_;
};
// -------------------------------------------------------------------

class DiamondReward : public ::google::protobuf::Message {
 public:
  DiamondReward();
  virtual ~DiamondReward();

  DiamondReward(const DiamondReward& from);

  inline DiamondReward& operator=(const DiamondReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiamondReward& default_instance();

  void Swap(DiamondReward* other);

  // implements Message ----------------------------------------------

  DiamondReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiamondReward& from);
  void MergeFrom(const DiamondReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.DiamondReward)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 diamond_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static DiamondReward* default_instance_;
};
// -------------------------------------------------------------------

class DiamondRewardLimit : public ::google::protobuf::Message {
 public:
  DiamondRewardLimit();
  virtual ~DiamondRewardLimit();

  DiamondRewardLimit(const DiamondRewardLimit& from);

  inline DiamondRewardLimit& operator=(const DiamondRewardLimit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiamondRewardLimit& default_instance();

  void Swap(DiamondRewardLimit* other);

  // implements Message ----------------------------------------------

  DiamondRewardLimit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiamondRewardLimit& from);
  void MergeFrom(const DiamondRewardLimit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // required uint32 limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.DiamondRewardLimit)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 limit_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static DiamondRewardLimit* default_instance_;
};
// -------------------------------------------------------------------

class DiamondMoreReward : public ::google::protobuf::Message {
 public:
  DiamondMoreReward();
  virtual ~DiamondMoreReward();

  DiamondMoreReward(const DiamondMoreReward& from);

  inline DiamondMoreReward& operator=(const DiamondMoreReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DiamondMoreReward& default_instance();

  void Swap(DiamondMoreReward* other);

  // implements Message ----------------------------------------------

  DiamondMoreReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiamondMoreReward& from);
  void MergeFrom(const DiamondMoreReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // repeated .RewardConfig.RewardItemCfg reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& reward(int index) const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward(int index);
  inline ::RewardConfig::RewardItemCfg* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::RewardItemCfg >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::RewardItemCfg >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:ConfigActivity.DiamondMoreReward)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::RewardItemCfg > reward_;
  ::google::protobuf::uint32 diamond_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static DiamondMoreReward* default_instance_;
};
// -------------------------------------------------------------------

class DoubleWelfare : public ::google::protobuf::Message {
 public:
  DoubleWelfare();
  virtual ~DoubleWelfare();

  DoubleWelfare(const DoubleWelfare& from);

  inline DoubleWelfare& operator=(const DoubleWelfare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleWelfare& default_instance();

  void Swap(DoubleWelfare* other);

  // implements Message ----------------------------------------------

  DoubleWelfare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoubleWelfare& from);
  void MergeFrom(const DoubleWelfare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 maximum = 1;
  inline bool has_maximum() const;
  inline void clear_maximum();
  static const int kMaximumFieldNumber = 1;
  inline ::google::protobuf::uint32 maximum() const;
  inline void set_maximum(::google::protobuf::uint32 value);

  // repeated .ConfigActivity.CostCoefficient cost_coefficient = 2;
  inline int cost_coefficient_size() const;
  inline void clear_cost_coefficient();
  static const int kCostCoefficientFieldNumber = 2;
  inline const ::ConfigActivity::CostCoefficient& cost_coefficient(int index) const;
  inline ::ConfigActivity::CostCoefficient* mutable_cost_coefficient(int index);
  inline ::ConfigActivity::CostCoefficient* add_cost_coefficient();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::CostCoefficient >&
      cost_coefficient() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::CostCoefficient >*
      mutable_cost_coefficient();

  // repeated .ConfigActivity.DiamondReward extra_reward = 3;
  inline int extra_reward_size() const;
  inline void clear_extra_reward();
  static const int kExtraRewardFieldNumber = 3;
  inline const ::ConfigActivity::DiamondReward& extra_reward(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_extra_reward(int index);
  inline ::ConfigActivity::DiamondReward* add_extra_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      extra_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_extra_reward();

  // @@protoc_insertion_point(class_scope:ConfigActivity.DoubleWelfare)
 private:
  inline void set_has_maximum();
  inline void clear_has_maximum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::CostCoefficient > cost_coefficient_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > extra_reward_;
  ::google::protobuf::uint32 maximum_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static DoubleWelfare* default_instance_;
};
// -------------------------------------------------------------------

class PearlAdvance : public ::google::protobuf::Message {
 public:
  PearlAdvance();
  virtual ~PearlAdvance();

  PearlAdvance(const PearlAdvance& from);

  inline PearlAdvance& operator=(const PearlAdvance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PearlAdvance& default_instance();

  void Swap(PearlAdvance* other);

  // implements Message ----------------------------------------------

  PearlAdvance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PearlAdvance& from);
  void MergeFrom(const PearlAdvance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cost = 1;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 1;
  inline ::google::protobuf::uint32 cost() const;
  inline void set_cost(::google::protobuf::uint32 value);

  // required uint32 maximum = 2;
  inline bool has_maximum() const;
  inline void clear_maximum();
  static const int kMaximumFieldNumber = 2;
  inline ::google::protobuf::uint32 maximum() const;
  inline void set_maximum(::google::protobuf::uint32 value);

  // repeated uint32 cond_eqid = 3;
  inline int cond_eqid_size() const;
  inline void clear_cond_eqid();
  static const int kCondEqidFieldNumber = 3;
  inline ::google::protobuf::uint32 cond_eqid(int index) const;
  inline void set_cond_eqid(int index, ::google::protobuf::uint32 value);
  inline void add_cond_eqid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cond_eqid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cond_eqid();

  // required .RewardConfig.RewardItemCfg reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.PearlAdvance)
 private:
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_maximum();
  inline void clear_has_maximum();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cost_;
  ::google::protobuf::uint32 maximum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cond_eqid_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static PearlAdvance* default_instance_;
};
// -------------------------------------------------------------------

class UniqueKnowledgeDial : public ::google::protobuf::Message {
 public:
  UniqueKnowledgeDial();
  virtual ~UniqueKnowledgeDial();

  UniqueKnowledgeDial(const UniqueKnowledgeDial& from);

  inline UniqueKnowledgeDial& operator=(const UniqueKnowledgeDial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UniqueKnowledgeDial& default_instance();

  void Swap(UniqueKnowledgeDial* other);

  // implements Message ----------------------------------------------

  UniqueKnowledgeDial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UniqueKnowledgeDial& from);
  void MergeFrom(const UniqueKnowledgeDial& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& item() const;
  inline ::RewardConfig::RewardItemCfg* mutable_item();
  inline ::RewardConfig::RewardItemCfg* release_item();
  inline void set_allocated_item(::RewardConfig::RewardItemCfg* item);

  // @@protoc_insertion_point(class_scope:ConfigActivity.UniqueKnowledgeDial)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 weight_;
  ::RewardConfig::RewardItemCfg* item_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static UniqueKnowledgeDial* default_instance_;
};
// -------------------------------------------------------------------

class SpriteVitalityItem : public ::google::protobuf::Message {
 public:
  SpriteVitalityItem();
  virtual ~SpriteVitalityItem();

  SpriteVitalityItem(const SpriteVitalityItem& from);

  inline SpriteVitalityItem& operator=(const SpriteVitalityItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpriteVitalityItem& default_instance();

  void Swap(SpriteVitalityItem* other);

  // implements Message ----------------------------------------------

  SpriteVitalityItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpriteVitalityItem& from);
  void MergeFrom(const SpriteVitalityItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.SpriteVitalityItem)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 diamond_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static SpriteVitalityItem* default_instance_;
};
// -------------------------------------------------------------------

class SmeltItem : public ::google::protobuf::Message {
 public:
  SmeltItem();
  virtual ~SmeltItem();

  SmeltItem(const SmeltItem& from);

  inline SmeltItem& operator=(const SmeltItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmeltItem& default_instance();

  void Swap(SmeltItem* other);

  // implements Message ----------------------------------------------

  SmeltItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmeltItem& from);
  void MergeFrom(const SmeltItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline ::google::protobuf::uint32 cost() const;
  inline void set_cost(::google::protobuf::uint32 value);

  // required uint32 get = 3;
  inline bool has_get() const;
  inline void clear_get();
  static const int kGetFieldNumber = 3;
  inline ::google::protobuf::uint32 get() const;
  inline void set_get(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigActivity.SmeltItem)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_cost();
  inline void clear_has_cost();
  inline void set_has_get();
  inline void clear_has_get();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 cost_;
  ::google::protobuf::uint32 get_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static SmeltItem* default_instance_;
};
// -------------------------------------------------------------------

class ShopItem : public ::google::protobuf::Message {
 public:
  ShopItem();
  virtual ~ShopItem();

  ShopItem(const ShopItem& from);

  inline ShopItem& operator=(const ShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopItem& default_instance();

  void Swap(ShopItem* other);

  // implements Message ----------------------------------------------

  ShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShopItem& from);
  void MergeFrom(const ShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // required uint32 forgecost = 2;
  inline bool has_forgecost() const;
  inline void clear_forgecost();
  static const int kForgecostFieldNumber = 2;
  inline ::google::protobuf::uint32 forgecost() const;
  inline void set_forgecost(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& item() const;
  inline ::RewardConfig::RewardItemCfg* mutable_item();
  inline ::RewardConfig::RewardItemCfg* release_item();
  inline void set_allocated_item(::RewardConfig::RewardItemCfg* item);

  // @@protoc_insertion_point(class_scope:ConfigActivity.ShopItem)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_forgecost();
  inline void clear_has_forgecost();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 forgecost_;
  ::RewardConfig::RewardItemCfg* item_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static ShopItem* default_instance_;
};
// -------------------------------------------------------------------

class ForgeSmelt : public ::google::protobuf::Message {
 public:
  ForgeSmelt();
  virtual ~ForgeSmelt();

  ForgeSmelt(const ForgeSmelt& from);

  inline ForgeSmelt& operator=(const ForgeSmelt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForgeSmelt& default_instance();

  void Swap(ForgeSmelt* other);

  // implements Message ----------------------------------------------

  ForgeSmelt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForgeSmelt& from);
  void MergeFrom(const ForgeSmelt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 daily_limit = 1;
  inline bool has_daily_limit() const;
  inline void clear_daily_limit();
  static const int kDailyLimitFieldNumber = 1;
  inline ::google::protobuf::uint32 daily_limit() const;
  inline void set_daily_limit(::google::protobuf::uint32 value);

  // required uint32 forge_limit = 2;
  inline bool has_forge_limit() const;
  inline void clear_forge_limit();
  static const int kForgeLimitFieldNumber = 2;
  inline ::google::protobuf::uint32 forge_limit() const;
  inline void set_forge_limit(::google::protobuf::uint32 value);

  // repeated .ConfigActivity.SmeltItem smelt = 3;
  inline int smelt_size() const;
  inline void clear_smelt();
  static const int kSmeltFieldNumber = 3;
  inline const ::ConfigActivity::SmeltItem& smelt(int index) const;
  inline ::ConfigActivity::SmeltItem* mutable_smelt(int index);
  inline ::ConfigActivity::SmeltItem* add_smelt();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SmeltItem >&
      smelt() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SmeltItem >*
      mutable_smelt();

  // repeated .ConfigActivity.ShopItem shop = 4;
  inline int shop_size() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 4;
  inline const ::ConfigActivity::ShopItem& shop(int index) const;
  inline ::ConfigActivity::ShopItem* mutable_shop(int index);
  inline ::ConfigActivity::ShopItem* add_shop();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ShopItem >&
      shop() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ShopItem >*
      mutable_shop();

  // @@protoc_insertion_point(class_scope:ConfigActivity.ForgeSmelt)
 private:
  inline void set_has_daily_limit();
  inline void clear_has_daily_limit();
  inline void set_has_forge_limit();
  inline void clear_has_forge_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 daily_limit_;
  ::google::protobuf::uint32 forge_limit_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SmeltItem > smelt_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ShopItem > shop_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static ForgeSmelt* default_instance_;
};
// -------------------------------------------------------------------

class HeroItem : public ::google::protobuf::Message {
 public:
  HeroItem();
  virtual ~HeroItem();

  HeroItem(const HeroItem& from);

  inline HeroItem& operator=(const HeroItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroItem& default_instance();

  void Swap(HeroItem* other);

  // implements Message ----------------------------------------------

  HeroItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroItem& from);
  void MergeFrom(const HeroItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.HeroItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 weight_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static HeroItem* default_instance_;
};
// -------------------------------------------------------------------

class HeroDial : public ::google::protobuf::Message {
 public:
  HeroDial();
  virtual ~HeroDial();

  HeroDial(const HeroDial& from);

  inline HeroDial& operator=(const HeroDial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroDial& default_instance();

  void Swap(HeroDial* other);

  // implements Message ----------------------------------------------

  HeroDial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroDial& from);
  void MergeFrom(const HeroDial& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 per = 1;
  inline bool has_per() const;
  inline void clear_per();
  static const int kPerFieldNumber = 1;
  inline ::google::protobuf::uint32 per() const;
  inline void set_per(::google::protobuf::uint32 value);

  // repeated .ConfigActivity.HeroItem heroes = 2;
  inline int heroes_size() const;
  inline void clear_heroes();
  static const int kHeroesFieldNumber = 2;
  inline const ::ConfigActivity::HeroItem& heroes(int index) const;
  inline ::ConfigActivity::HeroItem* mutable_heroes(int index);
  inline ::ConfigActivity::HeroItem* add_heroes();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HeroItem >&
      heroes() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HeroItem >*
      mutable_heroes();

  // required uint32 limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigActivity.HeroDial)
 private:
  inline void set_has_per();
  inline void clear_has_per();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HeroItem > heroes_;
  ::google::protobuf::uint32 per_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static HeroDial* default_instance_;
};
// -------------------------------------------------------------------

class BlackGoldEnhance : public ::google::protobuf::Message {
 public:
  BlackGoldEnhance();
  virtual ~BlackGoldEnhance();

  BlackGoldEnhance(const BlackGoldEnhance& from);

  inline BlackGoldEnhance& operator=(const BlackGoldEnhance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlackGoldEnhance& default_instance();

  void Swap(BlackGoldEnhance* other);

  // implements Message ----------------------------------------------

  BlackGoldEnhance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlackGoldEnhance& from);
  void MergeFrom(const BlackGoldEnhance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 first = 1;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 1;
  inline ::google::protobuf::uint32 first() const;
  inline void set_first(::google::protobuf::uint32 value);

  // required uint32 limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // required uint32 start = 3;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 3;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);

  // required uint32 accumulate = 4;
  inline bool has_accumulate() const;
  inline void clear_accumulate();
  static const int kAccumulateFieldNumber = 4;
  inline ::google::protobuf::uint32 accumulate() const;
  inline void set_accumulate(::google::protobuf::uint32 value);

  // repeated uint32 condition = 5;
  inline int condition_size() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 5;
  inline ::google::protobuf::uint32 condition(int index) const;
  inline void set_condition(int index, ::google::protobuf::uint32 value);
  inline void add_condition(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      condition() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_condition();

  // required .RewardConfig.RewardItemCfg reward = 6;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 6;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.BlackGoldEnhance)
 private:
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_accumulate();
  inline void clear_has_accumulate();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 first_;
  ::google::protobuf::uint32 limit_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 accumulate_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > condition_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static BlackGoldEnhance* default_instance_;
};
// -------------------------------------------------------------------

class KingdomWar : public ::google::protobuf::Message {
 public:
  KingdomWar();
  virtual ~KingdomWar();

  KingdomWar(const KingdomWar& from);

  inline KingdomWar& operator=(const KingdomWar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KingdomWar& default_instance();

  void Swap(KingdomWar* other);

  // implements Message ----------------------------------------------

  KingdomWar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KingdomWar& from);
  void MergeFrom(const KingdomWar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.KingdomWar)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 diamond_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static KingdomWar* default_instance_;
};
// -------------------------------------------------------------------

class RewardItem : public ::google::protobuf::Message {
 public:
  RewardItem();
  virtual ~RewardItem();

  RewardItem(const RewardItem& from);

  inline RewardItem& operator=(const RewardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardItem& default_instance();

  void Swap(RewardItem* other);

  // implements Message ----------------------------------------------

  RewardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardItem& from);
  void MergeFrom(const RewardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 price = 1;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 1;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.RewardItem)
 private:
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 price_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static RewardItem* default_instance_;
};
// -------------------------------------------------------------------

class OneDiamondWelfare : public ::google::protobuf::Message {
 public:
  OneDiamondWelfare();
  virtual ~OneDiamondWelfare();

  OneDiamondWelfare(const OneDiamondWelfare& from);

  inline OneDiamondWelfare& operator=(const OneDiamondWelfare& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneDiamondWelfare& default_instance();

  void Swap(OneDiamondWelfare* other);

  // implements Message ----------------------------------------------

  OneDiamondWelfare* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneDiamondWelfare& from);
  void MergeFrom(const OneDiamondWelfare& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // repeated .ConfigActivity.RewardItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::ConfigActivity::RewardItem& items(int index) const;
  inline ::ConfigActivity::RewardItem* mutable_items(int index);
  inline ::ConfigActivity::RewardItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:ConfigActivity.OneDiamondWelfare)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem > items_;
  ::google::protobuf::uint32 diamond_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static OneDiamondWelfare* default_instance_;
};
// -------------------------------------------------------------------

class FortunePacks : public ::google::protobuf::Message {
 public:
  FortunePacks();
  virtual ~FortunePacks();

  FortunePacks(const FortunePacks& from);

  inline FortunePacks& operator=(const FortunePacks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FortunePacks& default_instance();

  void Swap(FortunePacks* other);

  // implements Message ----------------------------------------------

  FortunePacks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FortunePacks& from);
  void MergeFrom(const FortunePacks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RewardConfig.RewardItemCfg extra_reward = 1;
  inline bool has_extra_reward() const;
  inline void clear_extra_reward();
  static const int kExtraRewardFieldNumber = 1;
  inline const ::RewardConfig::RewardItemCfg& extra_reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_extra_reward();
  inline ::RewardConfig::RewardItemCfg* release_extra_reward();
  inline void set_allocated_extra_reward(::RewardConfig::RewardItemCfg* extra_reward);

  // repeated .ConfigActivity.RewardItem goods = 2;
  inline int goods_size() const;
  inline void clear_goods();
  static const int kGoodsFieldNumber = 2;
  inline const ::ConfigActivity::RewardItem& goods(int index) const;
  inline ::ConfigActivity::RewardItem* mutable_goods(int index);
  inline ::ConfigActivity::RewardItem* add_goods();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem >&
      goods() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem >*
      mutable_goods();

  // @@protoc_insertion_point(class_scope:ConfigActivity.FortunePacks)
 private:
  inline void set_has_extra_reward();
  inline void clear_has_extra_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* extra_reward_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem > goods_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static FortunePacks* default_instance_;
};
// -------------------------------------------------------------------

class SevenDayPacks : public ::google::protobuf::Message {
 public:
  SevenDayPacks();
  virtual ~SevenDayPacks();

  SevenDayPacks(const SevenDayPacks& from);

  inline SevenDayPacks& operator=(const SevenDayPacks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SevenDayPacks& default_instance();

  void Swap(SevenDayPacks* other);

  // implements Message ----------------------------------------------

  SevenDayPacks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SevenDayPacks& from);
  void MergeFrom(const SevenDayPacks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RewardConfig.RewardItemCfg reward = 1;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.SevenDayPacks)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static SevenDayPacks* default_instance_;
};
// -------------------------------------------------------------------

class ChargeKey : public ::google::protobuf::Message {
 public:
  ChargeKey();
  virtual ~ChargeKey();

  ChargeKey(const ChargeKey& from);

  inline ChargeKey& operator=(const ChargeKey& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChargeKey& default_instance();

  void Swap(ChargeKey* other);

  // implements Message ----------------------------------------------

  ChargeKey* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChargeKey& from);
  void MergeFrom(const ChargeKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 diamond = 1;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 1;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // required uint32 keynum = 2;
  inline bool has_keynum() const;
  inline void clear_keynum();
  static const int kKeynumFieldNumber = 2;
  inline ::google::protobuf::uint32 keynum() const;
  inline void set_keynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigActivity.ChargeKey)
 private:
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_keynum();
  inline void clear_has_keynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 keynum_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static ChargeKey* default_instance_;
};
// -------------------------------------------------------------------

class StuffItem : public ::google::protobuf::Message {
 public:
  StuffItem();
  virtual ~StuffItem();

  StuffItem(const StuffItem& from);

  inline StuffItem& operator=(const StuffItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StuffItem& default_instance();

  void Swap(StuffItem* other);

  // implements Message ----------------------------------------------

  StuffItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StuffItem& from);
  void MergeFrom(const StuffItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 costkey = 1;
  inline bool has_costkey() const;
  inline void clear_costkey();
  static const int kCostkeyFieldNumber = 1;
  inline ::google::protobuf::uint32 costkey() const;
  inline void set_costkey(::google::protobuf::uint32 value);

  // required uint32 limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.StuffItem)
 private:
  inline void set_has_costkey();
  inline void clear_has_costkey();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 costkey_;
  ::google::protobuf::uint32 limit_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static StuffItem* default_instance_;
};
// -------------------------------------------------------------------

class KeyLuxuryGift : public ::google::protobuf::Message {
 public:
  KeyLuxuryGift();
  virtual ~KeyLuxuryGift();

  KeyLuxuryGift(const KeyLuxuryGift& from);

  inline KeyLuxuryGift& operator=(const KeyLuxuryGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyLuxuryGift& default_instance();

  void Swap(KeyLuxuryGift* other);

  // implements Message ----------------------------------------------

  KeyLuxuryGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyLuxuryGift& from);
  void MergeFrom(const KeyLuxuryGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.ChargeKey charge_key = 1;
  inline int charge_key_size() const;
  inline void clear_charge_key();
  static const int kChargeKeyFieldNumber = 1;
  inline const ::ConfigActivity::ChargeKey& charge_key(int index) const;
  inline ::ConfigActivity::ChargeKey* mutable_charge_key(int index);
  inline ::ConfigActivity::ChargeKey* add_charge_key();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ChargeKey >&
      charge_key() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ChargeKey >*
      mutable_charge_key();

  // repeated .ConfigActivity.StuffItem stuff_items = 2;
  inline int stuff_items_size() const;
  inline void clear_stuff_items();
  static const int kStuffItemsFieldNumber = 2;
  inline const ::ConfigActivity::StuffItem& stuff_items(int index) const;
  inline ::ConfigActivity::StuffItem* mutable_stuff_items(int index);
  inline ::ConfigActivity::StuffItem* add_stuff_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::StuffItem >&
      stuff_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::StuffItem >*
      mutable_stuff_items();

  // @@protoc_insertion_point(class_scope:ConfigActivity.KeyLuxuryGift)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ChargeKey > charge_key_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::StuffItem > stuff_items_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static KeyLuxuryGift* default_instance_;
};
// -------------------------------------------------------------------

class ConsumeGiftItem : public ::google::protobuf::Message {
 public:
  ConsumeGiftItem();
  virtual ~ConsumeGiftItem();

  ConsumeGiftItem(const ConsumeGiftItem& from);

  inline ConsumeGiftItem& operator=(const ConsumeGiftItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsumeGiftItem& default_instance();

  void Swap(ConsumeGiftItem* other);

  // implements Message ----------------------------------------------

  ConsumeGiftItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConsumeGiftItem& from);
  void MergeFrom(const ConsumeGiftItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 consume = 1;
  inline bool has_consume() const;
  inline void clear_consume();
  static const int kConsumeFieldNumber = 1;
  inline ::google::protobuf::uint32 consume() const;
  inline void set_consume(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.ConsumeGiftItem)
 private:
  inline void set_has_consume();
  inline void clear_has_consume();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 consume_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static ConsumeGiftItem* default_instance_;
};
// -------------------------------------------------------------------

class EnjoySmallGiftReward : public ::google::protobuf::Message {
 public:
  EnjoySmallGiftReward();
  virtual ~EnjoySmallGiftReward();

  EnjoySmallGiftReward(const EnjoySmallGiftReward& from);

  inline EnjoySmallGiftReward& operator=(const EnjoySmallGiftReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnjoySmallGiftReward& default_instance();

  void Swap(EnjoySmallGiftReward* other);

  // implements Message ----------------------------------------------

  EnjoySmallGiftReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnjoySmallGiftReward& from);
  void MergeFrom(const EnjoySmallGiftReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.DiamondReward charge_gift = 1;
  inline int charge_gift_size() const;
  inline void clear_charge_gift();
  static const int kChargeGiftFieldNumber = 1;
  inline const ::ConfigActivity::DiamondReward& charge_gift(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_charge_gift(int index);
  inline ::ConfigActivity::DiamondReward* add_charge_gift();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      charge_gift() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_charge_gift();

  // repeated .ConfigActivity.ConsumeGiftItem consume_gift = 2;
  inline int consume_gift_size() const;
  inline void clear_consume_gift();
  static const int kConsumeGiftFieldNumber = 2;
  inline const ::ConfigActivity::ConsumeGiftItem& consume_gift(int index) const;
  inline ::ConfigActivity::ConsumeGiftItem* mutable_consume_gift(int index);
  inline ::ConfigActivity::ConsumeGiftItem* add_consume_gift();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ConsumeGiftItem >&
      consume_gift() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ConsumeGiftItem >*
      mutable_consume_gift();

  // @@protoc_insertion_point(class_scope:ConfigActivity.EnjoySmallGiftReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > charge_gift_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ConsumeGiftItem > consume_gift_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static EnjoySmallGiftReward* default_instance_;
};
// -------------------------------------------------------------------

class TurnTableItem : public ::google::protobuf::Message {
 public:
  TurnTableItem();
  virtual ~TurnTableItem();

  TurnTableItem(const TurnTableItem& from);

  inline TurnTableItem& operator=(const TurnTableItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurnTableItem& default_instance();

  void Swap(TurnTableItem* other);

  // implements Message ----------------------------------------------

  TurnTableItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurnTableItem& from);
  void MergeFrom(const TurnTableItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.TurnTableItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 weight_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static TurnTableItem* default_instance_;
};
// -------------------------------------------------------------------

class LuckyGiftItem : public ::google::protobuf::Message {
 public:
  LuckyGiftItem();
  virtual ~LuckyGiftItem();

  LuckyGiftItem(const LuckyGiftItem& from);

  inline LuckyGiftItem& operator=(const LuckyGiftItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LuckyGiftItem& default_instance();

  void Swap(LuckyGiftItem* other);

  // implements Message ----------------------------------------------

  LuckyGiftItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LuckyGiftItem& from);
  void MergeFrom(const LuckyGiftItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.TurnTableItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::ConfigActivity::TurnTableItem& items(int index) const;
  inline ::ConfigActivity::TurnTableItem* mutable_items(int index);
  inline ::ConfigActivity::TurnTableItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TurnTableItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TurnTableItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:ConfigActivity.LuckyGiftItem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TurnTableItem > items_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static LuckyGiftItem* default_instance_;
};
// -------------------------------------------------------------------

class LuckyGift : public ::google::protobuf::Message {
 public:
  LuckyGift();
  virtual ~LuckyGift();

  LuckyGift(const LuckyGift& from);

  inline LuckyGift& operator=(const LuckyGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LuckyGift& default_instance();

  void Swap(LuckyGift* other);

  // implements Message ----------------------------------------------

  LuckyGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LuckyGift& from);
  void MergeFrom(const LuckyGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 keycost = 1;
  inline bool has_keycost() const;
  inline void clear_keycost();
  static const int kKeycostFieldNumber = 1;
  inline ::google::protobuf::uint32 keycost() const;
  inline void set_keycost(::google::protobuf::uint32 value);

  // required uint32 pointcost = 2;
  inline bool has_pointcost() const;
  inline void clear_pointcost();
  static const int kPointcostFieldNumber = 2;
  inline ::google::protobuf::uint32 pointcost() const;
  inline void set_pointcost(::google::protobuf::uint32 value);

  // repeated .ConfigActivity.LuckyGiftItem stuff_items = 3;
  inline int stuff_items_size() const;
  inline void clear_stuff_items();
  static const int kStuffItemsFieldNumber = 3;
  inline const ::ConfigActivity::LuckyGiftItem& stuff_items(int index) const;
  inline ::ConfigActivity::LuckyGiftItem* mutable_stuff_items(int index);
  inline ::ConfigActivity::LuckyGiftItem* add_stuff_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::LuckyGiftItem >&
      stuff_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::LuckyGiftItem >*
      mutable_stuff_items();

  // @@protoc_insertion_point(class_scope:ConfigActivity.LuckyGift)
 private:
  inline void set_has_keycost();
  inline void clear_has_keycost();
  inline void set_has_pointcost();
  inline void clear_has_pointcost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 keycost_;
  ::google::protobuf::uint32 pointcost_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::LuckyGiftItem > stuff_items_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static LuckyGift* default_instance_;
};
// -------------------------------------------------------------------

class NewYearActivity : public ::google::protobuf::Message {
 public:
  NewYearActivity();
  virtual ~NewYearActivity();

  NewYearActivity(const NewYearActivity& from);

  inline NewYearActivity& operator=(const NewYearActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewYearActivity& default_instance();

  void Swap(NewYearActivity* other);

  // implements Message ----------------------------------------------

  NewYearActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewYearActivity& from);
  void MergeFrom(const NewYearActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.DiamondReward charge_reward = 1;
  inline int charge_reward_size() const;
  inline void clear_charge_reward();
  static const int kChargeRewardFieldNumber = 1;
  inline const ::ConfigActivity::DiamondReward& charge_reward(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_charge_reward(int index);
  inline ::ConfigActivity::DiamondReward* add_charge_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      charge_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_charge_reward();

  // repeated .ConfigActivity.DiamondRewardLimit buy_items = 2;
  inline int buy_items_size() const;
  inline void clear_buy_items();
  static const int kBuyItemsFieldNumber = 2;
  inline const ::ConfigActivity::DiamondRewardLimit& buy_items(int index) const;
  inline ::ConfigActivity::DiamondRewardLimit* mutable_buy_items(int index);
  inline ::ConfigActivity::DiamondRewardLimit* add_buy_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondRewardLimit >&
      buy_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondRewardLimit >*
      mutable_buy_items();

  // required .RewardConfig.RewardItemCfg online_reward = 3;
  inline bool has_online_reward() const;
  inline void clear_online_reward();
  static const int kOnlineRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& online_reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_online_reward();
  inline ::RewardConfig::RewardItemCfg* release_online_reward();
  inline void set_allocated_online_reward(::RewardConfig::RewardItemCfg* online_reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.NewYearActivity)
 private:
  inline void set_has_online_reward();
  inline void clear_has_online_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > charge_reward_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondRewardLimit > buy_items_;
  ::RewardConfig::RewardItemCfg* online_reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static NewYearActivity* default_instance_;
};
// -------------------------------------------------------------------

class ChinaDayActivity : public ::google::protobuf::Message {
 public:
  ChinaDayActivity();
  virtual ~ChinaDayActivity();

  ChinaDayActivity(const ChinaDayActivity& from);

  inline ChinaDayActivity& operator=(const ChinaDayActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChinaDayActivity& default_instance();

  void Swap(ChinaDayActivity* other);

  // implements Message ----------------------------------------------

  ChinaDayActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChinaDayActivity& from);
  void MergeFrom(const ChinaDayActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.DiamondReward charge_reward = 1;
  inline int charge_reward_size() const;
  inline void clear_charge_reward();
  static const int kChargeRewardFieldNumber = 1;
  inline const ::ConfigActivity::DiamondReward& charge_reward(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_charge_reward(int index);
  inline ::ConfigActivity::DiamondReward* add_charge_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      charge_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_charge_reward();

  // required .RewardConfig.RewardItemCfg everyday_reward = 2;
  inline bool has_everyday_reward() const;
  inline void clear_everyday_reward();
  static const int kEverydayRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& everyday_reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_everyday_reward();
  inline ::RewardConfig::RewardItemCfg* release_everyday_reward();
  inline void set_allocated_everyday_reward(::RewardConfig::RewardItemCfg* everyday_reward);

  // required .RewardConfig.RewardItemCfg online_reward = 3;
  inline bool has_online_reward() const;
  inline void clear_online_reward();
  static const int kOnlineRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& online_reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_online_reward();
  inline ::RewardConfig::RewardItemCfg* release_online_reward();
  inline void set_allocated_online_reward(::RewardConfig::RewardItemCfg* online_reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.ChinaDayActivity)
 private:
  inline void set_has_everyday_reward();
  inline void clear_has_everyday_reward();
  inline void set_has_online_reward();
  inline void clear_has_online_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > charge_reward_;
  ::RewardConfig::RewardItemCfg* everyday_reward_;
  ::RewardConfig::RewardItemCfg* online_reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static ChinaDayActivity* default_instance_;
};
// -------------------------------------------------------------------

class PayOptionalActivity : public ::google::protobuf::Message {
 public:
  PayOptionalActivity();
  virtual ~PayOptionalActivity();

  PayOptionalActivity(const PayOptionalActivity& from);

  inline PayOptionalActivity& operator=(const PayOptionalActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayOptionalActivity& default_instance();

  void Swap(PayOptionalActivity* other);

  // implements Message ----------------------------------------------

  PayOptionalActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayOptionalActivity& from);
  void MergeFrom(const PayOptionalActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.DiamondMoreReward optional_reward = 1;
  inline int optional_reward_size() const;
  inline void clear_optional_reward();
  static const int kOptionalRewardFieldNumber = 1;
  inline const ::ConfigActivity::DiamondMoreReward& optional_reward(int index) const;
  inline ::ConfigActivity::DiamondMoreReward* mutable_optional_reward(int index);
  inline ::ConfigActivity::DiamondMoreReward* add_optional_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondMoreReward >&
      optional_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondMoreReward >*
      mutable_optional_reward();

  // @@protoc_insertion_point(class_scope:ConfigActivity.PayOptionalActivity)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondMoreReward > optional_reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static PayOptionalActivity* default_instance_;
};
// -------------------------------------------------------------------

class MsgSoulLevel : public ::google::protobuf::Message {
 public:
  MsgSoulLevel();
  virtual ~MsgSoulLevel();

  MsgSoulLevel(const MsgSoulLevel& from);

  inline MsgSoulLevel& operator=(const MsgSoulLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSoulLevel& default_instance();

  void Swap(MsgSoulLevel* other);

  // implements Message ----------------------------------------------

  MsgSoulLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSoulLevel& from);
  void MergeFrom(const MsgSoulLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.MsgSoulLevel)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 lv_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static MsgSoulLevel* default_instance_;
};
// -------------------------------------------------------------------

class MsgSoulGrowth : public ::google::protobuf::Message {
 public:
  MsgSoulGrowth();
  virtual ~MsgSoulGrowth();

  MsgSoulGrowth(const MsgSoulGrowth& from);

  inline MsgSoulGrowth& operator=(const MsgSoulGrowth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSoulGrowth& default_instance();

  void Swap(MsgSoulGrowth* other);

  // implements Message ----------------------------------------------

  MsgSoulGrowth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSoulGrowth& from);
  void MergeFrom(const MsgSoulGrowth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 growth = 1;
  inline bool has_growth() const;
  inline void clear_growth();
  static const int kGrowthFieldNumber = 1;
  inline ::google::protobuf::uint32 growth() const;
  inline void set_growth(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.MsgSoulGrowth)
 private:
  inline void set_has_growth();
  inline void clear_has_growth();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 growth_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static MsgSoulGrowth* default_instance_;
};
// -------------------------------------------------------------------

class MsgWuhun : public ::google::protobuf::Message {
 public:
  MsgWuhun();
  virtual ~MsgWuhun();

  MsgWuhun(const MsgWuhun& from);

  inline MsgWuhun& operator=(const MsgWuhun& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgWuhun& default_instance();

  void Swap(MsgWuhun* other);

  // implements Message ----------------------------------------------

  MsgWuhun* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgWuhun& from);
  void MergeFrom(const MsgWuhun& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 partcount = 1;
  inline bool has_partcount() const;
  inline void clear_partcount();
  static const int kPartcountFieldNumber = 1;
  inline ::google::protobuf::uint32 partcount() const;
  inline void set_partcount(::google::protobuf::uint32 value);

  // required uint32 partlv = 2;
  inline bool has_partlv() const;
  inline void clear_partlv();
  static const int kPartlvFieldNumber = 2;
  inline ::google::protobuf::uint32 partlv() const;
  inline void set_partlv(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.MsgWuhun)
 private:
  inline void set_has_partcount();
  inline void clear_has_partcount();
  inline void set_has_partlv();
  inline void clear_has_partlv();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 partcount_;
  ::google::protobuf::uint32 partlv_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static MsgWuhun* default_instance_;
};
// -------------------------------------------------------------------

class MsgJuexue : public ::google::protobuf::Message {
 public:
  MsgJuexue();
  virtual ~MsgJuexue();

  MsgJuexue(const MsgJuexue& from);

  inline MsgJuexue& operator=(const MsgJuexue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgJuexue& default_instance();

  void Swap(MsgJuexue* other);

  // implements Message ----------------------------------------------

  MsgJuexue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgJuexue& from);
  void MergeFrom(const MsgJuexue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 quality = 1;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 1;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.MsgJuexue)
 private:
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 count_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static MsgJuexue* default_instance_;
};
// -------------------------------------------------------------------

class MsgStar : public ::google::protobuf::Message {
 public:
  MsgStar();
  virtual ~MsgStar();

  MsgStar(const MsgStar& from);

  inline MsgStar& operator=(const MsgStar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgStar& default_instance();

  void Swap(MsgStar* other);

  // implements Message ----------------------------------------------

  MsgStar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgStar& from);
  void MergeFrom(const MsgStar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 star = 1;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 1;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.MsgStar)
 private:
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 type_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static MsgStar* default_instance_;
};
// -------------------------------------------------------------------

class MsgHeaven : public ::google::protobuf::Message {
 public:
  MsgHeaven();
  virtual ~MsgHeaven();

  MsgHeaven(const MsgHeaven& from);

  inline MsgHeaven& operator=(const MsgHeaven& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHeaven& default_instance();

  void Swap(MsgHeaven* other);

  // implements Message ----------------------------------------------

  MsgHeaven* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHeaven& from);
  void MergeFrom(const MsgHeaven& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 jie = 1;
  inline bool has_jie() const;
  inline void clear_jie();
  static const int kJieFieldNumber = 1;
  inline ::google::protobuf::uint32 jie() const;
  inline void set_jie(::google::protobuf::uint32 value);

  // required uint32 ceng = 2;
  inline bool has_ceng() const;
  inline void clear_ceng();
  static const int kCengFieldNumber = 2;
  inline ::google::protobuf::uint32 ceng() const;
  inline void set_ceng(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.MsgHeaven)
 private:
  inline void set_has_jie();
  inline void clear_has_jie();
  inline void set_has_ceng();
  inline void clear_has_ceng();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 jie_;
  ::google::protobuf::uint32 ceng_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static MsgHeaven* default_instance_;
};
// -------------------------------------------------------------------

class MsgDaoist : public ::google::protobuf::Message {
 public:
  MsgDaoist();
  virtual ~MsgDaoist();

  MsgDaoist(const MsgDaoist& from);

  inline MsgDaoist& operator=(const MsgDaoist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDaoist& default_instance();

  void Swap(MsgDaoist* other);

  // implements Message ----------------------------------------------

  MsgDaoist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDaoist& from);
  void MergeFrom(const MsgDaoist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 jie = 1;
  inline bool has_jie() const;
  inline void clear_jie();
  static const int kJieFieldNumber = 1;
  inline ::google::protobuf::uint32 jie() const;
  inline void set_jie(::google::protobuf::uint32 value);

  // required uint32 ceng = 2;
  inline bool has_ceng() const;
  inline void clear_ceng();
  static const int kCengFieldNumber = 2;
  inline ::google::protobuf::uint32 ceng() const;
  inline void set_ceng(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.MsgDaoist)
 private:
  inline void set_has_jie();
  inline void clear_has_jie();
  inline void set_has_ceng();
  inline void clear_has_ceng();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 jie_;
  ::google::protobuf::uint32 ceng_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static MsgDaoist* default_instance_;
};
// -------------------------------------------------------------------

class KaifuAchievement : public ::google::protobuf::Message {
 public:
  KaifuAchievement();
  virtual ~KaifuAchievement();

  KaifuAchievement(const KaifuAchievement& from);

  inline KaifuAchievement& operator=(const KaifuAchievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KaifuAchievement& default_instance();

  void Swap(KaifuAchievement* other);

  // implements Message ----------------------------------------------

  KaifuAchievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KaifuAchievement& from);
  void MergeFrom(const KaifuAchievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.MsgSoulLevel soul_lv = 1;
  inline int soul_lv_size() const;
  inline void clear_soul_lv();
  static const int kSoulLvFieldNumber = 1;
  inline const ::ConfigActivity::MsgSoulLevel& soul_lv(int index) const;
  inline ::ConfigActivity::MsgSoulLevel* mutable_soul_lv(int index);
  inline ::ConfigActivity::MsgSoulLevel* add_soul_lv();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulLevel >&
      soul_lv() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulLevel >*
      mutable_soul_lv();

  // repeated .ConfigActivity.MsgSoulGrowth soul_growth = 2;
  inline int soul_growth_size() const;
  inline void clear_soul_growth();
  static const int kSoulGrowthFieldNumber = 2;
  inline const ::ConfigActivity::MsgSoulGrowth& soul_growth(int index) const;
  inline ::ConfigActivity::MsgSoulGrowth* mutable_soul_growth(int index);
  inline ::ConfigActivity::MsgSoulGrowth* add_soul_growth();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulGrowth >&
      soul_growth() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulGrowth >*
      mutable_soul_growth();

  // repeated .ConfigActivity.MsgWuhun wuhun = 3;
  inline int wuhun_size() const;
  inline void clear_wuhun();
  static const int kWuhunFieldNumber = 3;
  inline const ::ConfigActivity::MsgWuhun& wuhun(int index) const;
  inline ::ConfigActivity::MsgWuhun* mutable_wuhun(int index);
  inline ::ConfigActivity::MsgWuhun* add_wuhun();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgWuhun >&
      wuhun() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgWuhun >*
      mutable_wuhun();

  // repeated .ConfigActivity.MsgJuexue juexue = 4;
  inline int juexue_size() const;
  inline void clear_juexue();
  static const int kJuexueFieldNumber = 4;
  inline const ::ConfigActivity::MsgJuexue& juexue(int index) const;
  inline ::ConfigActivity::MsgJuexue* mutable_juexue(int index);
  inline ::ConfigActivity::MsgJuexue* add_juexue();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgJuexue >&
      juexue() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgJuexue >*
      mutable_juexue();

  // repeated .ConfigActivity.MsgStar star = 5;
  inline int star_size() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline const ::ConfigActivity::MsgStar& star(int index) const;
  inline ::ConfigActivity::MsgStar* mutable_star(int index);
  inline ::ConfigActivity::MsgStar* add_star();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgStar >&
      star() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgStar >*
      mutable_star();

  // repeated .ConfigActivity.MsgHeaven heaven = 6;
  inline int heaven_size() const;
  inline void clear_heaven();
  static const int kHeavenFieldNumber = 6;
  inline const ::ConfigActivity::MsgHeaven& heaven(int index) const;
  inline ::ConfigActivity::MsgHeaven* mutable_heaven(int index);
  inline ::ConfigActivity::MsgHeaven* add_heaven();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgHeaven >&
      heaven() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgHeaven >*
      mutable_heaven();

  // repeated .ConfigActivity.MsgDaoist daoist = 7;
  inline int daoist_size() const;
  inline void clear_daoist();
  static const int kDaoistFieldNumber = 7;
  inline const ::ConfigActivity::MsgDaoist& daoist(int index) const;
  inline ::ConfigActivity::MsgDaoist* mutable_daoist(int index);
  inline ::ConfigActivity::MsgDaoist* add_daoist();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgDaoist >&
      daoist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgDaoist >*
      mutable_daoist();

  // @@protoc_insertion_point(class_scope:ConfigActivity.KaifuAchievement)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulLevel > soul_lv_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulGrowth > soul_growth_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgWuhun > wuhun_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgJuexue > juexue_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgStar > star_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgHeaven > heaven_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgDaoist > daoist_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static KaifuAchievement* default_instance_;
};
// -------------------------------------------------------------------

class KaifuDiscountShop : public ::google::protobuf::Message {
 public:
  KaifuDiscountShop();
  virtual ~KaifuDiscountShop();

  KaifuDiscountShop(const KaifuDiscountShop& from);

  inline KaifuDiscountShop& operator=(const KaifuDiscountShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KaifuDiscountShop& default_instance();

  void Swap(KaifuDiscountShop* other);

  // implements Message ----------------------------------------------

  KaifuDiscountShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KaifuDiscountShop& from);
  void MergeFrom(const KaifuDiscountShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 o_price = 1;
  inline bool has_o_price() const;
  inline void clear_o_price();
  static const int kOPriceFieldNumber = 1;
  inline ::google::protobuf::uint32 o_price() const;
  inline void set_o_price(::google::protobuf::uint32 value);

  // required uint32 p_price = 2;
  inline bool has_p_price() const;
  inline void clear_p_price();
  static const int kPPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 p_price() const;
  inline void set_p_price(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& item() const;
  inline ::RewardConfig::RewardItemCfg* mutable_item();
  inline ::RewardConfig::RewardItemCfg* release_item();
  inline void set_allocated_item(::RewardConfig::RewardItemCfg* item);

  // @@protoc_insertion_point(class_scope:ConfigActivity.KaifuDiscountShop)
 private:
  inline void set_has_o_price();
  inline void clear_has_o_price();
  inline void set_has_p_price();
  inline void clear_has_p_price();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 o_price_;
  ::google::protobuf::uint32 p_price_;
  ::RewardConfig::RewardItemCfg* item_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static KaifuDiscountShop* default_instance_;
};
// -------------------------------------------------------------------

class KaiFuGift : public ::google::protobuf::Message {
 public:
  KaiFuGift();
  virtual ~KaiFuGift();

  KaiFuGift(const KaiFuGift& from);

  inline KaiFuGift& operator=(const KaiFuGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KaiFuGift& default_instance();

  void Swap(KaiFuGift* other);

  // implements Message ----------------------------------------------

  KaiFuGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KaiFuGift& from);
  void MergeFrom(const KaiFuGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ConfigActivity.KaifuAchievement achievement = 1;
  inline bool has_achievement() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 1;
  inline const ::ConfigActivity::KaifuAchievement& achievement() const;
  inline ::ConfigActivity::KaifuAchievement* mutable_achievement();
  inline ::ConfigActivity::KaifuAchievement* release_achievement();
  inline void set_allocated_achievement(::ConfigActivity::KaifuAchievement* achievement);

  // repeated .ConfigActivity.KaifuDiscountShop shop = 2;
  inline int shop_size() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 2;
  inline const ::ConfigActivity::KaifuDiscountShop& shop(int index) const;
  inline ::ConfigActivity::KaifuDiscountShop* mutable_shop(int index);
  inline ::ConfigActivity::KaifuDiscountShop* add_shop();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KaifuDiscountShop >&
      shop() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KaifuDiscountShop >*
      mutable_shop();

  // @@protoc_insertion_point(class_scope:ConfigActivity.KaiFuGift)
 private:
  inline void set_has_achievement();
  inline void clear_has_achievement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ConfigActivity::KaifuAchievement* achievement_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KaifuDiscountShop > shop_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static KaiFuGift* default_instance_;
};
// -------------------------------------------------------------------

class StarStoneChange : public ::google::protobuf::Message {
 public:
  StarStoneChange();
  virtual ~StarStoneChange();

  StarStoneChange(const StarStoneChange& from);

  inline StarStoneChange& operator=(const StarStoneChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StarStoneChange& default_instance();

  void Swap(StarStoneChange* other);

  // implements Message ----------------------------------------------

  StarStoneChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StarStoneChange& from);
  void MergeFrom(const StarStoneChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 src = 1;
  inline int src_size() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::google::protobuf::uint32 src(int index) const;
  inline void set_src(int index, ::google::protobuf::uint32 value);
  inline void add_src(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      src() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_src();

  // repeated uint32 dst = 2;
  inline int dst_size() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline ::google::protobuf::uint32 dst(int index) const;
  inline void set_dst(int index, ::google::protobuf::uint32 value);
  inline void add_dst(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dst();

  // required uint32 limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigActivity.StarStoneChange)
 private:
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > src_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dst_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static StarStoneChange* default_instance_;
};
// -------------------------------------------------------------------

class HongBaoItem : public ::google::protobuf::Message {
 public:
  HongBaoItem();
  virtual ~HongBaoItem();

  HongBaoItem(const HongBaoItem& from);

  inline HongBaoItem& operator=(const HongBaoItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HongBaoItem& default_instance();

  void Swap(HongBaoItem* other);

  // implements Message ----------------------------------------------

  HongBaoItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HongBaoItem& from);
  void MergeFrom(const HongBaoItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 rate_free = 2;
  inline bool has_rate_free() const;
  inline void clear_rate_free();
  static const int kRateFreeFieldNumber = 2;
  inline ::google::protobuf::uint32 rate_free() const;
  inline void set_rate_free(::google::protobuf::uint32 value);

  // required uint32 rate_buy = 3;
  inline bool has_rate_buy() const;
  inline void clear_rate_buy();
  static const int kRateBuyFieldNumber = 3;
  inline ::google::protobuf::uint32 rate_buy() const;
  inline void set_rate_buy(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.HongBaoItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rate_free();
  inline void clear_has_rate_free();
  inline void set_has_rate_buy();
  inline void clear_has_rate_buy();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 rate_free_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 rate_buy_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static HongBaoItem* default_instance_;
};
// -------------------------------------------------------------------

class HongBao : public ::google::protobuf::Message {
 public:
  HongBao();
  virtual ~HongBao();

  HongBao(const HongBao& from);

  inline HongBao& operator=(const HongBao& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HongBao& default_instance();

  void Swap(HongBao* other);

  // implements Message ----------------------------------------------

  HongBao* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HongBao& from);
  void MergeFrom(const HongBao& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required uint32 refresh_free = 2;
  inline bool has_refresh_free() const;
  inline void clear_refresh_free();
  static const int kRefreshFreeFieldNumber = 2;
  inline ::google::protobuf::uint32 refresh_free() const;
  inline void set_refresh_free(::google::protobuf::uint32 value);

  // required uint32 refresh_cost = 3;
  inline bool has_refresh_cost() const;
  inline void clear_refresh_cost();
  static const int kRefreshCostFieldNumber = 3;
  inline ::google::protobuf::uint32 refresh_cost() const;
  inline void set_refresh_cost(::google::protobuf::uint32 value);

  // repeated .ConfigActivity.HongBaoItem item = 4;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::ConfigActivity::HongBaoItem& item(int index) const;
  inline ::ConfigActivity::HongBaoItem* mutable_item(int index);
  inline ::ConfigActivity::HongBaoItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HongBaoItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HongBaoItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:ConfigActivity.HongBao)
 private:
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_refresh_free();
  inline void clear_has_refresh_free();
  inline void set_has_refresh_cost();
  inline void clear_has_refresh_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 refresh_free_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HongBaoItem > item_;
  ::google::protobuf::uint32 refresh_cost_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static HongBao* default_instance_;
};
// -------------------------------------------------------------------

class TaskGift : public ::google::protobuf::Message {
 public:
  TaskGift();
  virtual ~TaskGift();

  TaskGift(const TaskGift& from);

  inline TaskGift& operator=(const TaskGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskGift& default_instance();

  void Swap(TaskGift* other);

  // implements Message ----------------------------------------------

  TaskGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskGift& from);
  void MergeFrom(const TaskGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.TaskGift)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static TaskGift* default_instance_;
};
// -------------------------------------------------------------------

class RotaryTableCfg : public ::google::protobuf::Message {
 public:
  RotaryTableCfg();
  virtual ~RotaryTableCfg();

  RotaryTableCfg(const RotaryTableCfg& from);

  inline RotaryTableCfg& operator=(const RotaryTableCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotaryTableCfg& default_instance();

  void Swap(RotaryTableCfg* other);

  // implements Message ----------------------------------------------

  RotaryTableCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotaryTableCfg& from);
  void MergeFrom(const RotaryTableCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.RotaryTableCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  ::RewardConfig::RewardItemCfg* reward_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static RotaryTableCfg* default_instance_;
};
// -------------------------------------------------------------------

class RotaryTableCrazyReward : public ::google::protobuf::Message {
 public:
  RotaryTableCrazyReward();
  virtual ~RotaryTableCrazyReward();

  RotaryTableCrazyReward(const RotaryTableCrazyReward& from);

  inline RotaryTableCrazyReward& operator=(const RotaryTableCrazyReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotaryTableCrazyReward& default_instance();

  void Swap(RotaryTableCrazyReward* other);

  // implements Message ----------------------------------------------

  RotaryTableCrazyReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RotaryTableCrazyReward& from);
  void MergeFrom(const RotaryTableCrazyReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.DiamondReward chargeReward = 1;
  inline int chargereward_size() const;
  inline void clear_chargereward();
  static const int kChargeRewardFieldNumber = 1;
  inline const ::ConfigActivity::DiamondReward& chargereward(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_chargereward(int index);
  inline ::ConfigActivity::DiamondReward* add_chargereward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      chargereward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_chargereward();

  // required .RewardConfig.RewardItemCfg rotaryTableCost = 2;
  inline bool has_rotarytablecost() const;
  inline void clear_rotarytablecost();
  static const int kRotaryTableCostFieldNumber = 2;
  inline const ::RewardConfig::RewardItemCfg& rotarytablecost() const;
  inline ::RewardConfig::RewardItemCfg* mutable_rotarytablecost();
  inline ::RewardConfig::RewardItemCfg* release_rotarytablecost();
  inline void set_allocated_rotarytablecost(::RewardConfig::RewardItemCfg* rotarytablecost);

  // repeated .ConfigActivity.RotaryTableCfg randomReward = 3;
  inline int randomreward_size() const;
  inline void clear_randomreward();
  static const int kRandomRewardFieldNumber = 3;
  inline const ::ConfigActivity::RotaryTableCfg& randomreward(int index) const;
  inline ::ConfigActivity::RotaryTableCfg* mutable_randomreward(int index);
  inline ::ConfigActivity::RotaryTableCfg* add_randomreward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RotaryTableCfg >&
      randomreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RotaryTableCfg >*
      mutable_randomreward();

  // required .RewardConfig.RewardItemCfg fixedReward = 4;
  inline bool has_fixedreward() const;
  inline void clear_fixedreward();
  static const int kFixedRewardFieldNumber = 4;
  inline const ::RewardConfig::RewardItemCfg& fixedreward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_fixedreward();
  inline ::RewardConfig::RewardItemCfg* release_fixedreward();
  inline void set_allocated_fixedreward(::RewardConfig::RewardItemCfg* fixedreward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.RotaryTableCrazyReward)
 private:
  inline void set_has_rotarytablecost();
  inline void clear_has_rotarytablecost();
  inline void set_has_fixedreward();
  inline void clear_has_fixedreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > chargereward_;
  ::RewardConfig::RewardItemCfg* rotarytablecost_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RotaryTableCfg > randomreward_;
  ::RewardConfig::RewardItemCfg* fixedreward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static RotaryTableCrazyReward* default_instance_;
};
// -------------------------------------------------------------------

class BatmanTreasureDraw : public ::google::protobuf::Message {
 public:
  BatmanTreasureDraw();
  virtual ~BatmanTreasureDraw();

  BatmanTreasureDraw(const BatmanTreasureDraw& from);

  inline BatmanTreasureDraw& operator=(const BatmanTreasureDraw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatmanTreasureDraw& default_instance();

  void Swap(BatmanTreasureDraw* other);

  // implements Message ----------------------------------------------

  BatmanTreasureDraw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatmanTreasureDraw& from);
  void MergeFrom(const BatmanTreasureDraw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RewardConfig.RewardItemCfg item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::RewardConfig::RewardItemCfg& item() const;
  inline ::RewardConfig::RewardItemCfg* mutable_item();
  inline ::RewardConfig::RewardItemCfg* release_item();
  inline void set_allocated_item(::RewardConfig::RewardItemCfg* item);

  // required uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigActivity.BatmanTreasureDraw)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::RewardItemCfg* item_;
  ::google::protobuf::uint32 weight_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static BatmanTreasureDraw* default_instance_;
};
// -------------------------------------------------------------------

class BatmanTreasureCfg : public ::google::protobuf::Message {
 public:
  BatmanTreasureCfg();
  virtual ~BatmanTreasureCfg();

  BatmanTreasureCfg(const BatmanTreasureCfg& from);

  inline BatmanTreasureCfg& operator=(const BatmanTreasureCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatmanTreasureCfg& default_instance();

  void Swap(BatmanTreasureCfg* other);

  // implements Message ----------------------------------------------

  BatmanTreasureCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatmanTreasureCfg& from);
  void MergeFrom(const BatmanTreasureCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.DiamondReward xiaobing_chargeReward = 1;
  inline int xiaobing_chargereward_size() const;
  inline void clear_xiaobing_chargereward();
  static const int kXiaobingChargeRewardFieldNumber = 1;
  inline const ::ConfigActivity::DiamondReward& xiaobing_chargereward(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_xiaobing_chargereward(int index);
  inline ::ConfigActivity::DiamondReward* add_xiaobing_chargereward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      xiaobing_chargereward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_xiaobing_chargereward();

  // repeated .ConfigActivity.BatmanTreasureDraw unique_xiaobing_dial = 2;
  inline int unique_xiaobing_dial_size() const;
  inline void clear_unique_xiaobing_dial();
  static const int kUniqueXiaobingDialFieldNumber = 2;
  inline const ::ConfigActivity::BatmanTreasureDraw& unique_xiaobing_dial(int index) const;
  inline ::ConfigActivity::BatmanTreasureDraw* mutable_unique_xiaobing_dial(int index);
  inline ::ConfigActivity::BatmanTreasureDraw* add_unique_xiaobing_dial();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BatmanTreasureDraw >&
      unique_xiaobing_dial() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BatmanTreasureDraw >*
      mutable_unique_xiaobing_dial();

  // required uint32 draw_cnt_max = 3;
  inline bool has_draw_cnt_max() const;
  inline void clear_draw_cnt_max();
  static const int kDrawCntMaxFieldNumber = 3;
  inline ::google::protobuf::uint32 draw_cnt_max() const;
  inline void set_draw_cnt_max(::google::protobuf::uint32 value);

  // required uint32 draw_cost_integral = 4;
  inline bool has_draw_cost_integral() const;
  inline void clear_draw_cost_integral();
  static const int kDrawCostIntegralFieldNumber = 4;
  inline ::google::protobuf::uint32 draw_cost_integral() const;
  inline void set_draw_cost_integral(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigActivity.BatmanTreasureCfg)
 private:
  inline void set_has_draw_cnt_max();
  inline void clear_has_draw_cnt_max();
  inline void set_has_draw_cost_integral();
  inline void clear_has_draw_cost_integral();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > xiaobing_chargereward_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BatmanTreasureDraw > unique_xiaobing_dial_;
  ::google::protobuf::uint32 draw_cnt_max_;
  ::google::protobuf::uint32 draw_cost_integral_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static BatmanTreasureCfg* default_instance_;
};
// -------------------------------------------------------------------

class SummerChargeRewardCfg : public ::google::protobuf::Message {
 public:
  SummerChargeRewardCfg();
  virtual ~SummerChargeRewardCfg();

  SummerChargeRewardCfg(const SummerChargeRewardCfg& from);

  inline SummerChargeRewardCfg& operator=(const SummerChargeRewardCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SummerChargeRewardCfg& default_instance();

  void Swap(SummerChargeRewardCfg* other);

  // implements Message ----------------------------------------------

  SummerChargeRewardCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SummerChargeRewardCfg& from);
  void MergeFrom(const SummerChargeRewardCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.DiamondReward daily_chargeReward = 1;
  inline int daily_chargereward_size() const;
  inline void clear_daily_chargereward();
  static const int kDailyChargeRewardFieldNumber = 1;
  inline const ::ConfigActivity::DiamondReward& daily_chargereward(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_daily_chargereward(int index);
  inline ::ConfigActivity::DiamondReward* add_daily_chargereward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      daily_chargereward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_daily_chargereward();

  // repeated .ConfigActivity.DiamondReward acc_chargeReward = 2;
  inline int acc_chargereward_size() const;
  inline void clear_acc_chargereward();
  static const int kAccChargeRewardFieldNumber = 2;
  inline const ::ConfigActivity::DiamondReward& acc_chargereward(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_acc_chargereward(int index);
  inline ::ConfigActivity::DiamondReward* add_acc_chargereward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      acc_chargereward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_acc_chargereward();

  // @@protoc_insertion_point(class_scope:ConfigActivity.SummerChargeRewardCfg)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > daily_chargereward_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > acc_chargereward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static SummerChargeRewardCfg* default_instance_;
};
// -------------------------------------------------------------------

class SummerHolidaysTicketCfg : public ::google::protobuf::Message {
 public:
  SummerHolidaysTicketCfg();
  virtual ~SummerHolidaysTicketCfg();

  SummerHolidaysTicketCfg(const SummerHolidaysTicketCfg& from);

  inline SummerHolidaysTicketCfg& operator=(const SummerHolidaysTicketCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SummerHolidaysTicketCfg& default_instance();

  void Swap(SummerHolidaysTicketCfg* other);

  // implements Message ----------------------------------------------

  SummerHolidaysTicketCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SummerHolidaysTicketCfg& from);
  void MergeFrom(const SummerHolidaysTicketCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 need_cost_ticket = 1;
  inline bool has_need_cost_ticket() const;
  inline void clear_need_cost_ticket();
  static const int kNeedCostTicketFieldNumber = 1;
  inline ::google::protobuf::uint32 need_cost_ticket() const;
  inline void set_need_cost_ticket(::google::protobuf::uint32 value);

  // required uint32 exchange_count_max = 2;
  inline bool has_exchange_count_max() const;
  inline void clear_exchange_count_max();
  static const int kExchangeCountMaxFieldNumber = 2;
  inline ::google::protobuf::uint32 exchange_count_max() const;
  inline void set_exchange_count_max(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigActivity.SummerHolidaysTicketCfg)
 private:
  inline void set_has_need_cost_ticket();
  inline void clear_has_need_cost_ticket();
  inline void set_has_exchange_count_max();
  inline void clear_has_exchange_count_max();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 need_cost_ticket_;
  ::google::protobuf::uint32 exchange_count_max_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static SummerHolidaysTicketCfg* default_instance_;
};
// -------------------------------------------------------------------

class SummerHolidaysRewardCfg : public ::google::protobuf::Message {
 public:
  SummerHolidaysRewardCfg();
  virtual ~SummerHolidaysRewardCfg();

  SummerHolidaysRewardCfg(const SummerHolidaysRewardCfg& from);

  inline SummerHolidaysRewardCfg& operator=(const SummerHolidaysRewardCfg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SummerHolidaysRewardCfg& default_instance();

  void Swap(SummerHolidaysRewardCfg* other);

  // implements Message ----------------------------------------------

  SummerHolidaysRewardCfg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SummerHolidaysRewardCfg& from);
  void MergeFrom(const SummerHolidaysRewardCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 exchange_ticket_max = 1;
  inline bool has_exchange_ticket_max() const;
  inline void clear_exchange_ticket_max();
  static const int kExchangeTicketMaxFieldNumber = 1;
  inline ::google::protobuf::uint32 exchange_ticket_max() const;
  inline void set_exchange_ticket_max(::google::protobuf::uint32 value);

  // required uint32 per_ticket_need_diamond = 2;
  inline bool has_per_ticket_need_diamond() const;
  inline void clear_per_ticket_need_diamond();
  static const int kPerTicketNeedDiamondFieldNumber = 2;
  inline ::google::protobuf::uint32 per_ticket_need_diamond() const;
  inline void set_per_ticket_need_diamond(::google::protobuf::uint32 value);

  // repeated .ConfigActivity.SummerHolidaysTicketCfg summer_holidays_ticket = 3;
  inline int summer_holidays_ticket_size() const;
  inline void clear_summer_holidays_ticket();
  static const int kSummerHolidaysTicketFieldNumber = 3;
  inline const ::ConfigActivity::SummerHolidaysTicketCfg& summer_holidays_ticket(int index) const;
  inline ::ConfigActivity::SummerHolidaysTicketCfg* mutable_summer_holidays_ticket(int index);
  inline ::ConfigActivity::SummerHolidaysTicketCfg* add_summer_holidays_ticket();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SummerHolidaysTicketCfg >&
      summer_holidays_ticket() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SummerHolidaysTicketCfg >*
      mutable_summer_holidays_ticket();

  // repeated .ConfigActivity.DiamondReward chargeReward = 4;
  inline int chargereward_size() const;
  inline void clear_chargereward();
  static const int kChargeRewardFieldNumber = 4;
  inline const ::ConfigActivity::DiamondReward& chargereward(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_chargereward(int index);
  inline ::ConfigActivity::DiamondReward* add_chargereward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      chargereward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_chargereward();

  // @@protoc_insertion_point(class_scope:ConfigActivity.SummerHolidaysRewardCfg)
 private:
  inline void set_has_exchange_ticket_max();
  inline void clear_has_exchange_ticket_max();
  inline void set_has_per_ticket_need_diamond();
  inline void clear_has_per_ticket_need_diamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 exchange_ticket_max_;
  ::google::protobuf::uint32 per_ticket_need_diamond_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SummerHolidaysTicketCfg > summer_holidays_ticket_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > chargereward_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static SummerHolidaysRewardCfg* default_instance_;
};
// -------------------------------------------------------------------

class FreeExchangeItem : public ::google::protobuf::Message {
 public:
  FreeExchangeItem();
  virtual ~FreeExchangeItem();

  FreeExchangeItem(const FreeExchangeItem& from);

  inline FreeExchangeItem& operator=(const FreeExchangeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreeExchangeItem& default_instance();

  void Swap(FreeExchangeItem* other);

  // implements Message ----------------------------------------------

  FreeExchangeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreeExchangeItem& from);
  void MergeFrom(const FreeExchangeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 c = 2;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 2;
  inline ::google::protobuf::uint32 c() const;
  inline void set_c(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigActivity.FreeExchangeItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_c();
  inline void clear_has_c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 c_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static FreeExchangeItem* default_instance_;
};
// -------------------------------------------------------------------

class FreeExchange : public ::google::protobuf::Message {
 public:
  FreeExchange();
  virtual ~FreeExchange();

  FreeExchange(const FreeExchange& from);

  inline FreeExchange& operator=(const FreeExchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreeExchange& default_instance();

  void Swap(FreeExchange* other);

  // implements Message ----------------------------------------------

  FreeExchange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreeExchange& from);
  void MergeFrom(const FreeExchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.FreeExchangeItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::ConfigActivity::FreeExchangeItem& item(int index) const;
  inline ::ConfigActivity::FreeExchangeItem* mutable_item(int index);
  inline ::ConfigActivity::FreeExchangeItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchangeItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchangeItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:ConfigActivity.FreeExchange)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchangeItem > item_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static FreeExchange* default_instance_;
};
// -------------------------------------------------------------------

class Activities : public ::google::protobuf::Message {
 public:
  Activities();
  virtual ~Activities();

  Activities(const Activities& from);

  inline Activities& operator=(const Activities& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Activities& default_instance();

  void Swap(Activities* other);

  // implements Message ----------------------------------------------

  Activities* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Activities& from);
  void MergeFrom(const Activities& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigActivity.BuildSuitItem buildsuit = 1;
  inline int buildsuit_size() const;
  inline void clear_buildsuit();
  static const int kBuildsuitFieldNumber = 1;
  inline const ::ConfigActivity::BuildSuitItem& buildsuit(int index) const;
  inline ::ConfigActivity::BuildSuitItem* mutable_buildsuit(int index);
  inline ::ConfigActivity::BuildSuitItem* add_buildsuit();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BuildSuitItem >&
      buildsuit() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BuildSuitItem >*
      mutable_buildsuit();

  // required .ConfigActivity.BlessPoint blesspoint = 2;
  inline bool has_blesspoint() const;
  inline void clear_blesspoint();
  static const int kBlesspointFieldNumber = 2;
  inline const ::ConfigActivity::BlessPoint& blesspoint() const;
  inline ::ConfigActivity::BlessPoint* mutable_blesspoint();
  inline ::ConfigActivity::BlessPoint* release_blesspoint();
  inline void set_allocated_blesspoint(::ConfigActivity::BlessPoint* blesspoint);

  // required .ConfigActivity.DoubleWelfare double_welfare = 3;
  inline bool has_double_welfare() const;
  inline void clear_double_welfare();
  static const int kDoubleWelfareFieldNumber = 3;
  inline const ::ConfigActivity::DoubleWelfare& double_welfare() const;
  inline ::ConfigActivity::DoubleWelfare* mutable_double_welfare();
  inline ::ConfigActivity::DoubleWelfare* release_double_welfare();
  inline void set_allocated_double_welfare(::ConfigActivity::DoubleWelfare* double_welfare);

  // repeated .ConfigActivity.PearlAdvance pearl_advance = 4;
  inline int pearl_advance_size() const;
  inline void clear_pearl_advance();
  static const int kPearlAdvanceFieldNumber = 4;
  inline const ::ConfigActivity::PearlAdvance& pearl_advance(int index) const;
  inline ::ConfigActivity::PearlAdvance* mutable_pearl_advance(int index);
  inline ::ConfigActivity::PearlAdvance* add_pearl_advance();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::PearlAdvance >&
      pearl_advance() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::PearlAdvance >*
      mutable_pearl_advance();

  // repeated .ConfigActivity.UniqueKnowledgeDial unique_knowledge_dial = 5;
  inline int unique_knowledge_dial_size() const;
  inline void clear_unique_knowledge_dial();
  static const int kUniqueKnowledgeDialFieldNumber = 5;
  inline const ::ConfigActivity::UniqueKnowledgeDial& unique_knowledge_dial(int index) const;
  inline ::ConfigActivity::UniqueKnowledgeDial* mutable_unique_knowledge_dial(int index);
  inline ::ConfigActivity::UniqueKnowledgeDial* add_unique_knowledge_dial();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::UniqueKnowledgeDial >&
      unique_knowledge_dial() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::UniqueKnowledgeDial >*
      mutable_unique_knowledge_dial();

  // repeated .ConfigActivity.SpriteVitalityItem spiritvitality = 6;
  inline int spiritvitality_size() const;
  inline void clear_spiritvitality();
  static const int kSpiritvitalityFieldNumber = 6;
  inline const ::ConfigActivity::SpriteVitalityItem& spiritvitality(int index) const;
  inline ::ConfigActivity::SpriteVitalityItem* mutable_spiritvitality(int index);
  inline ::ConfigActivity::SpriteVitalityItem* add_spiritvitality();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SpriteVitalityItem >&
      spiritvitality() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SpriteVitalityItem >*
      mutable_spiritvitality();

  // required .ConfigActivity.ForgeSmelt forge = 7;
  inline bool has_forge() const;
  inline void clear_forge();
  static const int kForgeFieldNumber = 7;
  inline const ::ConfigActivity::ForgeSmelt& forge() const;
  inline ::ConfigActivity::ForgeSmelt* mutable_forge();
  inline ::ConfigActivity::ForgeSmelt* release_forge();
  inline void set_allocated_forge(::ConfigActivity::ForgeSmelt* forge);

  // required .ConfigActivity.HeroDial herodial = 8;
  inline bool has_herodial() const;
  inline void clear_herodial();
  static const int kHerodialFieldNumber = 8;
  inline const ::ConfigActivity::HeroDial& herodial() const;
  inline ::ConfigActivity::HeroDial* mutable_herodial();
  inline ::ConfigActivity::HeroDial* release_herodial();
  inline void set_allocated_herodial(::ConfigActivity::HeroDial* herodial);

  // repeated .ConfigActivity.KingdomWar kingdomwar = 9;
  inline int kingdomwar_size() const;
  inline void clear_kingdomwar();
  static const int kKingdomwarFieldNumber = 9;
  inline const ::ConfigActivity::KingdomWar& kingdomwar(int index) const;
  inline ::ConfigActivity::KingdomWar* mutable_kingdomwar(int index);
  inline ::ConfigActivity::KingdomWar* add_kingdomwar();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KingdomWar >&
      kingdomwar() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KingdomWar >*
      mutable_kingdomwar();

  // repeated .ConfigActivity.OneDiamondWelfare onediamondwelfare = 10;
  inline int onediamondwelfare_size() const;
  inline void clear_onediamondwelfare();
  static const int kOnediamondwelfareFieldNumber = 10;
  inline const ::ConfigActivity::OneDiamondWelfare& onediamondwelfare(int index) const;
  inline ::ConfigActivity::OneDiamondWelfare* mutable_onediamondwelfare(int index);
  inline ::ConfigActivity::OneDiamondWelfare* add_onediamondwelfare();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::OneDiamondWelfare >&
      onediamondwelfare() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::OneDiamondWelfare >*
      mutable_onediamondwelfare();

  // required .ConfigActivity.FortunePacks fortune_packs = 11;
  inline bool has_fortune_packs() const;
  inline void clear_fortune_packs();
  static const int kFortunePacksFieldNumber = 11;
  inline const ::ConfigActivity::FortunePacks& fortune_packs() const;
  inline ::ConfigActivity::FortunePacks* mutable_fortune_packs();
  inline ::ConfigActivity::FortunePacks* release_fortune_packs();
  inline void set_allocated_fortune_packs(::ConfigActivity::FortunePacks* fortune_packs);

  // repeated .ConfigActivity.SevenDayPacks sevenday_packs = 12;
  inline int sevenday_packs_size() const;
  inline void clear_sevenday_packs();
  static const int kSevendayPacksFieldNumber = 12;
  inline const ::ConfigActivity::SevenDayPacks& sevenday_packs(int index) const;
  inline ::ConfigActivity::SevenDayPacks* mutable_sevenday_packs(int index);
  inline ::ConfigActivity::SevenDayPacks* add_sevenday_packs();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SevenDayPacks >&
      sevenday_packs() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SevenDayPacks >*
      mutable_sevenday_packs();

  // repeated .ConfigActivity.DiamondReward icephoenix = 13;
  inline int icephoenix_size() const;
  inline void clear_icephoenix();
  static const int kIcephoenixFieldNumber = 13;
  inline const ::ConfigActivity::DiamondReward& icephoenix(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_icephoenix(int index);
  inline ::ConfigActivity::DiamondReward* add_icephoenix();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      icephoenix() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_icephoenix();

  // repeated .ConfigActivity.DiamondReward autumn_feedback = 14;
  inline int autumn_feedback_size() const;
  inline void clear_autumn_feedback();
  static const int kAutumnFeedbackFieldNumber = 14;
  inline const ::ConfigActivity::DiamondReward& autumn_feedback(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_autumn_feedback(int index);
  inline ::ConfigActivity::DiamondReward* add_autumn_feedback();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      autumn_feedback() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_autumn_feedback();

  // repeated .ConfigActivity.DiamondReward protectflag = 15;
  inline int protectflag_size() const;
  inline void clear_protectflag();
  static const int kProtectflagFieldNumber = 15;
  inline const ::ConfigActivity::DiamondReward& protectflag(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_protectflag(int index);
  inline ::ConfigActivity::DiamondReward* add_protectflag();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      protectflag() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_protectflag();

  // required .ConfigActivity.KeyLuxuryGift keyluxurygift = 16;
  inline bool has_keyluxurygift() const;
  inline void clear_keyluxurygift();
  static const int kKeyluxurygiftFieldNumber = 16;
  inline const ::ConfigActivity::KeyLuxuryGift& keyluxurygift() const;
  inline ::ConfigActivity::KeyLuxuryGift* mutable_keyluxurygift();
  inline ::ConfigActivity::KeyLuxuryGift* release_keyluxurygift();
  inline void set_allocated_keyluxurygift(::ConfigActivity::KeyLuxuryGift* keyluxurygift);

  // required .ConfigActivity.EnjoySmallGiftReward enjoy_smallgift = 17;
  inline bool has_enjoy_smallgift() const;
  inline void clear_enjoy_smallgift();
  static const int kEnjoySmallgiftFieldNumber = 17;
  inline const ::ConfigActivity::EnjoySmallGiftReward& enjoy_smallgift() const;
  inline ::ConfigActivity::EnjoySmallGiftReward* mutable_enjoy_smallgift();
  inline ::ConfigActivity::EnjoySmallGiftReward* release_enjoy_smallgift();
  inline void set_allocated_enjoy_smallgift(::ConfigActivity::EnjoySmallGiftReward* enjoy_smallgift);

  // required .ConfigActivity.LuckyGift lucky_gift = 18;
  inline bool has_lucky_gift() const;
  inline void clear_lucky_gift();
  static const int kLuckyGiftFieldNumber = 18;
  inline const ::ConfigActivity::LuckyGift& lucky_gift() const;
  inline ::ConfigActivity::LuckyGift* mutable_lucky_gift();
  inline ::ConfigActivity::LuckyGift* release_lucky_gift();
  inline void set_allocated_lucky_gift(::ConfigActivity::LuckyGift* lucky_gift);

  // repeated .ConfigActivity.DiamondReward year_endgift = 19;
  inline int year_endgift_size() const;
  inline void clear_year_endgift();
  static const int kYearEndgiftFieldNumber = 19;
  inline const ::ConfigActivity::DiamondReward& year_endgift(int index) const;
  inline ::ConfigActivity::DiamondReward* mutable_year_endgift(int index);
  inline ::ConfigActivity::DiamondReward* add_year_endgift();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
      year_endgift() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
      mutable_year_endgift();

  // required .ConfigActivity.NewYearActivity newyearactivity = 20;
  inline bool has_newyearactivity() const;
  inline void clear_newyearactivity();
  static const int kNewyearactivityFieldNumber = 20;
  inline const ::ConfigActivity::NewYearActivity& newyearactivity() const;
  inline ::ConfigActivity::NewYearActivity* mutable_newyearactivity();
  inline ::ConfigActivity::NewYearActivity* release_newyearactivity();
  inline void set_allocated_newyearactivity(::ConfigActivity::NewYearActivity* newyearactivity);

  // required .ConfigActivity.KaiFuGift kaifu = 21;
  inline bool has_kaifu() const;
  inline void clear_kaifu();
  static const int kKaifuFieldNumber = 21;
  inline const ::ConfigActivity::KaiFuGift& kaifu() const;
  inline ::ConfigActivity::KaiFuGift* mutable_kaifu();
  inline ::ConfigActivity::KaiFuGift* release_kaifu();
  inline void set_allocated_kaifu(::ConfigActivity::KaiFuGift* kaifu);

  // required .ConfigActivity.StarStoneChange starstone = 22;
  inline bool has_starstone() const;
  inline void clear_starstone();
  static const int kStarstoneFieldNumber = 22;
  inline const ::ConfigActivity::StarStoneChange& starstone() const;
  inline ::ConfigActivity::StarStoneChange* mutable_starstone();
  inline ::ConfigActivity::StarStoneChange* release_starstone();
  inline void set_allocated_starstone(::ConfigActivity::StarStoneChange* starstone);

  // required .ConfigActivity.HongBao newyearactive = 23;
  inline bool has_newyearactive() const;
  inline void clear_newyearactive();
  static const int kNewyearactiveFieldNumber = 23;
  inline const ::ConfigActivity::HongBao& newyearactive() const;
  inline ::ConfigActivity::HongBao* mutable_newyearactive();
  inline ::ConfigActivity::HongBao* release_newyearactive();
  inline void set_allocated_newyearactive(::ConfigActivity::HongBao* newyearactive);

  // repeated .ConfigActivity.TaskGift HebdomadReward = 24;
  inline int hebdomadreward_size() const;
  inline void clear_hebdomadreward();
  static const int kHebdomadRewardFieldNumber = 24;
  inline const ::ConfigActivity::TaskGift& hebdomadreward(int index) const;
  inline ::ConfigActivity::TaskGift* mutable_hebdomadreward(int index);
  inline ::ConfigActivity::TaskGift* add_hebdomadreward();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TaskGift >&
      hebdomadreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TaskGift >*
      mutable_hebdomadreward();

  // required .ConfigActivity.RotaryTableCrazyReward rotary_table = 25;
  inline bool has_rotary_table() const;
  inline void clear_rotary_table();
  static const int kRotaryTableFieldNumber = 25;
  inline const ::ConfigActivity::RotaryTableCrazyReward& rotary_table() const;
  inline ::ConfigActivity::RotaryTableCrazyReward* mutable_rotary_table();
  inline ::ConfigActivity::RotaryTableCrazyReward* release_rotary_table();
  inline void set_allocated_rotary_table(::ConfigActivity::RotaryTableCrazyReward* rotary_table);

  // required .ConfigActivity.BatmanTreasureCfg batmantreasure = 26;
  inline bool has_batmantreasure() const;
  inline void clear_batmantreasure();
  static const int kBatmantreasureFieldNumber = 26;
  inline const ::ConfigActivity::BatmanTreasureCfg& batmantreasure() const;
  inline ::ConfigActivity::BatmanTreasureCfg* mutable_batmantreasure();
  inline ::ConfigActivity::BatmanTreasureCfg* release_batmantreasure();
  inline void set_allocated_batmantreasure(::ConfigActivity::BatmanTreasureCfg* batmantreasure);

  // required .ConfigActivity.SummerChargeRewardCfg summer_charge = 27;
  inline bool has_summer_charge() const;
  inline void clear_summer_charge();
  static const int kSummerChargeFieldNumber = 27;
  inline const ::ConfigActivity::SummerChargeRewardCfg& summer_charge() const;
  inline ::ConfigActivity::SummerChargeRewardCfg* mutable_summer_charge();
  inline ::ConfigActivity::SummerChargeRewardCfg* release_summer_charge();
  inline void set_allocated_summer_charge(::ConfigActivity::SummerChargeRewardCfg* summer_charge);

  // required .ConfigActivity.SummerHolidaysRewardCfg summer_holidays = 28;
  inline bool has_summer_holidays() const;
  inline void clear_summer_holidays();
  static const int kSummerHolidaysFieldNumber = 28;
  inline const ::ConfigActivity::SummerHolidaysRewardCfg& summer_holidays() const;
  inline ::ConfigActivity::SummerHolidaysRewardCfg* mutable_summer_holidays();
  inline ::ConfigActivity::SummerHolidaysRewardCfg* release_summer_holidays();
  inline void set_allocated_summer_holidays(::ConfigActivity::SummerHolidaysRewardCfg* summer_holidays);

  // required .ConfigActivity.ChinaDayActivity chinadayavtivity = 29;
  inline bool has_chinadayavtivity() const;
  inline void clear_chinadayavtivity();
  static const int kChinadayavtivityFieldNumber = 29;
  inline const ::ConfigActivity::ChinaDayActivity& chinadayavtivity() const;
  inline ::ConfigActivity::ChinaDayActivity* mutable_chinadayavtivity();
  inline ::ConfigActivity::ChinaDayActivity* release_chinadayavtivity();
  inline void set_allocated_chinadayavtivity(::ConfigActivity::ChinaDayActivity* chinadayavtivity);

  // required .ConfigActivity.PayOptionalActivity payoptionalactivity = 30;
  inline bool has_payoptionalactivity() const;
  inline void clear_payoptionalactivity();
  static const int kPayoptionalactivityFieldNumber = 30;
  inline const ::ConfigActivity::PayOptionalActivity& payoptionalactivity() const;
  inline ::ConfigActivity::PayOptionalActivity* mutable_payoptionalactivity();
  inline ::ConfigActivity::PayOptionalActivity* release_payoptionalactivity();
  inline void set_allocated_payoptionalactivity(::ConfigActivity::PayOptionalActivity* payoptionalactivity);

  // repeated .ConfigActivity.FreeExchange free_exchg = 31;
  inline int free_exchg_size() const;
  inline void clear_free_exchg();
  static const int kFreeExchgFieldNumber = 31;
  inline const ::ConfigActivity::FreeExchange& free_exchg(int index) const;
  inline ::ConfigActivity::FreeExchange* mutable_free_exchg(int index);
  inline ::ConfigActivity::FreeExchange* add_free_exchg();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchange >&
      free_exchg() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchange >*
      mutable_free_exchg();

  // @@protoc_insertion_point(class_scope:ConfigActivity.Activities)
 private:
  inline void set_has_blesspoint();
  inline void clear_has_blesspoint();
  inline void set_has_double_welfare();
  inline void clear_has_double_welfare();
  inline void set_has_forge();
  inline void clear_has_forge();
  inline void set_has_herodial();
  inline void clear_has_herodial();
  inline void set_has_fortune_packs();
  inline void clear_has_fortune_packs();
  inline void set_has_keyluxurygift();
  inline void clear_has_keyluxurygift();
  inline void set_has_enjoy_smallgift();
  inline void clear_has_enjoy_smallgift();
  inline void set_has_lucky_gift();
  inline void clear_has_lucky_gift();
  inline void set_has_newyearactivity();
  inline void clear_has_newyearactivity();
  inline void set_has_kaifu();
  inline void clear_has_kaifu();
  inline void set_has_starstone();
  inline void clear_has_starstone();
  inline void set_has_newyearactive();
  inline void clear_has_newyearactive();
  inline void set_has_rotary_table();
  inline void clear_has_rotary_table();
  inline void set_has_batmantreasure();
  inline void clear_has_batmantreasure();
  inline void set_has_summer_charge();
  inline void clear_has_summer_charge();
  inline void set_has_summer_holidays();
  inline void clear_has_summer_holidays();
  inline void set_has_chinadayavtivity();
  inline void clear_has_chinadayavtivity();
  inline void set_has_payoptionalactivity();
  inline void clear_has_payoptionalactivity();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BuildSuitItem > buildsuit_;
  ::ConfigActivity::BlessPoint* blesspoint_;
  ::ConfigActivity::DoubleWelfare* double_welfare_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::PearlAdvance > pearl_advance_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::UniqueKnowledgeDial > unique_knowledge_dial_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SpriteVitalityItem > spiritvitality_;
  ::ConfigActivity::ForgeSmelt* forge_;
  ::ConfigActivity::HeroDial* herodial_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KingdomWar > kingdomwar_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::OneDiamondWelfare > onediamondwelfare_;
  ::ConfigActivity::FortunePacks* fortune_packs_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SevenDayPacks > sevenday_packs_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > icephoenix_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > autumn_feedback_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > protectflag_;
  ::ConfigActivity::KeyLuxuryGift* keyluxurygift_;
  ::ConfigActivity::EnjoySmallGiftReward* enjoy_smallgift_;
  ::ConfigActivity::LuckyGift* lucky_gift_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward > year_endgift_;
  ::ConfigActivity::NewYearActivity* newyearactivity_;
  ::ConfigActivity::KaiFuGift* kaifu_;
  ::ConfigActivity::StarStoneChange* starstone_;
  ::ConfigActivity::HongBao* newyearactive_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TaskGift > hebdomadreward_;
  ::ConfigActivity::RotaryTableCrazyReward* rotary_table_;
  ::ConfigActivity::BatmanTreasureCfg* batmantreasure_;
  ::ConfigActivity::SummerChargeRewardCfg* summer_charge_;
  ::ConfigActivity::SummerHolidaysRewardCfg* summer_holidays_;
  ::ConfigActivity::ChinaDayActivity* chinadayavtivity_;
  ::ConfigActivity::PayOptionalActivity* payoptionalactivity_;
  ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchange > free_exchg_;
  friend void  protobuf_AddDesc_ConfigActivity_2eproto();
  friend void protobuf_AssignDesc_ConfigActivity_2eproto();
  friend void protobuf_ShutdownFile_ConfigActivity_2eproto();

  void InitAsDefaultInstance();
  static Activities* default_instance_;
};
// ===================================================================


// ===================================================================

// BuildSuitItem

// required uint32 diamond = 1;
inline bool BuildSuitItem::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuildSuitItem::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuildSuitItem::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuildSuitItem::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 BuildSuitItem::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BuildSuitItem.diamond)
  return diamond_;
}
inline void BuildSuitItem::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.BuildSuitItem.diamond)
}

// required .RewardConfig.RewardItemCfg reward = 2;
inline bool BuildSuitItem::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuildSuitItem::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuildSuitItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuildSuitItem::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& BuildSuitItem::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BuildSuitItem.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* BuildSuitItem::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.BuildSuitItem.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* BuildSuitItem::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void BuildSuitItem::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.BuildSuitItem.reward)
}

// -------------------------------------------------------------------

// ExchangeItem

// repeated uint32 condition = 1;
inline int ExchangeItem::condition_size() const {
  return condition_.size();
}
inline void ExchangeItem::clear_condition() {
  condition_.Clear();
}
inline ::google::protobuf::uint32 ExchangeItem::condition(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ExchangeItem.condition)
  return condition_.Get(index);
}
inline void ExchangeItem::set_condition(int index, ::google::protobuf::uint32 value) {
  condition_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigActivity.ExchangeItem.condition)
}
inline void ExchangeItem::add_condition(::google::protobuf::uint32 value) {
  condition_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigActivity.ExchangeItem.condition)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ExchangeItem::condition() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.ExchangeItem.condition)
  return condition_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ExchangeItem::mutable_condition() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.ExchangeItem.condition)
  return &condition_;
}

// required uint32 first = 2;
inline bool ExchangeItem::has_first() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeItem::set_has_first() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeItem::clear_has_first() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeItem::clear_first() {
  first_ = 0u;
  clear_has_first();
}
inline ::google::protobuf::uint32 ExchangeItem::first() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ExchangeItem.first)
  return first_;
}
inline void ExchangeItem::set_first(::google::protobuf::uint32 value) {
  set_has_first();
  first_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.ExchangeItem.first)
}

// required uint32 accumulate = 3;
inline bool ExchangeItem::has_accumulate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeItem::set_has_accumulate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeItem::clear_has_accumulate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeItem::clear_accumulate() {
  accumulate_ = 0u;
  clear_has_accumulate();
}
inline ::google::protobuf::uint32 ExchangeItem::accumulate() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ExchangeItem.accumulate)
  return accumulate_;
}
inline void ExchangeItem::set_accumulate(::google::protobuf::uint32 value) {
  set_has_accumulate();
  accumulate_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.ExchangeItem.accumulate)
}

// required .RewardConfig.RewardItemCfg reward = 4;
inline bool ExchangeItem::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExchangeItem::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExchangeItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExchangeItem::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& ExchangeItem::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ExchangeItem.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* ExchangeItem::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.ExchangeItem.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* ExchangeItem::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void ExchangeItem::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.ExchangeItem.reward)
}

// -------------------------------------------------------------------

// BlessPoint

// repeated .ConfigActivity.ExchangeItem exchange = 1;
inline int BlessPoint::exchange_size() const {
  return exchange_.size();
}
inline void BlessPoint::clear_exchange() {
  exchange_.Clear();
}
inline const ::ConfigActivity::ExchangeItem& BlessPoint::exchange(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BlessPoint.exchange)
  return exchange_.Get(index);
}
inline ::ConfigActivity::ExchangeItem* BlessPoint::mutable_exchange(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.BlessPoint.exchange)
  return exchange_.Mutable(index);
}
inline ::ConfigActivity::ExchangeItem* BlessPoint::add_exchange() {
  // @@protoc_insertion_point(field_add:ConfigActivity.BlessPoint.exchange)
  return exchange_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ExchangeItem >&
BlessPoint::exchange() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.BlessPoint.exchange)
  return exchange_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ExchangeItem >*
BlessPoint::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.BlessPoint.exchange)
  return &exchange_;
}

// -------------------------------------------------------------------

// CostCoefficient

// required uint32 cost = 1;
inline bool CostCoefficient::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CostCoefficient::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CostCoefficient::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CostCoefficient::clear_cost() {
  cost_ = 0u;
  clear_has_cost();
}
inline ::google::protobuf::uint32 CostCoefficient::cost() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.CostCoefficient.cost)
  return cost_;
}
inline void CostCoefficient::set_cost(::google::protobuf::uint32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.CostCoefficient.cost)
}

// required double coefficient = 2;
inline bool CostCoefficient::has_coefficient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CostCoefficient::set_has_coefficient() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CostCoefficient::clear_has_coefficient() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CostCoefficient::clear_coefficient() {
  coefficient_ = 0;
  clear_has_coefficient();
}
inline double CostCoefficient::coefficient() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.CostCoefficient.coefficient)
  return coefficient_;
}
inline void CostCoefficient::set_coefficient(double value) {
  set_has_coefficient();
  coefficient_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.CostCoefficient.coefficient)
}

// -------------------------------------------------------------------

// DiamondReward

// required uint32 diamond = 1;
inline bool DiamondReward::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiamondReward::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiamondReward::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiamondReward::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 DiamondReward::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DiamondReward.diamond)
  return diamond_;
}
inline void DiamondReward::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.DiamondReward.diamond)
}

// required .RewardConfig.RewardItemCfg reward = 2;
inline bool DiamondReward::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiamondReward::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiamondReward::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiamondReward::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& DiamondReward::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DiamondReward.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* DiamondReward::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.DiamondReward.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* DiamondReward::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void DiamondReward::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.DiamondReward.reward)
}

// -------------------------------------------------------------------

// DiamondRewardLimit

// required uint32 diamond = 1;
inline bool DiamondRewardLimit::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiamondRewardLimit::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiamondRewardLimit::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiamondRewardLimit::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 DiamondRewardLimit::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DiamondRewardLimit.diamond)
  return diamond_;
}
inline void DiamondRewardLimit::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.DiamondRewardLimit.diamond)
}

// required uint32 limit = 2;
inline bool DiamondRewardLimit::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiamondRewardLimit::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiamondRewardLimit::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiamondRewardLimit::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 DiamondRewardLimit::limit() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DiamondRewardLimit.limit)
  return limit_;
}
inline void DiamondRewardLimit::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.DiamondRewardLimit.limit)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool DiamondRewardLimit::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiamondRewardLimit::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DiamondRewardLimit::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DiamondRewardLimit::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& DiamondRewardLimit::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DiamondRewardLimit.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* DiamondRewardLimit::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.DiamondRewardLimit.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* DiamondRewardLimit::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void DiamondRewardLimit::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.DiamondRewardLimit.reward)
}

// -------------------------------------------------------------------

// DiamondMoreReward

// required uint32 diamond = 1;
inline bool DiamondMoreReward::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiamondMoreReward::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiamondMoreReward::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiamondMoreReward::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 DiamondMoreReward::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DiamondMoreReward.diamond)
  return diamond_;
}
inline void DiamondMoreReward::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.DiamondMoreReward.diamond)
}

// repeated .RewardConfig.RewardItemCfg reward = 2;
inline int DiamondMoreReward::reward_size() const {
  return reward_.size();
}
inline void DiamondMoreReward::clear_reward() {
  reward_.Clear();
}
inline const ::RewardConfig::RewardItemCfg& DiamondMoreReward::reward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DiamondMoreReward.reward)
  return reward_.Get(index);
}
inline ::RewardConfig::RewardItemCfg* DiamondMoreReward::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.DiamondMoreReward.reward)
  return reward_.Mutable(index);
}
inline ::RewardConfig::RewardItemCfg* DiamondMoreReward::add_reward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.DiamondMoreReward.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::RewardItemCfg >&
DiamondMoreReward::reward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.DiamondMoreReward.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::RewardItemCfg >*
DiamondMoreReward::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.DiamondMoreReward.reward)
  return &reward_;
}

// -------------------------------------------------------------------

// DoubleWelfare

// required uint32 maximum = 1;
inline bool DoubleWelfare::has_maximum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoubleWelfare::set_has_maximum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoubleWelfare::clear_has_maximum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoubleWelfare::clear_maximum() {
  maximum_ = 0u;
  clear_has_maximum();
}
inline ::google::protobuf::uint32 DoubleWelfare::maximum() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DoubleWelfare.maximum)
  return maximum_;
}
inline void DoubleWelfare::set_maximum(::google::protobuf::uint32 value) {
  set_has_maximum();
  maximum_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.DoubleWelfare.maximum)
}

// repeated .ConfigActivity.CostCoefficient cost_coefficient = 2;
inline int DoubleWelfare::cost_coefficient_size() const {
  return cost_coefficient_.size();
}
inline void DoubleWelfare::clear_cost_coefficient() {
  cost_coefficient_.Clear();
}
inline const ::ConfigActivity::CostCoefficient& DoubleWelfare::cost_coefficient(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DoubleWelfare.cost_coefficient)
  return cost_coefficient_.Get(index);
}
inline ::ConfigActivity::CostCoefficient* DoubleWelfare::mutable_cost_coefficient(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.DoubleWelfare.cost_coefficient)
  return cost_coefficient_.Mutable(index);
}
inline ::ConfigActivity::CostCoefficient* DoubleWelfare::add_cost_coefficient() {
  // @@protoc_insertion_point(field_add:ConfigActivity.DoubleWelfare.cost_coefficient)
  return cost_coefficient_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::CostCoefficient >&
DoubleWelfare::cost_coefficient() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.DoubleWelfare.cost_coefficient)
  return cost_coefficient_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::CostCoefficient >*
DoubleWelfare::mutable_cost_coefficient() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.DoubleWelfare.cost_coefficient)
  return &cost_coefficient_;
}

// repeated .ConfigActivity.DiamondReward extra_reward = 3;
inline int DoubleWelfare::extra_reward_size() const {
  return extra_reward_.size();
}
inline void DoubleWelfare::clear_extra_reward() {
  extra_reward_.Clear();
}
inline const ::ConfigActivity::DiamondReward& DoubleWelfare::extra_reward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.DoubleWelfare.extra_reward)
  return extra_reward_.Get(index);
}
inline ::ConfigActivity::DiamondReward* DoubleWelfare::mutable_extra_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.DoubleWelfare.extra_reward)
  return extra_reward_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* DoubleWelfare::add_extra_reward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.DoubleWelfare.extra_reward)
  return extra_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
DoubleWelfare::extra_reward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.DoubleWelfare.extra_reward)
  return extra_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
DoubleWelfare::mutable_extra_reward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.DoubleWelfare.extra_reward)
  return &extra_reward_;
}

// -------------------------------------------------------------------

// PearlAdvance

// required uint32 cost = 1;
inline bool PearlAdvance::has_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PearlAdvance::set_has_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PearlAdvance::clear_has_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PearlAdvance::clear_cost() {
  cost_ = 0u;
  clear_has_cost();
}
inline ::google::protobuf::uint32 PearlAdvance::cost() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.PearlAdvance.cost)
  return cost_;
}
inline void PearlAdvance::set_cost(::google::protobuf::uint32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.PearlAdvance.cost)
}

// required uint32 maximum = 2;
inline bool PearlAdvance::has_maximum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PearlAdvance::set_has_maximum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PearlAdvance::clear_has_maximum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PearlAdvance::clear_maximum() {
  maximum_ = 0u;
  clear_has_maximum();
}
inline ::google::protobuf::uint32 PearlAdvance::maximum() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.PearlAdvance.maximum)
  return maximum_;
}
inline void PearlAdvance::set_maximum(::google::protobuf::uint32 value) {
  set_has_maximum();
  maximum_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.PearlAdvance.maximum)
}

// repeated uint32 cond_eqid = 3;
inline int PearlAdvance::cond_eqid_size() const {
  return cond_eqid_.size();
}
inline void PearlAdvance::clear_cond_eqid() {
  cond_eqid_.Clear();
}
inline ::google::protobuf::uint32 PearlAdvance::cond_eqid(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.PearlAdvance.cond_eqid)
  return cond_eqid_.Get(index);
}
inline void PearlAdvance::set_cond_eqid(int index, ::google::protobuf::uint32 value) {
  cond_eqid_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigActivity.PearlAdvance.cond_eqid)
}
inline void PearlAdvance::add_cond_eqid(::google::protobuf::uint32 value) {
  cond_eqid_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigActivity.PearlAdvance.cond_eqid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PearlAdvance::cond_eqid() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.PearlAdvance.cond_eqid)
  return cond_eqid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PearlAdvance::mutable_cond_eqid() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.PearlAdvance.cond_eqid)
  return &cond_eqid_;
}

// required .RewardConfig.RewardItemCfg reward = 4;
inline bool PearlAdvance::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PearlAdvance::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PearlAdvance::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PearlAdvance::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& PearlAdvance::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.PearlAdvance.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* PearlAdvance::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.PearlAdvance.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* PearlAdvance::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void PearlAdvance::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.PearlAdvance.reward)
}

// -------------------------------------------------------------------

// UniqueKnowledgeDial

// required uint32 id = 1;
inline bool UniqueKnowledgeDial::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UniqueKnowledgeDial::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UniqueKnowledgeDial::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UniqueKnowledgeDial::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 UniqueKnowledgeDial::id() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.UniqueKnowledgeDial.id)
  return id_;
}
inline void UniqueKnowledgeDial::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.UniqueKnowledgeDial.id)
}

// required uint32 weight = 2;
inline bool UniqueKnowledgeDial::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UniqueKnowledgeDial::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UniqueKnowledgeDial::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UniqueKnowledgeDial::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 UniqueKnowledgeDial::weight() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.UniqueKnowledgeDial.weight)
  return weight_;
}
inline void UniqueKnowledgeDial::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.UniqueKnowledgeDial.weight)
}

// required .RewardConfig.RewardItemCfg item = 3;
inline bool UniqueKnowledgeDial::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UniqueKnowledgeDial::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UniqueKnowledgeDial::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UniqueKnowledgeDial::clear_item() {
  if (item_ != NULL) item_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_item();
}
inline const ::RewardConfig::RewardItemCfg& UniqueKnowledgeDial::item() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.UniqueKnowledgeDial.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::RewardConfig::RewardItemCfg* UniqueKnowledgeDial::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.UniqueKnowledgeDial.item)
  return item_;
}
inline ::RewardConfig::RewardItemCfg* UniqueKnowledgeDial::release_item() {
  clear_has_item();
  ::RewardConfig::RewardItemCfg* temp = item_;
  item_ = NULL;
  return temp;
}
inline void UniqueKnowledgeDial::set_allocated_item(::RewardConfig::RewardItemCfg* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.UniqueKnowledgeDial.item)
}

// -------------------------------------------------------------------

// SpriteVitalityItem

// required uint32 diamond = 1;
inline bool SpriteVitalityItem::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpriteVitalityItem::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpriteVitalityItem::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpriteVitalityItem::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 SpriteVitalityItem::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SpriteVitalityItem.diamond)
  return diamond_;
}
inline void SpriteVitalityItem::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.SpriteVitalityItem.diamond)
}

// required .RewardConfig.RewardItemCfg reward = 2;
inline bool SpriteVitalityItem::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpriteVitalityItem::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpriteVitalityItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpriteVitalityItem::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& SpriteVitalityItem::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SpriteVitalityItem.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* SpriteVitalityItem::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.SpriteVitalityItem.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* SpriteVitalityItem::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void SpriteVitalityItem::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.SpriteVitalityItem.reward)
}

// -------------------------------------------------------------------

// SmeltItem

// required uint32 eqid = 1;
inline bool SmeltItem::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmeltItem::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmeltItem::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmeltItem::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 SmeltItem::eqid() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SmeltItem.eqid)
  return eqid_;
}
inline void SmeltItem::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.SmeltItem.eqid)
}

// required uint32 cost = 2;
inline bool SmeltItem::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmeltItem::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmeltItem::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmeltItem::clear_cost() {
  cost_ = 0u;
  clear_has_cost();
}
inline ::google::protobuf::uint32 SmeltItem::cost() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SmeltItem.cost)
  return cost_;
}
inline void SmeltItem::set_cost(::google::protobuf::uint32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.SmeltItem.cost)
}

// required uint32 get = 3;
inline bool SmeltItem::has_get() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmeltItem::set_has_get() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmeltItem::clear_has_get() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmeltItem::clear_get() {
  get_ = 0u;
  clear_has_get();
}
inline ::google::protobuf::uint32 SmeltItem::get() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SmeltItem.get)
  return get_;
}
inline void SmeltItem::set_get(::google::protobuf::uint32 value) {
  set_has_get();
  get_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.SmeltItem.get)
}

// -------------------------------------------------------------------

// ShopItem

// required uint32 diamond = 1;
inline bool ShopItem::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShopItem::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShopItem::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShopItem::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 ShopItem::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ShopItem.diamond)
  return diamond_;
}
inline void ShopItem::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.ShopItem.diamond)
}

// required uint32 forgecost = 2;
inline bool ShopItem::has_forgecost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShopItem::set_has_forgecost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShopItem::clear_has_forgecost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShopItem::clear_forgecost() {
  forgecost_ = 0u;
  clear_has_forgecost();
}
inline ::google::protobuf::uint32 ShopItem::forgecost() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ShopItem.forgecost)
  return forgecost_;
}
inline void ShopItem::set_forgecost(::google::protobuf::uint32 value) {
  set_has_forgecost();
  forgecost_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.ShopItem.forgecost)
}

// required .RewardConfig.RewardItemCfg item = 3;
inline bool ShopItem::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShopItem::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShopItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShopItem::clear_item() {
  if (item_ != NULL) item_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_item();
}
inline const ::RewardConfig::RewardItemCfg& ShopItem::item() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ShopItem.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::RewardConfig::RewardItemCfg* ShopItem::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.ShopItem.item)
  return item_;
}
inline ::RewardConfig::RewardItemCfg* ShopItem::release_item() {
  clear_has_item();
  ::RewardConfig::RewardItemCfg* temp = item_;
  item_ = NULL;
  return temp;
}
inline void ShopItem::set_allocated_item(::RewardConfig::RewardItemCfg* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.ShopItem.item)
}

// -------------------------------------------------------------------

// ForgeSmelt

// required uint32 daily_limit = 1;
inline bool ForgeSmelt::has_daily_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForgeSmelt::set_has_daily_limit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForgeSmelt::clear_has_daily_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForgeSmelt::clear_daily_limit() {
  daily_limit_ = 0u;
  clear_has_daily_limit();
}
inline ::google::protobuf::uint32 ForgeSmelt::daily_limit() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ForgeSmelt.daily_limit)
  return daily_limit_;
}
inline void ForgeSmelt::set_daily_limit(::google::protobuf::uint32 value) {
  set_has_daily_limit();
  daily_limit_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.ForgeSmelt.daily_limit)
}

// required uint32 forge_limit = 2;
inline bool ForgeSmelt::has_forge_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForgeSmelt::set_has_forge_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForgeSmelt::clear_has_forge_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForgeSmelt::clear_forge_limit() {
  forge_limit_ = 0u;
  clear_has_forge_limit();
}
inline ::google::protobuf::uint32 ForgeSmelt::forge_limit() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ForgeSmelt.forge_limit)
  return forge_limit_;
}
inline void ForgeSmelt::set_forge_limit(::google::protobuf::uint32 value) {
  set_has_forge_limit();
  forge_limit_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.ForgeSmelt.forge_limit)
}

// repeated .ConfigActivity.SmeltItem smelt = 3;
inline int ForgeSmelt::smelt_size() const {
  return smelt_.size();
}
inline void ForgeSmelt::clear_smelt() {
  smelt_.Clear();
}
inline const ::ConfigActivity::SmeltItem& ForgeSmelt::smelt(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ForgeSmelt.smelt)
  return smelt_.Get(index);
}
inline ::ConfigActivity::SmeltItem* ForgeSmelt::mutable_smelt(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.ForgeSmelt.smelt)
  return smelt_.Mutable(index);
}
inline ::ConfigActivity::SmeltItem* ForgeSmelt::add_smelt() {
  // @@protoc_insertion_point(field_add:ConfigActivity.ForgeSmelt.smelt)
  return smelt_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SmeltItem >&
ForgeSmelt::smelt() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.ForgeSmelt.smelt)
  return smelt_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SmeltItem >*
ForgeSmelt::mutable_smelt() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.ForgeSmelt.smelt)
  return &smelt_;
}

// repeated .ConfigActivity.ShopItem shop = 4;
inline int ForgeSmelt::shop_size() const {
  return shop_.size();
}
inline void ForgeSmelt::clear_shop() {
  shop_.Clear();
}
inline const ::ConfigActivity::ShopItem& ForgeSmelt::shop(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ForgeSmelt.shop)
  return shop_.Get(index);
}
inline ::ConfigActivity::ShopItem* ForgeSmelt::mutable_shop(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.ForgeSmelt.shop)
  return shop_.Mutable(index);
}
inline ::ConfigActivity::ShopItem* ForgeSmelt::add_shop() {
  // @@protoc_insertion_point(field_add:ConfigActivity.ForgeSmelt.shop)
  return shop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ShopItem >&
ForgeSmelt::shop() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.ForgeSmelt.shop)
  return shop_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ShopItem >*
ForgeSmelt::mutable_shop() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.ForgeSmelt.shop)
  return &shop_;
}

// -------------------------------------------------------------------

// HeroItem

// required uint32 id = 1;
inline bool HeroItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 HeroItem::id() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HeroItem.id)
  return id_;
}
inline void HeroItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HeroItem.id)
}

// required uint32 weight = 2;
inline bool HeroItem::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroItem::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroItem::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroItem::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 HeroItem::weight() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HeroItem.weight)
  return weight_;
}
inline void HeroItem::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HeroItem.weight)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool HeroItem::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroItem::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroItem::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& HeroItem::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HeroItem.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* HeroItem::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.HeroItem.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* HeroItem::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void HeroItem::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.HeroItem.reward)
}

// -------------------------------------------------------------------

// HeroDial

// required uint32 per = 1;
inline bool HeroDial::has_per() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroDial::set_has_per() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroDial::clear_has_per() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroDial::clear_per() {
  per_ = 0u;
  clear_has_per();
}
inline ::google::protobuf::uint32 HeroDial::per() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HeroDial.per)
  return per_;
}
inline void HeroDial::set_per(::google::protobuf::uint32 value) {
  set_has_per();
  per_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HeroDial.per)
}

// repeated .ConfigActivity.HeroItem heroes = 2;
inline int HeroDial::heroes_size() const {
  return heroes_.size();
}
inline void HeroDial::clear_heroes() {
  heroes_.Clear();
}
inline const ::ConfigActivity::HeroItem& HeroDial::heroes(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HeroDial.heroes)
  return heroes_.Get(index);
}
inline ::ConfigActivity::HeroItem* HeroDial::mutable_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.HeroDial.heroes)
  return heroes_.Mutable(index);
}
inline ::ConfigActivity::HeroItem* HeroDial::add_heroes() {
  // @@protoc_insertion_point(field_add:ConfigActivity.HeroDial.heroes)
  return heroes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HeroItem >&
HeroDial::heroes() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.HeroDial.heroes)
  return heroes_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HeroItem >*
HeroDial::mutable_heroes() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.HeroDial.heroes)
  return &heroes_;
}

// required uint32 limit = 3;
inline bool HeroDial::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroDial::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroDial::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroDial::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 HeroDial::limit() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HeroDial.limit)
  return limit_;
}
inline void HeroDial::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HeroDial.limit)
}

// -------------------------------------------------------------------

// BlackGoldEnhance

// required uint32 first = 1;
inline bool BlackGoldEnhance::has_first() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlackGoldEnhance::set_has_first() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlackGoldEnhance::clear_has_first() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlackGoldEnhance::clear_first() {
  first_ = 0u;
  clear_has_first();
}
inline ::google::protobuf::uint32 BlackGoldEnhance::first() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BlackGoldEnhance.first)
  return first_;
}
inline void BlackGoldEnhance::set_first(::google::protobuf::uint32 value) {
  set_has_first();
  first_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.BlackGoldEnhance.first)
}

// required uint32 limit = 2;
inline bool BlackGoldEnhance::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlackGoldEnhance::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlackGoldEnhance::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlackGoldEnhance::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 BlackGoldEnhance::limit() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BlackGoldEnhance.limit)
  return limit_;
}
inline void BlackGoldEnhance::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.BlackGoldEnhance.limit)
}

// required uint32 start = 3;
inline bool BlackGoldEnhance::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlackGoldEnhance::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlackGoldEnhance::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlackGoldEnhance::clear_start() {
  start_ = 0u;
  clear_has_start();
}
inline ::google::protobuf::uint32 BlackGoldEnhance::start() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BlackGoldEnhance.start)
  return start_;
}
inline void BlackGoldEnhance::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.BlackGoldEnhance.start)
}

// required uint32 accumulate = 4;
inline bool BlackGoldEnhance::has_accumulate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlackGoldEnhance::set_has_accumulate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlackGoldEnhance::clear_has_accumulate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlackGoldEnhance::clear_accumulate() {
  accumulate_ = 0u;
  clear_has_accumulate();
}
inline ::google::protobuf::uint32 BlackGoldEnhance::accumulate() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BlackGoldEnhance.accumulate)
  return accumulate_;
}
inline void BlackGoldEnhance::set_accumulate(::google::protobuf::uint32 value) {
  set_has_accumulate();
  accumulate_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.BlackGoldEnhance.accumulate)
}

// repeated uint32 condition = 5;
inline int BlackGoldEnhance::condition_size() const {
  return condition_.size();
}
inline void BlackGoldEnhance::clear_condition() {
  condition_.Clear();
}
inline ::google::protobuf::uint32 BlackGoldEnhance::condition(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BlackGoldEnhance.condition)
  return condition_.Get(index);
}
inline void BlackGoldEnhance::set_condition(int index, ::google::protobuf::uint32 value) {
  condition_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigActivity.BlackGoldEnhance.condition)
}
inline void BlackGoldEnhance::add_condition(::google::protobuf::uint32 value) {
  condition_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigActivity.BlackGoldEnhance.condition)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BlackGoldEnhance::condition() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.BlackGoldEnhance.condition)
  return condition_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BlackGoldEnhance::mutable_condition() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.BlackGoldEnhance.condition)
  return &condition_;
}

// required .RewardConfig.RewardItemCfg reward = 6;
inline bool BlackGoldEnhance::has_reward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlackGoldEnhance::set_has_reward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlackGoldEnhance::clear_has_reward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlackGoldEnhance::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& BlackGoldEnhance::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BlackGoldEnhance.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* BlackGoldEnhance::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.BlackGoldEnhance.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* BlackGoldEnhance::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void BlackGoldEnhance::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.BlackGoldEnhance.reward)
}

// -------------------------------------------------------------------

// KingdomWar

// required uint32 diamond = 1;
inline bool KingdomWar::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KingdomWar::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KingdomWar::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KingdomWar::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 KingdomWar::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KingdomWar.diamond)
  return diamond_;
}
inline void KingdomWar::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.KingdomWar.diamond)
}

// required .RewardConfig.RewardItemCfg reward = 2;
inline bool KingdomWar::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KingdomWar::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KingdomWar::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KingdomWar::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& KingdomWar::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KingdomWar.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* KingdomWar::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KingdomWar.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* KingdomWar::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void KingdomWar::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.KingdomWar.reward)
}

// -------------------------------------------------------------------

// RewardItem

// required uint32 price = 1;
inline bool RewardItem::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardItem::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardItem::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardItem::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 RewardItem::price() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RewardItem.price)
  return price_;
}
inline void RewardItem::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.RewardItem.price)
}

// required .RewardConfig.RewardItemCfg reward = 2;
inline bool RewardItem::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardItem::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardItem::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& RewardItem::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RewardItem.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* RewardItem::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.RewardItem.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* RewardItem::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void RewardItem::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.RewardItem.reward)
}

// -------------------------------------------------------------------

// OneDiamondWelfare

// required uint32 diamond = 1;
inline bool OneDiamondWelfare::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneDiamondWelfare::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneDiamondWelfare::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneDiamondWelfare::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 OneDiamondWelfare::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.OneDiamondWelfare.diamond)
  return diamond_;
}
inline void OneDiamondWelfare::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.OneDiamondWelfare.diamond)
}

// repeated .ConfigActivity.RewardItem items = 2;
inline int OneDiamondWelfare::items_size() const {
  return items_.size();
}
inline void OneDiamondWelfare::clear_items() {
  items_.Clear();
}
inline const ::ConfigActivity::RewardItem& OneDiamondWelfare::items(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.OneDiamondWelfare.items)
  return items_.Get(index);
}
inline ::ConfigActivity::RewardItem* OneDiamondWelfare::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.OneDiamondWelfare.items)
  return items_.Mutable(index);
}
inline ::ConfigActivity::RewardItem* OneDiamondWelfare::add_items() {
  // @@protoc_insertion_point(field_add:ConfigActivity.OneDiamondWelfare.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem >&
OneDiamondWelfare::items() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.OneDiamondWelfare.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem >*
OneDiamondWelfare::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.OneDiamondWelfare.items)
  return &items_;
}

// -------------------------------------------------------------------

// FortunePacks

// required .RewardConfig.RewardItemCfg extra_reward = 1;
inline bool FortunePacks::has_extra_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FortunePacks::set_has_extra_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FortunePacks::clear_has_extra_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FortunePacks::clear_extra_reward() {
  if (extra_reward_ != NULL) extra_reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_extra_reward();
}
inline const ::RewardConfig::RewardItemCfg& FortunePacks::extra_reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.FortunePacks.extra_reward)
  return extra_reward_ != NULL ? *extra_reward_ : *default_instance_->extra_reward_;
}
inline ::RewardConfig::RewardItemCfg* FortunePacks::mutable_extra_reward() {
  set_has_extra_reward();
  if (extra_reward_ == NULL) extra_reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.FortunePacks.extra_reward)
  return extra_reward_;
}
inline ::RewardConfig::RewardItemCfg* FortunePacks::release_extra_reward() {
  clear_has_extra_reward();
  ::RewardConfig::RewardItemCfg* temp = extra_reward_;
  extra_reward_ = NULL;
  return temp;
}
inline void FortunePacks::set_allocated_extra_reward(::RewardConfig::RewardItemCfg* extra_reward) {
  delete extra_reward_;
  extra_reward_ = extra_reward;
  if (extra_reward) {
    set_has_extra_reward();
  } else {
    clear_has_extra_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.FortunePacks.extra_reward)
}

// repeated .ConfigActivity.RewardItem goods = 2;
inline int FortunePacks::goods_size() const {
  return goods_.size();
}
inline void FortunePacks::clear_goods() {
  goods_.Clear();
}
inline const ::ConfigActivity::RewardItem& FortunePacks::goods(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.FortunePacks.goods)
  return goods_.Get(index);
}
inline ::ConfigActivity::RewardItem* FortunePacks::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.FortunePacks.goods)
  return goods_.Mutable(index);
}
inline ::ConfigActivity::RewardItem* FortunePacks::add_goods() {
  // @@protoc_insertion_point(field_add:ConfigActivity.FortunePacks.goods)
  return goods_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem >&
FortunePacks::goods() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.FortunePacks.goods)
  return goods_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RewardItem >*
FortunePacks::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.FortunePacks.goods)
  return &goods_;
}

// -------------------------------------------------------------------

// SevenDayPacks

// required .RewardConfig.RewardItemCfg reward = 1;
inline bool SevenDayPacks::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SevenDayPacks::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SevenDayPacks::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SevenDayPacks::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& SevenDayPacks::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SevenDayPacks.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* SevenDayPacks::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.SevenDayPacks.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* SevenDayPacks::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void SevenDayPacks::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.SevenDayPacks.reward)
}

// -------------------------------------------------------------------

// ChargeKey

// required uint32 diamond = 1;
inline bool ChargeKey::has_diamond() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargeKey::set_has_diamond() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargeKey::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargeKey::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 ChargeKey::diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ChargeKey.diamond)
  return diamond_;
}
inline void ChargeKey::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.ChargeKey.diamond)
}

// required uint32 keynum = 2;
inline bool ChargeKey::has_keynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChargeKey::set_has_keynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChargeKey::clear_has_keynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChargeKey::clear_keynum() {
  keynum_ = 0u;
  clear_has_keynum();
}
inline ::google::protobuf::uint32 ChargeKey::keynum() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ChargeKey.keynum)
  return keynum_;
}
inline void ChargeKey::set_keynum(::google::protobuf::uint32 value) {
  set_has_keynum();
  keynum_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.ChargeKey.keynum)
}

// -------------------------------------------------------------------

// StuffItem

// required uint32 costkey = 1;
inline bool StuffItem::has_costkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StuffItem::set_has_costkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StuffItem::clear_has_costkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StuffItem::clear_costkey() {
  costkey_ = 0u;
  clear_has_costkey();
}
inline ::google::protobuf::uint32 StuffItem::costkey() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.StuffItem.costkey)
  return costkey_;
}
inline void StuffItem::set_costkey(::google::protobuf::uint32 value) {
  set_has_costkey();
  costkey_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.StuffItem.costkey)
}

// required uint32 limit = 2;
inline bool StuffItem::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StuffItem::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StuffItem::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StuffItem::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 StuffItem::limit() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.StuffItem.limit)
  return limit_;
}
inline void StuffItem::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.StuffItem.limit)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool StuffItem::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StuffItem::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StuffItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StuffItem::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& StuffItem::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.StuffItem.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* StuffItem::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.StuffItem.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* StuffItem::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void StuffItem::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.StuffItem.reward)
}

// -------------------------------------------------------------------

// KeyLuxuryGift

// repeated .ConfigActivity.ChargeKey charge_key = 1;
inline int KeyLuxuryGift::charge_key_size() const {
  return charge_key_.size();
}
inline void KeyLuxuryGift::clear_charge_key() {
  charge_key_.Clear();
}
inline const ::ConfigActivity::ChargeKey& KeyLuxuryGift::charge_key(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KeyLuxuryGift.charge_key)
  return charge_key_.Get(index);
}
inline ::ConfigActivity::ChargeKey* KeyLuxuryGift::mutable_charge_key(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KeyLuxuryGift.charge_key)
  return charge_key_.Mutable(index);
}
inline ::ConfigActivity::ChargeKey* KeyLuxuryGift::add_charge_key() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KeyLuxuryGift.charge_key)
  return charge_key_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ChargeKey >&
KeyLuxuryGift::charge_key() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KeyLuxuryGift.charge_key)
  return charge_key_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ChargeKey >*
KeyLuxuryGift::mutable_charge_key() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KeyLuxuryGift.charge_key)
  return &charge_key_;
}

// repeated .ConfigActivity.StuffItem stuff_items = 2;
inline int KeyLuxuryGift::stuff_items_size() const {
  return stuff_items_.size();
}
inline void KeyLuxuryGift::clear_stuff_items() {
  stuff_items_.Clear();
}
inline const ::ConfigActivity::StuffItem& KeyLuxuryGift::stuff_items(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KeyLuxuryGift.stuff_items)
  return stuff_items_.Get(index);
}
inline ::ConfigActivity::StuffItem* KeyLuxuryGift::mutable_stuff_items(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KeyLuxuryGift.stuff_items)
  return stuff_items_.Mutable(index);
}
inline ::ConfigActivity::StuffItem* KeyLuxuryGift::add_stuff_items() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KeyLuxuryGift.stuff_items)
  return stuff_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::StuffItem >&
KeyLuxuryGift::stuff_items() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KeyLuxuryGift.stuff_items)
  return stuff_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::StuffItem >*
KeyLuxuryGift::mutable_stuff_items() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KeyLuxuryGift.stuff_items)
  return &stuff_items_;
}

// -------------------------------------------------------------------

// ConsumeGiftItem

// required uint32 consume = 1;
inline bool ConsumeGiftItem::has_consume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConsumeGiftItem::set_has_consume() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConsumeGiftItem::clear_has_consume() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConsumeGiftItem::clear_consume() {
  consume_ = 0u;
  clear_has_consume();
}
inline ::google::protobuf::uint32 ConsumeGiftItem::consume() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ConsumeGiftItem.consume)
  return consume_;
}
inline void ConsumeGiftItem::set_consume(::google::protobuf::uint32 value) {
  set_has_consume();
  consume_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.ConsumeGiftItem.consume)
}

// required .RewardConfig.RewardItemCfg reward = 2;
inline bool ConsumeGiftItem::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConsumeGiftItem::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConsumeGiftItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConsumeGiftItem::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& ConsumeGiftItem::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ConsumeGiftItem.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* ConsumeGiftItem::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.ConsumeGiftItem.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* ConsumeGiftItem::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void ConsumeGiftItem::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.ConsumeGiftItem.reward)
}

// -------------------------------------------------------------------

// EnjoySmallGiftReward

// repeated .ConfigActivity.DiamondReward charge_gift = 1;
inline int EnjoySmallGiftReward::charge_gift_size() const {
  return charge_gift_.size();
}
inline void EnjoySmallGiftReward::clear_charge_gift() {
  charge_gift_.Clear();
}
inline const ::ConfigActivity::DiamondReward& EnjoySmallGiftReward::charge_gift(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.EnjoySmallGiftReward.charge_gift)
  return charge_gift_.Get(index);
}
inline ::ConfigActivity::DiamondReward* EnjoySmallGiftReward::mutable_charge_gift(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.EnjoySmallGiftReward.charge_gift)
  return charge_gift_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* EnjoySmallGiftReward::add_charge_gift() {
  // @@protoc_insertion_point(field_add:ConfigActivity.EnjoySmallGiftReward.charge_gift)
  return charge_gift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
EnjoySmallGiftReward::charge_gift() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.EnjoySmallGiftReward.charge_gift)
  return charge_gift_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
EnjoySmallGiftReward::mutable_charge_gift() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.EnjoySmallGiftReward.charge_gift)
  return &charge_gift_;
}

// repeated .ConfigActivity.ConsumeGiftItem consume_gift = 2;
inline int EnjoySmallGiftReward::consume_gift_size() const {
  return consume_gift_.size();
}
inline void EnjoySmallGiftReward::clear_consume_gift() {
  consume_gift_.Clear();
}
inline const ::ConfigActivity::ConsumeGiftItem& EnjoySmallGiftReward::consume_gift(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.EnjoySmallGiftReward.consume_gift)
  return consume_gift_.Get(index);
}
inline ::ConfigActivity::ConsumeGiftItem* EnjoySmallGiftReward::mutable_consume_gift(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.EnjoySmallGiftReward.consume_gift)
  return consume_gift_.Mutable(index);
}
inline ::ConfigActivity::ConsumeGiftItem* EnjoySmallGiftReward::add_consume_gift() {
  // @@protoc_insertion_point(field_add:ConfigActivity.EnjoySmallGiftReward.consume_gift)
  return consume_gift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ConsumeGiftItem >&
EnjoySmallGiftReward::consume_gift() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.EnjoySmallGiftReward.consume_gift)
  return consume_gift_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::ConsumeGiftItem >*
EnjoySmallGiftReward::mutable_consume_gift() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.EnjoySmallGiftReward.consume_gift)
  return &consume_gift_;
}

// -------------------------------------------------------------------

// TurnTableItem

// required uint32 id = 1;
inline bool TurnTableItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurnTableItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurnTableItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurnTableItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TurnTableItem::id() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.TurnTableItem.id)
  return id_;
}
inline void TurnTableItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.TurnTableItem.id)
}

// required uint32 weight = 2;
inline bool TurnTableItem::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurnTableItem::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TurnTableItem::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TurnTableItem::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 TurnTableItem::weight() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.TurnTableItem.weight)
  return weight_;
}
inline void TurnTableItem::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.TurnTableItem.weight)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool TurnTableItem::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TurnTableItem::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TurnTableItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TurnTableItem::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& TurnTableItem::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.TurnTableItem.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* TurnTableItem::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.TurnTableItem.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* TurnTableItem::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void TurnTableItem::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.TurnTableItem.reward)
}

// -------------------------------------------------------------------

// LuckyGiftItem

// repeated .ConfigActivity.TurnTableItem items = 1;
inline int LuckyGiftItem::items_size() const {
  return items_.size();
}
inline void LuckyGiftItem::clear_items() {
  items_.Clear();
}
inline const ::ConfigActivity::TurnTableItem& LuckyGiftItem::items(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.LuckyGiftItem.items)
  return items_.Get(index);
}
inline ::ConfigActivity::TurnTableItem* LuckyGiftItem::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.LuckyGiftItem.items)
  return items_.Mutable(index);
}
inline ::ConfigActivity::TurnTableItem* LuckyGiftItem::add_items() {
  // @@protoc_insertion_point(field_add:ConfigActivity.LuckyGiftItem.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TurnTableItem >&
LuckyGiftItem::items() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.LuckyGiftItem.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TurnTableItem >*
LuckyGiftItem::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.LuckyGiftItem.items)
  return &items_;
}

// -------------------------------------------------------------------

// LuckyGift

// required uint32 keycost = 1;
inline bool LuckyGift::has_keycost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuckyGift::set_has_keycost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuckyGift::clear_has_keycost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuckyGift::clear_keycost() {
  keycost_ = 0u;
  clear_has_keycost();
}
inline ::google::protobuf::uint32 LuckyGift::keycost() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.LuckyGift.keycost)
  return keycost_;
}
inline void LuckyGift::set_keycost(::google::protobuf::uint32 value) {
  set_has_keycost();
  keycost_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.LuckyGift.keycost)
}

// required uint32 pointcost = 2;
inline bool LuckyGift::has_pointcost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuckyGift::set_has_pointcost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuckyGift::clear_has_pointcost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuckyGift::clear_pointcost() {
  pointcost_ = 0u;
  clear_has_pointcost();
}
inline ::google::protobuf::uint32 LuckyGift::pointcost() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.LuckyGift.pointcost)
  return pointcost_;
}
inline void LuckyGift::set_pointcost(::google::protobuf::uint32 value) {
  set_has_pointcost();
  pointcost_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.LuckyGift.pointcost)
}

// repeated .ConfigActivity.LuckyGiftItem stuff_items = 3;
inline int LuckyGift::stuff_items_size() const {
  return stuff_items_.size();
}
inline void LuckyGift::clear_stuff_items() {
  stuff_items_.Clear();
}
inline const ::ConfigActivity::LuckyGiftItem& LuckyGift::stuff_items(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.LuckyGift.stuff_items)
  return stuff_items_.Get(index);
}
inline ::ConfigActivity::LuckyGiftItem* LuckyGift::mutable_stuff_items(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.LuckyGift.stuff_items)
  return stuff_items_.Mutable(index);
}
inline ::ConfigActivity::LuckyGiftItem* LuckyGift::add_stuff_items() {
  // @@protoc_insertion_point(field_add:ConfigActivity.LuckyGift.stuff_items)
  return stuff_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::LuckyGiftItem >&
LuckyGift::stuff_items() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.LuckyGift.stuff_items)
  return stuff_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::LuckyGiftItem >*
LuckyGift::mutable_stuff_items() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.LuckyGift.stuff_items)
  return &stuff_items_;
}

// -------------------------------------------------------------------

// NewYearActivity

// repeated .ConfigActivity.DiamondReward charge_reward = 1;
inline int NewYearActivity::charge_reward_size() const {
  return charge_reward_.size();
}
inline void NewYearActivity::clear_charge_reward() {
  charge_reward_.Clear();
}
inline const ::ConfigActivity::DiamondReward& NewYearActivity::charge_reward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.NewYearActivity.charge_reward)
  return charge_reward_.Get(index);
}
inline ::ConfigActivity::DiamondReward* NewYearActivity::mutable_charge_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.NewYearActivity.charge_reward)
  return charge_reward_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* NewYearActivity::add_charge_reward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.NewYearActivity.charge_reward)
  return charge_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
NewYearActivity::charge_reward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.NewYearActivity.charge_reward)
  return charge_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
NewYearActivity::mutable_charge_reward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.NewYearActivity.charge_reward)
  return &charge_reward_;
}

// repeated .ConfigActivity.DiamondRewardLimit buy_items = 2;
inline int NewYearActivity::buy_items_size() const {
  return buy_items_.size();
}
inline void NewYearActivity::clear_buy_items() {
  buy_items_.Clear();
}
inline const ::ConfigActivity::DiamondRewardLimit& NewYearActivity::buy_items(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.NewYearActivity.buy_items)
  return buy_items_.Get(index);
}
inline ::ConfigActivity::DiamondRewardLimit* NewYearActivity::mutable_buy_items(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.NewYearActivity.buy_items)
  return buy_items_.Mutable(index);
}
inline ::ConfigActivity::DiamondRewardLimit* NewYearActivity::add_buy_items() {
  // @@protoc_insertion_point(field_add:ConfigActivity.NewYearActivity.buy_items)
  return buy_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondRewardLimit >&
NewYearActivity::buy_items() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.NewYearActivity.buy_items)
  return buy_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondRewardLimit >*
NewYearActivity::mutable_buy_items() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.NewYearActivity.buy_items)
  return &buy_items_;
}

// required .RewardConfig.RewardItemCfg online_reward = 3;
inline bool NewYearActivity::has_online_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewYearActivity::set_has_online_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewYearActivity::clear_has_online_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewYearActivity::clear_online_reward() {
  if (online_reward_ != NULL) online_reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_online_reward();
}
inline const ::RewardConfig::RewardItemCfg& NewYearActivity::online_reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.NewYearActivity.online_reward)
  return online_reward_ != NULL ? *online_reward_ : *default_instance_->online_reward_;
}
inline ::RewardConfig::RewardItemCfg* NewYearActivity::mutable_online_reward() {
  set_has_online_reward();
  if (online_reward_ == NULL) online_reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.NewYearActivity.online_reward)
  return online_reward_;
}
inline ::RewardConfig::RewardItemCfg* NewYearActivity::release_online_reward() {
  clear_has_online_reward();
  ::RewardConfig::RewardItemCfg* temp = online_reward_;
  online_reward_ = NULL;
  return temp;
}
inline void NewYearActivity::set_allocated_online_reward(::RewardConfig::RewardItemCfg* online_reward) {
  delete online_reward_;
  online_reward_ = online_reward;
  if (online_reward) {
    set_has_online_reward();
  } else {
    clear_has_online_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.NewYearActivity.online_reward)
}

// -------------------------------------------------------------------

// ChinaDayActivity

// repeated .ConfigActivity.DiamondReward charge_reward = 1;
inline int ChinaDayActivity::charge_reward_size() const {
  return charge_reward_.size();
}
inline void ChinaDayActivity::clear_charge_reward() {
  charge_reward_.Clear();
}
inline const ::ConfigActivity::DiamondReward& ChinaDayActivity::charge_reward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ChinaDayActivity.charge_reward)
  return charge_reward_.Get(index);
}
inline ::ConfigActivity::DiamondReward* ChinaDayActivity::mutable_charge_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.ChinaDayActivity.charge_reward)
  return charge_reward_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* ChinaDayActivity::add_charge_reward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.ChinaDayActivity.charge_reward)
  return charge_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
ChinaDayActivity::charge_reward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.ChinaDayActivity.charge_reward)
  return charge_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
ChinaDayActivity::mutable_charge_reward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.ChinaDayActivity.charge_reward)
  return &charge_reward_;
}

// required .RewardConfig.RewardItemCfg everyday_reward = 2;
inline bool ChinaDayActivity::has_everyday_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChinaDayActivity::set_has_everyday_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChinaDayActivity::clear_has_everyday_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChinaDayActivity::clear_everyday_reward() {
  if (everyday_reward_ != NULL) everyday_reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_everyday_reward();
}
inline const ::RewardConfig::RewardItemCfg& ChinaDayActivity::everyday_reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ChinaDayActivity.everyday_reward)
  return everyday_reward_ != NULL ? *everyday_reward_ : *default_instance_->everyday_reward_;
}
inline ::RewardConfig::RewardItemCfg* ChinaDayActivity::mutable_everyday_reward() {
  set_has_everyday_reward();
  if (everyday_reward_ == NULL) everyday_reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.ChinaDayActivity.everyday_reward)
  return everyday_reward_;
}
inline ::RewardConfig::RewardItemCfg* ChinaDayActivity::release_everyday_reward() {
  clear_has_everyday_reward();
  ::RewardConfig::RewardItemCfg* temp = everyday_reward_;
  everyday_reward_ = NULL;
  return temp;
}
inline void ChinaDayActivity::set_allocated_everyday_reward(::RewardConfig::RewardItemCfg* everyday_reward) {
  delete everyday_reward_;
  everyday_reward_ = everyday_reward;
  if (everyday_reward) {
    set_has_everyday_reward();
  } else {
    clear_has_everyday_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.ChinaDayActivity.everyday_reward)
}

// required .RewardConfig.RewardItemCfg online_reward = 3;
inline bool ChinaDayActivity::has_online_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChinaDayActivity::set_has_online_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChinaDayActivity::clear_has_online_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChinaDayActivity::clear_online_reward() {
  if (online_reward_ != NULL) online_reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_online_reward();
}
inline const ::RewardConfig::RewardItemCfg& ChinaDayActivity::online_reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.ChinaDayActivity.online_reward)
  return online_reward_ != NULL ? *online_reward_ : *default_instance_->online_reward_;
}
inline ::RewardConfig::RewardItemCfg* ChinaDayActivity::mutable_online_reward() {
  set_has_online_reward();
  if (online_reward_ == NULL) online_reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.ChinaDayActivity.online_reward)
  return online_reward_;
}
inline ::RewardConfig::RewardItemCfg* ChinaDayActivity::release_online_reward() {
  clear_has_online_reward();
  ::RewardConfig::RewardItemCfg* temp = online_reward_;
  online_reward_ = NULL;
  return temp;
}
inline void ChinaDayActivity::set_allocated_online_reward(::RewardConfig::RewardItemCfg* online_reward) {
  delete online_reward_;
  online_reward_ = online_reward;
  if (online_reward) {
    set_has_online_reward();
  } else {
    clear_has_online_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.ChinaDayActivity.online_reward)
}

// -------------------------------------------------------------------

// PayOptionalActivity

// repeated .ConfigActivity.DiamondMoreReward optional_reward = 1;
inline int PayOptionalActivity::optional_reward_size() const {
  return optional_reward_.size();
}
inline void PayOptionalActivity::clear_optional_reward() {
  optional_reward_.Clear();
}
inline const ::ConfigActivity::DiamondMoreReward& PayOptionalActivity::optional_reward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.PayOptionalActivity.optional_reward)
  return optional_reward_.Get(index);
}
inline ::ConfigActivity::DiamondMoreReward* PayOptionalActivity::mutable_optional_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.PayOptionalActivity.optional_reward)
  return optional_reward_.Mutable(index);
}
inline ::ConfigActivity::DiamondMoreReward* PayOptionalActivity::add_optional_reward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.PayOptionalActivity.optional_reward)
  return optional_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondMoreReward >&
PayOptionalActivity::optional_reward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.PayOptionalActivity.optional_reward)
  return optional_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondMoreReward >*
PayOptionalActivity::mutable_optional_reward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.PayOptionalActivity.optional_reward)
  return &optional_reward_;
}

// -------------------------------------------------------------------

// MsgSoulLevel

// required uint32 lv = 1;
inline bool MsgSoulLevel::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSoulLevel::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSoulLevel::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSoulLevel::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 MsgSoulLevel::lv() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgSoulLevel.lv)
  return lv_;
}
inline void MsgSoulLevel::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgSoulLevel.lv)
}

// required .RewardConfig.RewardItemCfg reward = 2;
inline bool MsgSoulLevel::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSoulLevel::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSoulLevel::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSoulLevel::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& MsgSoulLevel::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgSoulLevel.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgSoulLevel::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.MsgSoulLevel.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgSoulLevel::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void MsgSoulLevel::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.MsgSoulLevel.reward)
}

// -------------------------------------------------------------------

// MsgSoulGrowth

// required uint32 growth = 1;
inline bool MsgSoulGrowth::has_growth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgSoulGrowth::set_has_growth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgSoulGrowth::clear_has_growth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgSoulGrowth::clear_growth() {
  growth_ = 0u;
  clear_has_growth();
}
inline ::google::protobuf::uint32 MsgSoulGrowth::growth() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgSoulGrowth.growth)
  return growth_;
}
inline void MsgSoulGrowth::set_growth(::google::protobuf::uint32 value) {
  set_has_growth();
  growth_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgSoulGrowth.growth)
}

// required .RewardConfig.RewardItemCfg reward = 2;
inline bool MsgSoulGrowth::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSoulGrowth::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSoulGrowth::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSoulGrowth::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& MsgSoulGrowth::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgSoulGrowth.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgSoulGrowth::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.MsgSoulGrowth.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgSoulGrowth::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void MsgSoulGrowth::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.MsgSoulGrowth.reward)
}

// -------------------------------------------------------------------

// MsgWuhun

// required uint32 partcount = 1;
inline bool MsgWuhun::has_partcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgWuhun::set_has_partcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgWuhun::clear_has_partcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgWuhun::clear_partcount() {
  partcount_ = 0u;
  clear_has_partcount();
}
inline ::google::protobuf::uint32 MsgWuhun::partcount() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgWuhun.partcount)
  return partcount_;
}
inline void MsgWuhun::set_partcount(::google::protobuf::uint32 value) {
  set_has_partcount();
  partcount_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgWuhun.partcount)
}

// required uint32 partlv = 2;
inline bool MsgWuhun::has_partlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgWuhun::set_has_partlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgWuhun::clear_has_partlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgWuhun::clear_partlv() {
  partlv_ = 0u;
  clear_has_partlv();
}
inline ::google::protobuf::uint32 MsgWuhun::partlv() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgWuhun.partlv)
  return partlv_;
}
inline void MsgWuhun::set_partlv(::google::protobuf::uint32 value) {
  set_has_partlv();
  partlv_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgWuhun.partlv)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool MsgWuhun::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgWuhun::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgWuhun::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgWuhun::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& MsgWuhun::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgWuhun.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgWuhun::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.MsgWuhun.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgWuhun::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void MsgWuhun::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.MsgWuhun.reward)
}

// -------------------------------------------------------------------

// MsgJuexue

// required uint32 quality = 1;
inline bool MsgJuexue::has_quality() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgJuexue::set_has_quality() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgJuexue::clear_has_quality() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgJuexue::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 MsgJuexue::quality() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgJuexue.quality)
  return quality_;
}
inline void MsgJuexue::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgJuexue.quality)
}

// required uint32 count = 2;
inline bool MsgJuexue::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgJuexue::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgJuexue::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgJuexue::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 MsgJuexue::count() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgJuexue.count)
  return count_;
}
inline void MsgJuexue::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgJuexue.count)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool MsgJuexue::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgJuexue::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgJuexue::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgJuexue::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& MsgJuexue::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgJuexue.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgJuexue::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.MsgJuexue.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgJuexue::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void MsgJuexue::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.MsgJuexue.reward)
}

// -------------------------------------------------------------------

// MsgStar

// required uint32 star = 1;
inline bool MsgStar::has_star() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgStar::set_has_star() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgStar::clear_has_star() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgStar::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 MsgStar::star() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgStar.star)
  return star_;
}
inline void MsgStar::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgStar.star)
}

// required uint32 type = 2;
inline bool MsgStar::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgStar::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgStar::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgStar::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 MsgStar::type() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgStar.type)
  return type_;
}
inline void MsgStar::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgStar.type)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool MsgStar::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgStar::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgStar::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgStar::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& MsgStar::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgStar.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgStar::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.MsgStar.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgStar::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void MsgStar::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.MsgStar.reward)
}

// -------------------------------------------------------------------

// MsgHeaven

// required uint32 jie = 1;
inline bool MsgHeaven::has_jie() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHeaven::set_has_jie() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHeaven::clear_has_jie() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHeaven::clear_jie() {
  jie_ = 0u;
  clear_has_jie();
}
inline ::google::protobuf::uint32 MsgHeaven::jie() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgHeaven.jie)
  return jie_;
}
inline void MsgHeaven::set_jie(::google::protobuf::uint32 value) {
  set_has_jie();
  jie_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgHeaven.jie)
}

// required uint32 ceng = 2;
inline bool MsgHeaven::has_ceng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHeaven::set_has_ceng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHeaven::clear_has_ceng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHeaven::clear_ceng() {
  ceng_ = 0u;
  clear_has_ceng();
}
inline ::google::protobuf::uint32 MsgHeaven::ceng() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgHeaven.ceng)
  return ceng_;
}
inline void MsgHeaven::set_ceng(::google::protobuf::uint32 value) {
  set_has_ceng();
  ceng_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgHeaven.ceng)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool MsgHeaven::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgHeaven::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgHeaven::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgHeaven::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& MsgHeaven::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgHeaven.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgHeaven::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.MsgHeaven.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgHeaven::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void MsgHeaven::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.MsgHeaven.reward)
}

// -------------------------------------------------------------------

// MsgDaoist

// required uint32 jie = 1;
inline bool MsgDaoist::has_jie() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDaoist::set_has_jie() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDaoist::clear_has_jie() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDaoist::clear_jie() {
  jie_ = 0u;
  clear_has_jie();
}
inline ::google::protobuf::uint32 MsgDaoist::jie() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgDaoist.jie)
  return jie_;
}
inline void MsgDaoist::set_jie(::google::protobuf::uint32 value) {
  set_has_jie();
  jie_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgDaoist.jie)
}

// required uint32 ceng = 2;
inline bool MsgDaoist::has_ceng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDaoist::set_has_ceng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDaoist::clear_has_ceng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDaoist::clear_ceng() {
  ceng_ = 0u;
  clear_has_ceng();
}
inline ::google::protobuf::uint32 MsgDaoist::ceng() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgDaoist.ceng)
  return ceng_;
}
inline void MsgDaoist::set_ceng(::google::protobuf::uint32 value) {
  set_has_ceng();
  ceng_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.MsgDaoist.ceng)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool MsgDaoist::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDaoist::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDaoist::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDaoist::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& MsgDaoist::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.MsgDaoist.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgDaoist::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.MsgDaoist.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* MsgDaoist::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void MsgDaoist::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.MsgDaoist.reward)
}

// -------------------------------------------------------------------

// KaifuAchievement

// repeated .ConfigActivity.MsgSoulLevel soul_lv = 1;
inline int KaifuAchievement::soul_lv_size() const {
  return soul_lv_.size();
}
inline void KaifuAchievement::clear_soul_lv() {
  soul_lv_.Clear();
}
inline const ::ConfigActivity::MsgSoulLevel& KaifuAchievement::soul_lv(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuAchievement.soul_lv)
  return soul_lv_.Get(index);
}
inline ::ConfigActivity::MsgSoulLevel* KaifuAchievement::mutable_soul_lv(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaifuAchievement.soul_lv)
  return soul_lv_.Mutable(index);
}
inline ::ConfigActivity::MsgSoulLevel* KaifuAchievement::add_soul_lv() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KaifuAchievement.soul_lv)
  return soul_lv_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulLevel >&
KaifuAchievement::soul_lv() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KaifuAchievement.soul_lv)
  return soul_lv_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulLevel >*
KaifuAchievement::mutable_soul_lv() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KaifuAchievement.soul_lv)
  return &soul_lv_;
}

// repeated .ConfigActivity.MsgSoulGrowth soul_growth = 2;
inline int KaifuAchievement::soul_growth_size() const {
  return soul_growth_.size();
}
inline void KaifuAchievement::clear_soul_growth() {
  soul_growth_.Clear();
}
inline const ::ConfigActivity::MsgSoulGrowth& KaifuAchievement::soul_growth(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuAchievement.soul_growth)
  return soul_growth_.Get(index);
}
inline ::ConfigActivity::MsgSoulGrowth* KaifuAchievement::mutable_soul_growth(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaifuAchievement.soul_growth)
  return soul_growth_.Mutable(index);
}
inline ::ConfigActivity::MsgSoulGrowth* KaifuAchievement::add_soul_growth() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KaifuAchievement.soul_growth)
  return soul_growth_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulGrowth >&
KaifuAchievement::soul_growth() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KaifuAchievement.soul_growth)
  return soul_growth_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgSoulGrowth >*
KaifuAchievement::mutable_soul_growth() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KaifuAchievement.soul_growth)
  return &soul_growth_;
}

// repeated .ConfigActivity.MsgWuhun wuhun = 3;
inline int KaifuAchievement::wuhun_size() const {
  return wuhun_.size();
}
inline void KaifuAchievement::clear_wuhun() {
  wuhun_.Clear();
}
inline const ::ConfigActivity::MsgWuhun& KaifuAchievement::wuhun(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuAchievement.wuhun)
  return wuhun_.Get(index);
}
inline ::ConfigActivity::MsgWuhun* KaifuAchievement::mutable_wuhun(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaifuAchievement.wuhun)
  return wuhun_.Mutable(index);
}
inline ::ConfigActivity::MsgWuhun* KaifuAchievement::add_wuhun() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KaifuAchievement.wuhun)
  return wuhun_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgWuhun >&
KaifuAchievement::wuhun() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KaifuAchievement.wuhun)
  return wuhun_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgWuhun >*
KaifuAchievement::mutable_wuhun() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KaifuAchievement.wuhun)
  return &wuhun_;
}

// repeated .ConfigActivity.MsgJuexue juexue = 4;
inline int KaifuAchievement::juexue_size() const {
  return juexue_.size();
}
inline void KaifuAchievement::clear_juexue() {
  juexue_.Clear();
}
inline const ::ConfigActivity::MsgJuexue& KaifuAchievement::juexue(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuAchievement.juexue)
  return juexue_.Get(index);
}
inline ::ConfigActivity::MsgJuexue* KaifuAchievement::mutable_juexue(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaifuAchievement.juexue)
  return juexue_.Mutable(index);
}
inline ::ConfigActivity::MsgJuexue* KaifuAchievement::add_juexue() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KaifuAchievement.juexue)
  return juexue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgJuexue >&
KaifuAchievement::juexue() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KaifuAchievement.juexue)
  return juexue_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgJuexue >*
KaifuAchievement::mutable_juexue() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KaifuAchievement.juexue)
  return &juexue_;
}

// repeated .ConfigActivity.MsgStar star = 5;
inline int KaifuAchievement::star_size() const {
  return star_.size();
}
inline void KaifuAchievement::clear_star() {
  star_.Clear();
}
inline const ::ConfigActivity::MsgStar& KaifuAchievement::star(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuAchievement.star)
  return star_.Get(index);
}
inline ::ConfigActivity::MsgStar* KaifuAchievement::mutable_star(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaifuAchievement.star)
  return star_.Mutable(index);
}
inline ::ConfigActivity::MsgStar* KaifuAchievement::add_star() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KaifuAchievement.star)
  return star_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgStar >&
KaifuAchievement::star() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KaifuAchievement.star)
  return star_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgStar >*
KaifuAchievement::mutable_star() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KaifuAchievement.star)
  return &star_;
}

// repeated .ConfigActivity.MsgHeaven heaven = 6;
inline int KaifuAchievement::heaven_size() const {
  return heaven_.size();
}
inline void KaifuAchievement::clear_heaven() {
  heaven_.Clear();
}
inline const ::ConfigActivity::MsgHeaven& KaifuAchievement::heaven(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuAchievement.heaven)
  return heaven_.Get(index);
}
inline ::ConfigActivity::MsgHeaven* KaifuAchievement::mutable_heaven(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaifuAchievement.heaven)
  return heaven_.Mutable(index);
}
inline ::ConfigActivity::MsgHeaven* KaifuAchievement::add_heaven() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KaifuAchievement.heaven)
  return heaven_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgHeaven >&
KaifuAchievement::heaven() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KaifuAchievement.heaven)
  return heaven_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgHeaven >*
KaifuAchievement::mutable_heaven() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KaifuAchievement.heaven)
  return &heaven_;
}

// repeated .ConfigActivity.MsgDaoist daoist = 7;
inline int KaifuAchievement::daoist_size() const {
  return daoist_.size();
}
inline void KaifuAchievement::clear_daoist() {
  daoist_.Clear();
}
inline const ::ConfigActivity::MsgDaoist& KaifuAchievement::daoist(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuAchievement.daoist)
  return daoist_.Get(index);
}
inline ::ConfigActivity::MsgDaoist* KaifuAchievement::mutable_daoist(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaifuAchievement.daoist)
  return daoist_.Mutable(index);
}
inline ::ConfigActivity::MsgDaoist* KaifuAchievement::add_daoist() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KaifuAchievement.daoist)
  return daoist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgDaoist >&
KaifuAchievement::daoist() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KaifuAchievement.daoist)
  return daoist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::MsgDaoist >*
KaifuAchievement::mutable_daoist() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KaifuAchievement.daoist)
  return &daoist_;
}

// -------------------------------------------------------------------

// KaifuDiscountShop

// required uint32 o_price = 1;
inline bool KaifuDiscountShop::has_o_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KaifuDiscountShop::set_has_o_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KaifuDiscountShop::clear_has_o_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KaifuDiscountShop::clear_o_price() {
  o_price_ = 0u;
  clear_has_o_price();
}
inline ::google::protobuf::uint32 KaifuDiscountShop::o_price() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuDiscountShop.o_price)
  return o_price_;
}
inline void KaifuDiscountShop::set_o_price(::google::protobuf::uint32 value) {
  set_has_o_price();
  o_price_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.KaifuDiscountShop.o_price)
}

// required uint32 p_price = 2;
inline bool KaifuDiscountShop::has_p_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KaifuDiscountShop::set_has_p_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KaifuDiscountShop::clear_has_p_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KaifuDiscountShop::clear_p_price() {
  p_price_ = 0u;
  clear_has_p_price();
}
inline ::google::protobuf::uint32 KaifuDiscountShop::p_price() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuDiscountShop.p_price)
  return p_price_;
}
inline void KaifuDiscountShop::set_p_price(::google::protobuf::uint32 value) {
  set_has_p_price();
  p_price_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.KaifuDiscountShop.p_price)
}

// required .RewardConfig.RewardItemCfg item = 3;
inline bool KaifuDiscountShop::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KaifuDiscountShop::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KaifuDiscountShop::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KaifuDiscountShop::clear_item() {
  if (item_ != NULL) item_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_item();
}
inline const ::RewardConfig::RewardItemCfg& KaifuDiscountShop::item() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaifuDiscountShop.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::RewardConfig::RewardItemCfg* KaifuDiscountShop::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaifuDiscountShop.item)
  return item_;
}
inline ::RewardConfig::RewardItemCfg* KaifuDiscountShop::release_item() {
  clear_has_item();
  ::RewardConfig::RewardItemCfg* temp = item_;
  item_ = NULL;
  return temp;
}
inline void KaifuDiscountShop::set_allocated_item(::RewardConfig::RewardItemCfg* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.KaifuDiscountShop.item)
}

// -------------------------------------------------------------------

// KaiFuGift

// required .ConfigActivity.KaifuAchievement achievement = 1;
inline bool KaiFuGift::has_achievement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KaiFuGift::set_has_achievement() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KaiFuGift::clear_has_achievement() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KaiFuGift::clear_achievement() {
  if (achievement_ != NULL) achievement_->::ConfigActivity::KaifuAchievement::Clear();
  clear_has_achievement();
}
inline const ::ConfigActivity::KaifuAchievement& KaiFuGift::achievement() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaiFuGift.achievement)
  return achievement_ != NULL ? *achievement_ : *default_instance_->achievement_;
}
inline ::ConfigActivity::KaifuAchievement* KaiFuGift::mutable_achievement() {
  set_has_achievement();
  if (achievement_ == NULL) achievement_ = new ::ConfigActivity::KaifuAchievement;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaiFuGift.achievement)
  return achievement_;
}
inline ::ConfigActivity::KaifuAchievement* KaiFuGift::release_achievement() {
  clear_has_achievement();
  ::ConfigActivity::KaifuAchievement* temp = achievement_;
  achievement_ = NULL;
  return temp;
}
inline void KaiFuGift::set_allocated_achievement(::ConfigActivity::KaifuAchievement* achievement) {
  delete achievement_;
  achievement_ = achievement;
  if (achievement) {
    set_has_achievement();
  } else {
    clear_has_achievement();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.KaiFuGift.achievement)
}

// repeated .ConfigActivity.KaifuDiscountShop shop = 2;
inline int KaiFuGift::shop_size() const {
  return shop_.size();
}
inline void KaiFuGift::clear_shop() {
  shop_.Clear();
}
inline const ::ConfigActivity::KaifuDiscountShop& KaiFuGift::shop(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.KaiFuGift.shop)
  return shop_.Get(index);
}
inline ::ConfigActivity::KaifuDiscountShop* KaiFuGift::mutable_shop(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.KaiFuGift.shop)
  return shop_.Mutable(index);
}
inline ::ConfigActivity::KaifuDiscountShop* KaiFuGift::add_shop() {
  // @@protoc_insertion_point(field_add:ConfigActivity.KaiFuGift.shop)
  return shop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KaifuDiscountShop >&
KaiFuGift::shop() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.KaiFuGift.shop)
  return shop_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KaifuDiscountShop >*
KaiFuGift::mutable_shop() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.KaiFuGift.shop)
  return &shop_;
}

// -------------------------------------------------------------------

// StarStoneChange

// repeated uint32 src = 1;
inline int StarStoneChange::src_size() const {
  return src_.size();
}
inline void StarStoneChange::clear_src() {
  src_.Clear();
}
inline ::google::protobuf::uint32 StarStoneChange::src(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.StarStoneChange.src)
  return src_.Get(index);
}
inline void StarStoneChange::set_src(int index, ::google::protobuf::uint32 value) {
  src_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigActivity.StarStoneChange.src)
}
inline void StarStoneChange::add_src(::google::protobuf::uint32 value) {
  src_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigActivity.StarStoneChange.src)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StarStoneChange::src() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.StarStoneChange.src)
  return src_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StarStoneChange::mutable_src() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.StarStoneChange.src)
  return &src_;
}

// repeated uint32 dst = 2;
inline int StarStoneChange::dst_size() const {
  return dst_.size();
}
inline void StarStoneChange::clear_dst() {
  dst_.Clear();
}
inline ::google::protobuf::uint32 StarStoneChange::dst(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.StarStoneChange.dst)
  return dst_.Get(index);
}
inline void StarStoneChange::set_dst(int index, ::google::protobuf::uint32 value) {
  dst_.Set(index, value);
  // @@protoc_insertion_point(field_set:ConfigActivity.StarStoneChange.dst)
}
inline void StarStoneChange::add_dst(::google::protobuf::uint32 value) {
  dst_.Add(value);
  // @@protoc_insertion_point(field_add:ConfigActivity.StarStoneChange.dst)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StarStoneChange::dst() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.StarStoneChange.dst)
  return dst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StarStoneChange::mutable_dst() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.StarStoneChange.dst)
  return &dst_;
}

// required uint32 limit = 3;
inline bool StarStoneChange::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StarStoneChange::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StarStoneChange::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StarStoneChange::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 StarStoneChange::limit() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.StarStoneChange.limit)
  return limit_;
}
inline void StarStoneChange::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.StarStoneChange.limit)
}

// -------------------------------------------------------------------

// HongBaoItem

// required uint32 id = 1;
inline bool HongBaoItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HongBaoItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HongBaoItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HongBaoItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 HongBaoItem::id() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HongBaoItem.id)
  return id_;
}
inline void HongBaoItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HongBaoItem.id)
}

// required uint32 rate_free = 2;
inline bool HongBaoItem::has_rate_free() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HongBaoItem::set_has_rate_free() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HongBaoItem::clear_has_rate_free() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HongBaoItem::clear_rate_free() {
  rate_free_ = 0u;
  clear_has_rate_free();
}
inline ::google::protobuf::uint32 HongBaoItem::rate_free() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HongBaoItem.rate_free)
  return rate_free_;
}
inline void HongBaoItem::set_rate_free(::google::protobuf::uint32 value) {
  set_has_rate_free();
  rate_free_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HongBaoItem.rate_free)
}

// required uint32 rate_buy = 3;
inline bool HongBaoItem::has_rate_buy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HongBaoItem::set_has_rate_buy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HongBaoItem::clear_has_rate_buy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HongBaoItem::clear_rate_buy() {
  rate_buy_ = 0u;
  clear_has_rate_buy();
}
inline ::google::protobuf::uint32 HongBaoItem::rate_buy() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HongBaoItem.rate_buy)
  return rate_buy_;
}
inline void HongBaoItem::set_rate_buy(::google::protobuf::uint32 value) {
  set_has_rate_buy();
  rate_buy_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HongBaoItem.rate_buy)
}

// required .RewardConfig.RewardItemCfg reward = 4;
inline bool HongBaoItem::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HongBaoItem::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HongBaoItem::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HongBaoItem::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& HongBaoItem::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HongBaoItem.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* HongBaoItem::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.HongBaoItem.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* HongBaoItem::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void HongBaoItem::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.HongBaoItem.reward)
}

// -------------------------------------------------------------------

// HongBao

// required uint32 count = 1;
inline bool HongBao::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HongBao::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HongBao::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HongBao::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 HongBao::count() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HongBao.count)
  return count_;
}
inline void HongBao::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HongBao.count)
}

// required uint32 refresh_free = 2;
inline bool HongBao::has_refresh_free() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HongBao::set_has_refresh_free() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HongBao::clear_has_refresh_free() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HongBao::clear_refresh_free() {
  refresh_free_ = 0u;
  clear_has_refresh_free();
}
inline ::google::protobuf::uint32 HongBao::refresh_free() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HongBao.refresh_free)
  return refresh_free_;
}
inline void HongBao::set_refresh_free(::google::protobuf::uint32 value) {
  set_has_refresh_free();
  refresh_free_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HongBao.refresh_free)
}

// required uint32 refresh_cost = 3;
inline bool HongBao::has_refresh_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HongBao::set_has_refresh_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HongBao::clear_has_refresh_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HongBao::clear_refresh_cost() {
  refresh_cost_ = 0u;
  clear_has_refresh_cost();
}
inline ::google::protobuf::uint32 HongBao::refresh_cost() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HongBao.refresh_cost)
  return refresh_cost_;
}
inline void HongBao::set_refresh_cost(::google::protobuf::uint32 value) {
  set_has_refresh_cost();
  refresh_cost_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.HongBao.refresh_cost)
}

// repeated .ConfigActivity.HongBaoItem item = 4;
inline int HongBao::item_size() const {
  return item_.size();
}
inline void HongBao::clear_item() {
  item_.Clear();
}
inline const ::ConfigActivity::HongBaoItem& HongBao::item(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.HongBao.item)
  return item_.Get(index);
}
inline ::ConfigActivity::HongBaoItem* HongBao::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.HongBao.item)
  return item_.Mutable(index);
}
inline ::ConfigActivity::HongBaoItem* HongBao::add_item() {
  // @@protoc_insertion_point(field_add:ConfigActivity.HongBao.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HongBaoItem >&
HongBao::item() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.HongBao.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::HongBaoItem >*
HongBao::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.HongBao.item)
  return &item_;
}

// -------------------------------------------------------------------

// TaskGift

// required uint32 id = 1;
inline bool TaskGift::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskGift::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskGift::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskGift::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TaskGift::id() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.TaskGift.id)
  return id_;
}
inline void TaskGift::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.TaskGift.id)
}

// required uint32 count = 2;
inline bool TaskGift::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskGift::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskGift::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskGift::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TaskGift::count() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.TaskGift.count)
  return count_;
}
inline void TaskGift::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.TaskGift.count)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool TaskGift::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskGift::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskGift::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskGift::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& TaskGift::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.TaskGift.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* TaskGift::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.TaskGift.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* TaskGift::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void TaskGift::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.TaskGift.reward)
}

// -------------------------------------------------------------------

// RotaryTableCfg

// required uint32 id = 1;
inline bool RotaryTableCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RotaryTableCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RotaryTableCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RotaryTableCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RotaryTableCfg::id() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RotaryTableCfg.id)
  return id_;
}
inline void RotaryTableCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.RotaryTableCfg.id)
}

// required uint32 count = 2;
inline bool RotaryTableCfg::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RotaryTableCfg::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RotaryTableCfg::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RotaryTableCfg::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 RotaryTableCfg::count() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RotaryTableCfg.count)
  return count_;
}
inline void RotaryTableCfg::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.RotaryTableCfg.count)
}

// required uint32 type = 3;
inline bool RotaryTableCfg::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RotaryTableCfg::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RotaryTableCfg::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RotaryTableCfg::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 RotaryTableCfg::type() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RotaryTableCfg.type)
  return type_;
}
inline void RotaryTableCfg::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.RotaryTableCfg.type)
}

// required .RewardConfig.RewardItemCfg reward = 4;
inline bool RotaryTableCfg::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RotaryTableCfg::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RotaryTableCfg::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RotaryTableCfg::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& RotaryTableCfg::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RotaryTableCfg.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* RotaryTableCfg::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.RotaryTableCfg.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* RotaryTableCfg::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void RotaryTableCfg::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.RotaryTableCfg.reward)
}

// -------------------------------------------------------------------

// RotaryTableCrazyReward

// repeated .ConfigActivity.DiamondReward chargeReward = 1;
inline int RotaryTableCrazyReward::chargereward_size() const {
  return chargereward_.size();
}
inline void RotaryTableCrazyReward::clear_chargereward() {
  chargereward_.Clear();
}
inline const ::ConfigActivity::DiamondReward& RotaryTableCrazyReward::chargereward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RotaryTableCrazyReward.chargeReward)
  return chargereward_.Get(index);
}
inline ::ConfigActivity::DiamondReward* RotaryTableCrazyReward::mutable_chargereward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.RotaryTableCrazyReward.chargeReward)
  return chargereward_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* RotaryTableCrazyReward::add_chargereward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.RotaryTableCrazyReward.chargeReward)
  return chargereward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
RotaryTableCrazyReward::chargereward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.RotaryTableCrazyReward.chargeReward)
  return chargereward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
RotaryTableCrazyReward::mutable_chargereward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.RotaryTableCrazyReward.chargeReward)
  return &chargereward_;
}

// required .RewardConfig.RewardItemCfg rotaryTableCost = 2;
inline bool RotaryTableCrazyReward::has_rotarytablecost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RotaryTableCrazyReward::set_has_rotarytablecost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RotaryTableCrazyReward::clear_has_rotarytablecost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RotaryTableCrazyReward::clear_rotarytablecost() {
  if (rotarytablecost_ != NULL) rotarytablecost_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_rotarytablecost();
}
inline const ::RewardConfig::RewardItemCfg& RotaryTableCrazyReward::rotarytablecost() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RotaryTableCrazyReward.rotaryTableCost)
  return rotarytablecost_ != NULL ? *rotarytablecost_ : *default_instance_->rotarytablecost_;
}
inline ::RewardConfig::RewardItemCfg* RotaryTableCrazyReward::mutable_rotarytablecost() {
  set_has_rotarytablecost();
  if (rotarytablecost_ == NULL) rotarytablecost_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.RotaryTableCrazyReward.rotaryTableCost)
  return rotarytablecost_;
}
inline ::RewardConfig::RewardItemCfg* RotaryTableCrazyReward::release_rotarytablecost() {
  clear_has_rotarytablecost();
  ::RewardConfig::RewardItemCfg* temp = rotarytablecost_;
  rotarytablecost_ = NULL;
  return temp;
}
inline void RotaryTableCrazyReward::set_allocated_rotarytablecost(::RewardConfig::RewardItemCfg* rotarytablecost) {
  delete rotarytablecost_;
  rotarytablecost_ = rotarytablecost;
  if (rotarytablecost) {
    set_has_rotarytablecost();
  } else {
    clear_has_rotarytablecost();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.RotaryTableCrazyReward.rotaryTableCost)
}

// repeated .ConfigActivity.RotaryTableCfg randomReward = 3;
inline int RotaryTableCrazyReward::randomreward_size() const {
  return randomreward_.size();
}
inline void RotaryTableCrazyReward::clear_randomreward() {
  randomreward_.Clear();
}
inline const ::ConfigActivity::RotaryTableCfg& RotaryTableCrazyReward::randomreward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RotaryTableCrazyReward.randomReward)
  return randomreward_.Get(index);
}
inline ::ConfigActivity::RotaryTableCfg* RotaryTableCrazyReward::mutable_randomreward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.RotaryTableCrazyReward.randomReward)
  return randomreward_.Mutable(index);
}
inline ::ConfigActivity::RotaryTableCfg* RotaryTableCrazyReward::add_randomreward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.RotaryTableCrazyReward.randomReward)
  return randomreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RotaryTableCfg >&
RotaryTableCrazyReward::randomreward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.RotaryTableCrazyReward.randomReward)
  return randomreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::RotaryTableCfg >*
RotaryTableCrazyReward::mutable_randomreward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.RotaryTableCrazyReward.randomReward)
  return &randomreward_;
}

// required .RewardConfig.RewardItemCfg fixedReward = 4;
inline bool RotaryTableCrazyReward::has_fixedreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RotaryTableCrazyReward::set_has_fixedreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RotaryTableCrazyReward::clear_has_fixedreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RotaryTableCrazyReward::clear_fixedreward() {
  if (fixedreward_ != NULL) fixedreward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_fixedreward();
}
inline const ::RewardConfig::RewardItemCfg& RotaryTableCrazyReward::fixedreward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.RotaryTableCrazyReward.fixedReward)
  return fixedreward_ != NULL ? *fixedreward_ : *default_instance_->fixedreward_;
}
inline ::RewardConfig::RewardItemCfg* RotaryTableCrazyReward::mutable_fixedreward() {
  set_has_fixedreward();
  if (fixedreward_ == NULL) fixedreward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.RotaryTableCrazyReward.fixedReward)
  return fixedreward_;
}
inline ::RewardConfig::RewardItemCfg* RotaryTableCrazyReward::release_fixedreward() {
  clear_has_fixedreward();
  ::RewardConfig::RewardItemCfg* temp = fixedreward_;
  fixedreward_ = NULL;
  return temp;
}
inline void RotaryTableCrazyReward::set_allocated_fixedreward(::RewardConfig::RewardItemCfg* fixedreward) {
  delete fixedreward_;
  fixedreward_ = fixedreward;
  if (fixedreward) {
    set_has_fixedreward();
  } else {
    clear_has_fixedreward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.RotaryTableCrazyReward.fixedReward)
}

// -------------------------------------------------------------------

// BatmanTreasureDraw

// required .RewardConfig.RewardItemCfg item = 1;
inline bool BatmanTreasureDraw::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatmanTreasureDraw::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatmanTreasureDraw::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatmanTreasureDraw::clear_item() {
  if (item_ != NULL) item_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_item();
}
inline const ::RewardConfig::RewardItemCfg& BatmanTreasureDraw::item() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BatmanTreasureDraw.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::RewardConfig::RewardItemCfg* BatmanTreasureDraw::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.BatmanTreasureDraw.item)
  return item_;
}
inline ::RewardConfig::RewardItemCfg* BatmanTreasureDraw::release_item() {
  clear_has_item();
  ::RewardConfig::RewardItemCfg* temp = item_;
  item_ = NULL;
  return temp;
}
inline void BatmanTreasureDraw::set_allocated_item(::RewardConfig::RewardItemCfg* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.BatmanTreasureDraw.item)
}

// required uint32 weight = 2;
inline bool BatmanTreasureDraw::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatmanTreasureDraw::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatmanTreasureDraw::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatmanTreasureDraw::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 BatmanTreasureDraw::weight() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BatmanTreasureDraw.weight)
  return weight_;
}
inline void BatmanTreasureDraw::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.BatmanTreasureDraw.weight)
}

// -------------------------------------------------------------------

// BatmanTreasureCfg

// repeated .ConfigActivity.DiamondReward xiaobing_chargeReward = 1;
inline int BatmanTreasureCfg::xiaobing_chargereward_size() const {
  return xiaobing_chargereward_.size();
}
inline void BatmanTreasureCfg::clear_xiaobing_chargereward() {
  xiaobing_chargereward_.Clear();
}
inline const ::ConfigActivity::DiamondReward& BatmanTreasureCfg::xiaobing_chargereward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BatmanTreasureCfg.xiaobing_chargeReward)
  return xiaobing_chargereward_.Get(index);
}
inline ::ConfigActivity::DiamondReward* BatmanTreasureCfg::mutable_xiaobing_chargereward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.BatmanTreasureCfg.xiaobing_chargeReward)
  return xiaobing_chargereward_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* BatmanTreasureCfg::add_xiaobing_chargereward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.BatmanTreasureCfg.xiaobing_chargeReward)
  return xiaobing_chargereward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
BatmanTreasureCfg::xiaobing_chargereward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.BatmanTreasureCfg.xiaobing_chargeReward)
  return xiaobing_chargereward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
BatmanTreasureCfg::mutable_xiaobing_chargereward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.BatmanTreasureCfg.xiaobing_chargeReward)
  return &xiaobing_chargereward_;
}

// repeated .ConfigActivity.BatmanTreasureDraw unique_xiaobing_dial = 2;
inline int BatmanTreasureCfg::unique_xiaobing_dial_size() const {
  return unique_xiaobing_dial_.size();
}
inline void BatmanTreasureCfg::clear_unique_xiaobing_dial() {
  unique_xiaobing_dial_.Clear();
}
inline const ::ConfigActivity::BatmanTreasureDraw& BatmanTreasureCfg::unique_xiaobing_dial(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BatmanTreasureCfg.unique_xiaobing_dial)
  return unique_xiaobing_dial_.Get(index);
}
inline ::ConfigActivity::BatmanTreasureDraw* BatmanTreasureCfg::mutable_unique_xiaobing_dial(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.BatmanTreasureCfg.unique_xiaobing_dial)
  return unique_xiaobing_dial_.Mutable(index);
}
inline ::ConfigActivity::BatmanTreasureDraw* BatmanTreasureCfg::add_unique_xiaobing_dial() {
  // @@protoc_insertion_point(field_add:ConfigActivity.BatmanTreasureCfg.unique_xiaobing_dial)
  return unique_xiaobing_dial_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BatmanTreasureDraw >&
BatmanTreasureCfg::unique_xiaobing_dial() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.BatmanTreasureCfg.unique_xiaobing_dial)
  return unique_xiaobing_dial_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BatmanTreasureDraw >*
BatmanTreasureCfg::mutable_unique_xiaobing_dial() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.BatmanTreasureCfg.unique_xiaobing_dial)
  return &unique_xiaobing_dial_;
}

// required uint32 draw_cnt_max = 3;
inline bool BatmanTreasureCfg::has_draw_cnt_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatmanTreasureCfg::set_has_draw_cnt_max() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatmanTreasureCfg::clear_has_draw_cnt_max() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatmanTreasureCfg::clear_draw_cnt_max() {
  draw_cnt_max_ = 0u;
  clear_has_draw_cnt_max();
}
inline ::google::protobuf::uint32 BatmanTreasureCfg::draw_cnt_max() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BatmanTreasureCfg.draw_cnt_max)
  return draw_cnt_max_;
}
inline void BatmanTreasureCfg::set_draw_cnt_max(::google::protobuf::uint32 value) {
  set_has_draw_cnt_max();
  draw_cnt_max_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.BatmanTreasureCfg.draw_cnt_max)
}

// required uint32 draw_cost_integral = 4;
inline bool BatmanTreasureCfg::has_draw_cost_integral() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatmanTreasureCfg::set_has_draw_cost_integral() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatmanTreasureCfg::clear_has_draw_cost_integral() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatmanTreasureCfg::clear_draw_cost_integral() {
  draw_cost_integral_ = 0u;
  clear_has_draw_cost_integral();
}
inline ::google::protobuf::uint32 BatmanTreasureCfg::draw_cost_integral() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.BatmanTreasureCfg.draw_cost_integral)
  return draw_cost_integral_;
}
inline void BatmanTreasureCfg::set_draw_cost_integral(::google::protobuf::uint32 value) {
  set_has_draw_cost_integral();
  draw_cost_integral_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.BatmanTreasureCfg.draw_cost_integral)
}

// -------------------------------------------------------------------

// SummerChargeRewardCfg

// repeated .ConfigActivity.DiamondReward daily_chargeReward = 1;
inline int SummerChargeRewardCfg::daily_chargereward_size() const {
  return daily_chargereward_.size();
}
inline void SummerChargeRewardCfg::clear_daily_chargereward() {
  daily_chargereward_.Clear();
}
inline const ::ConfigActivity::DiamondReward& SummerChargeRewardCfg::daily_chargereward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SummerChargeRewardCfg.daily_chargeReward)
  return daily_chargereward_.Get(index);
}
inline ::ConfigActivity::DiamondReward* SummerChargeRewardCfg::mutable_daily_chargereward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.SummerChargeRewardCfg.daily_chargeReward)
  return daily_chargereward_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* SummerChargeRewardCfg::add_daily_chargereward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.SummerChargeRewardCfg.daily_chargeReward)
  return daily_chargereward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
SummerChargeRewardCfg::daily_chargereward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.SummerChargeRewardCfg.daily_chargeReward)
  return daily_chargereward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
SummerChargeRewardCfg::mutable_daily_chargereward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.SummerChargeRewardCfg.daily_chargeReward)
  return &daily_chargereward_;
}

// repeated .ConfigActivity.DiamondReward acc_chargeReward = 2;
inline int SummerChargeRewardCfg::acc_chargereward_size() const {
  return acc_chargereward_.size();
}
inline void SummerChargeRewardCfg::clear_acc_chargereward() {
  acc_chargereward_.Clear();
}
inline const ::ConfigActivity::DiamondReward& SummerChargeRewardCfg::acc_chargereward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SummerChargeRewardCfg.acc_chargeReward)
  return acc_chargereward_.Get(index);
}
inline ::ConfigActivity::DiamondReward* SummerChargeRewardCfg::mutable_acc_chargereward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.SummerChargeRewardCfg.acc_chargeReward)
  return acc_chargereward_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* SummerChargeRewardCfg::add_acc_chargereward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.SummerChargeRewardCfg.acc_chargeReward)
  return acc_chargereward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
SummerChargeRewardCfg::acc_chargereward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.SummerChargeRewardCfg.acc_chargeReward)
  return acc_chargereward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
SummerChargeRewardCfg::mutable_acc_chargereward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.SummerChargeRewardCfg.acc_chargeReward)
  return &acc_chargereward_;
}

// -------------------------------------------------------------------

// SummerHolidaysTicketCfg

// required uint32 need_cost_ticket = 1;
inline bool SummerHolidaysTicketCfg::has_need_cost_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummerHolidaysTicketCfg::set_has_need_cost_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SummerHolidaysTicketCfg::clear_has_need_cost_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SummerHolidaysTicketCfg::clear_need_cost_ticket() {
  need_cost_ticket_ = 0u;
  clear_has_need_cost_ticket();
}
inline ::google::protobuf::uint32 SummerHolidaysTicketCfg::need_cost_ticket() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SummerHolidaysTicketCfg.need_cost_ticket)
  return need_cost_ticket_;
}
inline void SummerHolidaysTicketCfg::set_need_cost_ticket(::google::protobuf::uint32 value) {
  set_has_need_cost_ticket();
  need_cost_ticket_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.SummerHolidaysTicketCfg.need_cost_ticket)
}

// required uint32 exchange_count_max = 2;
inline bool SummerHolidaysTicketCfg::has_exchange_count_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummerHolidaysTicketCfg::set_has_exchange_count_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SummerHolidaysTicketCfg::clear_has_exchange_count_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SummerHolidaysTicketCfg::clear_exchange_count_max() {
  exchange_count_max_ = 0u;
  clear_has_exchange_count_max();
}
inline ::google::protobuf::uint32 SummerHolidaysTicketCfg::exchange_count_max() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SummerHolidaysTicketCfg.exchange_count_max)
  return exchange_count_max_;
}
inline void SummerHolidaysTicketCfg::set_exchange_count_max(::google::protobuf::uint32 value) {
  set_has_exchange_count_max();
  exchange_count_max_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.SummerHolidaysTicketCfg.exchange_count_max)
}

// required .RewardConfig.RewardItemCfg reward = 3;
inline bool SummerHolidaysTicketCfg::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SummerHolidaysTicketCfg::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SummerHolidaysTicketCfg::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SummerHolidaysTicketCfg::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& SummerHolidaysTicketCfg::reward() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SummerHolidaysTicketCfg.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* SummerHolidaysTicketCfg::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.SummerHolidaysTicketCfg.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* SummerHolidaysTicketCfg::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void SummerHolidaysTicketCfg::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.SummerHolidaysTicketCfg.reward)
}

// -------------------------------------------------------------------

// SummerHolidaysRewardCfg

// required uint32 exchange_ticket_max = 1;
inline bool SummerHolidaysRewardCfg::has_exchange_ticket_max() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummerHolidaysRewardCfg::set_has_exchange_ticket_max() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SummerHolidaysRewardCfg::clear_has_exchange_ticket_max() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SummerHolidaysRewardCfg::clear_exchange_ticket_max() {
  exchange_ticket_max_ = 0u;
  clear_has_exchange_ticket_max();
}
inline ::google::protobuf::uint32 SummerHolidaysRewardCfg::exchange_ticket_max() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SummerHolidaysRewardCfg.exchange_ticket_max)
  return exchange_ticket_max_;
}
inline void SummerHolidaysRewardCfg::set_exchange_ticket_max(::google::protobuf::uint32 value) {
  set_has_exchange_ticket_max();
  exchange_ticket_max_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.SummerHolidaysRewardCfg.exchange_ticket_max)
}

// required uint32 per_ticket_need_diamond = 2;
inline bool SummerHolidaysRewardCfg::has_per_ticket_need_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummerHolidaysRewardCfg::set_has_per_ticket_need_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SummerHolidaysRewardCfg::clear_has_per_ticket_need_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SummerHolidaysRewardCfg::clear_per_ticket_need_diamond() {
  per_ticket_need_diamond_ = 0u;
  clear_has_per_ticket_need_diamond();
}
inline ::google::protobuf::uint32 SummerHolidaysRewardCfg::per_ticket_need_diamond() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SummerHolidaysRewardCfg.per_ticket_need_diamond)
  return per_ticket_need_diamond_;
}
inline void SummerHolidaysRewardCfg::set_per_ticket_need_diamond(::google::protobuf::uint32 value) {
  set_has_per_ticket_need_diamond();
  per_ticket_need_diamond_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.SummerHolidaysRewardCfg.per_ticket_need_diamond)
}

// repeated .ConfigActivity.SummerHolidaysTicketCfg summer_holidays_ticket = 3;
inline int SummerHolidaysRewardCfg::summer_holidays_ticket_size() const {
  return summer_holidays_ticket_.size();
}
inline void SummerHolidaysRewardCfg::clear_summer_holidays_ticket() {
  summer_holidays_ticket_.Clear();
}
inline const ::ConfigActivity::SummerHolidaysTicketCfg& SummerHolidaysRewardCfg::summer_holidays_ticket(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SummerHolidaysRewardCfg.summer_holidays_ticket)
  return summer_holidays_ticket_.Get(index);
}
inline ::ConfigActivity::SummerHolidaysTicketCfg* SummerHolidaysRewardCfg::mutable_summer_holidays_ticket(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.SummerHolidaysRewardCfg.summer_holidays_ticket)
  return summer_holidays_ticket_.Mutable(index);
}
inline ::ConfigActivity::SummerHolidaysTicketCfg* SummerHolidaysRewardCfg::add_summer_holidays_ticket() {
  // @@protoc_insertion_point(field_add:ConfigActivity.SummerHolidaysRewardCfg.summer_holidays_ticket)
  return summer_holidays_ticket_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SummerHolidaysTicketCfg >&
SummerHolidaysRewardCfg::summer_holidays_ticket() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.SummerHolidaysRewardCfg.summer_holidays_ticket)
  return summer_holidays_ticket_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SummerHolidaysTicketCfg >*
SummerHolidaysRewardCfg::mutable_summer_holidays_ticket() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.SummerHolidaysRewardCfg.summer_holidays_ticket)
  return &summer_holidays_ticket_;
}

// repeated .ConfigActivity.DiamondReward chargeReward = 4;
inline int SummerHolidaysRewardCfg::chargereward_size() const {
  return chargereward_.size();
}
inline void SummerHolidaysRewardCfg::clear_chargereward() {
  chargereward_.Clear();
}
inline const ::ConfigActivity::DiamondReward& SummerHolidaysRewardCfg::chargereward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.SummerHolidaysRewardCfg.chargeReward)
  return chargereward_.Get(index);
}
inline ::ConfigActivity::DiamondReward* SummerHolidaysRewardCfg::mutable_chargereward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.SummerHolidaysRewardCfg.chargeReward)
  return chargereward_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* SummerHolidaysRewardCfg::add_chargereward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.SummerHolidaysRewardCfg.chargeReward)
  return chargereward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
SummerHolidaysRewardCfg::chargereward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.SummerHolidaysRewardCfg.chargeReward)
  return chargereward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
SummerHolidaysRewardCfg::mutable_chargereward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.SummerHolidaysRewardCfg.chargeReward)
  return &chargereward_;
}

// -------------------------------------------------------------------

// FreeExchangeItem

// required uint32 id = 1;
inline bool FreeExchangeItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreeExchangeItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreeExchangeItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreeExchangeItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FreeExchangeItem::id() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.FreeExchangeItem.id)
  return id_;
}
inline void FreeExchangeItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.FreeExchangeItem.id)
}

// required uint32 c = 2;
inline bool FreeExchangeItem::has_c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreeExchangeItem::set_has_c() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreeExchangeItem::clear_has_c() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreeExchangeItem::clear_c() {
  c_ = 0u;
  clear_has_c();
}
inline ::google::protobuf::uint32 FreeExchangeItem::c() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.FreeExchangeItem.c)
  return c_;
}
inline void FreeExchangeItem::set_c(::google::protobuf::uint32 value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:ConfigActivity.FreeExchangeItem.c)
}

// -------------------------------------------------------------------

// FreeExchange

// repeated .ConfigActivity.FreeExchangeItem item = 1;
inline int FreeExchange::item_size() const {
  return item_.size();
}
inline void FreeExchange::clear_item() {
  item_.Clear();
}
inline const ::ConfigActivity::FreeExchangeItem& FreeExchange::item(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.FreeExchange.item)
  return item_.Get(index);
}
inline ::ConfigActivity::FreeExchangeItem* FreeExchange::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.FreeExchange.item)
  return item_.Mutable(index);
}
inline ::ConfigActivity::FreeExchangeItem* FreeExchange::add_item() {
  // @@protoc_insertion_point(field_add:ConfigActivity.FreeExchange.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchangeItem >&
FreeExchange::item() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.FreeExchange.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchangeItem >*
FreeExchange::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.FreeExchange.item)
  return &item_;
}

// -------------------------------------------------------------------

// Activities

// repeated .ConfigActivity.BuildSuitItem buildsuit = 1;
inline int Activities::buildsuit_size() const {
  return buildsuit_.size();
}
inline void Activities::clear_buildsuit() {
  buildsuit_.Clear();
}
inline const ::ConfigActivity::BuildSuitItem& Activities::buildsuit(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.buildsuit)
  return buildsuit_.Get(index);
}
inline ::ConfigActivity::BuildSuitItem* Activities::mutable_buildsuit(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.buildsuit)
  return buildsuit_.Mutable(index);
}
inline ::ConfigActivity::BuildSuitItem* Activities::add_buildsuit() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.buildsuit)
  return buildsuit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BuildSuitItem >&
Activities::buildsuit() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.buildsuit)
  return buildsuit_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::BuildSuitItem >*
Activities::mutable_buildsuit() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.buildsuit)
  return &buildsuit_;
}

// required .ConfigActivity.BlessPoint blesspoint = 2;
inline bool Activities::has_blesspoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Activities::set_has_blesspoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Activities::clear_has_blesspoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Activities::clear_blesspoint() {
  if (blesspoint_ != NULL) blesspoint_->::ConfigActivity::BlessPoint::Clear();
  clear_has_blesspoint();
}
inline const ::ConfigActivity::BlessPoint& Activities::blesspoint() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.blesspoint)
  return blesspoint_ != NULL ? *blesspoint_ : *default_instance_->blesspoint_;
}
inline ::ConfigActivity::BlessPoint* Activities::mutable_blesspoint() {
  set_has_blesspoint();
  if (blesspoint_ == NULL) blesspoint_ = new ::ConfigActivity::BlessPoint;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.blesspoint)
  return blesspoint_;
}
inline ::ConfigActivity::BlessPoint* Activities::release_blesspoint() {
  clear_has_blesspoint();
  ::ConfigActivity::BlessPoint* temp = blesspoint_;
  blesspoint_ = NULL;
  return temp;
}
inline void Activities::set_allocated_blesspoint(::ConfigActivity::BlessPoint* blesspoint) {
  delete blesspoint_;
  blesspoint_ = blesspoint;
  if (blesspoint) {
    set_has_blesspoint();
  } else {
    clear_has_blesspoint();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.blesspoint)
}

// required .ConfigActivity.DoubleWelfare double_welfare = 3;
inline bool Activities::has_double_welfare() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Activities::set_has_double_welfare() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Activities::clear_has_double_welfare() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Activities::clear_double_welfare() {
  if (double_welfare_ != NULL) double_welfare_->::ConfigActivity::DoubleWelfare::Clear();
  clear_has_double_welfare();
}
inline const ::ConfigActivity::DoubleWelfare& Activities::double_welfare() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.double_welfare)
  return double_welfare_ != NULL ? *double_welfare_ : *default_instance_->double_welfare_;
}
inline ::ConfigActivity::DoubleWelfare* Activities::mutable_double_welfare() {
  set_has_double_welfare();
  if (double_welfare_ == NULL) double_welfare_ = new ::ConfigActivity::DoubleWelfare;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.double_welfare)
  return double_welfare_;
}
inline ::ConfigActivity::DoubleWelfare* Activities::release_double_welfare() {
  clear_has_double_welfare();
  ::ConfigActivity::DoubleWelfare* temp = double_welfare_;
  double_welfare_ = NULL;
  return temp;
}
inline void Activities::set_allocated_double_welfare(::ConfigActivity::DoubleWelfare* double_welfare) {
  delete double_welfare_;
  double_welfare_ = double_welfare;
  if (double_welfare) {
    set_has_double_welfare();
  } else {
    clear_has_double_welfare();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.double_welfare)
}

// repeated .ConfigActivity.PearlAdvance pearl_advance = 4;
inline int Activities::pearl_advance_size() const {
  return pearl_advance_.size();
}
inline void Activities::clear_pearl_advance() {
  pearl_advance_.Clear();
}
inline const ::ConfigActivity::PearlAdvance& Activities::pearl_advance(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.pearl_advance)
  return pearl_advance_.Get(index);
}
inline ::ConfigActivity::PearlAdvance* Activities::mutable_pearl_advance(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.pearl_advance)
  return pearl_advance_.Mutable(index);
}
inline ::ConfigActivity::PearlAdvance* Activities::add_pearl_advance() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.pearl_advance)
  return pearl_advance_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::PearlAdvance >&
Activities::pearl_advance() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.pearl_advance)
  return pearl_advance_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::PearlAdvance >*
Activities::mutable_pearl_advance() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.pearl_advance)
  return &pearl_advance_;
}

// repeated .ConfigActivity.UniqueKnowledgeDial unique_knowledge_dial = 5;
inline int Activities::unique_knowledge_dial_size() const {
  return unique_knowledge_dial_.size();
}
inline void Activities::clear_unique_knowledge_dial() {
  unique_knowledge_dial_.Clear();
}
inline const ::ConfigActivity::UniqueKnowledgeDial& Activities::unique_knowledge_dial(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.unique_knowledge_dial)
  return unique_knowledge_dial_.Get(index);
}
inline ::ConfigActivity::UniqueKnowledgeDial* Activities::mutable_unique_knowledge_dial(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.unique_knowledge_dial)
  return unique_knowledge_dial_.Mutable(index);
}
inline ::ConfigActivity::UniqueKnowledgeDial* Activities::add_unique_knowledge_dial() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.unique_knowledge_dial)
  return unique_knowledge_dial_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::UniqueKnowledgeDial >&
Activities::unique_knowledge_dial() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.unique_knowledge_dial)
  return unique_knowledge_dial_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::UniqueKnowledgeDial >*
Activities::mutable_unique_knowledge_dial() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.unique_knowledge_dial)
  return &unique_knowledge_dial_;
}

// repeated .ConfigActivity.SpriteVitalityItem spiritvitality = 6;
inline int Activities::spiritvitality_size() const {
  return spiritvitality_.size();
}
inline void Activities::clear_spiritvitality() {
  spiritvitality_.Clear();
}
inline const ::ConfigActivity::SpriteVitalityItem& Activities::spiritvitality(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.spiritvitality)
  return spiritvitality_.Get(index);
}
inline ::ConfigActivity::SpriteVitalityItem* Activities::mutable_spiritvitality(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.spiritvitality)
  return spiritvitality_.Mutable(index);
}
inline ::ConfigActivity::SpriteVitalityItem* Activities::add_spiritvitality() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.spiritvitality)
  return spiritvitality_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SpriteVitalityItem >&
Activities::spiritvitality() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.spiritvitality)
  return spiritvitality_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SpriteVitalityItem >*
Activities::mutable_spiritvitality() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.spiritvitality)
  return &spiritvitality_;
}

// required .ConfigActivity.ForgeSmelt forge = 7;
inline bool Activities::has_forge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Activities::set_has_forge() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Activities::clear_has_forge() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Activities::clear_forge() {
  if (forge_ != NULL) forge_->::ConfigActivity::ForgeSmelt::Clear();
  clear_has_forge();
}
inline const ::ConfigActivity::ForgeSmelt& Activities::forge() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.forge)
  return forge_ != NULL ? *forge_ : *default_instance_->forge_;
}
inline ::ConfigActivity::ForgeSmelt* Activities::mutable_forge() {
  set_has_forge();
  if (forge_ == NULL) forge_ = new ::ConfigActivity::ForgeSmelt;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.forge)
  return forge_;
}
inline ::ConfigActivity::ForgeSmelt* Activities::release_forge() {
  clear_has_forge();
  ::ConfigActivity::ForgeSmelt* temp = forge_;
  forge_ = NULL;
  return temp;
}
inline void Activities::set_allocated_forge(::ConfigActivity::ForgeSmelt* forge) {
  delete forge_;
  forge_ = forge;
  if (forge) {
    set_has_forge();
  } else {
    clear_has_forge();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.forge)
}

// required .ConfigActivity.HeroDial herodial = 8;
inline bool Activities::has_herodial() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Activities::set_has_herodial() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Activities::clear_has_herodial() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Activities::clear_herodial() {
  if (herodial_ != NULL) herodial_->::ConfigActivity::HeroDial::Clear();
  clear_has_herodial();
}
inline const ::ConfigActivity::HeroDial& Activities::herodial() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.herodial)
  return herodial_ != NULL ? *herodial_ : *default_instance_->herodial_;
}
inline ::ConfigActivity::HeroDial* Activities::mutable_herodial() {
  set_has_herodial();
  if (herodial_ == NULL) herodial_ = new ::ConfigActivity::HeroDial;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.herodial)
  return herodial_;
}
inline ::ConfigActivity::HeroDial* Activities::release_herodial() {
  clear_has_herodial();
  ::ConfigActivity::HeroDial* temp = herodial_;
  herodial_ = NULL;
  return temp;
}
inline void Activities::set_allocated_herodial(::ConfigActivity::HeroDial* herodial) {
  delete herodial_;
  herodial_ = herodial;
  if (herodial) {
    set_has_herodial();
  } else {
    clear_has_herodial();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.herodial)
}

// repeated .ConfigActivity.KingdomWar kingdomwar = 9;
inline int Activities::kingdomwar_size() const {
  return kingdomwar_.size();
}
inline void Activities::clear_kingdomwar() {
  kingdomwar_.Clear();
}
inline const ::ConfigActivity::KingdomWar& Activities::kingdomwar(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.kingdomwar)
  return kingdomwar_.Get(index);
}
inline ::ConfigActivity::KingdomWar* Activities::mutable_kingdomwar(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.kingdomwar)
  return kingdomwar_.Mutable(index);
}
inline ::ConfigActivity::KingdomWar* Activities::add_kingdomwar() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.kingdomwar)
  return kingdomwar_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KingdomWar >&
Activities::kingdomwar() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.kingdomwar)
  return kingdomwar_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::KingdomWar >*
Activities::mutable_kingdomwar() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.kingdomwar)
  return &kingdomwar_;
}

// repeated .ConfigActivity.OneDiamondWelfare onediamondwelfare = 10;
inline int Activities::onediamondwelfare_size() const {
  return onediamondwelfare_.size();
}
inline void Activities::clear_onediamondwelfare() {
  onediamondwelfare_.Clear();
}
inline const ::ConfigActivity::OneDiamondWelfare& Activities::onediamondwelfare(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.onediamondwelfare)
  return onediamondwelfare_.Get(index);
}
inline ::ConfigActivity::OneDiamondWelfare* Activities::mutable_onediamondwelfare(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.onediamondwelfare)
  return onediamondwelfare_.Mutable(index);
}
inline ::ConfigActivity::OneDiamondWelfare* Activities::add_onediamondwelfare() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.onediamondwelfare)
  return onediamondwelfare_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::OneDiamondWelfare >&
Activities::onediamondwelfare() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.onediamondwelfare)
  return onediamondwelfare_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::OneDiamondWelfare >*
Activities::mutable_onediamondwelfare() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.onediamondwelfare)
  return &onediamondwelfare_;
}

// required .ConfigActivity.FortunePacks fortune_packs = 11;
inline bool Activities::has_fortune_packs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Activities::set_has_fortune_packs() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Activities::clear_has_fortune_packs() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Activities::clear_fortune_packs() {
  if (fortune_packs_ != NULL) fortune_packs_->::ConfigActivity::FortunePacks::Clear();
  clear_has_fortune_packs();
}
inline const ::ConfigActivity::FortunePacks& Activities::fortune_packs() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.fortune_packs)
  return fortune_packs_ != NULL ? *fortune_packs_ : *default_instance_->fortune_packs_;
}
inline ::ConfigActivity::FortunePacks* Activities::mutable_fortune_packs() {
  set_has_fortune_packs();
  if (fortune_packs_ == NULL) fortune_packs_ = new ::ConfigActivity::FortunePacks;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.fortune_packs)
  return fortune_packs_;
}
inline ::ConfigActivity::FortunePacks* Activities::release_fortune_packs() {
  clear_has_fortune_packs();
  ::ConfigActivity::FortunePacks* temp = fortune_packs_;
  fortune_packs_ = NULL;
  return temp;
}
inline void Activities::set_allocated_fortune_packs(::ConfigActivity::FortunePacks* fortune_packs) {
  delete fortune_packs_;
  fortune_packs_ = fortune_packs;
  if (fortune_packs) {
    set_has_fortune_packs();
  } else {
    clear_has_fortune_packs();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.fortune_packs)
}

// repeated .ConfigActivity.SevenDayPacks sevenday_packs = 12;
inline int Activities::sevenday_packs_size() const {
  return sevenday_packs_.size();
}
inline void Activities::clear_sevenday_packs() {
  sevenday_packs_.Clear();
}
inline const ::ConfigActivity::SevenDayPacks& Activities::sevenday_packs(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.sevenday_packs)
  return sevenday_packs_.Get(index);
}
inline ::ConfigActivity::SevenDayPacks* Activities::mutable_sevenday_packs(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.sevenday_packs)
  return sevenday_packs_.Mutable(index);
}
inline ::ConfigActivity::SevenDayPacks* Activities::add_sevenday_packs() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.sevenday_packs)
  return sevenday_packs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SevenDayPacks >&
Activities::sevenday_packs() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.sevenday_packs)
  return sevenday_packs_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::SevenDayPacks >*
Activities::mutable_sevenday_packs() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.sevenday_packs)
  return &sevenday_packs_;
}

// repeated .ConfigActivity.DiamondReward icephoenix = 13;
inline int Activities::icephoenix_size() const {
  return icephoenix_.size();
}
inline void Activities::clear_icephoenix() {
  icephoenix_.Clear();
}
inline const ::ConfigActivity::DiamondReward& Activities::icephoenix(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.icephoenix)
  return icephoenix_.Get(index);
}
inline ::ConfigActivity::DiamondReward* Activities::mutable_icephoenix(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.icephoenix)
  return icephoenix_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* Activities::add_icephoenix() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.icephoenix)
  return icephoenix_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
Activities::icephoenix() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.icephoenix)
  return icephoenix_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
Activities::mutable_icephoenix() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.icephoenix)
  return &icephoenix_;
}

// repeated .ConfigActivity.DiamondReward autumn_feedback = 14;
inline int Activities::autumn_feedback_size() const {
  return autumn_feedback_.size();
}
inline void Activities::clear_autumn_feedback() {
  autumn_feedback_.Clear();
}
inline const ::ConfigActivity::DiamondReward& Activities::autumn_feedback(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.autumn_feedback)
  return autumn_feedback_.Get(index);
}
inline ::ConfigActivity::DiamondReward* Activities::mutable_autumn_feedback(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.autumn_feedback)
  return autumn_feedback_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* Activities::add_autumn_feedback() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.autumn_feedback)
  return autumn_feedback_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
Activities::autumn_feedback() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.autumn_feedback)
  return autumn_feedback_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
Activities::mutable_autumn_feedback() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.autumn_feedback)
  return &autumn_feedback_;
}

// repeated .ConfigActivity.DiamondReward protectflag = 15;
inline int Activities::protectflag_size() const {
  return protectflag_.size();
}
inline void Activities::clear_protectflag() {
  protectflag_.Clear();
}
inline const ::ConfigActivity::DiamondReward& Activities::protectflag(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.protectflag)
  return protectflag_.Get(index);
}
inline ::ConfigActivity::DiamondReward* Activities::mutable_protectflag(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.protectflag)
  return protectflag_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* Activities::add_protectflag() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.protectflag)
  return protectflag_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
Activities::protectflag() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.protectflag)
  return protectflag_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
Activities::mutable_protectflag() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.protectflag)
  return &protectflag_;
}

// required .ConfigActivity.KeyLuxuryGift keyluxurygift = 16;
inline bool Activities::has_keyluxurygift() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Activities::set_has_keyluxurygift() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Activities::clear_has_keyluxurygift() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Activities::clear_keyluxurygift() {
  if (keyluxurygift_ != NULL) keyluxurygift_->::ConfigActivity::KeyLuxuryGift::Clear();
  clear_has_keyluxurygift();
}
inline const ::ConfigActivity::KeyLuxuryGift& Activities::keyluxurygift() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.keyluxurygift)
  return keyluxurygift_ != NULL ? *keyluxurygift_ : *default_instance_->keyluxurygift_;
}
inline ::ConfigActivity::KeyLuxuryGift* Activities::mutable_keyluxurygift() {
  set_has_keyluxurygift();
  if (keyluxurygift_ == NULL) keyluxurygift_ = new ::ConfigActivity::KeyLuxuryGift;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.keyluxurygift)
  return keyluxurygift_;
}
inline ::ConfigActivity::KeyLuxuryGift* Activities::release_keyluxurygift() {
  clear_has_keyluxurygift();
  ::ConfigActivity::KeyLuxuryGift* temp = keyluxurygift_;
  keyluxurygift_ = NULL;
  return temp;
}
inline void Activities::set_allocated_keyluxurygift(::ConfigActivity::KeyLuxuryGift* keyluxurygift) {
  delete keyluxurygift_;
  keyluxurygift_ = keyluxurygift;
  if (keyluxurygift) {
    set_has_keyluxurygift();
  } else {
    clear_has_keyluxurygift();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.keyluxurygift)
}

// required .ConfigActivity.EnjoySmallGiftReward enjoy_smallgift = 17;
inline bool Activities::has_enjoy_smallgift() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Activities::set_has_enjoy_smallgift() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Activities::clear_has_enjoy_smallgift() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Activities::clear_enjoy_smallgift() {
  if (enjoy_smallgift_ != NULL) enjoy_smallgift_->::ConfigActivity::EnjoySmallGiftReward::Clear();
  clear_has_enjoy_smallgift();
}
inline const ::ConfigActivity::EnjoySmallGiftReward& Activities::enjoy_smallgift() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.enjoy_smallgift)
  return enjoy_smallgift_ != NULL ? *enjoy_smallgift_ : *default_instance_->enjoy_smallgift_;
}
inline ::ConfigActivity::EnjoySmallGiftReward* Activities::mutable_enjoy_smallgift() {
  set_has_enjoy_smallgift();
  if (enjoy_smallgift_ == NULL) enjoy_smallgift_ = new ::ConfigActivity::EnjoySmallGiftReward;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.enjoy_smallgift)
  return enjoy_smallgift_;
}
inline ::ConfigActivity::EnjoySmallGiftReward* Activities::release_enjoy_smallgift() {
  clear_has_enjoy_smallgift();
  ::ConfigActivity::EnjoySmallGiftReward* temp = enjoy_smallgift_;
  enjoy_smallgift_ = NULL;
  return temp;
}
inline void Activities::set_allocated_enjoy_smallgift(::ConfigActivity::EnjoySmallGiftReward* enjoy_smallgift) {
  delete enjoy_smallgift_;
  enjoy_smallgift_ = enjoy_smallgift;
  if (enjoy_smallgift) {
    set_has_enjoy_smallgift();
  } else {
    clear_has_enjoy_smallgift();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.enjoy_smallgift)
}

// required .ConfigActivity.LuckyGift lucky_gift = 18;
inline bool Activities::has_lucky_gift() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Activities::set_has_lucky_gift() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Activities::clear_has_lucky_gift() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Activities::clear_lucky_gift() {
  if (lucky_gift_ != NULL) lucky_gift_->::ConfigActivity::LuckyGift::Clear();
  clear_has_lucky_gift();
}
inline const ::ConfigActivity::LuckyGift& Activities::lucky_gift() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.lucky_gift)
  return lucky_gift_ != NULL ? *lucky_gift_ : *default_instance_->lucky_gift_;
}
inline ::ConfigActivity::LuckyGift* Activities::mutable_lucky_gift() {
  set_has_lucky_gift();
  if (lucky_gift_ == NULL) lucky_gift_ = new ::ConfigActivity::LuckyGift;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.lucky_gift)
  return lucky_gift_;
}
inline ::ConfigActivity::LuckyGift* Activities::release_lucky_gift() {
  clear_has_lucky_gift();
  ::ConfigActivity::LuckyGift* temp = lucky_gift_;
  lucky_gift_ = NULL;
  return temp;
}
inline void Activities::set_allocated_lucky_gift(::ConfigActivity::LuckyGift* lucky_gift) {
  delete lucky_gift_;
  lucky_gift_ = lucky_gift;
  if (lucky_gift) {
    set_has_lucky_gift();
  } else {
    clear_has_lucky_gift();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.lucky_gift)
}

// repeated .ConfigActivity.DiamondReward year_endgift = 19;
inline int Activities::year_endgift_size() const {
  return year_endgift_.size();
}
inline void Activities::clear_year_endgift() {
  year_endgift_.Clear();
}
inline const ::ConfigActivity::DiamondReward& Activities::year_endgift(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.year_endgift)
  return year_endgift_.Get(index);
}
inline ::ConfigActivity::DiamondReward* Activities::mutable_year_endgift(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.year_endgift)
  return year_endgift_.Mutable(index);
}
inline ::ConfigActivity::DiamondReward* Activities::add_year_endgift() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.year_endgift)
  return year_endgift_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >&
Activities::year_endgift() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.year_endgift)
  return year_endgift_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::DiamondReward >*
Activities::mutable_year_endgift() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.year_endgift)
  return &year_endgift_;
}

// required .ConfigActivity.NewYearActivity newyearactivity = 20;
inline bool Activities::has_newyearactivity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Activities::set_has_newyearactivity() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Activities::clear_has_newyearactivity() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Activities::clear_newyearactivity() {
  if (newyearactivity_ != NULL) newyearactivity_->::ConfigActivity::NewYearActivity::Clear();
  clear_has_newyearactivity();
}
inline const ::ConfigActivity::NewYearActivity& Activities::newyearactivity() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.newyearactivity)
  return newyearactivity_ != NULL ? *newyearactivity_ : *default_instance_->newyearactivity_;
}
inline ::ConfigActivity::NewYearActivity* Activities::mutable_newyearactivity() {
  set_has_newyearactivity();
  if (newyearactivity_ == NULL) newyearactivity_ = new ::ConfigActivity::NewYearActivity;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.newyearactivity)
  return newyearactivity_;
}
inline ::ConfigActivity::NewYearActivity* Activities::release_newyearactivity() {
  clear_has_newyearactivity();
  ::ConfigActivity::NewYearActivity* temp = newyearactivity_;
  newyearactivity_ = NULL;
  return temp;
}
inline void Activities::set_allocated_newyearactivity(::ConfigActivity::NewYearActivity* newyearactivity) {
  delete newyearactivity_;
  newyearactivity_ = newyearactivity;
  if (newyearactivity) {
    set_has_newyearactivity();
  } else {
    clear_has_newyearactivity();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.newyearactivity)
}

// required .ConfigActivity.KaiFuGift kaifu = 21;
inline bool Activities::has_kaifu() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Activities::set_has_kaifu() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Activities::clear_has_kaifu() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Activities::clear_kaifu() {
  if (kaifu_ != NULL) kaifu_->::ConfigActivity::KaiFuGift::Clear();
  clear_has_kaifu();
}
inline const ::ConfigActivity::KaiFuGift& Activities::kaifu() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.kaifu)
  return kaifu_ != NULL ? *kaifu_ : *default_instance_->kaifu_;
}
inline ::ConfigActivity::KaiFuGift* Activities::mutable_kaifu() {
  set_has_kaifu();
  if (kaifu_ == NULL) kaifu_ = new ::ConfigActivity::KaiFuGift;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.kaifu)
  return kaifu_;
}
inline ::ConfigActivity::KaiFuGift* Activities::release_kaifu() {
  clear_has_kaifu();
  ::ConfigActivity::KaiFuGift* temp = kaifu_;
  kaifu_ = NULL;
  return temp;
}
inline void Activities::set_allocated_kaifu(::ConfigActivity::KaiFuGift* kaifu) {
  delete kaifu_;
  kaifu_ = kaifu;
  if (kaifu) {
    set_has_kaifu();
  } else {
    clear_has_kaifu();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.kaifu)
}

// required .ConfigActivity.StarStoneChange starstone = 22;
inline bool Activities::has_starstone() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Activities::set_has_starstone() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Activities::clear_has_starstone() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Activities::clear_starstone() {
  if (starstone_ != NULL) starstone_->::ConfigActivity::StarStoneChange::Clear();
  clear_has_starstone();
}
inline const ::ConfigActivity::StarStoneChange& Activities::starstone() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.starstone)
  return starstone_ != NULL ? *starstone_ : *default_instance_->starstone_;
}
inline ::ConfigActivity::StarStoneChange* Activities::mutable_starstone() {
  set_has_starstone();
  if (starstone_ == NULL) starstone_ = new ::ConfigActivity::StarStoneChange;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.starstone)
  return starstone_;
}
inline ::ConfigActivity::StarStoneChange* Activities::release_starstone() {
  clear_has_starstone();
  ::ConfigActivity::StarStoneChange* temp = starstone_;
  starstone_ = NULL;
  return temp;
}
inline void Activities::set_allocated_starstone(::ConfigActivity::StarStoneChange* starstone) {
  delete starstone_;
  starstone_ = starstone;
  if (starstone) {
    set_has_starstone();
  } else {
    clear_has_starstone();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.starstone)
}

// required .ConfigActivity.HongBao newyearactive = 23;
inline bool Activities::has_newyearactive() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Activities::set_has_newyearactive() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Activities::clear_has_newyearactive() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Activities::clear_newyearactive() {
  if (newyearactive_ != NULL) newyearactive_->::ConfigActivity::HongBao::Clear();
  clear_has_newyearactive();
}
inline const ::ConfigActivity::HongBao& Activities::newyearactive() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.newyearactive)
  return newyearactive_ != NULL ? *newyearactive_ : *default_instance_->newyearactive_;
}
inline ::ConfigActivity::HongBao* Activities::mutable_newyearactive() {
  set_has_newyearactive();
  if (newyearactive_ == NULL) newyearactive_ = new ::ConfigActivity::HongBao;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.newyearactive)
  return newyearactive_;
}
inline ::ConfigActivity::HongBao* Activities::release_newyearactive() {
  clear_has_newyearactive();
  ::ConfigActivity::HongBao* temp = newyearactive_;
  newyearactive_ = NULL;
  return temp;
}
inline void Activities::set_allocated_newyearactive(::ConfigActivity::HongBao* newyearactive) {
  delete newyearactive_;
  newyearactive_ = newyearactive;
  if (newyearactive) {
    set_has_newyearactive();
  } else {
    clear_has_newyearactive();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.newyearactive)
}

// repeated .ConfigActivity.TaskGift HebdomadReward = 24;
inline int Activities::hebdomadreward_size() const {
  return hebdomadreward_.size();
}
inline void Activities::clear_hebdomadreward() {
  hebdomadreward_.Clear();
}
inline const ::ConfigActivity::TaskGift& Activities::hebdomadreward(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.HebdomadReward)
  return hebdomadreward_.Get(index);
}
inline ::ConfigActivity::TaskGift* Activities::mutable_hebdomadreward(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.HebdomadReward)
  return hebdomadreward_.Mutable(index);
}
inline ::ConfigActivity::TaskGift* Activities::add_hebdomadreward() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.HebdomadReward)
  return hebdomadreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TaskGift >&
Activities::hebdomadreward() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.HebdomadReward)
  return hebdomadreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::TaskGift >*
Activities::mutable_hebdomadreward() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.HebdomadReward)
  return &hebdomadreward_;
}

// required .ConfigActivity.RotaryTableCrazyReward rotary_table = 25;
inline bool Activities::has_rotary_table() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Activities::set_has_rotary_table() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Activities::clear_has_rotary_table() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Activities::clear_rotary_table() {
  if (rotary_table_ != NULL) rotary_table_->::ConfigActivity::RotaryTableCrazyReward::Clear();
  clear_has_rotary_table();
}
inline const ::ConfigActivity::RotaryTableCrazyReward& Activities::rotary_table() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.rotary_table)
  return rotary_table_ != NULL ? *rotary_table_ : *default_instance_->rotary_table_;
}
inline ::ConfigActivity::RotaryTableCrazyReward* Activities::mutable_rotary_table() {
  set_has_rotary_table();
  if (rotary_table_ == NULL) rotary_table_ = new ::ConfigActivity::RotaryTableCrazyReward;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.rotary_table)
  return rotary_table_;
}
inline ::ConfigActivity::RotaryTableCrazyReward* Activities::release_rotary_table() {
  clear_has_rotary_table();
  ::ConfigActivity::RotaryTableCrazyReward* temp = rotary_table_;
  rotary_table_ = NULL;
  return temp;
}
inline void Activities::set_allocated_rotary_table(::ConfigActivity::RotaryTableCrazyReward* rotary_table) {
  delete rotary_table_;
  rotary_table_ = rotary_table;
  if (rotary_table) {
    set_has_rotary_table();
  } else {
    clear_has_rotary_table();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.rotary_table)
}

// required .ConfigActivity.BatmanTreasureCfg batmantreasure = 26;
inline bool Activities::has_batmantreasure() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Activities::set_has_batmantreasure() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Activities::clear_has_batmantreasure() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Activities::clear_batmantreasure() {
  if (batmantreasure_ != NULL) batmantreasure_->::ConfigActivity::BatmanTreasureCfg::Clear();
  clear_has_batmantreasure();
}
inline const ::ConfigActivity::BatmanTreasureCfg& Activities::batmantreasure() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.batmantreasure)
  return batmantreasure_ != NULL ? *batmantreasure_ : *default_instance_->batmantreasure_;
}
inline ::ConfigActivity::BatmanTreasureCfg* Activities::mutable_batmantreasure() {
  set_has_batmantreasure();
  if (batmantreasure_ == NULL) batmantreasure_ = new ::ConfigActivity::BatmanTreasureCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.batmantreasure)
  return batmantreasure_;
}
inline ::ConfigActivity::BatmanTreasureCfg* Activities::release_batmantreasure() {
  clear_has_batmantreasure();
  ::ConfigActivity::BatmanTreasureCfg* temp = batmantreasure_;
  batmantreasure_ = NULL;
  return temp;
}
inline void Activities::set_allocated_batmantreasure(::ConfigActivity::BatmanTreasureCfg* batmantreasure) {
  delete batmantreasure_;
  batmantreasure_ = batmantreasure;
  if (batmantreasure) {
    set_has_batmantreasure();
  } else {
    clear_has_batmantreasure();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.batmantreasure)
}

// required .ConfigActivity.SummerChargeRewardCfg summer_charge = 27;
inline bool Activities::has_summer_charge() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Activities::set_has_summer_charge() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Activities::clear_has_summer_charge() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Activities::clear_summer_charge() {
  if (summer_charge_ != NULL) summer_charge_->::ConfigActivity::SummerChargeRewardCfg::Clear();
  clear_has_summer_charge();
}
inline const ::ConfigActivity::SummerChargeRewardCfg& Activities::summer_charge() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.summer_charge)
  return summer_charge_ != NULL ? *summer_charge_ : *default_instance_->summer_charge_;
}
inline ::ConfigActivity::SummerChargeRewardCfg* Activities::mutable_summer_charge() {
  set_has_summer_charge();
  if (summer_charge_ == NULL) summer_charge_ = new ::ConfigActivity::SummerChargeRewardCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.summer_charge)
  return summer_charge_;
}
inline ::ConfigActivity::SummerChargeRewardCfg* Activities::release_summer_charge() {
  clear_has_summer_charge();
  ::ConfigActivity::SummerChargeRewardCfg* temp = summer_charge_;
  summer_charge_ = NULL;
  return temp;
}
inline void Activities::set_allocated_summer_charge(::ConfigActivity::SummerChargeRewardCfg* summer_charge) {
  delete summer_charge_;
  summer_charge_ = summer_charge;
  if (summer_charge) {
    set_has_summer_charge();
  } else {
    clear_has_summer_charge();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.summer_charge)
}

// required .ConfigActivity.SummerHolidaysRewardCfg summer_holidays = 28;
inline bool Activities::has_summer_holidays() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Activities::set_has_summer_holidays() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Activities::clear_has_summer_holidays() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Activities::clear_summer_holidays() {
  if (summer_holidays_ != NULL) summer_holidays_->::ConfigActivity::SummerHolidaysRewardCfg::Clear();
  clear_has_summer_holidays();
}
inline const ::ConfigActivity::SummerHolidaysRewardCfg& Activities::summer_holidays() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.summer_holidays)
  return summer_holidays_ != NULL ? *summer_holidays_ : *default_instance_->summer_holidays_;
}
inline ::ConfigActivity::SummerHolidaysRewardCfg* Activities::mutable_summer_holidays() {
  set_has_summer_holidays();
  if (summer_holidays_ == NULL) summer_holidays_ = new ::ConfigActivity::SummerHolidaysRewardCfg;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.summer_holidays)
  return summer_holidays_;
}
inline ::ConfigActivity::SummerHolidaysRewardCfg* Activities::release_summer_holidays() {
  clear_has_summer_holidays();
  ::ConfigActivity::SummerHolidaysRewardCfg* temp = summer_holidays_;
  summer_holidays_ = NULL;
  return temp;
}
inline void Activities::set_allocated_summer_holidays(::ConfigActivity::SummerHolidaysRewardCfg* summer_holidays) {
  delete summer_holidays_;
  summer_holidays_ = summer_holidays;
  if (summer_holidays) {
    set_has_summer_holidays();
  } else {
    clear_has_summer_holidays();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.summer_holidays)
}

// required .ConfigActivity.ChinaDayActivity chinadayavtivity = 29;
inline bool Activities::has_chinadayavtivity() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Activities::set_has_chinadayavtivity() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Activities::clear_has_chinadayavtivity() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Activities::clear_chinadayavtivity() {
  if (chinadayavtivity_ != NULL) chinadayavtivity_->::ConfigActivity::ChinaDayActivity::Clear();
  clear_has_chinadayavtivity();
}
inline const ::ConfigActivity::ChinaDayActivity& Activities::chinadayavtivity() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.chinadayavtivity)
  return chinadayavtivity_ != NULL ? *chinadayavtivity_ : *default_instance_->chinadayavtivity_;
}
inline ::ConfigActivity::ChinaDayActivity* Activities::mutable_chinadayavtivity() {
  set_has_chinadayavtivity();
  if (chinadayavtivity_ == NULL) chinadayavtivity_ = new ::ConfigActivity::ChinaDayActivity;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.chinadayavtivity)
  return chinadayavtivity_;
}
inline ::ConfigActivity::ChinaDayActivity* Activities::release_chinadayavtivity() {
  clear_has_chinadayavtivity();
  ::ConfigActivity::ChinaDayActivity* temp = chinadayavtivity_;
  chinadayavtivity_ = NULL;
  return temp;
}
inline void Activities::set_allocated_chinadayavtivity(::ConfigActivity::ChinaDayActivity* chinadayavtivity) {
  delete chinadayavtivity_;
  chinadayavtivity_ = chinadayavtivity;
  if (chinadayavtivity) {
    set_has_chinadayavtivity();
  } else {
    clear_has_chinadayavtivity();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.chinadayavtivity)
}

// required .ConfigActivity.PayOptionalActivity payoptionalactivity = 30;
inline bool Activities::has_payoptionalactivity() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Activities::set_has_payoptionalactivity() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Activities::clear_has_payoptionalactivity() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Activities::clear_payoptionalactivity() {
  if (payoptionalactivity_ != NULL) payoptionalactivity_->::ConfigActivity::PayOptionalActivity::Clear();
  clear_has_payoptionalactivity();
}
inline const ::ConfigActivity::PayOptionalActivity& Activities::payoptionalactivity() const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.payoptionalactivity)
  return payoptionalactivity_ != NULL ? *payoptionalactivity_ : *default_instance_->payoptionalactivity_;
}
inline ::ConfigActivity::PayOptionalActivity* Activities::mutable_payoptionalactivity() {
  set_has_payoptionalactivity();
  if (payoptionalactivity_ == NULL) payoptionalactivity_ = new ::ConfigActivity::PayOptionalActivity;
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.payoptionalactivity)
  return payoptionalactivity_;
}
inline ::ConfigActivity::PayOptionalActivity* Activities::release_payoptionalactivity() {
  clear_has_payoptionalactivity();
  ::ConfigActivity::PayOptionalActivity* temp = payoptionalactivity_;
  payoptionalactivity_ = NULL;
  return temp;
}
inline void Activities::set_allocated_payoptionalactivity(::ConfigActivity::PayOptionalActivity* payoptionalactivity) {
  delete payoptionalactivity_;
  payoptionalactivity_ = payoptionalactivity;
  if (payoptionalactivity) {
    set_has_payoptionalactivity();
  } else {
    clear_has_payoptionalactivity();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigActivity.Activities.payoptionalactivity)
}

// repeated .ConfigActivity.FreeExchange free_exchg = 31;
inline int Activities::free_exchg_size() const {
  return free_exchg_.size();
}
inline void Activities::clear_free_exchg() {
  free_exchg_.Clear();
}
inline const ::ConfigActivity::FreeExchange& Activities::free_exchg(int index) const {
  // @@protoc_insertion_point(field_get:ConfigActivity.Activities.free_exchg)
  return free_exchg_.Get(index);
}
inline ::ConfigActivity::FreeExchange* Activities::mutable_free_exchg(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigActivity.Activities.free_exchg)
  return free_exchg_.Mutable(index);
}
inline ::ConfigActivity::FreeExchange* Activities::add_free_exchg() {
  // @@protoc_insertion_point(field_add:ConfigActivity.Activities.free_exchg)
  return free_exchg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchange >&
Activities::free_exchg() const {
  // @@protoc_insertion_point(field_list:ConfigActivity.Activities.free_exchg)
  return free_exchg_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigActivity::FreeExchange >*
Activities::mutable_free_exchg() {
  // @@protoc_insertion_point(field_mutable_list:ConfigActivity.Activities.free_exchg)
  return &free_exchg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigActivity

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConfigActivity_2eproto__INCLUDED
