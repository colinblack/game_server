// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigActivity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigActivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigActivity {

namespace {

const ::google::protobuf::Descriptor* BuildSuitItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildSuitItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlessPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlessPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostCoefficient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostCoefficient_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiamondReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiamondReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiamondRewardLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiamondRewardLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiamondMoreReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiamondMoreReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleWelfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleWelfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* PearlAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PearlAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniqueKnowledgeDial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniqueKnowledgeDial_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpriteVitalityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpriteVitalityItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForgeSmelt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForgeSmelt_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroDial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroDial_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlackGoldEnhance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlackGoldEnhance_reflection_ = NULL;
const ::google::protobuf::Descriptor* KingdomWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KingdomWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneDiamondWelfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneDiamondWelfare_reflection_ = NULL;
const ::google::protobuf::Descriptor* FortunePacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FortunePacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* SevenDayPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SevenDayPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* StuffItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StuffItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyLuxuryGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyLuxuryGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsumeGiftItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsumeGiftItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnjoySmallGiftReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnjoySmallGiftReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnTableItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnTableItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckyGiftItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckyGiftItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckyGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckyGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewYearActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewYearActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChinaDayActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChinaDayActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayOptionalActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayOptionalActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSoulLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSoulLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSoulGrowth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSoulGrowth_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgWuhun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgWuhun_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgJuexue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgJuexue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHeaven_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHeaven_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDaoist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDaoist_reflection_ = NULL;
const ::google::protobuf::Descriptor* KaifuAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KaifuAchievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* KaifuDiscountShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KaifuDiscountShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* KaiFuGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KaiFuGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* StarStoneChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarStoneChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* HongBaoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HongBaoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* HongBao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HongBao_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotaryTableCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotaryTableCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotaryTableCrazyReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotaryTableCrazyReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeGetChanceCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeGetChanceCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotaryTableFeedBackReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotaryTableFeedBackReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatmanTreasureDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatmanTreasureDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatmanTreasureCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatmanTreasureCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummerChargeRewardCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummerChargeRewardCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummerHolidaysTicketCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummerHolidaysTicketCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummerHolidaysRewardCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummerHolidaysRewardCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreeExchangeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreeExchangeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreeExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreeExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activities_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigActivity_2eproto() {
  protobuf_AddDesc_ConfigActivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigActivity.proto");
  GOOGLE_CHECK(file != NULL);
  BuildSuitItem_descriptor_ = file->message_type(0);
  static const int BuildSuitItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildSuitItem, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildSuitItem, reward_),
  };
  BuildSuitItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildSuitItem_descriptor_,
      BuildSuitItem::default_instance_,
      BuildSuitItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildSuitItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildSuitItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildSuitItem));
  ExchangeItem_descriptor_ = file->message_type(1);
  static const int ExchangeItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItem, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItem, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItem, accumulate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItem, reward_),
  };
  ExchangeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeItem_descriptor_,
      ExchangeItem::default_instance_,
      ExchangeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeItem));
  BlessPoint_descriptor_ = file->message_type(2);
  static const int BlessPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessPoint, exchange_),
  };
  BlessPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlessPoint_descriptor_,
      BlessPoint::default_instance_,
      BlessPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlessPoint));
  CostCoefficient_descriptor_ = file->message_type(3);
  static const int CostCoefficient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCoefficient, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCoefficient, coefficient_),
  };
  CostCoefficient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostCoefficient_descriptor_,
      CostCoefficient::default_instance_,
      CostCoefficient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCoefficient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCoefficient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostCoefficient));
  DiamondReward_descriptor_ = file->message_type(4);
  static const int DiamondReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondReward, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondReward, reward_),
  };
  DiamondReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiamondReward_descriptor_,
      DiamondReward::default_instance_,
      DiamondReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiamondReward));
  DiamondRewardLimit_descriptor_ = file->message_type(5);
  static const int DiamondRewardLimit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondRewardLimit, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondRewardLimit, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondRewardLimit, reward_),
  };
  DiamondRewardLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiamondRewardLimit_descriptor_,
      DiamondRewardLimit::default_instance_,
      DiamondRewardLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondRewardLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondRewardLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiamondRewardLimit));
  DiamondMoreReward_descriptor_ = file->message_type(6);
  static const int DiamondMoreReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondMoreReward, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondMoreReward, reward_),
  };
  DiamondMoreReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiamondMoreReward_descriptor_,
      DiamondMoreReward::default_instance_,
      DiamondMoreReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondMoreReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiamondMoreReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiamondMoreReward));
  DoubleWelfare_descriptor_ = file->message_type(7);
  static const int DoubleWelfare_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleWelfare, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleWelfare, cost_coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleWelfare, extra_reward_),
  };
  DoubleWelfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleWelfare_descriptor_,
      DoubleWelfare::default_instance_,
      DoubleWelfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleWelfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleWelfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleWelfare));
  PearlAdvance_descriptor_ = file->message_type(8);
  static const int PearlAdvance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PearlAdvance, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PearlAdvance, maximum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PearlAdvance, cond_eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PearlAdvance, reward_),
  };
  PearlAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PearlAdvance_descriptor_,
      PearlAdvance::default_instance_,
      PearlAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PearlAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PearlAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PearlAdvance));
  UniqueKnowledgeDial_descriptor_ = file->message_type(9);
  static const int UniqueKnowledgeDial_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueKnowledgeDial, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueKnowledgeDial, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueKnowledgeDial, item_),
  };
  UniqueKnowledgeDial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UniqueKnowledgeDial_descriptor_,
      UniqueKnowledgeDial::default_instance_,
      UniqueKnowledgeDial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueKnowledgeDial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueKnowledgeDial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UniqueKnowledgeDial));
  SpriteVitalityItem_descriptor_ = file->message_type(10);
  static const int SpriteVitalityItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteVitalityItem, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteVitalityItem, reward_),
  };
  SpriteVitalityItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpriteVitalityItem_descriptor_,
      SpriteVitalityItem::default_instance_,
      SpriteVitalityItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteVitalityItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpriteVitalityItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpriteVitalityItem));
  SmeltItem_descriptor_ = file->message_type(11);
  static const int SmeltItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, get_),
  };
  SmeltItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltItem_descriptor_,
      SmeltItem::default_instance_,
      SmeltItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltItem));
  ShopItem_descriptor_ = file->message_type(12);
  static const int ShopItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, forgecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, item_),
  };
  ShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopItem_descriptor_,
      ShopItem::default_instance_,
      ShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopItem));
  ForgeSmelt_descriptor_ = file->message_type(13);
  static const int ForgeSmelt_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgeSmelt, daily_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgeSmelt, forge_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgeSmelt, smelt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgeSmelt, shop_),
  };
  ForgeSmelt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForgeSmelt_descriptor_,
      ForgeSmelt::default_instance_,
      ForgeSmelt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgeSmelt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForgeSmelt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForgeSmelt));
  HeroItem_descriptor_ = file->message_type(14);
  static const int HeroItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroItem, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroItem, reward_),
  };
  HeroItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroItem_descriptor_,
      HeroItem::default_instance_,
      HeroItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroItem));
  HeroDial_descriptor_ = file->message_type(15);
  static const int HeroDial_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDial, per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDial, heroes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDial, limit_),
  };
  HeroDial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroDial_descriptor_,
      HeroDial::default_instance_,
      HeroDial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroDial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroDial));
  BlackGoldEnhance_descriptor_ = file->message_type(16);
  static const int BlackGoldEnhance_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackGoldEnhance, first_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackGoldEnhance, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackGoldEnhance, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackGoldEnhance, accumulate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackGoldEnhance, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackGoldEnhance, reward_),
  };
  BlackGoldEnhance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlackGoldEnhance_descriptor_,
      BlackGoldEnhance::default_instance_,
      BlackGoldEnhance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackGoldEnhance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlackGoldEnhance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlackGoldEnhance));
  KingdomWar_descriptor_ = file->message_type(17);
  static const int KingdomWar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingdomWar, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingdomWar, reward_),
  };
  KingdomWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KingdomWar_descriptor_,
      KingdomWar::default_instance_,
      KingdomWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingdomWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingdomWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KingdomWar));
  RewardItem_descriptor_ = file->message_type(18);
  static const int RewardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, reward_),
  };
  RewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardItem_descriptor_,
      RewardItem::default_instance_,
      RewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardItem));
  OneDiamondWelfare_descriptor_ = file->message_type(19);
  static const int OneDiamondWelfare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneDiamondWelfare, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneDiamondWelfare, items_),
  };
  OneDiamondWelfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneDiamondWelfare_descriptor_,
      OneDiamondWelfare::default_instance_,
      OneDiamondWelfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneDiamondWelfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneDiamondWelfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneDiamondWelfare));
  FortunePacks_descriptor_ = file->message_type(20);
  static const int FortunePacks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortunePacks, extra_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortunePacks, goods_),
  };
  FortunePacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FortunePacks_descriptor_,
      FortunePacks::default_instance_,
      FortunePacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortunePacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FortunePacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FortunePacks));
  SevenDayPacks_descriptor_ = file->message_type(21);
  static const int SevenDayPacks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayPacks, reward_),
  };
  SevenDayPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SevenDayPacks_descriptor_,
      SevenDayPacks::default_instance_,
      SevenDayPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SevenDayPacks));
  ChargeKey_descriptor_ = file->message_type(22);
  static const int ChargeKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeKey, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeKey, keynum_),
  };
  ChargeKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeKey_descriptor_,
      ChargeKey::default_instance_,
      ChargeKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeKey));
  StuffItem_descriptor_ = file->message_type(23);
  static const int StuffItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StuffItem, costkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StuffItem, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StuffItem, reward_),
  };
  StuffItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StuffItem_descriptor_,
      StuffItem::default_instance_,
      StuffItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StuffItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StuffItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StuffItem));
  KeyLuxuryGift_descriptor_ = file->message_type(24);
  static const int KeyLuxuryGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyLuxuryGift, charge_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyLuxuryGift, stuff_items_),
  };
  KeyLuxuryGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyLuxuryGift_descriptor_,
      KeyLuxuryGift::default_instance_,
      KeyLuxuryGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyLuxuryGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyLuxuryGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyLuxuryGift));
  ConsumeGiftItem_descriptor_ = file->message_type(25);
  static const int ConsumeGiftItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeGiftItem, consume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeGiftItem, reward_),
  };
  ConsumeGiftItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsumeGiftItem_descriptor_,
      ConsumeGiftItem::default_instance_,
      ConsumeGiftItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeGiftItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumeGiftItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsumeGiftItem));
  EnjoySmallGiftReward_descriptor_ = file->message_type(26);
  static const int EnjoySmallGiftReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnjoySmallGiftReward, charge_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnjoySmallGiftReward, consume_gift_),
  };
  EnjoySmallGiftReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnjoySmallGiftReward_descriptor_,
      EnjoySmallGiftReward::default_instance_,
      EnjoySmallGiftReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnjoySmallGiftReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnjoySmallGiftReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnjoySmallGiftReward));
  TurnTableItem_descriptor_ = file->message_type(27);
  static const int TurnTableItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnTableItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnTableItem, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnTableItem, reward_),
  };
  TurnTableItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnTableItem_descriptor_,
      TurnTableItem::default_instance_,
      TurnTableItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnTableItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnTableItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnTableItem));
  LuckyGiftItem_descriptor_ = file->message_type(28);
  static const int LuckyGiftItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyGiftItem, items_),
  };
  LuckyGiftItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckyGiftItem_descriptor_,
      LuckyGiftItem::default_instance_,
      LuckyGiftItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyGiftItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyGiftItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckyGiftItem));
  LuckyGift_descriptor_ = file->message_type(29);
  static const int LuckyGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyGift, keycost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyGift, pointcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyGift, stuff_items_),
  };
  LuckyGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckyGift_descriptor_,
      LuckyGift::default_instance_,
      LuckyGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckyGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckyGift));
  NewYearActivity_descriptor_ = file->message_type(30);
  static const int NewYearActivity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActivity, charge_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActivity, buy_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActivity, online_reward_),
  };
  NewYearActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewYearActivity_descriptor_,
      NewYearActivity::default_instance_,
      NewYearActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewYearActivity));
  ChinaDayActivity_descriptor_ = file->message_type(31);
  static const int ChinaDayActivity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChinaDayActivity, charge_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChinaDayActivity, everyday_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChinaDayActivity, online_reward_),
  };
  ChinaDayActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChinaDayActivity_descriptor_,
      ChinaDayActivity::default_instance_,
      ChinaDayActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChinaDayActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChinaDayActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChinaDayActivity));
  PayOptionalActivity_descriptor_ = file->message_type(32);
  static const int PayOptionalActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOptionalActivity, optional_reward_),
  };
  PayOptionalActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayOptionalActivity_descriptor_,
      PayOptionalActivity::default_instance_,
      PayOptionalActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOptionalActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOptionalActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayOptionalActivity));
  MsgSoulLevel_descriptor_ = file->message_type(33);
  static const int MsgSoulLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSoulLevel, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSoulLevel, reward_),
  };
  MsgSoulLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSoulLevel_descriptor_,
      MsgSoulLevel::default_instance_,
      MsgSoulLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSoulLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSoulLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSoulLevel));
  MsgSoulGrowth_descriptor_ = file->message_type(34);
  static const int MsgSoulGrowth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSoulGrowth, growth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSoulGrowth, reward_),
  };
  MsgSoulGrowth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSoulGrowth_descriptor_,
      MsgSoulGrowth::default_instance_,
      MsgSoulGrowth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSoulGrowth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSoulGrowth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSoulGrowth));
  MsgWuhun_descriptor_ = file->message_type(35);
  static const int MsgWuhun_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWuhun, partcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWuhun, partlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWuhun, reward_),
  };
  MsgWuhun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgWuhun_descriptor_,
      MsgWuhun::default_instance_,
      MsgWuhun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWuhun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWuhun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgWuhun));
  MsgJuexue_descriptor_ = file->message_type(36);
  static const int MsgJuexue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJuexue, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJuexue, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJuexue, reward_),
  };
  MsgJuexue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgJuexue_descriptor_,
      MsgJuexue::default_instance_,
      MsgJuexue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJuexue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgJuexue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgJuexue));
  MsgStar_descriptor_ = file->message_type(37);
  static const int MsgStar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStar, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStar, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStar, reward_),
  };
  MsgStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStar_descriptor_,
      MsgStar::default_instance_,
      MsgStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStar));
  MsgHeaven_descriptor_ = file->message_type(38);
  static const int MsgHeaven_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeaven, jie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeaven, ceng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeaven, reward_),
  };
  MsgHeaven_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHeaven_descriptor_,
      MsgHeaven::default_instance_,
      MsgHeaven_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeaven, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeaven, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHeaven));
  MsgDaoist_descriptor_ = file->message_type(39);
  static const int MsgDaoist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDaoist, jie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDaoist, ceng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDaoist, reward_),
  };
  MsgDaoist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDaoist_descriptor_,
      MsgDaoist::default_instance_,
      MsgDaoist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDaoist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDaoist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDaoist));
  KaifuAchievement_descriptor_ = file->message_type(40);
  static const int KaifuAchievement_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuAchievement, soul_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuAchievement, soul_growth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuAchievement, wuhun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuAchievement, juexue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuAchievement, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuAchievement, heaven_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuAchievement, daoist_),
  };
  KaifuAchievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KaifuAchievement_descriptor_,
      KaifuAchievement::default_instance_,
      KaifuAchievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuAchievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuAchievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KaifuAchievement));
  KaifuDiscountShop_descriptor_ = file->message_type(41);
  static const int KaifuDiscountShop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuDiscountShop, o_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuDiscountShop, p_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuDiscountShop, item_),
  };
  KaifuDiscountShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KaifuDiscountShop_descriptor_,
      KaifuDiscountShop::default_instance_,
      KaifuDiscountShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuDiscountShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaifuDiscountShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KaifuDiscountShop));
  KaiFuGift_descriptor_ = file->message_type(42);
  static const int KaiFuGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaiFuGift, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaiFuGift, shop_),
  };
  KaiFuGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KaiFuGift_descriptor_,
      KaiFuGift::default_instance_,
      KaiFuGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaiFuGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KaiFuGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KaiFuGift));
  StarStoneChange_descriptor_ = file->message_type(43);
  static const int StarStoneChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarStoneChange, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarStoneChange, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarStoneChange, limit_),
  };
  StarStoneChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarStoneChange_descriptor_,
      StarStoneChange::default_instance_,
      StarStoneChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarStoneChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarStoneChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarStoneChange));
  HongBaoItem_descriptor_ = file->message_type(44);
  static const int HongBaoItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBaoItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBaoItem, rate_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBaoItem, rate_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBaoItem, reward_),
  };
  HongBaoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HongBaoItem_descriptor_,
      HongBaoItem::default_instance_,
      HongBaoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBaoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBaoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HongBaoItem));
  HongBao_descriptor_ = file->message_type(45);
  static const int HongBao_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBao, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBao, refresh_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBao, refresh_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBao, item_),
  };
  HongBao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HongBao_descriptor_,
      HongBao::default_instance_,
      HongBao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HongBao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HongBao));
  TaskGift_descriptor_ = file->message_type(46);
  static const int TaskGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskGift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskGift, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskGift, reward_),
  };
  TaskGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskGift_descriptor_,
      TaskGift::default_instance_,
      TaskGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskGift));
  RotaryTableCfg_descriptor_ = file->message_type(47);
  static const int RotaryTableCfg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, reward_),
  };
  RotaryTableCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotaryTableCfg_descriptor_,
      RotaryTableCfg::default_instance_,
      RotaryTableCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotaryTableCfg));
  RotaryTableCrazyReward_descriptor_ = file->message_type(48);
  static const int RotaryTableCrazyReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCrazyReward, chargereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCrazyReward, rotarytablecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCrazyReward, randomreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCrazyReward, fixedreward_),
  };
  RotaryTableCrazyReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotaryTableCrazyReward_descriptor_,
      RotaryTableCrazyReward::default_instance_,
      RotaryTableCrazyReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCrazyReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableCrazyReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotaryTableCrazyReward));
  ChargeGetChanceCfg_descriptor_ = file->message_type(49);
  static const int ChargeGetChanceCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeGetChanceCfg, need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeGetChanceCfg, c_),
  };
  ChargeGetChanceCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeGetChanceCfg_descriptor_,
      ChargeGetChanceCfg::default_instance_,
      ChargeGetChanceCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeGetChanceCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeGetChanceCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeGetChanceCfg));
  SingleReward_descriptor_ = file->message_type(50);
  static const int SingleReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleReward, reward_),
  };
  SingleReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleReward_descriptor_,
      SingleReward::default_instance_,
      SingleReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleReward));
  RotaryTableFeedBackReward_descriptor_ = file->message_type(51);
  static const int RotaryTableFeedBackReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableFeedBackReward, jindu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableFeedBackReward, singlereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableFeedBackReward, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableFeedBackReward, randomreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableFeedBackReward, fixedreward_),
  };
  RotaryTableFeedBackReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotaryTableFeedBackReward_descriptor_,
      RotaryTableFeedBackReward::default_instance_,
      RotaryTableFeedBackReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableFeedBackReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotaryTableFeedBackReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotaryTableFeedBackReward));
  BatmanTreasureDraw_descriptor_ = file->message_type(52);
  static const int BatmanTreasureDraw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureDraw, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureDraw, weight_),
  };
  BatmanTreasureDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatmanTreasureDraw_descriptor_,
      BatmanTreasureDraw::default_instance_,
      BatmanTreasureDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatmanTreasureDraw));
  BatmanTreasureCfg_descriptor_ = file->message_type(53);
  static const int BatmanTreasureCfg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureCfg, xiaobing_chargereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureCfg, unique_xiaobing_dial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureCfg, draw_cnt_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureCfg, draw_cost_integral_),
  };
  BatmanTreasureCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatmanTreasureCfg_descriptor_,
      BatmanTreasureCfg::default_instance_,
      BatmanTreasureCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatmanTreasureCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatmanTreasureCfg));
  SummerChargeRewardCfg_descriptor_ = file->message_type(54);
  static const int SummerChargeRewardCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerChargeRewardCfg, daily_chargereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerChargeRewardCfg, acc_chargereward_),
  };
  SummerChargeRewardCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummerChargeRewardCfg_descriptor_,
      SummerChargeRewardCfg::default_instance_,
      SummerChargeRewardCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerChargeRewardCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerChargeRewardCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummerChargeRewardCfg));
  SummerHolidaysTicketCfg_descriptor_ = file->message_type(55);
  static const int SummerHolidaysTicketCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysTicketCfg, need_cost_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysTicketCfg, exchange_count_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysTicketCfg, reward_),
  };
  SummerHolidaysTicketCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummerHolidaysTicketCfg_descriptor_,
      SummerHolidaysTicketCfg::default_instance_,
      SummerHolidaysTicketCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysTicketCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysTicketCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummerHolidaysTicketCfg));
  SummerHolidaysRewardCfg_descriptor_ = file->message_type(56);
  static const int SummerHolidaysRewardCfg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysRewardCfg, exchange_ticket_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysRewardCfg, per_ticket_need_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysRewardCfg, summer_holidays_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysRewardCfg, chargereward_),
  };
  SummerHolidaysRewardCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummerHolidaysRewardCfg_descriptor_,
      SummerHolidaysRewardCfg::default_instance_,
      SummerHolidaysRewardCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysRewardCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerHolidaysRewardCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummerHolidaysRewardCfg));
  FreeExchangeItem_descriptor_ = file->message_type(57);
  static const int FreeExchangeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeExchangeItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeExchangeItem, c_),
  };
  FreeExchangeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreeExchangeItem_descriptor_,
      FreeExchangeItem::default_instance_,
      FreeExchangeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeExchangeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeExchangeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreeExchangeItem));
  FreeExchange_descriptor_ = file->message_type(58);
  static const int FreeExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeExchange, item_),
  };
  FreeExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreeExchange_descriptor_,
      FreeExchange::default_instance_,
      FreeExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreeExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreeExchange));
  Activities_descriptor_ = file->message_type(59);
  static const int Activities_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, buildsuit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, blesspoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, double_welfare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, pearl_advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, unique_knowledge_dial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, spiritvitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, forge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, herodial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, kingdomwar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, onediamondwelfare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, fortune_packs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, sevenday_packs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, icephoenix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, autumn_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, protectflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, keyluxurygift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, enjoy_smallgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, lucky_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, year_endgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, newyearactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, kaifu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, starstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, newyearactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, hebdomadreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, rotary_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, batmantreasure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, summer_charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, summer_holidays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, chinadayavtivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, payoptionalactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, free_exchg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, zhuanpanhuikui_),
  };
  Activities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activities_descriptor_,
      Activities::default_instance_,
      Activities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activities));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigActivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildSuitItem_descriptor_, &BuildSuitItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeItem_descriptor_, &ExchangeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlessPoint_descriptor_, &BlessPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostCoefficient_descriptor_, &CostCoefficient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiamondReward_descriptor_, &DiamondReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiamondRewardLimit_descriptor_, &DiamondRewardLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiamondMoreReward_descriptor_, &DiamondMoreReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleWelfare_descriptor_, &DoubleWelfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PearlAdvance_descriptor_, &PearlAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UniqueKnowledgeDial_descriptor_, &UniqueKnowledgeDial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpriteVitalityItem_descriptor_, &SpriteVitalityItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltItem_descriptor_, &SmeltItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopItem_descriptor_, &ShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForgeSmelt_descriptor_, &ForgeSmelt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroItem_descriptor_, &HeroItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroDial_descriptor_, &HeroDial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlackGoldEnhance_descriptor_, &BlackGoldEnhance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KingdomWar_descriptor_, &KingdomWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardItem_descriptor_, &RewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneDiamondWelfare_descriptor_, &OneDiamondWelfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FortunePacks_descriptor_, &FortunePacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SevenDayPacks_descriptor_, &SevenDayPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeKey_descriptor_, &ChargeKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StuffItem_descriptor_, &StuffItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyLuxuryGift_descriptor_, &KeyLuxuryGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsumeGiftItem_descriptor_, &ConsumeGiftItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnjoySmallGiftReward_descriptor_, &EnjoySmallGiftReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnTableItem_descriptor_, &TurnTableItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckyGiftItem_descriptor_, &LuckyGiftItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckyGift_descriptor_, &LuckyGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewYearActivity_descriptor_, &NewYearActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChinaDayActivity_descriptor_, &ChinaDayActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayOptionalActivity_descriptor_, &PayOptionalActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSoulLevel_descriptor_, &MsgSoulLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSoulGrowth_descriptor_, &MsgSoulGrowth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgWuhun_descriptor_, &MsgWuhun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgJuexue_descriptor_, &MsgJuexue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStar_descriptor_, &MsgStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHeaven_descriptor_, &MsgHeaven::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDaoist_descriptor_, &MsgDaoist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KaifuAchievement_descriptor_, &KaifuAchievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KaifuDiscountShop_descriptor_, &KaifuDiscountShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KaiFuGift_descriptor_, &KaiFuGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarStoneChange_descriptor_, &StarStoneChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HongBaoItem_descriptor_, &HongBaoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HongBao_descriptor_, &HongBao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskGift_descriptor_, &TaskGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotaryTableCfg_descriptor_, &RotaryTableCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotaryTableCrazyReward_descriptor_, &RotaryTableCrazyReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeGetChanceCfg_descriptor_, &ChargeGetChanceCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleReward_descriptor_, &SingleReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotaryTableFeedBackReward_descriptor_, &RotaryTableFeedBackReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatmanTreasureDraw_descriptor_, &BatmanTreasureDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatmanTreasureCfg_descriptor_, &BatmanTreasureCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummerChargeRewardCfg_descriptor_, &SummerChargeRewardCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummerHolidaysTicketCfg_descriptor_, &SummerHolidaysTicketCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummerHolidaysRewardCfg_descriptor_, &SummerHolidaysRewardCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreeExchangeItem_descriptor_, &FreeExchangeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreeExchange_descriptor_, &FreeExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activities_descriptor_, &Activities::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigActivity_2eproto() {
  delete BuildSuitItem::default_instance_;
  delete BuildSuitItem_reflection_;
  delete ExchangeItem::default_instance_;
  delete ExchangeItem_reflection_;
  delete BlessPoint::default_instance_;
  delete BlessPoint_reflection_;
  delete CostCoefficient::default_instance_;
  delete CostCoefficient_reflection_;
  delete DiamondReward::default_instance_;
  delete DiamondReward_reflection_;
  delete DiamondRewardLimit::default_instance_;
  delete DiamondRewardLimit_reflection_;
  delete DiamondMoreReward::default_instance_;
  delete DiamondMoreReward_reflection_;
  delete DoubleWelfare::default_instance_;
  delete DoubleWelfare_reflection_;
  delete PearlAdvance::default_instance_;
  delete PearlAdvance_reflection_;
  delete UniqueKnowledgeDial::default_instance_;
  delete UniqueKnowledgeDial_reflection_;
  delete SpriteVitalityItem::default_instance_;
  delete SpriteVitalityItem_reflection_;
  delete SmeltItem::default_instance_;
  delete SmeltItem_reflection_;
  delete ShopItem::default_instance_;
  delete ShopItem_reflection_;
  delete ForgeSmelt::default_instance_;
  delete ForgeSmelt_reflection_;
  delete HeroItem::default_instance_;
  delete HeroItem_reflection_;
  delete HeroDial::default_instance_;
  delete HeroDial_reflection_;
  delete BlackGoldEnhance::default_instance_;
  delete BlackGoldEnhance_reflection_;
  delete KingdomWar::default_instance_;
  delete KingdomWar_reflection_;
  delete RewardItem::default_instance_;
  delete RewardItem_reflection_;
  delete OneDiamondWelfare::default_instance_;
  delete OneDiamondWelfare_reflection_;
  delete FortunePacks::default_instance_;
  delete FortunePacks_reflection_;
  delete SevenDayPacks::default_instance_;
  delete SevenDayPacks_reflection_;
  delete ChargeKey::default_instance_;
  delete ChargeKey_reflection_;
  delete StuffItem::default_instance_;
  delete StuffItem_reflection_;
  delete KeyLuxuryGift::default_instance_;
  delete KeyLuxuryGift_reflection_;
  delete ConsumeGiftItem::default_instance_;
  delete ConsumeGiftItem_reflection_;
  delete EnjoySmallGiftReward::default_instance_;
  delete EnjoySmallGiftReward_reflection_;
  delete TurnTableItem::default_instance_;
  delete TurnTableItem_reflection_;
  delete LuckyGiftItem::default_instance_;
  delete LuckyGiftItem_reflection_;
  delete LuckyGift::default_instance_;
  delete LuckyGift_reflection_;
  delete NewYearActivity::default_instance_;
  delete NewYearActivity_reflection_;
  delete ChinaDayActivity::default_instance_;
  delete ChinaDayActivity_reflection_;
  delete PayOptionalActivity::default_instance_;
  delete PayOptionalActivity_reflection_;
  delete MsgSoulLevel::default_instance_;
  delete MsgSoulLevel_reflection_;
  delete MsgSoulGrowth::default_instance_;
  delete MsgSoulGrowth_reflection_;
  delete MsgWuhun::default_instance_;
  delete MsgWuhun_reflection_;
  delete MsgJuexue::default_instance_;
  delete MsgJuexue_reflection_;
  delete MsgStar::default_instance_;
  delete MsgStar_reflection_;
  delete MsgHeaven::default_instance_;
  delete MsgHeaven_reflection_;
  delete MsgDaoist::default_instance_;
  delete MsgDaoist_reflection_;
  delete KaifuAchievement::default_instance_;
  delete KaifuAchievement_reflection_;
  delete KaifuDiscountShop::default_instance_;
  delete KaifuDiscountShop_reflection_;
  delete KaiFuGift::default_instance_;
  delete KaiFuGift_reflection_;
  delete StarStoneChange::default_instance_;
  delete StarStoneChange_reflection_;
  delete HongBaoItem::default_instance_;
  delete HongBaoItem_reflection_;
  delete HongBao::default_instance_;
  delete HongBao_reflection_;
  delete TaskGift::default_instance_;
  delete TaskGift_reflection_;
  delete RotaryTableCfg::default_instance_;
  delete RotaryTableCfg_reflection_;
  delete RotaryTableCrazyReward::default_instance_;
  delete RotaryTableCrazyReward_reflection_;
  delete ChargeGetChanceCfg::default_instance_;
  delete ChargeGetChanceCfg_reflection_;
  delete SingleReward::default_instance_;
  delete SingleReward_reflection_;
  delete RotaryTableFeedBackReward::default_instance_;
  delete RotaryTableFeedBackReward_reflection_;
  delete BatmanTreasureDraw::default_instance_;
  delete BatmanTreasureDraw_reflection_;
  delete BatmanTreasureCfg::default_instance_;
  delete BatmanTreasureCfg_reflection_;
  delete SummerChargeRewardCfg::default_instance_;
  delete SummerChargeRewardCfg_reflection_;
  delete SummerHolidaysTicketCfg::default_instance_;
  delete SummerHolidaysTicketCfg_reflection_;
  delete SummerHolidaysRewardCfg::default_instance_;
  delete SummerHolidaysRewardCfg_reflection_;
  delete FreeExchangeItem::default_instance_;
  delete FreeExchangeItem_reflection_;
  delete FreeExchange::default_instance_;
  delete FreeExchange_reflection_;
  delete Activities::default_instance_;
  delete Activities_reflection_;
}

void protobuf_AddDesc_ConfigActivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ConfigActivity.proto\022\016ConfigActivity\032\022"
    "RewardConfig.proto\"M\n\rBuildSuitItem\022\017\n\007d"
    "iamond\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132\033.RewardCon"
    "fig.RewardItemCfg\"q\n\014ExchangeItem\022\021\n\tcon"
    "dition\030\001 \003(\r\022\r\n\005first\030\002 \002(\r\022\022\n\naccumulat"
    "e\030\003 \002(\r\022+\n\006reward\030\004 \002(\0132\033.RewardConfig.R"
    "ewardItemCfg\"<\n\nBlessPoint\022.\n\010exchange\030\001"
    " \003(\0132\034.ConfigActivity.ExchangeItem\"4\n\017Co"
    "stCoefficient\022\014\n\004cost\030\001 \002(\r\022\023\n\013coefficie"
    "nt\030\002 \002(\001\"M\n\rDiamondReward\022\017\n\007diamond\030\001 \002"
    "(\r\022+\n\006reward\030\002 \002(\0132\033.RewardConfig.Reward"
    "ItemCfg\"a\n\022DiamondRewardLimit\022\017\n\007diamond"
    "\030\001 \002(\r\022\r\n\005limit\030\002 \002(\r\022+\n\006reward\030\003 \002(\0132\033."
    "RewardConfig.RewardItemCfg\"Q\n\021DiamondMor"
    "eReward\022\017\n\007diamond\030\001 \002(\r\022+\n\006reward\030\002 \003(\013"
    "2\033.RewardConfig.RewardItemCfg\"\220\001\n\rDouble"
    "Welfare\022\017\n\007maximum\030\001 \002(\r\0229\n\020cost_coeffic"
    "ient\030\002 \003(\0132\037.ConfigActivity.CostCoeffici"
    "ent\0223\n\014extra_reward\030\003 \003(\0132\035.ConfigActivi"
    "ty.DiamondReward\"m\n\014PearlAdvance\022\014\n\004cost"
    "\030\001 \002(\r\022\017\n\007maximum\030\002 \002(\r\022\021\n\tcond_eqid\030\003 \003"
    "(\r\022+\n\006reward\030\004 \002(\0132\033.RewardConfig.Reward"
    "ItemCfg\"\\\n\023UniqueKnowledgeDial\022\n\n\002id\030\001 \002"
    "(\r\022\016\n\006weight\030\002 \002(\r\022)\n\004item\030\003 \002(\0132\033.Rewar"
    "dConfig.RewardItemCfg\"R\n\022SpriteVitalityI"
    "tem\022\017\n\007diamond\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132\033.R"
    "ewardConfig.RewardItemCfg\"4\n\tSmeltItem\022\014"
    "\n\004eqid\030\001 \002(\r\022\014\n\004cost\030\002 \002(\r\022\013\n\003get\030\003 \002(\r\""
    "Y\n\010ShopItem\022\017\n\007diamond\030\001 \002(\r\022\021\n\tforgecos"
    "t\030\002 \002(\r\022)\n\004item\030\003 \002(\0132\033.RewardConfig.Rew"
    "ardItemCfg\"\210\001\n\nForgeSmelt\022\023\n\013daily_limit"
    "\030\001 \002(\r\022\023\n\013forge_limit\030\002 \002(\r\022(\n\005smelt\030\003 \003"
    "(\0132\031.ConfigActivity.SmeltItem\022&\n\004shop\030\004 "
    "\003(\0132\030.ConfigActivity.ShopItem\"S\n\010HeroIte"
    "m\022\n\n\002id\030\001 \002(\r\022\016\n\006weight\030\002 \002(\r\022+\n\006reward\030"
    "\003 \002(\0132\033.RewardConfig.RewardItemCfg\"P\n\010He"
    "roDial\022\013\n\003per\030\001 \002(\r\022(\n\006heroes\030\002 \003(\0132\030.Co"
    "nfigActivity.HeroItem\022\r\n\005limit\030\003 \002(\r\"\223\001\n"
    "\020BlackGoldEnhance\022\r\n\005first\030\001 \002(\r\022\r\n\005limi"
    "t\030\002 \002(\r\022\r\n\005start\030\003 \002(\r\022\022\n\naccumulate\030\004 \002"
    "(\r\022\021\n\tcondition\030\005 \003(\r\022+\n\006reward\030\006 \002(\0132\033."
    "RewardConfig.RewardItemCfg\"J\n\nKingdomWar"
    "\022\017\n\007diamond\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132\033.Rewa"
    "rdConfig.RewardItemCfg\"H\n\nRewardItem\022\r\n\005"
    "price\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132\033.RewardConf"
    "ig.RewardItemCfg\"O\n\021OneDiamondWelfare\022\017\n"
    "\007diamond\030\001 \002(\r\022)\n\005items\030\002 \003(\0132\032.ConfigAc"
    "tivity.RewardItem\"l\n\014FortunePacks\0221\n\014ext"
    "ra_reward\030\001 \002(\0132\033.RewardConfig.RewardIte"
    "mCfg\022)\n\005goods\030\002 \003(\0132\032.ConfigActivity.Rew"
    "ardItem\"<\n\rSevenDayPacks\022+\n\006reward\030\001 \002(\013"
    "2\033.RewardConfig.RewardItemCfg\",\n\tChargeK"
    "ey\022\017\n\007diamond\030\001 \002(\r\022\016\n\006keynum\030\002 \002(\r\"X\n\tS"
    "tuffItem\022\017\n\007costkey\030\001 \002(\r\022\r\n\005limit\030\002 \002(\r"
    "\022+\n\006reward\030\003 \002(\0132\033.RewardConfig.RewardIt"
    "emCfg\"n\n\rKeyLuxuryGift\022-\n\ncharge_key\030\001 \003"
    "(\0132\031.ConfigActivity.ChargeKey\022.\n\013stuff_i"
    "tems\030\002 \003(\0132\031.ConfigActivity.StuffItem\"O\n"
    "\017ConsumeGiftItem\022\017\n\007consume\030\001 \002(\r\022+\n\006rew"
    "ard\030\002 \002(\0132\033.RewardConfig.RewardItemCfg\"\201"
    "\001\n\024EnjoySmallGiftReward\0222\n\013charge_gift\030\001"
    " \003(\0132\035.ConfigActivity.DiamondReward\0225\n\014c"
    "onsume_gift\030\002 \003(\0132\037.ConfigActivity.Consu"
    "meGiftItem\"X\n\rTurnTableItem\022\n\n\002id\030\001 \002(\r\022"
    "\016\n\006weight\030\002 \002(\r\022+\n\006reward\030\003 \002(\0132\033.Reward"
    "Config.RewardItemCfg\"=\n\rLuckyGiftItem\022,\n"
    "\005items\030\001 \003(\0132\035.ConfigActivity.TurnTableI"
    "tem\"c\n\tLuckyGift\022\017\n\007keycost\030\001 \002(\r\022\021\n\tpoi"
    "ntcost\030\002 \002(\r\0222\n\013stuff_items\030\003 \003(\0132\035.Conf"
    "igActivity.LuckyGiftItem\"\262\001\n\017NewYearActi"
    "vity\0224\n\rcharge_reward\030\001 \003(\0132\035.ConfigActi"
    "vity.DiamondReward\0225\n\tbuy_items\030\002 \003(\0132\"."
    "ConfigActivity.DiamondRewardLimit\0222\n\ronl"
    "ine_reward\030\003 \002(\0132\033.RewardConfig.RewardIt"
    "emCfg\"\262\001\n\020ChinaDayActivity\0224\n\rcharge_rew"
    "ard\030\001 \003(\0132\035.ConfigActivity.DiamondReward"
    "\0224\n\017everyday_reward\030\002 \002(\0132\033.RewardConfig"
    ".RewardItemCfg\0222\n\ronline_reward\030\003 \002(\0132\033."
    "RewardConfig.RewardItemCfg\"Q\n\023PayOptiona"
    "lActivity\022:\n\017optional_reward\030\001 \003(\0132!.Con"
    "figActivity.DiamondMoreReward\"G\n\014MsgSoul"
    "Level\022\n\n\002lv\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132\033.Rewa"
    "rdConfig.RewardItemCfg\"L\n\rMsgSoulGrowth\022"
    "\016\n\006growth\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132\033.Reward"
    "Config.RewardItemCfg\"Z\n\010MsgWuhun\022\021\n\tpart"
    "count\030\001 \002(\r\022\016\n\006partlv\030\002 \002(\r\022+\n\006reward\030\003 "
    "\002(\0132\033.RewardConfig.RewardItemCfg\"X\n\tMsgJ"
    "uexue\022\017\n\007quality\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022+\n"
    "\006reward\030\003 \002(\0132\033.RewardConfig.RewardItemC"
    "fg\"R\n\007MsgStar\022\014\n\004star\030\001 \002(\r\022\014\n\004type\030\002 \002("
    "\r\022+\n\006reward\030\003 \002(\0132\033.RewardConfig.RewardI"
    "temCfg\"S\n\tMsgHeaven\022\013\n\003jie\030\001 \002(\r\022\014\n\004ceng"
    "\030\002 \002(\r\022+\n\006reward\030\003 \002(\0132\033.RewardConfig.Re"
    "wardItemCfg\"S\n\tMsgDaoist\022\013\n\003jie\030\001 \002(\r\022\014\n"
    "\004ceng\030\002 \002(\r\022+\n\006reward\030\003 \002(\0132\033.RewardConf"
    "ig.RewardItemCfg\"\306\002\n\020KaifuAchievement\022-\n"
    "\007soul_lv\030\001 \003(\0132\034.ConfigActivity.MsgSoulL"
    "evel\0222\n\013soul_growth\030\002 \003(\0132\035.ConfigActivi"
    "ty.MsgSoulGrowth\022\'\n\005wuhun\030\003 \003(\0132\030.Config"
    "Activity.MsgWuhun\022)\n\006juexue\030\004 \003(\0132\031.Conf"
    "igActivity.MsgJuexue\022%\n\004star\030\005 \003(\0132\027.Con"
    "figActivity.MsgStar\022)\n\006heaven\030\006 \003(\0132\031.Co"
    "nfigActivity.MsgHeaven\022)\n\006daoist\030\007 \003(\0132\031"
    ".ConfigActivity.MsgDaoist\"`\n\021KaifuDiscou"
    "ntShop\022\017\n\007o_price\030\001 \002(\r\022\017\n\007p_price\030\002 \002(\r"
    "\022)\n\004item\030\003 \002(\0132\033.RewardConfig.RewardItem"
    "Cfg\"s\n\tKaiFuGift\0225\n\013achievement\030\001 \002(\0132 ."
    "ConfigActivity.KaifuAchievement\022/\n\004shop\030"
    "\002 \003(\0132!.ConfigActivity.KaifuDiscountShop"
    "\":\n\017StarStoneChange\022\013\n\003src\030\001 \003(\r\022\013\n\003dst\030"
    "\002 \003(\r\022\r\n\005limit\030\003 \002(\r\"k\n\013HongBaoItem\022\n\n\002i"
    "d\030\001 \002(\r\022\021\n\trate_free\030\002 \002(\r\022\020\n\010rate_buy\030\003"
    " \002(\r\022+\n\006reward\030\004 \002(\0132\033.RewardConfig.Rewa"
    "rdItemCfg\"o\n\007HongBao\022\r\n\005count\030\001 \002(\r\022\024\n\014r"
    "efresh_free\030\002 \002(\r\022\024\n\014refresh_cost\030\003 \002(\r\022"
    ")\n\004item\030\004 \003(\0132\033.ConfigActivity.HongBaoIt"
    "em\"R\n\010TaskGift\022\n\n\002id\030\001 \002(\r\022\r\n\005count\030\002 \002("
    "\r\022+\n\006reward\030\003 \002(\0132\033.RewardConfig.RewardI"
    "temCfg\"f\n\016RotaryTableCfg\022\n\n\002id\030\001 \002(\r\022\r\n\005"
    "count\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\022+\n\006reward\030\004 \002("
    "\0132\033.RewardConfig.RewardItemCfg\"\353\001\n\026Rotar"
    "yTableCrazyReward\0223\n\014chargeReward\030\001 \003(\0132"
    "\035.ConfigActivity.DiamondReward\0224\n\017rotary"
    "TableCost\030\002 \002(\0132\033.RewardConfig.RewardIte"
    "mCfg\0224\n\014randomReward\030\003 \003(\0132\036.ConfigActiv"
    "ity.RotaryTableCfg\0220\n\013fixedReward\030\004 \002(\0132"
    "\033.RewardConfig.RewardItemCfg\"-\n\022ChargeGe"
    "tChanceCfg\022\014\n\004need\030\001 \002(\r\022\t\n\001c\030\002 \002(\r\";\n\014S"
    "ingleReward\022+\n\006reward\030\004 \002(\0132\033.RewardConf"
    "ig.RewardItemCfg\"\230\002\n\031RotaryTableFeedBack"
    "Reward\022,\n\005jindu\030\001 \003(\0132\035.ConfigActivity.D"
    "iamondReward\0222\n\014singlereward\030\002 \003(\0132\034.Con"
    "figActivity.SingleReward\0221\n\005count\030\003 \003(\0132"
    "\".ConfigActivity.ChargeGetChanceCfg\0224\n\014r"
    "andomReward\030\004 \003(\0132\036.ConfigActivity.Rotar"
    "yTableCfg\0220\n\013fixedReward\030\005 \002(\0132\033.RewardC"
    "onfig.RewardItemCfg\"O\n\022BatmanTreasureDra"
    "w\022)\n\004item\030\001 \002(\0132\033.RewardConfig.RewardIte"
    "mCfg\022\016\n\006weight\030\002 \002(\r\"\305\001\n\021BatmanTreasureC"
    "fg\022<\n\025xiaobing_chargeReward\030\001 \003(\0132\035.Conf"
    "igActivity.DiamondReward\022@\n\024unique_xiaob"
    "ing_dial\030\002 \003(\0132\".ConfigActivity.BatmanTr"
    "easureDraw\022\024\n\014draw_cnt_max\030\003 \002(\r\022\032\n\022draw"
    "_cost_integral\030\004 \002(\r\"\213\001\n\025SummerChargeRew"
    "ardCfg\0229\n\022daily_chargeReward\030\001 \003(\0132\035.Con"
    "figActivity.DiamondReward\0227\n\020acc_chargeR"
    "eward\030\002 \003(\0132\035.ConfigActivity.DiamondRewa"
    "rd\"|\n\027SummerHolidaysTicketCfg\022\030\n\020need_co"
    "st_ticket\030\001 \002(\r\022\032\n\022exchange_count_max\030\002 "
    "\002(\r\022+\n\006reward\030\003 \002(\0132\033.RewardConfig.Rewar"
    "dItemCfg\"\325\001\n\027SummerHolidaysRewardCfg\022\033\n\023"
    "exchange_ticket_max\030\001 \002(\r\022\037\n\027per_ticket_"
    "need_diamond\030\002 \002(\r\022G\n\026summer_holidays_ti"
    "cket\030\003 \003(\0132\'.ConfigActivity.SummerHolida"
    "ysTicketCfg\0223\n\014chargeReward\030\004 \003(\0132\035.Conf"
    "igActivity.DiamondReward\")\n\020FreeExchange"
    "Item\022\n\n\002id\030\001 \002(\r\022\t\n\001c\030\002 \002(\r\">\n\014FreeExcha"
    "nge\022.\n\004item\030\001 \003(\0132 .ConfigActivity.FreeE"
    "xchangeItem\"\351\r\n\nActivities\0220\n\tbuildsuit\030"
    "\001 \003(\0132\035.ConfigActivity.BuildSuitItem\022.\n\n"
    "blesspoint\030\002 \002(\0132\032.ConfigActivity.BlessP"
    "oint\0225\n\016double_welfare\030\003 \002(\0132\035.ConfigAct"
    "ivity.DoubleWelfare\0223\n\rpearl_advance\030\004 \003"
    "(\0132\034.ConfigActivity.PearlAdvance\022B\n\025uniq"
    "ue_knowledge_dial\030\005 \003(\0132#.ConfigActivity"
    ".UniqueKnowledgeDial\022:\n\016spiritvitality\030\006"
    " \003(\0132\".ConfigActivity.SpriteVitalityItem"
    "\022)\n\005forge\030\007 \002(\0132\032.ConfigActivity.ForgeSm"
    "elt\022*\n\010herodial\030\010 \002(\0132\030.ConfigActivity.H"
    "eroDial\022.\n\nkingdomwar\030\t \003(\0132\032.ConfigActi"
    "vity.KingdomWar\022<\n\021onediamondwelfare\030\n \003"
    "(\0132!.ConfigActivity.OneDiamondWelfare\0223\n"
    "\rfortune_packs\030\013 \002(\0132\034.ConfigActivity.Fo"
    "rtunePacks\0225\n\016sevenday_packs\030\014 \003(\0132\035.Con"
    "figActivity.SevenDayPacks\0221\n\nicephoenix\030"
    "\r \003(\0132\035.ConfigActivity.DiamondReward\0226\n\017"
    "autumn_feedback\030\016 \003(\0132\035.ConfigActivity.D"
    "iamondReward\0222\n\013protectflag\030\017 \003(\0132\035.Conf"
    "igActivity.DiamondReward\0224\n\rkeyluxurygif"
    "t\030\020 \002(\0132\035.ConfigActivity.KeyLuxuryGift\022="
    "\n\017enjoy_smallgift\030\021 \002(\0132$.ConfigActivity"
    ".EnjoySmallGiftReward\022-\n\nlucky_gift\030\022 \002("
    "\0132\031.ConfigActivity.LuckyGift\0223\n\014year_end"
    "gift\030\023 \003(\0132\035.ConfigActivity.DiamondRewar"
    "d\0228\n\017newyearactivity\030\024 \002(\0132\037.ConfigActiv"
    "ity.NewYearActivity\022(\n\005kaifu\030\025 \002(\0132\031.Con"
    "figActivity.KaiFuGift\0222\n\tstarstone\030\026 \002(\013"
    "2\037.ConfigActivity.StarStoneChange\022.\n\rnew"
    "yearactive\030\027 \002(\0132\027.ConfigActivity.HongBa"
    "o\0220\n\016HebdomadReward\030\030 \003(\0132\030.ConfigActivi"
    "ty.TaskGift\022<\n\014rotary_table\030\031 \002(\0132&.Conf"
    "igActivity.RotaryTableCrazyReward\0229\n\016bat"
    "mantreasure\030\032 \002(\0132!.ConfigActivity.Batma"
    "nTreasureCfg\022<\n\rsummer_charge\030\033 \002(\0132%.Co"
    "nfigActivity.SummerChargeRewardCfg\022@\n\017su"
    "mmer_holidays\030\034 \002(\0132\'.ConfigActivity.Sum"
    "merHolidaysRewardCfg\022:\n\020chinadayavtivity"
    "\030\035 \002(\0132 .ConfigActivity.ChinaDayActivity"
    "\022@\n\023payoptionalactivity\030\036 \002(\0132#.ConfigAc"
    "tivity.PayOptionalActivity\0220\n\nfree_exchg"
    "\030\037 \003(\0132\034.ConfigActivity.FreeExchange\022A\n\016"
    "zhuanpanhuikui\030  \002(\0132).ConfigActivity.Ro"
    "taryTableFeedBackReward", 8103);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigActivity.proto", &protobuf_RegisterTypes);
  BuildSuitItem::default_instance_ = new BuildSuitItem();
  ExchangeItem::default_instance_ = new ExchangeItem();
  BlessPoint::default_instance_ = new BlessPoint();
  CostCoefficient::default_instance_ = new CostCoefficient();
  DiamondReward::default_instance_ = new DiamondReward();
  DiamondRewardLimit::default_instance_ = new DiamondRewardLimit();
  DiamondMoreReward::default_instance_ = new DiamondMoreReward();
  DoubleWelfare::default_instance_ = new DoubleWelfare();
  PearlAdvance::default_instance_ = new PearlAdvance();
  UniqueKnowledgeDial::default_instance_ = new UniqueKnowledgeDial();
  SpriteVitalityItem::default_instance_ = new SpriteVitalityItem();
  SmeltItem::default_instance_ = new SmeltItem();
  ShopItem::default_instance_ = new ShopItem();
  ForgeSmelt::default_instance_ = new ForgeSmelt();
  HeroItem::default_instance_ = new HeroItem();
  HeroDial::default_instance_ = new HeroDial();
  BlackGoldEnhance::default_instance_ = new BlackGoldEnhance();
  KingdomWar::default_instance_ = new KingdomWar();
  RewardItem::default_instance_ = new RewardItem();
  OneDiamondWelfare::default_instance_ = new OneDiamondWelfare();
  FortunePacks::default_instance_ = new FortunePacks();
  SevenDayPacks::default_instance_ = new SevenDayPacks();
  ChargeKey::default_instance_ = new ChargeKey();
  StuffItem::default_instance_ = new StuffItem();
  KeyLuxuryGift::default_instance_ = new KeyLuxuryGift();
  ConsumeGiftItem::default_instance_ = new ConsumeGiftItem();
  EnjoySmallGiftReward::default_instance_ = new EnjoySmallGiftReward();
  TurnTableItem::default_instance_ = new TurnTableItem();
  LuckyGiftItem::default_instance_ = new LuckyGiftItem();
  LuckyGift::default_instance_ = new LuckyGift();
  NewYearActivity::default_instance_ = new NewYearActivity();
  ChinaDayActivity::default_instance_ = new ChinaDayActivity();
  PayOptionalActivity::default_instance_ = new PayOptionalActivity();
  MsgSoulLevel::default_instance_ = new MsgSoulLevel();
  MsgSoulGrowth::default_instance_ = new MsgSoulGrowth();
  MsgWuhun::default_instance_ = new MsgWuhun();
  MsgJuexue::default_instance_ = new MsgJuexue();
  MsgStar::default_instance_ = new MsgStar();
  MsgHeaven::default_instance_ = new MsgHeaven();
  MsgDaoist::default_instance_ = new MsgDaoist();
  KaifuAchievement::default_instance_ = new KaifuAchievement();
  KaifuDiscountShop::default_instance_ = new KaifuDiscountShop();
  KaiFuGift::default_instance_ = new KaiFuGift();
  StarStoneChange::default_instance_ = new StarStoneChange();
  HongBaoItem::default_instance_ = new HongBaoItem();
  HongBao::default_instance_ = new HongBao();
  TaskGift::default_instance_ = new TaskGift();
  RotaryTableCfg::default_instance_ = new RotaryTableCfg();
  RotaryTableCrazyReward::default_instance_ = new RotaryTableCrazyReward();
  ChargeGetChanceCfg::default_instance_ = new ChargeGetChanceCfg();
  SingleReward::default_instance_ = new SingleReward();
  RotaryTableFeedBackReward::default_instance_ = new RotaryTableFeedBackReward();
  BatmanTreasureDraw::default_instance_ = new BatmanTreasureDraw();
  BatmanTreasureCfg::default_instance_ = new BatmanTreasureCfg();
  SummerChargeRewardCfg::default_instance_ = new SummerChargeRewardCfg();
  SummerHolidaysTicketCfg::default_instance_ = new SummerHolidaysTicketCfg();
  SummerHolidaysRewardCfg::default_instance_ = new SummerHolidaysRewardCfg();
  FreeExchangeItem::default_instance_ = new FreeExchangeItem();
  FreeExchange::default_instance_ = new FreeExchange();
  Activities::default_instance_ = new Activities();
  BuildSuitItem::default_instance_->InitAsDefaultInstance();
  ExchangeItem::default_instance_->InitAsDefaultInstance();
  BlessPoint::default_instance_->InitAsDefaultInstance();
  CostCoefficient::default_instance_->InitAsDefaultInstance();
  DiamondReward::default_instance_->InitAsDefaultInstance();
  DiamondRewardLimit::default_instance_->InitAsDefaultInstance();
  DiamondMoreReward::default_instance_->InitAsDefaultInstance();
  DoubleWelfare::default_instance_->InitAsDefaultInstance();
  PearlAdvance::default_instance_->InitAsDefaultInstance();
  UniqueKnowledgeDial::default_instance_->InitAsDefaultInstance();
  SpriteVitalityItem::default_instance_->InitAsDefaultInstance();
  SmeltItem::default_instance_->InitAsDefaultInstance();
  ShopItem::default_instance_->InitAsDefaultInstance();
  ForgeSmelt::default_instance_->InitAsDefaultInstance();
  HeroItem::default_instance_->InitAsDefaultInstance();
  HeroDial::default_instance_->InitAsDefaultInstance();
  BlackGoldEnhance::default_instance_->InitAsDefaultInstance();
  KingdomWar::default_instance_->InitAsDefaultInstance();
  RewardItem::default_instance_->InitAsDefaultInstance();
  OneDiamondWelfare::default_instance_->InitAsDefaultInstance();
  FortunePacks::default_instance_->InitAsDefaultInstance();
  SevenDayPacks::default_instance_->InitAsDefaultInstance();
  ChargeKey::default_instance_->InitAsDefaultInstance();
  StuffItem::default_instance_->InitAsDefaultInstance();
  KeyLuxuryGift::default_instance_->InitAsDefaultInstance();
  ConsumeGiftItem::default_instance_->InitAsDefaultInstance();
  EnjoySmallGiftReward::default_instance_->InitAsDefaultInstance();
  TurnTableItem::default_instance_->InitAsDefaultInstance();
  LuckyGiftItem::default_instance_->InitAsDefaultInstance();
  LuckyGift::default_instance_->InitAsDefaultInstance();
  NewYearActivity::default_instance_->InitAsDefaultInstance();
  ChinaDayActivity::default_instance_->InitAsDefaultInstance();
  PayOptionalActivity::default_instance_->InitAsDefaultInstance();
  MsgSoulLevel::default_instance_->InitAsDefaultInstance();
  MsgSoulGrowth::default_instance_->InitAsDefaultInstance();
  MsgWuhun::default_instance_->InitAsDefaultInstance();
  MsgJuexue::default_instance_->InitAsDefaultInstance();
  MsgStar::default_instance_->InitAsDefaultInstance();
  MsgHeaven::default_instance_->InitAsDefaultInstance();
  MsgDaoist::default_instance_->InitAsDefaultInstance();
  KaifuAchievement::default_instance_->InitAsDefaultInstance();
  KaifuDiscountShop::default_instance_->InitAsDefaultInstance();
  KaiFuGift::default_instance_->InitAsDefaultInstance();
  StarStoneChange::default_instance_->InitAsDefaultInstance();
  HongBaoItem::default_instance_->InitAsDefaultInstance();
  HongBao::default_instance_->InitAsDefaultInstance();
  TaskGift::default_instance_->InitAsDefaultInstance();
  RotaryTableCfg::default_instance_->InitAsDefaultInstance();
  RotaryTableCrazyReward::default_instance_->InitAsDefaultInstance();
  ChargeGetChanceCfg::default_instance_->InitAsDefaultInstance();
  SingleReward::default_instance_->InitAsDefaultInstance();
  RotaryTableFeedBackReward::default_instance_->InitAsDefaultInstance();
  BatmanTreasureDraw::default_instance_->InitAsDefaultInstance();
  BatmanTreasureCfg::default_instance_->InitAsDefaultInstance();
  SummerChargeRewardCfg::default_instance_->InitAsDefaultInstance();
  SummerHolidaysTicketCfg::default_instance_->InitAsDefaultInstance();
  SummerHolidaysRewardCfg::default_instance_->InitAsDefaultInstance();
  FreeExchangeItem::default_instance_->InitAsDefaultInstance();
  FreeExchange::default_instance_->InitAsDefaultInstance();
  Activities::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigActivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigActivity_2eproto {
  StaticDescriptorInitializer_ConfigActivity_2eproto() {
    protobuf_AddDesc_ConfigActivity_2eproto();
  }
} static_descriptor_initializer_ConfigActivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BuildSuitItem::kDiamondFieldNumber;
const int BuildSuitItem::kRewardFieldNumber;
#endif  // !_MSC_VER

BuildSuitItem::BuildSuitItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.BuildSuitItem)
}

void BuildSuitItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

BuildSuitItem::BuildSuitItem(const BuildSuitItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.BuildSuitItem)
}

void BuildSuitItem::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildSuitItem::~BuildSuitItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.BuildSuitItem)
  SharedDtor();
}

void BuildSuitItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void BuildSuitItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildSuitItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildSuitItem_descriptor_;
}

const BuildSuitItem& BuildSuitItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

BuildSuitItem* BuildSuitItem::default_instance_ = NULL;

BuildSuitItem* BuildSuitItem::New() const {
  return new BuildSuitItem;
}

void BuildSuitItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    diamond_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildSuitItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.BuildSuitItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.BuildSuitItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.BuildSuitItem)
  return false;
#undef DO_
}

void BuildSuitItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.BuildSuitItem)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.BuildSuitItem)
}

::google::protobuf::uint8* BuildSuitItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.BuildSuitItem)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.BuildSuitItem)
  return target;
}

int BuildSuitItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildSuitItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildSuitItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildSuitItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildSuitItem::MergeFrom(const BuildSuitItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildSuitItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildSuitItem::CopyFrom(const BuildSuitItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildSuitItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void BuildSuitItem::Swap(BuildSuitItem* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildSuitItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildSuitItem_descriptor_;
  metadata.reflection = BuildSuitItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeItem::kConditionFieldNumber;
const int ExchangeItem::kFirstFieldNumber;
const int ExchangeItem::kAccumulateFieldNumber;
const int ExchangeItem::kRewardFieldNumber;
#endif  // !_MSC_VER

ExchangeItem::ExchangeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.ExchangeItem)
}

void ExchangeItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

ExchangeItem::ExchangeItem(const ExchangeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.ExchangeItem)
}

void ExchangeItem::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0u;
  accumulate_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeItem::~ExchangeItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.ExchangeItem)
  SharedDtor();
}

void ExchangeItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void ExchangeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeItem_descriptor_;
}

const ExchangeItem& ExchangeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

ExchangeItem* ExchangeItem::default_instance_ = NULL;

ExchangeItem* ExchangeItem::New() const {
  return new ExchangeItem;
}

void ExchangeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExchangeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(first_, accumulate_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.ExchangeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 condition = 1;
      case 1: {
        if (tag == 8) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_condition())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_condition())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_condition;
        if (input->ExpectTag(16)) goto parse_first;
        break;
      }

      // required uint32 first = 2;
      case 2: {
        if (tag == 16) {
         parse_first:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accumulate;
        break;
      }

      // required uint32 accumulate = 3;
      case 3: {
        if (tag == 24) {
         parse_accumulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accumulate_)));
          set_has_accumulate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.ExchangeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.ExchangeItem)
  return false;
#undef DO_
}

void ExchangeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.ExchangeItem)
  // repeated uint32 condition = 1;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->condition(i), output);
  }

  // required uint32 first = 2;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->first(), output);
  }

  // required uint32 accumulate = 3;
  if (has_accumulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accumulate(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.ExchangeItem)
}

::google::protobuf::uint8* ExchangeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.ExchangeItem)
  // repeated uint32 condition = 1;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->condition(i), target);
  }

  // required uint32 first = 2;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->first(), target);
  }

  // required uint32 accumulate = 3;
  if (has_accumulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accumulate(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.ExchangeItem)
  return target;
}

int ExchangeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 first = 2;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }

    // required uint32 accumulate = 3;
    if (has_accumulate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accumulate());
    }

    // required .RewardConfig.RewardItemCfg reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  // repeated uint32 condition = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->condition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->condition(i));
    }
    total_size += 1 * this->condition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeItem::MergeFrom(const ExchangeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  condition_.MergeFrom(from.condition_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_accumulate()) {
      set_accumulate(from.accumulate());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeItem::CopyFrom(const ExchangeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void ExchangeItem::Swap(ExchangeItem* other) {
  if (other != this) {
    condition_.Swap(&other->condition_);
    std::swap(first_, other->first_);
    std::swap(accumulate_, other->accumulate_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeItem_descriptor_;
  metadata.reflection = ExchangeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlessPoint::kExchangeFieldNumber;
#endif  // !_MSC_VER

BlessPoint::BlessPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.BlessPoint)
}

void BlessPoint::InitAsDefaultInstance() {
}

BlessPoint::BlessPoint(const BlessPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.BlessPoint)
}

void BlessPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlessPoint::~BlessPoint() {
  // @@protoc_insertion_point(destructor:ConfigActivity.BlessPoint)
  SharedDtor();
}

void BlessPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlessPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlessPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlessPoint_descriptor_;
}

const BlessPoint& BlessPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

BlessPoint* BlessPoint::default_instance_ = NULL;

BlessPoint* BlessPoint::New() const {
  return new BlessPoint;
}

void BlessPoint::Clear() {
  exchange_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlessPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.BlessPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.ExchangeItem exchange = 1;
      case 1: {
        if (tag == 10) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exchange()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_exchange;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.BlessPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.BlessPoint)
  return false;
#undef DO_
}

void BlessPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.BlessPoint)
  // repeated .ConfigActivity.ExchangeItem exchange = 1;
  for (int i = 0; i < this->exchange_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exchange(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.BlessPoint)
}

::google::protobuf::uint8* BlessPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.BlessPoint)
  // repeated .ConfigActivity.ExchangeItem exchange = 1;
  for (int i = 0; i < this->exchange_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exchange(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.BlessPoint)
  return target;
}

int BlessPoint::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigActivity.ExchangeItem exchange = 1;
  total_size += 1 * this->exchange_size();
  for (int i = 0; i < this->exchange_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exchange(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlessPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlessPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlessPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlessPoint::MergeFrom(const BlessPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  exchange_.MergeFrom(from.exchange_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlessPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlessPoint::CopyFrom(const BlessPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlessPoint::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->exchange())) return false;
  return true;
}

void BlessPoint::Swap(BlessPoint* other) {
  if (other != this) {
    exchange_.Swap(&other->exchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlessPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlessPoint_descriptor_;
  metadata.reflection = BlessPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostCoefficient::kCostFieldNumber;
const int CostCoefficient::kCoefficientFieldNumber;
#endif  // !_MSC_VER

CostCoefficient::CostCoefficient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.CostCoefficient)
}

void CostCoefficient::InitAsDefaultInstance() {
}

CostCoefficient::CostCoefficient(const CostCoefficient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.CostCoefficient)
}

void CostCoefficient::SharedCtor() {
  _cached_size_ = 0;
  cost_ = 0u;
  coefficient_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostCoefficient::~CostCoefficient() {
  // @@protoc_insertion_point(destructor:ConfigActivity.CostCoefficient)
  SharedDtor();
}

void CostCoefficient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CostCoefficient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostCoefficient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostCoefficient_descriptor_;
}

const CostCoefficient& CostCoefficient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

CostCoefficient* CostCoefficient::default_instance_ = NULL;

CostCoefficient* CostCoefficient::New() const {
  return new CostCoefficient;
}

void CostCoefficient::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CostCoefficient*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(coefficient_, cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostCoefficient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.CostCoefficient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_coefficient;
        break;
      }

      // required double coefficient = 2;
      case 2: {
        if (tag == 17) {
         parse_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coefficient_)));
          set_has_coefficient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.CostCoefficient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.CostCoefficient)
  return false;
#undef DO_
}

void CostCoefficient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.CostCoefficient)
  // required uint32 cost = 1;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost(), output);
  }

  // required double coefficient = 2;
  if (has_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->coefficient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.CostCoefficient)
}

::google::protobuf::uint8* CostCoefficient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.CostCoefficient)
  // required uint32 cost = 1;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost(), target);
  }

  // required double coefficient = 2;
  if (has_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->coefficient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.CostCoefficient)
  return target;
}

int CostCoefficient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cost = 1;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required double coefficient = 2;
    if (has_coefficient()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostCoefficient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostCoefficient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostCoefficient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostCoefficient::MergeFrom(const CostCoefficient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_coefficient()) {
      set_coefficient(from.coefficient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostCoefficient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostCoefficient::CopyFrom(const CostCoefficient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostCoefficient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CostCoefficient::Swap(CostCoefficient* other) {
  if (other != this) {
    std::swap(cost_, other->cost_);
    std::swap(coefficient_, other->coefficient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostCoefficient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostCoefficient_descriptor_;
  metadata.reflection = CostCoefficient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiamondReward::kDiamondFieldNumber;
const int DiamondReward::kRewardFieldNumber;
#endif  // !_MSC_VER

DiamondReward::DiamondReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.DiamondReward)
}

void DiamondReward::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

DiamondReward::DiamondReward(const DiamondReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.DiamondReward)
}

void DiamondReward::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiamondReward::~DiamondReward() {
  // @@protoc_insertion_point(destructor:ConfigActivity.DiamondReward)
  SharedDtor();
}

void DiamondReward::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void DiamondReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiamondReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiamondReward_descriptor_;
}

const DiamondReward& DiamondReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

DiamondReward* DiamondReward::default_instance_ = NULL;

DiamondReward* DiamondReward::New() const {
  return new DiamondReward;
}

void DiamondReward::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    diamond_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiamondReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.DiamondReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.DiamondReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.DiamondReward)
  return false;
#undef DO_
}

void DiamondReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.DiamondReward)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.DiamondReward)
}

::google::protobuf::uint8* DiamondReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.DiamondReward)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.DiamondReward)
  return target;
}

int DiamondReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiamondReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiamondReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiamondReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiamondReward::MergeFrom(const DiamondReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiamondReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiamondReward::CopyFrom(const DiamondReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiamondReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void DiamondReward::Swap(DiamondReward* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiamondReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiamondReward_descriptor_;
  metadata.reflection = DiamondReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiamondRewardLimit::kDiamondFieldNumber;
const int DiamondRewardLimit::kLimitFieldNumber;
const int DiamondRewardLimit::kRewardFieldNumber;
#endif  // !_MSC_VER

DiamondRewardLimit::DiamondRewardLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.DiamondRewardLimit)
}

void DiamondRewardLimit::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

DiamondRewardLimit::DiamondRewardLimit(const DiamondRewardLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.DiamondRewardLimit)
}

void DiamondRewardLimit::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  limit_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiamondRewardLimit::~DiamondRewardLimit() {
  // @@protoc_insertion_point(destructor:ConfigActivity.DiamondRewardLimit)
  SharedDtor();
}

void DiamondRewardLimit::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void DiamondRewardLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiamondRewardLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiamondRewardLimit_descriptor_;
}

const DiamondRewardLimit& DiamondRewardLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

DiamondRewardLimit* DiamondRewardLimit::default_instance_ = NULL;

DiamondRewardLimit* DiamondRewardLimit::New() const {
  return new DiamondRewardLimit;
}

void DiamondRewardLimit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DiamondRewardLimit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(diamond_, limit_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiamondRewardLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.DiamondRewardLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // required uint32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.DiamondRewardLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.DiamondRewardLimit)
  return false;
#undef DO_
}

void DiamondRewardLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.DiamondRewardLimit)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.DiamondRewardLimit)
}

::google::protobuf::uint8* DiamondRewardLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.DiamondRewardLimit)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.DiamondRewardLimit)
  return target;
}

int DiamondRewardLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required uint32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiamondRewardLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiamondRewardLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiamondRewardLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiamondRewardLimit::MergeFrom(const DiamondRewardLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiamondRewardLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiamondRewardLimit::CopyFrom(const DiamondRewardLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiamondRewardLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void DiamondRewardLimit::Swap(DiamondRewardLimit* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(limit_, other->limit_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiamondRewardLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiamondRewardLimit_descriptor_;
  metadata.reflection = DiamondRewardLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiamondMoreReward::kDiamondFieldNumber;
const int DiamondMoreReward::kRewardFieldNumber;
#endif  // !_MSC_VER

DiamondMoreReward::DiamondMoreReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.DiamondMoreReward)
}

void DiamondMoreReward::InitAsDefaultInstance() {
}

DiamondMoreReward::DiamondMoreReward(const DiamondMoreReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.DiamondMoreReward)
}

void DiamondMoreReward::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiamondMoreReward::~DiamondMoreReward() {
  // @@protoc_insertion_point(destructor:ConfigActivity.DiamondMoreReward)
  SharedDtor();
}

void DiamondMoreReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiamondMoreReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiamondMoreReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiamondMoreReward_descriptor_;
}

const DiamondMoreReward& DiamondMoreReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

DiamondMoreReward* DiamondMoreReward::default_instance_ = NULL;

DiamondMoreReward* DiamondMoreReward::New() const {
  return new DiamondMoreReward;
}

void DiamondMoreReward::Clear() {
  diamond_ = 0u;
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiamondMoreReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.DiamondMoreReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.DiamondMoreReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.DiamondMoreReward)
  return false;
#undef DO_
}

void DiamondMoreReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.DiamondMoreReward)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // repeated .RewardConfig.RewardItemCfg reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.DiamondMoreReward)
}

::google::protobuf::uint8* DiamondMoreReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.DiamondMoreReward)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // repeated .RewardConfig.RewardItemCfg reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.DiamondMoreReward)
  return target;
}

int DiamondMoreReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

  }
  // repeated .RewardConfig.RewardItemCfg reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiamondMoreReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiamondMoreReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiamondMoreReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiamondMoreReward::MergeFrom(const DiamondMoreReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiamondMoreReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiamondMoreReward::CopyFrom(const DiamondMoreReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiamondMoreReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void DiamondMoreReward::Swap(DiamondMoreReward* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiamondMoreReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiamondMoreReward_descriptor_;
  metadata.reflection = DiamondMoreReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleWelfare::kMaximumFieldNumber;
const int DoubleWelfare::kCostCoefficientFieldNumber;
const int DoubleWelfare::kExtraRewardFieldNumber;
#endif  // !_MSC_VER

DoubleWelfare::DoubleWelfare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.DoubleWelfare)
}

void DoubleWelfare::InitAsDefaultInstance() {
}

DoubleWelfare::DoubleWelfare(const DoubleWelfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.DoubleWelfare)
}

void DoubleWelfare::SharedCtor() {
  _cached_size_ = 0;
  maximum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleWelfare::~DoubleWelfare() {
  // @@protoc_insertion_point(destructor:ConfigActivity.DoubleWelfare)
  SharedDtor();
}

void DoubleWelfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleWelfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleWelfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleWelfare_descriptor_;
}

const DoubleWelfare& DoubleWelfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

DoubleWelfare* DoubleWelfare::default_instance_ = NULL;

DoubleWelfare* DoubleWelfare::New() const {
  return new DoubleWelfare;
}

void DoubleWelfare::Clear() {
  maximum_ = 0u;
  cost_coefficient_.Clear();
  extra_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleWelfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.DoubleWelfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maximum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_)));
          set_has_maximum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cost_coefficient;
        break;
      }

      // repeated .ConfigActivity.CostCoefficient cost_coefficient = 2;
      case 2: {
        if (tag == 18) {
         parse_cost_coefficient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cost_coefficient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cost_coefficient;
        if (input->ExpectTag(26)) goto parse_extra_reward;
        break;
      }

      // repeated .ConfigActivity.DiamondReward extra_reward = 3;
      case 3: {
        if (tag == 26) {
         parse_extra_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extra_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.DoubleWelfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.DoubleWelfare)
  return false;
#undef DO_
}

void DoubleWelfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.DoubleWelfare)
  // required uint32 maximum = 1;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maximum(), output);
  }

  // repeated .ConfigActivity.CostCoefficient cost_coefficient = 2;
  for (int i = 0; i < this->cost_coefficient_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cost_coefficient(i), output);
  }

  // repeated .ConfigActivity.DiamondReward extra_reward = 3;
  for (int i = 0; i < this->extra_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extra_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.DoubleWelfare)
}

::google::protobuf::uint8* DoubleWelfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.DoubleWelfare)
  // required uint32 maximum = 1;
  if (has_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maximum(), target);
  }

  // repeated .ConfigActivity.CostCoefficient cost_coefficient = 2;
  for (int i = 0; i < this->cost_coefficient_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cost_coefficient(i), target);
  }

  // repeated .ConfigActivity.DiamondReward extra_reward = 3;
  for (int i = 0; i < this->extra_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->extra_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.DoubleWelfare)
  return target;
}

int DoubleWelfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maximum = 1;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maximum());
    }

  }
  // repeated .ConfigActivity.CostCoefficient cost_coefficient = 2;
  total_size += 1 * this->cost_coefficient_size();
  for (int i = 0; i < this->cost_coefficient_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cost_coefficient(i));
  }

  // repeated .ConfigActivity.DiamondReward extra_reward = 3;
  total_size += 1 * this->extra_reward_size();
  for (int i = 0; i < this->extra_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleWelfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleWelfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleWelfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleWelfare::MergeFrom(const DoubleWelfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_coefficient_.MergeFrom(from.cost_coefficient_);
  extra_reward_.MergeFrom(from.extra_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleWelfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleWelfare::CopyFrom(const DoubleWelfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleWelfare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cost_coefficient())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->extra_reward())) return false;
  return true;
}

void DoubleWelfare::Swap(DoubleWelfare* other) {
  if (other != this) {
    std::swap(maximum_, other->maximum_);
    cost_coefficient_.Swap(&other->cost_coefficient_);
    extra_reward_.Swap(&other->extra_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleWelfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleWelfare_descriptor_;
  metadata.reflection = DoubleWelfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PearlAdvance::kCostFieldNumber;
const int PearlAdvance::kMaximumFieldNumber;
const int PearlAdvance::kCondEqidFieldNumber;
const int PearlAdvance::kRewardFieldNumber;
#endif  // !_MSC_VER

PearlAdvance::PearlAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.PearlAdvance)
}

void PearlAdvance::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

PearlAdvance::PearlAdvance(const PearlAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.PearlAdvance)
}

void PearlAdvance::SharedCtor() {
  _cached_size_ = 0;
  cost_ = 0u;
  maximum_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PearlAdvance::~PearlAdvance() {
  // @@protoc_insertion_point(destructor:ConfigActivity.PearlAdvance)
  SharedDtor();
}

void PearlAdvance::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void PearlAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PearlAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PearlAdvance_descriptor_;
}

const PearlAdvance& PearlAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

PearlAdvance* PearlAdvance::default_instance_ = NULL;

PearlAdvance* PearlAdvance::New() const {
  return new PearlAdvance;
}

void PearlAdvance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PearlAdvance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(cost_, maximum_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cond_eqid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PearlAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.PearlAdvance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maximum;
        break;
      }

      // required uint32 maximum = 2;
      case 2: {
        if (tag == 16) {
         parse_maximum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maximum_)));
          set_has_maximum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cond_eqid;
        break;
      }

      // repeated uint32 cond_eqid = 3;
      case 3: {
        if (tag == 24) {
         parse_cond_eqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_cond_eqid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cond_eqid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cond_eqid;
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.PearlAdvance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.PearlAdvance)
  return false;
#undef DO_
}

void PearlAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.PearlAdvance)
  // required uint32 cost = 1;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost(), output);
  }

  // required uint32 maximum = 2;
  if (has_maximum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maximum(), output);
  }

  // repeated uint32 cond_eqid = 3;
  for (int i = 0; i < this->cond_eqid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->cond_eqid(i), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.PearlAdvance)
}

::google::protobuf::uint8* PearlAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.PearlAdvance)
  // required uint32 cost = 1;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost(), target);
  }

  // required uint32 maximum = 2;
  if (has_maximum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maximum(), target);
  }

  // repeated uint32 cond_eqid = 3;
  for (int i = 0; i < this->cond_eqid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->cond_eqid(i), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.PearlAdvance)
  return target;
}

int PearlAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cost = 1;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required uint32 maximum = 2;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maximum());
    }

    // required .RewardConfig.RewardItemCfg reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  // repeated uint32 cond_eqid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cond_eqid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cond_eqid(i));
    }
    total_size += 1 * this->cond_eqid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PearlAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PearlAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PearlAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PearlAdvance::MergeFrom(const PearlAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  cond_eqid_.MergeFrom(from.cond_eqid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_maximum()) {
      set_maximum(from.maximum());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PearlAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PearlAdvance::CopyFrom(const PearlAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PearlAdvance::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void PearlAdvance::Swap(PearlAdvance* other) {
  if (other != this) {
    std::swap(cost_, other->cost_);
    std::swap(maximum_, other->maximum_);
    cond_eqid_.Swap(&other->cond_eqid_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PearlAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PearlAdvance_descriptor_;
  metadata.reflection = PearlAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UniqueKnowledgeDial::kIdFieldNumber;
const int UniqueKnowledgeDial::kWeightFieldNumber;
const int UniqueKnowledgeDial::kItemFieldNumber;
#endif  // !_MSC_VER

UniqueKnowledgeDial::UniqueKnowledgeDial()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.UniqueKnowledgeDial)
}

void UniqueKnowledgeDial::InitAsDefaultInstance() {
  item_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

UniqueKnowledgeDial::UniqueKnowledgeDial(const UniqueKnowledgeDial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.UniqueKnowledgeDial)
}

void UniqueKnowledgeDial::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  weight_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniqueKnowledgeDial::~UniqueKnowledgeDial() {
  // @@protoc_insertion_point(destructor:ConfigActivity.UniqueKnowledgeDial)
  SharedDtor();
}

void UniqueKnowledgeDial::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void UniqueKnowledgeDial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniqueKnowledgeDial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueKnowledgeDial_descriptor_;
}

const UniqueKnowledgeDial& UniqueKnowledgeDial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

UniqueKnowledgeDial* UniqueKnowledgeDial::default_instance_ = NULL;

UniqueKnowledgeDial* UniqueKnowledgeDial::New() const {
  return new UniqueKnowledgeDial;
}

void UniqueKnowledgeDial::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UniqueKnowledgeDial*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, weight_);
    if (has_item()) {
      if (item_ != NULL) item_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UniqueKnowledgeDial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.UniqueKnowledgeDial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // required .RewardConfig.RewardItemCfg item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.UniqueKnowledgeDial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.UniqueKnowledgeDial)
  return false;
#undef DO_
}

void UniqueKnowledgeDial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.UniqueKnowledgeDial)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  // required .RewardConfig.RewardItemCfg item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.UniqueKnowledgeDial)
}

::google::protobuf::uint8* UniqueKnowledgeDial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.UniqueKnowledgeDial)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  // required .RewardConfig.RewardItemCfg item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.UniqueKnowledgeDial)
  return target;
}

int UniqueKnowledgeDial::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // required .RewardConfig.RewardItemCfg item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniqueKnowledgeDial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UniqueKnowledgeDial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UniqueKnowledgeDial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UniqueKnowledgeDial::MergeFrom(const UniqueKnowledgeDial& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_item()) {
      mutable_item()->::RewardConfig::RewardItemCfg::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UniqueKnowledgeDial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueKnowledgeDial::CopyFrom(const UniqueKnowledgeDial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueKnowledgeDial::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void UniqueKnowledgeDial::Swap(UniqueKnowledgeDial* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UniqueKnowledgeDial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniqueKnowledgeDial_descriptor_;
  metadata.reflection = UniqueKnowledgeDial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpriteVitalityItem::kDiamondFieldNumber;
const int SpriteVitalityItem::kRewardFieldNumber;
#endif  // !_MSC_VER

SpriteVitalityItem::SpriteVitalityItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.SpriteVitalityItem)
}

void SpriteVitalityItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

SpriteVitalityItem::SpriteVitalityItem(const SpriteVitalityItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.SpriteVitalityItem)
}

void SpriteVitalityItem::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpriteVitalityItem::~SpriteVitalityItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.SpriteVitalityItem)
  SharedDtor();
}

void SpriteVitalityItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void SpriteVitalityItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpriteVitalityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpriteVitalityItem_descriptor_;
}

const SpriteVitalityItem& SpriteVitalityItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

SpriteVitalityItem* SpriteVitalityItem::default_instance_ = NULL;

SpriteVitalityItem* SpriteVitalityItem::New() const {
  return new SpriteVitalityItem;
}

void SpriteVitalityItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    diamond_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpriteVitalityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.SpriteVitalityItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.SpriteVitalityItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.SpriteVitalityItem)
  return false;
#undef DO_
}

void SpriteVitalityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.SpriteVitalityItem)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.SpriteVitalityItem)
}

::google::protobuf::uint8* SpriteVitalityItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.SpriteVitalityItem)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.SpriteVitalityItem)
  return target;
}

int SpriteVitalityItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpriteVitalityItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpriteVitalityItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpriteVitalityItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpriteVitalityItem::MergeFrom(const SpriteVitalityItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpriteVitalityItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteVitalityItem::CopyFrom(const SpriteVitalityItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteVitalityItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void SpriteVitalityItem::Swap(SpriteVitalityItem* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpriteVitalityItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpriteVitalityItem_descriptor_;
  metadata.reflection = SpriteVitalityItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltItem::kEqidFieldNumber;
const int SmeltItem::kCostFieldNumber;
const int SmeltItem::kGetFieldNumber;
#endif  // !_MSC_VER

SmeltItem::SmeltItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.SmeltItem)
}

void SmeltItem::InitAsDefaultInstance() {
}

SmeltItem::SmeltItem(const SmeltItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.SmeltItem)
}

void SmeltItem::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  cost_ = 0u;
  get_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltItem::~SmeltItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.SmeltItem)
  SharedDtor();
}

void SmeltItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmeltItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltItem_descriptor_;
}

const SmeltItem& SmeltItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

SmeltItem* SmeltItem::default_instance_ = NULL;

SmeltItem* SmeltItem::New() const {
  return new SmeltItem;
}

void SmeltItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SmeltItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, get_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.SmeltItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // required uint32 cost = 2;
      case 2: {
        if (tag == 16) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_get;
        break;
      }

      // required uint32 get = 3;
      case 3: {
        if (tag == 24) {
         parse_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_)));
          set_has_get();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.SmeltItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.SmeltItem)
  return false;
#undef DO_
}

void SmeltItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.SmeltItem)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost(), output);
  }

  // required uint32 get = 3;
  if (has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->get(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.SmeltItem)
}

::google::protobuf::uint8* SmeltItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.SmeltItem)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost(), target);
  }

  // required uint32 get = 3;
  if (has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->get(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.SmeltItem)
  return target;
}

int SmeltItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required uint32 get = 3;
    if (has_get()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltItem::MergeFrom(const SmeltItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_get()) {
      set_get(from.get());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltItem::CopyFrom(const SmeltItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SmeltItem::Swap(SmeltItem* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(cost_, other->cost_);
    std::swap(get_, other->get_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltItem_descriptor_;
  metadata.reflection = SmeltItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopItem::kDiamondFieldNumber;
const int ShopItem::kForgecostFieldNumber;
const int ShopItem::kItemFieldNumber;
#endif  // !_MSC_VER

ShopItem::ShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.ShopItem)
}

void ShopItem::InitAsDefaultInstance() {
  item_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

ShopItem::ShopItem(const ShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.ShopItem)
}

void ShopItem::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  forgecost_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopItem::~ShopItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.ShopItem)
  SharedDtor();
}

void ShopItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopItem_descriptor_;
}

const ShopItem& ShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

ShopItem* ShopItem::default_instance_ = NULL;

ShopItem* ShopItem::New() const {
  return new ShopItem;
}

void ShopItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(diamond_, forgecost_);
    if (has_item()) {
      if (item_ != NULL) item_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.ShopItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_forgecost;
        break;
      }

      // required uint32 forgecost = 2;
      case 2: {
        if (tag == 16) {
         parse_forgecost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forgecost_)));
          set_has_forgecost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // required .RewardConfig.RewardItemCfg item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.ShopItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.ShopItem)
  return false;
#undef DO_
}

void ShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.ShopItem)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // required uint32 forgecost = 2;
  if (has_forgecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->forgecost(), output);
  }

  // required .RewardConfig.RewardItemCfg item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.ShopItem)
}

::google::protobuf::uint8* ShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.ShopItem)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // required uint32 forgecost = 2;
  if (has_forgecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->forgecost(), target);
  }

  // required .RewardConfig.RewardItemCfg item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.ShopItem)
  return target;
}

int ShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required uint32 forgecost = 2;
    if (has_forgecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forgecost());
    }

    // required .RewardConfig.RewardItemCfg item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopItem::MergeFrom(const ShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_forgecost()) {
      set_forgecost(from.forgecost());
    }
    if (from.has_item()) {
      mutable_item()->::RewardConfig::RewardItemCfg::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopItem::CopyFrom(const ShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ShopItem::Swap(ShopItem* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(forgecost_, other->forgecost_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopItem_descriptor_;
  metadata.reflection = ShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForgeSmelt::kDailyLimitFieldNumber;
const int ForgeSmelt::kForgeLimitFieldNumber;
const int ForgeSmelt::kSmeltFieldNumber;
const int ForgeSmelt::kShopFieldNumber;
#endif  // !_MSC_VER

ForgeSmelt::ForgeSmelt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.ForgeSmelt)
}

void ForgeSmelt::InitAsDefaultInstance() {
}

ForgeSmelt::ForgeSmelt(const ForgeSmelt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.ForgeSmelt)
}

void ForgeSmelt::SharedCtor() {
  _cached_size_ = 0;
  daily_limit_ = 0u;
  forge_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForgeSmelt::~ForgeSmelt() {
  // @@protoc_insertion_point(destructor:ConfigActivity.ForgeSmelt)
  SharedDtor();
}

void ForgeSmelt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForgeSmelt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForgeSmelt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForgeSmelt_descriptor_;
}

const ForgeSmelt& ForgeSmelt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

ForgeSmelt* ForgeSmelt::default_instance_ = NULL;

ForgeSmelt* ForgeSmelt::New() const {
  return new ForgeSmelt;
}

void ForgeSmelt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForgeSmelt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(daily_limit_, forge_limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  smelt_.Clear();
  shop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForgeSmelt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.ForgeSmelt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 daily_limit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_limit_)));
          set_has_daily_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_forge_limit;
        break;
      }

      // required uint32 forge_limit = 2;
      case 2: {
        if (tag == 16) {
         parse_forge_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forge_limit_)));
          set_has_forge_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_smelt;
        break;
      }

      // repeated .ConfigActivity.SmeltItem smelt = 3;
      case 3: {
        if (tag == 26) {
         parse_smelt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_smelt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_smelt;
        if (input->ExpectTag(34)) goto parse_shop;
        break;
      }

      // repeated .ConfigActivity.ShopItem shop = 4;
      case 4: {
        if (tag == 34) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.ForgeSmelt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.ForgeSmelt)
  return false;
#undef DO_
}

void ForgeSmelt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.ForgeSmelt)
  // required uint32 daily_limit = 1;
  if (has_daily_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->daily_limit(), output);
  }

  // required uint32 forge_limit = 2;
  if (has_forge_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->forge_limit(), output);
  }

  // repeated .ConfigActivity.SmeltItem smelt = 3;
  for (int i = 0; i < this->smelt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->smelt(i), output);
  }

  // repeated .ConfigActivity.ShopItem shop = 4;
  for (int i = 0; i < this->shop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.ForgeSmelt)
}

::google::protobuf::uint8* ForgeSmelt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.ForgeSmelt)
  // required uint32 daily_limit = 1;
  if (has_daily_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->daily_limit(), target);
  }

  // required uint32 forge_limit = 2;
  if (has_forge_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->forge_limit(), target);
  }

  // repeated .ConfigActivity.SmeltItem smelt = 3;
  for (int i = 0; i < this->smelt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->smelt(i), target);
  }

  // repeated .ConfigActivity.ShopItem shop = 4;
  for (int i = 0; i < this->shop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.ForgeSmelt)
  return target;
}

int ForgeSmelt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 daily_limit = 1;
    if (has_daily_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_limit());
    }

    // required uint32 forge_limit = 2;
    if (has_forge_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forge_limit());
    }

  }
  // repeated .ConfigActivity.SmeltItem smelt = 3;
  total_size += 1 * this->smelt_size();
  for (int i = 0; i < this->smelt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->smelt(i));
  }

  // repeated .ConfigActivity.ShopItem shop = 4;
  total_size += 1 * this->shop_size();
  for (int i = 0; i < this->shop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForgeSmelt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForgeSmelt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForgeSmelt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForgeSmelt::MergeFrom(const ForgeSmelt& from) {
  GOOGLE_CHECK_NE(&from, this);
  smelt_.MergeFrom(from.smelt_);
  shop_.MergeFrom(from.shop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daily_limit()) {
      set_daily_limit(from.daily_limit());
    }
    if (from.has_forge_limit()) {
      set_forge_limit(from.forge_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForgeSmelt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForgeSmelt::CopyFrom(const ForgeSmelt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForgeSmelt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->smelt())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->shop())) return false;
  return true;
}

void ForgeSmelt::Swap(ForgeSmelt* other) {
  if (other != this) {
    std::swap(daily_limit_, other->daily_limit_);
    std::swap(forge_limit_, other->forge_limit_);
    smelt_.Swap(&other->smelt_);
    shop_.Swap(&other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForgeSmelt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForgeSmelt_descriptor_;
  metadata.reflection = ForgeSmelt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroItem::kIdFieldNumber;
const int HeroItem::kWeightFieldNumber;
const int HeroItem::kRewardFieldNumber;
#endif  // !_MSC_VER

HeroItem::HeroItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.HeroItem)
}

void HeroItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

HeroItem::HeroItem(const HeroItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.HeroItem)
}

void HeroItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  weight_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroItem::~HeroItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.HeroItem)
  SharedDtor();
}

void HeroItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void HeroItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroItem_descriptor_;
}

const HeroItem& HeroItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

HeroItem* HeroItem::default_instance_ = NULL;

HeroItem* HeroItem::New() const {
  return new HeroItem;
}

void HeroItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, weight_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.HeroItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.HeroItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.HeroItem)
  return false;
#undef DO_
}

void HeroItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.HeroItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.HeroItem)
}

::google::protobuf::uint8* HeroItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.HeroItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.HeroItem)
  return target;
}

int HeroItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroItem::MergeFrom(const HeroItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroItem::CopyFrom(const HeroItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void HeroItem::Swap(HeroItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroItem_descriptor_;
  metadata.reflection = HeroItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroDial::kPerFieldNumber;
const int HeroDial::kHeroesFieldNumber;
const int HeroDial::kLimitFieldNumber;
#endif  // !_MSC_VER

HeroDial::HeroDial()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.HeroDial)
}

void HeroDial::InitAsDefaultInstance() {
}

HeroDial::HeroDial(const HeroDial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.HeroDial)
}

void HeroDial::SharedCtor() {
  _cached_size_ = 0;
  per_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroDial::~HeroDial() {
  // @@protoc_insertion_point(destructor:ConfigActivity.HeroDial)
  SharedDtor();
}

void HeroDial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroDial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroDial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroDial_descriptor_;
}

const HeroDial& HeroDial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

HeroDial* HeroDial::default_instance_ = NULL;

HeroDial* HeroDial::New() const {
  return new HeroDial;
}

void HeroDial::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HeroDial*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(per_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroDial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.HeroDial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 per = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &per_)));
          set_has_per();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroes;
        break;
      }

      // repeated .ConfigActivity.HeroItem heroes = 2;
      case 2: {
        if (tag == 18) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heroes;
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }

      // required uint32 limit = 3;
      case 3: {
        if (tag == 24) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.HeroDial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.HeroDial)
  return false;
#undef DO_
}

void HeroDial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.HeroDial)
  // required uint32 per = 1;
  if (has_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->per(), output);
  }

  // repeated .ConfigActivity.HeroItem heroes = 2;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroes(i), output);
  }

  // required uint32 limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.HeroDial)
}

::google::protobuf::uint8* HeroDial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.HeroDial)
  // required uint32 per = 1;
  if (has_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->per(), target);
  }

  // repeated .ConfigActivity.HeroItem heroes = 2;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroes(i), target);
  }

  // required uint32 limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.HeroDial)
  return target;
}

int HeroDial::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 per = 1;
    if (has_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->per());
    }

    // required uint32 limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  // repeated .ConfigActivity.HeroItem heroes = 2;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroDial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroDial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroDial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroDial::MergeFrom(const HeroDial& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_per()) {
      set_per(from.per());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroDial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroDial::CopyFrom(const HeroDial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroDial::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->heroes())) return false;
  return true;
}

void HeroDial::Swap(HeroDial* other) {
  if (other != this) {
    std::swap(per_, other->per_);
    heroes_.Swap(&other->heroes_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroDial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroDial_descriptor_;
  metadata.reflection = HeroDial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlackGoldEnhance::kFirstFieldNumber;
const int BlackGoldEnhance::kLimitFieldNumber;
const int BlackGoldEnhance::kStartFieldNumber;
const int BlackGoldEnhance::kAccumulateFieldNumber;
const int BlackGoldEnhance::kConditionFieldNumber;
const int BlackGoldEnhance::kRewardFieldNumber;
#endif  // !_MSC_VER

BlackGoldEnhance::BlackGoldEnhance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.BlackGoldEnhance)
}

void BlackGoldEnhance::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

BlackGoldEnhance::BlackGoldEnhance(const BlackGoldEnhance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.BlackGoldEnhance)
}

void BlackGoldEnhance::SharedCtor() {
  _cached_size_ = 0;
  first_ = 0u;
  limit_ = 0u;
  start_ = 0u;
  accumulate_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlackGoldEnhance::~BlackGoldEnhance() {
  // @@protoc_insertion_point(destructor:ConfigActivity.BlackGoldEnhance)
  SharedDtor();
}

void BlackGoldEnhance::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void BlackGoldEnhance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlackGoldEnhance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlackGoldEnhance_descriptor_;
}

const BlackGoldEnhance& BlackGoldEnhance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

BlackGoldEnhance* BlackGoldEnhance::default_instance_ = NULL;

BlackGoldEnhance* BlackGoldEnhance::New() const {
  return new BlackGoldEnhance;
}

void BlackGoldEnhance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BlackGoldEnhance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(first_, accumulate_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlackGoldEnhance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.BlackGoldEnhance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 first = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_)));
          set_has_first();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // required uint32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start;
        break;
      }

      // required uint32 start = 3;
      case 3: {
        if (tag == 24) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accumulate;
        break;
      }

      // required uint32 accumulate = 4;
      case 4: {
        if (tag == 32) {
         parse_accumulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accumulate_)));
          set_has_accumulate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition;
        break;
      }

      // repeated uint32 condition = 5;
      case 5: {
        if (tag == 40) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_condition())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_condition())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition;
        if (input->ExpectTag(50)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 6;
      case 6: {
        if (tag == 50) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.BlackGoldEnhance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.BlackGoldEnhance)
  return false;
#undef DO_
}

void BlackGoldEnhance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.BlackGoldEnhance)
  // required uint32 first = 1;
  if (has_first()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->first(), output);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // required uint32 start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start(), output);
  }

  // required uint32 accumulate = 4;
  if (has_accumulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accumulate(), output);
  }

  // repeated uint32 condition = 5;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->condition(i), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 6;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.BlackGoldEnhance)
}

::google::protobuf::uint8* BlackGoldEnhance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.BlackGoldEnhance)
  // required uint32 first = 1;
  if (has_first()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->first(), target);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // required uint32 start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start(), target);
  }

  // required uint32 accumulate = 4;
  if (has_accumulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accumulate(), target);
  }

  // repeated uint32 condition = 5;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->condition(i), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 6;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.BlackGoldEnhance)
  return target;
}

int BlackGoldEnhance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 first = 1;
    if (has_first()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first());
    }

    // required uint32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required uint32 start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

    // required uint32 accumulate = 4;
    if (has_accumulate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accumulate());
    }

    // required .RewardConfig.RewardItemCfg reward = 6;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  // repeated uint32 condition = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->condition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->condition(i));
    }
    total_size += 1 * this->condition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlackGoldEnhance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlackGoldEnhance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlackGoldEnhance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlackGoldEnhance::MergeFrom(const BlackGoldEnhance& from) {
  GOOGLE_CHECK_NE(&from, this);
  condition_.MergeFrom(from.condition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first()) {
      set_first(from.first());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_accumulate()) {
      set_accumulate(from.accumulate());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlackGoldEnhance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlackGoldEnhance::CopyFrom(const BlackGoldEnhance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlackGoldEnhance::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void BlackGoldEnhance::Swap(BlackGoldEnhance* other) {
  if (other != this) {
    std::swap(first_, other->first_);
    std::swap(limit_, other->limit_);
    std::swap(start_, other->start_);
    std::swap(accumulate_, other->accumulate_);
    condition_.Swap(&other->condition_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlackGoldEnhance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlackGoldEnhance_descriptor_;
  metadata.reflection = BlackGoldEnhance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KingdomWar::kDiamondFieldNumber;
const int KingdomWar::kRewardFieldNumber;
#endif  // !_MSC_VER

KingdomWar::KingdomWar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.KingdomWar)
}

void KingdomWar::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

KingdomWar::KingdomWar(const KingdomWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.KingdomWar)
}

void KingdomWar::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KingdomWar::~KingdomWar() {
  // @@protoc_insertion_point(destructor:ConfigActivity.KingdomWar)
  SharedDtor();
}

void KingdomWar::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void KingdomWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KingdomWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KingdomWar_descriptor_;
}

const KingdomWar& KingdomWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

KingdomWar* KingdomWar::default_instance_ = NULL;

KingdomWar* KingdomWar::New() const {
  return new KingdomWar;
}

void KingdomWar::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    diamond_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KingdomWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.KingdomWar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.KingdomWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.KingdomWar)
  return false;
#undef DO_
}

void KingdomWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.KingdomWar)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.KingdomWar)
}

::google::protobuf::uint8* KingdomWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.KingdomWar)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.KingdomWar)
  return target;
}

int KingdomWar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KingdomWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KingdomWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KingdomWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KingdomWar::MergeFrom(const KingdomWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KingdomWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KingdomWar::CopyFrom(const KingdomWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KingdomWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void KingdomWar::Swap(KingdomWar* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KingdomWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KingdomWar_descriptor_;
  metadata.reflection = KingdomWar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardItem::kPriceFieldNumber;
const int RewardItem::kRewardFieldNumber;
#endif  // !_MSC_VER

RewardItem::RewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.RewardItem)
}

void RewardItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

RewardItem::RewardItem(const RewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.RewardItem)
}

void RewardItem::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardItem::~RewardItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.RewardItem)
  SharedDtor();
}

void RewardItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void RewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardItem_descriptor_;
}

const RewardItem& RewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

RewardItem* RewardItem::default_instance_ = NULL;

RewardItem* RewardItem::New() const {
  return new RewardItem;
}

void RewardItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    price_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.RewardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 price = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.RewardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.RewardItem)
  return false;
#undef DO_
}

void RewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.RewardItem)
  // required uint32 price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->price(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.RewardItem)
}

::google::protobuf::uint8* RewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.RewardItem)
  // required uint32 price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->price(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.RewardItem)
  return target;
}

int RewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardItem::MergeFrom(const RewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardItem::CopyFrom(const RewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void RewardItem::Swap(RewardItem* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardItem_descriptor_;
  metadata.reflection = RewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneDiamondWelfare::kDiamondFieldNumber;
const int OneDiamondWelfare::kItemsFieldNumber;
#endif  // !_MSC_VER

OneDiamondWelfare::OneDiamondWelfare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.OneDiamondWelfare)
}

void OneDiamondWelfare::InitAsDefaultInstance() {
}

OneDiamondWelfare::OneDiamondWelfare(const OneDiamondWelfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.OneDiamondWelfare)
}

void OneDiamondWelfare::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneDiamondWelfare::~OneDiamondWelfare() {
  // @@protoc_insertion_point(destructor:ConfigActivity.OneDiamondWelfare)
  SharedDtor();
}

void OneDiamondWelfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneDiamondWelfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneDiamondWelfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneDiamondWelfare_descriptor_;
}

const OneDiamondWelfare& OneDiamondWelfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

OneDiamondWelfare* OneDiamondWelfare::default_instance_ = NULL;

OneDiamondWelfare* OneDiamondWelfare::New() const {
  return new OneDiamondWelfare;
}

void OneDiamondWelfare::Clear() {
  diamond_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneDiamondWelfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.OneDiamondWelfare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .ConfigActivity.RewardItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.OneDiamondWelfare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.OneDiamondWelfare)
  return false;
#undef DO_
}

void OneDiamondWelfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.OneDiamondWelfare)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // repeated .ConfigActivity.RewardItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.OneDiamondWelfare)
}

::google::protobuf::uint8* OneDiamondWelfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.OneDiamondWelfare)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // repeated .ConfigActivity.RewardItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.OneDiamondWelfare)
  return target;
}

int OneDiamondWelfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

  }
  // repeated .ConfigActivity.RewardItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneDiamondWelfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneDiamondWelfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneDiamondWelfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneDiamondWelfare::MergeFrom(const OneDiamondWelfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneDiamondWelfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneDiamondWelfare::CopyFrom(const OneDiamondWelfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneDiamondWelfare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void OneDiamondWelfare::Swap(OneDiamondWelfare* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneDiamondWelfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneDiamondWelfare_descriptor_;
  metadata.reflection = OneDiamondWelfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FortunePacks::kExtraRewardFieldNumber;
const int FortunePacks::kGoodsFieldNumber;
#endif  // !_MSC_VER

FortunePacks::FortunePacks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.FortunePacks)
}

void FortunePacks::InitAsDefaultInstance() {
  extra_reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

FortunePacks::FortunePacks(const FortunePacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.FortunePacks)
}

void FortunePacks::SharedCtor() {
  _cached_size_ = 0;
  extra_reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FortunePacks::~FortunePacks() {
  // @@protoc_insertion_point(destructor:ConfigActivity.FortunePacks)
  SharedDtor();
}

void FortunePacks::SharedDtor() {
  if (this != default_instance_) {
    delete extra_reward_;
  }
}

void FortunePacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FortunePacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FortunePacks_descriptor_;
}

const FortunePacks& FortunePacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

FortunePacks* FortunePacks::default_instance_ = NULL;

FortunePacks* FortunePacks::New() const {
  return new FortunePacks;
}

void FortunePacks::Clear() {
  if (has_extra_reward()) {
    if (extra_reward_ != NULL) extra_reward_->::RewardConfig::RewardItemCfg::Clear();
  }
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FortunePacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.FortunePacks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RewardConfig.RewardItemCfg extra_reward = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        break;
      }

      // repeated .ConfigActivity.RewardItem goods = 2;
      case 2: {
        if (tag == 18) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_goods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.FortunePacks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.FortunePacks)
  return false;
#undef DO_
}

void FortunePacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.FortunePacks)
  // required .RewardConfig.RewardItemCfg extra_reward = 1;
  if (has_extra_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->extra_reward(), output);
  }

  // repeated .ConfigActivity.RewardItem goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.FortunePacks)
}

::google::protobuf::uint8* FortunePacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.FortunePacks)
  // required .RewardConfig.RewardItemCfg extra_reward = 1;
  if (has_extra_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->extra_reward(), target);
  }

  // repeated .ConfigActivity.RewardItem goods = 2;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.FortunePacks)
  return target;
}

int FortunePacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RewardConfig.RewardItemCfg extra_reward = 1;
    if (has_extra_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_reward());
    }

  }
  // repeated .ConfigActivity.RewardItem goods = 2;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FortunePacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FortunePacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FortunePacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FortunePacks::MergeFrom(const FortunePacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extra_reward()) {
      mutable_extra_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.extra_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FortunePacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FortunePacks::CopyFrom(const FortunePacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FortunePacks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_extra_reward()) {
    if (!this->extra_reward().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->goods())) return false;
  return true;
}

void FortunePacks::Swap(FortunePacks* other) {
  if (other != this) {
    std::swap(extra_reward_, other->extra_reward_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FortunePacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FortunePacks_descriptor_;
  metadata.reflection = FortunePacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SevenDayPacks::kRewardFieldNumber;
#endif  // !_MSC_VER

SevenDayPacks::SevenDayPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.SevenDayPacks)
}

void SevenDayPacks::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

SevenDayPacks::SevenDayPacks(const SevenDayPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.SevenDayPacks)
}

void SevenDayPacks::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SevenDayPacks::~SevenDayPacks() {
  // @@protoc_insertion_point(destructor:ConfigActivity.SevenDayPacks)
  SharedDtor();
}

void SevenDayPacks::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void SevenDayPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SevenDayPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SevenDayPacks_descriptor_;
}

const SevenDayPacks& SevenDayPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

SevenDayPacks* SevenDayPacks::default_instance_ = NULL;

SevenDayPacks* SevenDayPacks::New() const {
  return new SevenDayPacks;
}

void SevenDayPacks::Clear() {
  if (has_reward()) {
    if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SevenDayPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.SevenDayPacks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RewardConfig.RewardItemCfg reward = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.SevenDayPacks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.SevenDayPacks)
  return false;
#undef DO_
}

void SevenDayPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.SevenDayPacks)
  // required .RewardConfig.RewardItemCfg reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.SevenDayPacks)
}

::google::protobuf::uint8* SevenDayPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.SevenDayPacks)
  // required .RewardConfig.RewardItemCfg reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.SevenDayPacks)
  return target;
}

int SevenDayPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RewardConfig.RewardItemCfg reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SevenDayPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SevenDayPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SevenDayPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SevenDayPacks::MergeFrom(const SevenDayPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SevenDayPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDayPacks::CopyFrom(const SevenDayPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDayPacks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void SevenDayPacks::Swap(SevenDayPacks* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SevenDayPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SevenDayPacks_descriptor_;
  metadata.reflection = SevenDayPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeKey::kDiamondFieldNumber;
const int ChargeKey::kKeynumFieldNumber;
#endif  // !_MSC_VER

ChargeKey::ChargeKey()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.ChargeKey)
}

void ChargeKey::InitAsDefaultInstance() {
}

ChargeKey::ChargeKey(const ChargeKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.ChargeKey)
}

void ChargeKey::SharedCtor() {
  _cached_size_ = 0;
  diamond_ = 0u;
  keynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeKey::~ChargeKey() {
  // @@protoc_insertion_point(destructor:ConfigActivity.ChargeKey)
  SharedDtor();
}

void ChargeKey::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeKey_descriptor_;
}

const ChargeKey& ChargeKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

ChargeKey* ChargeKey::default_instance_ = NULL;

ChargeKey* ChargeKey::New() const {
  return new ChargeKey;
}

void ChargeKey::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeKey*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(diamond_, keynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.ChargeKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 diamond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_keynum;
        break;
      }

      // required uint32 keynum = 2;
      case 2: {
        if (tag == 16) {
         parse_keynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keynum_)));
          set_has_keynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.ChargeKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.ChargeKey)
  return false;
#undef DO_
}

void ChargeKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.ChargeKey)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->diamond(), output);
  }

  // required uint32 keynum = 2;
  if (has_keynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->keynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.ChargeKey)
}

::google::protobuf::uint8* ChargeKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.ChargeKey)
  // required uint32 diamond = 1;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->diamond(), target);
  }

  // required uint32 keynum = 2;
  if (has_keynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->keynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.ChargeKey)
  return target;
}

int ChargeKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 diamond = 1;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // required uint32 keynum = 2;
    if (has_keynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeKey::MergeFrom(const ChargeKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_keynum()) {
      set_keynum(from.keynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeKey::CopyFrom(const ChargeKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChargeKey::Swap(ChargeKey* other) {
  if (other != this) {
    std::swap(diamond_, other->diamond_);
    std::swap(keynum_, other->keynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeKey_descriptor_;
  metadata.reflection = ChargeKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StuffItem::kCostkeyFieldNumber;
const int StuffItem::kLimitFieldNumber;
const int StuffItem::kRewardFieldNumber;
#endif  // !_MSC_VER

StuffItem::StuffItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.StuffItem)
}

void StuffItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

StuffItem::StuffItem(const StuffItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.StuffItem)
}

void StuffItem::SharedCtor() {
  _cached_size_ = 0;
  costkey_ = 0u;
  limit_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StuffItem::~StuffItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.StuffItem)
  SharedDtor();
}

void StuffItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void StuffItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StuffItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StuffItem_descriptor_;
}

const StuffItem& StuffItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

StuffItem* StuffItem::default_instance_ = NULL;

StuffItem* StuffItem::New() const {
  return new StuffItem;
}

void StuffItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StuffItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(costkey_, limit_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StuffItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.StuffItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 costkey = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costkey_)));
          set_has_costkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // required uint32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.StuffItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.StuffItem)
  return false;
#undef DO_
}

void StuffItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.StuffItem)
  // required uint32 costkey = 1;
  if (has_costkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->costkey(), output);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.StuffItem)
}

::google::protobuf::uint8* StuffItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.StuffItem)
  // required uint32 costkey = 1;
  if (has_costkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->costkey(), target);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.StuffItem)
  return target;
}

int StuffItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 costkey = 1;
    if (has_costkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costkey());
    }

    // required uint32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StuffItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StuffItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StuffItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StuffItem::MergeFrom(const StuffItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_costkey()) {
      set_costkey(from.costkey());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StuffItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StuffItem::CopyFrom(const StuffItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StuffItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void StuffItem::Swap(StuffItem* other) {
  if (other != this) {
    std::swap(costkey_, other->costkey_);
    std::swap(limit_, other->limit_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StuffItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StuffItem_descriptor_;
  metadata.reflection = StuffItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyLuxuryGift::kChargeKeyFieldNumber;
const int KeyLuxuryGift::kStuffItemsFieldNumber;
#endif  // !_MSC_VER

KeyLuxuryGift::KeyLuxuryGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.KeyLuxuryGift)
}

void KeyLuxuryGift::InitAsDefaultInstance() {
}

KeyLuxuryGift::KeyLuxuryGift(const KeyLuxuryGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.KeyLuxuryGift)
}

void KeyLuxuryGift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyLuxuryGift::~KeyLuxuryGift() {
  // @@protoc_insertion_point(destructor:ConfigActivity.KeyLuxuryGift)
  SharedDtor();
}

void KeyLuxuryGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyLuxuryGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyLuxuryGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyLuxuryGift_descriptor_;
}

const KeyLuxuryGift& KeyLuxuryGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

KeyLuxuryGift* KeyLuxuryGift::default_instance_ = NULL;

KeyLuxuryGift* KeyLuxuryGift::New() const {
  return new KeyLuxuryGift;
}

void KeyLuxuryGift::Clear() {
  charge_key_.Clear();
  stuff_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyLuxuryGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.KeyLuxuryGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.ChargeKey charge_key = 1;
      case 1: {
        if (tag == 10) {
         parse_charge_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charge_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_charge_key;
        if (input->ExpectTag(18)) goto parse_stuff_items;
        break;
      }

      // repeated .ConfigActivity.StuffItem stuff_items = 2;
      case 2: {
        if (tag == 18) {
         parse_stuff_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stuff_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stuff_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.KeyLuxuryGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.KeyLuxuryGift)
  return false;
#undef DO_
}

void KeyLuxuryGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.KeyLuxuryGift)
  // repeated .ConfigActivity.ChargeKey charge_key = 1;
  for (int i = 0; i < this->charge_key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charge_key(i), output);
  }

  // repeated .ConfigActivity.StuffItem stuff_items = 2;
  for (int i = 0; i < this->stuff_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stuff_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.KeyLuxuryGift)
}

::google::protobuf::uint8* KeyLuxuryGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.KeyLuxuryGift)
  // repeated .ConfigActivity.ChargeKey charge_key = 1;
  for (int i = 0; i < this->charge_key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charge_key(i), target);
  }

  // repeated .ConfigActivity.StuffItem stuff_items = 2;
  for (int i = 0; i < this->stuff_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stuff_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.KeyLuxuryGift)
  return target;
}

int KeyLuxuryGift::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigActivity.ChargeKey charge_key = 1;
  total_size += 1 * this->charge_key_size();
  for (int i = 0; i < this->charge_key_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charge_key(i));
  }

  // repeated .ConfigActivity.StuffItem stuff_items = 2;
  total_size += 1 * this->stuff_items_size();
  for (int i = 0; i < this->stuff_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stuff_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyLuxuryGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyLuxuryGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyLuxuryGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyLuxuryGift::MergeFrom(const KeyLuxuryGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  charge_key_.MergeFrom(from.charge_key_);
  stuff_items_.MergeFrom(from.stuff_items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyLuxuryGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyLuxuryGift::CopyFrom(const KeyLuxuryGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyLuxuryGift::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->charge_key())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->stuff_items())) return false;
  return true;
}

void KeyLuxuryGift::Swap(KeyLuxuryGift* other) {
  if (other != this) {
    charge_key_.Swap(&other->charge_key_);
    stuff_items_.Swap(&other->stuff_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyLuxuryGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyLuxuryGift_descriptor_;
  metadata.reflection = KeyLuxuryGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumeGiftItem::kConsumeFieldNumber;
const int ConsumeGiftItem::kRewardFieldNumber;
#endif  // !_MSC_VER

ConsumeGiftItem::ConsumeGiftItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.ConsumeGiftItem)
}

void ConsumeGiftItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

ConsumeGiftItem::ConsumeGiftItem(const ConsumeGiftItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.ConsumeGiftItem)
}

void ConsumeGiftItem::SharedCtor() {
  _cached_size_ = 0;
  consume_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumeGiftItem::~ConsumeGiftItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.ConsumeGiftItem)
  SharedDtor();
}

void ConsumeGiftItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void ConsumeGiftItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsumeGiftItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsumeGiftItem_descriptor_;
}

const ConsumeGiftItem& ConsumeGiftItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

ConsumeGiftItem* ConsumeGiftItem::default_instance_ = NULL;

ConsumeGiftItem* ConsumeGiftItem::New() const {
  return new ConsumeGiftItem;
}

void ConsumeGiftItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    consume_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsumeGiftItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.ConsumeGiftItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 consume = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.ConsumeGiftItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.ConsumeGiftItem)
  return false;
#undef DO_
}

void ConsumeGiftItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.ConsumeGiftItem)
  // required uint32 consume = 1;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->consume(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.ConsumeGiftItem)
}

::google::protobuf::uint8* ConsumeGiftItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.ConsumeGiftItem)
  // required uint32 consume = 1;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->consume(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.ConsumeGiftItem)
  return target;
}

int ConsumeGiftItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 consume = 1;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumeGiftItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsumeGiftItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsumeGiftItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsumeGiftItem::MergeFrom(const ConsumeGiftItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_consume()) {
      set_consume(from.consume());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsumeGiftItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumeGiftItem::CopyFrom(const ConsumeGiftItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeGiftItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void ConsumeGiftItem::Swap(ConsumeGiftItem* other) {
  if (other != this) {
    std::swap(consume_, other->consume_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsumeGiftItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsumeGiftItem_descriptor_;
  metadata.reflection = ConsumeGiftItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnjoySmallGiftReward::kChargeGiftFieldNumber;
const int EnjoySmallGiftReward::kConsumeGiftFieldNumber;
#endif  // !_MSC_VER

EnjoySmallGiftReward::EnjoySmallGiftReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.EnjoySmallGiftReward)
}

void EnjoySmallGiftReward::InitAsDefaultInstance() {
}

EnjoySmallGiftReward::EnjoySmallGiftReward(const EnjoySmallGiftReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.EnjoySmallGiftReward)
}

void EnjoySmallGiftReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnjoySmallGiftReward::~EnjoySmallGiftReward() {
  // @@protoc_insertion_point(destructor:ConfigActivity.EnjoySmallGiftReward)
  SharedDtor();
}

void EnjoySmallGiftReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnjoySmallGiftReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnjoySmallGiftReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnjoySmallGiftReward_descriptor_;
}

const EnjoySmallGiftReward& EnjoySmallGiftReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

EnjoySmallGiftReward* EnjoySmallGiftReward::default_instance_ = NULL;

EnjoySmallGiftReward* EnjoySmallGiftReward::New() const {
  return new EnjoySmallGiftReward;
}

void EnjoySmallGiftReward::Clear() {
  charge_gift_.Clear();
  consume_gift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnjoySmallGiftReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.EnjoySmallGiftReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.DiamondReward charge_gift = 1;
      case 1: {
        if (tag == 10) {
         parse_charge_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charge_gift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_charge_gift;
        if (input->ExpectTag(18)) goto parse_consume_gift;
        break;
      }

      // repeated .ConfigActivity.ConsumeGiftItem consume_gift = 2;
      case 2: {
        if (tag == 18) {
         parse_consume_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consume_gift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_consume_gift;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.EnjoySmallGiftReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.EnjoySmallGiftReward)
  return false;
#undef DO_
}

void EnjoySmallGiftReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.EnjoySmallGiftReward)
  // repeated .ConfigActivity.DiamondReward charge_gift = 1;
  for (int i = 0; i < this->charge_gift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charge_gift(i), output);
  }

  // repeated .ConfigActivity.ConsumeGiftItem consume_gift = 2;
  for (int i = 0; i < this->consume_gift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->consume_gift(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.EnjoySmallGiftReward)
}

::google::protobuf::uint8* EnjoySmallGiftReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.EnjoySmallGiftReward)
  // repeated .ConfigActivity.DiamondReward charge_gift = 1;
  for (int i = 0; i < this->charge_gift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charge_gift(i), target);
  }

  // repeated .ConfigActivity.ConsumeGiftItem consume_gift = 2;
  for (int i = 0; i < this->consume_gift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->consume_gift(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.EnjoySmallGiftReward)
  return target;
}

int EnjoySmallGiftReward::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigActivity.DiamondReward charge_gift = 1;
  total_size += 1 * this->charge_gift_size();
  for (int i = 0; i < this->charge_gift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charge_gift(i));
  }

  // repeated .ConfigActivity.ConsumeGiftItem consume_gift = 2;
  total_size += 1 * this->consume_gift_size();
  for (int i = 0; i < this->consume_gift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consume_gift(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnjoySmallGiftReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnjoySmallGiftReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnjoySmallGiftReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnjoySmallGiftReward::MergeFrom(const EnjoySmallGiftReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  charge_gift_.MergeFrom(from.charge_gift_);
  consume_gift_.MergeFrom(from.consume_gift_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnjoySmallGiftReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnjoySmallGiftReward::CopyFrom(const EnjoySmallGiftReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnjoySmallGiftReward::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->charge_gift())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->consume_gift())) return false;
  return true;
}

void EnjoySmallGiftReward::Swap(EnjoySmallGiftReward* other) {
  if (other != this) {
    charge_gift_.Swap(&other->charge_gift_);
    consume_gift_.Swap(&other->consume_gift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnjoySmallGiftReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnjoySmallGiftReward_descriptor_;
  metadata.reflection = EnjoySmallGiftReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnTableItem::kIdFieldNumber;
const int TurnTableItem::kWeightFieldNumber;
const int TurnTableItem::kRewardFieldNumber;
#endif  // !_MSC_VER

TurnTableItem::TurnTableItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.TurnTableItem)
}

void TurnTableItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

TurnTableItem::TurnTableItem(const TurnTableItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.TurnTableItem)
}

void TurnTableItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  weight_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnTableItem::~TurnTableItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.TurnTableItem)
  SharedDtor();
}

void TurnTableItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void TurnTableItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnTableItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnTableItem_descriptor_;
}

const TurnTableItem& TurnTableItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

TurnTableItem* TurnTableItem::default_instance_ = NULL;

TurnTableItem* TurnTableItem::New() const {
  return new TurnTableItem;
}

void TurnTableItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TurnTableItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, weight_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnTableItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.TurnTableItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.TurnTableItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.TurnTableItem)
  return false;
#undef DO_
}

void TurnTableItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.TurnTableItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.TurnTableItem)
}

::google::protobuf::uint8* TurnTableItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.TurnTableItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.TurnTableItem)
  return target;
}

int TurnTableItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnTableItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnTableItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnTableItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnTableItem::MergeFrom(const TurnTableItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnTableItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnTableItem::CopyFrom(const TurnTableItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnTableItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void TurnTableItem::Swap(TurnTableItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnTableItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnTableItem_descriptor_;
  metadata.reflection = TurnTableItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckyGiftItem::kItemsFieldNumber;
#endif  // !_MSC_VER

LuckyGiftItem::LuckyGiftItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.LuckyGiftItem)
}

void LuckyGiftItem::InitAsDefaultInstance() {
}

LuckyGiftItem::LuckyGiftItem(const LuckyGiftItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.LuckyGiftItem)
}

void LuckyGiftItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckyGiftItem::~LuckyGiftItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.LuckyGiftItem)
  SharedDtor();
}

void LuckyGiftItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuckyGiftItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckyGiftItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckyGiftItem_descriptor_;
}

const LuckyGiftItem& LuckyGiftItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

LuckyGiftItem* LuckyGiftItem::default_instance_ = NULL;

LuckyGiftItem* LuckyGiftItem::New() const {
  return new LuckyGiftItem;
}

void LuckyGiftItem::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckyGiftItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.LuckyGiftItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.TurnTableItem items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.LuckyGiftItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.LuckyGiftItem)
  return false;
#undef DO_
}

void LuckyGiftItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.LuckyGiftItem)
  // repeated .ConfigActivity.TurnTableItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.LuckyGiftItem)
}

::google::protobuf::uint8* LuckyGiftItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.LuckyGiftItem)
  // repeated .ConfigActivity.TurnTableItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.LuckyGiftItem)
  return target;
}

int LuckyGiftItem::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigActivity.TurnTableItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckyGiftItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckyGiftItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckyGiftItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckyGiftItem::MergeFrom(const LuckyGiftItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckyGiftItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyGiftItem::CopyFrom(const LuckyGiftItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyGiftItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void LuckyGiftItem::Swap(LuckyGiftItem* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckyGiftItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckyGiftItem_descriptor_;
  metadata.reflection = LuckyGiftItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckyGift::kKeycostFieldNumber;
const int LuckyGift::kPointcostFieldNumber;
const int LuckyGift::kStuffItemsFieldNumber;
#endif  // !_MSC_VER

LuckyGift::LuckyGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.LuckyGift)
}

void LuckyGift::InitAsDefaultInstance() {
}

LuckyGift::LuckyGift(const LuckyGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.LuckyGift)
}

void LuckyGift::SharedCtor() {
  _cached_size_ = 0;
  keycost_ = 0u;
  pointcost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckyGift::~LuckyGift() {
  // @@protoc_insertion_point(destructor:ConfigActivity.LuckyGift)
  SharedDtor();
}

void LuckyGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuckyGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckyGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckyGift_descriptor_;
}

const LuckyGift& LuckyGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

LuckyGift* LuckyGift::default_instance_ = NULL;

LuckyGift* LuckyGift::New() const {
  return new LuckyGift;
}

void LuckyGift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LuckyGift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(keycost_, pointcost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  stuff_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckyGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.LuckyGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 keycost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keycost_)));
          set_has_keycost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pointcost;
        break;
      }

      // required uint32 pointcost = 2;
      case 2: {
        if (tag == 16) {
         parse_pointcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointcost_)));
          set_has_pointcost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stuff_items;
        break;
      }

      // repeated .ConfigActivity.LuckyGiftItem stuff_items = 3;
      case 3: {
        if (tag == 26) {
         parse_stuff_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stuff_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stuff_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.LuckyGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.LuckyGift)
  return false;
#undef DO_
}

void LuckyGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.LuckyGift)
  // required uint32 keycost = 1;
  if (has_keycost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->keycost(), output);
  }

  // required uint32 pointcost = 2;
  if (has_pointcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pointcost(), output);
  }

  // repeated .ConfigActivity.LuckyGiftItem stuff_items = 3;
  for (int i = 0; i < this->stuff_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stuff_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.LuckyGift)
}

::google::protobuf::uint8* LuckyGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.LuckyGift)
  // required uint32 keycost = 1;
  if (has_keycost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->keycost(), target);
  }

  // required uint32 pointcost = 2;
  if (has_pointcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pointcost(), target);
  }

  // repeated .ConfigActivity.LuckyGiftItem stuff_items = 3;
  for (int i = 0; i < this->stuff_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stuff_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.LuckyGift)
  return target;
}

int LuckyGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 keycost = 1;
    if (has_keycost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keycost());
    }

    // required uint32 pointcost = 2;
    if (has_pointcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointcost());
    }

  }
  // repeated .ConfigActivity.LuckyGiftItem stuff_items = 3;
  total_size += 1 * this->stuff_items_size();
  for (int i = 0; i < this->stuff_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stuff_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckyGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckyGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckyGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckyGift::MergeFrom(const LuckyGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  stuff_items_.MergeFrom(from.stuff_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keycost()) {
      set_keycost(from.keycost());
    }
    if (from.has_pointcost()) {
      set_pointcost(from.pointcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckyGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckyGift::CopyFrom(const LuckyGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckyGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->stuff_items())) return false;
  return true;
}

void LuckyGift::Swap(LuckyGift* other) {
  if (other != this) {
    std::swap(keycost_, other->keycost_);
    std::swap(pointcost_, other->pointcost_);
    stuff_items_.Swap(&other->stuff_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckyGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckyGift_descriptor_;
  metadata.reflection = LuckyGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewYearActivity::kChargeRewardFieldNumber;
const int NewYearActivity::kBuyItemsFieldNumber;
const int NewYearActivity::kOnlineRewardFieldNumber;
#endif  // !_MSC_VER

NewYearActivity::NewYearActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.NewYearActivity)
}

void NewYearActivity::InitAsDefaultInstance() {
  online_reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

NewYearActivity::NewYearActivity(const NewYearActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.NewYearActivity)
}

void NewYearActivity::SharedCtor() {
  _cached_size_ = 0;
  online_reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewYearActivity::~NewYearActivity() {
  // @@protoc_insertion_point(destructor:ConfigActivity.NewYearActivity)
  SharedDtor();
}

void NewYearActivity::SharedDtor() {
  if (this != default_instance_) {
    delete online_reward_;
  }
}

void NewYearActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewYearActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewYearActivity_descriptor_;
}

const NewYearActivity& NewYearActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

NewYearActivity* NewYearActivity::default_instance_ = NULL;

NewYearActivity* NewYearActivity::New() const {
  return new NewYearActivity;
}

void NewYearActivity::Clear() {
  if (has_online_reward()) {
    if (online_reward_ != NULL) online_reward_->::RewardConfig::RewardItemCfg::Clear();
  }
  charge_reward_.Clear();
  buy_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewYearActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.NewYearActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.DiamondReward charge_reward = 1;
      case 1: {
        if (tag == 10) {
         parse_charge_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charge_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_charge_reward;
        if (input->ExpectTag(18)) goto parse_buy_items;
        break;
      }

      // repeated .ConfigActivity.DiamondRewardLimit buy_items = 2;
      case 2: {
        if (tag == 18) {
         parse_buy_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buy_items;
        if (input->ExpectTag(26)) goto parse_online_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg online_reward = 3;
      case 3: {
        if (tag == 26) {
         parse_online_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.NewYearActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.NewYearActivity)
  return false;
#undef DO_
}

void NewYearActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.NewYearActivity)
  // repeated .ConfigActivity.DiamondReward charge_reward = 1;
  for (int i = 0; i < this->charge_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charge_reward(i), output);
  }

  // repeated .ConfigActivity.DiamondRewardLimit buy_items = 2;
  for (int i = 0; i < this->buy_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buy_items(i), output);
  }

  // required .RewardConfig.RewardItemCfg online_reward = 3;
  if (has_online_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->online_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.NewYearActivity)
}

::google::protobuf::uint8* NewYearActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.NewYearActivity)
  // repeated .ConfigActivity.DiamondReward charge_reward = 1;
  for (int i = 0; i < this->charge_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charge_reward(i), target);
  }

  // repeated .ConfigActivity.DiamondRewardLimit buy_items = 2;
  for (int i = 0; i < this->buy_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buy_items(i), target);
  }

  // required .RewardConfig.RewardItemCfg online_reward = 3;
  if (has_online_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->online_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.NewYearActivity)
  return target;
}

int NewYearActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .RewardConfig.RewardItemCfg online_reward = 3;
    if (has_online_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_reward());
    }

  }
  // repeated .ConfigActivity.DiamondReward charge_reward = 1;
  total_size += 1 * this->charge_reward_size();
  for (int i = 0; i < this->charge_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charge_reward(i));
  }

  // repeated .ConfigActivity.DiamondRewardLimit buy_items = 2;
  total_size += 1 * this->buy_items_size();
  for (int i = 0; i < this->buy_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewYearActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewYearActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewYearActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewYearActivity::MergeFrom(const NewYearActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  charge_reward_.MergeFrom(from.charge_reward_);
  buy_items_.MergeFrom(from.buy_items_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_online_reward()) {
      mutable_online_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.online_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewYearActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearActivity::CopyFrom(const NewYearActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->charge_reward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->buy_items())) return false;
  if (has_online_reward()) {
    if (!this->online_reward().IsInitialized()) return false;
  }
  return true;
}

void NewYearActivity::Swap(NewYearActivity* other) {
  if (other != this) {
    charge_reward_.Swap(&other->charge_reward_);
    buy_items_.Swap(&other->buy_items_);
    std::swap(online_reward_, other->online_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewYearActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewYearActivity_descriptor_;
  metadata.reflection = NewYearActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChinaDayActivity::kChargeRewardFieldNumber;
const int ChinaDayActivity::kEverydayRewardFieldNumber;
const int ChinaDayActivity::kOnlineRewardFieldNumber;
#endif  // !_MSC_VER

ChinaDayActivity::ChinaDayActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.ChinaDayActivity)
}

void ChinaDayActivity::InitAsDefaultInstance() {
  everyday_reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
  online_reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

ChinaDayActivity::ChinaDayActivity(const ChinaDayActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.ChinaDayActivity)
}

void ChinaDayActivity::SharedCtor() {
  _cached_size_ = 0;
  everyday_reward_ = NULL;
  online_reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChinaDayActivity::~ChinaDayActivity() {
  // @@protoc_insertion_point(destructor:ConfigActivity.ChinaDayActivity)
  SharedDtor();
}

void ChinaDayActivity::SharedDtor() {
  if (this != default_instance_) {
    delete everyday_reward_;
    delete online_reward_;
  }
}

void ChinaDayActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChinaDayActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChinaDayActivity_descriptor_;
}

const ChinaDayActivity& ChinaDayActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

ChinaDayActivity* ChinaDayActivity::default_instance_ = NULL;

ChinaDayActivity* ChinaDayActivity::New() const {
  return new ChinaDayActivity;
}

void ChinaDayActivity::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_everyday_reward()) {
      if (everyday_reward_ != NULL) everyday_reward_->::RewardConfig::RewardItemCfg::Clear();
    }
    if (has_online_reward()) {
      if (online_reward_ != NULL) online_reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  charge_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChinaDayActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.ChinaDayActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.DiamondReward charge_reward = 1;
      case 1: {
        if (tag == 10) {
         parse_charge_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charge_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_charge_reward;
        if (input->ExpectTag(18)) goto parse_everyday_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg everyday_reward = 2;
      case 2: {
        if (tag == 18) {
         parse_everyday_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_everyday_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_online_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg online_reward = 3;
      case 3: {
        if (tag == 26) {
         parse_online_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.ChinaDayActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.ChinaDayActivity)
  return false;
#undef DO_
}

void ChinaDayActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.ChinaDayActivity)
  // repeated .ConfigActivity.DiamondReward charge_reward = 1;
  for (int i = 0; i < this->charge_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charge_reward(i), output);
  }

  // required .RewardConfig.RewardItemCfg everyday_reward = 2;
  if (has_everyday_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->everyday_reward(), output);
  }

  // required .RewardConfig.RewardItemCfg online_reward = 3;
  if (has_online_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->online_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.ChinaDayActivity)
}

::google::protobuf::uint8* ChinaDayActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.ChinaDayActivity)
  // repeated .ConfigActivity.DiamondReward charge_reward = 1;
  for (int i = 0; i < this->charge_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charge_reward(i), target);
  }

  // required .RewardConfig.RewardItemCfg everyday_reward = 2;
  if (has_everyday_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->everyday_reward(), target);
  }

  // required .RewardConfig.RewardItemCfg online_reward = 3;
  if (has_online_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->online_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.ChinaDayActivity)
  return target;
}

int ChinaDayActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .RewardConfig.RewardItemCfg everyday_reward = 2;
    if (has_everyday_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->everyday_reward());
    }

    // required .RewardConfig.RewardItemCfg online_reward = 3;
    if (has_online_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_reward());
    }

  }
  // repeated .ConfigActivity.DiamondReward charge_reward = 1;
  total_size += 1 * this->charge_reward_size();
  for (int i = 0; i < this->charge_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charge_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChinaDayActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChinaDayActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChinaDayActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChinaDayActivity::MergeFrom(const ChinaDayActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  charge_reward_.MergeFrom(from.charge_reward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_everyday_reward()) {
      mutable_everyday_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.everyday_reward());
    }
    if (from.has_online_reward()) {
      mutable_online_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.online_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChinaDayActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChinaDayActivity::CopyFrom(const ChinaDayActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChinaDayActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->charge_reward())) return false;
  if (has_everyday_reward()) {
    if (!this->everyday_reward().IsInitialized()) return false;
  }
  if (has_online_reward()) {
    if (!this->online_reward().IsInitialized()) return false;
  }
  return true;
}

void ChinaDayActivity::Swap(ChinaDayActivity* other) {
  if (other != this) {
    charge_reward_.Swap(&other->charge_reward_);
    std::swap(everyday_reward_, other->everyday_reward_);
    std::swap(online_reward_, other->online_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChinaDayActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChinaDayActivity_descriptor_;
  metadata.reflection = ChinaDayActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayOptionalActivity::kOptionalRewardFieldNumber;
#endif  // !_MSC_VER

PayOptionalActivity::PayOptionalActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.PayOptionalActivity)
}

void PayOptionalActivity::InitAsDefaultInstance() {
}

PayOptionalActivity::PayOptionalActivity(const PayOptionalActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.PayOptionalActivity)
}

void PayOptionalActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayOptionalActivity::~PayOptionalActivity() {
  // @@protoc_insertion_point(destructor:ConfigActivity.PayOptionalActivity)
  SharedDtor();
}

void PayOptionalActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PayOptionalActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayOptionalActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayOptionalActivity_descriptor_;
}

const PayOptionalActivity& PayOptionalActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

PayOptionalActivity* PayOptionalActivity::default_instance_ = NULL;

PayOptionalActivity* PayOptionalActivity::New() const {
  return new PayOptionalActivity;
}

void PayOptionalActivity::Clear() {
  optional_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayOptionalActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.PayOptionalActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.DiamondMoreReward optional_reward = 1;
      case 1: {
        if (tag == 10) {
         parse_optional_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optional_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_optional_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.PayOptionalActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.PayOptionalActivity)
  return false;
#undef DO_
}

void PayOptionalActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.PayOptionalActivity)
  // repeated .ConfigActivity.DiamondMoreReward optional_reward = 1;
  for (int i = 0; i < this->optional_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->optional_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.PayOptionalActivity)
}

::google::protobuf::uint8* PayOptionalActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.PayOptionalActivity)
  // repeated .ConfigActivity.DiamondMoreReward optional_reward = 1;
  for (int i = 0; i < this->optional_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->optional_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.PayOptionalActivity)
  return target;
}

int PayOptionalActivity::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigActivity.DiamondMoreReward optional_reward = 1;
  total_size += 1 * this->optional_reward_size();
  for (int i = 0; i < this->optional_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optional_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayOptionalActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayOptionalActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayOptionalActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayOptionalActivity::MergeFrom(const PayOptionalActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  optional_reward_.MergeFrom(from.optional_reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayOptionalActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayOptionalActivity::CopyFrom(const PayOptionalActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayOptionalActivity::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->optional_reward())) return false;
  return true;
}

void PayOptionalActivity::Swap(PayOptionalActivity* other) {
  if (other != this) {
    optional_reward_.Swap(&other->optional_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayOptionalActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayOptionalActivity_descriptor_;
  metadata.reflection = PayOptionalActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSoulLevel::kLvFieldNumber;
const int MsgSoulLevel::kRewardFieldNumber;
#endif  // !_MSC_VER

MsgSoulLevel::MsgSoulLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.MsgSoulLevel)
}

void MsgSoulLevel::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

MsgSoulLevel::MsgSoulLevel(const MsgSoulLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.MsgSoulLevel)
}

void MsgSoulLevel::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSoulLevel::~MsgSoulLevel() {
  // @@protoc_insertion_point(destructor:ConfigActivity.MsgSoulLevel)
  SharedDtor();
}

void MsgSoulLevel::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void MsgSoulLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSoulLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSoulLevel_descriptor_;
}

const MsgSoulLevel& MsgSoulLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

MsgSoulLevel* MsgSoulLevel::default_instance_ = NULL;

MsgSoulLevel* MsgSoulLevel::New() const {
  return new MsgSoulLevel;
}

void MsgSoulLevel::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    lv_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSoulLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.MsgSoulLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lv = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.MsgSoulLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.MsgSoulLevel)
  return false;
#undef DO_
}

void MsgSoulLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.MsgSoulLevel)
  // required uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.MsgSoulLevel)
}

::google::protobuf::uint8* MsgSoulLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.MsgSoulLevel)
  // required uint32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.MsgSoulLevel)
  return target;
}

int MsgSoulLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSoulLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSoulLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSoulLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSoulLevel::MergeFrom(const MsgSoulLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSoulLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSoulLevel::CopyFrom(const MsgSoulLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSoulLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MsgSoulLevel::Swap(MsgSoulLevel* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSoulLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSoulLevel_descriptor_;
  metadata.reflection = MsgSoulLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSoulGrowth::kGrowthFieldNumber;
const int MsgSoulGrowth::kRewardFieldNumber;
#endif  // !_MSC_VER

MsgSoulGrowth::MsgSoulGrowth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.MsgSoulGrowth)
}

void MsgSoulGrowth::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

MsgSoulGrowth::MsgSoulGrowth(const MsgSoulGrowth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.MsgSoulGrowth)
}

void MsgSoulGrowth::SharedCtor() {
  _cached_size_ = 0;
  growth_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSoulGrowth::~MsgSoulGrowth() {
  // @@protoc_insertion_point(destructor:ConfigActivity.MsgSoulGrowth)
  SharedDtor();
}

void MsgSoulGrowth::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void MsgSoulGrowth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSoulGrowth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSoulGrowth_descriptor_;
}

const MsgSoulGrowth& MsgSoulGrowth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

MsgSoulGrowth* MsgSoulGrowth::default_instance_ = NULL;

MsgSoulGrowth* MsgSoulGrowth::New() const {
  return new MsgSoulGrowth;
}

void MsgSoulGrowth::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    growth_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSoulGrowth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.MsgSoulGrowth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 growth = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growth_)));
          set_has_growth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.MsgSoulGrowth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.MsgSoulGrowth)
  return false;
#undef DO_
}

void MsgSoulGrowth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.MsgSoulGrowth)
  // required uint32 growth = 1;
  if (has_growth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->growth(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.MsgSoulGrowth)
}

::google::protobuf::uint8* MsgSoulGrowth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.MsgSoulGrowth)
  // required uint32 growth = 1;
  if (has_growth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->growth(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.MsgSoulGrowth)
  return target;
}

int MsgSoulGrowth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 growth = 1;
    if (has_growth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growth());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSoulGrowth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSoulGrowth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSoulGrowth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSoulGrowth::MergeFrom(const MsgSoulGrowth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_growth()) {
      set_growth(from.growth());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSoulGrowth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSoulGrowth::CopyFrom(const MsgSoulGrowth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSoulGrowth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MsgSoulGrowth::Swap(MsgSoulGrowth* other) {
  if (other != this) {
    std::swap(growth_, other->growth_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSoulGrowth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSoulGrowth_descriptor_;
  metadata.reflection = MsgSoulGrowth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgWuhun::kPartcountFieldNumber;
const int MsgWuhun::kPartlvFieldNumber;
const int MsgWuhun::kRewardFieldNumber;
#endif  // !_MSC_VER

MsgWuhun::MsgWuhun()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.MsgWuhun)
}

void MsgWuhun::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

MsgWuhun::MsgWuhun(const MsgWuhun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.MsgWuhun)
}

void MsgWuhun::SharedCtor() {
  _cached_size_ = 0;
  partcount_ = 0u;
  partlv_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgWuhun::~MsgWuhun() {
  // @@protoc_insertion_point(destructor:ConfigActivity.MsgWuhun)
  SharedDtor();
}

void MsgWuhun::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void MsgWuhun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgWuhun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgWuhun_descriptor_;
}

const MsgWuhun& MsgWuhun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

MsgWuhun* MsgWuhun::default_instance_ = NULL;

MsgWuhun* MsgWuhun::New() const {
  return new MsgWuhun;
}

void MsgWuhun::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgWuhun*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(partcount_, partlv_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgWuhun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.MsgWuhun)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 partcount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partcount_)));
          set_has_partcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partlv;
        break;
      }

      // required uint32 partlv = 2;
      case 2: {
        if (tag == 16) {
         parse_partlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partlv_)));
          set_has_partlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.MsgWuhun)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.MsgWuhun)
  return false;
#undef DO_
}

void MsgWuhun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.MsgWuhun)
  // required uint32 partcount = 1;
  if (has_partcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->partcount(), output);
  }

  // required uint32 partlv = 2;
  if (has_partlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->partlv(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.MsgWuhun)
}

::google::protobuf::uint8* MsgWuhun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.MsgWuhun)
  // required uint32 partcount = 1;
  if (has_partcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->partcount(), target);
  }

  // required uint32 partlv = 2;
  if (has_partlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->partlv(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.MsgWuhun)
  return target;
}

int MsgWuhun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 partcount = 1;
    if (has_partcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partcount());
    }

    // required uint32 partlv = 2;
    if (has_partlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partlv());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgWuhun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgWuhun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgWuhun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgWuhun::MergeFrom(const MsgWuhun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partcount()) {
      set_partcount(from.partcount());
    }
    if (from.has_partlv()) {
      set_partlv(from.partlv());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgWuhun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWuhun::CopyFrom(const MsgWuhun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWuhun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MsgWuhun::Swap(MsgWuhun* other) {
  if (other != this) {
    std::swap(partcount_, other->partcount_);
    std::swap(partlv_, other->partlv_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgWuhun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgWuhun_descriptor_;
  metadata.reflection = MsgWuhun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgJuexue::kQualityFieldNumber;
const int MsgJuexue::kCountFieldNumber;
const int MsgJuexue::kRewardFieldNumber;
#endif  // !_MSC_VER

MsgJuexue::MsgJuexue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.MsgJuexue)
}

void MsgJuexue::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

MsgJuexue::MsgJuexue(const MsgJuexue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.MsgJuexue)
}

void MsgJuexue::SharedCtor() {
  _cached_size_ = 0;
  quality_ = 0u;
  count_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgJuexue::~MsgJuexue() {
  // @@protoc_insertion_point(destructor:ConfigActivity.MsgJuexue)
  SharedDtor();
}

void MsgJuexue::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void MsgJuexue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgJuexue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgJuexue_descriptor_;
}

const MsgJuexue& MsgJuexue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

MsgJuexue* MsgJuexue::default_instance_ = NULL;

MsgJuexue* MsgJuexue::New() const {
  return new MsgJuexue;
}

void MsgJuexue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgJuexue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(quality_, count_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgJuexue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.MsgJuexue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 quality = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.MsgJuexue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.MsgJuexue)
  return false;
#undef DO_
}

void MsgJuexue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.MsgJuexue)
  // required uint32 quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quality(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.MsgJuexue)
}

::google::protobuf::uint8* MsgJuexue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.MsgJuexue)
  // required uint32 quality = 1;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quality(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.MsgJuexue)
  return target;
}

int MsgJuexue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgJuexue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgJuexue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgJuexue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgJuexue::MergeFrom(const MsgJuexue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgJuexue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgJuexue::CopyFrom(const MsgJuexue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgJuexue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MsgJuexue::Swap(MsgJuexue* other) {
  if (other != this) {
    std::swap(quality_, other->quality_);
    std::swap(count_, other->count_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgJuexue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgJuexue_descriptor_;
  metadata.reflection = MsgJuexue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStar::kStarFieldNumber;
const int MsgStar::kTypeFieldNumber;
const int MsgStar::kRewardFieldNumber;
#endif  // !_MSC_VER

MsgStar::MsgStar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.MsgStar)
}

void MsgStar::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

MsgStar::MsgStar(const MsgStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.MsgStar)
}

void MsgStar::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  type_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStar::~MsgStar() {
  // @@protoc_insertion_point(destructor:ConfigActivity.MsgStar)
  SharedDtor();
}

void MsgStar::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void MsgStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStar_descriptor_;
}

const MsgStar& MsgStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

MsgStar* MsgStar::default_instance_ = NULL;

MsgStar* MsgStar::New() const {
  return new MsgStar;
}

void MsgStar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgStar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(star_, type_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.MsgStar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 star = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.MsgStar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.MsgStar)
  return false;
#undef DO_
}

void MsgStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.MsgStar)
  // required uint32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.MsgStar)
}

::google::protobuf::uint8* MsgStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.MsgStar)
  // required uint32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.MsgStar)
  return target;
}

int MsgStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStar::MergeFrom(const MsgStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStar::CopyFrom(const MsgStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MsgStar::Swap(MsgStar* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    std::swap(type_, other->type_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStar_descriptor_;
  metadata.reflection = MsgStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHeaven::kJieFieldNumber;
const int MsgHeaven::kCengFieldNumber;
const int MsgHeaven::kRewardFieldNumber;
#endif  // !_MSC_VER

MsgHeaven::MsgHeaven()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.MsgHeaven)
}

void MsgHeaven::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

MsgHeaven::MsgHeaven(const MsgHeaven& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.MsgHeaven)
}

void MsgHeaven::SharedCtor() {
  _cached_size_ = 0;
  jie_ = 0u;
  ceng_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHeaven::~MsgHeaven() {
  // @@protoc_insertion_point(destructor:ConfigActivity.MsgHeaven)
  SharedDtor();
}

void MsgHeaven::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void MsgHeaven::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHeaven::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHeaven_descriptor_;
}

const MsgHeaven& MsgHeaven::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

MsgHeaven* MsgHeaven::default_instance_ = NULL;

MsgHeaven* MsgHeaven::New() const {
  return new MsgHeaven;
}

void MsgHeaven::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgHeaven*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(jie_, ceng_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHeaven::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.MsgHeaven)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 jie = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jie_)));
          set_has_jie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ceng;
        break;
      }

      // required uint32 ceng = 2;
      case 2: {
        if (tag == 16) {
         parse_ceng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ceng_)));
          set_has_ceng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.MsgHeaven)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.MsgHeaven)
  return false;
#undef DO_
}

void MsgHeaven::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.MsgHeaven)
  // required uint32 jie = 1;
  if (has_jie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jie(), output);
  }

  // required uint32 ceng = 2;
  if (has_ceng()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ceng(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.MsgHeaven)
}

::google::protobuf::uint8* MsgHeaven::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.MsgHeaven)
  // required uint32 jie = 1;
  if (has_jie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jie(), target);
  }

  // required uint32 ceng = 2;
  if (has_ceng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ceng(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.MsgHeaven)
  return target;
}

int MsgHeaven::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 jie = 1;
    if (has_jie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jie());
    }

    // required uint32 ceng = 2;
    if (has_ceng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ceng());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHeaven::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHeaven* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHeaven*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHeaven::MergeFrom(const MsgHeaven& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jie()) {
      set_jie(from.jie());
    }
    if (from.has_ceng()) {
      set_ceng(from.ceng());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHeaven::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeaven::CopyFrom(const MsgHeaven& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeaven::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MsgHeaven::Swap(MsgHeaven* other) {
  if (other != this) {
    std::swap(jie_, other->jie_);
    std::swap(ceng_, other->ceng_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHeaven::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHeaven_descriptor_;
  metadata.reflection = MsgHeaven_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDaoist::kJieFieldNumber;
const int MsgDaoist::kCengFieldNumber;
const int MsgDaoist::kRewardFieldNumber;
#endif  // !_MSC_VER

MsgDaoist::MsgDaoist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.MsgDaoist)
}

void MsgDaoist::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

MsgDaoist::MsgDaoist(const MsgDaoist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.MsgDaoist)
}

void MsgDaoist::SharedCtor() {
  _cached_size_ = 0;
  jie_ = 0u;
  ceng_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDaoist::~MsgDaoist() {
  // @@protoc_insertion_point(destructor:ConfigActivity.MsgDaoist)
  SharedDtor();
}

void MsgDaoist::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void MsgDaoist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDaoist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDaoist_descriptor_;
}

const MsgDaoist& MsgDaoist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

MsgDaoist* MsgDaoist::default_instance_ = NULL;

MsgDaoist* MsgDaoist::New() const {
  return new MsgDaoist;
}

void MsgDaoist::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgDaoist*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(jie_, ceng_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDaoist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.MsgDaoist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 jie = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jie_)));
          set_has_jie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ceng;
        break;
      }

      // required uint32 ceng = 2;
      case 2: {
        if (tag == 16) {
         parse_ceng:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ceng_)));
          set_has_ceng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.MsgDaoist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.MsgDaoist)
  return false;
#undef DO_
}

void MsgDaoist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.MsgDaoist)
  // required uint32 jie = 1;
  if (has_jie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jie(), output);
  }

  // required uint32 ceng = 2;
  if (has_ceng()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ceng(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.MsgDaoist)
}

::google::protobuf::uint8* MsgDaoist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.MsgDaoist)
  // required uint32 jie = 1;
  if (has_jie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jie(), target);
  }

  // required uint32 ceng = 2;
  if (has_ceng()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ceng(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.MsgDaoist)
  return target;
}

int MsgDaoist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 jie = 1;
    if (has_jie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jie());
    }

    // required uint32 ceng = 2;
    if (has_ceng()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ceng());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDaoist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDaoist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDaoist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDaoist::MergeFrom(const MsgDaoist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jie()) {
      set_jie(from.jie());
    }
    if (from.has_ceng()) {
      set_ceng(from.ceng());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDaoist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDaoist::CopyFrom(const MsgDaoist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDaoist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void MsgDaoist::Swap(MsgDaoist* other) {
  if (other != this) {
    std::swap(jie_, other->jie_);
    std::swap(ceng_, other->ceng_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDaoist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDaoist_descriptor_;
  metadata.reflection = MsgDaoist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KaifuAchievement::kSoulLvFieldNumber;
const int KaifuAchievement::kSoulGrowthFieldNumber;
const int KaifuAchievement::kWuhunFieldNumber;
const int KaifuAchievement::kJuexueFieldNumber;
const int KaifuAchievement::kStarFieldNumber;
const int KaifuAchievement::kHeavenFieldNumber;
const int KaifuAchievement::kDaoistFieldNumber;
#endif  // !_MSC_VER

KaifuAchievement::KaifuAchievement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.KaifuAchievement)
}

void KaifuAchievement::InitAsDefaultInstance() {
}

KaifuAchievement::KaifuAchievement(const KaifuAchievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.KaifuAchievement)
}

void KaifuAchievement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KaifuAchievement::~KaifuAchievement() {
  // @@protoc_insertion_point(destructor:ConfigActivity.KaifuAchievement)
  SharedDtor();
}

void KaifuAchievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KaifuAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KaifuAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KaifuAchievement_descriptor_;
}

const KaifuAchievement& KaifuAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

KaifuAchievement* KaifuAchievement::default_instance_ = NULL;

KaifuAchievement* KaifuAchievement::New() const {
  return new KaifuAchievement;
}

void KaifuAchievement::Clear() {
  soul_lv_.Clear();
  soul_growth_.Clear();
  wuhun_.Clear();
  juexue_.Clear();
  star_.Clear();
  heaven_.Clear();
  daoist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KaifuAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.KaifuAchievement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.MsgSoulLevel soul_lv = 1;
      case 1: {
        if (tag == 10) {
         parse_soul_lv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soul_lv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_soul_lv;
        if (input->ExpectTag(18)) goto parse_soul_growth;
        break;
      }

      // repeated .ConfigActivity.MsgSoulGrowth soul_growth = 2;
      case 2: {
        if (tag == 18) {
         parse_soul_growth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soul_growth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_soul_growth;
        if (input->ExpectTag(26)) goto parse_wuhun;
        break;
      }

      // repeated .ConfigActivity.MsgWuhun wuhun = 3;
      case 3: {
        if (tag == 26) {
         parse_wuhun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wuhun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wuhun;
        if (input->ExpectTag(34)) goto parse_juexue;
        break;
      }

      // repeated .ConfigActivity.MsgJuexue juexue = 4;
      case 4: {
        if (tag == 34) {
         parse_juexue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_juexue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_juexue;
        if (input->ExpectTag(42)) goto parse_star;
        break;
      }

      // repeated .ConfigActivity.MsgStar star = 5;
      case 5: {
        if (tag == 42) {
         parse_star:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_star()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_star;
        if (input->ExpectTag(50)) goto parse_heaven;
        break;
      }

      // repeated .ConfigActivity.MsgHeaven heaven = 6;
      case 6: {
        if (tag == 50) {
         parse_heaven:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heaven()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_heaven;
        if (input->ExpectTag(58)) goto parse_daoist;
        break;
      }

      // repeated .ConfigActivity.MsgDaoist daoist = 7;
      case 7: {
        if (tag == 58) {
         parse_daoist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daoist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_daoist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.KaifuAchievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.KaifuAchievement)
  return false;
#undef DO_
}

void KaifuAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.KaifuAchievement)
  // repeated .ConfigActivity.MsgSoulLevel soul_lv = 1;
  for (int i = 0; i < this->soul_lv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->soul_lv(i), output);
  }

  // repeated .ConfigActivity.MsgSoulGrowth soul_growth = 2;
  for (int i = 0; i < this->soul_growth_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->soul_growth(i), output);
  }

  // repeated .ConfigActivity.MsgWuhun wuhun = 3;
  for (int i = 0; i < this->wuhun_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wuhun(i), output);
  }

  // repeated .ConfigActivity.MsgJuexue juexue = 4;
  for (int i = 0; i < this->juexue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->juexue(i), output);
  }

  // repeated .ConfigActivity.MsgStar star = 5;
  for (int i = 0; i < this->star_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->star(i), output);
  }

  // repeated .ConfigActivity.MsgHeaven heaven = 6;
  for (int i = 0; i < this->heaven_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->heaven(i), output);
  }

  // repeated .ConfigActivity.MsgDaoist daoist = 7;
  for (int i = 0; i < this->daoist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->daoist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.KaifuAchievement)
}

::google::protobuf::uint8* KaifuAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.KaifuAchievement)
  // repeated .ConfigActivity.MsgSoulLevel soul_lv = 1;
  for (int i = 0; i < this->soul_lv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->soul_lv(i), target);
  }

  // repeated .ConfigActivity.MsgSoulGrowth soul_growth = 2;
  for (int i = 0; i < this->soul_growth_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->soul_growth(i), target);
  }

  // repeated .ConfigActivity.MsgWuhun wuhun = 3;
  for (int i = 0; i < this->wuhun_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wuhun(i), target);
  }

  // repeated .ConfigActivity.MsgJuexue juexue = 4;
  for (int i = 0; i < this->juexue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->juexue(i), target);
  }

  // repeated .ConfigActivity.MsgStar star = 5;
  for (int i = 0; i < this->star_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->star(i), target);
  }

  // repeated .ConfigActivity.MsgHeaven heaven = 6;
  for (int i = 0; i < this->heaven_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->heaven(i), target);
  }

  // repeated .ConfigActivity.MsgDaoist daoist = 7;
  for (int i = 0; i < this->daoist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->daoist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.KaifuAchievement)
  return target;
}

int KaifuAchievement::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigActivity.MsgSoulLevel soul_lv = 1;
  total_size += 1 * this->soul_lv_size();
  for (int i = 0; i < this->soul_lv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soul_lv(i));
  }

  // repeated .ConfigActivity.MsgSoulGrowth soul_growth = 2;
  total_size += 1 * this->soul_growth_size();
  for (int i = 0; i < this->soul_growth_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soul_growth(i));
  }

  // repeated .ConfigActivity.MsgWuhun wuhun = 3;
  total_size += 1 * this->wuhun_size();
  for (int i = 0; i < this->wuhun_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wuhun(i));
  }

  // repeated .ConfigActivity.MsgJuexue juexue = 4;
  total_size += 1 * this->juexue_size();
  for (int i = 0; i < this->juexue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->juexue(i));
  }

  // repeated .ConfigActivity.MsgStar star = 5;
  total_size += 1 * this->star_size();
  for (int i = 0; i < this->star_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->star(i));
  }

  // repeated .ConfigActivity.MsgHeaven heaven = 6;
  total_size += 1 * this->heaven_size();
  for (int i = 0; i < this->heaven_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heaven(i));
  }

  // repeated .ConfigActivity.MsgDaoist daoist = 7;
  total_size += 1 * this->daoist_size();
  for (int i = 0; i < this->daoist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daoist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KaifuAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KaifuAchievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KaifuAchievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KaifuAchievement::MergeFrom(const KaifuAchievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  soul_lv_.MergeFrom(from.soul_lv_);
  soul_growth_.MergeFrom(from.soul_growth_);
  wuhun_.MergeFrom(from.wuhun_);
  juexue_.MergeFrom(from.juexue_);
  star_.MergeFrom(from.star_);
  heaven_.MergeFrom(from.heaven_);
  daoist_.MergeFrom(from.daoist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KaifuAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KaifuAchievement::CopyFrom(const KaifuAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KaifuAchievement::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->soul_lv())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->soul_growth())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wuhun())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->juexue())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->star())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->heaven())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->daoist())) return false;
  return true;
}

void KaifuAchievement::Swap(KaifuAchievement* other) {
  if (other != this) {
    soul_lv_.Swap(&other->soul_lv_);
    soul_growth_.Swap(&other->soul_growth_);
    wuhun_.Swap(&other->wuhun_);
    juexue_.Swap(&other->juexue_);
    star_.Swap(&other->star_);
    heaven_.Swap(&other->heaven_);
    daoist_.Swap(&other->daoist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KaifuAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KaifuAchievement_descriptor_;
  metadata.reflection = KaifuAchievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KaifuDiscountShop::kOPriceFieldNumber;
const int KaifuDiscountShop::kPPriceFieldNumber;
const int KaifuDiscountShop::kItemFieldNumber;
#endif  // !_MSC_VER

KaifuDiscountShop::KaifuDiscountShop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.KaifuDiscountShop)
}

void KaifuDiscountShop::InitAsDefaultInstance() {
  item_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

KaifuDiscountShop::KaifuDiscountShop(const KaifuDiscountShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.KaifuDiscountShop)
}

void KaifuDiscountShop::SharedCtor() {
  _cached_size_ = 0;
  o_price_ = 0u;
  p_price_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KaifuDiscountShop::~KaifuDiscountShop() {
  // @@protoc_insertion_point(destructor:ConfigActivity.KaifuDiscountShop)
  SharedDtor();
}

void KaifuDiscountShop::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void KaifuDiscountShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KaifuDiscountShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KaifuDiscountShop_descriptor_;
}

const KaifuDiscountShop& KaifuDiscountShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

KaifuDiscountShop* KaifuDiscountShop::default_instance_ = NULL;

KaifuDiscountShop* KaifuDiscountShop::New() const {
  return new KaifuDiscountShop;
}

void KaifuDiscountShop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KaifuDiscountShop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(o_price_, p_price_);
    if (has_item()) {
      if (item_ != NULL) item_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KaifuDiscountShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.KaifuDiscountShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 o_price = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &o_price_)));
          set_has_o_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_p_price;
        break;
      }

      // required uint32 p_price = 2;
      case 2: {
        if (tag == 16) {
         parse_p_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p_price_)));
          set_has_p_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // required .RewardConfig.RewardItemCfg item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.KaifuDiscountShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.KaifuDiscountShop)
  return false;
#undef DO_
}

void KaifuDiscountShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.KaifuDiscountShop)
  // required uint32 o_price = 1;
  if (has_o_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->o_price(), output);
  }

  // required uint32 p_price = 2;
  if (has_p_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->p_price(), output);
  }

  // required .RewardConfig.RewardItemCfg item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.KaifuDiscountShop)
}

::google::protobuf::uint8* KaifuDiscountShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.KaifuDiscountShop)
  // required uint32 o_price = 1;
  if (has_o_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->o_price(), target);
  }

  // required uint32 p_price = 2;
  if (has_p_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->p_price(), target);
  }

  // required .RewardConfig.RewardItemCfg item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.KaifuDiscountShop)
  return target;
}

int KaifuDiscountShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 o_price = 1;
    if (has_o_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->o_price());
    }

    // required uint32 p_price = 2;
    if (has_p_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p_price());
    }

    // required .RewardConfig.RewardItemCfg item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KaifuDiscountShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KaifuDiscountShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KaifuDiscountShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KaifuDiscountShop::MergeFrom(const KaifuDiscountShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_o_price()) {
      set_o_price(from.o_price());
    }
    if (from.has_p_price()) {
      set_p_price(from.p_price());
    }
    if (from.has_item()) {
      mutable_item()->::RewardConfig::RewardItemCfg::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KaifuDiscountShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KaifuDiscountShop::CopyFrom(const KaifuDiscountShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KaifuDiscountShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void KaifuDiscountShop::Swap(KaifuDiscountShop* other) {
  if (other != this) {
    std::swap(o_price_, other->o_price_);
    std::swap(p_price_, other->p_price_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KaifuDiscountShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KaifuDiscountShop_descriptor_;
  metadata.reflection = KaifuDiscountShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KaiFuGift::kAchievementFieldNumber;
const int KaiFuGift::kShopFieldNumber;
#endif  // !_MSC_VER

KaiFuGift::KaiFuGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.KaiFuGift)
}

void KaiFuGift::InitAsDefaultInstance() {
  achievement_ = const_cast< ::ConfigActivity::KaifuAchievement*>(&::ConfigActivity::KaifuAchievement::default_instance());
}

KaiFuGift::KaiFuGift(const KaiFuGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.KaiFuGift)
}

void KaiFuGift::SharedCtor() {
  _cached_size_ = 0;
  achievement_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KaiFuGift::~KaiFuGift() {
  // @@protoc_insertion_point(destructor:ConfigActivity.KaiFuGift)
  SharedDtor();
}

void KaiFuGift::SharedDtor() {
  if (this != default_instance_) {
    delete achievement_;
  }
}

void KaiFuGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KaiFuGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KaiFuGift_descriptor_;
}

const KaiFuGift& KaiFuGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

KaiFuGift* KaiFuGift::default_instance_ = NULL;

KaiFuGift* KaiFuGift::New() const {
  return new KaiFuGift;
}

void KaiFuGift::Clear() {
  if (has_achievement()) {
    if (achievement_ != NULL) achievement_->::ConfigActivity::KaifuAchievement::Clear();
  }
  shop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KaiFuGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.KaiFuGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ConfigActivity.KaifuAchievement achievement = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shop;
        break;
      }

      // repeated .ConfigActivity.KaifuDiscountShop shop = 2;
      case 2: {
        if (tag == 18) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.KaiFuGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.KaiFuGift)
  return false;
#undef DO_
}

void KaiFuGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.KaiFuGift)
  // required .ConfigActivity.KaifuAchievement achievement = 1;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievement(), output);
  }

  // repeated .ConfigActivity.KaifuDiscountShop shop = 2;
  for (int i = 0; i < this->shop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.KaiFuGift)
}

::google::protobuf::uint8* KaiFuGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.KaiFuGift)
  // required .ConfigActivity.KaifuAchievement achievement = 1;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievement(), target);
  }

  // repeated .ConfigActivity.KaifuDiscountShop shop = 2;
  for (int i = 0; i < this->shop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.KaiFuGift)
  return target;
}

int KaiFuGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ConfigActivity.KaifuAchievement achievement = 1;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievement());
    }

  }
  // repeated .ConfigActivity.KaifuDiscountShop shop = 2;
  total_size += 1 * this->shop_size();
  for (int i = 0; i < this->shop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KaiFuGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KaiFuGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KaiFuGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KaiFuGift::MergeFrom(const KaiFuGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  shop_.MergeFrom(from.shop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement()) {
      mutable_achievement()->::ConfigActivity::KaifuAchievement::MergeFrom(from.achievement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KaiFuGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KaiFuGift::CopyFrom(const KaiFuGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KaiFuGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_achievement()) {
    if (!this->achievement().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->shop())) return false;
  return true;
}

void KaiFuGift::Swap(KaiFuGift* other) {
  if (other != this) {
    std::swap(achievement_, other->achievement_);
    shop_.Swap(&other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KaiFuGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KaiFuGift_descriptor_;
  metadata.reflection = KaiFuGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StarStoneChange::kSrcFieldNumber;
const int StarStoneChange::kDstFieldNumber;
const int StarStoneChange::kLimitFieldNumber;
#endif  // !_MSC_VER

StarStoneChange::StarStoneChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.StarStoneChange)
}

void StarStoneChange::InitAsDefaultInstance() {
}

StarStoneChange::StarStoneChange(const StarStoneChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.StarStoneChange)
}

void StarStoneChange::SharedCtor() {
  _cached_size_ = 0;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarStoneChange::~StarStoneChange() {
  // @@protoc_insertion_point(destructor:ConfigActivity.StarStoneChange)
  SharedDtor();
}

void StarStoneChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StarStoneChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarStoneChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarStoneChange_descriptor_;
}

const StarStoneChange& StarStoneChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

StarStoneChange* StarStoneChange::default_instance_ = NULL;

StarStoneChange* StarStoneChange::New() const {
  return new StarStoneChange;
}

void StarStoneChange::Clear() {
  limit_ = 0u;
  src_.Clear();
  dst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarStoneChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.StarStoneChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 src = 1;
      case 1: {
        if (tag == 8) {
         parse_src:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_src())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_src())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_src;
        if (input->ExpectTag(16)) goto parse_dst;
        break;
      }

      // repeated uint32 dst = 2;
      case 2: {
        if (tag == 16) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_dst())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dst())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dst;
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }

      // required uint32 limit = 3;
      case 3: {
        if (tag == 24) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.StarStoneChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.StarStoneChange)
  return false;
#undef DO_
}

void StarStoneChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.StarStoneChange)
  // repeated uint32 src = 1;
  for (int i = 0; i < this->src_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->src(i), output);
  }

  // repeated uint32 dst = 2;
  for (int i = 0; i < this->dst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->dst(i), output);
  }

  // required uint32 limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.StarStoneChange)
}

::google::protobuf::uint8* StarStoneChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.StarStoneChange)
  // repeated uint32 src = 1;
  for (int i = 0; i < this->src_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->src(i), target);
  }

  // repeated uint32 dst = 2;
  for (int i = 0; i < this->dst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->dst(i), target);
  }

  // required uint32 limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.StarStoneChange)
  return target;
}

int StarStoneChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  // repeated uint32 src = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->src_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->src(i));
    }
    total_size += 1 * this->src_size() + data_size;
  }

  // repeated uint32 dst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dst(i));
    }
    total_size += 1 * this->dst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarStoneChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarStoneChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarStoneChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarStoneChange::MergeFrom(const StarStoneChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  src_.MergeFrom(from.src_);
  dst_.MergeFrom(from.dst_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarStoneChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarStoneChange::CopyFrom(const StarStoneChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarStoneChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void StarStoneChange::Swap(StarStoneChange* other) {
  if (other != this) {
    src_.Swap(&other->src_);
    dst_.Swap(&other->dst_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarStoneChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarStoneChange_descriptor_;
  metadata.reflection = StarStoneChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HongBaoItem::kIdFieldNumber;
const int HongBaoItem::kRateFreeFieldNumber;
const int HongBaoItem::kRateBuyFieldNumber;
const int HongBaoItem::kRewardFieldNumber;
#endif  // !_MSC_VER

HongBaoItem::HongBaoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.HongBaoItem)
}

void HongBaoItem::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

HongBaoItem::HongBaoItem(const HongBaoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.HongBaoItem)
}

void HongBaoItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rate_free_ = 0u;
  rate_buy_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HongBaoItem::~HongBaoItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.HongBaoItem)
  SharedDtor();
}

void HongBaoItem::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void HongBaoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HongBaoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HongBaoItem_descriptor_;
}

const HongBaoItem& HongBaoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

HongBaoItem* HongBaoItem::default_instance_ = NULL;

HongBaoItem* HongBaoItem::New() const {
  return new HongBaoItem;
}

void HongBaoItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HongBaoItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, rate_free_);
    rate_buy_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HongBaoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.HongBaoItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate_free;
        break;
      }

      // required uint32 rate_free = 2;
      case 2: {
        if (tag == 16) {
         parse_rate_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_free_)));
          set_has_rate_free();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rate_buy;
        break;
      }

      // required uint32 rate_buy = 3;
      case 3: {
        if (tag == 24) {
         parse_rate_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_buy_)));
          set_has_rate_buy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.HongBaoItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.HongBaoItem)
  return false;
#undef DO_
}

void HongBaoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.HongBaoItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 rate_free = 2;
  if (has_rate_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate_free(), output);
  }

  // required uint32 rate_buy = 3;
  if (has_rate_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rate_buy(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.HongBaoItem)
}

::google::protobuf::uint8* HongBaoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.HongBaoItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 rate_free = 2;
  if (has_rate_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate_free(), target);
  }

  // required uint32 rate_buy = 3;
  if (has_rate_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rate_buy(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.HongBaoItem)
  return target;
}

int HongBaoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 rate_free = 2;
    if (has_rate_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate_free());
    }

    // required uint32 rate_buy = 3;
    if (has_rate_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate_buy());
    }

    // required .RewardConfig.RewardItemCfg reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HongBaoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HongBaoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HongBaoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HongBaoItem::MergeFrom(const HongBaoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rate_free()) {
      set_rate_free(from.rate_free());
    }
    if (from.has_rate_buy()) {
      set_rate_buy(from.rate_buy());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HongBaoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HongBaoItem::CopyFrom(const HongBaoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HongBaoItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void HongBaoItem::Swap(HongBaoItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rate_free_, other->rate_free_);
    std::swap(rate_buy_, other->rate_buy_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HongBaoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HongBaoItem_descriptor_;
  metadata.reflection = HongBaoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HongBao::kCountFieldNumber;
const int HongBao::kRefreshFreeFieldNumber;
const int HongBao::kRefreshCostFieldNumber;
const int HongBao::kItemFieldNumber;
#endif  // !_MSC_VER

HongBao::HongBao()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.HongBao)
}

void HongBao::InitAsDefaultInstance() {
}

HongBao::HongBao(const HongBao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.HongBao)
}

void HongBao::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  refresh_free_ = 0u;
  refresh_cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HongBao::~HongBao() {
  // @@protoc_insertion_point(destructor:ConfigActivity.HongBao)
  SharedDtor();
}

void HongBao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HongBao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HongBao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HongBao_descriptor_;
}

const HongBao& HongBao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

HongBao* HongBao::default_instance_ = NULL;

HongBao* HongBao::New() const {
  return new HongBao;
}

void HongBao::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HongBao*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(count_, refresh_free_);
    refresh_cost_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HongBao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.HongBao)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_refresh_free;
        break;
      }

      // required uint32 refresh_free = 2;
      case 2: {
        if (tag == 16) {
         parse_refresh_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_free_)));
          set_has_refresh_free();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_refresh_cost;
        break;
      }

      // required uint32 refresh_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_refresh_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_cost_)));
          set_has_refresh_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // repeated .ConfigActivity.HongBaoItem item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.HongBao)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.HongBao)
  return false;
#undef DO_
}

void HongBao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.HongBao)
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint32 refresh_free = 2;
  if (has_refresh_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refresh_free(), output);
  }

  // required uint32 refresh_cost = 3;
  if (has_refresh_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->refresh_cost(), output);
  }

  // repeated .ConfigActivity.HongBaoItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.HongBao)
}

::google::protobuf::uint8* HongBao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.HongBao)
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  // required uint32 refresh_free = 2;
  if (has_refresh_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refresh_free(), target);
  }

  // required uint32 refresh_cost = 3;
  if (has_refresh_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->refresh_cost(), target);
  }

  // repeated .ConfigActivity.HongBaoItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.HongBao)
  return target;
}

int HongBao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 refresh_free = 2;
    if (has_refresh_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_free());
    }

    // required uint32 refresh_cost = 3;
    if (has_refresh_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_cost());
    }

  }
  // repeated .ConfigActivity.HongBaoItem item = 4;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HongBao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HongBao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HongBao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HongBao::MergeFrom(const HongBao& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_refresh_free()) {
      set_refresh_free(from.refresh_free());
    }
    if (from.has_refresh_cost()) {
      set_refresh_cost(from.refresh_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HongBao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HongBao::CopyFrom(const HongBao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HongBao::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void HongBao::Swap(HongBao* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(refresh_free_, other->refresh_free_);
    std::swap(refresh_cost_, other->refresh_cost_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HongBao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HongBao_descriptor_;
  metadata.reflection = HongBao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskGift::kIdFieldNumber;
const int TaskGift::kCountFieldNumber;
const int TaskGift::kRewardFieldNumber;
#endif  // !_MSC_VER

TaskGift::TaskGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.TaskGift)
}

void TaskGift::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

TaskGift::TaskGift(const TaskGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.TaskGift)
}

void TaskGift::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskGift::~TaskGift() {
  // @@protoc_insertion_point(destructor:ConfigActivity.TaskGift)
  SharedDtor();
}

void TaskGift::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void TaskGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskGift_descriptor_;
}

const TaskGift& TaskGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

TaskGift* TaskGift::default_instance_ = NULL;

TaskGift* TaskGift::New() const {
  return new TaskGift;
}

void TaskGift::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TaskGift*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, count_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.TaskGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.TaskGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.TaskGift)
  return false;
#undef DO_
}

void TaskGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.TaskGift)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.TaskGift)
}

::google::protobuf::uint8* TaskGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.TaskGift)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.TaskGift)
  return target;
}

int TaskGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskGift::MergeFrom(const TaskGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskGift::CopyFrom(const TaskGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void TaskGift::Swap(TaskGift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskGift_descriptor_;
  metadata.reflection = TaskGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotaryTableCfg::kIdFieldNumber;
const int RotaryTableCfg::kCountFieldNumber;
const int RotaryTableCfg::kTypeFieldNumber;
const int RotaryTableCfg::kRewardFieldNumber;
#endif  // !_MSC_VER

RotaryTableCfg::RotaryTableCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.RotaryTableCfg)
}

void RotaryTableCfg::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

RotaryTableCfg::RotaryTableCfg(const RotaryTableCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.RotaryTableCfg)
}

void RotaryTableCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  type_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotaryTableCfg::~RotaryTableCfg() {
  // @@protoc_insertion_point(destructor:ConfigActivity.RotaryTableCfg)
  SharedDtor();
}

void RotaryTableCfg::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void RotaryTableCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotaryTableCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotaryTableCfg_descriptor_;
}

const RotaryTableCfg& RotaryTableCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

RotaryTableCfg* RotaryTableCfg::default_instance_ = NULL;

RotaryTableCfg* RotaryTableCfg::New() const {
  return new RotaryTableCfg;
}

void RotaryTableCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RotaryTableCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, count_);
    type_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotaryTableCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.RotaryTableCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.RotaryTableCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.RotaryTableCfg)
  return false;
#undef DO_
}

void RotaryTableCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.RotaryTableCfg)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.RotaryTableCfg)
}

::google::protobuf::uint8* RotaryTableCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.RotaryTableCfg)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.RotaryTableCfg)
  return target;
}

int RotaryTableCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .RewardConfig.RewardItemCfg reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotaryTableCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotaryTableCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotaryTableCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotaryTableCfg::MergeFrom(const RotaryTableCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotaryTableCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotaryTableCfg::CopyFrom(const RotaryTableCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotaryTableCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void RotaryTableCfg::Swap(RotaryTableCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(type_, other->type_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotaryTableCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotaryTableCfg_descriptor_;
  metadata.reflection = RotaryTableCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotaryTableCrazyReward::kChargeRewardFieldNumber;
const int RotaryTableCrazyReward::kRotaryTableCostFieldNumber;
const int RotaryTableCrazyReward::kRandomRewardFieldNumber;
const int RotaryTableCrazyReward::kFixedRewardFieldNumber;
#endif  // !_MSC_VER

RotaryTableCrazyReward::RotaryTableCrazyReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.RotaryTableCrazyReward)
}

void RotaryTableCrazyReward::InitAsDefaultInstance() {
  rotarytablecost_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
  fixedreward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

RotaryTableCrazyReward::RotaryTableCrazyReward(const RotaryTableCrazyReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.RotaryTableCrazyReward)
}

void RotaryTableCrazyReward::SharedCtor() {
  _cached_size_ = 0;
  rotarytablecost_ = NULL;
  fixedreward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotaryTableCrazyReward::~RotaryTableCrazyReward() {
  // @@protoc_insertion_point(destructor:ConfigActivity.RotaryTableCrazyReward)
  SharedDtor();
}

void RotaryTableCrazyReward::SharedDtor() {
  if (this != default_instance_) {
    delete rotarytablecost_;
    delete fixedreward_;
  }
}

void RotaryTableCrazyReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotaryTableCrazyReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotaryTableCrazyReward_descriptor_;
}

const RotaryTableCrazyReward& RotaryTableCrazyReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

RotaryTableCrazyReward* RotaryTableCrazyReward::default_instance_ = NULL;

RotaryTableCrazyReward* RotaryTableCrazyReward::New() const {
  return new RotaryTableCrazyReward;
}

void RotaryTableCrazyReward::Clear() {
  if (_has_bits_[0 / 32] & 10) {
    if (has_rotarytablecost()) {
      if (rotarytablecost_ != NULL) rotarytablecost_->::RewardConfig::RewardItemCfg::Clear();
    }
    if (has_fixedreward()) {
      if (fixedreward_ != NULL) fixedreward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  chargereward_.Clear();
  randomreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotaryTableCrazyReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.RotaryTableCrazyReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.DiamondReward chargeReward = 1;
      case 1: {
        if (tag == 10) {
         parse_chargeReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargereward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_chargeReward;
        if (input->ExpectTag(18)) goto parse_rotaryTableCost;
        break;
      }

      // required .RewardConfig.RewardItemCfg rotaryTableCost = 2;
      case 2: {
        if (tag == 18) {
         parse_rotaryTableCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotarytablecost()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_randomReward;
        break;
      }

      // repeated .ConfigActivity.RotaryTableCfg randomReward = 3;
      case 3: {
        if (tag == 26) {
         parse_randomReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randomreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_randomReward;
        if (input->ExpectTag(34)) goto parse_fixedReward;
        break;
      }

      // required .RewardConfig.RewardItemCfg fixedReward = 4;
      case 4: {
        if (tag == 34) {
         parse_fixedReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixedreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.RotaryTableCrazyReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.RotaryTableCrazyReward)
  return false;
#undef DO_
}

void RotaryTableCrazyReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.RotaryTableCrazyReward)
  // repeated .ConfigActivity.DiamondReward chargeReward = 1;
  for (int i = 0; i < this->chargereward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chargereward(i), output);
  }

  // required .RewardConfig.RewardItemCfg rotaryTableCost = 2;
  if (has_rotarytablecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rotarytablecost(), output);
  }

  // repeated .ConfigActivity.RotaryTableCfg randomReward = 3;
  for (int i = 0; i < this->randomreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->randomreward(i), output);
  }

  // required .RewardConfig.RewardItemCfg fixedReward = 4;
  if (has_fixedreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fixedreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.RotaryTableCrazyReward)
}

::google::protobuf::uint8* RotaryTableCrazyReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.RotaryTableCrazyReward)
  // repeated .ConfigActivity.DiamondReward chargeReward = 1;
  for (int i = 0; i < this->chargereward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chargereward(i), target);
  }

  // required .RewardConfig.RewardItemCfg rotaryTableCost = 2;
  if (has_rotarytablecost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rotarytablecost(), target);
  }

  // repeated .ConfigActivity.RotaryTableCfg randomReward = 3;
  for (int i = 0; i < this->randomreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->randomreward(i), target);
  }

  // required .RewardConfig.RewardItemCfg fixedReward = 4;
  if (has_fixedreward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fixedreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.RotaryTableCrazyReward)
  return target;
}

int RotaryTableCrazyReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .RewardConfig.RewardItemCfg rotaryTableCost = 2;
    if (has_rotarytablecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotarytablecost());
    }

    // required .RewardConfig.RewardItemCfg fixedReward = 4;
    if (has_fixedreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixedreward());
    }

  }
  // repeated .ConfigActivity.DiamondReward chargeReward = 1;
  total_size += 1 * this->chargereward_size();
  for (int i = 0; i < this->chargereward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargereward(i));
  }

  // repeated .ConfigActivity.RotaryTableCfg randomReward = 3;
  total_size += 1 * this->randomreward_size();
  for (int i = 0; i < this->randomreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randomreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotaryTableCrazyReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotaryTableCrazyReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotaryTableCrazyReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotaryTableCrazyReward::MergeFrom(const RotaryTableCrazyReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  chargereward_.MergeFrom(from.chargereward_);
  randomreward_.MergeFrom(from.randomreward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_rotarytablecost()) {
      mutable_rotarytablecost()->::RewardConfig::RewardItemCfg::MergeFrom(from.rotarytablecost());
    }
    if (from.has_fixedreward()) {
      mutable_fixedreward()->::RewardConfig::RewardItemCfg::MergeFrom(from.fixedreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotaryTableCrazyReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotaryTableCrazyReward::CopyFrom(const RotaryTableCrazyReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotaryTableCrazyReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->chargereward())) return false;
  if (has_rotarytablecost()) {
    if (!this->rotarytablecost().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->randomreward())) return false;
  if (has_fixedreward()) {
    if (!this->fixedreward().IsInitialized()) return false;
  }
  return true;
}

void RotaryTableCrazyReward::Swap(RotaryTableCrazyReward* other) {
  if (other != this) {
    chargereward_.Swap(&other->chargereward_);
    std::swap(rotarytablecost_, other->rotarytablecost_);
    randomreward_.Swap(&other->randomreward_);
    std::swap(fixedreward_, other->fixedreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotaryTableCrazyReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotaryTableCrazyReward_descriptor_;
  metadata.reflection = RotaryTableCrazyReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeGetChanceCfg::kNeedFieldNumber;
const int ChargeGetChanceCfg::kCFieldNumber;
#endif  // !_MSC_VER

ChargeGetChanceCfg::ChargeGetChanceCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.ChargeGetChanceCfg)
}

void ChargeGetChanceCfg::InitAsDefaultInstance() {
}

ChargeGetChanceCfg::ChargeGetChanceCfg(const ChargeGetChanceCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.ChargeGetChanceCfg)
}

void ChargeGetChanceCfg::SharedCtor() {
  _cached_size_ = 0;
  need_ = 0u;
  c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeGetChanceCfg::~ChargeGetChanceCfg() {
  // @@protoc_insertion_point(destructor:ConfigActivity.ChargeGetChanceCfg)
  SharedDtor();
}

void ChargeGetChanceCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeGetChanceCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeGetChanceCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeGetChanceCfg_descriptor_;
}

const ChargeGetChanceCfg& ChargeGetChanceCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

ChargeGetChanceCfg* ChargeGetChanceCfg::default_instance_ = NULL;

ChargeGetChanceCfg* ChargeGetChanceCfg::New() const {
  return new ChargeGetChanceCfg;
}

void ChargeGetChanceCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeGetChanceCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(need_, c_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeGetChanceCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.ChargeGetChanceCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 need = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_)));
          set_has_need();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_c;
        break;
      }

      // required uint32 c = 2;
      case 2: {
        if (tag == 16) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.ChargeGetChanceCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.ChargeGetChanceCfg)
  return false;
#undef DO_
}

void ChargeGetChanceCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.ChargeGetChanceCfg)
  // required uint32 need = 1;
  if (has_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->need(), output);
  }

  // required uint32 c = 2;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.ChargeGetChanceCfg)
}

::google::protobuf::uint8* ChargeGetChanceCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.ChargeGetChanceCfg)
  // required uint32 need = 1;
  if (has_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->need(), target);
  }

  // required uint32 c = 2;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.ChargeGetChanceCfg)
  return target;
}

int ChargeGetChanceCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 need = 1;
    if (has_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need());
    }

    // required uint32 c = 2;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeGetChanceCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeGetChanceCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeGetChanceCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeGetChanceCfg::MergeFrom(const ChargeGetChanceCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_need()) {
      set_need(from.need());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeGetChanceCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeGetChanceCfg::CopyFrom(const ChargeGetChanceCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeGetChanceCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChargeGetChanceCfg::Swap(ChargeGetChanceCfg* other) {
  if (other != this) {
    std::swap(need_, other->need_);
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeGetChanceCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeGetChanceCfg_descriptor_;
  metadata.reflection = ChargeGetChanceCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleReward::kRewardFieldNumber;
#endif  // !_MSC_VER

SingleReward::SingleReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.SingleReward)
}

void SingleReward::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

SingleReward::SingleReward(const SingleReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.SingleReward)
}

void SingleReward::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleReward::~SingleReward() {
  // @@protoc_insertion_point(destructor:ConfigActivity.SingleReward)
  SharedDtor();
}

void SingleReward::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void SingleReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleReward_descriptor_;
}

const SingleReward& SingleReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

SingleReward* SingleReward::default_instance_ = NULL;

SingleReward* SingleReward::New() const {
  return new SingleReward;
}

void SingleReward::Clear() {
  if (has_reward()) {
    if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.SingleReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RewardConfig.RewardItemCfg reward = 4;
      case 4: {
        if (tag == 34) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.SingleReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.SingleReward)
  return false;
#undef DO_
}

void SingleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.SingleReward)
  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.SingleReward)
}

::google::protobuf::uint8* SingleReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.SingleReward)
  // required .RewardConfig.RewardItemCfg reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.SingleReward)
  return target;
}

int SingleReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RewardConfig.RewardItemCfg reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleReward::MergeFrom(const SingleReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleReward::CopyFrom(const SingleReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void SingleReward::Swap(SingleReward* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleReward_descriptor_;
  metadata.reflection = SingleReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotaryTableFeedBackReward::kJinduFieldNumber;
const int RotaryTableFeedBackReward::kSinglerewardFieldNumber;
const int RotaryTableFeedBackReward::kCountFieldNumber;
const int RotaryTableFeedBackReward::kRandomRewardFieldNumber;
const int RotaryTableFeedBackReward::kFixedRewardFieldNumber;
#endif  // !_MSC_VER

RotaryTableFeedBackReward::RotaryTableFeedBackReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.RotaryTableFeedBackReward)
}

void RotaryTableFeedBackReward::InitAsDefaultInstance() {
  fixedreward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

RotaryTableFeedBackReward::RotaryTableFeedBackReward(const RotaryTableFeedBackReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.RotaryTableFeedBackReward)
}

void RotaryTableFeedBackReward::SharedCtor() {
  _cached_size_ = 0;
  fixedreward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotaryTableFeedBackReward::~RotaryTableFeedBackReward() {
  // @@protoc_insertion_point(destructor:ConfigActivity.RotaryTableFeedBackReward)
  SharedDtor();
}

void RotaryTableFeedBackReward::SharedDtor() {
  if (this != default_instance_) {
    delete fixedreward_;
  }
}

void RotaryTableFeedBackReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotaryTableFeedBackReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotaryTableFeedBackReward_descriptor_;
}

const RotaryTableFeedBackReward& RotaryTableFeedBackReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

RotaryTableFeedBackReward* RotaryTableFeedBackReward::default_instance_ = NULL;

RotaryTableFeedBackReward* RotaryTableFeedBackReward::New() const {
  return new RotaryTableFeedBackReward;
}

void RotaryTableFeedBackReward::Clear() {
  if (has_fixedreward()) {
    if (fixedreward_ != NULL) fixedreward_->::RewardConfig::RewardItemCfg::Clear();
  }
  jindu_.Clear();
  singlereward_.Clear();
  count_.Clear();
  randomreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotaryTableFeedBackReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.RotaryTableFeedBackReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.DiamondReward jindu = 1;
      case 1: {
        if (tag == 10) {
         parse_jindu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_jindu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_jindu;
        if (input->ExpectTag(18)) goto parse_singlereward;
        break;
      }

      // repeated .ConfigActivity.SingleReward singlereward = 2;
      case 2: {
        if (tag == 18) {
         parse_singlereward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singlereward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_singlereward;
        if (input->ExpectTag(26)) goto parse_count;
        break;
      }

      // repeated .ConfigActivity.ChargeGetChanceCfg count = 3;
      case 3: {
        if (tag == 26) {
         parse_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_count;
        if (input->ExpectTag(34)) goto parse_randomReward;
        break;
      }

      // repeated .ConfigActivity.RotaryTableCfg randomReward = 4;
      case 4: {
        if (tag == 34) {
         parse_randomReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_randomreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_randomReward;
        if (input->ExpectTag(42)) goto parse_fixedReward;
        break;
      }

      // required .RewardConfig.RewardItemCfg fixedReward = 5;
      case 5: {
        if (tag == 42) {
         parse_fixedReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixedreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.RotaryTableFeedBackReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.RotaryTableFeedBackReward)
  return false;
#undef DO_
}

void RotaryTableFeedBackReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.RotaryTableFeedBackReward)
  // repeated .ConfigActivity.DiamondReward jindu = 1;
  for (int i = 0; i < this->jindu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jindu(i), output);
  }

  // repeated .ConfigActivity.SingleReward singlereward = 2;
  for (int i = 0; i < this->singlereward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->singlereward(i), output);
  }

  // repeated .ConfigActivity.ChargeGetChanceCfg count = 3;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->count(i), output);
  }

  // repeated .ConfigActivity.RotaryTableCfg randomReward = 4;
  for (int i = 0; i < this->randomreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->randomreward(i), output);
  }

  // required .RewardConfig.RewardItemCfg fixedReward = 5;
  if (has_fixedreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fixedreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.RotaryTableFeedBackReward)
}

::google::protobuf::uint8* RotaryTableFeedBackReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.RotaryTableFeedBackReward)
  // repeated .ConfigActivity.DiamondReward jindu = 1;
  for (int i = 0; i < this->jindu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jindu(i), target);
  }

  // repeated .ConfigActivity.SingleReward singlereward = 2;
  for (int i = 0; i < this->singlereward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->singlereward(i), target);
  }

  // repeated .ConfigActivity.ChargeGetChanceCfg count = 3;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->count(i), target);
  }

  // repeated .ConfigActivity.RotaryTableCfg randomReward = 4;
  for (int i = 0; i < this->randomreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->randomreward(i), target);
  }

  // required .RewardConfig.RewardItemCfg fixedReward = 5;
  if (has_fixedreward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fixedreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.RotaryTableFeedBackReward)
  return target;
}

int RotaryTableFeedBackReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // required .RewardConfig.RewardItemCfg fixedReward = 5;
    if (has_fixedreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixedreward());
    }

  }
  // repeated .ConfigActivity.DiamondReward jindu = 1;
  total_size += 1 * this->jindu_size();
  for (int i = 0; i < this->jindu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->jindu(i));
  }

  // repeated .ConfigActivity.SingleReward singlereward = 2;
  total_size += 1 * this->singlereward_size();
  for (int i = 0; i < this->singlereward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->singlereward(i));
  }

  // repeated .ConfigActivity.ChargeGetChanceCfg count = 3;
  total_size += 1 * this->count_size();
  for (int i = 0; i < this->count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->count(i));
  }

  // repeated .ConfigActivity.RotaryTableCfg randomReward = 4;
  total_size += 1 * this->randomreward_size();
  for (int i = 0; i < this->randomreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->randomreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotaryTableFeedBackReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotaryTableFeedBackReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotaryTableFeedBackReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotaryTableFeedBackReward::MergeFrom(const RotaryTableFeedBackReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  jindu_.MergeFrom(from.jindu_);
  singlereward_.MergeFrom(from.singlereward_);
  count_.MergeFrom(from.count_);
  randomreward_.MergeFrom(from.randomreward_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_fixedreward()) {
      mutable_fixedreward()->::RewardConfig::RewardItemCfg::MergeFrom(from.fixedreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotaryTableFeedBackReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotaryTableFeedBackReward::CopyFrom(const RotaryTableFeedBackReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotaryTableFeedBackReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->jindu())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->singlereward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->count())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->randomreward())) return false;
  if (has_fixedreward()) {
    if (!this->fixedreward().IsInitialized()) return false;
  }
  return true;
}

void RotaryTableFeedBackReward::Swap(RotaryTableFeedBackReward* other) {
  if (other != this) {
    jindu_.Swap(&other->jindu_);
    singlereward_.Swap(&other->singlereward_);
    count_.Swap(&other->count_);
    randomreward_.Swap(&other->randomreward_);
    std::swap(fixedreward_, other->fixedreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotaryTableFeedBackReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotaryTableFeedBackReward_descriptor_;
  metadata.reflection = RotaryTableFeedBackReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatmanTreasureDraw::kItemFieldNumber;
const int BatmanTreasureDraw::kWeightFieldNumber;
#endif  // !_MSC_VER

BatmanTreasureDraw::BatmanTreasureDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.BatmanTreasureDraw)
}

void BatmanTreasureDraw::InitAsDefaultInstance() {
  item_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

BatmanTreasureDraw::BatmanTreasureDraw(const BatmanTreasureDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.BatmanTreasureDraw)
}

void BatmanTreasureDraw::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  weight_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatmanTreasureDraw::~BatmanTreasureDraw() {
  // @@protoc_insertion_point(destructor:ConfigActivity.BatmanTreasureDraw)
  SharedDtor();
}

void BatmanTreasureDraw::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void BatmanTreasureDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatmanTreasureDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatmanTreasureDraw_descriptor_;
}

const BatmanTreasureDraw& BatmanTreasureDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

BatmanTreasureDraw* BatmanTreasureDraw::default_instance_ = NULL;

BatmanTreasureDraw* BatmanTreasureDraw::New() const {
  return new BatmanTreasureDraw;
}

void BatmanTreasureDraw::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_item()) {
      if (item_ != NULL) item_->::RewardConfig::RewardItemCfg::Clear();
    }
    weight_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatmanTreasureDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.BatmanTreasureDraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RewardConfig.RewardItemCfg item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // required uint32 weight = 2;
      case 2: {
        if (tag == 16) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.BatmanTreasureDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.BatmanTreasureDraw)
  return false;
#undef DO_
}

void BatmanTreasureDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.BatmanTreasureDraw)
  // required .RewardConfig.RewardItemCfg item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.BatmanTreasureDraw)
}

::google::protobuf::uint8* BatmanTreasureDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.BatmanTreasureDraw)
  // required .RewardConfig.RewardItemCfg item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // required uint32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.BatmanTreasureDraw)
  return target;
}

int BatmanTreasureDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RewardConfig.RewardItemCfg item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required uint32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatmanTreasureDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatmanTreasureDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatmanTreasureDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatmanTreasureDraw::MergeFrom(const BatmanTreasureDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::RewardConfig::RewardItemCfg::MergeFrom(from.item());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatmanTreasureDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatmanTreasureDraw::CopyFrom(const BatmanTreasureDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatmanTreasureDraw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void BatmanTreasureDraw::Swap(BatmanTreasureDraw* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatmanTreasureDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatmanTreasureDraw_descriptor_;
  metadata.reflection = BatmanTreasureDraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatmanTreasureCfg::kXiaobingChargeRewardFieldNumber;
const int BatmanTreasureCfg::kUniqueXiaobingDialFieldNumber;
const int BatmanTreasureCfg::kDrawCntMaxFieldNumber;
const int BatmanTreasureCfg::kDrawCostIntegralFieldNumber;
#endif  // !_MSC_VER

BatmanTreasureCfg::BatmanTreasureCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.BatmanTreasureCfg)
}

void BatmanTreasureCfg::InitAsDefaultInstance() {
}

BatmanTreasureCfg::BatmanTreasureCfg(const BatmanTreasureCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.BatmanTreasureCfg)
}

void BatmanTreasureCfg::SharedCtor() {
  _cached_size_ = 0;
  draw_cnt_max_ = 0u;
  draw_cost_integral_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatmanTreasureCfg::~BatmanTreasureCfg() {
  // @@protoc_insertion_point(destructor:ConfigActivity.BatmanTreasureCfg)
  SharedDtor();
}

void BatmanTreasureCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatmanTreasureCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatmanTreasureCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatmanTreasureCfg_descriptor_;
}

const BatmanTreasureCfg& BatmanTreasureCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

BatmanTreasureCfg* BatmanTreasureCfg::default_instance_ = NULL;

BatmanTreasureCfg* BatmanTreasureCfg::New() const {
  return new BatmanTreasureCfg;
}

void BatmanTreasureCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BatmanTreasureCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(draw_cnt_max_, draw_cost_integral_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  xiaobing_chargereward_.Clear();
  unique_xiaobing_dial_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatmanTreasureCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.BatmanTreasureCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.DiamondReward xiaobing_chargeReward = 1;
      case 1: {
        if (tag == 10) {
         parse_xiaobing_chargeReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xiaobing_chargereward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_xiaobing_chargeReward;
        if (input->ExpectTag(18)) goto parse_unique_xiaobing_dial;
        break;
      }

      // repeated .ConfigActivity.BatmanTreasureDraw unique_xiaobing_dial = 2;
      case 2: {
        if (tag == 18) {
         parse_unique_xiaobing_dial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unique_xiaobing_dial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_unique_xiaobing_dial;
        if (input->ExpectTag(24)) goto parse_draw_cnt_max;
        break;
      }

      // required uint32 draw_cnt_max = 3;
      case 3: {
        if (tag == 24) {
         parse_draw_cnt_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_cnt_max_)));
          set_has_draw_cnt_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_draw_cost_integral;
        break;
      }

      // required uint32 draw_cost_integral = 4;
      case 4: {
        if (tag == 32) {
         parse_draw_cost_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draw_cost_integral_)));
          set_has_draw_cost_integral();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.BatmanTreasureCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.BatmanTreasureCfg)
  return false;
#undef DO_
}

void BatmanTreasureCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.BatmanTreasureCfg)
  // repeated .ConfigActivity.DiamondReward xiaobing_chargeReward = 1;
  for (int i = 0; i < this->xiaobing_chargereward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->xiaobing_chargereward(i), output);
  }

  // repeated .ConfigActivity.BatmanTreasureDraw unique_xiaobing_dial = 2;
  for (int i = 0; i < this->unique_xiaobing_dial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unique_xiaobing_dial(i), output);
  }

  // required uint32 draw_cnt_max = 3;
  if (has_draw_cnt_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->draw_cnt_max(), output);
  }

  // required uint32 draw_cost_integral = 4;
  if (has_draw_cost_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->draw_cost_integral(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.BatmanTreasureCfg)
}

::google::protobuf::uint8* BatmanTreasureCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.BatmanTreasureCfg)
  // repeated .ConfigActivity.DiamondReward xiaobing_chargeReward = 1;
  for (int i = 0; i < this->xiaobing_chargereward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->xiaobing_chargereward(i), target);
  }

  // repeated .ConfigActivity.BatmanTreasureDraw unique_xiaobing_dial = 2;
  for (int i = 0; i < this->unique_xiaobing_dial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unique_xiaobing_dial(i), target);
  }

  // required uint32 draw_cnt_max = 3;
  if (has_draw_cnt_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->draw_cnt_max(), target);
  }

  // required uint32 draw_cost_integral = 4;
  if (has_draw_cost_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->draw_cost_integral(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.BatmanTreasureCfg)
  return target;
}

int BatmanTreasureCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 draw_cnt_max = 3;
    if (has_draw_cnt_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draw_cnt_max());
    }

    // required uint32 draw_cost_integral = 4;
    if (has_draw_cost_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draw_cost_integral());
    }

  }
  // repeated .ConfigActivity.DiamondReward xiaobing_chargeReward = 1;
  total_size += 1 * this->xiaobing_chargereward_size();
  for (int i = 0; i < this->xiaobing_chargereward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xiaobing_chargereward(i));
  }

  // repeated .ConfigActivity.BatmanTreasureDraw unique_xiaobing_dial = 2;
  total_size += 1 * this->unique_xiaobing_dial_size();
  for (int i = 0; i < this->unique_xiaobing_dial_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unique_xiaobing_dial(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatmanTreasureCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatmanTreasureCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatmanTreasureCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatmanTreasureCfg::MergeFrom(const BatmanTreasureCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  xiaobing_chargereward_.MergeFrom(from.xiaobing_chargereward_);
  unique_xiaobing_dial_.MergeFrom(from.unique_xiaobing_dial_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_draw_cnt_max()) {
      set_draw_cnt_max(from.draw_cnt_max());
    }
    if (from.has_draw_cost_integral()) {
      set_draw_cost_integral(from.draw_cost_integral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatmanTreasureCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatmanTreasureCfg::CopyFrom(const BatmanTreasureCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatmanTreasureCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->xiaobing_chargereward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unique_xiaobing_dial())) return false;
  return true;
}

void BatmanTreasureCfg::Swap(BatmanTreasureCfg* other) {
  if (other != this) {
    xiaobing_chargereward_.Swap(&other->xiaobing_chargereward_);
    unique_xiaobing_dial_.Swap(&other->unique_xiaobing_dial_);
    std::swap(draw_cnt_max_, other->draw_cnt_max_);
    std::swap(draw_cost_integral_, other->draw_cost_integral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatmanTreasureCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatmanTreasureCfg_descriptor_;
  metadata.reflection = BatmanTreasureCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SummerChargeRewardCfg::kDailyChargeRewardFieldNumber;
const int SummerChargeRewardCfg::kAccChargeRewardFieldNumber;
#endif  // !_MSC_VER

SummerChargeRewardCfg::SummerChargeRewardCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.SummerChargeRewardCfg)
}

void SummerChargeRewardCfg::InitAsDefaultInstance() {
}

SummerChargeRewardCfg::SummerChargeRewardCfg(const SummerChargeRewardCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.SummerChargeRewardCfg)
}

void SummerChargeRewardCfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummerChargeRewardCfg::~SummerChargeRewardCfg() {
  // @@protoc_insertion_point(destructor:ConfigActivity.SummerChargeRewardCfg)
  SharedDtor();
}

void SummerChargeRewardCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SummerChargeRewardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummerChargeRewardCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummerChargeRewardCfg_descriptor_;
}

const SummerChargeRewardCfg& SummerChargeRewardCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

SummerChargeRewardCfg* SummerChargeRewardCfg::default_instance_ = NULL;

SummerChargeRewardCfg* SummerChargeRewardCfg::New() const {
  return new SummerChargeRewardCfg;
}

void SummerChargeRewardCfg::Clear() {
  daily_chargereward_.Clear();
  acc_chargereward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummerChargeRewardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.SummerChargeRewardCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.DiamondReward daily_chargeReward = 1;
      case 1: {
        if (tag == 10) {
         parse_daily_chargeReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_chargereward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_daily_chargeReward;
        if (input->ExpectTag(18)) goto parse_acc_chargeReward;
        break;
      }

      // repeated .ConfigActivity.DiamondReward acc_chargeReward = 2;
      case 2: {
        if (tag == 18) {
         parse_acc_chargeReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acc_chargereward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_acc_chargeReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.SummerChargeRewardCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.SummerChargeRewardCfg)
  return false;
#undef DO_
}

void SummerChargeRewardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.SummerChargeRewardCfg)
  // repeated .ConfigActivity.DiamondReward daily_chargeReward = 1;
  for (int i = 0; i < this->daily_chargereward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily_chargereward(i), output);
  }

  // repeated .ConfigActivity.DiamondReward acc_chargeReward = 2;
  for (int i = 0; i < this->acc_chargereward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acc_chargereward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.SummerChargeRewardCfg)
}

::google::protobuf::uint8* SummerChargeRewardCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.SummerChargeRewardCfg)
  // repeated .ConfigActivity.DiamondReward daily_chargeReward = 1;
  for (int i = 0; i < this->daily_chargereward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily_chargereward(i), target);
  }

  // repeated .ConfigActivity.DiamondReward acc_chargeReward = 2;
  for (int i = 0; i < this->acc_chargereward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acc_chargereward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.SummerChargeRewardCfg)
  return target;
}

int SummerChargeRewardCfg::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigActivity.DiamondReward daily_chargeReward = 1;
  total_size += 1 * this->daily_chargereward_size();
  for (int i = 0; i < this->daily_chargereward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily_chargereward(i));
  }

  // repeated .ConfigActivity.DiamondReward acc_chargeReward = 2;
  total_size += 1 * this->acc_chargereward_size();
  for (int i = 0; i < this->acc_chargereward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acc_chargereward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummerChargeRewardCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummerChargeRewardCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummerChargeRewardCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummerChargeRewardCfg::MergeFrom(const SummerChargeRewardCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_chargereward_.MergeFrom(from.daily_chargereward_);
  acc_chargereward_.MergeFrom(from.acc_chargereward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummerChargeRewardCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummerChargeRewardCfg::CopyFrom(const SummerChargeRewardCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummerChargeRewardCfg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->daily_chargereward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->acc_chargereward())) return false;
  return true;
}

void SummerChargeRewardCfg::Swap(SummerChargeRewardCfg* other) {
  if (other != this) {
    daily_chargereward_.Swap(&other->daily_chargereward_);
    acc_chargereward_.Swap(&other->acc_chargereward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummerChargeRewardCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummerChargeRewardCfg_descriptor_;
  metadata.reflection = SummerChargeRewardCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SummerHolidaysTicketCfg::kNeedCostTicketFieldNumber;
const int SummerHolidaysTicketCfg::kExchangeCountMaxFieldNumber;
const int SummerHolidaysTicketCfg::kRewardFieldNumber;
#endif  // !_MSC_VER

SummerHolidaysTicketCfg::SummerHolidaysTicketCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.SummerHolidaysTicketCfg)
}

void SummerHolidaysTicketCfg::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

SummerHolidaysTicketCfg::SummerHolidaysTicketCfg(const SummerHolidaysTicketCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.SummerHolidaysTicketCfg)
}

void SummerHolidaysTicketCfg::SharedCtor() {
  _cached_size_ = 0;
  need_cost_ticket_ = 0u;
  exchange_count_max_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummerHolidaysTicketCfg::~SummerHolidaysTicketCfg() {
  // @@protoc_insertion_point(destructor:ConfigActivity.SummerHolidaysTicketCfg)
  SharedDtor();
}

void SummerHolidaysTicketCfg::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void SummerHolidaysTicketCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummerHolidaysTicketCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummerHolidaysTicketCfg_descriptor_;
}

const SummerHolidaysTicketCfg& SummerHolidaysTicketCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

SummerHolidaysTicketCfg* SummerHolidaysTicketCfg::default_instance_ = NULL;

SummerHolidaysTicketCfg* SummerHolidaysTicketCfg::New() const {
  return new SummerHolidaysTicketCfg;
}

void SummerHolidaysTicketCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SummerHolidaysTicketCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(need_cost_ticket_, exchange_count_max_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummerHolidaysTicketCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.SummerHolidaysTicketCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 need_cost_ticket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_cost_ticket_)));
          set_has_need_cost_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exchange_count_max;
        break;
      }

      // required uint32 exchange_count_max = 2;
      case 2: {
        if (tag == 16) {
         parse_exchange_count_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_count_max_)));
          set_has_exchange_count_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.SummerHolidaysTicketCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.SummerHolidaysTicketCfg)
  return false;
#undef DO_
}

void SummerHolidaysTicketCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.SummerHolidaysTicketCfg)
  // required uint32 need_cost_ticket = 1;
  if (has_need_cost_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->need_cost_ticket(), output);
  }

  // required uint32 exchange_count_max = 2;
  if (has_exchange_count_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exchange_count_max(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.SummerHolidaysTicketCfg)
}

::google::protobuf::uint8* SummerHolidaysTicketCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.SummerHolidaysTicketCfg)
  // required uint32 need_cost_ticket = 1;
  if (has_need_cost_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->need_cost_ticket(), target);
  }

  // required uint32 exchange_count_max = 2;
  if (has_exchange_count_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exchange_count_max(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.SummerHolidaysTicketCfg)
  return target;
}

int SummerHolidaysTicketCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 need_cost_ticket = 1;
    if (has_need_cost_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_cost_ticket());
    }

    // required uint32 exchange_count_max = 2;
    if (has_exchange_count_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_count_max());
    }

    // required .RewardConfig.RewardItemCfg reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummerHolidaysTicketCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummerHolidaysTicketCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummerHolidaysTicketCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummerHolidaysTicketCfg::MergeFrom(const SummerHolidaysTicketCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_need_cost_ticket()) {
      set_need_cost_ticket(from.need_cost_ticket());
    }
    if (from.has_exchange_count_max()) {
      set_exchange_count_max(from.exchange_count_max());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummerHolidaysTicketCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummerHolidaysTicketCfg::CopyFrom(const SummerHolidaysTicketCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummerHolidaysTicketCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void SummerHolidaysTicketCfg::Swap(SummerHolidaysTicketCfg* other) {
  if (other != this) {
    std::swap(need_cost_ticket_, other->need_cost_ticket_);
    std::swap(exchange_count_max_, other->exchange_count_max_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummerHolidaysTicketCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummerHolidaysTicketCfg_descriptor_;
  metadata.reflection = SummerHolidaysTicketCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SummerHolidaysRewardCfg::kExchangeTicketMaxFieldNumber;
const int SummerHolidaysRewardCfg::kPerTicketNeedDiamondFieldNumber;
const int SummerHolidaysRewardCfg::kSummerHolidaysTicketFieldNumber;
const int SummerHolidaysRewardCfg::kChargeRewardFieldNumber;
#endif  // !_MSC_VER

SummerHolidaysRewardCfg::SummerHolidaysRewardCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.SummerHolidaysRewardCfg)
}

void SummerHolidaysRewardCfg::InitAsDefaultInstance() {
}

SummerHolidaysRewardCfg::SummerHolidaysRewardCfg(const SummerHolidaysRewardCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.SummerHolidaysRewardCfg)
}

void SummerHolidaysRewardCfg::SharedCtor() {
  _cached_size_ = 0;
  exchange_ticket_max_ = 0u;
  per_ticket_need_diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummerHolidaysRewardCfg::~SummerHolidaysRewardCfg() {
  // @@protoc_insertion_point(destructor:ConfigActivity.SummerHolidaysRewardCfg)
  SharedDtor();
}

void SummerHolidaysRewardCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SummerHolidaysRewardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummerHolidaysRewardCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummerHolidaysRewardCfg_descriptor_;
}

const SummerHolidaysRewardCfg& SummerHolidaysRewardCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

SummerHolidaysRewardCfg* SummerHolidaysRewardCfg::default_instance_ = NULL;

SummerHolidaysRewardCfg* SummerHolidaysRewardCfg::New() const {
  return new SummerHolidaysRewardCfg;
}

void SummerHolidaysRewardCfg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SummerHolidaysRewardCfg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(exchange_ticket_max_, per_ticket_need_diamond_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  summer_holidays_ticket_.Clear();
  chargereward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummerHolidaysRewardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.SummerHolidaysRewardCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exchange_ticket_max = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_ticket_max_)));
          set_has_exchange_ticket_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_per_ticket_need_diamond;
        break;
      }

      // required uint32 per_ticket_need_diamond = 2;
      case 2: {
        if (tag == 16) {
         parse_per_ticket_need_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &per_ticket_need_diamond_)));
          set_has_per_ticket_need_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_summer_holidays_ticket;
        break;
      }

      // repeated .ConfigActivity.SummerHolidaysTicketCfg summer_holidays_ticket = 3;
      case 3: {
        if (tag == 26) {
         parse_summer_holidays_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_summer_holidays_ticket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_summer_holidays_ticket;
        if (input->ExpectTag(34)) goto parse_chargeReward;
        break;
      }

      // repeated .ConfigActivity.DiamondReward chargeReward = 4;
      case 4: {
        if (tag == 34) {
         parse_chargeReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chargereward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chargeReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.SummerHolidaysRewardCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.SummerHolidaysRewardCfg)
  return false;
#undef DO_
}

void SummerHolidaysRewardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.SummerHolidaysRewardCfg)
  // required uint32 exchange_ticket_max = 1;
  if (has_exchange_ticket_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchange_ticket_max(), output);
  }

  // required uint32 per_ticket_need_diamond = 2;
  if (has_per_ticket_need_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->per_ticket_need_diamond(), output);
  }

  // repeated .ConfigActivity.SummerHolidaysTicketCfg summer_holidays_ticket = 3;
  for (int i = 0; i < this->summer_holidays_ticket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->summer_holidays_ticket(i), output);
  }

  // repeated .ConfigActivity.DiamondReward chargeReward = 4;
  for (int i = 0; i < this->chargereward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chargereward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.SummerHolidaysRewardCfg)
}

::google::protobuf::uint8* SummerHolidaysRewardCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.SummerHolidaysRewardCfg)
  // required uint32 exchange_ticket_max = 1;
  if (has_exchange_ticket_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchange_ticket_max(), target);
  }

  // required uint32 per_ticket_need_diamond = 2;
  if (has_per_ticket_need_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->per_ticket_need_diamond(), target);
  }

  // repeated .ConfigActivity.SummerHolidaysTicketCfg summer_holidays_ticket = 3;
  for (int i = 0; i < this->summer_holidays_ticket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->summer_holidays_ticket(i), target);
  }

  // repeated .ConfigActivity.DiamondReward chargeReward = 4;
  for (int i = 0; i < this->chargereward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chargereward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.SummerHolidaysRewardCfg)
  return target;
}

int SummerHolidaysRewardCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exchange_ticket_max = 1;
    if (has_exchange_ticket_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_ticket_max());
    }

    // required uint32 per_ticket_need_diamond = 2;
    if (has_per_ticket_need_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->per_ticket_need_diamond());
    }

  }
  // repeated .ConfigActivity.SummerHolidaysTicketCfg summer_holidays_ticket = 3;
  total_size += 1 * this->summer_holidays_ticket_size();
  for (int i = 0; i < this->summer_holidays_ticket_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->summer_holidays_ticket(i));
  }

  // repeated .ConfigActivity.DiamondReward chargeReward = 4;
  total_size += 1 * this->chargereward_size();
  for (int i = 0; i < this->chargereward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chargereward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummerHolidaysRewardCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummerHolidaysRewardCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummerHolidaysRewardCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummerHolidaysRewardCfg::MergeFrom(const SummerHolidaysRewardCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  summer_holidays_ticket_.MergeFrom(from.summer_holidays_ticket_);
  chargereward_.MergeFrom(from.chargereward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_ticket_max()) {
      set_exchange_ticket_max(from.exchange_ticket_max());
    }
    if (from.has_per_ticket_need_diamond()) {
      set_per_ticket_need_diamond(from.per_ticket_need_diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummerHolidaysRewardCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummerHolidaysRewardCfg::CopyFrom(const SummerHolidaysRewardCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummerHolidaysRewardCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->summer_holidays_ticket())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->chargereward())) return false;
  return true;
}

void SummerHolidaysRewardCfg::Swap(SummerHolidaysRewardCfg* other) {
  if (other != this) {
    std::swap(exchange_ticket_max_, other->exchange_ticket_max_);
    std::swap(per_ticket_need_diamond_, other->per_ticket_need_diamond_);
    summer_holidays_ticket_.Swap(&other->summer_holidays_ticket_);
    chargereward_.Swap(&other->chargereward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummerHolidaysRewardCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummerHolidaysRewardCfg_descriptor_;
  metadata.reflection = SummerHolidaysRewardCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreeExchangeItem::kIdFieldNumber;
const int FreeExchangeItem::kCFieldNumber;
#endif  // !_MSC_VER

FreeExchangeItem::FreeExchangeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.FreeExchangeItem)
}

void FreeExchangeItem::InitAsDefaultInstance() {
}

FreeExchangeItem::FreeExchangeItem(const FreeExchangeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.FreeExchangeItem)
}

void FreeExchangeItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreeExchangeItem::~FreeExchangeItem() {
  // @@protoc_insertion_point(destructor:ConfigActivity.FreeExchangeItem)
  SharedDtor();
}

void FreeExchangeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreeExchangeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeExchangeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreeExchangeItem_descriptor_;
}

const FreeExchangeItem& FreeExchangeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

FreeExchangeItem* FreeExchangeItem::default_instance_ = NULL;

FreeExchangeItem* FreeExchangeItem::New() const {
  return new FreeExchangeItem;
}

void FreeExchangeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FreeExchangeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, c_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreeExchangeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.FreeExchangeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_c;
        break;
      }

      // required uint32 c = 2;
      case 2: {
        if (tag == 16) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.FreeExchangeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.FreeExchangeItem)
  return false;
#undef DO_
}

void FreeExchangeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.FreeExchangeItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 c = 2;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.FreeExchangeItem)
}

::google::protobuf::uint8* FreeExchangeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.FreeExchangeItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 c = 2;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.FreeExchangeItem)
  return target;
}

int FreeExchangeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 c = 2;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeExchangeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreeExchangeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreeExchangeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreeExchangeItem::MergeFrom(const FreeExchangeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreeExchangeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeExchangeItem::CopyFrom(const FreeExchangeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeExchangeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FreeExchangeItem::Swap(FreeExchangeItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreeExchangeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreeExchangeItem_descriptor_;
  metadata.reflection = FreeExchangeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreeExchange::kItemFieldNumber;
#endif  // !_MSC_VER

FreeExchange::FreeExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.FreeExchange)
}

void FreeExchange::InitAsDefaultInstance() {
}

FreeExchange::FreeExchange(const FreeExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.FreeExchange)
}

void FreeExchange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreeExchange::~FreeExchange() {
  // @@protoc_insertion_point(destructor:ConfigActivity.FreeExchange)
  SharedDtor();
}

void FreeExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreeExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreeExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreeExchange_descriptor_;
}

const FreeExchange& FreeExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

FreeExchange* FreeExchange::default_instance_ = NULL;

FreeExchange* FreeExchange::New() const {
  return new FreeExchange;
}

void FreeExchange::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreeExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.FreeExchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.FreeExchangeItem item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.FreeExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.FreeExchange)
  return false;
#undef DO_
}

void FreeExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.FreeExchange)
  // repeated .ConfigActivity.FreeExchangeItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.FreeExchange)
}

::google::protobuf::uint8* FreeExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.FreeExchange)
  // repeated .ConfigActivity.FreeExchangeItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.FreeExchange)
  return target;
}

int FreeExchange::ByteSize() const {
  int total_size = 0;

  // repeated .ConfigActivity.FreeExchangeItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreeExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreeExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreeExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreeExchange::MergeFrom(const FreeExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreeExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreeExchange::CopyFrom(const FreeExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreeExchange::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void FreeExchange::Swap(FreeExchange* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreeExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreeExchange_descriptor_;
  metadata.reflection = FreeExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activities::kBuildsuitFieldNumber;
const int Activities::kBlesspointFieldNumber;
const int Activities::kDoubleWelfareFieldNumber;
const int Activities::kPearlAdvanceFieldNumber;
const int Activities::kUniqueKnowledgeDialFieldNumber;
const int Activities::kSpiritvitalityFieldNumber;
const int Activities::kForgeFieldNumber;
const int Activities::kHerodialFieldNumber;
const int Activities::kKingdomwarFieldNumber;
const int Activities::kOnediamondwelfareFieldNumber;
const int Activities::kFortunePacksFieldNumber;
const int Activities::kSevendayPacksFieldNumber;
const int Activities::kIcephoenixFieldNumber;
const int Activities::kAutumnFeedbackFieldNumber;
const int Activities::kProtectflagFieldNumber;
const int Activities::kKeyluxurygiftFieldNumber;
const int Activities::kEnjoySmallgiftFieldNumber;
const int Activities::kLuckyGiftFieldNumber;
const int Activities::kYearEndgiftFieldNumber;
const int Activities::kNewyearactivityFieldNumber;
const int Activities::kKaifuFieldNumber;
const int Activities::kStarstoneFieldNumber;
const int Activities::kNewyearactiveFieldNumber;
const int Activities::kHebdomadRewardFieldNumber;
const int Activities::kRotaryTableFieldNumber;
const int Activities::kBatmantreasureFieldNumber;
const int Activities::kSummerChargeFieldNumber;
const int Activities::kSummerHolidaysFieldNumber;
const int Activities::kChinadayavtivityFieldNumber;
const int Activities::kPayoptionalactivityFieldNumber;
const int Activities::kFreeExchgFieldNumber;
const int Activities::kZhuanpanhuikuiFieldNumber;
#endif  // !_MSC_VER

Activities::Activities()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigActivity.Activities)
}

void Activities::InitAsDefaultInstance() {
  blesspoint_ = const_cast< ::ConfigActivity::BlessPoint*>(&::ConfigActivity::BlessPoint::default_instance());
  double_welfare_ = const_cast< ::ConfigActivity::DoubleWelfare*>(&::ConfigActivity::DoubleWelfare::default_instance());
  forge_ = const_cast< ::ConfigActivity::ForgeSmelt*>(&::ConfigActivity::ForgeSmelt::default_instance());
  herodial_ = const_cast< ::ConfigActivity::HeroDial*>(&::ConfigActivity::HeroDial::default_instance());
  fortune_packs_ = const_cast< ::ConfigActivity::FortunePacks*>(&::ConfigActivity::FortunePacks::default_instance());
  keyluxurygift_ = const_cast< ::ConfigActivity::KeyLuxuryGift*>(&::ConfigActivity::KeyLuxuryGift::default_instance());
  enjoy_smallgift_ = const_cast< ::ConfigActivity::EnjoySmallGiftReward*>(&::ConfigActivity::EnjoySmallGiftReward::default_instance());
  lucky_gift_ = const_cast< ::ConfigActivity::LuckyGift*>(&::ConfigActivity::LuckyGift::default_instance());
  newyearactivity_ = const_cast< ::ConfigActivity::NewYearActivity*>(&::ConfigActivity::NewYearActivity::default_instance());
  kaifu_ = const_cast< ::ConfigActivity::KaiFuGift*>(&::ConfigActivity::KaiFuGift::default_instance());
  starstone_ = const_cast< ::ConfigActivity::StarStoneChange*>(&::ConfigActivity::StarStoneChange::default_instance());
  newyearactive_ = const_cast< ::ConfigActivity::HongBao*>(&::ConfigActivity::HongBao::default_instance());
  rotary_table_ = const_cast< ::ConfigActivity::RotaryTableCrazyReward*>(&::ConfigActivity::RotaryTableCrazyReward::default_instance());
  batmantreasure_ = const_cast< ::ConfigActivity::BatmanTreasureCfg*>(&::ConfigActivity::BatmanTreasureCfg::default_instance());
  summer_charge_ = const_cast< ::ConfigActivity::SummerChargeRewardCfg*>(&::ConfigActivity::SummerChargeRewardCfg::default_instance());
  summer_holidays_ = const_cast< ::ConfigActivity::SummerHolidaysRewardCfg*>(&::ConfigActivity::SummerHolidaysRewardCfg::default_instance());
  chinadayavtivity_ = const_cast< ::ConfigActivity::ChinaDayActivity*>(&::ConfigActivity::ChinaDayActivity::default_instance());
  payoptionalactivity_ = const_cast< ::ConfigActivity::PayOptionalActivity*>(&::ConfigActivity::PayOptionalActivity::default_instance());
  zhuanpanhuikui_ = const_cast< ::ConfigActivity::RotaryTableFeedBackReward*>(&::ConfigActivity::RotaryTableFeedBackReward::default_instance());
}

Activities::Activities(const Activities& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigActivity.Activities)
}

void Activities::SharedCtor() {
  _cached_size_ = 0;
  blesspoint_ = NULL;
  double_welfare_ = NULL;
  forge_ = NULL;
  herodial_ = NULL;
  fortune_packs_ = NULL;
  keyluxurygift_ = NULL;
  enjoy_smallgift_ = NULL;
  lucky_gift_ = NULL;
  newyearactivity_ = NULL;
  kaifu_ = NULL;
  starstone_ = NULL;
  newyearactive_ = NULL;
  rotary_table_ = NULL;
  batmantreasure_ = NULL;
  summer_charge_ = NULL;
  summer_holidays_ = NULL;
  chinadayavtivity_ = NULL;
  payoptionalactivity_ = NULL;
  zhuanpanhuikui_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activities::~Activities() {
  // @@protoc_insertion_point(destructor:ConfigActivity.Activities)
  SharedDtor();
}

void Activities::SharedDtor() {
  if (this != default_instance_) {
    delete blesspoint_;
    delete double_welfare_;
    delete forge_;
    delete herodial_;
    delete fortune_packs_;
    delete keyluxurygift_;
    delete enjoy_smallgift_;
    delete lucky_gift_;
    delete newyearactivity_;
    delete kaifu_;
    delete starstone_;
    delete newyearactive_;
    delete rotary_table_;
    delete batmantreasure_;
    delete summer_charge_;
    delete summer_holidays_;
    delete chinadayavtivity_;
    delete payoptionalactivity_;
    delete zhuanpanhuikui_;
  }
}

void Activities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activities_descriptor_;
}

const Activities& Activities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigActivity_2eproto();
  return *default_instance_;
}

Activities* Activities::default_instance_ = NULL;

Activities* Activities::New() const {
  return new Activities;
}

void Activities::Clear() {
  if (_has_bits_[0 / 32] & 198) {
    if (has_blesspoint()) {
      if (blesspoint_ != NULL) blesspoint_->::ConfigActivity::BlessPoint::Clear();
    }
    if (has_double_welfare()) {
      if (double_welfare_ != NULL) double_welfare_->::ConfigActivity::DoubleWelfare::Clear();
    }
    if (has_forge()) {
      if (forge_ != NULL) forge_->::ConfigActivity::ForgeSmelt::Clear();
    }
    if (has_herodial()) {
      if (herodial_ != NULL) herodial_->::ConfigActivity::HeroDial::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 33792) {
    if (has_fortune_packs()) {
      if (fortune_packs_ != NULL) fortune_packs_->::ConfigActivity::FortunePacks::Clear();
    }
    if (has_keyluxurygift()) {
      if (keyluxurygift_ != NULL) keyluxurygift_->::ConfigActivity::KeyLuxuryGift::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 8060928) {
    if (has_enjoy_smallgift()) {
      if (enjoy_smallgift_ != NULL) enjoy_smallgift_->::ConfigActivity::EnjoySmallGiftReward::Clear();
    }
    if (has_lucky_gift()) {
      if (lucky_gift_ != NULL) lucky_gift_->::ConfigActivity::LuckyGift::Clear();
    }
    if (has_newyearactivity()) {
      if (newyearactivity_ != NULL) newyearactivity_->::ConfigActivity::NewYearActivity::Clear();
    }
    if (has_kaifu()) {
      if (kaifu_ != NULL) kaifu_->::ConfigActivity::KaiFuGift::Clear();
    }
    if (has_starstone()) {
      if (starstone_ != NULL) starstone_->::ConfigActivity::StarStoneChange::Clear();
    }
    if (has_newyearactive()) {
      if (newyearactive_ != NULL) newyearactive_->::ConfigActivity::HongBao::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 3204448256) {
    if (has_rotary_table()) {
      if (rotary_table_ != NULL) rotary_table_->::ConfigActivity::RotaryTableCrazyReward::Clear();
    }
    if (has_batmantreasure()) {
      if (batmantreasure_ != NULL) batmantreasure_->::ConfigActivity::BatmanTreasureCfg::Clear();
    }
    if (has_summer_charge()) {
      if (summer_charge_ != NULL) summer_charge_->::ConfigActivity::SummerChargeRewardCfg::Clear();
    }
    if (has_summer_holidays()) {
      if (summer_holidays_ != NULL) summer_holidays_->::ConfigActivity::SummerHolidaysRewardCfg::Clear();
    }
    if (has_chinadayavtivity()) {
      if (chinadayavtivity_ != NULL) chinadayavtivity_->::ConfigActivity::ChinaDayActivity::Clear();
    }
    if (has_payoptionalactivity()) {
      if (payoptionalactivity_ != NULL) payoptionalactivity_->::ConfigActivity::PayOptionalActivity::Clear();
    }
    if (has_zhuanpanhuikui()) {
      if (zhuanpanhuikui_ != NULL) zhuanpanhuikui_->::ConfigActivity::RotaryTableFeedBackReward::Clear();
    }
  }
  buildsuit_.Clear();
  pearl_advance_.Clear();
  unique_knowledge_dial_.Clear();
  spiritvitality_.Clear();
  kingdomwar_.Clear();
  onediamondwelfare_.Clear();
  sevenday_packs_.Clear();
  icephoenix_.Clear();
  autumn_feedback_.Clear();
  protectflag_.Clear();
  year_endgift_.Clear();
  hebdomadreward_.Clear();
  free_exchg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigActivity.Activities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigActivity.BuildSuitItem buildsuit = 1;
      case 1: {
        if (tag == 10) {
         parse_buildsuit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildsuit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buildsuit;
        if (input->ExpectTag(18)) goto parse_blesspoint;
        break;
      }

      // required .ConfigActivity.BlessPoint blesspoint = 2;
      case 2: {
        if (tag == 18) {
         parse_blesspoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blesspoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_double_welfare;
        break;
      }

      // required .ConfigActivity.DoubleWelfare double_welfare = 3;
      case 3: {
        if (tag == 26) {
         parse_double_welfare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_double_welfare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pearl_advance;
        break;
      }

      // repeated .ConfigActivity.PearlAdvance pearl_advance = 4;
      case 4: {
        if (tag == 34) {
         parse_pearl_advance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pearl_advance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pearl_advance;
        if (input->ExpectTag(42)) goto parse_unique_knowledge_dial;
        break;
      }

      // repeated .ConfigActivity.UniqueKnowledgeDial unique_knowledge_dial = 5;
      case 5: {
        if (tag == 42) {
         parse_unique_knowledge_dial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unique_knowledge_dial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unique_knowledge_dial;
        if (input->ExpectTag(50)) goto parse_spiritvitality;
        break;
      }

      // repeated .ConfigActivity.SpriteVitalityItem spiritvitality = 6;
      case 6: {
        if (tag == 50) {
         parse_spiritvitality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spiritvitality()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_spiritvitality;
        if (input->ExpectTag(58)) goto parse_forge;
        break;
      }

      // required .ConfigActivity.ForgeSmelt forge = 7;
      case 7: {
        if (tag == 58) {
         parse_forge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_herodial;
        break;
      }

      // required .ConfigActivity.HeroDial herodial = 8;
      case 8: {
        if (tag == 66) {
         parse_herodial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herodial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_kingdomwar;
        break;
      }

      // repeated .ConfigActivity.KingdomWar kingdomwar = 9;
      case 9: {
        if (tag == 74) {
         parse_kingdomwar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kingdomwar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_kingdomwar;
        if (input->ExpectTag(82)) goto parse_onediamondwelfare;
        break;
      }

      // repeated .ConfigActivity.OneDiamondWelfare onediamondwelfare = 10;
      case 10: {
        if (tag == 82) {
         parse_onediamondwelfare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onediamondwelfare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_onediamondwelfare;
        if (input->ExpectTag(90)) goto parse_fortune_packs;
        break;
      }

      // required .ConfigActivity.FortunePacks fortune_packs = 11;
      case 11: {
        if (tag == 90) {
         parse_fortune_packs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fortune_packs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sevenday_packs;
        break;
      }

      // repeated .ConfigActivity.SevenDayPacks sevenday_packs = 12;
      case 12: {
        if (tag == 98) {
         parse_sevenday_packs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sevenday_packs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sevenday_packs;
        if (input->ExpectTag(106)) goto parse_icephoenix;
        break;
      }

      // repeated .ConfigActivity.DiamondReward icephoenix = 13;
      case 13: {
        if (tag == 106) {
         parse_icephoenix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_icephoenix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_icephoenix;
        if (input->ExpectTag(114)) goto parse_autumn_feedback;
        break;
      }

      // repeated .ConfigActivity.DiamondReward autumn_feedback = 14;
      case 14: {
        if (tag == 114) {
         parse_autumn_feedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_autumn_feedback()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_autumn_feedback;
        if (input->ExpectTag(122)) goto parse_protectflag;
        break;
      }

      // repeated .ConfigActivity.DiamondReward protectflag = 15;
      case 15: {
        if (tag == 122) {
         parse_protectflag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protectflag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_protectflag;
        if (input->ExpectTag(130)) goto parse_keyluxurygift;
        break;
      }

      // required .ConfigActivity.KeyLuxuryGift keyluxurygift = 16;
      case 16: {
        if (tag == 130) {
         parse_keyluxurygift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keyluxurygift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_enjoy_smallgift;
        break;
      }

      // required .ConfigActivity.EnjoySmallGiftReward enjoy_smallgift = 17;
      case 17: {
        if (tag == 138) {
         parse_enjoy_smallgift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enjoy_smallgift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_lucky_gift;
        break;
      }

      // required .ConfigActivity.LuckyGift lucky_gift = 18;
      case 18: {
        if (tag == 146) {
         parse_lucky_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lucky_gift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_year_endgift;
        break;
      }

      // repeated .ConfigActivity.DiamondReward year_endgift = 19;
      case 19: {
        if (tag == 154) {
         parse_year_endgift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_year_endgift()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_year_endgift;
        if (input->ExpectTag(162)) goto parse_newyearactivity;
        break;
      }

      // required .ConfigActivity.NewYearActivity newyearactivity = 20;
      case 20: {
        if (tag == 162) {
         parse_newyearactivity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newyearactivity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_kaifu;
        break;
      }

      // required .ConfigActivity.KaiFuGift kaifu = 21;
      case 21: {
        if (tag == 170) {
         parse_kaifu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kaifu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_starstone;
        break;
      }

      // required .ConfigActivity.StarStoneChange starstone = 22;
      case 22: {
        if (tag == 178) {
         parse_starstone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starstone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_newyearactive;
        break;
      }

      // required .ConfigActivity.HongBao newyearactive = 23;
      case 23: {
        if (tag == 186) {
         parse_newyearactive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newyearactive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_HebdomadReward;
        break;
      }

      // repeated .ConfigActivity.TaskGift HebdomadReward = 24;
      case 24: {
        if (tag == 194) {
         parse_HebdomadReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hebdomadreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_HebdomadReward;
        if (input->ExpectTag(202)) goto parse_rotary_table;
        break;
      }

      // required .ConfigActivity.RotaryTableCrazyReward rotary_table = 25;
      case 25: {
        if (tag == 202) {
         parse_rotary_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotary_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_batmantreasure;
        break;
      }

      // required .ConfigActivity.BatmanTreasureCfg batmantreasure = 26;
      case 26: {
        if (tag == 210) {
         parse_batmantreasure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batmantreasure()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_summer_charge;
        break;
      }

      // required .ConfigActivity.SummerChargeRewardCfg summer_charge = 27;
      case 27: {
        if (tag == 218) {
         parse_summer_charge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summer_charge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_summer_holidays;
        break;
      }

      // required .ConfigActivity.SummerHolidaysRewardCfg summer_holidays = 28;
      case 28: {
        if (tag == 226) {
         parse_summer_holidays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summer_holidays()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_chinadayavtivity;
        break;
      }

      // required .ConfigActivity.ChinaDayActivity chinadayavtivity = 29;
      case 29: {
        if (tag == 234) {
         parse_chinadayavtivity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chinadayavtivity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_payoptionalactivity;
        break;
      }

      // required .ConfigActivity.PayOptionalActivity payoptionalactivity = 30;
      case 30: {
        if (tag == 242) {
         parse_payoptionalactivity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payoptionalactivity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_free_exchg;
        break;
      }

      // repeated .ConfigActivity.FreeExchange free_exchg = 31;
      case 31: {
        if (tag == 250) {
         parse_free_exchg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_free_exchg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_free_exchg;
        if (input->ExpectTag(258)) goto parse_zhuanpanhuikui;
        break;
      }

      // required .ConfigActivity.RotaryTableFeedBackReward zhuanpanhuikui = 32;
      case 32: {
        if (tag == 258) {
         parse_zhuanpanhuikui:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zhuanpanhuikui()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigActivity.Activities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigActivity.Activities)
  return false;
#undef DO_
}

void Activities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigActivity.Activities)
  // repeated .ConfigActivity.BuildSuitItem buildsuit = 1;
  for (int i = 0; i < this->buildsuit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buildsuit(i), output);
  }

  // required .ConfigActivity.BlessPoint blesspoint = 2;
  if (has_blesspoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blesspoint(), output);
  }

  // required .ConfigActivity.DoubleWelfare double_welfare = 3;
  if (has_double_welfare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->double_welfare(), output);
  }

  // repeated .ConfigActivity.PearlAdvance pearl_advance = 4;
  for (int i = 0; i < this->pearl_advance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pearl_advance(i), output);
  }

  // repeated .ConfigActivity.UniqueKnowledgeDial unique_knowledge_dial = 5;
  for (int i = 0; i < this->unique_knowledge_dial_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->unique_knowledge_dial(i), output);
  }

  // repeated .ConfigActivity.SpriteVitalityItem spiritvitality = 6;
  for (int i = 0; i < this->spiritvitality_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->spiritvitality(i), output);
  }

  // required .ConfigActivity.ForgeSmelt forge = 7;
  if (has_forge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->forge(), output);
  }

  // required .ConfigActivity.HeroDial herodial = 8;
  if (has_herodial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->herodial(), output);
  }

  // repeated .ConfigActivity.KingdomWar kingdomwar = 9;
  for (int i = 0; i < this->kingdomwar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->kingdomwar(i), output);
  }

  // repeated .ConfigActivity.OneDiamondWelfare onediamondwelfare = 10;
  for (int i = 0; i < this->onediamondwelfare_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->onediamondwelfare(i), output);
  }

  // required .ConfigActivity.FortunePacks fortune_packs = 11;
  if (has_fortune_packs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->fortune_packs(), output);
  }

  // repeated .ConfigActivity.SevenDayPacks sevenday_packs = 12;
  for (int i = 0; i < this->sevenday_packs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sevenday_packs(i), output);
  }

  // repeated .ConfigActivity.DiamondReward icephoenix = 13;
  for (int i = 0; i < this->icephoenix_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->icephoenix(i), output);
  }

  // repeated .ConfigActivity.DiamondReward autumn_feedback = 14;
  for (int i = 0; i < this->autumn_feedback_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->autumn_feedback(i), output);
  }

  // repeated .ConfigActivity.DiamondReward protectflag = 15;
  for (int i = 0; i < this->protectflag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->protectflag(i), output);
  }

  // required .ConfigActivity.KeyLuxuryGift keyluxurygift = 16;
  if (has_keyluxurygift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->keyluxurygift(), output);
  }

  // required .ConfigActivity.EnjoySmallGiftReward enjoy_smallgift = 17;
  if (has_enjoy_smallgift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->enjoy_smallgift(), output);
  }

  // required .ConfigActivity.LuckyGift lucky_gift = 18;
  if (has_lucky_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->lucky_gift(), output);
  }

  // repeated .ConfigActivity.DiamondReward year_endgift = 19;
  for (int i = 0; i < this->year_endgift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->year_endgift(i), output);
  }

  // required .ConfigActivity.NewYearActivity newyearactivity = 20;
  if (has_newyearactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->newyearactivity(), output);
  }

  // required .ConfigActivity.KaiFuGift kaifu = 21;
  if (has_kaifu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->kaifu(), output);
  }

  // required .ConfigActivity.StarStoneChange starstone = 22;
  if (has_starstone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->starstone(), output);
  }

  // required .ConfigActivity.HongBao newyearactive = 23;
  if (has_newyearactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->newyearactive(), output);
  }

  // repeated .ConfigActivity.TaskGift HebdomadReward = 24;
  for (int i = 0; i < this->hebdomadreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->hebdomadreward(i), output);
  }

  // required .ConfigActivity.RotaryTableCrazyReward rotary_table = 25;
  if (has_rotary_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->rotary_table(), output);
  }

  // required .ConfigActivity.BatmanTreasureCfg batmantreasure = 26;
  if (has_batmantreasure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->batmantreasure(), output);
  }

  // required .ConfigActivity.SummerChargeRewardCfg summer_charge = 27;
  if (has_summer_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->summer_charge(), output);
  }

  // required .ConfigActivity.SummerHolidaysRewardCfg summer_holidays = 28;
  if (has_summer_holidays()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->summer_holidays(), output);
  }

  // required .ConfigActivity.ChinaDayActivity chinadayavtivity = 29;
  if (has_chinadayavtivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->chinadayavtivity(), output);
  }

  // required .ConfigActivity.PayOptionalActivity payoptionalactivity = 30;
  if (has_payoptionalactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->payoptionalactivity(), output);
  }

  // repeated .ConfigActivity.FreeExchange free_exchg = 31;
  for (int i = 0; i < this->free_exchg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->free_exchg(i), output);
  }

  // required .ConfigActivity.RotaryTableFeedBackReward zhuanpanhuikui = 32;
  if (has_zhuanpanhuikui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->zhuanpanhuikui(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigActivity.Activities)
}

::google::protobuf::uint8* Activities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigActivity.Activities)
  // repeated .ConfigActivity.BuildSuitItem buildsuit = 1;
  for (int i = 0; i < this->buildsuit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buildsuit(i), target);
  }

  // required .ConfigActivity.BlessPoint blesspoint = 2;
  if (has_blesspoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blesspoint(), target);
  }

  // required .ConfigActivity.DoubleWelfare double_welfare = 3;
  if (has_double_welfare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->double_welfare(), target);
  }

  // repeated .ConfigActivity.PearlAdvance pearl_advance = 4;
  for (int i = 0; i < this->pearl_advance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pearl_advance(i), target);
  }

  // repeated .ConfigActivity.UniqueKnowledgeDial unique_knowledge_dial = 5;
  for (int i = 0; i < this->unique_knowledge_dial_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->unique_knowledge_dial(i), target);
  }

  // repeated .ConfigActivity.SpriteVitalityItem spiritvitality = 6;
  for (int i = 0; i < this->spiritvitality_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->spiritvitality(i), target);
  }

  // required .ConfigActivity.ForgeSmelt forge = 7;
  if (has_forge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->forge(), target);
  }

  // required .ConfigActivity.HeroDial herodial = 8;
  if (has_herodial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->herodial(), target);
  }

  // repeated .ConfigActivity.KingdomWar kingdomwar = 9;
  for (int i = 0; i < this->kingdomwar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->kingdomwar(i), target);
  }

  // repeated .ConfigActivity.OneDiamondWelfare onediamondwelfare = 10;
  for (int i = 0; i < this->onediamondwelfare_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->onediamondwelfare(i), target);
  }

  // required .ConfigActivity.FortunePacks fortune_packs = 11;
  if (has_fortune_packs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->fortune_packs(), target);
  }

  // repeated .ConfigActivity.SevenDayPacks sevenday_packs = 12;
  for (int i = 0; i < this->sevenday_packs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->sevenday_packs(i), target);
  }

  // repeated .ConfigActivity.DiamondReward icephoenix = 13;
  for (int i = 0; i < this->icephoenix_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->icephoenix(i), target);
  }

  // repeated .ConfigActivity.DiamondReward autumn_feedback = 14;
  for (int i = 0; i < this->autumn_feedback_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->autumn_feedback(i), target);
  }

  // repeated .ConfigActivity.DiamondReward protectflag = 15;
  for (int i = 0; i < this->protectflag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->protectflag(i), target);
  }

  // required .ConfigActivity.KeyLuxuryGift keyluxurygift = 16;
  if (has_keyluxurygift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->keyluxurygift(), target);
  }

  // required .ConfigActivity.EnjoySmallGiftReward enjoy_smallgift = 17;
  if (has_enjoy_smallgift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->enjoy_smallgift(), target);
  }

  // required .ConfigActivity.LuckyGift lucky_gift = 18;
  if (has_lucky_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->lucky_gift(), target);
  }

  // repeated .ConfigActivity.DiamondReward year_endgift = 19;
  for (int i = 0; i < this->year_endgift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->year_endgift(i), target);
  }

  // required .ConfigActivity.NewYearActivity newyearactivity = 20;
  if (has_newyearactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->newyearactivity(), target);
  }

  // required .ConfigActivity.KaiFuGift kaifu = 21;
  if (has_kaifu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->kaifu(), target);
  }

  // required .ConfigActivity.StarStoneChange starstone = 22;
  if (has_starstone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->starstone(), target);
  }

  // required .ConfigActivity.HongBao newyearactive = 23;
  if (has_newyearactive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->newyearactive(), target);
  }

  // repeated .ConfigActivity.TaskGift HebdomadReward = 24;
  for (int i = 0; i < this->hebdomadreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->hebdomadreward(i), target);
  }

  // required .ConfigActivity.RotaryTableCrazyReward rotary_table = 25;
  if (has_rotary_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->rotary_table(), target);
  }

  // required .ConfigActivity.BatmanTreasureCfg batmantreasure = 26;
  if (has_batmantreasure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->batmantreasure(), target);
  }

  // required .ConfigActivity.SummerChargeRewardCfg summer_charge = 27;
  if (has_summer_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->summer_charge(), target);
  }

  // required .ConfigActivity.SummerHolidaysRewardCfg summer_holidays = 28;
  if (has_summer_holidays()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->summer_holidays(), target);
  }

  // required .ConfigActivity.ChinaDayActivity chinadayavtivity = 29;
  if (has_chinadayavtivity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->chinadayavtivity(), target);
  }

  // required .ConfigActivity.PayOptionalActivity payoptionalactivity = 30;
  if (has_payoptionalactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->payoptionalactivity(), target);
  }

  // repeated .ConfigActivity.FreeExchange free_exchg = 31;
  for (int i = 0; i < this->free_exchg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->free_exchg(i), target);
  }

  // required .ConfigActivity.RotaryTableFeedBackReward zhuanpanhuikui = 32;
  if (has_zhuanpanhuikui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->zhuanpanhuikui(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigActivity.Activities)
  return target;
}

int Activities::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ConfigActivity.BlessPoint blesspoint = 2;
    if (has_blesspoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blesspoint());
    }

    // required .ConfigActivity.DoubleWelfare double_welfare = 3;
    if (has_double_welfare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->double_welfare());
    }

    // required .ConfigActivity.ForgeSmelt forge = 7;
    if (has_forge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forge());
    }

    // required .ConfigActivity.HeroDial herodial = 8;
    if (has_herodial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herodial());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // required .ConfigActivity.FortunePacks fortune_packs = 11;
    if (has_fortune_packs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fortune_packs());
    }

    // required .ConfigActivity.KeyLuxuryGift keyluxurygift = 16;
    if (has_keyluxurygift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keyluxurygift());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .ConfigActivity.EnjoySmallGiftReward enjoy_smallgift = 17;
    if (has_enjoy_smallgift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enjoy_smallgift());
    }

    // required .ConfigActivity.LuckyGift lucky_gift = 18;
    if (has_lucky_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lucky_gift());
    }

    // required .ConfigActivity.NewYearActivity newyearactivity = 20;
    if (has_newyearactivity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newyearactivity());
    }

    // required .ConfigActivity.KaiFuGift kaifu = 21;
    if (has_kaifu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kaifu());
    }

    // required .ConfigActivity.StarStoneChange starstone = 22;
    if (has_starstone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starstone());
    }

    // required .ConfigActivity.HongBao newyearactive = 23;
    if (has_newyearactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newyearactive());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required .ConfigActivity.RotaryTableCrazyReward rotary_table = 25;
    if (has_rotary_table()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotary_table());
    }

    // required .ConfigActivity.BatmanTreasureCfg batmantreasure = 26;
    if (has_batmantreasure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batmantreasure());
    }

    // required .ConfigActivity.SummerChargeRewardCfg summer_charge = 27;
    if (has_summer_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summer_charge());
    }

    // required .ConfigActivity.SummerHolidaysRewardCfg summer_holidays = 28;
    if (has_summer_holidays()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summer_holidays());
    }

    // required .ConfigActivity.ChinaDayActivity chinadayavtivity = 29;
    if (has_chinadayavtivity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chinadayavtivity());
    }

    // required .ConfigActivity.PayOptionalActivity payoptionalactivity = 30;
    if (has_payoptionalactivity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payoptionalactivity());
    }

    // required .ConfigActivity.RotaryTableFeedBackReward zhuanpanhuikui = 32;
    if (has_zhuanpanhuikui()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zhuanpanhuikui());
    }

  }
  // repeated .ConfigActivity.BuildSuitItem buildsuit = 1;
  total_size += 1 * this->buildsuit_size();
  for (int i = 0; i < this->buildsuit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buildsuit(i));
  }

  // repeated .ConfigActivity.PearlAdvance pearl_advance = 4;
  total_size += 1 * this->pearl_advance_size();
  for (int i = 0; i < this->pearl_advance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pearl_advance(i));
  }

  // repeated .ConfigActivity.UniqueKnowledgeDial unique_knowledge_dial = 5;
  total_size += 1 * this->unique_knowledge_dial_size();
  for (int i = 0; i < this->unique_knowledge_dial_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unique_knowledge_dial(i));
  }

  // repeated .ConfigActivity.SpriteVitalityItem spiritvitality = 6;
  total_size += 1 * this->spiritvitality_size();
  for (int i = 0; i < this->spiritvitality_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spiritvitality(i));
  }

  // repeated .ConfigActivity.KingdomWar kingdomwar = 9;
  total_size += 1 * this->kingdomwar_size();
  for (int i = 0; i < this->kingdomwar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kingdomwar(i));
  }

  // repeated .ConfigActivity.OneDiamondWelfare onediamondwelfare = 10;
  total_size += 1 * this->onediamondwelfare_size();
  for (int i = 0; i < this->onediamondwelfare_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->onediamondwelfare(i));
  }

  // repeated .ConfigActivity.SevenDayPacks sevenday_packs = 12;
  total_size += 1 * this->sevenday_packs_size();
  for (int i = 0; i < this->sevenday_packs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sevenday_packs(i));
  }

  // repeated .ConfigActivity.DiamondReward icephoenix = 13;
  total_size += 1 * this->icephoenix_size();
  for (int i = 0; i < this->icephoenix_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->icephoenix(i));
  }

  // repeated .ConfigActivity.DiamondReward autumn_feedback = 14;
  total_size += 1 * this->autumn_feedback_size();
  for (int i = 0; i < this->autumn_feedback_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->autumn_feedback(i));
  }

  // repeated .ConfigActivity.DiamondReward protectflag = 15;
  total_size += 1 * this->protectflag_size();
  for (int i = 0; i < this->protectflag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->protectflag(i));
  }

  // repeated .ConfigActivity.DiamondReward year_endgift = 19;
  total_size += 2 * this->year_endgift_size();
  for (int i = 0; i < this->year_endgift_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->year_endgift(i));
  }

  // repeated .ConfigActivity.TaskGift HebdomadReward = 24;
  total_size += 2 * this->hebdomadreward_size();
  for (int i = 0; i < this->hebdomadreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hebdomadreward(i));
  }

  // repeated .ConfigActivity.FreeExchange free_exchg = 31;
  total_size += 2 * this->free_exchg_size();
  for (int i = 0; i < this->free_exchg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->free_exchg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activities::MergeFrom(const Activities& from) {
  GOOGLE_CHECK_NE(&from, this);
  buildsuit_.MergeFrom(from.buildsuit_);
  pearl_advance_.MergeFrom(from.pearl_advance_);
  unique_knowledge_dial_.MergeFrom(from.unique_knowledge_dial_);
  spiritvitality_.MergeFrom(from.spiritvitality_);
  kingdomwar_.MergeFrom(from.kingdomwar_);
  onediamondwelfare_.MergeFrom(from.onediamondwelfare_);
  sevenday_packs_.MergeFrom(from.sevenday_packs_);
  icephoenix_.MergeFrom(from.icephoenix_);
  autumn_feedback_.MergeFrom(from.autumn_feedback_);
  protectflag_.MergeFrom(from.protectflag_);
  year_endgift_.MergeFrom(from.year_endgift_);
  hebdomadreward_.MergeFrom(from.hebdomadreward_);
  free_exchg_.MergeFrom(from.free_exchg_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_blesspoint()) {
      mutable_blesspoint()->::ConfigActivity::BlessPoint::MergeFrom(from.blesspoint());
    }
    if (from.has_double_welfare()) {
      mutable_double_welfare()->::ConfigActivity::DoubleWelfare::MergeFrom(from.double_welfare());
    }
    if (from.has_forge()) {
      mutable_forge()->::ConfigActivity::ForgeSmelt::MergeFrom(from.forge());
    }
    if (from.has_herodial()) {
      mutable_herodial()->::ConfigActivity::HeroDial::MergeFrom(from.herodial());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_fortune_packs()) {
      mutable_fortune_packs()->::ConfigActivity::FortunePacks::MergeFrom(from.fortune_packs());
    }
    if (from.has_keyluxurygift()) {
      mutable_keyluxurygift()->::ConfigActivity::KeyLuxuryGift::MergeFrom(from.keyluxurygift());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_enjoy_smallgift()) {
      mutable_enjoy_smallgift()->::ConfigActivity::EnjoySmallGiftReward::MergeFrom(from.enjoy_smallgift());
    }
    if (from.has_lucky_gift()) {
      mutable_lucky_gift()->::ConfigActivity::LuckyGift::MergeFrom(from.lucky_gift());
    }
    if (from.has_newyearactivity()) {
      mutable_newyearactivity()->::ConfigActivity::NewYearActivity::MergeFrom(from.newyearactivity());
    }
    if (from.has_kaifu()) {
      mutable_kaifu()->::ConfigActivity::KaiFuGift::MergeFrom(from.kaifu());
    }
    if (from.has_starstone()) {
      mutable_starstone()->::ConfigActivity::StarStoneChange::MergeFrom(from.starstone());
    }
    if (from.has_newyearactive()) {
      mutable_newyearactive()->::ConfigActivity::HongBao::MergeFrom(from.newyearactive());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_rotary_table()) {
      mutable_rotary_table()->::ConfigActivity::RotaryTableCrazyReward::MergeFrom(from.rotary_table());
    }
    if (from.has_batmantreasure()) {
      mutable_batmantreasure()->::ConfigActivity::BatmanTreasureCfg::MergeFrom(from.batmantreasure());
    }
    if (from.has_summer_charge()) {
      mutable_summer_charge()->::ConfigActivity::SummerChargeRewardCfg::MergeFrom(from.summer_charge());
    }
    if (from.has_summer_holidays()) {
      mutable_summer_holidays()->::ConfigActivity::SummerHolidaysRewardCfg::MergeFrom(from.summer_holidays());
    }
    if (from.has_chinadayavtivity()) {
      mutable_chinadayavtivity()->::ConfigActivity::ChinaDayActivity::MergeFrom(from.chinadayavtivity());
    }
    if (from.has_payoptionalactivity()) {
      mutable_payoptionalactivity()->::ConfigActivity::PayOptionalActivity::MergeFrom(from.payoptionalactivity());
    }
    if (from.has_zhuanpanhuikui()) {
      mutable_zhuanpanhuikui()->::ConfigActivity::RotaryTableFeedBackReward::MergeFrom(from.zhuanpanhuikui());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activities::CopyFrom(const Activities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activities::IsInitialized() const {
  if ((_has_bits_[0] & 0xbf7b84c6) != 0xbf7b84c6) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->buildsuit())) return false;
  if (has_blesspoint()) {
    if (!this->blesspoint().IsInitialized()) return false;
  }
  if (has_double_welfare()) {
    if (!this->double_welfare().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->pearl_advance())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unique_knowledge_dial())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->spiritvitality())) return false;
  if (has_forge()) {
    if (!this->forge().IsInitialized()) return false;
  }
  if (has_herodial()) {
    if (!this->herodial().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->kingdomwar())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->onediamondwelfare())) return false;
  if (has_fortune_packs()) {
    if (!this->fortune_packs().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sevenday_packs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->icephoenix())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->autumn_feedback())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->protectflag())) return false;
  if (has_keyluxurygift()) {
    if (!this->keyluxurygift().IsInitialized()) return false;
  }
  if (has_enjoy_smallgift()) {
    if (!this->enjoy_smallgift().IsInitialized()) return false;
  }
  if (has_lucky_gift()) {
    if (!this->lucky_gift().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->year_endgift())) return false;
  if (has_newyearactivity()) {
    if (!this->newyearactivity().IsInitialized()) return false;
  }
  if (has_kaifu()) {
    if (!this->kaifu().IsInitialized()) return false;
  }
  if (has_starstone()) {
    if (!this->starstone().IsInitialized()) return false;
  }
  if (has_newyearactive()) {
    if (!this->newyearactive().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->hebdomadreward())) return false;
  if (has_rotary_table()) {
    if (!this->rotary_table().IsInitialized()) return false;
  }
  if (has_batmantreasure()) {
    if (!this->batmantreasure().IsInitialized()) return false;
  }
  if (has_summer_charge()) {
    if (!this->summer_charge().IsInitialized()) return false;
  }
  if (has_summer_holidays()) {
    if (!this->summer_holidays().IsInitialized()) return false;
  }
  if (has_chinadayavtivity()) {
    if (!this->chinadayavtivity().IsInitialized()) return false;
  }
  if (has_payoptionalactivity()) {
    if (!this->payoptionalactivity().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->free_exchg())) return false;
  if (has_zhuanpanhuikui()) {
    if (!this->zhuanpanhuikui().IsInitialized()) return false;
  }
  return true;
}

void Activities::Swap(Activities* other) {
  if (other != this) {
    buildsuit_.Swap(&other->buildsuit_);
    std::swap(blesspoint_, other->blesspoint_);
    std::swap(double_welfare_, other->double_welfare_);
    pearl_advance_.Swap(&other->pearl_advance_);
    unique_knowledge_dial_.Swap(&other->unique_knowledge_dial_);
    spiritvitality_.Swap(&other->spiritvitality_);
    std::swap(forge_, other->forge_);
    std::swap(herodial_, other->herodial_);
    kingdomwar_.Swap(&other->kingdomwar_);
    onediamondwelfare_.Swap(&other->onediamondwelfare_);
    std::swap(fortune_packs_, other->fortune_packs_);
    sevenday_packs_.Swap(&other->sevenday_packs_);
    icephoenix_.Swap(&other->icephoenix_);
    autumn_feedback_.Swap(&other->autumn_feedback_);
    protectflag_.Swap(&other->protectflag_);
    std::swap(keyluxurygift_, other->keyluxurygift_);
    std::swap(enjoy_smallgift_, other->enjoy_smallgift_);
    std::swap(lucky_gift_, other->lucky_gift_);
    year_endgift_.Swap(&other->year_endgift_);
    std::swap(newyearactivity_, other->newyearactivity_);
    std::swap(kaifu_, other->kaifu_);
    std::swap(starstone_, other->starstone_);
    std::swap(newyearactive_, other->newyearactive_);
    hebdomadreward_.Swap(&other->hebdomadreward_);
    std::swap(rotary_table_, other->rotary_table_);
    std::swap(batmantreasure_, other->batmantreasure_);
    std::swap(summer_charge_, other->summer_charge_);
    std::swap(summer_holidays_, other->summer_holidays_);
    std::swap(chinadayavtivity_, other->chinadayavtivity_);
    std::swap(payoptionalactivity_, other->payoptionalactivity_);
    free_exchg_.Swap(&other->free_exchg_);
    std::swap(zhuanpanhuikui_, other->zhuanpanhuikui_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activities_descriptor_;
  metadata.reflection = Activities_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigActivity

// @@protoc_insertion_point(global_scope)
