// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityQunXing.proto

#ifndef PROTOBUF_ActivityQunXing_2eproto__INCLUDED
#define PROTOBUF_ActivityQunXing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ActivityQunXing {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ActivityQunXing_2eproto();
void protobuf_AssignDesc_ActivityQunXing_2eproto();
void protobuf_ShutdownFile_ActivityQunXing_2eproto();

class User;
class Guest;
class Table;
class QunXing;

// ===================================================================

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  User* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // repeated uint32 heros = 2;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 2;
  inline ::google::protobuf::uint32 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint32 value);
  inline void add_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:ActivityQunXing.User)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heros_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_ActivityQunXing_2eproto();
  friend void protobuf_AssignDesc_ActivityQunXing_2eproto();
  friend void protobuf_ShutdownFile_ActivityQunXing_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class Guest : public ::google::protobuf::Message {
 public:
  Guest();
  virtual ~Guest();

  Guest(const Guest& from);

  inline Guest& operator=(const Guest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Guest& default_instance();

  void Swap(Guest* other);

  // implements Message ----------------------------------------------

  Guest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Guest& from);
  void MergeFrom(const Guest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // required uint32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 power() const;
  inline void set_power(::google::protobuf::uint32 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string smid = 5;
  inline bool has_smid() const;
  inline void clear_smid();
  static const int kSmidFieldNumber = 5;
  inline const ::std::string& smid() const;
  inline void set_smid(const ::std::string& value);
  inline void set_smid(const char* value);
  inline void set_smid(const char* value, size_t size);
  inline ::std::string* mutable_smid();
  inline ::std::string* release_smid();
  inline void set_allocated_smid(::std::string* smid);

  // required string hname = 6;
  inline bool has_hname() const;
  inline void clear_hname();
  static const int kHnameFieldNumber = 6;
  inline const ::std::string& hname() const;
  inline void set_hname(const ::std::string& value);
  inline void set_hname(const char* value);
  inline void set_hname(const char* value, size_t size);
  inline ::std::string* mutable_hname();
  inline ::std::string* release_hname();
  inline void set_allocated_hname(::std::string* hname);

  // @@protoc_insertion_point(class_scope:ActivityQunXing.Guest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_smid();
  inline void clear_has_smid();
  inline void set_has_hname();
  inline void clear_has_hname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 hid_;
  ::std::string* name_;
  ::std::string* smid_;
  ::std::string* hname_;
  ::google::protobuf::uint32 power_;
  friend void  protobuf_AddDesc_ActivityQunXing_2eproto();
  friend void protobuf_AssignDesc_ActivityQunXing_2eproto();
  friend void protobuf_ShutdownFile_ActivityQunXing_2eproto();

  void InitAsDefaultInstance();
  static Guest* default_instance_;
};
// -------------------------------------------------------------------

class Table : public ::google::protobuf::Message {
 public:
  Table();
  virtual ~Table();

  Table(const Table& from);

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Table& default_instance();

  void Swap(Table* other);

  // implements Message ----------------------------------------------

  Table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Table& from);
  void MergeFrom(const Table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 point = 4;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 4;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .ActivityQunXing.Guest guests = 6;
  inline int guests_size() const;
  inline void clear_guests();
  static const int kGuestsFieldNumber = 6;
  inline const ::ActivityQunXing::Guest& guests(int index) const;
  inline ::ActivityQunXing::Guest* mutable_guests(int index);
  inline ::ActivityQunXing::Guest* add_guests();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Guest >&
      guests() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Guest >*
      mutable_guests();

  // @@protoc_insertion_point(class_scope:ActivityQunXing.Table)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 point_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Guest > guests_;
  friend void  protobuf_AddDesc_ActivityQunXing_2eproto();
  friend void protobuf_AssignDesc_ActivityQunXing_2eproto();
  friend void protobuf_ShutdownFile_ActivityQunXing_2eproto();

  void InitAsDefaultInstance();
  static Table* default_instance_;
};
// -------------------------------------------------------------------

class QunXing : public ::google::protobuf::Message {
 public:
  QunXing();
  virtual ~QunXing();

  QunXing(const QunXing& from);

  inline QunXing& operator=(const QunXing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QunXing& default_instance();

  void Swap(QunXing* other);

  // implements Message ----------------------------------------------

  QunXing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QunXing& from);
  void MergeFrom(const QunXing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ver = 1;
  inline bool has_ver() const;
  inline void clear_ver();
  static const int kVerFieldNumber = 1;
  inline ::google::protobuf::uint32 ver() const;
  inline void set_ver(::google::protobuf::uint32 value);

  // required uint32 ts = 2;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 2;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // repeated .ActivityQunXing.Table tables = 3;
  inline int tables_size() const;
  inline void clear_tables();
  static const int kTablesFieldNumber = 3;
  inline const ::ActivityQunXing::Table& tables(int index) const;
  inline ::ActivityQunXing::Table* mutable_tables(int index);
  inline ::ActivityQunXing::Table* add_tables();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Table >&
      tables() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Table >*
      mutable_tables();

  // repeated .ActivityQunXing.User users = 4;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 4;
  inline const ::ActivityQunXing::User& users(int index) const;
  inline ::ActivityQunXing::User* mutable_users(int index);
  inline ::ActivityQunXing::User* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::User >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::User >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:ActivityQunXing.QunXing)
 private:
  inline void set_has_ver();
  inline void clear_has_ver();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ver_;
  ::google::protobuf::uint32 ts_;
  ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Table > tables_;
  ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::User > users_;
  friend void  protobuf_AddDesc_ActivityQunXing_2eproto();
  friend void protobuf_AssignDesc_ActivityQunXing_2eproto();
  friend void protobuf_ShutdownFile_ActivityQunXing_2eproto();

  void InitAsDefaultInstance();
  static QunXing* default_instance_;
};
// ===================================================================


// ===================================================================

// User

// required uint32 uid = 1;
inline bool User::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 User::uid() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.User.uid)
  return uid_;
}
inline void User::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.User.uid)
}

// repeated uint32 heros = 2;
inline int User::heros_size() const {
  return heros_.size();
}
inline void User::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint32 User::heros(int index) const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.User.heros)
  return heros_.Get(index);
}
inline void User::set_heros(int index, ::google::protobuf::uint32 value) {
  heros_.Set(index, value);
  // @@protoc_insertion_point(field_set:ActivityQunXing.User.heros)
}
inline void User::add_heros(::google::protobuf::uint32 value) {
  heros_.Add(value);
  // @@protoc_insertion_point(field_add:ActivityQunXing.User.heros)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
User::heros() const {
  // @@protoc_insertion_point(field_list:ActivityQunXing.User.heros)
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
User::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:ActivityQunXing.User.heros)
  return &heros_;
}

// -------------------------------------------------------------------

// Guest

// required uint32 uid = 1;
inline bool Guest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Guest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Guest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Guest::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Guest::uid() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Guest.uid)
  return uid_;
}
inline void Guest::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.Guest.uid)
}

// required uint32 hid = 2;
inline bool Guest::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Guest::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Guest::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Guest::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 Guest::hid() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Guest.hid)
  return hid_;
}
inline void Guest::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.Guest.hid)
}

// required uint32 power = 3;
inline bool Guest::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Guest::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Guest::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Guest::clear_power() {
  power_ = 0u;
  clear_has_power();
}
inline ::google::protobuf::uint32 Guest::power() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Guest.power)
  return power_;
}
inline void Guest::set_power(::google::protobuf::uint32 value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.Guest.power)
}

// required string name = 4;
inline bool Guest::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Guest::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Guest::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Guest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Guest::name() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Guest.name)
  return *name_;
}
inline void Guest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ActivityQunXing.Guest.name)
}
inline void Guest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ActivityQunXing.Guest.name)
}
inline void Guest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ActivityQunXing.Guest.name)
}
inline ::std::string* Guest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ActivityQunXing.Guest.name)
  return name_;
}
inline ::std::string* Guest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Guest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityQunXing.Guest.name)
}

// required string smid = 5;
inline bool Guest::has_smid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Guest::set_has_smid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Guest::clear_has_smid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Guest::clear_smid() {
  if (smid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smid_->clear();
  }
  clear_has_smid();
}
inline const ::std::string& Guest::smid() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Guest.smid)
  return *smid_;
}
inline void Guest::set_smid(const ::std::string& value) {
  set_has_smid();
  if (smid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smid_ = new ::std::string;
  }
  smid_->assign(value);
  // @@protoc_insertion_point(field_set:ActivityQunXing.Guest.smid)
}
inline void Guest::set_smid(const char* value) {
  set_has_smid();
  if (smid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smid_ = new ::std::string;
  }
  smid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ActivityQunXing.Guest.smid)
}
inline void Guest::set_smid(const char* value, size_t size) {
  set_has_smid();
  if (smid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smid_ = new ::std::string;
  }
  smid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ActivityQunXing.Guest.smid)
}
inline ::std::string* Guest::mutable_smid() {
  set_has_smid();
  if (smid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    smid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ActivityQunXing.Guest.smid)
  return smid_;
}
inline ::std::string* Guest::release_smid() {
  clear_has_smid();
  if (smid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = smid_;
    smid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Guest::set_allocated_smid(::std::string* smid) {
  if (smid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete smid_;
  }
  if (smid) {
    set_has_smid();
    smid_ = smid;
  } else {
    clear_has_smid();
    smid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityQunXing.Guest.smid)
}

// required string hname = 6;
inline bool Guest::has_hname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Guest::set_has_hname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Guest::clear_has_hname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Guest::clear_hname() {
  if (hname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hname_->clear();
  }
  clear_has_hname();
}
inline const ::std::string& Guest::hname() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Guest.hname)
  return *hname_;
}
inline void Guest::set_hname(const ::std::string& value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
  // @@protoc_insertion_point(field_set:ActivityQunXing.Guest.hname)
}
inline void Guest::set_hname(const char* value) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hname_ = new ::std::string;
  }
  hname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ActivityQunXing.Guest.hname)
}
inline void Guest::set_hname(const char* value, size_t size) {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hname_ = new ::std::string;
  }
  hname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ActivityQunXing.Guest.hname)
}
inline ::std::string* Guest::mutable_hname() {
  set_has_hname();
  if (hname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ActivityQunXing.Guest.hname)
  return hname_;
}
inline ::std::string* Guest::release_hname() {
  clear_has_hname();
  if (hname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hname_;
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Guest::set_allocated_hname(::std::string* hname) {
  if (hname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hname_;
  }
  if (hname) {
    set_has_hname();
    hname_ = hname;
  } else {
    clear_has_hname();
    hname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityQunXing.Guest.hname)
}

// -------------------------------------------------------------------

// Table

// required uint32 id = 1;
inline bool Table::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Table::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Table::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Table::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Table::id() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Table.id)
  return id_;
}
inline void Table::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.Table.id)
}

// required uint32 type = 2;
inline bool Table::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Table::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Table::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Table::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Table::type() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Table.type)
  return type_;
}
inline void Table::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.Table.type)
}

// required uint32 uid = 3;
inline bool Table::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Table::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Table::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Table::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Table::uid() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Table.uid)
  return uid_;
}
inline void Table::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.Table.uid)
}

// required uint32 point = 4;
inline bool Table::has_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Table::set_has_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Table::clear_has_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Table::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 Table::point() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Table.point)
  return point_;
}
inline void Table::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.Table.point)
}

// required string name = 5;
inline bool Table::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Table::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Table::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Table::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Table::name() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Table.name)
  return *name_;
}
inline void Table::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ActivityQunXing.Table.name)
}
inline void Table::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ActivityQunXing.Table.name)
}
inline void Table::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ActivityQunXing.Table.name)
}
inline ::std::string* Table::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ActivityQunXing.Table.name)
  return name_;
}
inline ::std::string* Table::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Table::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ActivityQunXing.Table.name)
}

// repeated .ActivityQunXing.Guest guests = 6;
inline int Table::guests_size() const {
  return guests_.size();
}
inline void Table::clear_guests() {
  guests_.Clear();
}
inline const ::ActivityQunXing::Guest& Table::guests(int index) const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.Table.guests)
  return guests_.Get(index);
}
inline ::ActivityQunXing::Guest* Table::mutable_guests(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityQunXing.Table.guests)
  return guests_.Mutable(index);
}
inline ::ActivityQunXing::Guest* Table::add_guests() {
  // @@protoc_insertion_point(field_add:ActivityQunXing.Table.guests)
  return guests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Guest >&
Table::guests() const {
  // @@protoc_insertion_point(field_list:ActivityQunXing.Table.guests)
  return guests_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Guest >*
Table::mutable_guests() {
  // @@protoc_insertion_point(field_mutable_list:ActivityQunXing.Table.guests)
  return &guests_;
}

// -------------------------------------------------------------------

// QunXing

// required uint32 ver = 1;
inline bool QunXing::has_ver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QunXing::set_has_ver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QunXing::clear_has_ver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QunXing::clear_ver() {
  ver_ = 0u;
  clear_has_ver();
}
inline ::google::protobuf::uint32 QunXing::ver() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.QunXing.ver)
  return ver_;
}
inline void QunXing::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.QunXing.ver)
}

// required uint32 ts = 2;
inline bool QunXing::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QunXing::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QunXing::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QunXing::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 QunXing::ts() const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.QunXing.ts)
  return ts_;
}
inline void QunXing::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ActivityQunXing.QunXing.ts)
}

// repeated .ActivityQunXing.Table tables = 3;
inline int QunXing::tables_size() const {
  return tables_.size();
}
inline void QunXing::clear_tables() {
  tables_.Clear();
}
inline const ::ActivityQunXing::Table& QunXing::tables(int index) const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.QunXing.tables)
  return tables_.Get(index);
}
inline ::ActivityQunXing::Table* QunXing::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityQunXing.QunXing.tables)
  return tables_.Mutable(index);
}
inline ::ActivityQunXing::Table* QunXing::add_tables() {
  // @@protoc_insertion_point(field_add:ActivityQunXing.QunXing.tables)
  return tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Table >&
QunXing::tables() const {
  // @@protoc_insertion_point(field_list:ActivityQunXing.QunXing.tables)
  return tables_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::Table >*
QunXing::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:ActivityQunXing.QunXing.tables)
  return &tables_;
}

// repeated .ActivityQunXing.User users = 4;
inline int QunXing::users_size() const {
  return users_.size();
}
inline void QunXing::clear_users() {
  users_.Clear();
}
inline const ::ActivityQunXing::User& QunXing::users(int index) const {
  // @@protoc_insertion_point(field_get:ActivityQunXing.QunXing.users)
  return users_.Get(index);
}
inline ::ActivityQunXing::User* QunXing::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:ActivityQunXing.QunXing.users)
  return users_.Mutable(index);
}
inline ::ActivityQunXing::User* QunXing::add_users() {
  // @@protoc_insertion_point(field_add:ActivityQunXing.QunXing.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::User >&
QunXing::users() const {
  // @@protoc_insertion_point(field_list:ActivityQunXing.QunXing.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivityQunXing::User >*
QunXing::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:ActivityQunXing.QunXing.users)
  return &users_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActivityQunXing

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ActivityQunXing_2eproto__INCLUDED
