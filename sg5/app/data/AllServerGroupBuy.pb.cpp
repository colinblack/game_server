// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllServerGroupBuy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AllServerGroupBuy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AllServerGroupBuy {

namespace {

const ::google::protobuf::Descriptor* GroupBuyingUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupBuyingUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupBuyingItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupBuyingItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupBuing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupBuing_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AllServerGroupBuy_2eproto() {
  protobuf_AddDesc_AllServerGroupBuy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AllServerGroupBuy.proto");
  GOOGLE_CHECK(file != NULL);
  GroupBuyingUser_descriptor_ = file->message_type(0);
  static const int GroupBuyingUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuyingUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuyingUser, join_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuyingUser, back_stage_),
  };
  GroupBuyingUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupBuyingUser_descriptor_,
      GroupBuyingUser::default_instance_,
      GroupBuyingUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuyingUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuyingUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupBuyingUser));
  GroupBuyingItem_descriptor_ = file->message_type(1);
  static const int GroupBuyingItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuyingItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuyingItem, customers_),
  };
  GroupBuyingItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupBuyingItem_descriptor_,
      GroupBuyingItem::default_instance_,
      GroupBuyingItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuyingItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuyingItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupBuyingItem));
  GroupBuing_descriptor_ = file->message_type(2);
  static const int GroupBuing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuing, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuing, items_),
  };
  GroupBuing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupBuing_descriptor_,
      GroupBuing::default_instance_,
      GroupBuing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBuing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupBuing));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AllServerGroupBuy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupBuyingUser_descriptor_, &GroupBuyingUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupBuyingItem_descriptor_, &GroupBuyingItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupBuing_descriptor_, &GroupBuing::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AllServerGroupBuy_2eproto() {
  delete GroupBuyingUser::default_instance_;
  delete GroupBuyingUser_reflection_;
  delete GroupBuyingItem::default_instance_;
  delete GroupBuyingItem_reflection_;
  delete GroupBuing::default_instance_;
  delete GroupBuing_reflection_;
}

void protobuf_AddDesc_AllServerGroupBuy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027AllServerGroupBuy.proto\022\021AllServerGrou"
    "pBuy\"F\n\017GroupBuyingUser\022\013\n\003uid\030\001 \002(\r\022\022\n\n"
    "join_stage\030\002 \002(\r\022\022\n\nback_stage\030\003 \002(\r\"T\n\017"
    "GroupBuyingItem\022\n\n\002id\030\001 \002(\r\0225\n\tcustomers"
    "\030\002 \003(\0132\".AllServerGroupBuy.GroupBuyingUs"
    "er\"P\n\nGroupBuing\022\017\n\007version\030\001 \002(\r\0221\n\005ite"
    "ms\030\002 \003(\0132\".AllServerGroupBuy.GroupBuying"
    "Item", 284);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AllServerGroupBuy.proto", &protobuf_RegisterTypes);
  GroupBuyingUser::default_instance_ = new GroupBuyingUser();
  GroupBuyingItem::default_instance_ = new GroupBuyingItem();
  GroupBuing::default_instance_ = new GroupBuing();
  GroupBuyingUser::default_instance_->InitAsDefaultInstance();
  GroupBuyingItem::default_instance_->InitAsDefaultInstance();
  GroupBuing::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AllServerGroupBuy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AllServerGroupBuy_2eproto {
  StaticDescriptorInitializer_AllServerGroupBuy_2eproto() {
    protobuf_AddDesc_AllServerGroupBuy_2eproto();
  }
} static_descriptor_initializer_AllServerGroupBuy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GroupBuyingUser::kUidFieldNumber;
const int GroupBuyingUser::kJoinStageFieldNumber;
const int GroupBuyingUser::kBackStageFieldNumber;
#endif  // !_MSC_VER

GroupBuyingUser::GroupBuyingUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllServerGroupBuy.GroupBuyingUser)
}

void GroupBuyingUser::InitAsDefaultInstance() {
}

GroupBuyingUser::GroupBuyingUser(const GroupBuyingUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllServerGroupBuy.GroupBuyingUser)
}

void GroupBuyingUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  join_stage_ = 0u;
  back_stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupBuyingUser::~GroupBuyingUser() {
  // @@protoc_insertion_point(destructor:AllServerGroupBuy.GroupBuyingUser)
  SharedDtor();
}

void GroupBuyingUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupBuyingUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupBuyingUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupBuyingUser_descriptor_;
}

const GroupBuyingUser& GroupBuyingUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllServerGroupBuy_2eproto();
  return *default_instance_;
}

GroupBuyingUser* GroupBuyingUser::default_instance_ = NULL;

GroupBuyingUser* GroupBuyingUser::New() const {
  return new GroupBuyingUser;
}

void GroupBuyingUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupBuyingUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, back_stage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupBuyingUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllServerGroupBuy.GroupBuyingUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_join_stage;
        break;
      }

      // required uint32 join_stage = 2;
      case 2: {
        if (tag == 16) {
         parse_join_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &join_stage_)));
          set_has_join_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_back_stage;
        break;
      }

      // required uint32 back_stage = 3;
      case 3: {
        if (tag == 24) {
         parse_back_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_stage_)));
          set_has_back_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllServerGroupBuy.GroupBuyingUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllServerGroupBuy.GroupBuyingUser)
  return false;
#undef DO_
}

void GroupBuyingUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllServerGroupBuy.GroupBuyingUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 join_stage = 2;
  if (has_join_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->join_stage(), output);
  }

  // required uint32 back_stage = 3;
  if (has_back_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->back_stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllServerGroupBuy.GroupBuyingUser)
}

::google::protobuf::uint8* GroupBuyingUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllServerGroupBuy.GroupBuyingUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 join_stage = 2;
  if (has_join_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->join_stage(), target);
  }

  // required uint32 back_stage = 3;
  if (has_back_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->back_stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllServerGroupBuy.GroupBuyingUser)
  return target;
}

int GroupBuyingUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 join_stage = 2;
    if (has_join_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->join_stage());
    }

    // required uint32 back_stage = 3;
    if (has_back_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back_stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupBuyingUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupBuyingUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupBuyingUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupBuyingUser::MergeFrom(const GroupBuyingUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_join_stage()) {
      set_join_stage(from.join_stage());
    }
    if (from.has_back_stage()) {
      set_back_stage(from.back_stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupBuyingUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBuyingUser::CopyFrom(const GroupBuyingUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBuyingUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GroupBuyingUser::Swap(GroupBuyingUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(join_stage_, other->join_stage_);
    std::swap(back_stage_, other->back_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupBuyingUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupBuyingUser_descriptor_;
  metadata.reflection = GroupBuyingUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupBuyingItem::kIdFieldNumber;
const int GroupBuyingItem::kCustomersFieldNumber;
#endif  // !_MSC_VER

GroupBuyingItem::GroupBuyingItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllServerGroupBuy.GroupBuyingItem)
}

void GroupBuyingItem::InitAsDefaultInstance() {
}

GroupBuyingItem::GroupBuyingItem(const GroupBuyingItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllServerGroupBuy.GroupBuyingItem)
}

void GroupBuyingItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupBuyingItem::~GroupBuyingItem() {
  // @@protoc_insertion_point(destructor:AllServerGroupBuy.GroupBuyingItem)
  SharedDtor();
}

void GroupBuyingItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupBuyingItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupBuyingItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupBuyingItem_descriptor_;
}

const GroupBuyingItem& GroupBuyingItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllServerGroupBuy_2eproto();
  return *default_instance_;
}

GroupBuyingItem* GroupBuyingItem::default_instance_ = NULL;

GroupBuyingItem* GroupBuyingItem::New() const {
  return new GroupBuyingItem;
}

void GroupBuyingItem::Clear() {
  id_ = 0u;
  customers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupBuyingItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllServerGroupBuy.GroupBuyingItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_customers;
        break;
      }

      // repeated .AllServerGroupBuy.GroupBuyingUser customers = 2;
      case 2: {
        if (tag == 18) {
         parse_customers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_customers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_customers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllServerGroupBuy.GroupBuyingItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllServerGroupBuy.GroupBuyingItem)
  return false;
#undef DO_
}

void GroupBuyingItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllServerGroupBuy.GroupBuyingItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .AllServerGroupBuy.GroupBuyingUser customers = 2;
  for (int i = 0; i < this->customers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->customers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllServerGroupBuy.GroupBuyingItem)
}

::google::protobuf::uint8* GroupBuyingItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllServerGroupBuy.GroupBuyingItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .AllServerGroupBuy.GroupBuyingUser customers = 2;
  for (int i = 0; i < this->customers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->customers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllServerGroupBuy.GroupBuyingItem)
  return target;
}

int GroupBuyingItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .AllServerGroupBuy.GroupBuyingUser customers = 2;
  total_size += 1 * this->customers_size();
  for (int i = 0; i < this->customers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->customers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupBuyingItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupBuyingItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupBuyingItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupBuyingItem::MergeFrom(const GroupBuyingItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  customers_.MergeFrom(from.customers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupBuyingItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBuyingItem::CopyFrom(const GroupBuyingItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBuyingItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->customers())) return false;
  return true;
}

void GroupBuyingItem::Swap(GroupBuyingItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    customers_.Swap(&other->customers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupBuyingItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupBuyingItem_descriptor_;
  metadata.reflection = GroupBuyingItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupBuing::kVersionFieldNumber;
const int GroupBuing::kItemsFieldNumber;
#endif  // !_MSC_VER

GroupBuing::GroupBuing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllServerGroupBuy.GroupBuing)
}

void GroupBuing::InitAsDefaultInstance() {
}

GroupBuing::GroupBuing(const GroupBuing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllServerGroupBuy.GroupBuing)
}

void GroupBuing::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupBuing::~GroupBuing() {
  // @@protoc_insertion_point(destructor:AllServerGroupBuy.GroupBuing)
  SharedDtor();
}

void GroupBuing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupBuing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupBuing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupBuing_descriptor_;
}

const GroupBuing& GroupBuing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllServerGroupBuy_2eproto();
  return *default_instance_;
}

GroupBuing* GroupBuing::default_instance_ = NULL;

GroupBuing* GroupBuing::New() const {
  return new GroupBuing;
}

void GroupBuing::Clear() {
  version_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupBuing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllServerGroupBuy.GroupBuing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .AllServerGroupBuy.GroupBuyingItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllServerGroupBuy.GroupBuing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllServerGroupBuy.GroupBuing)
  return false;
#undef DO_
}

void GroupBuing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllServerGroupBuy.GroupBuing)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .AllServerGroupBuy.GroupBuyingItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllServerGroupBuy.GroupBuing)
}

::google::protobuf::uint8* GroupBuing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllServerGroupBuy.GroupBuing)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .AllServerGroupBuy.GroupBuyingItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllServerGroupBuy.GroupBuing)
  return target;
}

int GroupBuing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .AllServerGroupBuy.GroupBuyingItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupBuing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupBuing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupBuing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupBuing::MergeFrom(const GroupBuing& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupBuing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBuing::CopyFrom(const GroupBuing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBuing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void GroupBuing::Swap(GroupBuing* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupBuing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupBuing_descriptor_;
  metadata.reflection = GroupBuing_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AllServerGroupBuy

// @@protoc_insertion_point(global_scope)
