// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllServerLords.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AllServerLords.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AllServerLords {

namespace {

const ::google::protobuf::Descriptor* Lord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lord_reflection_ = NULL;
const ::google::protobuf::Descriptor* LordItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LordItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* LordRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LordRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* LordRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LordRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* LordContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LordContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* LordAllZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LordAllZone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AllServerLords_2eproto() {
  protobuf_AddDesc_AllServerLords_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AllServerLords.proto");
  GOOGLE_CHECK(file != NULL);
  Lord_descriptor_ = file->message_type(0);
  static const int Lord_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, worship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, setted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, heroname_),
  };
  Lord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lord_descriptor_,
      Lord::default_instance_,
      Lord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lord));
  LordItems_descriptor_ = file->message_type(1);
  static const int LordItems_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordItems, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordItems, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordItems, finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordItems, lord_),
  };
  LordItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LordItems_descriptor_,
      LordItems::default_instance_,
      LordItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LordItems));
  LordRankItem_descriptor_ = file->message_type(2);
  static const int LordRankItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankItem, sumdata_),
  };
  LordRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LordRankItem_descriptor_,
      LordRankItem::default_instance_,
      LordRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LordRankItem));
  LordRankList_descriptor_ = file->message_type(3);
  static const int LordRankList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankList, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankList, list_),
  };
  LordRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LordRankList_descriptor_,
      LordRankList::default_instance_,
      LordRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LordRankList));
  LordContainer_descriptor_ = file->message_type(4);
  static const int LordContainer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordContainer, curid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordContainer, lords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordContainer, ranks_),
  };
  LordContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LordContainer_descriptor_,
      LordContainer::default_instance_,
      LordContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LordContainer));
  LordAllZone_descriptor_ = file->message_type(5);
  static const int LordAllZone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordAllZone, zones_),
  };
  LordAllZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LordAllZone_descriptor_,
      LordAllZone::default_instance_,
      LordAllZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordAllZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LordAllZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LordAllZone));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AllServerLords_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lord_descriptor_, &Lord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LordItems_descriptor_, &LordItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LordRankItem_descriptor_, &LordRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LordRankList_descriptor_, &LordRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LordContainer_descriptor_, &LordContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LordAllZone_descriptor_, &LordAllZone::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AllServerLords_2eproto() {
  delete Lord::default_instance_;
  delete Lord_reflection_;
  delete LordItems::default_instance_;
  delete LordItems_reflection_;
  delete LordRankItem::default_instance_;
  delete LordRankItem_reflection_;
  delete LordRankList::default_instance_;
  delete LordRankList_reflection_;
  delete LordContainer::default_instance_;
  delete LordContainer_reflection_;
  delete LordAllZone::default_instance_;
  delete LordAllZone_reflection_;
}

void protobuf_AddDesc_AllServerLords_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024AllServerLords.proto\022\016AllServerLords\"\203"
    "\001\n\004Lord\022\013\n\003uid\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\022\017\n\007wo"
    "rship\030\003 \002(\r\022\016\n\006setted\030\004 \002(\r\022\016\n\006heroid\030\005 "
    "\002(\t\022\014\n\004name\030\006 \002(\t\022\017\n\007headurl\030\007 \002(\t\022\020\n\010he"
    "roname\030\010 \002(\t\"[\n\tLordItems\022\n\n\002id\030\001 \002(\r\022\014\n"
    "\004time\030\002 \002(\r\022\020\n\010finished\030\003 \002(\r\022\"\n\004lord\030\004 "
    "\003(\0132\024.AllServerLords.Lord\":\n\014LordRankIte"
    "m\022\013\n\003uid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\017\n\007sumdata\030"
    "\003 \002(\004\"V\n\014LordRankList\022\014\n\004type\030\001 \002(\r\022\014\n\004t"
    "ime\030\002 \002(\r\022*\n\004list\030\003 \003(\0132\034.AllServerLords"
    ".LordRankItem\"u\n\rLordContainer\022\r\n\005curid\030"
    "\001 \002(\r\022(\n\005lords\030\002 \003(\0132\031.AllServerLords.Lo"
    "rdItems\022+\n\005ranks\030\003 \003(\0132\034.AllServerLords."
    "LordRankList\";\n\013LordAllZone\022,\n\005zones\030\001 \003"
    "(\0132\035.AllServerLords.LordContainer", 593);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AllServerLords.proto", &protobuf_RegisterTypes);
  Lord::default_instance_ = new Lord();
  LordItems::default_instance_ = new LordItems();
  LordRankItem::default_instance_ = new LordRankItem();
  LordRankList::default_instance_ = new LordRankList();
  LordContainer::default_instance_ = new LordContainer();
  LordAllZone::default_instance_ = new LordAllZone();
  Lord::default_instance_->InitAsDefaultInstance();
  LordItems::default_instance_->InitAsDefaultInstance();
  LordRankItem::default_instance_->InitAsDefaultInstance();
  LordRankList::default_instance_->InitAsDefaultInstance();
  LordContainer::default_instance_->InitAsDefaultInstance();
  LordAllZone::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AllServerLords_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AllServerLords_2eproto {
  StaticDescriptorInitializer_AllServerLords_2eproto() {
    protobuf_AddDesc_AllServerLords_2eproto();
  }
} static_descriptor_initializer_AllServerLords_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Lord::kUidFieldNumber;
const int Lord::kTypeFieldNumber;
const int Lord::kWorshipFieldNumber;
const int Lord::kSettedFieldNumber;
const int Lord::kHeroidFieldNumber;
const int Lord::kNameFieldNumber;
const int Lord::kHeadurlFieldNumber;
const int Lord::kHeronameFieldNumber;
#endif  // !_MSC_VER

Lord::Lord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllServerLords.Lord)
}

void Lord::InitAsDefaultInstance() {
}

Lord::Lord(const Lord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllServerLords.Lord)
}

void Lord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  type_ = 0u;
  worship_ = 0u;
  setted_ = 0u;
  heroid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heroname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lord::~Lord() {
  // @@protoc_insertion_point(destructor:AllServerLords.Lord)
  SharedDtor();
}

void Lord::SharedDtor() {
  if (heroid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heroid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (headurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headurl_;
  }
  if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heroname_;
  }
  if (this != default_instance_) {
  }
}

void Lord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lord_descriptor_;
}

const Lord& Lord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllServerLords_2eproto();
  return *default_instance_;
}

Lord* Lord::default_instance_ = NULL;

Lord* Lord::New() const {
  return new Lord;
}

void Lord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Lord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, setted_);
    if (has_heroid()) {
      if (heroid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        heroid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        headurl_->clear();
      }
    }
    if (has_heroname()) {
      if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        heroname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllServerLords.Lord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_worship;
        break;
      }

      // required uint32 worship = 3;
      case 3: {
        if (tag == 24) {
         parse_worship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worship_)));
          set_has_worship();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_setted;
        break;
      }

      // required uint32 setted = 4;
      case 4: {
        if (tag == 32) {
         parse_setted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &setted_)));
          set_has_setted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_heroid;
        break;
      }

      // required string heroid = 5;
      case 5: {
        if (tag == 42) {
         parse_heroid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heroid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->heroid().data(), this->heroid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "heroid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_headurl;
        break;
      }

      // required string headurl = 7;
      case 7: {
        if (tag == 58) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "headurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_heroname;
        break;
      }

      // required string heroname = 8;
      case 8: {
        if (tag == 66) {
         parse_heroname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heroname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->heroname().data(), this->heroname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "heroname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllServerLords.Lord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllServerLords.Lord)
  return false;
#undef DO_
}

void Lord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllServerLords.Lord)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 worship = 3;
  if (has_worship()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->worship(), output);
  }

  // required uint32 setted = 4;
  if (has_setted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->setted(), output);
  }

  // required string heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heroid().data(), this->heroid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "heroid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->heroid(), output);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // required string headurl = 7;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->headurl(), output);
  }

  // required string heroname = 8;
  if (has_heroname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heroname().data(), this->heroname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "heroname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->heroname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllServerLords.Lord)
}

::google::protobuf::uint8* Lord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllServerLords.Lord)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 worship = 3;
  if (has_worship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->worship(), target);
  }

  // required uint32 setted = 4;
  if (has_setted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->setted(), target);
  }

  // required string heroid = 5;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heroid().data(), this->heroid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "heroid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->heroid(), target);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // required string headurl = 7;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->headurl(), target);
  }

  // required string heroname = 8;
  if (has_heroname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heroname().data(), this->heroname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "heroname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->heroname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllServerLords.Lord)
  return target;
}

int Lord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 worship = 3;
    if (has_worship()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worship());
    }

    // required uint32 setted = 4;
    if (has_setted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->setted());
    }

    // required string heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heroid());
    }

    // required string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string headurl = 7;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }

    // required string heroname = 8;
    if (has_heroname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heroname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lord::MergeFrom(const Lord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_worship()) {
      set_worship(from.worship());
    }
    if (from.has_setted()) {
      set_setted(from.setted());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_heroname()) {
      set_heroname(from.heroname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lord::CopyFrom(const Lord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lord::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Lord::Swap(Lord* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(type_, other->type_);
    std::swap(worship_, other->worship_);
    std::swap(setted_, other->setted_);
    std::swap(heroid_, other->heroid_);
    std::swap(name_, other->name_);
    std::swap(headurl_, other->headurl_);
    std::swap(heroname_, other->heroname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lord_descriptor_;
  metadata.reflection = Lord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LordItems::kIdFieldNumber;
const int LordItems::kTimeFieldNumber;
const int LordItems::kFinishedFieldNumber;
const int LordItems::kLordFieldNumber;
#endif  // !_MSC_VER

LordItems::LordItems()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllServerLords.LordItems)
}

void LordItems::InitAsDefaultInstance() {
}

LordItems::LordItems(const LordItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllServerLords.LordItems)
}

void LordItems::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  finished_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LordItems::~LordItems() {
  // @@protoc_insertion_point(destructor:AllServerLords.LordItems)
  SharedDtor();
}

void LordItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LordItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LordItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LordItems_descriptor_;
}

const LordItems& LordItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllServerLords_2eproto();
  return *default_instance_;
}

LordItems* LordItems::default_instance_ = NULL;

LordItems* LordItems::New() const {
  return new LordItems;
}

void LordItems::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LordItems*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, time_);
    finished_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  lord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LordItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllServerLords.LordItems)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_finished;
        break;
      }

      // required uint32 finished = 3;
      case 3: {
        if (tag == 24) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_)));
          set_has_finished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lord;
        break;
      }

      // repeated .AllServerLords.Lord lord = 4;
      case 4: {
        if (tag == 34) {
         parse_lord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lord;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllServerLords.LordItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllServerLords.LordItems)
  return false;
#undef DO_
}

void LordItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllServerLords.LordItems)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required uint32 finished = 3;
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finished(), output);
  }

  // repeated .AllServerLords.Lord lord = 4;
  for (int i = 0; i < this->lord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lord(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllServerLords.LordItems)
}

::google::protobuf::uint8* LordItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllServerLords.LordItems)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required uint32 finished = 3;
  if (has_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finished(), target);
  }

  // repeated .AllServerLords.Lord lord = 4;
  for (int i = 0; i < this->lord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lord(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllServerLords.LordItems)
  return target;
}

int LordItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 finished = 3;
    if (has_finished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finished());
    }

  }
  // repeated .AllServerLords.Lord lord = 4;
  total_size += 1 * this->lord_size();
  for (int i = 0; i < this->lord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lord(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LordItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LordItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LordItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LordItems::MergeFrom(const LordItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  lord_.MergeFrom(from.lord_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_finished()) {
      set_finished(from.finished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LordItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LordItems::CopyFrom(const LordItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LordItems::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->lord())) return false;
  return true;
}

void LordItems::Swap(LordItems* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(finished_, other->finished_);
    lord_.Swap(&other->lord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LordItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LordItems_descriptor_;
  metadata.reflection = LordItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LordRankItem::kUidFieldNumber;
const int LordRankItem::kNameFieldNumber;
const int LordRankItem::kSumdataFieldNumber;
#endif  // !_MSC_VER

LordRankItem::LordRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllServerLords.LordRankItem)
}

void LordRankItem::InitAsDefaultInstance() {
}

LordRankItem::LordRankItem(const LordRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllServerLords.LordRankItem)
}

void LordRankItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sumdata_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LordRankItem::~LordRankItem() {
  // @@protoc_insertion_point(destructor:AllServerLords.LordRankItem)
  SharedDtor();
}

void LordRankItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LordRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LordRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LordRankItem_descriptor_;
}

const LordRankItem& LordRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllServerLords_2eproto();
  return *default_instance_;
}

LordRankItem* LordRankItem::default_instance_ = NULL;

LordRankItem* LordRankItem::New() const {
  return new LordRankItem;
}

void LordRankItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LordRankItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sumdata_, uid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LordRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllServerLords.LordRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sumdata;
        break;
      }

      // required uint64 sumdata = 3;
      case 3: {
        if (tag == 24) {
         parse_sumdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sumdata_)));
          set_has_sumdata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllServerLords.LordRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllServerLords.LordRankItem)
  return false;
#undef DO_
}

void LordRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllServerLords.LordRankItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required uint64 sumdata = 3;
  if (has_sumdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sumdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllServerLords.LordRankItem)
}

::google::protobuf::uint8* LordRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllServerLords.LordRankItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint64 sumdata = 3;
  if (has_sumdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sumdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllServerLords.LordRankItem)
  return target;
}

int LordRankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint64 sumdata = 3;
    if (has_sumdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sumdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LordRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LordRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LordRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LordRankItem::MergeFrom(const LordRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sumdata()) {
      set_sumdata(from.sumdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LordRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LordRankItem::CopyFrom(const LordRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LordRankItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LordRankItem::Swap(LordRankItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(sumdata_, other->sumdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LordRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LordRankItem_descriptor_;
  metadata.reflection = LordRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LordRankList::kTypeFieldNumber;
const int LordRankList::kTimeFieldNumber;
const int LordRankList::kListFieldNumber;
#endif  // !_MSC_VER

LordRankList::LordRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllServerLords.LordRankList)
}

void LordRankList::InitAsDefaultInstance() {
}

LordRankList::LordRankList(const LordRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllServerLords.LordRankList)
}

void LordRankList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LordRankList::~LordRankList() {
  // @@protoc_insertion_point(destructor:AllServerLords.LordRankList)
  SharedDtor();
}

void LordRankList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LordRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LordRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LordRankList_descriptor_;
}

const LordRankList& LordRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllServerLords_2eproto();
  return *default_instance_;
}

LordRankList* LordRankList::default_instance_ = NULL;

LordRankList* LordRankList::New() const {
  return new LordRankList;
}

void LordRankList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LordRankList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LordRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllServerLords.LordRankList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .AllServerLords.LordRankItem list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllServerLords.LordRankList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllServerLords.LordRankList)
  return false;
#undef DO_
}

void LordRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllServerLords.LordRankList)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // repeated .AllServerLords.LordRankItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllServerLords.LordRankList)
}

::google::protobuf::uint8* LordRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllServerLords.LordRankList)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // repeated .AllServerLords.LordRankItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllServerLords.LordRankList)
  return target;
}

int LordRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated .AllServerLords.LordRankItem list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LordRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LordRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LordRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LordRankList::MergeFrom(const LordRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LordRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LordRankList::CopyFrom(const LordRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LordRankList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void LordRankList::Swap(LordRankList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LordRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LordRankList_descriptor_;
  metadata.reflection = LordRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LordContainer::kCuridFieldNumber;
const int LordContainer::kLordsFieldNumber;
const int LordContainer::kRanksFieldNumber;
#endif  // !_MSC_VER

LordContainer::LordContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllServerLords.LordContainer)
}

void LordContainer::InitAsDefaultInstance() {
}

LordContainer::LordContainer(const LordContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllServerLords.LordContainer)
}

void LordContainer::SharedCtor() {
  _cached_size_ = 0;
  curid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LordContainer::~LordContainer() {
  // @@protoc_insertion_point(destructor:AllServerLords.LordContainer)
  SharedDtor();
}

void LordContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LordContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LordContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LordContainer_descriptor_;
}

const LordContainer& LordContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllServerLords_2eproto();
  return *default_instance_;
}

LordContainer* LordContainer::default_instance_ = NULL;

LordContainer* LordContainer::New() const {
  return new LordContainer;
}

void LordContainer::Clear() {
  curid_ = 0u;
  lords_.Clear();
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LordContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllServerLords.LordContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 curid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curid_)));
          set_has_curid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lords;
        break;
      }

      // repeated .AllServerLords.LordItems lords = 2;
      case 2: {
        if (tag == 18) {
         parse_lords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lords;
        if (input->ExpectTag(26)) goto parse_ranks;
        break;
      }

      // repeated .AllServerLords.LordRankList ranks = 3;
      case 3: {
        if (tag == 26) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllServerLords.LordContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllServerLords.LordContainer)
  return false;
#undef DO_
}

void LordContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllServerLords.LordContainer)
  // required uint32 curid = 1;
  if (has_curid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curid(), output);
  }

  // repeated .AllServerLords.LordItems lords = 2;
  for (int i = 0; i < this->lords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lords(i), output);
  }

  // repeated .AllServerLords.LordRankList ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllServerLords.LordContainer)
}

::google::protobuf::uint8* LordContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllServerLords.LordContainer)
  // required uint32 curid = 1;
  if (has_curid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curid(), target);
  }

  // repeated .AllServerLords.LordItems lords = 2;
  for (int i = 0; i < this->lords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lords(i), target);
  }

  // repeated .AllServerLords.LordRankList ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllServerLords.LordContainer)
  return target;
}

int LordContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 curid = 1;
    if (has_curid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curid());
    }

  }
  // repeated .AllServerLords.LordItems lords = 2;
  total_size += 1 * this->lords_size();
  for (int i = 0; i < this->lords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lords(i));
  }

  // repeated .AllServerLords.LordRankList ranks = 3;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LordContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LordContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LordContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LordContainer::MergeFrom(const LordContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  lords_.MergeFrom(from.lords_);
  ranks_.MergeFrom(from.ranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curid()) {
      set_curid(from.curid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LordContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LordContainer::CopyFrom(const LordContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LordContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->lords())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ranks())) return false;
  return true;
}

void LordContainer::Swap(LordContainer* other) {
  if (other != this) {
    std::swap(curid_, other->curid_);
    lords_.Swap(&other->lords_);
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LordContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LordContainer_descriptor_;
  metadata.reflection = LordContainer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LordAllZone::kZonesFieldNumber;
#endif  // !_MSC_VER

LordAllZone::LordAllZone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllServerLords.LordAllZone)
}

void LordAllZone::InitAsDefaultInstance() {
}

LordAllZone::LordAllZone(const LordAllZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllServerLords.LordAllZone)
}

void LordAllZone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LordAllZone::~LordAllZone() {
  // @@protoc_insertion_point(destructor:AllServerLords.LordAllZone)
  SharedDtor();
}

void LordAllZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LordAllZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LordAllZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LordAllZone_descriptor_;
}

const LordAllZone& LordAllZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AllServerLords_2eproto();
  return *default_instance_;
}

LordAllZone* LordAllZone::default_instance_ = NULL;

LordAllZone* LordAllZone::New() const {
  return new LordAllZone;
}

void LordAllZone::Clear() {
  zones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LordAllZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllServerLords.LordAllZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AllServerLords.LordContainer zones = 1;
      case 1: {
        if (tag == 10) {
         parse_zones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zones()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_zones;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllServerLords.LordAllZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllServerLords.LordAllZone)
  return false;
#undef DO_
}

void LordAllZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllServerLords.LordAllZone)
  // repeated .AllServerLords.LordContainer zones = 1;
  for (int i = 0; i < this->zones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->zones(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AllServerLords.LordAllZone)
}

::google::protobuf::uint8* LordAllZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllServerLords.LordAllZone)
  // repeated .AllServerLords.LordContainer zones = 1;
  for (int i = 0; i < this->zones_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->zones(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AllServerLords.LordAllZone)
  return target;
}

int LordAllZone::ByteSize() const {
  int total_size = 0;

  // repeated .AllServerLords.LordContainer zones = 1;
  total_size += 1 * this->zones_size();
  for (int i = 0; i < this->zones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zones(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LordAllZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LordAllZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LordAllZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LordAllZone::MergeFrom(const LordAllZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  zones_.MergeFrom(from.zones_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LordAllZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LordAllZone::CopyFrom(const LordAllZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LordAllZone::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->zones())) return false;
  return true;
}

void LordAllZone::Swap(LordAllZone* other) {
  if (other != this) {
    zones_.Swap(&other->zones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LordAllZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LordAllZone_descriptor_;
  metadata.reflection = LordAllZone_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AllServerLords

// @@protoc_insertion_point(global_scope)
