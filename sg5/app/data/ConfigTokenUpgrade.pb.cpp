// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigTokenUpgrade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConfigTokenUpgrade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConfigTokenUpgrade {

namespace {

const ::google::protobuf::Descriptor* ChargeReceive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeReceive_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurnTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurnTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenUpgrade_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConfigTokenUpgrade_2eproto() {
  protobuf_AddDesc_ConfigTokenUpgrade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConfigTokenUpgrade.proto");
  GOOGLE_CHECK(file != NULL);
  ChargeReceive_descriptor_ = file->message_type(0);
  static const int ChargeReceive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeReceive, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeReceive, reward_),
  };
  ChargeReceive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeReceive_descriptor_,
      ChargeReceive::default_instance_,
      ChargeReceive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeReceive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeReceive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeReceive));
  TurnTable_descriptor_ = file->message_type(1);
  static const int TurnTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnTable, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnTable, reward_),
  };
  TurnTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurnTable_descriptor_,
      TurnTable::default_instance_,
      TurnTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurnTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurnTable));
  ChargeLottery_descriptor_ = file->message_type(2);
  static const int ChargeLottery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLottery, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLottery, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLottery, turntable_),
  };
  ChargeLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeLottery_descriptor_,
      ChargeLottery::default_instance_,
      ChargeLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeLottery));
  TokenUpgrade_descriptor_ = file->message_type(3);
  static const int TokenUpgrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenUpgrade, charge_receive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenUpgrade, charge_lottery_),
  };
  TokenUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenUpgrade_descriptor_,
      TokenUpgrade::default_instance_,
      TokenUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenUpgrade));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConfigTokenUpgrade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeReceive_descriptor_, &ChargeReceive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurnTable_descriptor_, &TurnTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeLottery_descriptor_, &ChargeLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenUpgrade_descriptor_, &TokenUpgrade::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConfigTokenUpgrade_2eproto() {
  delete ChargeReceive::default_instance_;
  delete ChargeReceive_reflection_;
  delete TurnTable::default_instance_;
  delete TurnTable_reflection_;
  delete ChargeLottery::default_instance_;
  delete ChargeLottery_reflection_;
  delete TokenUpgrade::default_instance_;
  delete TokenUpgrade_reflection_;
}

void protobuf_AddDesc_ConfigTokenUpgrade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ConfigTokenUpgrade.proto\022\022ConfigTokenU"
    "pgrade\032\022RewardConfig.proto\"K\n\rChargeRece"
    "ive\022\r\n\005point\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132\033.Rew"
    "ardConfig.RewardItemCfg\"H\n\tTurnTable\022\016\n\006"
    "weight\030\001 \002(\r\022+\n\006reward\030\002 \002(\0132\033.RewardCon"
    "fig.RewardItemCfg\"^\n\rChargeLottery\022\014\n\004co"
    "st\030\001 \002(\r\022\r\n\005limit\030\002 \002(\r\0220\n\tturntable\030\003 \003"
    "(\0132\035.ConfigTokenUpgrade.TurnTable\"\204\001\n\014To"
    "kenUpgrade\0229\n\016charge_receive\030\001 \003(\0132!.Con"
    "figTokenUpgrade.ChargeReceive\0229\n\016charge_"
    "lottery\030\002 \002(\0132!.ConfigTokenUpgrade.Charg"
    "eLottery", 448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConfigTokenUpgrade.proto", &protobuf_RegisterTypes);
  ChargeReceive::default_instance_ = new ChargeReceive();
  TurnTable::default_instance_ = new TurnTable();
  ChargeLottery::default_instance_ = new ChargeLottery();
  TokenUpgrade::default_instance_ = new TokenUpgrade();
  ChargeReceive::default_instance_->InitAsDefaultInstance();
  TurnTable::default_instance_->InitAsDefaultInstance();
  ChargeLottery::default_instance_->InitAsDefaultInstance();
  TokenUpgrade::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConfigTokenUpgrade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConfigTokenUpgrade_2eproto {
  StaticDescriptorInitializer_ConfigTokenUpgrade_2eproto() {
    protobuf_AddDesc_ConfigTokenUpgrade_2eproto();
  }
} static_descriptor_initializer_ConfigTokenUpgrade_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChargeReceive::kPointFieldNumber;
const int ChargeReceive::kRewardFieldNumber;
#endif  // !_MSC_VER

ChargeReceive::ChargeReceive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTokenUpgrade.ChargeReceive)
}

void ChargeReceive::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

ChargeReceive::ChargeReceive(const ChargeReceive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTokenUpgrade.ChargeReceive)
}

void ChargeReceive::SharedCtor() {
  _cached_size_ = 0;
  point_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeReceive::~ChargeReceive() {
  // @@protoc_insertion_point(destructor:ConfigTokenUpgrade.ChargeReceive)
  SharedDtor();
}

void ChargeReceive::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void ChargeReceive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeReceive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeReceive_descriptor_;
}

const ChargeReceive& ChargeReceive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTokenUpgrade_2eproto();
  return *default_instance_;
}

ChargeReceive* ChargeReceive::default_instance_ = NULL;

ChargeReceive* ChargeReceive::New() const {
  return new ChargeReceive;
}

void ChargeReceive::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    point_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeReceive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTokenUpgrade.ChargeReceive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTokenUpgrade.ChargeReceive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTokenUpgrade.ChargeReceive)
  return false;
#undef DO_
}

void ChargeReceive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTokenUpgrade.ChargeReceive)
  // required uint32 point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTokenUpgrade.ChargeReceive)
}

::google::protobuf::uint8* ChargeReceive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTokenUpgrade.ChargeReceive)
  // required uint32 point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTokenUpgrade.ChargeReceive)
  return target;
}

int ChargeReceive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeReceive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeReceive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeReceive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeReceive::MergeFrom(const ChargeReceive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeReceive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeReceive::CopyFrom(const ChargeReceive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeReceive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void ChargeReceive::Swap(ChargeReceive* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeReceive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeReceive_descriptor_;
  metadata.reflection = ChargeReceive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurnTable::kWeightFieldNumber;
const int TurnTable::kRewardFieldNumber;
#endif  // !_MSC_VER

TurnTable::TurnTable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTokenUpgrade.TurnTable)
}

void TurnTable::InitAsDefaultInstance() {
  reward_ = const_cast< ::RewardConfig::RewardItemCfg*>(&::RewardConfig::RewardItemCfg::default_instance());
}

TurnTable::TurnTable(const TurnTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTokenUpgrade.TurnTable)
}

void TurnTable::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurnTable::~TurnTable() {
  // @@protoc_insertion_point(destructor:ConfigTokenUpgrade.TurnTable)
  SharedDtor();
}

void TurnTable::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void TurnTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurnTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurnTable_descriptor_;
}

const TurnTable& TurnTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTokenUpgrade_2eproto();
  return *default_instance_;
}

TurnTable* TurnTable::default_instance_ = NULL;

TurnTable* TurnTable::New() const {
  return new TurnTable;
}

void TurnTable::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    weight_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurnTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTokenUpgrade.TurnTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 weight = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .RewardConfig.RewardItemCfg reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTokenUpgrade.TurnTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTokenUpgrade.TurnTable)
  return false;
#undef DO_
}

void TurnTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTokenUpgrade.TurnTable)
  // required uint32 weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weight(), output);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTokenUpgrade.TurnTable)
}

::google::protobuf::uint8* TurnTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTokenUpgrade.TurnTable)
  // required uint32 weight = 1;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->weight(), target);
  }

  // required .RewardConfig.RewardItemCfg reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTokenUpgrade.TurnTable)
  return target;
}

int TurnTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 weight = 1;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weight());
    }

    // required .RewardConfig.RewardItemCfg reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurnTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurnTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurnTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurnTable::MergeFrom(const TurnTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_reward()) {
      mutable_reward()->::RewardConfig::RewardItemCfg::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurnTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurnTable::CopyFrom(const TurnTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurnTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void TurnTable::Swap(TurnTable* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurnTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurnTable_descriptor_;
  metadata.reflection = TurnTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeLottery::kCostFieldNumber;
const int ChargeLottery::kLimitFieldNumber;
const int ChargeLottery::kTurntableFieldNumber;
#endif  // !_MSC_VER

ChargeLottery::ChargeLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTokenUpgrade.ChargeLottery)
}

void ChargeLottery::InitAsDefaultInstance() {
}

ChargeLottery::ChargeLottery(const ChargeLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTokenUpgrade.ChargeLottery)
}

void ChargeLottery::SharedCtor() {
  _cached_size_ = 0;
  cost_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeLottery::~ChargeLottery() {
  // @@protoc_insertion_point(destructor:ConfigTokenUpgrade.ChargeLottery)
  SharedDtor();
}

void ChargeLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeLottery_descriptor_;
}

const ChargeLottery& ChargeLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTokenUpgrade_2eproto();
  return *default_instance_;
}

ChargeLottery* ChargeLottery::default_instance_ = NULL;

ChargeLottery* ChargeLottery::New() const {
  return new ChargeLottery;
}

void ChargeLottery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeLottery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cost_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  turntable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTokenUpgrade.ChargeLottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // required uint32 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_turntable;
        break;
      }

      // repeated .ConfigTokenUpgrade.TurnTable turntable = 3;
      case 3: {
        if (tag == 26) {
         parse_turntable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_turntable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_turntable;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTokenUpgrade.ChargeLottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTokenUpgrade.ChargeLottery)
  return false;
#undef DO_
}

void ChargeLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTokenUpgrade.ChargeLottery)
  // required uint32 cost = 1;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost(), output);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // repeated .ConfigTokenUpgrade.TurnTable turntable = 3;
  for (int i = 0; i < this->turntable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->turntable(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTokenUpgrade.ChargeLottery)
}

::google::protobuf::uint8* ChargeLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTokenUpgrade.ChargeLottery)
  // required uint32 cost = 1;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost(), target);
  }

  // required uint32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // repeated .ConfigTokenUpgrade.TurnTable turntable = 3;
  for (int i = 0; i < this->turntable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->turntable(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTokenUpgrade.ChargeLottery)
  return target;
}

int ChargeLottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cost = 1;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required uint32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  // repeated .ConfigTokenUpgrade.TurnTable turntable = 3;
  total_size += 1 * this->turntable_size();
  for (int i = 0; i < this->turntable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turntable(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeLottery::MergeFrom(const ChargeLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  turntable_.MergeFrom(from.turntable_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeLottery::CopyFrom(const ChargeLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeLottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->turntable())) return false;
  return true;
}

void ChargeLottery::Swap(ChargeLottery* other) {
  if (other != this) {
    std::swap(cost_, other->cost_);
    std::swap(limit_, other->limit_);
    turntable_.Swap(&other->turntable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeLottery_descriptor_;
  metadata.reflection = ChargeLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TokenUpgrade::kChargeReceiveFieldNumber;
const int TokenUpgrade::kChargeLotteryFieldNumber;
#endif  // !_MSC_VER

TokenUpgrade::TokenUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigTokenUpgrade.TokenUpgrade)
}

void TokenUpgrade::InitAsDefaultInstance() {
  charge_lottery_ = const_cast< ::ConfigTokenUpgrade::ChargeLottery*>(&::ConfigTokenUpgrade::ChargeLottery::default_instance());
}

TokenUpgrade::TokenUpgrade(const TokenUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConfigTokenUpgrade.TokenUpgrade)
}

void TokenUpgrade::SharedCtor() {
  _cached_size_ = 0;
  charge_lottery_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenUpgrade::~TokenUpgrade() {
  // @@protoc_insertion_point(destructor:ConfigTokenUpgrade.TokenUpgrade)
  SharedDtor();
}

void TokenUpgrade::SharedDtor() {
  if (this != default_instance_) {
    delete charge_lottery_;
  }
}

void TokenUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenUpgrade_descriptor_;
}

const TokenUpgrade& TokenUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConfigTokenUpgrade_2eproto();
  return *default_instance_;
}

TokenUpgrade* TokenUpgrade::default_instance_ = NULL;

TokenUpgrade* TokenUpgrade::New() const {
  return new TokenUpgrade;
}

void TokenUpgrade::Clear() {
  if (has_charge_lottery()) {
    if (charge_lottery_ != NULL) charge_lottery_->::ConfigTokenUpgrade::ChargeLottery::Clear();
  }
  charge_receive_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigTokenUpgrade.TokenUpgrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ConfigTokenUpgrade.ChargeReceive charge_receive = 1;
      case 1: {
        if (tag == 10) {
         parse_charge_receive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charge_receive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_charge_receive;
        if (input->ExpectTag(18)) goto parse_charge_lottery;
        break;
      }

      // required .ConfigTokenUpgrade.ChargeLottery charge_lottery = 2;
      case 2: {
        if (tag == 18) {
         parse_charge_lottery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charge_lottery()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigTokenUpgrade.TokenUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigTokenUpgrade.TokenUpgrade)
  return false;
#undef DO_
}

void TokenUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigTokenUpgrade.TokenUpgrade)
  // repeated .ConfigTokenUpgrade.ChargeReceive charge_receive = 1;
  for (int i = 0; i < this->charge_receive_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charge_receive(i), output);
  }

  // required .ConfigTokenUpgrade.ChargeLottery charge_lottery = 2;
  if (has_charge_lottery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->charge_lottery(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConfigTokenUpgrade.TokenUpgrade)
}

::google::protobuf::uint8* TokenUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigTokenUpgrade.TokenUpgrade)
  // repeated .ConfigTokenUpgrade.ChargeReceive charge_receive = 1;
  for (int i = 0; i < this->charge_receive_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charge_receive(i), target);
  }

  // required .ConfigTokenUpgrade.ChargeLottery charge_lottery = 2;
  if (has_charge_lottery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->charge_lottery(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConfigTokenUpgrade.TokenUpgrade)
  return target;
}

int TokenUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ConfigTokenUpgrade.ChargeLottery charge_lottery = 2;
    if (has_charge_lottery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charge_lottery());
    }

  }
  // repeated .ConfigTokenUpgrade.ChargeReceive charge_receive = 1;
  total_size += 1 * this->charge_receive_size();
  for (int i = 0; i < this->charge_receive_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charge_receive(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenUpgrade::MergeFrom(const TokenUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  charge_receive_.MergeFrom(from.charge_receive_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_charge_lottery()) {
      mutable_charge_lottery()->::ConfigTokenUpgrade::ChargeLottery::MergeFrom(from.charge_lottery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenUpgrade::CopyFrom(const TokenUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenUpgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->charge_receive())) return false;
  if (has_charge_lottery()) {
    if (!this->charge_lottery().IsInitialized()) return false;
  }
  return true;
}

void TokenUpgrade::Swap(TokenUpgrade* other) {
  if (other != this) {
    charge_receive_.Swap(&other->charge_receive_);
    std::swap(charge_lottery_, other->charge_lottery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenUpgrade_descriptor_;
  metadata.reflection = TokenUpgrade_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigTokenUpgrade

// @@protoc_insertion_point(global_scope)
