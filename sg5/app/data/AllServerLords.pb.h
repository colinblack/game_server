// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllServerLords.proto

#ifndef PROTOBUF_AllServerLords_2eproto__INCLUDED
#define PROTOBUF_AllServerLords_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace AllServerLords {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AllServerLords_2eproto();
void protobuf_AssignDesc_AllServerLords_2eproto();
void protobuf_ShutdownFile_AllServerLords_2eproto();

class Lord;
class LordItems;
class LordRankItem;
class LordRankList;
class LordContainer;
class LordAllZone;

// ===================================================================

class Lord : public ::google::protobuf::Message {
 public:
  Lord();
  virtual ~Lord();

  Lord(const Lord& from);

  inline Lord& operator=(const Lord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lord& default_instance();

  void Swap(Lord* other);

  // implements Message ----------------------------------------------

  Lord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lord& from);
  void MergeFrom(const Lord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 worship = 3;
  inline bool has_worship() const;
  inline void clear_worship();
  static const int kWorshipFieldNumber = 3;
  inline ::google::protobuf::uint32 worship() const;
  inline void set_worship(::google::protobuf::uint32 value);

  // required uint32 setted = 4;
  inline bool has_setted() const;
  inline void clear_setted();
  static const int kSettedFieldNumber = 4;
  inline ::google::protobuf::uint32 setted() const;
  inline void set_setted(::google::protobuf::uint32 value);

  // required string heroid = 5;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroidFieldNumber = 5;
  inline const ::std::string& heroid() const;
  inline void set_heroid(const ::std::string& value);
  inline void set_heroid(const char* value);
  inline void set_heroid(const char* value, size_t size);
  inline ::std::string* mutable_heroid();
  inline ::std::string* release_heroid();
  inline void set_allocated_heroid(::std::string* heroid);

  // required string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string headurl = 7;
  inline bool has_headurl() const;
  inline void clear_headurl();
  static const int kHeadurlFieldNumber = 7;
  inline const ::std::string& headurl() const;
  inline void set_headurl(const ::std::string& value);
  inline void set_headurl(const char* value);
  inline void set_headurl(const char* value, size_t size);
  inline ::std::string* mutable_headurl();
  inline ::std::string* release_headurl();
  inline void set_allocated_headurl(::std::string* headurl);

  // required string heroname = 8;
  inline bool has_heroname() const;
  inline void clear_heroname();
  static const int kHeronameFieldNumber = 8;
  inline const ::std::string& heroname() const;
  inline void set_heroname(const ::std::string& value);
  inline void set_heroname(const char* value);
  inline void set_heroname(const char* value, size_t size);
  inline ::std::string* mutable_heroname();
  inline ::std::string* release_heroname();
  inline void set_allocated_heroname(::std::string* heroname);

  // @@protoc_insertion_point(class_scope:AllServerLords.Lord)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_worship();
  inline void clear_has_worship();
  inline void set_has_setted();
  inline void clear_has_setted();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headurl();
  inline void clear_has_headurl();
  inline void set_has_heroname();
  inline void clear_has_heroname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 worship_;
  ::google::protobuf::uint32 setted_;
  ::std::string* heroid_;
  ::std::string* name_;
  ::std::string* headurl_;
  ::std::string* heroname_;
  friend void  protobuf_AddDesc_AllServerLords_2eproto();
  friend void protobuf_AssignDesc_AllServerLords_2eproto();
  friend void protobuf_ShutdownFile_AllServerLords_2eproto();

  void InitAsDefaultInstance();
  static Lord* default_instance_;
};
// -------------------------------------------------------------------

class LordItems : public ::google::protobuf::Message {
 public:
  LordItems();
  virtual ~LordItems();

  LordItems(const LordItems& from);

  inline LordItems& operator=(const LordItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LordItems& default_instance();

  void Swap(LordItems* other);

  // implements Message ----------------------------------------------

  LordItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LordItems& from);
  void MergeFrom(const LordItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 finished = 3;
  inline bool has_finished() const;
  inline void clear_finished();
  static const int kFinishedFieldNumber = 3;
  inline ::google::protobuf::uint32 finished() const;
  inline void set_finished(::google::protobuf::uint32 value);

  // repeated .AllServerLords.Lord lord = 4;
  inline int lord_size() const;
  inline void clear_lord();
  static const int kLordFieldNumber = 4;
  inline const ::AllServerLords::Lord& lord(int index) const;
  inline ::AllServerLords::Lord* mutable_lord(int index);
  inline ::AllServerLords::Lord* add_lord();
  inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::Lord >&
      lord() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::Lord >*
      mutable_lord();

  // @@protoc_insertion_point(class_scope:AllServerLords.LordItems)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_finished();
  inline void clear_has_finished();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::RepeatedPtrField< ::AllServerLords::Lord > lord_;
  ::google::protobuf::uint32 finished_;
  friend void  protobuf_AddDesc_AllServerLords_2eproto();
  friend void protobuf_AssignDesc_AllServerLords_2eproto();
  friend void protobuf_ShutdownFile_AllServerLords_2eproto();

  void InitAsDefaultInstance();
  static LordItems* default_instance_;
};
// -------------------------------------------------------------------

class LordRankItem : public ::google::protobuf::Message {
 public:
  LordRankItem();
  virtual ~LordRankItem();

  LordRankItem(const LordRankItem& from);

  inline LordRankItem& operator=(const LordRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LordRankItem& default_instance();

  void Swap(LordRankItem* other);

  // implements Message ----------------------------------------------

  LordRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LordRankItem& from);
  void MergeFrom(const LordRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 sumdata = 3;
  inline bool has_sumdata() const;
  inline void clear_sumdata();
  static const int kSumdataFieldNumber = 3;
  inline ::google::protobuf::uint64 sumdata() const;
  inline void set_sumdata(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:AllServerLords.LordRankItem)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sumdata();
  inline void clear_has_sumdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint64 sumdata_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_AllServerLords_2eproto();
  friend void protobuf_AssignDesc_AllServerLords_2eproto();
  friend void protobuf_ShutdownFile_AllServerLords_2eproto();

  void InitAsDefaultInstance();
  static LordRankItem* default_instance_;
};
// -------------------------------------------------------------------

class LordRankList : public ::google::protobuf::Message {
 public:
  LordRankList();
  virtual ~LordRankList();

  LordRankList(const LordRankList& from);

  inline LordRankList& operator=(const LordRankList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LordRankList& default_instance();

  void Swap(LordRankList* other);

  // implements Message ----------------------------------------------

  LordRankList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LordRankList& from);
  void MergeFrom(const LordRankList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // repeated .AllServerLords.LordRankItem list = 3;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 3;
  inline const ::AllServerLords::LordRankItem& list(int index) const;
  inline ::AllServerLords::LordRankItem* mutable_list(int index);
  inline ::AllServerLords::LordRankItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankItem >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:AllServerLords.LordRankList)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankItem > list_;
  friend void  protobuf_AddDesc_AllServerLords_2eproto();
  friend void protobuf_AssignDesc_AllServerLords_2eproto();
  friend void protobuf_ShutdownFile_AllServerLords_2eproto();

  void InitAsDefaultInstance();
  static LordRankList* default_instance_;
};
// -------------------------------------------------------------------

class LordContainer : public ::google::protobuf::Message {
 public:
  LordContainer();
  virtual ~LordContainer();

  LordContainer(const LordContainer& from);

  inline LordContainer& operator=(const LordContainer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LordContainer& default_instance();

  void Swap(LordContainer* other);

  // implements Message ----------------------------------------------

  LordContainer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LordContainer& from);
  void MergeFrom(const LordContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 curid = 1;
  inline bool has_curid() const;
  inline void clear_curid();
  static const int kCuridFieldNumber = 1;
  inline ::google::protobuf::uint32 curid() const;
  inline void set_curid(::google::protobuf::uint32 value);

  // repeated .AllServerLords.LordItems lords = 2;
  inline int lords_size() const;
  inline void clear_lords();
  static const int kLordsFieldNumber = 2;
  inline const ::AllServerLords::LordItems& lords(int index) const;
  inline ::AllServerLords::LordItems* mutable_lords(int index);
  inline ::AllServerLords::LordItems* add_lords();
  inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordItems >&
      lords() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordItems >*
      mutable_lords();

  // repeated .AllServerLords.LordRankList ranks = 3;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 3;
  inline const ::AllServerLords::LordRankList& ranks(int index) const;
  inline ::AllServerLords::LordRankList* mutable_ranks(int index);
  inline ::AllServerLords::LordRankList* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankList >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankList >*
      mutable_ranks();

  // @@protoc_insertion_point(class_scope:AllServerLords.LordContainer)
 private:
  inline void set_has_curid();
  inline void clear_has_curid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordItems > lords_;
  ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankList > ranks_;
  ::google::protobuf::uint32 curid_;
  friend void  protobuf_AddDesc_AllServerLords_2eproto();
  friend void protobuf_AssignDesc_AllServerLords_2eproto();
  friend void protobuf_ShutdownFile_AllServerLords_2eproto();

  void InitAsDefaultInstance();
  static LordContainer* default_instance_;
};
// -------------------------------------------------------------------

class LordAllZone : public ::google::protobuf::Message {
 public:
  LordAllZone();
  virtual ~LordAllZone();

  LordAllZone(const LordAllZone& from);

  inline LordAllZone& operator=(const LordAllZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LordAllZone& default_instance();

  void Swap(LordAllZone* other);

  // implements Message ----------------------------------------------

  LordAllZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LordAllZone& from);
  void MergeFrom(const LordAllZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AllServerLords.LordContainer zones = 1;
  inline int zones_size() const;
  inline void clear_zones();
  static const int kZonesFieldNumber = 1;
  inline const ::AllServerLords::LordContainer& zones(int index) const;
  inline ::AllServerLords::LordContainer* mutable_zones(int index);
  inline ::AllServerLords::LordContainer* add_zones();
  inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordContainer >&
      zones() const;
  inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordContainer >*
      mutable_zones();

  // @@protoc_insertion_point(class_scope:AllServerLords.LordAllZone)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordContainer > zones_;
  friend void  protobuf_AddDesc_AllServerLords_2eproto();
  friend void protobuf_AssignDesc_AllServerLords_2eproto();
  friend void protobuf_ShutdownFile_AllServerLords_2eproto();

  void InitAsDefaultInstance();
  static LordAllZone* default_instance_;
};
// ===================================================================


// ===================================================================

// Lord

// required uint32 uid = 1;
inline bool Lord::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lord::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lord::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lord::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Lord::uid() const {
  // @@protoc_insertion_point(field_get:AllServerLords.Lord.uid)
  return uid_;
}
inline void Lord::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.Lord.uid)
}

// required uint32 type = 2;
inline bool Lord::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lord::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lord::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lord::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Lord::type() const {
  // @@protoc_insertion_point(field_get:AllServerLords.Lord.type)
  return type_;
}
inline void Lord::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.Lord.type)
}

// required uint32 worship = 3;
inline bool Lord::has_worship() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lord::set_has_worship() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lord::clear_has_worship() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lord::clear_worship() {
  worship_ = 0u;
  clear_has_worship();
}
inline ::google::protobuf::uint32 Lord::worship() const {
  // @@protoc_insertion_point(field_get:AllServerLords.Lord.worship)
  return worship_;
}
inline void Lord::set_worship(::google::protobuf::uint32 value) {
  set_has_worship();
  worship_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.Lord.worship)
}

// required uint32 setted = 4;
inline bool Lord::has_setted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lord::set_has_setted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lord::clear_has_setted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lord::clear_setted() {
  setted_ = 0u;
  clear_has_setted();
}
inline ::google::protobuf::uint32 Lord::setted() const {
  // @@protoc_insertion_point(field_get:AllServerLords.Lord.setted)
  return setted_;
}
inline void Lord::set_setted(::google::protobuf::uint32 value) {
  set_has_setted();
  setted_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.Lord.setted)
}

// required string heroid = 5;
inline bool Lord::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lord::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lord::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lord::clear_heroid() {
  if (heroid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroid_->clear();
  }
  clear_has_heroid();
}
inline const ::std::string& Lord::heroid() const {
  // @@protoc_insertion_point(field_get:AllServerLords.Lord.heroid)
  return *heroid_;
}
inline void Lord::set_heroid(const ::std::string& value) {
  set_has_heroid();
  if (heroid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroid_ = new ::std::string;
  }
  heroid_->assign(value);
  // @@protoc_insertion_point(field_set:AllServerLords.Lord.heroid)
}
inline void Lord::set_heroid(const char* value) {
  set_has_heroid();
  if (heroid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroid_ = new ::std::string;
  }
  heroid_->assign(value);
  // @@protoc_insertion_point(field_set_char:AllServerLords.Lord.heroid)
}
inline void Lord::set_heroid(const char* value, size_t size) {
  set_has_heroid();
  if (heroid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroid_ = new ::std::string;
  }
  heroid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AllServerLords.Lord.heroid)
}
inline ::std::string* Lord::mutable_heroid() {
  set_has_heroid();
  if (heroid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AllServerLords.Lord.heroid)
  return heroid_;
}
inline ::std::string* Lord::release_heroid() {
  clear_has_heroid();
  if (heroid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = heroid_;
    heroid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Lord::set_allocated_heroid(::std::string* heroid) {
  if (heroid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heroid_;
  }
  if (heroid) {
    set_has_heroid();
    heroid_ = heroid;
  } else {
    clear_has_heroid();
    heroid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AllServerLords.Lord.heroid)
}

// required string name = 6;
inline bool Lord::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lord::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lord::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lord::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Lord::name() const {
  // @@protoc_insertion_point(field_get:AllServerLords.Lord.name)
  return *name_;
}
inline void Lord::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:AllServerLords.Lord.name)
}
inline void Lord::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AllServerLords.Lord.name)
}
inline void Lord::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AllServerLords.Lord.name)
}
inline ::std::string* Lord::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AllServerLords.Lord.name)
  return name_;
}
inline ::std::string* Lord::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Lord::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AllServerLords.Lord.name)
}

// required string headurl = 7;
inline bool Lord::has_headurl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lord::set_has_headurl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lord::clear_has_headurl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lord::clear_headurl() {
  if (headurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headurl_->clear();
  }
  clear_has_headurl();
}
inline const ::std::string& Lord::headurl() const {
  // @@protoc_insertion_point(field_get:AllServerLords.Lord.headurl)
  return *headurl_;
}
inline void Lord::set_headurl(const ::std::string& value) {
  set_has_headurl();
  if (headurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headurl_ = new ::std::string;
  }
  headurl_->assign(value);
  // @@protoc_insertion_point(field_set:AllServerLords.Lord.headurl)
}
inline void Lord::set_headurl(const char* value) {
  set_has_headurl();
  if (headurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headurl_ = new ::std::string;
  }
  headurl_->assign(value);
  // @@protoc_insertion_point(field_set_char:AllServerLords.Lord.headurl)
}
inline void Lord::set_headurl(const char* value, size_t size) {
  set_has_headurl();
  if (headurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headurl_ = new ::std::string;
  }
  headurl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AllServerLords.Lord.headurl)
}
inline ::std::string* Lord::mutable_headurl() {
  set_has_headurl();
  if (headurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    headurl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AllServerLords.Lord.headurl)
  return headurl_;
}
inline ::std::string* Lord::release_headurl() {
  clear_has_headurl();
  if (headurl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = headurl_;
    headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Lord::set_allocated_headurl(::std::string* headurl) {
  if (headurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headurl_;
  }
  if (headurl) {
    set_has_headurl();
    headurl_ = headurl;
  } else {
    clear_has_headurl();
    headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AllServerLords.Lord.headurl)
}

// required string heroname = 8;
inline bool Lord::has_heroname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lord::set_has_heroname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lord::clear_has_heroname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lord::clear_heroname() {
  if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroname_->clear();
  }
  clear_has_heroname();
}
inline const ::std::string& Lord::heroname() const {
  // @@protoc_insertion_point(field_get:AllServerLords.Lord.heroname)
  return *heroname_;
}
inline void Lord::set_heroname(const ::std::string& value) {
  set_has_heroname();
  if (heroname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroname_ = new ::std::string;
  }
  heroname_->assign(value);
  // @@protoc_insertion_point(field_set:AllServerLords.Lord.heroname)
}
inline void Lord::set_heroname(const char* value) {
  set_has_heroname();
  if (heroname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroname_ = new ::std::string;
  }
  heroname_->assign(value);
  // @@protoc_insertion_point(field_set_char:AllServerLords.Lord.heroname)
}
inline void Lord::set_heroname(const char* value, size_t size) {
  set_has_heroname();
  if (heroname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroname_ = new ::std::string;
  }
  heroname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AllServerLords.Lord.heroname)
}
inline ::std::string* Lord::mutable_heroname() {
  set_has_heroname();
  if (heroname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    heroname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AllServerLords.Lord.heroname)
  return heroname_;
}
inline ::std::string* Lord::release_heroname() {
  clear_has_heroname();
  if (heroname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = heroname_;
    heroname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Lord::set_allocated_heroname(::std::string* heroname) {
  if (heroname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete heroname_;
  }
  if (heroname) {
    set_has_heroname();
    heroname_ = heroname;
  } else {
    clear_has_heroname();
    heroname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AllServerLords.Lord.heroname)
}

// -------------------------------------------------------------------

// LordItems

// required uint32 id = 1;
inline bool LordItems::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LordItems::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LordItems::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LordItems::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 LordItems::id() const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordItems.id)
  return id_;
}
inline void LordItems::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.LordItems.id)
}

// required uint32 time = 2;
inline bool LordItems::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LordItems::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LordItems::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LordItems::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 LordItems::time() const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordItems.time)
  return time_;
}
inline void LordItems::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.LordItems.time)
}

// required uint32 finished = 3;
inline bool LordItems::has_finished() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LordItems::set_has_finished() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LordItems::clear_has_finished() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LordItems::clear_finished() {
  finished_ = 0u;
  clear_has_finished();
}
inline ::google::protobuf::uint32 LordItems::finished() const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordItems.finished)
  return finished_;
}
inline void LordItems::set_finished(::google::protobuf::uint32 value) {
  set_has_finished();
  finished_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.LordItems.finished)
}

// repeated .AllServerLords.Lord lord = 4;
inline int LordItems::lord_size() const {
  return lord_.size();
}
inline void LordItems::clear_lord() {
  lord_.Clear();
}
inline const ::AllServerLords::Lord& LordItems::lord(int index) const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordItems.lord)
  return lord_.Get(index);
}
inline ::AllServerLords::Lord* LordItems::mutable_lord(int index) {
  // @@protoc_insertion_point(field_mutable:AllServerLords.LordItems.lord)
  return lord_.Mutable(index);
}
inline ::AllServerLords::Lord* LordItems::add_lord() {
  // @@protoc_insertion_point(field_add:AllServerLords.LordItems.lord)
  return lord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::Lord >&
LordItems::lord() const {
  // @@protoc_insertion_point(field_list:AllServerLords.LordItems.lord)
  return lord_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::Lord >*
LordItems::mutable_lord() {
  // @@protoc_insertion_point(field_mutable_list:AllServerLords.LordItems.lord)
  return &lord_;
}

// -------------------------------------------------------------------

// LordRankItem

// required uint32 uid = 1;
inline bool LordRankItem::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LordRankItem::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LordRankItem::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LordRankItem::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 LordRankItem::uid() const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordRankItem.uid)
  return uid_;
}
inline void LordRankItem::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.LordRankItem.uid)
}

// required string name = 2;
inline bool LordRankItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LordRankItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LordRankItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LordRankItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LordRankItem::name() const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordRankItem.name)
  return *name_;
}
inline void LordRankItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:AllServerLords.LordRankItem.name)
}
inline void LordRankItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:AllServerLords.LordRankItem.name)
}
inline void LordRankItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AllServerLords.LordRankItem.name)
}
inline ::std::string* LordRankItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:AllServerLords.LordRankItem.name)
  return name_;
}
inline ::std::string* LordRankItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LordRankItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:AllServerLords.LordRankItem.name)
}

// required uint64 sumdata = 3;
inline bool LordRankItem::has_sumdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LordRankItem::set_has_sumdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LordRankItem::clear_has_sumdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LordRankItem::clear_sumdata() {
  sumdata_ = GOOGLE_ULONGLONG(0);
  clear_has_sumdata();
}
inline ::google::protobuf::uint64 LordRankItem::sumdata() const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordRankItem.sumdata)
  return sumdata_;
}
inline void LordRankItem::set_sumdata(::google::protobuf::uint64 value) {
  set_has_sumdata();
  sumdata_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.LordRankItem.sumdata)
}

// -------------------------------------------------------------------

// LordRankList

// required uint32 type = 1;
inline bool LordRankList::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LordRankList::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LordRankList::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LordRankList::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 LordRankList::type() const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordRankList.type)
  return type_;
}
inline void LordRankList::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.LordRankList.type)
}

// required uint32 time = 2;
inline bool LordRankList::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LordRankList::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LordRankList::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LordRankList::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 LordRankList::time() const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordRankList.time)
  return time_;
}
inline void LordRankList::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.LordRankList.time)
}

// repeated .AllServerLords.LordRankItem list = 3;
inline int LordRankList::list_size() const {
  return list_.size();
}
inline void LordRankList::clear_list() {
  list_.Clear();
}
inline const ::AllServerLords::LordRankItem& LordRankList::list(int index) const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordRankList.list)
  return list_.Get(index);
}
inline ::AllServerLords::LordRankItem* LordRankList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:AllServerLords.LordRankList.list)
  return list_.Mutable(index);
}
inline ::AllServerLords::LordRankItem* LordRankList::add_list() {
  // @@protoc_insertion_point(field_add:AllServerLords.LordRankList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankItem >&
LordRankList::list() const {
  // @@protoc_insertion_point(field_list:AllServerLords.LordRankList.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankItem >*
LordRankList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:AllServerLords.LordRankList.list)
  return &list_;
}

// -------------------------------------------------------------------

// LordContainer

// required uint32 curid = 1;
inline bool LordContainer::has_curid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LordContainer::set_has_curid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LordContainer::clear_has_curid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LordContainer::clear_curid() {
  curid_ = 0u;
  clear_has_curid();
}
inline ::google::protobuf::uint32 LordContainer::curid() const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordContainer.curid)
  return curid_;
}
inline void LordContainer::set_curid(::google::protobuf::uint32 value) {
  set_has_curid();
  curid_ = value;
  // @@protoc_insertion_point(field_set:AllServerLords.LordContainer.curid)
}

// repeated .AllServerLords.LordItems lords = 2;
inline int LordContainer::lords_size() const {
  return lords_.size();
}
inline void LordContainer::clear_lords() {
  lords_.Clear();
}
inline const ::AllServerLords::LordItems& LordContainer::lords(int index) const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordContainer.lords)
  return lords_.Get(index);
}
inline ::AllServerLords::LordItems* LordContainer::mutable_lords(int index) {
  // @@protoc_insertion_point(field_mutable:AllServerLords.LordContainer.lords)
  return lords_.Mutable(index);
}
inline ::AllServerLords::LordItems* LordContainer::add_lords() {
  // @@protoc_insertion_point(field_add:AllServerLords.LordContainer.lords)
  return lords_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordItems >&
LordContainer::lords() const {
  // @@protoc_insertion_point(field_list:AllServerLords.LordContainer.lords)
  return lords_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordItems >*
LordContainer::mutable_lords() {
  // @@protoc_insertion_point(field_mutable_list:AllServerLords.LordContainer.lords)
  return &lords_;
}

// repeated .AllServerLords.LordRankList ranks = 3;
inline int LordContainer::ranks_size() const {
  return ranks_.size();
}
inline void LordContainer::clear_ranks() {
  ranks_.Clear();
}
inline const ::AllServerLords::LordRankList& LordContainer::ranks(int index) const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordContainer.ranks)
  return ranks_.Get(index);
}
inline ::AllServerLords::LordRankList* LordContainer::mutable_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:AllServerLords.LordContainer.ranks)
  return ranks_.Mutable(index);
}
inline ::AllServerLords::LordRankList* LordContainer::add_ranks() {
  // @@protoc_insertion_point(field_add:AllServerLords.LordContainer.ranks)
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankList >&
LordContainer::ranks() const {
  // @@protoc_insertion_point(field_list:AllServerLords.LordContainer.ranks)
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordRankList >*
LordContainer::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:AllServerLords.LordContainer.ranks)
  return &ranks_;
}

// -------------------------------------------------------------------

// LordAllZone

// repeated .AllServerLords.LordContainer zones = 1;
inline int LordAllZone::zones_size() const {
  return zones_.size();
}
inline void LordAllZone::clear_zones() {
  zones_.Clear();
}
inline const ::AllServerLords::LordContainer& LordAllZone::zones(int index) const {
  // @@protoc_insertion_point(field_get:AllServerLords.LordAllZone.zones)
  return zones_.Get(index);
}
inline ::AllServerLords::LordContainer* LordAllZone::mutable_zones(int index) {
  // @@protoc_insertion_point(field_mutable:AllServerLords.LordAllZone.zones)
  return zones_.Mutable(index);
}
inline ::AllServerLords::LordContainer* LordAllZone::add_zones() {
  // @@protoc_insertion_point(field_add:AllServerLords.LordAllZone.zones)
  return zones_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordContainer >&
LordAllZone::zones() const {
  // @@protoc_insertion_point(field_list:AllServerLords.LordAllZone.zones)
  return zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::AllServerLords::LordContainer >*
LordAllZone::mutable_zones() {
  // @@protoc_insertion_point(field_mutable_list:AllServerLords.LordAllZone.zones)
  return &zones_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AllServerLords

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AllServerLords_2eproto__INCLUDED
