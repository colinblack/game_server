// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chick.proto

#ifndef PROTOBUF_Chick_2eproto__INCLUDED
#define PROTOBUF_Chick_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Chick {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Chick_2eproto();
void protobuf_AssignDesc_Chick_2eproto();
void protobuf_ShutdownFile_Chick_2eproto();

class ChickHero;
class ChickUser;
class Chick;

// ===================================================================

class ChickHero : public ::google::protobuf::Message {
 public:
  ChickHero();
  virtual ~ChickHero();

  ChickHero(const ChickHero& from);

  inline ChickHero& operator=(const ChickHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChickHero& default_instance();

  void Swap(ChickHero* other);

  // implements Message ----------------------------------------------

  ChickHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChickHero& from);
  void MergeFrom(const ChickHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated uint32 property = 2;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 2;
  inline ::google::protobuf::uint32 property(int index) const;
  inline void set_property(int index, ::google::protobuf::uint32 value);
  inline void add_property(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      property() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_property();

  // @@protoc_insertion_point(class_scope:Chick.ChickHero)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > property_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_Chick_2eproto();
  friend void protobuf_AssignDesc_Chick_2eproto();
  friend void protobuf_ShutdownFile_Chick_2eproto();

  void InitAsDefaultInstance();
  static ChickHero* default_instance_;
};
// -------------------------------------------------------------------

class ChickUser : public ::google::protobuf::Message {
 public:
  ChickUser();
  virtual ~ChickUser();

  ChickUser(const ChickUser& from);

  inline ChickUser& operator=(const ChickUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChickUser& default_instance();

  void Swap(ChickUser* other);

  // implements Message ----------------------------------------------

  ChickUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChickUser& from);
  void MergeFrom(const ChickUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes fig = 3;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 3;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  inline void set_allocated_fig(::std::string* fig);

  // required uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required .Chick.ChickHero hero = 5;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 5;
  inline const ::Chick::ChickHero& hero() const;
  inline ::Chick::ChickHero* mutable_hero();
  inline ::Chick::ChickHero* release_hero();
  inline void set_allocated_hero(::Chick::ChickHero* hero);

  // required uint32 zone = 6;
  inline bool has_zone() const;
  inline void clear_zone();
  static const int kZoneFieldNumber = 6;
  inline ::google::protobuf::uint32 zone() const;
  inline void set_zone(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Chick.ChickUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_zone();
  inline void clear_has_zone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 level_;
  ::std::string* fig_;
  ::Chick::ChickHero* hero_;
  ::google::protobuf::uint32 zone_;
  friend void  protobuf_AddDesc_Chick_2eproto();
  friend void protobuf_AssignDesc_Chick_2eproto();
  friend void protobuf_ShutdownFile_Chick_2eproto();

  void InitAsDefaultInstance();
  static ChickUser* default_instance_;
};
// -------------------------------------------------------------------

class Chick : public ::google::protobuf::Message {
 public:
  Chick();
  virtual ~Chick();

  Chick(const Chick& from);

  inline Chick& operator=(const Chick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chick& default_instance();

  void Swap(Chick* other);

  // implements Message ----------------------------------------------

  Chick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chick& from);
  void MergeFrom(const Chick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Chick.ChickUser user = 1;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::Chick::ChickUser& user(int index) const;
  inline ::Chick::ChickUser* mutable_user(int index);
  inline ::Chick::ChickUser* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::Chick::ChickUser >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::Chick::ChickUser >*
      mutable_user();

  // required bool reg = 2;
  inline bool has_reg() const;
  inline void clear_reg();
  static const int kRegFieldNumber = 2;
  inline bool reg() const;
  inline void set_reg(bool value);

  // @@protoc_insertion_point(class_scope:Chick.Chick)
 private:
  inline void set_has_reg();
  inline void clear_has_reg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Chick::ChickUser > user_;
  bool reg_;
  friend void  protobuf_AddDesc_Chick_2eproto();
  friend void protobuf_AssignDesc_Chick_2eproto();
  friend void protobuf_ShutdownFile_Chick_2eproto();

  void InitAsDefaultInstance();
  static Chick* default_instance_;
};
// ===================================================================


// ===================================================================

// ChickHero

// required uint32 level = 1;
inline bool ChickHero::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChickHero::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChickHero::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChickHero::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ChickHero::level() const {
  // @@protoc_insertion_point(field_get:Chick.ChickHero.level)
  return level_;
}
inline void ChickHero::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Chick.ChickHero.level)
}

// repeated uint32 property = 2;
inline int ChickHero::property_size() const {
  return property_.size();
}
inline void ChickHero::clear_property() {
  property_.Clear();
}
inline ::google::protobuf::uint32 ChickHero::property(int index) const {
  // @@protoc_insertion_point(field_get:Chick.ChickHero.property)
  return property_.Get(index);
}
inline void ChickHero::set_property(int index, ::google::protobuf::uint32 value) {
  property_.Set(index, value);
  // @@protoc_insertion_point(field_set:Chick.ChickHero.property)
}
inline void ChickHero::add_property(::google::protobuf::uint32 value) {
  property_.Add(value);
  // @@protoc_insertion_point(field_add:Chick.ChickHero.property)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChickHero::property() const {
  // @@protoc_insertion_point(field_list:Chick.ChickHero.property)
  return property_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChickHero::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:Chick.ChickHero.property)
  return &property_;
}

// -------------------------------------------------------------------

// ChickUser

// required uint32 uid = 1;
inline bool ChickUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChickUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChickUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChickUser::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 ChickUser::uid() const {
  // @@protoc_insertion_point(field_get:Chick.ChickUser.uid)
  return uid_;
}
inline void ChickUser::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Chick.ChickUser.uid)
}

// required bytes name = 2;
inline bool ChickUser::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChickUser::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChickUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChickUser::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChickUser::name() const {
  // @@protoc_insertion_point(field_get:Chick.ChickUser.name)
  return *name_;
}
inline void ChickUser::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Chick.ChickUser.name)
}
inline void ChickUser::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Chick.ChickUser.name)
}
inline void ChickUser::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Chick.ChickUser.name)
}
inline ::std::string* ChickUser::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Chick.ChickUser.name)
  return name_;
}
inline ::std::string* ChickUser::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChickUser::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Chick.ChickUser.name)
}

// required bytes fig = 3;
inline bool ChickUser::has_fig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChickUser::set_has_fig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChickUser::clear_has_fig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChickUser::clear_fig() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& ChickUser::fig() const {
  // @@protoc_insertion_point(field_get:Chick.ChickUser.fig)
  return *fig_;
}
inline void ChickUser::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set:Chick.ChickUser.fig)
}
inline void ChickUser::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set_char:Chick.ChickUser.fig)
}
inline void ChickUser::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Chick.ChickUser.fig)
}
inline ::std::string* ChickUser::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Chick.ChickUser.fig)
  return fig_;
}
inline ::std::string* ChickUser::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChickUser::set_allocated_fig(::std::string* fig) {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (fig) {
    set_has_fig();
    fig_ = fig;
  } else {
    clear_has_fig();
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Chick.ChickUser.fig)
}

// required uint32 level = 4;
inline bool ChickUser::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChickUser::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChickUser::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChickUser::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 ChickUser::level() const {
  // @@protoc_insertion_point(field_get:Chick.ChickUser.level)
  return level_;
}
inline void ChickUser::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Chick.ChickUser.level)
}

// required .Chick.ChickHero hero = 5;
inline bool ChickUser::has_hero() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChickUser::set_has_hero() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChickUser::clear_has_hero() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChickUser::clear_hero() {
  if (hero_ != NULL) hero_->::Chick::ChickHero::Clear();
  clear_has_hero();
}
inline const ::Chick::ChickHero& ChickUser::hero() const {
  // @@protoc_insertion_point(field_get:Chick.ChickUser.hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::Chick::ChickHero* ChickUser::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::Chick::ChickHero;
  // @@protoc_insertion_point(field_mutable:Chick.ChickUser.hero)
  return hero_;
}
inline ::Chick::ChickHero* ChickUser::release_hero() {
  clear_has_hero();
  ::Chick::ChickHero* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void ChickUser::set_allocated_hero(::Chick::ChickHero* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:Chick.ChickUser.hero)
}

// required uint32 zone = 6;
inline bool ChickUser::has_zone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChickUser::set_has_zone() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChickUser::clear_has_zone() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChickUser::clear_zone() {
  zone_ = 0u;
  clear_has_zone();
}
inline ::google::protobuf::uint32 ChickUser::zone() const {
  // @@protoc_insertion_point(field_get:Chick.ChickUser.zone)
  return zone_;
}
inline void ChickUser::set_zone(::google::protobuf::uint32 value) {
  set_has_zone();
  zone_ = value;
  // @@protoc_insertion_point(field_set:Chick.ChickUser.zone)
}

// -------------------------------------------------------------------

// Chick

// repeated .Chick.ChickUser user = 1;
inline int Chick::user_size() const {
  return user_.size();
}
inline void Chick::clear_user() {
  user_.Clear();
}
inline const ::Chick::ChickUser& Chick::user(int index) const {
  // @@protoc_insertion_point(field_get:Chick.Chick.user)
  return user_.Get(index);
}
inline ::Chick::ChickUser* Chick::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:Chick.Chick.user)
  return user_.Mutable(index);
}
inline ::Chick::ChickUser* Chick::add_user() {
  // @@protoc_insertion_point(field_add:Chick.Chick.user)
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Chick::ChickUser >&
Chick::user() const {
  // @@protoc_insertion_point(field_list:Chick.Chick.user)
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::Chick::ChickUser >*
Chick::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:Chick.Chick.user)
  return &user_;
}

// required bool reg = 2;
inline bool Chick::has_reg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chick::set_has_reg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chick::clear_has_reg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chick::clear_reg() {
  reg_ = false;
  clear_has_reg();
}
inline bool Chick::reg() const {
  // @@protoc_insertion_point(field_get:Chick.Chick.reg)
  return reg_;
}
inline void Chick::set_reg(bool value) {
  set_has_reg();
  reg_ = value;
  // @@protoc_insertion_point(field_set:Chick.Chick.reg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Chick

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Chick_2eproto__INCLUDED
