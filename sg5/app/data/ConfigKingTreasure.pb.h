// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConfigKingTreasure.proto

#ifndef PROTOBUF_ConfigKingTreasure_2eproto__INCLUDED
#define PROTOBUF_ConfigKingTreasure_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "RewardConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace ConfigKingTreasure {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ConfigKingTreasure_2eproto();
void protobuf_AssignDesc_ConfigKingTreasure_2eproto();
void protobuf_ShutdownFile_ConfigKingTreasure_2eproto();

class TreasureBox;
class KingTreasure;

// ===================================================================

class TreasureBox : public ::google::protobuf::Message {
 public:
  TreasureBox();
  virtual ~TreasureBox();

  TreasureBox(const TreasureBox& from);

  inline TreasureBox& operator=(const TreasureBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreasureBox& default_instance();

  void Swap(TreasureBox* other);

  // implements Message ----------------------------------------------

  TreasureBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TreasureBox& from);
  void MergeFrom(const TreasureBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // required uint32 collect = 3;
  inline bool has_collect() const;
  inline void clear_collect();
  static const int kCollectFieldNumber = 3;
  inline ::google::protobuf::uint32 collect() const;
  inline void set_collect(::google::protobuf::uint32 value);

  // required uint32 limit = 4;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 4;
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // required .RewardConfig.RewardItemCfg reward = 5;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::RewardConfig::RewardItemCfg& reward() const;
  inline ::RewardConfig::RewardItemCfg* mutable_reward();
  inline ::RewardConfig::RewardItemCfg* release_reward();
  inline void set_allocated_reward(::RewardConfig::RewardItemCfg* reward);

  // @@protoc_insertion_point(class_scope:ConfigKingTreasure.TreasureBox)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_collect();
  inline void clear_has_collect();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::uint32 collect_;
  ::google::protobuf::uint32 limit_;
  ::RewardConfig::RewardItemCfg* reward_;
  friend void  protobuf_AddDesc_ConfigKingTreasure_2eproto();
  friend void protobuf_AssignDesc_ConfigKingTreasure_2eproto();
  friend void protobuf_ShutdownFile_ConfigKingTreasure_2eproto();

  void InitAsDefaultInstance();
  static TreasureBox* default_instance_;
};
// -------------------------------------------------------------------

class KingTreasure : public ::google::protobuf::Message {
 public:
  KingTreasure();
  virtual ~KingTreasure();

  KingTreasure(const KingTreasure& from);

  inline KingTreasure& operator=(const KingTreasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KingTreasure& default_instance();

  void Swap(KingTreasure* other);

  // implements Message ----------------------------------------------

  KingTreasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KingTreasure& from);
  void MergeFrom(const KingTreasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ConfigKingTreasure.TreasureBox king_treasures = 1;
  inline int king_treasures_size() const;
  inline void clear_king_treasures();
  static const int kKingTreasuresFieldNumber = 1;
  inline const ::ConfigKingTreasure::TreasureBox& king_treasures(int index) const;
  inline ::ConfigKingTreasure::TreasureBox* mutable_king_treasures(int index);
  inline ::ConfigKingTreasure::TreasureBox* add_king_treasures();
  inline const ::google::protobuf::RepeatedPtrField< ::ConfigKingTreasure::TreasureBox >&
      king_treasures() const;
  inline ::google::protobuf::RepeatedPtrField< ::ConfigKingTreasure::TreasureBox >*
      mutable_king_treasures();

  // required uint32 cost = 2;
  inline bool has_cost() const;
  inline void clear_cost();
  static const int kCostFieldNumber = 2;
  inline ::google::protobuf::uint32 cost() const;
  inline void set_cost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigKingTreasure.KingTreasure)
 private:
  inline void set_has_cost();
  inline void clear_has_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ConfigKingTreasure::TreasureBox > king_treasures_;
  ::google::protobuf::uint32 cost_;
  friend void  protobuf_AddDesc_ConfigKingTreasure_2eproto();
  friend void protobuf_AssignDesc_ConfigKingTreasure_2eproto();
  friend void protobuf_ShutdownFile_ConfigKingTreasure_2eproto();

  void InitAsDefaultInstance();
  static KingTreasure* default_instance_;
};
// ===================================================================


// ===================================================================

// TreasureBox

// required uint32 id = 1;
inline bool TreasureBox::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreasureBox::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreasureBox::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreasureBox::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TreasureBox::id() const {
  // @@protoc_insertion_point(field_get:ConfigKingTreasure.TreasureBox.id)
  return id_;
}
inline void TreasureBox::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ConfigKingTreasure.TreasureBox.id)
}

// required uint32 weight = 2;
inline bool TreasureBox::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreasureBox::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreasureBox::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreasureBox::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 TreasureBox::weight() const {
  // @@protoc_insertion_point(field_get:ConfigKingTreasure.TreasureBox.weight)
  return weight_;
}
inline void TreasureBox::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:ConfigKingTreasure.TreasureBox.weight)
}

// required uint32 collect = 3;
inline bool TreasureBox::has_collect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TreasureBox::set_has_collect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TreasureBox::clear_has_collect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TreasureBox::clear_collect() {
  collect_ = 0u;
  clear_has_collect();
}
inline ::google::protobuf::uint32 TreasureBox::collect() const {
  // @@protoc_insertion_point(field_get:ConfigKingTreasure.TreasureBox.collect)
  return collect_;
}
inline void TreasureBox::set_collect(::google::protobuf::uint32 value) {
  set_has_collect();
  collect_ = value;
  // @@protoc_insertion_point(field_set:ConfigKingTreasure.TreasureBox.collect)
}

// required uint32 limit = 4;
inline bool TreasureBox::has_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TreasureBox::set_has_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TreasureBox::clear_has_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TreasureBox::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TreasureBox::limit() const {
  // @@protoc_insertion_point(field_get:ConfigKingTreasure.TreasureBox.limit)
  return limit_;
}
inline void TreasureBox::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ConfigKingTreasure.TreasureBox.limit)
}

// required .RewardConfig.RewardItemCfg reward = 5;
inline bool TreasureBox::has_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TreasureBox::set_has_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TreasureBox::clear_has_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TreasureBox::clear_reward() {
  if (reward_ != NULL) reward_->::RewardConfig::RewardItemCfg::Clear();
  clear_has_reward();
}
inline const ::RewardConfig::RewardItemCfg& TreasureBox::reward() const {
  // @@protoc_insertion_point(field_get:ConfigKingTreasure.TreasureBox.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::RewardConfig::RewardItemCfg* TreasureBox::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::RewardConfig::RewardItemCfg;
  // @@protoc_insertion_point(field_mutable:ConfigKingTreasure.TreasureBox.reward)
  return reward_;
}
inline ::RewardConfig::RewardItemCfg* TreasureBox::release_reward() {
  clear_has_reward();
  ::RewardConfig::RewardItemCfg* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void TreasureBox::set_allocated_reward(::RewardConfig::RewardItemCfg* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ConfigKingTreasure.TreasureBox.reward)
}

// -------------------------------------------------------------------

// KingTreasure

// repeated .ConfigKingTreasure.TreasureBox king_treasures = 1;
inline int KingTreasure::king_treasures_size() const {
  return king_treasures_.size();
}
inline void KingTreasure::clear_king_treasures() {
  king_treasures_.Clear();
}
inline const ::ConfigKingTreasure::TreasureBox& KingTreasure::king_treasures(int index) const {
  // @@protoc_insertion_point(field_get:ConfigKingTreasure.KingTreasure.king_treasures)
  return king_treasures_.Get(index);
}
inline ::ConfigKingTreasure::TreasureBox* KingTreasure::mutable_king_treasures(int index) {
  // @@protoc_insertion_point(field_mutable:ConfigKingTreasure.KingTreasure.king_treasures)
  return king_treasures_.Mutable(index);
}
inline ::ConfigKingTreasure::TreasureBox* KingTreasure::add_king_treasures() {
  // @@protoc_insertion_point(field_add:ConfigKingTreasure.KingTreasure.king_treasures)
  return king_treasures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ConfigKingTreasure::TreasureBox >&
KingTreasure::king_treasures() const {
  // @@protoc_insertion_point(field_list:ConfigKingTreasure.KingTreasure.king_treasures)
  return king_treasures_;
}
inline ::google::protobuf::RepeatedPtrField< ::ConfigKingTreasure::TreasureBox >*
KingTreasure::mutable_king_treasures() {
  // @@protoc_insertion_point(field_mutable_list:ConfigKingTreasure.KingTreasure.king_treasures)
  return &king_treasures_;
}

// required uint32 cost = 2;
inline bool KingTreasure::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KingTreasure::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KingTreasure::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KingTreasure::clear_cost() {
  cost_ = 0u;
  clear_has_cost();
}
inline ::google::protobuf::uint32 KingTreasure::cost() const {
  // @@protoc_insertion_point(field_get:ConfigKingTreasure.KingTreasure.cost)
  return cost_;
}
inline void KingTreasure::set_cost(::google::protobuf::uint32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:ConfigKingTreasure.KingTreasure.cost)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConfigKingTreasure

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ConfigKingTreasure_2eproto__INCLUDED
