// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BraveNewWorldConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BraveNewWorldConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BraveNewWorldConfig {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_reflection_ = NULL;
const ::google::protobuf::Descriptor* City_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  City_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tech_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tech_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* BraveNewWorldConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BraveNewWorldConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BraveNewWorldConfig_2eproto() {
  protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BraveNewWorldConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, npc_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Property_descriptor_ = file->message_type(1);
  static const int Property_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, occupy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, npc_),
  };
  Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Property));
  Zone_descriptor_ = file->message_type(2);
  static const int Zone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, product_),
  };
  Zone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_descriptor_,
      Zone::default_instance_,
      Zone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone));
  City_descriptor_ = file->message_type(3);
  static const int City_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, time_),
  };
  City_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      City_descriptor_,
      City::default_instance_,
      City_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(City, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(City));
  Tech_descriptor_ = file->message_type(4);
  static const int Tech_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tech, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tech, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tech, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tech, ecost_),
  };
  Tech_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tech_descriptor_,
      Tech::default_instance_,
      Tech_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tech, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tech, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tech));
  ZoneArea_descriptor_ = file->message_type(5);
  static const int ZoneArea_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneArea, lu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneArea, rd_),
  };
  ZoneArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneArea_descriptor_,
      ZoneArea::default_instance_,
      ZoneArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneArea));
  RewardConfig_descriptor_ = file->message_type(6);
  static const int RewardConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardConfig, all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardConfig, one_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardConfig, user_),
  };
  RewardConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardConfig_descriptor_,
      RewardConfig::default_instance_,
      RewardConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardConfig));
  Mission_descriptor_ = file->message_type(7);
  static const int Mission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, alliance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, user2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, m3_),
  };
  Mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mission_descriptor_,
      Mission::default_instance_,
      Mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mission));
  Task_descriptor_ = file->message_type(8);
  static const int Task_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, require_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, count_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  BraveNewWorldConfig_descriptor_ = file->message_type(9);
  static const int BraveNewWorldConfig_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, land_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, p_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, m_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, tech_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, huoyue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, task_),
  };
  BraveNewWorldConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BraveNewWorldConfig_descriptor_,
      BraveNewWorldConfig::default_instance_,
      BraveNewWorldConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BraveNewWorldConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BraveNewWorldConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BraveNewWorldConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Property_descriptor_, &Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_descriptor_, &Zone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    City_descriptor_, &City::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tech_descriptor_, &Tech::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneArea_descriptor_, &ZoneArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardConfig_descriptor_, &RewardConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mission_descriptor_, &Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BraveNewWorldConfig_descriptor_, &BraveNewWorldConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BraveNewWorldConfig_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete Zone::default_instance_;
  delete Zone_reflection_;
  delete City::default_instance_;
  delete City_reflection_;
  delete Tech::default_instance_;
  delete Tech_reflection_;
  delete ZoneArea::default_instance_;
  delete ZoneArea_reflection_;
  delete RewardConfig::default_instance_;
  delete RewardConfig_reflection_;
  delete Mission::default_instance_;
  delete Mission_reflection_;
  delete Task::default_instance_;
  delete Task_reflection_;
  delete BraveNewWorldConfig::default_instance_;
  delete BraveNewWorldConfig_reflection_;
}

void protobuf_AddDesc_BraveNewWorldConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031BraveNewWorldConfig.proto\022\023BraveNewWor"
    "ldConfig\"G\n\005Point\022\t\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\022"
    "\014\n\004type\030\003 \002(\r\022\r\n\005level\030\004 \002(\r\022\013\n\003npc\030\005 \002("
    "\r\"U\n\010Property\022\014\n\004type\030\001 \002(\r\022\r\n\005level\030\002 \002"
    "(\r\022\016\n\006occupy\030\003 \002(\r\022\017\n\007product\030\004 \002(\r\022\013\n\003n"
    "pc\030\005 \003(\r\"&\n\004Zone\022\r\n\005level\030\001 \002(\r\022\017\n\007produ"
    "ct\030\002 \002(\r\"1\n\004City\022\r\n\005level\030\001 \002(\r\022\014\n\004need\030"
    "\002 \002(\r\022\014\n\004time\030\003 \002(\r\">\n\004Tech\022\014\n\004cost\030\001 \002("
    "\r\022\n\n\002cd\030\002 \002(\r\022\r\n\005value\030\003 \003(\r\022\r\n\005ecost\030\004 "
    "\001(\r\"\"\n\010ZoneArea\022\n\n\002lu\030\001 \003(\r\022\n\n\002rd\030\002 \003(\r\""
    "6\n\014RewardConfig\022\013\n\003all\030\001 \003(\r\022\013\n\003one\030\002 \003("
    "\r\022\014\n\004user\030\003 \002(\r\"N\n\007Mission\022\020\n\010alliance\030\001"
    " \003(\r\022\r\n\005user2\030\002 \002(\r\022\n\n\002m1\030\003 \002(\r\022\n\n\002m2\030\004 "
    "\002(\r\022\n\n\002m3\030\005 \002(\r\"@\n\004Task\022\n\n\002id\030\001 \002(\r\022\017\n\007r"
    "equire\030\002 \002(\r\022\014\n\004eqid\030\003 \003(\r\022\r\n\005count\030\004 \003("
    "\r\"\323\003\n\023BraveNewWorldConfig\022(\n\004land\030\001 \003(\0132"
    "\032.BraveNewWorldConfig.Point\022-\n\006config\030\002 "
    "\003(\0132\035.BraveNewWorldConfig.Property\022\'\n\004zo"
    "ne\030\003 \003(\0132\031.BraveNewWorldConfig.Zone\022\'\n\004c"
    "ity\030\004 \003(\0132\031.BraveNewWorldConfig.City\022\017\n\007"
    "p_limit\030\005 \003(\r\022\017\n\007m_limit\030\006 \003(\r\022\'\n\004tech\030\007"
    " \003(\0132\031.BraveNewWorldConfig.Tech\022+\n\004area\030"
    "\010 \003(\0132\035.BraveNewWorldConfig.ZoneArea\0221\n\006"
    "reward\030\t \002(\0132!.BraveNewWorldConfig.Rewar"
    "dConfig\022-\n\007mission\030\n \002(\0132\034.BraveNewWorld"
    "Config.Mission\022\016\n\006huoyue\030\013 \003(\r\022\'\n\004task\030\014"
    " \003(\0132\031.BraveNewWorldConfig.Task", 1071);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BraveNewWorldConfig.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  Property::default_instance_ = new Property();
  Zone::default_instance_ = new Zone();
  City::default_instance_ = new City();
  Tech::default_instance_ = new Tech();
  ZoneArea::default_instance_ = new ZoneArea();
  RewardConfig::default_instance_ = new RewardConfig();
  Mission::default_instance_ = new Mission();
  Task::default_instance_ = new Task();
  BraveNewWorldConfig::default_instance_ = new BraveNewWorldConfig();
  Point::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  Zone::default_instance_->InitAsDefaultInstance();
  City::default_instance_->InitAsDefaultInstance();
  Tech::default_instance_->InitAsDefaultInstance();
  ZoneArea::default_instance_->InitAsDefaultInstance();
  RewardConfig::default_instance_->InitAsDefaultInstance();
  Mission::default_instance_->InitAsDefaultInstance();
  Task::default_instance_->InitAsDefaultInstance();
  BraveNewWorldConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BraveNewWorldConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BraveNewWorldConfig_2eproto {
  StaticDescriptorInitializer_BraveNewWorldConfig_2eproto() {
    protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  }
} static_descriptor_initializer_BraveNewWorldConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kTypeFieldNumber;
const int Point::kLevelFieldNumber;
const int Point::kNpcFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  type_ = 0u;
  level_ = 0u;
  npc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, npc_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (tag == 32) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_npc;
        break;
      }

      // required uint32 npc = 5;
      case 5: {
        if (tag == 40) {
         parse_npc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_)));
          set_has_npc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.Point)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 npc = 5;
  if (has_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->npc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.Point)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint32 npc = 5;
  if (has_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->npc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 npc = 5;
    if (has_npc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_npc()) {
      set_npc(from.npc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(npc_, other->npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Property::kTypeFieldNumber;
const int Property::kLevelFieldNumber;
const int Property::kOccupyFieldNumber;
const int Property::kProductFieldNumber;
const int Property::kNpcFieldNumber;
#endif  // !_MSC_VER

Property::Property()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.Property)
}

void Property::InitAsDefaultInstance() {
}

Property::Property(const Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.Property)
}

void Property::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  level_ = 0u;
  occupy_ = 0u;
  product_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.Property)
  SharedDtor();
}

void Property::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New() const {
  return new Property;
}

void Property::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Property*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, product_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  npc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.Property)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_occupy;
        break;
      }

      // required uint32 occupy = 3;
      case 3: {
        if (tag == 24) {
         parse_occupy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupy_)));
          set_has_occupy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_product;
        break;
      }

      // required uint32 product = 4;
      case 4: {
        if (tag == 32) {
         parse_product:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_)));
          set_has_product();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_npc;
        break;
      }

      // repeated uint32 npc = 5;
      case 5: {
        if (tag == 40) {
         parse_npc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_npc())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_npc())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_npc;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.Property)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.Property)
  return false;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.Property)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 occupy = 3;
  if (has_occupy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->occupy(), output);
  }

  // required uint32 product = 4;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->product(), output);
  }

  // repeated uint32 npc = 5;
  for (int i = 0; i < this->npc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->npc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.Property)
}

::google::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.Property)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 occupy = 3;
  if (has_occupy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->occupy(), target);
  }

  // required uint32 product = 4;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->product(), target);
  }

  // repeated uint32 npc = 5;
  for (int i = 0; i < this->npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->npc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.Property)
  return target;
}

int Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 occupy = 3;
    if (has_occupy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupy());
    }

    // required uint32 product = 4;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product());
    }

  }
  // repeated uint32 npc = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->npc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->npc(i));
    }
    total_size += 1 * this->npc_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_.MergeFrom(from.npc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_occupy()) {
      set_occupy(from.occupy());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Property::Swap(Property* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(occupy_, other->occupy_);
    std::swap(product_, other->product_);
    npc_.Swap(&other->npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone::kLevelFieldNumber;
const int Zone::kProductFieldNumber;
#endif  // !_MSC_VER

Zone::Zone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.Zone)
}

void Zone::InitAsDefaultInstance() {
}

Zone::Zone(const Zone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.Zone)
}

void Zone::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  product_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone::~Zone() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.Zone)
  SharedDtor();
}

void Zone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_descriptor_;
}

const Zone& Zone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

Zone* Zone::default_instance_ = NULL;

Zone* Zone::New() const {
  return new Zone;
}

void Zone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Zone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, product_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.Zone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_product;
        break;
      }

      // required uint32 product = 2;
      case 2: {
        if (tag == 16) {
         parse_product:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_)));
          set_has_product();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.Zone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.Zone)
  return false;
#undef DO_
}

void Zone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.Zone)
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 product = 2;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->product(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.Zone)
}

::google::protobuf::uint8* Zone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.Zone)
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 product = 2;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->product(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.Zone)
  return target;
}

int Zone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 product = 2;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone::MergeFrom(const Zone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone::CopyFrom(const Zone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Zone::Swap(Zone* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(product_, other->product_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_descriptor_;
  metadata.reflection = Zone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int City::kLevelFieldNumber;
const int City::kNeedFieldNumber;
const int City::kTimeFieldNumber;
#endif  // !_MSC_VER

City::City()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.City)
}

void City::InitAsDefaultInstance() {
}

City::City(const City& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.City)
}

void City::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  need_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

City::~City() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.City)
  SharedDtor();
}

void City::SharedDtor() {
  if (this != default_instance_) {
  }
}

void City::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* City::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return City_descriptor_;
}

const City& City::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

City* City::default_instance_ = NULL;

City* City::New() const {
  return new City;
}

void City::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<City*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool City::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.City)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_need;
        break;
      }

      // required uint32 need = 2;
      case 2: {
        if (tag == 16) {
         parse_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_)));
          set_has_need();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.City)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.City)
  return false;
#undef DO_
}

void City::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.City)
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 need = 2;
  if (has_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->need(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.City)
}

::google::protobuf::uint8* City::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.City)
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 need = 2;
  if (has_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->need(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.City)
  return target;
}

int City::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 need = 2;
    if (has_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void City::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const City* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const City*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void City::MergeFrom(const City& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_need()) {
      set_need(from.need());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void City::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void City::CopyFrom(const City& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool City::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void City::Swap(City* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(need_, other->need_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata City::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = City_descriptor_;
  metadata.reflection = City_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tech::kCostFieldNumber;
const int Tech::kCdFieldNumber;
const int Tech::kValueFieldNumber;
const int Tech::kEcostFieldNumber;
#endif  // !_MSC_VER

Tech::Tech()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.Tech)
}

void Tech::InitAsDefaultInstance() {
}

Tech::Tech(const Tech& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.Tech)
}

void Tech::SharedCtor() {
  _cached_size_ = 0;
  cost_ = 0u;
  cd_ = 0u;
  ecost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tech::~Tech() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.Tech)
  SharedDtor();
}

void Tech::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tech::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tech::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tech_descriptor_;
}

const Tech& Tech::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

Tech* Tech::default_instance_ = NULL;

Tech* Tech::New() const {
  return new Tech;
}

void Tech::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Tech*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(cost_, cd_);
    ecost_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tech::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.Tech)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // required uint32 cd = 2;
      case 2: {
        if (tag == 16) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // repeated uint32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_value())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        if (input->ExpectTag(32)) goto parse_ecost;
        break;
      }

      // optional uint32 ecost = 4;
      case 4: {
        if (tag == 32) {
         parse_ecost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ecost_)));
          set_has_ecost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.Tech)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.Tech)
  return false;
#undef DO_
}

void Tech::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.Tech)
  // required uint32 cost = 1;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost(), output);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cd(), output);
  }

  // repeated uint32 value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->value(i), output);
  }

  // optional uint32 ecost = 4;
  if (has_ecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ecost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.Tech)
}

::google::protobuf::uint8* Tech::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.Tech)
  // required uint32 cost = 1;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost(), target);
  }

  // required uint32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cd(), target);
  }

  // repeated uint32 value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->value(i), target);
  }

  // optional uint32 ecost = 4;
  if (has_ecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ecost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.Tech)
  return target;
}

int Tech::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cost = 1;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required uint32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // optional uint32 ecost = 4;
    if (has_ecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ecost());
    }

  }
  // repeated uint32 value = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tech::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tech* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tech*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tech::MergeFrom(const Tech& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_ecost()) {
      set_ecost(from.ecost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tech::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tech::CopyFrom(const Tech& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tech::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Tech::Swap(Tech* other) {
  if (other != this) {
    std::swap(cost_, other->cost_);
    std::swap(cd_, other->cd_);
    value_.Swap(&other->value_);
    std::swap(ecost_, other->ecost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tech::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tech_descriptor_;
  metadata.reflection = Tech_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneArea::kLuFieldNumber;
const int ZoneArea::kRdFieldNumber;
#endif  // !_MSC_VER

ZoneArea::ZoneArea()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.ZoneArea)
}

void ZoneArea::InitAsDefaultInstance() {
}

ZoneArea::ZoneArea(const ZoneArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.ZoneArea)
}

void ZoneArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneArea::~ZoneArea() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.ZoneArea)
  SharedDtor();
}

void ZoneArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneArea_descriptor_;
}

const ZoneArea& ZoneArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

ZoneArea* ZoneArea::default_instance_ = NULL;

ZoneArea* ZoneArea::New() const {
  return new ZoneArea;
}

void ZoneArea::Clear() {
  lu_.Clear();
  rd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.ZoneArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 lu = 1;
      case 1: {
        if (tag == 8) {
         parse_lu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_lu())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_lu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_lu;
        if (input->ExpectTag(16)) goto parse_rd;
        break;
      }

      // repeated uint32 rd = 2;
      case 2: {
        if (tag == 16) {
         parse_rd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_rd())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rd())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rd;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.ZoneArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.ZoneArea)
  return false;
#undef DO_
}

void ZoneArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.ZoneArea)
  // repeated uint32 lu = 1;
  for (int i = 0; i < this->lu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->lu(i), output);
  }

  // repeated uint32 rd = 2;
  for (int i = 0; i < this->rd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->rd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.ZoneArea)
}

::google::protobuf::uint8* ZoneArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.ZoneArea)
  // repeated uint32 lu = 1;
  for (int i = 0; i < this->lu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->lu(i), target);
  }

  // repeated uint32 rd = 2;
  for (int i = 0; i < this->rd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->rd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.ZoneArea)
  return target;
}

int ZoneArea::ByteSize() const {
  int total_size = 0;

  // repeated uint32 lu = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->lu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->lu(i));
    }
    total_size += 1 * this->lu_size() + data_size;
  }

  // repeated uint32 rd = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rd(i));
    }
    total_size += 1 * this->rd_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneArea::MergeFrom(const ZoneArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  lu_.MergeFrom(from.lu_);
  rd_.MergeFrom(from.rd_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneArea::CopyFrom(const ZoneArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneArea::IsInitialized() const {

  return true;
}

void ZoneArea::Swap(ZoneArea* other) {
  if (other != this) {
    lu_.Swap(&other->lu_);
    rd_.Swap(&other->rd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneArea_descriptor_;
  metadata.reflection = ZoneArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardConfig::kAllFieldNumber;
const int RewardConfig::kOneFieldNumber;
const int RewardConfig::kUserFieldNumber;
#endif  // !_MSC_VER

RewardConfig::RewardConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.RewardConfig)
}

void RewardConfig::InitAsDefaultInstance() {
}

RewardConfig::RewardConfig(const RewardConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.RewardConfig)
}

void RewardConfig::SharedCtor() {
  _cached_size_ = 0;
  user_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardConfig::~RewardConfig() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.RewardConfig)
  SharedDtor();
}

void RewardConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardConfig_descriptor_;
}

const RewardConfig& RewardConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

RewardConfig* RewardConfig::default_instance_ = NULL;

RewardConfig* RewardConfig::New() const {
  return new RewardConfig;
}

void RewardConfig::Clear() {
  user_ = 0u;
  all_.Clear();
  one_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.RewardConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 all = 1;
      case 1: {
        if (tag == 8) {
         parse_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_all())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_all())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_all;
        if (input->ExpectTag(16)) goto parse_one;
        break;
      }

      // repeated uint32 one = 2;
      case 2: {
        if (tag == 16) {
         parse_one:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_one())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_one())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_one;
        if (input->ExpectTag(24)) goto parse_user;
        break;
      }

      // required uint32 user = 3;
      case 3: {
        if (tag == 24) {
         parse_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_)));
          set_has_user();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.RewardConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.RewardConfig)
  return false;
#undef DO_
}

void RewardConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.RewardConfig)
  // repeated uint32 all = 1;
  for (int i = 0; i < this->all_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->all(i), output);
  }

  // repeated uint32 one = 2;
  for (int i = 0; i < this->one_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->one(i), output);
  }

  // required uint32 user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.RewardConfig)
}

::google::protobuf::uint8* RewardConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.RewardConfig)
  // repeated uint32 all = 1;
  for (int i = 0; i < this->all_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->all(i), target);
  }

  // repeated uint32 one = 2;
  for (int i = 0; i < this->one_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->one(i), target);
  }

  // required uint32 user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.RewardConfig)
  return target;
}

int RewardConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user());
    }

  }
  // repeated uint32 all = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->all_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->all(i));
    }
    total_size += 1 * this->all_size() + data_size;
  }

  // repeated uint32 one = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->one_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->one(i));
    }
    total_size += 1 * this->one_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardConfig::MergeFrom(const RewardConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_.MergeFrom(from.all_);
  one_.MergeFrom(from.one_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardConfig::CopyFrom(const RewardConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void RewardConfig::Swap(RewardConfig* other) {
  if (other != this) {
    all_.Swap(&other->all_);
    one_.Swap(&other->one_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardConfig_descriptor_;
  metadata.reflection = RewardConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mission::kAllianceFieldNumber;
const int Mission::kUser2FieldNumber;
const int Mission::kM1FieldNumber;
const int Mission::kM2FieldNumber;
const int Mission::kM3FieldNumber;
#endif  // !_MSC_VER

Mission::Mission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.Mission)
}

void Mission::InitAsDefaultInstance() {
}

Mission::Mission(const Mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.Mission)
}

void Mission::SharedCtor() {
  _cached_size_ = 0;
  user2_ = 0u;
  m1_ = 0u;
  m2_ = 0u;
  m3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.Mission)
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_descriptor_;
}

const Mission& Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

Mission* Mission::default_instance_ = NULL;

Mission* Mission::New() const {
  return new Mission;
}

void Mission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Mission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(user2_, m3_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  alliance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.Mission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 alliance = 1;
      case 1: {
        if (tag == 8) {
         parse_alliance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_alliance())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_alliance())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_alliance;
        if (input->ExpectTag(16)) goto parse_user2;
        break;
      }

      // required uint32 user2 = 2;
      case 2: {
        if (tag == 16) {
         parse_user2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user2_)));
          set_has_user2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m1;
        break;
      }

      // required uint32 m1 = 3;
      case 3: {
        if (tag == 24) {
         parse_m1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m1_)));
          set_has_m1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m2;
        break;
      }

      // required uint32 m2 = 4;
      case 4: {
        if (tag == 32) {
         parse_m2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m2_)));
          set_has_m2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m3;
        break;
      }

      // required uint32 m3 = 5;
      case 5: {
        if (tag == 40) {
         parse_m3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m3_)));
          set_has_m3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.Mission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.Mission)
  return false;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.Mission)
  // repeated uint32 alliance = 1;
  for (int i = 0; i < this->alliance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->alliance(i), output);
  }

  // required uint32 user2 = 2;
  if (has_user2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user2(), output);
  }

  // required uint32 m1 = 3;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->m1(), output);
  }

  // required uint32 m2 = 4;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->m2(), output);
  }

  // required uint32 m3 = 5;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->m3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.Mission)
}

::google::protobuf::uint8* Mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.Mission)
  // repeated uint32 alliance = 1;
  for (int i = 0; i < this->alliance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->alliance(i), target);
  }

  // required uint32 user2 = 2;
  if (has_user2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user2(), target);
  }

  // required uint32 m1 = 3;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->m1(), target);
  }

  // required uint32 m2 = 4;
  if (has_m2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->m2(), target);
  }

  // required uint32 m3 = 5;
  if (has_m3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->m3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.Mission)
  return target;
}

int Mission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 user2 = 2;
    if (has_user2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user2());
    }

    // required uint32 m1 = 3;
    if (has_m1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m1());
    }

    // required uint32 m2 = 4;
    if (has_m2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m2());
    }

    // required uint32 m3 = 5;
    if (has_m3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m3());
    }

  }
  // repeated uint32 alliance = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->alliance_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->alliance(i));
    }
    total_size += 1 * this->alliance_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  alliance_.MergeFrom(from.alliance_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_user2()) {
      set_user2(from.user2());
    }
    if (from.has_m1()) {
      set_m1(from.m1());
    }
    if (from.has_m2()) {
      set_m2(from.m2());
    }
    if (from.has_m3()) {
      set_m3(from.m3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void Mission::Swap(Mission* other) {
  if (other != this) {
    alliance_.Swap(&other->alliance_);
    std::swap(user2_, other->user2_);
    std::swap(m1_, other->m1_);
    std::swap(m2_, other->m2_);
    std::swap(m3_, other->m3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mission_descriptor_;
  metadata.reflection = Mission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Task::kIdFieldNumber;
const int Task::kRequireFieldNumber;
const int Task::kEqidFieldNumber;
const int Task::kCountFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.Task)
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.Task)
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  require_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Task*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, require_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  eqid_.Clear();
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_require;
        break;
      }

      // required uint32 require = 2;
      case 2: {
        if (tag == 16) {
         parse_require:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &require_)));
          set_has_require();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eqid;
        break;
      }

      // repeated uint32 eqid = 3;
      case 3: {
        if (tag == 24) {
         parse_eqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_eqid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eqid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eqid;
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // repeated uint32 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_count())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_count())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.Task)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 require = 2;
  if (has_require()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->require(), output);
  }

  // repeated uint32 eqid = 3;
  for (int i = 0; i < this->eqid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->eqid(i), output);
  }

  // repeated uint32 count = 4;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.Task)
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.Task)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 require = 2;
  if (has_require()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->require(), target);
  }

  // repeated uint32 eqid = 3;
  for (int i = 0; i < this->eqid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->eqid(i), target);
  }

  // repeated uint32 count = 4;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.Task)
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 require = 2;
    if (has_require()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->require());
    }

  }
  // repeated uint32 eqid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->eqid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->eqid(i));
    }
    total_size += 1 * this->eqid_size() + data_size;
  }

  // repeated uint32 count = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->count(i));
    }
    total_size += 1 * this->count_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  eqid_.MergeFrom(from.eqid_);
  count_.MergeFrom(from.count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_require()) {
      set_require(from.require());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(require_, other->require_);
    eqid_.Swap(&other->eqid_);
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BraveNewWorldConfig::kLandFieldNumber;
const int BraveNewWorldConfig::kConfigFieldNumber;
const int BraveNewWorldConfig::kZoneFieldNumber;
const int BraveNewWorldConfig::kCityFieldNumber;
const int BraveNewWorldConfig::kPLimitFieldNumber;
const int BraveNewWorldConfig::kMLimitFieldNumber;
const int BraveNewWorldConfig::kTechFieldNumber;
const int BraveNewWorldConfig::kAreaFieldNumber;
const int BraveNewWorldConfig::kRewardFieldNumber;
const int BraveNewWorldConfig::kMissionFieldNumber;
const int BraveNewWorldConfig::kHuoyueFieldNumber;
const int BraveNewWorldConfig::kTaskFieldNumber;
#endif  // !_MSC_VER

BraveNewWorldConfig::BraveNewWorldConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BraveNewWorldConfig.BraveNewWorldConfig)
}

void BraveNewWorldConfig::InitAsDefaultInstance() {
  reward_ = const_cast< ::BraveNewWorldConfig::RewardConfig*>(&::BraveNewWorldConfig::RewardConfig::default_instance());
  mission_ = const_cast< ::BraveNewWorldConfig::Mission*>(&::BraveNewWorldConfig::Mission::default_instance());
}

BraveNewWorldConfig::BraveNewWorldConfig(const BraveNewWorldConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BraveNewWorldConfig.BraveNewWorldConfig)
}

void BraveNewWorldConfig::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  mission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BraveNewWorldConfig::~BraveNewWorldConfig() {
  // @@protoc_insertion_point(destructor:BraveNewWorldConfig.BraveNewWorldConfig)
  SharedDtor();
}

void BraveNewWorldConfig::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
    delete mission_;
  }
}

void BraveNewWorldConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BraveNewWorldConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BraveNewWorldConfig_descriptor_;
}

const BraveNewWorldConfig& BraveNewWorldConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BraveNewWorldConfig_2eproto();
  return *default_instance_;
}

BraveNewWorldConfig* BraveNewWorldConfig::default_instance_ = NULL;

BraveNewWorldConfig* BraveNewWorldConfig::New() const {
  return new BraveNewWorldConfig;
}

void BraveNewWorldConfig::Clear() {
  if (_has_bits_[8 / 32] & 768) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::BraveNewWorldConfig::RewardConfig::Clear();
    }
    if (has_mission()) {
      if (mission_ != NULL) mission_->::BraveNewWorldConfig::Mission::Clear();
    }
  }
  land_.Clear();
  config_.Clear();
  zone_.Clear();
  city_.Clear();
  p_limit_.Clear();
  m_limit_.Clear();
  tech_.Clear();
  area_.Clear();
  huoyue_.Clear();
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BraveNewWorldConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BraveNewWorldConfig.BraveNewWorldConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BraveNewWorldConfig.Point land = 1;
      case 1: {
        if (tag == 10) {
         parse_land:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_land()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_land;
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // repeated .BraveNewWorldConfig.Property config = 2;
      case 2: {
        if (tag == 18) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config;
        if (input->ExpectTag(26)) goto parse_zone;
        break;
      }

      // repeated .BraveNewWorldConfig.Zone zone = 3;
      case 3: {
        if (tag == 26) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zone;
        if (input->ExpectTag(34)) goto parse_city;
        break;
      }

      // repeated .BraveNewWorldConfig.City city = 4;
      case 4: {
        if (tag == 34) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_city;
        if (input->ExpectTag(40)) goto parse_p_limit;
        break;
      }

      // repeated uint32 p_limit = 5;
      case 5: {
        if (tag == 40) {
         parse_p_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_p_limit())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_p_limit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_p_limit;
        if (input->ExpectTag(48)) goto parse_m_limit;
        break;
      }

      // repeated uint32 m_limit = 6;
      case 6: {
        if (tag == 48) {
         parse_m_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_m_limit())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_m_limit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_limit;
        if (input->ExpectTag(58)) goto parse_tech;
        break;
      }

      // repeated .BraveNewWorldConfig.Tech tech = 7;
      case 7: {
        if (tag == 58) {
         parse_tech:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tech()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tech;
        if (input->ExpectTag(66)) goto parse_area;
        break;
      }

      // repeated .BraveNewWorldConfig.ZoneArea area = 8;
      case 8: {
        if (tag == 66) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_area;
        if (input->ExpectTag(74)) goto parse_reward;
        break;
      }

      // required .BraveNewWorldConfig.RewardConfig reward = 9;
      case 9: {
        if (tag == 74) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mission;
        break;
      }

      // required .BraveNewWorldConfig.Mission mission = 10;
      case 10: {
        if (tag == 82) {
         parse_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_huoyue;
        break;
      }

      // repeated uint32 huoyue = 11;
      case 11: {
        if (tag == 88) {
         parse_huoyue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_huoyue())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_huoyue())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_huoyue;
        if (input->ExpectTag(98)) goto parse_task;
        break;
      }

      // repeated .BraveNewWorldConfig.Task task = 12;
      case 12: {
        if (tag == 98) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_task;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BraveNewWorldConfig.BraveNewWorldConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BraveNewWorldConfig.BraveNewWorldConfig)
  return false;
#undef DO_
}

void BraveNewWorldConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BraveNewWorldConfig.BraveNewWorldConfig)
  // repeated .BraveNewWorldConfig.Point land = 1;
  for (int i = 0; i < this->land_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->land(i), output);
  }

  // repeated .BraveNewWorldConfig.Property config = 2;
  for (int i = 0; i < this->config_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->config(i), output);
  }

  // repeated .BraveNewWorldConfig.Zone zone = 3;
  for (int i = 0; i < this->zone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zone(i), output);
  }

  // repeated .BraveNewWorldConfig.City city = 4;
  for (int i = 0; i < this->city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->city(i), output);
  }

  // repeated uint32 p_limit = 5;
  for (int i = 0; i < this->p_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->p_limit(i), output);
  }

  // repeated uint32 m_limit = 6;
  for (int i = 0; i < this->m_limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->m_limit(i), output);
  }

  // repeated .BraveNewWorldConfig.Tech tech = 7;
  for (int i = 0; i < this->tech_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tech(i), output);
  }

  // repeated .BraveNewWorldConfig.ZoneArea area = 8;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->area(i), output);
  }

  // required .BraveNewWorldConfig.RewardConfig reward = 9;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->reward(), output);
  }

  // required .BraveNewWorldConfig.Mission mission = 10;
  if (has_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mission(), output);
  }

  // repeated uint32 huoyue = 11;
  for (int i = 0; i < this->huoyue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->huoyue(i), output);
  }

  // repeated .BraveNewWorldConfig.Task task = 12;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->task(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BraveNewWorldConfig.BraveNewWorldConfig)
}

::google::protobuf::uint8* BraveNewWorldConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BraveNewWorldConfig.BraveNewWorldConfig)
  // repeated .BraveNewWorldConfig.Point land = 1;
  for (int i = 0; i < this->land_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->land(i), target);
  }

  // repeated .BraveNewWorldConfig.Property config = 2;
  for (int i = 0; i < this->config_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->config(i), target);
  }

  // repeated .BraveNewWorldConfig.Zone zone = 3;
  for (int i = 0; i < this->zone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zone(i), target);
  }

  // repeated .BraveNewWorldConfig.City city = 4;
  for (int i = 0; i < this->city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->city(i), target);
  }

  // repeated uint32 p_limit = 5;
  for (int i = 0; i < this->p_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->p_limit(i), target);
  }

  // repeated uint32 m_limit = 6;
  for (int i = 0; i < this->m_limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->m_limit(i), target);
  }

  // repeated .BraveNewWorldConfig.Tech tech = 7;
  for (int i = 0; i < this->tech_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tech(i), target);
  }

  // repeated .BraveNewWorldConfig.ZoneArea area = 8;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->area(i), target);
  }

  // required .BraveNewWorldConfig.RewardConfig reward = 9;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->reward(), target);
  }

  // required .BraveNewWorldConfig.Mission mission = 10;
  if (has_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mission(), target);
  }

  // repeated uint32 huoyue = 11;
  for (int i = 0; i < this->huoyue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->huoyue(i), target);
  }

  // repeated .BraveNewWorldConfig.Task task = 12;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->task(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BraveNewWorldConfig.BraveNewWorldConfig)
  return target;
}

int BraveNewWorldConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .BraveNewWorldConfig.RewardConfig reward = 9;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // required .BraveNewWorldConfig.Mission mission = 10;
    if (has_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission());
    }

  }
  // repeated .BraveNewWorldConfig.Point land = 1;
  total_size += 1 * this->land_size();
  for (int i = 0; i < this->land_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->land(i));
  }

  // repeated .BraveNewWorldConfig.Property config = 2;
  total_size += 1 * this->config_size();
  for (int i = 0; i < this->config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->config(i));
  }

  // repeated .BraveNewWorldConfig.Zone zone = 3;
  total_size += 1 * this->zone_size();
  for (int i = 0; i < this->zone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zone(i));
  }

  // repeated .BraveNewWorldConfig.City city = 4;
  total_size += 1 * this->city_size();
  for (int i = 0; i < this->city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city(i));
  }

  // repeated uint32 p_limit = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->p_limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->p_limit(i));
    }
    total_size += 1 * this->p_limit_size() + data_size;
  }

  // repeated uint32 m_limit = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->m_limit(i));
    }
    total_size += 1 * this->m_limit_size() + data_size;
  }

  // repeated .BraveNewWorldConfig.Tech tech = 7;
  total_size += 1 * this->tech_size();
  for (int i = 0; i < this->tech_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tech(i));
  }

  // repeated .BraveNewWorldConfig.ZoneArea area = 8;
  total_size += 1 * this->area_size();
  for (int i = 0; i < this->area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area(i));
  }

  // repeated uint32 huoyue = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->huoyue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->huoyue(i));
    }
    total_size += 1 * this->huoyue_size() + data_size;
  }

  // repeated .BraveNewWorldConfig.Task task = 12;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BraveNewWorldConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BraveNewWorldConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BraveNewWorldConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BraveNewWorldConfig::MergeFrom(const BraveNewWorldConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  land_.MergeFrom(from.land_);
  config_.MergeFrom(from.config_);
  zone_.MergeFrom(from.zone_);
  city_.MergeFrom(from.city_);
  p_limit_.MergeFrom(from.p_limit_);
  m_limit_.MergeFrom(from.m_limit_);
  tech_.MergeFrom(from.tech_);
  area_.MergeFrom(from.area_);
  huoyue_.MergeFrom(from.huoyue_);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::BraveNewWorldConfig::RewardConfig::MergeFrom(from.reward());
    }
    if (from.has_mission()) {
      mutable_mission()->::BraveNewWorldConfig::Mission::MergeFrom(from.mission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BraveNewWorldConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BraveNewWorldConfig::CopyFrom(const BraveNewWorldConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BraveNewWorldConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000300) != 0x00000300) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->land())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->config())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->zone())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->city())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tech())) return false;
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  if (has_mission()) {
    if (!this->mission().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->task())) return false;
  return true;
}

void BraveNewWorldConfig::Swap(BraveNewWorldConfig* other) {
  if (other != this) {
    land_.Swap(&other->land_);
    config_.Swap(&other->config_);
    zone_.Swap(&other->zone_);
    city_.Swap(&other->city_);
    p_limit_.Swap(&other->p_limit_);
    m_limit_.Swap(&other->m_limit_);
    tech_.Swap(&other->tech_);
    area_.Swap(&other->area_);
    std::swap(reward_, other->reward_);
    std::swap(mission_, other->mission_);
    huoyue_.Swap(&other->huoyue_);
    task_.Swap(&other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BraveNewWorldConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BraveNewWorldConfig_descriptor_;
  metadata.reflection = BraveNewWorldConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BraveNewWorldConfig

// @@protoc_insertion_point(global_scope)
