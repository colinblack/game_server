// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrowdFunding.proto

#ifndef PROTOBUF_CrowdFunding_2eproto__INCLUDED
#define PROTOBUF_CrowdFunding_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CrowdFunding {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CrowdFunding_2eproto();
void protobuf_AssignDesc_CrowdFunding_2eproto();
void protobuf_ShutdownFile_CrowdFunding_2eproto();

class CrowdFundingUser;
class CrowdFundingItem;
class CrowdFunding;

// ===================================================================

class CrowdFundingUser : public ::google::protobuf::Message {
 public:
  CrowdFundingUser();
  virtual ~CrowdFundingUser();

  CrowdFundingUser(const CrowdFundingUser& from);

  inline CrowdFundingUser& operator=(const CrowdFundingUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrowdFundingUser& default_instance();

  void Swap(CrowdFundingUser* other);

  // implements Message ----------------------------------------------

  CrowdFundingUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrowdFundingUser& from);
  void MergeFrom(const CrowdFundingUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 had = 2;
  inline bool has_had() const;
  inline void clear_had();
  static const int kHadFieldNumber = 2;
  inline ::google::protobuf::uint32 had() const;
  inline void set_had(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CrowdFunding.CrowdFundingUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_had();
  inline void clear_has_had();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 had_;
  friend void  protobuf_AddDesc_CrowdFunding_2eproto();
  friend void protobuf_AssignDesc_CrowdFunding_2eproto();
  friend void protobuf_ShutdownFile_CrowdFunding_2eproto();

  void InitAsDefaultInstance();
  static CrowdFundingUser* default_instance_;
};
// -------------------------------------------------------------------

class CrowdFundingItem : public ::google::protobuf::Message {
 public:
  CrowdFundingItem();
  virtual ~CrowdFundingItem();

  CrowdFundingItem(const CrowdFundingItem& from);

  inline CrowdFundingItem& operator=(const CrowdFundingItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrowdFundingItem& default_instance();

  void Swap(CrowdFundingItem* other);

  // implements Message ----------------------------------------------

  CrowdFundingItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrowdFundingItem& from);
  void MergeFrom(const CrowdFundingItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required uint32 need = 3;
  inline bool has_need() const;
  inline void clear_need();
  static const int kNeedFieldNumber = 3;
  inline ::google::protobuf::uint32 need() const;
  inline void set_need(::google::protobuf::uint32 value);

  // required uint32 had = 4;
  inline bool has_had() const;
  inline void clear_had();
  static const int kHadFieldNumber = 4;
  inline ::google::protobuf::uint32 had() const;
  inline void set_had(::google::protobuf::uint32 value);

  // required uint32 lastuid = 5;
  inline bool has_lastuid() const;
  inline void clear_lastuid();
  static const int kLastuidFieldNumber = 5;
  inline ::google::protobuf::uint32 lastuid() const;
  inline void set_lastuid(::google::protobuf::uint32 value);

  // required string lastname = 6;
  inline bool has_lastname() const;
  inline void clear_lastname();
  static const int kLastnameFieldNumber = 6;
  inline const ::std::string& lastname() const;
  inline void set_lastname(const ::std::string& value);
  inline void set_lastname(const char* value);
  inline void set_lastname(const char* value, size_t size);
  inline ::std::string* mutable_lastname();
  inline ::std::string* release_lastname();
  inline void set_allocated_lastname(::std::string* lastname);

  // required uint32 lasthad = 7;
  inline bool has_lasthad() const;
  inline void clear_lasthad();
  static const int kLasthadFieldNumber = 7;
  inline ::google::protobuf::uint32 lasthad() const;
  inline void set_lasthad(::google::protobuf::uint32 value);

  // repeated .CrowdFunding.CrowdFundingUser user = 8;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 8;
  inline const ::CrowdFunding::CrowdFundingUser& user(int index) const;
  inline ::CrowdFunding::CrowdFundingUser* mutable_user(int index);
  inline ::CrowdFunding::CrowdFundingUser* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingUser >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingUser >*
      mutable_user();

  // @@protoc_insertion_point(class_scope:CrowdFunding.CrowdFundingItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_need();
  inline void clear_has_need();
  inline void set_has_had();
  inline void clear_has_had();
  inline void set_has_lastuid();
  inline void clear_has_lastuid();
  inline void set_has_lastname();
  inline void clear_has_lastname();
  inline void set_has_lasthad();
  inline void clear_has_lasthad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 need_;
  ::google::protobuf::uint32 had_;
  ::std::string* lastname_;
  ::google::protobuf::uint32 lastuid_;
  ::google::protobuf::uint32 lasthad_;
  ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingUser > user_;
  friend void  protobuf_AddDesc_CrowdFunding_2eproto();
  friend void protobuf_AssignDesc_CrowdFunding_2eproto();
  friend void protobuf_ShutdownFile_CrowdFunding_2eproto();

  void InitAsDefaultInstance();
  static CrowdFundingItem* default_instance_;
};
// -------------------------------------------------------------------

class CrowdFunding : public ::google::protobuf::Message {
 public:
  CrowdFunding();
  virtual ~CrowdFunding();

  CrowdFunding(const CrowdFunding& from);

  inline CrowdFunding& operator=(const CrowdFunding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrowdFunding& default_instance();

  void Swap(CrowdFunding* other);

  // implements Message ----------------------------------------------

  CrowdFunding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrowdFunding& from);
  void MergeFrom(const CrowdFunding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CrowdFunding.CrowdFundingItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::CrowdFunding::CrowdFundingItem& item(int index) const;
  inline ::CrowdFunding::CrowdFundingItem* mutable_item(int index);
  inline ::CrowdFunding::CrowdFundingItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:CrowdFunding.CrowdFunding)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingItem > item_;
  friend void  protobuf_AddDesc_CrowdFunding_2eproto();
  friend void protobuf_AssignDesc_CrowdFunding_2eproto();
  friend void protobuf_ShutdownFile_CrowdFunding_2eproto();

  void InitAsDefaultInstance();
  static CrowdFunding* default_instance_;
};
// ===================================================================


// ===================================================================

// CrowdFundingUser

// required uint32 uid = 1;
inline bool CrowdFundingUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrowdFundingUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrowdFundingUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrowdFundingUser::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 CrowdFundingUser::uid() const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingUser.uid)
  return uid_;
}
inline void CrowdFundingUser::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:CrowdFunding.CrowdFundingUser.uid)
}

// required uint32 had = 2;
inline bool CrowdFundingUser::has_had() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrowdFundingUser::set_has_had() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrowdFundingUser::clear_has_had() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrowdFundingUser::clear_had() {
  had_ = 0u;
  clear_has_had();
}
inline ::google::protobuf::uint32 CrowdFundingUser::had() const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingUser.had)
  return had_;
}
inline void CrowdFundingUser::set_had(::google::protobuf::uint32 value) {
  set_has_had();
  had_ = value;
  // @@protoc_insertion_point(field_set:CrowdFunding.CrowdFundingUser.had)
}

// -------------------------------------------------------------------

// CrowdFundingItem

// required uint32 id = 1;
inline bool CrowdFundingItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrowdFundingItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrowdFundingItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrowdFundingItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CrowdFundingItem::id() const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingItem.id)
  return id_;
}
inline void CrowdFundingItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CrowdFunding.CrowdFundingItem.id)
}

// required uint32 count = 2;
inline bool CrowdFundingItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CrowdFundingItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CrowdFundingItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CrowdFundingItem::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CrowdFundingItem::count() const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingItem.count)
  return count_;
}
inline void CrowdFundingItem::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:CrowdFunding.CrowdFundingItem.count)
}

// required uint32 need = 3;
inline bool CrowdFundingItem::has_need() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CrowdFundingItem::set_has_need() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CrowdFundingItem::clear_has_need() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CrowdFundingItem::clear_need() {
  need_ = 0u;
  clear_has_need();
}
inline ::google::protobuf::uint32 CrowdFundingItem::need() const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingItem.need)
  return need_;
}
inline void CrowdFundingItem::set_need(::google::protobuf::uint32 value) {
  set_has_need();
  need_ = value;
  // @@protoc_insertion_point(field_set:CrowdFunding.CrowdFundingItem.need)
}

// required uint32 had = 4;
inline bool CrowdFundingItem::has_had() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CrowdFundingItem::set_has_had() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CrowdFundingItem::clear_has_had() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CrowdFundingItem::clear_had() {
  had_ = 0u;
  clear_has_had();
}
inline ::google::protobuf::uint32 CrowdFundingItem::had() const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingItem.had)
  return had_;
}
inline void CrowdFundingItem::set_had(::google::protobuf::uint32 value) {
  set_has_had();
  had_ = value;
  // @@protoc_insertion_point(field_set:CrowdFunding.CrowdFundingItem.had)
}

// required uint32 lastuid = 5;
inline bool CrowdFundingItem::has_lastuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CrowdFundingItem::set_has_lastuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CrowdFundingItem::clear_has_lastuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CrowdFundingItem::clear_lastuid() {
  lastuid_ = 0u;
  clear_has_lastuid();
}
inline ::google::protobuf::uint32 CrowdFundingItem::lastuid() const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingItem.lastuid)
  return lastuid_;
}
inline void CrowdFundingItem::set_lastuid(::google::protobuf::uint32 value) {
  set_has_lastuid();
  lastuid_ = value;
  // @@protoc_insertion_point(field_set:CrowdFunding.CrowdFundingItem.lastuid)
}

// required string lastname = 6;
inline bool CrowdFundingItem::has_lastname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CrowdFundingItem::set_has_lastname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CrowdFundingItem::clear_has_lastname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CrowdFundingItem::clear_lastname() {
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_->clear();
  }
  clear_has_lastname();
}
inline const ::std::string& CrowdFundingItem::lastname() const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingItem.lastname)
  return *lastname_;
}
inline void CrowdFundingItem::set_lastname(const ::std::string& value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
  // @@protoc_insertion_point(field_set:CrowdFunding.CrowdFundingItem.lastname)
}
inline void CrowdFundingItem::set_lastname(const char* value) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(value);
  // @@protoc_insertion_point(field_set_char:CrowdFunding.CrowdFundingItem.lastname)
}
inline void CrowdFundingItem::set_lastname(const char* value, size_t size) {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_ = new ::std::string;
  }
  lastname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CrowdFunding.CrowdFundingItem.lastname)
}
inline ::std::string* CrowdFundingItem::mutable_lastname() {
  set_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:CrowdFunding.CrowdFundingItem.lastname)
  return lastname_;
}
inline ::std::string* CrowdFundingItem::release_lastname() {
  clear_has_lastname();
  if (lastname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lastname_;
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CrowdFundingItem::set_allocated_lastname(::std::string* lastname) {
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastname_;
  }
  if (lastname) {
    set_has_lastname();
    lastname_ = lastname;
  } else {
    clear_has_lastname();
    lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:CrowdFunding.CrowdFundingItem.lastname)
}

// required uint32 lasthad = 7;
inline bool CrowdFundingItem::has_lasthad() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CrowdFundingItem::set_has_lasthad() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CrowdFundingItem::clear_has_lasthad() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CrowdFundingItem::clear_lasthad() {
  lasthad_ = 0u;
  clear_has_lasthad();
}
inline ::google::protobuf::uint32 CrowdFundingItem::lasthad() const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingItem.lasthad)
  return lasthad_;
}
inline void CrowdFundingItem::set_lasthad(::google::protobuf::uint32 value) {
  set_has_lasthad();
  lasthad_ = value;
  // @@protoc_insertion_point(field_set:CrowdFunding.CrowdFundingItem.lasthad)
}

// repeated .CrowdFunding.CrowdFundingUser user = 8;
inline int CrowdFundingItem::user_size() const {
  return user_.size();
}
inline void CrowdFundingItem::clear_user() {
  user_.Clear();
}
inline const ::CrowdFunding::CrowdFundingUser& CrowdFundingItem::user(int index) const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFundingItem.user)
  return user_.Get(index);
}
inline ::CrowdFunding::CrowdFundingUser* CrowdFundingItem::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:CrowdFunding.CrowdFundingItem.user)
  return user_.Mutable(index);
}
inline ::CrowdFunding::CrowdFundingUser* CrowdFundingItem::add_user() {
  // @@protoc_insertion_point(field_add:CrowdFunding.CrowdFundingItem.user)
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingUser >&
CrowdFundingItem::user() const {
  // @@protoc_insertion_point(field_list:CrowdFunding.CrowdFundingItem.user)
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingUser >*
CrowdFundingItem::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:CrowdFunding.CrowdFundingItem.user)
  return &user_;
}

// -------------------------------------------------------------------

// CrowdFunding

// repeated .CrowdFunding.CrowdFundingItem item = 1;
inline int CrowdFunding::item_size() const {
  return item_.size();
}
inline void CrowdFunding::clear_item() {
  item_.Clear();
}
inline const ::CrowdFunding::CrowdFundingItem& CrowdFunding::item(int index) const {
  // @@protoc_insertion_point(field_get:CrowdFunding.CrowdFunding.item)
  return item_.Get(index);
}
inline ::CrowdFunding::CrowdFundingItem* CrowdFunding::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:CrowdFunding.CrowdFunding.item)
  return item_.Mutable(index);
}
inline ::CrowdFunding::CrowdFundingItem* CrowdFunding::add_item() {
  // @@protoc_insertion_point(field_add:CrowdFunding.CrowdFunding.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingItem >&
CrowdFunding::item() const {
  // @@protoc_insertion_point(field_list:CrowdFunding.CrowdFunding.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CrowdFunding::CrowdFundingItem >*
CrowdFunding::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:CrowdFunding.CrowdFunding.item)
  return &item_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CrowdFunding

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CrowdFunding_2eproto__INCLUDED
