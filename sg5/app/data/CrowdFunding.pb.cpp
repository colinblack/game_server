// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrowdFunding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CrowdFunding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CrowdFunding {

namespace {

const ::google::protobuf::Descriptor* CrowdFundingUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdFundingUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdFundingItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdFundingItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdFunding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdFunding_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CrowdFunding_2eproto() {
  protobuf_AddDesc_CrowdFunding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CrowdFunding.proto");
  GOOGLE_CHECK(file != NULL);
  CrowdFundingUser_descriptor_ = file->message_type(0);
  static const int CrowdFundingUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingUser, had_),
  };
  CrowdFundingUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdFundingUser_descriptor_,
      CrowdFundingUser::default_instance_,
      CrowdFundingUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdFundingUser));
  CrowdFundingItem_descriptor_ = file->message_type(1);
  static const int CrowdFundingItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, had_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, lastuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, lasthad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, user_),
  };
  CrowdFundingItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdFundingItem_descriptor_,
      CrowdFundingItem::default_instance_,
      CrowdFundingItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFundingItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdFundingItem));
  CrowdFunding_descriptor_ = file->message_type(2);
  static const int CrowdFunding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFunding, item_),
  };
  CrowdFunding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdFunding_descriptor_,
      CrowdFunding::default_instance_,
      CrowdFunding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFunding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFunding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdFunding));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CrowdFunding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdFundingUser_descriptor_, &CrowdFundingUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdFundingItem_descriptor_, &CrowdFundingItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdFunding_descriptor_, &CrowdFunding::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CrowdFunding_2eproto() {
  delete CrowdFundingUser::default_instance_;
  delete CrowdFundingUser_reflection_;
  delete CrowdFundingItem::default_instance_;
  delete CrowdFundingItem_reflection_;
  delete CrowdFunding::default_instance_;
  delete CrowdFunding_reflection_;
}

void protobuf_AddDesc_CrowdFunding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022CrowdFunding.proto\022\014CrowdFunding\",\n\020Cr"
    "owdFundingUser\022\013\n\003uid\030\001 \002(\r\022\013\n\003had\030\002 \002(\r"
    "\"\252\001\n\020CrowdFundingItem\022\n\n\002id\030\001 \002(\r\022\r\n\005cou"
    "nt\030\002 \002(\r\022\014\n\004need\030\003 \002(\r\022\013\n\003had\030\004 \002(\r\022\017\n\007l"
    "astuid\030\005 \002(\r\022\020\n\010lastname\030\006 \002(\t\022\017\n\007lastha"
    "d\030\007 \002(\r\022,\n\004user\030\010 \003(\0132\036.CrowdFunding.Cro"
    "wdFundingUser\"<\n\014CrowdFunding\022,\n\004item\030\001 "
    "\003(\0132\036.CrowdFunding.CrowdFundingItem", 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CrowdFunding.proto", &protobuf_RegisterTypes);
  CrowdFundingUser::default_instance_ = new CrowdFundingUser();
  CrowdFundingItem::default_instance_ = new CrowdFundingItem();
  CrowdFunding::default_instance_ = new CrowdFunding();
  CrowdFundingUser::default_instance_->InitAsDefaultInstance();
  CrowdFundingItem::default_instance_->InitAsDefaultInstance();
  CrowdFunding::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CrowdFunding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CrowdFunding_2eproto {
  StaticDescriptorInitializer_CrowdFunding_2eproto() {
    protobuf_AddDesc_CrowdFunding_2eproto();
  }
} static_descriptor_initializer_CrowdFunding_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CrowdFundingUser::kUidFieldNumber;
const int CrowdFundingUser::kHadFieldNumber;
#endif  // !_MSC_VER

CrowdFundingUser::CrowdFundingUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdFunding.CrowdFundingUser)
}

void CrowdFundingUser::InitAsDefaultInstance() {
}

CrowdFundingUser::CrowdFundingUser(const CrowdFundingUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdFunding.CrowdFundingUser)
}

void CrowdFundingUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  had_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdFundingUser::~CrowdFundingUser() {
  // @@protoc_insertion_point(destructor:CrowdFunding.CrowdFundingUser)
  SharedDtor();
}

void CrowdFundingUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrowdFundingUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrowdFundingUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdFundingUser_descriptor_;
}

const CrowdFundingUser& CrowdFundingUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrowdFunding_2eproto();
  return *default_instance_;
}

CrowdFundingUser* CrowdFundingUser::default_instance_ = NULL;

CrowdFundingUser* CrowdFundingUser::New() const {
  return new CrowdFundingUser;
}

void CrowdFundingUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CrowdFundingUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, had_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdFundingUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdFunding.CrowdFundingUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_had;
        break;
      }

      // required uint32 had = 2;
      case 2: {
        if (tag == 16) {
         parse_had:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &had_)));
          set_has_had();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdFunding.CrowdFundingUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdFunding.CrowdFundingUser)
  return false;
#undef DO_
}

void CrowdFundingUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdFunding.CrowdFundingUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 had = 2;
  if (has_had()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->had(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CrowdFunding.CrowdFundingUser)
}

::google::protobuf::uint8* CrowdFundingUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdFunding.CrowdFundingUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 had = 2;
  if (has_had()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->had(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CrowdFunding.CrowdFundingUser)
  return target;
}

int CrowdFundingUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 had = 2;
    if (has_had()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->had());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrowdFundingUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdFundingUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdFundingUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdFundingUser::MergeFrom(const CrowdFundingUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_had()) {
      set_had(from.had());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdFundingUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdFundingUser::CopyFrom(const CrowdFundingUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdFundingUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CrowdFundingUser::Swap(CrowdFundingUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(had_, other->had_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdFundingUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdFundingUser_descriptor_;
  metadata.reflection = CrowdFundingUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdFundingItem::kIdFieldNumber;
const int CrowdFundingItem::kCountFieldNumber;
const int CrowdFundingItem::kNeedFieldNumber;
const int CrowdFundingItem::kHadFieldNumber;
const int CrowdFundingItem::kLastuidFieldNumber;
const int CrowdFundingItem::kLastnameFieldNumber;
const int CrowdFundingItem::kLasthadFieldNumber;
const int CrowdFundingItem::kUserFieldNumber;
#endif  // !_MSC_VER

CrowdFundingItem::CrowdFundingItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdFunding.CrowdFundingItem)
}

void CrowdFundingItem::InitAsDefaultInstance() {
}

CrowdFundingItem::CrowdFundingItem(const CrowdFundingItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdFunding.CrowdFundingItem)
}

void CrowdFundingItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  need_ = 0u;
  had_ = 0u;
  lastuid_ = 0u;
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasthad_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdFundingItem::~CrowdFundingItem() {
  // @@protoc_insertion_point(destructor:CrowdFunding.CrowdFundingItem)
  SharedDtor();
}

void CrowdFundingItem::SharedDtor() {
  if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastname_;
  }
  if (this != default_instance_) {
  }
}

void CrowdFundingItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrowdFundingItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdFundingItem_descriptor_;
}

const CrowdFundingItem& CrowdFundingItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrowdFunding_2eproto();
  return *default_instance_;
}

CrowdFundingItem* CrowdFundingItem::default_instance_ = NULL;

CrowdFundingItem* CrowdFundingItem::New() const {
  return new CrowdFundingItem;
}

void CrowdFundingItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CrowdFundingItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, had_);
    ZR_(lastuid_, lasthad_);
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdFundingItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdFunding.CrowdFundingItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_need;
        break;
      }

      // required uint32 need = 3;
      case 3: {
        if (tag == 24) {
         parse_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_)));
          set_has_need();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_had;
        break;
      }

      // required uint32 had = 4;
      case 4: {
        if (tag == 32) {
         parse_had:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &had_)));
          set_has_had();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastuid;
        break;
      }

      // required uint32 lastuid = 5;
      case 5: {
        if (tag == 40) {
         parse_lastuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastuid_)));
          set_has_lastuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lastname;
        break;
      }

      // required string lastname = 6;
      case 6: {
        if (tag == 50) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastname().data(), this->lastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_lasthad;
        break;
      }

      // required uint32 lasthad = 7;
      case 7: {
        if (tag == 56) {
         parse_lasthad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lasthad_)));
          set_has_lasthad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user;
        break;
      }

      // repeated .CrowdFunding.CrowdFundingUser user = 8;
      case 8: {
        if (tag == 66) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_user;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdFunding.CrowdFundingItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdFunding.CrowdFundingItem)
  return false;
#undef DO_
}

void CrowdFundingItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdFunding.CrowdFundingItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 need = 3;
  if (has_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->need(), output);
  }

  // required uint32 had = 4;
  if (has_had()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->had(), output);
  }

  // required uint32 lastuid = 5;
  if (has_lastuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastuid(), output);
  }

  // required string lastname = 6;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lastname(), output);
  }

  // required uint32 lasthad = 7;
  if (has_lasthad()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lasthad(), output);
  }

  // repeated .CrowdFunding.CrowdFundingUser user = 8;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CrowdFunding.CrowdFundingItem)
}

::google::protobuf::uint8* CrowdFundingItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdFunding.CrowdFundingItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 need = 3;
  if (has_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->need(), target);
  }

  // required uint32 had = 4;
  if (has_had()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->had(), target);
  }

  // required uint32 lastuid = 5;
  if (has_lastuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastuid(), target);
  }

  // required string lastname = 6;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastname().data(), this->lastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lastname(), target);
  }

  // required uint32 lasthad = 7;
  if (has_lasthad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lasthad(), target);
  }

  // repeated .CrowdFunding.CrowdFundingUser user = 8;
  for (int i = 0; i < this->user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CrowdFunding.CrowdFundingItem)
  return target;
}

int CrowdFundingItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 need = 3;
    if (has_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need());
    }

    // required uint32 had = 4;
    if (has_had()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->had());
    }

    // required uint32 lastuid = 5;
    if (has_lastuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastuid());
    }

    // required string lastname = 6;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastname());
    }

    // required uint32 lasthad = 7;
    if (has_lasthad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lasthad());
    }

  }
  // repeated .CrowdFunding.CrowdFundingUser user = 8;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrowdFundingItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdFundingItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdFundingItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdFundingItem::MergeFrom(const CrowdFundingItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_need()) {
      set_need(from.need());
    }
    if (from.has_had()) {
      set_had(from.had());
    }
    if (from.has_lastuid()) {
      set_lastuid(from.lastuid());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_lasthad()) {
      set_lasthad(from.lasthad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdFundingItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdFundingItem::CopyFrom(const CrowdFundingItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdFundingItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->user())) return false;
  return true;
}

void CrowdFundingItem::Swap(CrowdFundingItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(need_, other->need_);
    std::swap(had_, other->had_);
    std::swap(lastuid_, other->lastuid_);
    std::swap(lastname_, other->lastname_);
    std::swap(lasthad_, other->lasthad_);
    user_.Swap(&other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdFundingItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdFundingItem_descriptor_;
  metadata.reflection = CrowdFundingItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdFunding::kItemFieldNumber;
#endif  // !_MSC_VER

CrowdFunding::CrowdFunding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrowdFunding.CrowdFunding)
}

void CrowdFunding::InitAsDefaultInstance() {
}

CrowdFunding::CrowdFunding(const CrowdFunding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrowdFunding.CrowdFunding)
}

void CrowdFunding::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdFunding::~CrowdFunding() {
  // @@protoc_insertion_point(destructor:CrowdFunding.CrowdFunding)
  SharedDtor();
}

void CrowdFunding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrowdFunding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrowdFunding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdFunding_descriptor_;
}

const CrowdFunding& CrowdFunding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrowdFunding_2eproto();
  return *default_instance_;
}

CrowdFunding* CrowdFunding::default_instance_ = NULL;

CrowdFunding* CrowdFunding::New() const {
  return new CrowdFunding;
}

void CrowdFunding::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdFunding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrowdFunding.CrowdFunding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CrowdFunding.CrowdFundingItem item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrowdFunding.CrowdFunding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrowdFunding.CrowdFunding)
  return false;
#undef DO_
}

void CrowdFunding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrowdFunding.CrowdFunding)
  // repeated .CrowdFunding.CrowdFundingItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CrowdFunding.CrowdFunding)
}

::google::protobuf::uint8* CrowdFunding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrowdFunding.CrowdFunding)
  // repeated .CrowdFunding.CrowdFundingItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CrowdFunding.CrowdFunding)
  return target;
}

int CrowdFunding::ByteSize() const {
  int total_size = 0;

  // repeated .CrowdFunding.CrowdFundingItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrowdFunding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdFunding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdFunding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdFunding::MergeFrom(const CrowdFunding& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdFunding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdFunding::CopyFrom(const CrowdFunding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdFunding::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void CrowdFunding::Swap(CrowdFunding* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdFunding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdFunding_descriptor_;
  metadata.reflection = CrowdFunding_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CrowdFunding

// @@protoc_insertion_point(global_scope)
