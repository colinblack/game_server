// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YingLing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "YingLing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace YingLing {

namespace {

const ::google::protobuf::Descriptor* YingLingP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YingLingP_reflection_ = NULL;
const ::google::protobuf::Descriptor* YingLingExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YingLingExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* YingLingStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YingLingStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* YingLing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YingLing_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_YingLing_2eproto() {
  protobuf_AddDesc_YingLing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "YingLing.proto");
  GOOGLE_CHECK(file != NULL);
  YingLingP_descriptor_ = file->message_type(0);
  static const int YingLingP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingP, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingP, p_),
  };
  YingLingP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YingLingP_descriptor_,
      YingLingP::default_instance_,
      YingLingP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YingLingP));
  YingLingExp_descriptor_ = file->message_type(1);
  static const int YingLingExp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingExp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingExp, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingExp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingExp, r1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingExp, r2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingExp, r3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingExp, r4_),
  };
  YingLingExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YingLingExp_descriptor_,
      YingLingExp::default_instance_,
      YingLingExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YingLingExp));
  YingLingStar_descriptor_ = file->message_type(2);
  static const int YingLingStar_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingStar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingStar, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingStar, cost_),
  };
  YingLingStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YingLingStar_descriptor_,
      YingLingStar::default_instance_,
      YingLingStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLingStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YingLingStar));
  YingLing_descriptor_ = file->message_type(3);
  static const int YingLing_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLing, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLing, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLing, normaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLing, advancetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLing, advancecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLing, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLing, star_),
  };
  YingLing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YingLing_descriptor_,
      YingLing::default_instance_,
      YingLing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YingLing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YingLing));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_YingLing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YingLingP_descriptor_, &YingLingP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YingLingExp_descriptor_, &YingLingExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YingLingStar_descriptor_, &YingLingStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YingLing_descriptor_, &YingLing::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_YingLing_2eproto() {
  delete YingLingP::default_instance_;
  delete YingLingP_reflection_;
  delete YingLingExp::default_instance_;
  delete YingLingExp_reflection_;
  delete YingLingStar::default_instance_;
  delete YingLingStar_reflection_;
  delete YingLing::default_instance_;
  delete YingLing_reflection_;
}

void protobuf_AddDesc_YingLing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016YingLing.proto\022\010YingLing\"1\n\tYingLingP\022"
    "\n\n\002id\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\t\n\001p\030\003 \002(\r\"d\n"
    "\013YingLingExp\022\n\n\002id\030\001 \002(\r\022\014\n\004time\030\002 \002(\r\022\013"
    "\n\003exp\030\003 \002(\r\022\n\n\002r1\030\004 \002(\r\022\n\n\002r2\030\005 \002(\r\022\n\n\002r"
    "3\030\006 \002(\r\022\n\n\002r4\030\007 \002(\r\"5\n\014YingLingStar\022\n\n\002i"
    "d\030\001 \002(\r\022\013\n\003sid\030\002 \002(\r\022\014\n\004cost\030\003 \003(\r\"\335\001\n\010Y"
    "ingLing\022#\n\006normal\030\001 \003(\0132\023.YingLing.YingL"
    "ingP\022$\n\007advance\030\002 \003(\0132\023.YingLing.YingLin"
    "gP\022\022\n\nnormaltime\030\003 \002(\r\022\023\n\013advancetime\030\004 "
    "\002(\r\022\023\n\013advancecost\030\005 \002(\r\022\"\n\003exp\030\006 \003(\0132\025."
    "YingLing.YingLingExp\022$\n\004star\030\007 \003(\0132\026.Yin"
    "gLing.YingLingStar", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "YingLing.proto", &protobuf_RegisterTypes);
  YingLingP::default_instance_ = new YingLingP();
  YingLingExp::default_instance_ = new YingLingExp();
  YingLingStar::default_instance_ = new YingLingStar();
  YingLing::default_instance_ = new YingLing();
  YingLingP::default_instance_->InitAsDefaultInstance();
  YingLingExp::default_instance_->InitAsDefaultInstance();
  YingLingStar::default_instance_->InitAsDefaultInstance();
  YingLing::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_YingLing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_YingLing_2eproto {
  StaticDescriptorInitializer_YingLing_2eproto() {
    protobuf_AddDesc_YingLing_2eproto();
  }
} static_descriptor_initializer_YingLing_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int YingLingP::kIdFieldNumber;
const int YingLingP::kCountFieldNumber;
const int YingLingP::kPFieldNumber;
#endif  // !_MSC_VER

YingLingP::YingLingP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YingLing.YingLingP)
}

void YingLingP::InitAsDefaultInstance() {
}

YingLingP::YingLingP(const YingLingP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YingLing.YingLingP)
}

void YingLingP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  p_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YingLingP::~YingLingP() {
  // @@protoc_insertion_point(destructor:YingLing.YingLingP)
  SharedDtor();
}

void YingLingP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YingLingP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YingLingP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YingLingP_descriptor_;
}

const YingLingP& YingLingP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_YingLing_2eproto();
  return *default_instance_;
}

YingLingP* YingLingP::default_instance_ = NULL;

YingLingP* YingLingP::New() const {
  return new YingLingP;
}

void YingLingP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<YingLingP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, p_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YingLingP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YingLing.YingLingP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_p;
        break;
      }

      // required uint32 p = 3;
      case 3: {
        if (tag == 24) {
         parse_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p_)));
          set_has_p();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YingLing.YingLingP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YingLing.YingLingP)
  return false;
#undef DO_
}

void YingLingP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YingLing.YingLingP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 p = 3;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->p(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YingLing.YingLingP)
}

::google::protobuf::uint8* YingLingP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YingLing.YingLingP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 p = 3;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->p(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YingLing.YingLingP)
  return target;
}

int YingLingP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 p = 3;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YingLingP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YingLingP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YingLingP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YingLingP::MergeFrom(const YingLingP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_p()) {
      set_p(from.p());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YingLingP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YingLingP::CopyFrom(const YingLingP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YingLingP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void YingLingP::Swap(YingLingP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(p_, other->p_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YingLingP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YingLingP_descriptor_;
  metadata.reflection = YingLingP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YingLingExp::kIdFieldNumber;
const int YingLingExp::kTimeFieldNumber;
const int YingLingExp::kExpFieldNumber;
const int YingLingExp::kR1FieldNumber;
const int YingLingExp::kR2FieldNumber;
const int YingLingExp::kR3FieldNumber;
const int YingLingExp::kR4FieldNumber;
#endif  // !_MSC_VER

YingLingExp::YingLingExp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YingLing.YingLingExp)
}

void YingLingExp::InitAsDefaultInstance() {
}

YingLingExp::YingLingExp(const YingLingExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YingLing.YingLingExp)
}

void YingLingExp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  exp_ = 0u;
  r1_ = 0u;
  r2_ = 0u;
  r3_ = 0u;
  r4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YingLingExp::~YingLingExp() {
  // @@protoc_insertion_point(destructor:YingLing.YingLingExp)
  SharedDtor();
}

void YingLingExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YingLingExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YingLingExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YingLingExp_descriptor_;
}

const YingLingExp& YingLingExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_YingLing_2eproto();
  return *default_instance_;
}

YingLingExp* YingLingExp::default_instance_ = NULL;

YingLingExp* YingLingExp::New() const {
  return new YingLingExp;
}

void YingLingExp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<YingLingExp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, r4_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YingLingExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YingLing.YingLingExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_r1;
        break;
      }

      // required uint32 r1 = 4;
      case 4: {
        if (tag == 32) {
         parse_r1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r1_)));
          set_has_r1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_r2;
        break;
      }

      // required uint32 r2 = 5;
      case 5: {
        if (tag == 40) {
         parse_r2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r2_)));
          set_has_r2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_r3;
        break;
      }

      // required uint32 r3 = 6;
      case 6: {
        if (tag == 48) {
         parse_r3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r3_)));
          set_has_r3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_r4;
        break;
      }

      // required uint32 r4 = 7;
      case 7: {
        if (tag == 56) {
         parse_r4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r4_)));
          set_has_r4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YingLing.YingLingExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YingLing.YingLingExp)
  return false;
#undef DO_
}

void YingLingExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YingLing.YingLingExp)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // required uint32 r1 = 4;
  if (has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->r1(), output);
  }

  // required uint32 r2 = 5;
  if (has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->r2(), output);
  }

  // required uint32 r3 = 6;
  if (has_r3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->r3(), output);
  }

  // required uint32 r4 = 7;
  if (has_r4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->r4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YingLing.YingLingExp)
}

::google::protobuf::uint8* YingLingExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YingLing.YingLingExp)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // required uint32 r1 = 4;
  if (has_r1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->r1(), target);
  }

  // required uint32 r2 = 5;
  if (has_r2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->r2(), target);
  }

  // required uint32 r3 = 6;
  if (has_r3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->r3(), target);
  }

  // required uint32 r4 = 7;
  if (has_r4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->r4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YingLing.YingLingExp)
  return target;
}

int YingLingExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 r1 = 4;
    if (has_r1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r1());
    }

    // required uint32 r2 = 5;
    if (has_r2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r2());
    }

    // required uint32 r3 = 6;
    if (has_r3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r3());
    }

    // required uint32 r4 = 7;
    if (has_r4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YingLingExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YingLingExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YingLingExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YingLingExp::MergeFrom(const YingLingExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_r1()) {
      set_r1(from.r1());
    }
    if (from.has_r2()) {
      set_r2(from.r2());
    }
    if (from.has_r3()) {
      set_r3(from.r3());
    }
    if (from.has_r4()) {
      set_r4(from.r4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YingLingExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YingLingExp::CopyFrom(const YingLingExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YingLingExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void YingLingExp::Swap(YingLingExp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(exp_, other->exp_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(r3_, other->r3_);
    std::swap(r4_, other->r4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YingLingExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YingLingExp_descriptor_;
  metadata.reflection = YingLingExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YingLingStar::kIdFieldNumber;
const int YingLingStar::kSidFieldNumber;
const int YingLingStar::kCostFieldNumber;
#endif  // !_MSC_VER

YingLingStar::YingLingStar()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YingLing.YingLingStar)
}

void YingLingStar::InitAsDefaultInstance() {
}

YingLingStar::YingLingStar(const YingLingStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YingLing.YingLingStar)
}

void YingLingStar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  sid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YingLingStar::~YingLingStar() {
  // @@protoc_insertion_point(destructor:YingLing.YingLingStar)
  SharedDtor();
}

void YingLingStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YingLingStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YingLingStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YingLingStar_descriptor_;
}

const YingLingStar& YingLingStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_YingLing_2eproto();
  return *default_instance_;
}

YingLingStar* YingLingStar::default_instance_ = NULL;

YingLingStar* YingLingStar::New() const {
  return new YingLingStar;
}

void YingLingStar::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<YingLingStar*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, sid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  cost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YingLingStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YingLing.YingLingStar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // required uint32 sid = 2;
      case 2: {
        if (tag == 16) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // repeated uint32 cost = 3;
      case 3: {
        if (tag == 24) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_cost())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cost())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YingLing.YingLingStar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YingLing.YingLingStar)
  return false;
#undef DO_
}

void YingLingStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YingLing.YingLingStar)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sid(), output);
  }

  // repeated uint32 cost = 3;
  for (int i = 0; i < this->cost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->cost(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YingLing.YingLingStar)
}

::google::protobuf::uint8* YingLingStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YingLing.YingLingStar)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sid(), target);
  }

  // repeated uint32 cost = 3;
  for (int i = 0; i < this->cost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->cost(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YingLing.YingLingStar)
  return target;
}

int YingLingStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sid());
    }

  }
  // repeated uint32 cost = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cost(i));
    }
    total_size += 1 * this->cost_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YingLingStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YingLingStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YingLingStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YingLingStar::MergeFrom(const YingLingStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_.MergeFrom(from.cost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YingLingStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YingLingStar::CopyFrom(const YingLingStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YingLingStar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void YingLingStar::Swap(YingLingStar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sid_, other->sid_);
    cost_.Swap(&other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YingLingStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YingLingStar_descriptor_;
  metadata.reflection = YingLingStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YingLing::kNormalFieldNumber;
const int YingLing::kAdvanceFieldNumber;
const int YingLing::kNormaltimeFieldNumber;
const int YingLing::kAdvancetimeFieldNumber;
const int YingLing::kAdvancecostFieldNumber;
const int YingLing::kExpFieldNumber;
const int YingLing::kStarFieldNumber;
#endif  // !_MSC_VER

YingLing::YingLing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YingLing.YingLing)
}

void YingLing::InitAsDefaultInstance() {
}

YingLing::YingLing(const YingLing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YingLing.YingLing)
}

void YingLing::SharedCtor() {
  _cached_size_ = 0;
  normaltime_ = 0u;
  advancetime_ = 0u;
  advancecost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YingLing::~YingLing() {
  // @@protoc_insertion_point(destructor:YingLing.YingLing)
  SharedDtor();
}

void YingLing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YingLing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YingLing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YingLing_descriptor_;
}

const YingLing& YingLing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_YingLing_2eproto();
  return *default_instance_;
}

YingLing* YingLing::default_instance_ = NULL;

YingLing* YingLing::New() const {
  return new YingLing;
}

void YingLing::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<YingLing*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 28) {
    ZR_(normaltime_, advancetime_);
    advancecost_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  normal_.Clear();
  advance_.Clear();
  exp_.Clear();
  star_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YingLing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:YingLing.YingLing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .YingLing.YingLingP normal = 1;
      case 1: {
        if (tag == 10) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_normal;
        if (input->ExpectTag(18)) goto parse_advance;
        break;
      }

      // repeated .YingLing.YingLingP advance = 2;
      case 2: {
        if (tag == 18) {
         parse_advance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_advance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_advance;
        if (input->ExpectTag(24)) goto parse_normaltime;
        break;
      }

      // required uint32 normaltime = 3;
      case 3: {
        if (tag == 24) {
         parse_normaltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normaltime_)));
          set_has_normaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_advancetime;
        break;
      }

      // required uint32 advancetime = 4;
      case 4: {
        if (tag == 32) {
         parse_advancetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancetime_)));
          set_has_advancetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_advancecost;
        break;
      }

      // required uint32 advancecost = 5;
      case 5: {
        if (tag == 40) {
         parse_advancecost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancecost_)));
          set_has_advancecost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_exp;
        break;
      }

      // repeated .YingLing.YingLingExp exp = 6;
      case 6: {
        if (tag == 50) {
         parse_exp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_exp;
        if (input->ExpectTag(58)) goto parse_star;
        break;
      }

      // repeated .YingLing.YingLingStar star = 7;
      case 7: {
        if (tag == 58) {
         parse_star:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_star()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_star;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YingLing.YingLing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YingLing.YingLing)
  return false;
#undef DO_
}

void YingLing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YingLing.YingLing)
  // repeated .YingLing.YingLingP normal = 1;
  for (int i = 0; i < this->normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->normal(i), output);
  }

  // repeated .YingLing.YingLingP advance = 2;
  for (int i = 0; i < this->advance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->advance(i), output);
  }

  // required uint32 normaltime = 3;
  if (has_normaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->normaltime(), output);
  }

  // required uint32 advancetime = 4;
  if (has_advancetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->advancetime(), output);
  }

  // required uint32 advancecost = 5;
  if (has_advancecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->advancecost(), output);
  }

  // repeated .YingLing.YingLingExp exp = 6;
  for (int i = 0; i < this->exp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->exp(i), output);
  }

  // repeated .YingLing.YingLingStar star = 7;
  for (int i = 0; i < this->star_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->star(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:YingLing.YingLing)
}

::google::protobuf::uint8* YingLing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:YingLing.YingLing)
  // repeated .YingLing.YingLingP normal = 1;
  for (int i = 0; i < this->normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->normal(i), target);
  }

  // repeated .YingLing.YingLingP advance = 2;
  for (int i = 0; i < this->advance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->advance(i), target);
  }

  // required uint32 normaltime = 3;
  if (has_normaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->normaltime(), target);
  }

  // required uint32 advancetime = 4;
  if (has_advancetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->advancetime(), target);
  }

  // required uint32 advancecost = 5;
  if (has_advancecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->advancecost(), target);
  }

  // repeated .YingLing.YingLingExp exp = 6;
  for (int i = 0; i < this->exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->exp(i), target);
  }

  // repeated .YingLing.YingLingStar star = 7;
  for (int i = 0; i < this->star_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->star(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:YingLing.YingLing)
  return target;
}

int YingLing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required uint32 normaltime = 3;
    if (has_normaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normaltime());
    }

    // required uint32 advancetime = 4;
    if (has_advancetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancetime());
    }

    // required uint32 advancecost = 5;
    if (has_advancecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancecost());
    }

  }
  // repeated .YingLing.YingLingP normal = 1;
  total_size += 1 * this->normal_size();
  for (int i = 0; i < this->normal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normal(i));
  }

  // repeated .YingLing.YingLingP advance = 2;
  total_size += 1 * this->advance_size();
  for (int i = 0; i < this->advance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->advance(i));
  }

  // repeated .YingLing.YingLingExp exp = 6;
  total_size += 1 * this->exp_size();
  for (int i = 0; i < this->exp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exp(i));
  }

  // repeated .YingLing.YingLingStar star = 7;
  total_size += 1 * this->star_size();
  for (int i = 0; i < this->star_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->star(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YingLing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YingLing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YingLing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YingLing::MergeFrom(const YingLing& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_.MergeFrom(from.normal_);
  advance_.MergeFrom(from.advance_);
  exp_.MergeFrom(from.exp_);
  star_.MergeFrom(from.star_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_normaltime()) {
      set_normaltime(from.normaltime());
    }
    if (from.has_advancetime()) {
      set_advancetime(from.advancetime());
    }
    if (from.has_advancecost()) {
      set_advancecost(from.advancecost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YingLing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YingLing::CopyFrom(const YingLing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YingLing::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->normal())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->advance())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->exp())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->star())) return false;
  return true;
}

void YingLing::Swap(YingLing* other) {
  if (other != this) {
    normal_.Swap(&other->normal_);
    advance_.Swap(&other->advance_);
    std::swap(normaltime_, other->normaltime_);
    std::swap(advancetime_, other->advancetime_);
    std::swap(advancecost_, other->advancecost_);
    exp_.Swap(&other->exp_);
    star_.Swap(&other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YingLing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YingLing_descriptor_;
  metadata.reflection = YingLing_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace YingLing

// @@protoc_insertion_point(global_scope)
