// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NewYearActive.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NewYearActive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NewYearActive {

namespace {

const ::google::protobuf::Descriptor* NewYearActiveHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewYearActiveHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewYearActiveUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewYearActiveUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewYearActiveRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewYearActiveRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewYearActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewYearActive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NewYearActive_2eproto() {
  protobuf_AddDesc_NewYearActive_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NewYearActive.proto");
  GOOGLE_CHECK(file != NULL);
  NewYearActiveHistory_descriptor_ = file->message_type(0);
  static const int NewYearActiveHistory_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, t_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, f_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, equid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, equc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, t_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, f_name_),
  };
  NewYearActiveHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewYearActiveHistory_descriptor_,
      NewYearActiveHistory::default_instance_,
      NewYearActiveHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewYearActiveHistory));
  NewYearActiveUser_descriptor_ = file->message_type(1);
  static const int NewYearActiveUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveUser, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveUser, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveUser, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveUser, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveUser, uids_),
  };
  NewYearActiveUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewYearActiveUser_descriptor_,
      NewYearActiveUser::default_instance_,
      NewYearActiveUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewYearActiveUser));
  NewYearActiveRank_descriptor_ = file->message_type(2);
  static const int NewYearActiveRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveRank, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveRank, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveRank, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveRank, pic_),
  };
  NewYearActiveRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewYearActiveRank_descriptor_,
      NewYearActiveRank::default_instance_,
      NewYearActiveRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActiveRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewYearActiveRank));
  NewYearActive_descriptor_ = file->message_type(3);
  static const int NewYearActive_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActive, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActive, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActive, ranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActive, historys_),
  };
  NewYearActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewYearActive_descriptor_,
      NewYearActive::default_instance_,
      NewYearActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewYearActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewYearActive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NewYearActive_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewYearActiveHistory_descriptor_, &NewYearActiveHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewYearActiveUser_descriptor_, &NewYearActiveUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewYearActiveRank_descriptor_, &NewYearActiveRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewYearActive_descriptor_, &NewYearActive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NewYearActive_2eproto() {
  delete NewYearActiveHistory::default_instance_;
  delete NewYearActiveHistory_reflection_;
  delete NewYearActiveUser::default_instance_;
  delete NewYearActiveUser_reflection_;
  delete NewYearActiveRank::default_instance_;
  delete NewYearActiveRank_reflection_;
  delete NewYearActive::default_instance_;
  delete NewYearActive_reflection_;
}

void protobuf_AddDesc_NewYearActive_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023NewYearActive.proto\022\rNewYearActive\"\213\001\n"
    "\024NewYearActiveHistory\022\r\n\005t_uid\030\001 \002(\r\022\r\n\005"
    "f_uid\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\022\n\n\002ts\030\004 \002(\r\022\r\n"
    "\005equid\030\005 \002(\r\022\014\n\004equc\030\006 \002(\r\022\016\n\006t_name\030\007 \002"
    "(\t\022\016\n\006f_name\030\010 \002(\t\"\177\n\021NewYearActiveUser\022"
    "\013\n\003uid\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\n\n\002ts\030\003 \002(\r\022"
    "4\n\007history\030\004 \003(\0132#.NewYearActive.NewYear"
    "ActiveHistory\022\014\n\004uids\030\005 \003(\r\"J\n\021NewYearAc"
    "tiveRank\022\013\n\003uid\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\014\n\004"
    "name\030\003 \002(\t\022\013\n\003pic\030\004 \002(\t\"\271\001\n\rNewYearActiv"
    "e\022\017\n\007version\030\001 \002(\r\022/\n\005users\030\002 \003(\0132 .NewY"
    "earActive.NewYearActiveUser\022/\n\005ranks\030\003 \003"
    "(\0132 .NewYearActive.NewYearActiveRank\0225\n\010"
    "historys\030\004 \003(\0132#.NewYearActive.NewYearAc"
    "tiveHistory", 571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NewYearActive.proto", &protobuf_RegisterTypes);
  NewYearActiveHistory::default_instance_ = new NewYearActiveHistory();
  NewYearActiveUser::default_instance_ = new NewYearActiveUser();
  NewYearActiveRank::default_instance_ = new NewYearActiveRank();
  NewYearActive::default_instance_ = new NewYearActive();
  NewYearActiveHistory::default_instance_->InitAsDefaultInstance();
  NewYearActiveUser::default_instance_->InitAsDefaultInstance();
  NewYearActiveRank::default_instance_->InitAsDefaultInstance();
  NewYearActive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NewYearActive_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NewYearActive_2eproto {
  StaticDescriptorInitializer_NewYearActive_2eproto() {
    protobuf_AddDesc_NewYearActive_2eproto();
  }
} static_descriptor_initializer_NewYearActive_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NewYearActiveHistory::kTUidFieldNumber;
const int NewYearActiveHistory::kFUidFieldNumber;
const int NewYearActiveHistory::kTypeFieldNumber;
const int NewYearActiveHistory::kTsFieldNumber;
const int NewYearActiveHistory::kEquidFieldNumber;
const int NewYearActiveHistory::kEqucFieldNumber;
const int NewYearActiveHistory::kTNameFieldNumber;
const int NewYearActiveHistory::kFNameFieldNumber;
#endif  // !_MSC_VER

NewYearActiveHistory::NewYearActiveHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewYearActive.NewYearActiveHistory)
}

void NewYearActiveHistory::InitAsDefaultInstance() {
}

NewYearActiveHistory::NewYearActiveHistory(const NewYearActiveHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewYearActive.NewYearActiveHistory)
}

void NewYearActiveHistory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  t_uid_ = 0u;
  f_uid_ = 0u;
  type_ = 0u;
  ts_ = 0u;
  equid_ = 0u;
  equc_ = 0u;
  t_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewYearActiveHistory::~NewYearActiveHistory() {
  // @@protoc_insertion_point(destructor:NewYearActive.NewYearActiveHistory)
  SharedDtor();
}

void NewYearActiveHistory::SharedDtor() {
  if (t_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete t_name_;
  }
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (this != default_instance_) {
  }
}

void NewYearActiveHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewYearActiveHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewYearActiveHistory_descriptor_;
}

const NewYearActiveHistory& NewYearActiveHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewYearActive_2eproto();
  return *default_instance_;
}

NewYearActiveHistory* NewYearActiveHistory::default_instance_ = NULL;

NewYearActiveHistory* NewYearActiveHistory::New() const {
  return new NewYearActiveHistory;
}

void NewYearActiveHistory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewYearActiveHistory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(t_uid_, equc_);
    if (has_t_name()) {
      if (t_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        t_name_->clear();
      }
    }
    if (has_f_name()) {
      if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        f_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewYearActiveHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewYearActive.NewYearActiveHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 t_uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_uid_)));
          set_has_t_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_f_uid;
        break;
      }

      // required uint32 f_uid = 2;
      case 2: {
        if (tag == 16) {
         parse_f_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &f_uid_)));
          set_has_f_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ts;
        break;
      }

      // required uint32 ts = 4;
      case 4: {
        if (tag == 32) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_equid;
        break;
      }

      // required uint32 equid = 5;
      case 5: {
        if (tag == 40) {
         parse_equid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equid_)));
          set_has_equid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_equc;
        break;
      }

      // required uint32 equc = 6;
      case 6: {
        if (tag == 48) {
         parse_equc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equc_)));
          set_has_equc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_t_name;
        break;
      }

      // required string t_name = 7;
      case 7: {
        if (tag == 58) {
         parse_t_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_t_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->t_name().data(), this->t_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "t_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_f_name;
        break;
      }

      // required string f_name = 8;
      case 8: {
        if (tag == 66) {
         parse_f_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_f_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->f_name().data(), this->f_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "f_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewYearActive.NewYearActiveHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewYearActive.NewYearActiveHistory)
  return false;
#undef DO_
}

void NewYearActiveHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewYearActive.NewYearActiveHistory)
  // required uint32 t_uid = 1;
  if (has_t_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->t_uid(), output);
  }

  // required uint32 f_uid = 2;
  if (has_f_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->f_uid(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 ts = 4;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ts(), output);
  }

  // required uint32 equid = 5;
  if (has_equid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->equid(), output);
  }

  // required uint32 equc = 6;
  if (has_equc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->equc(), output);
  }

  // required string t_name = 7;
  if (has_t_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->t_name().data(), this->t_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "t_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->t_name(), output);
  }

  // required string f_name = 8;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->f_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewYearActive.NewYearActiveHistory)
}

::google::protobuf::uint8* NewYearActiveHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewYearActive.NewYearActiveHistory)
  // required uint32 t_uid = 1;
  if (has_t_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->t_uid(), target);
  }

  // required uint32 f_uid = 2;
  if (has_f_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->f_uid(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 ts = 4;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ts(), target);
  }

  // required uint32 equid = 5;
  if (has_equid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->equid(), target);
  }

  // required uint32 equc = 6;
  if (has_equc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->equc(), target);
  }

  // required string t_name = 7;
  if (has_t_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->t_name().data(), this->t_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "t_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->t_name(), target);
  }

  // required string f_name = 8;
  if (has_f_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->f_name().data(), this->f_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "f_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->f_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewYearActive.NewYearActiveHistory)
  return target;
}

int NewYearActiveHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 t_uid = 1;
    if (has_t_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->t_uid());
    }

    // required uint32 f_uid = 2;
    if (has_f_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->f_uid());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 ts = 4;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required uint32 equid = 5;
    if (has_equid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equid());
    }

    // required uint32 equc = 6;
    if (has_equc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equc());
    }

    // required string t_name = 7;
    if (has_t_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->t_name());
    }

    // required string f_name = 8;
    if (has_f_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->f_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewYearActiveHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewYearActiveHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewYearActiveHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewYearActiveHistory::MergeFrom(const NewYearActiveHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_uid()) {
      set_t_uid(from.t_uid());
    }
    if (from.has_f_uid()) {
      set_f_uid(from.f_uid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_equid()) {
      set_equid(from.equid());
    }
    if (from.has_equc()) {
      set_equc(from.equc());
    }
    if (from.has_t_name()) {
      set_t_name(from.t_name());
    }
    if (from.has_f_name()) {
      set_f_name(from.f_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewYearActiveHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearActiveHistory::CopyFrom(const NewYearActiveHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearActiveHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void NewYearActiveHistory::Swap(NewYearActiveHistory* other) {
  if (other != this) {
    std::swap(t_uid_, other->t_uid_);
    std::swap(f_uid_, other->f_uid_);
    std::swap(type_, other->type_);
    std::swap(ts_, other->ts_);
    std::swap(equid_, other->equid_);
    std::swap(equc_, other->equc_);
    std::swap(t_name_, other->t_name_);
    std::swap(f_name_, other->f_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewYearActiveHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewYearActiveHistory_descriptor_;
  metadata.reflection = NewYearActiveHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewYearActiveUser::kUidFieldNumber;
const int NewYearActiveUser::kCountFieldNumber;
const int NewYearActiveUser::kTsFieldNumber;
const int NewYearActiveUser::kHistoryFieldNumber;
const int NewYearActiveUser::kUidsFieldNumber;
#endif  // !_MSC_VER

NewYearActiveUser::NewYearActiveUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewYearActive.NewYearActiveUser)
}

void NewYearActiveUser::InitAsDefaultInstance() {
}

NewYearActiveUser::NewYearActiveUser(const NewYearActiveUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewYearActive.NewYearActiveUser)
}

void NewYearActiveUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  count_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewYearActiveUser::~NewYearActiveUser() {
  // @@protoc_insertion_point(destructor:NewYearActive.NewYearActiveUser)
  SharedDtor();
}

void NewYearActiveUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewYearActiveUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewYearActiveUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewYearActiveUser_descriptor_;
}

const NewYearActiveUser& NewYearActiveUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewYearActive_2eproto();
  return *default_instance_;
}

NewYearActiveUser* NewYearActiveUser::default_instance_ = NULL;

NewYearActiveUser* NewYearActiveUser::New() const {
  return new NewYearActiveUser;
}

void NewYearActiveUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewYearActiveUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, count_);
    ts_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  history_.Clear();
  uids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewYearActiveUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewYearActive.NewYearActiveUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ts;
        break;
      }

      // required uint32 ts = 3;
      case 3: {
        if (tag == 24) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_history;
        break;
      }

      // repeated .NewYearActive.NewYearActiveHistory history = 4;
      case 4: {
        if (tag == 34) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_history;
        if (input->ExpectTag(40)) goto parse_uids;
        break;
      }

      // repeated uint32 uids = 5;
      case 5: {
        if (tag == 40) {
         parse_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_uids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_uids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewYearActive.NewYearActiveUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewYearActive.NewYearActiveUser)
  return false;
#undef DO_
}

void NewYearActiveUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewYearActive.NewYearActiveUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ts(), output);
  }

  // repeated .NewYearActive.NewYearActiveHistory history = 4;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->history(i), output);
  }

  // repeated uint32 uids = 5;
  for (int i = 0; i < this->uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->uids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewYearActive.NewYearActiveUser)
}

::google::protobuf::uint8* NewYearActiveUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewYearActive.NewYearActiveUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required uint32 ts = 3;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ts(), target);
  }

  // repeated .NewYearActive.NewYearActiveHistory history = 4;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->history(i), target);
  }

  // repeated uint32 uids = 5;
  for (int i = 0; i < this->uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->uids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewYearActive.NewYearActiveUser)
  return target;
}

int NewYearActiveUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 ts = 3;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  // repeated .NewYearActive.NewYearActiveHistory history = 4;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }

  // repeated uint32 uids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uids(i));
    }
    total_size += 1 * this->uids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewYearActiveUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewYearActiveUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewYearActiveUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewYearActiveUser::MergeFrom(const NewYearActiveUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_.MergeFrom(from.history_);
  uids_.MergeFrom(from.uids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewYearActiveUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearActiveUser::CopyFrom(const NewYearActiveUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearActiveUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->history())) return false;
  return true;
}

void NewYearActiveUser::Swap(NewYearActiveUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(count_, other->count_);
    std::swap(ts_, other->ts_);
    history_.Swap(&other->history_);
    uids_.Swap(&other->uids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewYearActiveUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewYearActiveUser_descriptor_;
  metadata.reflection = NewYearActiveUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewYearActiveRank::kUidFieldNumber;
const int NewYearActiveRank::kCountFieldNumber;
const int NewYearActiveRank::kNameFieldNumber;
const int NewYearActiveRank::kPicFieldNumber;
#endif  // !_MSC_VER

NewYearActiveRank::NewYearActiveRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewYearActive.NewYearActiveRank)
}

void NewYearActiveRank::InitAsDefaultInstance() {
}

NewYearActiveRank::NewYearActiveRank(const NewYearActiveRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewYearActive.NewYearActiveRank)
}

void NewYearActiveRank::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  count_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewYearActiveRank::~NewYearActiveRank() {
  // @@protoc_insertion_point(destructor:NewYearActive.NewYearActiveRank)
  SharedDtor();
}

void NewYearActiveRank::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pic_;
  }
  if (this != default_instance_) {
  }
}

void NewYearActiveRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewYearActiveRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewYearActiveRank_descriptor_;
}

const NewYearActiveRank& NewYearActiveRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewYearActive_2eproto();
  return *default_instance_;
}

NewYearActiveRank* NewYearActiveRank::default_instance_ = NULL;

NewYearActiveRank* NewYearActiveRank::New() const {
  return new NewYearActiveRank;
}

void NewYearActiveRank::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewYearActiveRank*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, count_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_pic()) {
      if (pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pic_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewYearActiveRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewYearActive.NewYearActiveRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pic;
        break;
      }

      // required string pic = 4;
      case 4: {
        if (tag == 34) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewYearActive.NewYearActiveRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewYearActive.NewYearActiveRank)
  return false;
#undef DO_
}

void NewYearActiveRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewYearActive.NewYearActiveRank)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required string pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewYearActive.NewYearActiveRank)
}

::google::protobuf::uint8* NewYearActiveRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewYearActive.NewYearActiveRank)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string pic = 4;
  if (has_pic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewYearActive.NewYearActiveRank)
  return target;
}

int NewYearActiveRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string pic = 4;
    if (has_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewYearActiveRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewYearActiveRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewYearActiveRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewYearActiveRank::MergeFrom(const NewYearActiveRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pic()) {
      set_pic(from.pic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewYearActiveRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearActiveRank::CopyFrom(const NewYearActiveRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearActiveRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NewYearActiveRank::Swap(NewYearActiveRank* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(count_, other->count_);
    std::swap(name_, other->name_);
    std::swap(pic_, other->pic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewYearActiveRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewYearActiveRank_descriptor_;
  metadata.reflection = NewYearActiveRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewYearActive::kVersionFieldNumber;
const int NewYearActive::kUsersFieldNumber;
const int NewYearActive::kRanksFieldNumber;
const int NewYearActive::kHistorysFieldNumber;
#endif  // !_MSC_VER

NewYearActive::NewYearActive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NewYearActive.NewYearActive)
}

void NewYearActive::InitAsDefaultInstance() {
}

NewYearActive::NewYearActive(const NewYearActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NewYearActive.NewYearActive)
}

void NewYearActive::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewYearActive::~NewYearActive() {
  // @@protoc_insertion_point(destructor:NewYearActive.NewYearActive)
  SharedDtor();
}

void NewYearActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewYearActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewYearActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewYearActive_descriptor_;
}

const NewYearActive& NewYearActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NewYearActive_2eproto();
  return *default_instance_;
}

NewYearActive* NewYearActive::default_instance_ = NULL;

NewYearActive* NewYearActive::New() const {
  return new NewYearActive;
}

void NewYearActive::Clear() {
  version_ = 0u;
  users_.Clear();
  ranks_.Clear();
  historys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewYearActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NewYearActive.NewYearActive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // repeated .NewYearActive.NewYearActiveUser users = 2;
      case 2: {
        if (tag == 18) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_users;
        if (input->ExpectTag(26)) goto parse_ranks;
        break;
      }

      // repeated .NewYearActive.NewYearActiveRank ranks = 3;
      case 3: {
        if (tag == 26) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ranks;
        if (input->ExpectTag(34)) goto parse_historys;
        break;
      }

      // repeated .NewYearActive.NewYearActiveHistory historys = 4;
      case 4: {
        if (tag == 34) {
         parse_historys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_historys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_historys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NewYearActive.NewYearActive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NewYearActive.NewYearActive)
  return false;
#undef DO_
}

void NewYearActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NewYearActive.NewYearActive)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .NewYearActive.NewYearActiveUser users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(i), output);
  }

  // repeated .NewYearActive.NewYearActiveRank ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ranks(i), output);
  }

  // repeated .NewYearActive.NewYearActiveHistory historys = 4;
  for (int i = 0; i < this->historys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->historys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NewYearActive.NewYearActive)
}

::google::protobuf::uint8* NewYearActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NewYearActive.NewYearActive)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .NewYearActive.NewYearActiveUser users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->users(i), target);
  }

  // repeated .NewYearActive.NewYearActiveRank ranks = 3;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ranks(i), target);
  }

  // repeated .NewYearActive.NewYearActiveHistory historys = 4;
  for (int i = 0; i < this->historys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->historys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NewYearActive.NewYearActive)
  return target;
}

int NewYearActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .NewYearActive.NewYearActiveUser users = 2;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  // repeated .NewYearActive.NewYearActiveRank ranks = 3;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  // repeated .NewYearActive.NewYearActiveHistory historys = 4;
  total_size += 1 * this->historys_size();
  for (int i = 0; i < this->historys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->historys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewYearActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewYearActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewYearActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewYearActive::MergeFrom(const NewYearActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  ranks_.MergeFrom(from.ranks_);
  historys_.MergeFrom(from.historys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewYearActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewYearActive::CopyFrom(const NewYearActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewYearActive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ranks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->historys())) return false;
  return true;
}

void NewYearActive::Swap(NewYearActive* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    users_.Swap(&other->users_);
    ranks_.Swap(&other->ranks_);
    historys_.Swap(&other->historys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewYearActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewYearActive_descriptor_;
  metadata.reflection = NewYearActive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NewYearActive

// @@protoc_insertion_point(global_scope)
