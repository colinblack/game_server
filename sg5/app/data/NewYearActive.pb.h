// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NewYearActive.proto

#ifndef PROTOBUF_NewYearActive_2eproto__INCLUDED
#define PROTOBUF_NewYearActive_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NewYearActive {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NewYearActive_2eproto();
void protobuf_AssignDesc_NewYearActive_2eproto();
void protobuf_ShutdownFile_NewYearActive_2eproto();

class NewYearActiveHistory;
class NewYearActiveUser;
class NewYearActiveRank;
class NewYearActive;

// ===================================================================

class NewYearActiveHistory : public ::google::protobuf::Message {
 public:
  NewYearActiveHistory();
  virtual ~NewYearActiveHistory();

  NewYearActiveHistory(const NewYearActiveHistory& from);

  inline NewYearActiveHistory& operator=(const NewYearActiveHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewYearActiveHistory& default_instance();

  void Swap(NewYearActiveHistory* other);

  // implements Message ----------------------------------------------

  NewYearActiveHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewYearActiveHistory& from);
  void MergeFrom(const NewYearActiveHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 t_uid = 1;
  inline bool has_t_uid() const;
  inline void clear_t_uid();
  static const int kTUidFieldNumber = 1;
  inline ::google::protobuf::uint32 t_uid() const;
  inline void set_t_uid(::google::protobuf::uint32 value);

  // required uint32 f_uid = 2;
  inline bool has_f_uid() const;
  inline void clear_f_uid();
  static const int kFUidFieldNumber = 2;
  inline ::google::protobuf::uint32 f_uid() const;
  inline void set_f_uid(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 ts = 4;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 4;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // required uint32 equid = 5;
  inline bool has_equid() const;
  inline void clear_equid();
  static const int kEquidFieldNumber = 5;
  inline ::google::protobuf::uint32 equid() const;
  inline void set_equid(::google::protobuf::uint32 value);

  // required uint32 equc = 6;
  inline bool has_equc() const;
  inline void clear_equc();
  static const int kEqucFieldNumber = 6;
  inline ::google::protobuf::uint32 equc() const;
  inline void set_equc(::google::protobuf::uint32 value);

  // required string t_name = 7;
  inline bool has_t_name() const;
  inline void clear_t_name();
  static const int kTNameFieldNumber = 7;
  inline const ::std::string& t_name() const;
  inline void set_t_name(const ::std::string& value);
  inline void set_t_name(const char* value);
  inline void set_t_name(const char* value, size_t size);
  inline ::std::string* mutable_t_name();
  inline ::std::string* release_t_name();
  inline void set_allocated_t_name(::std::string* t_name);

  // required string f_name = 8;
  inline bool has_f_name() const;
  inline void clear_f_name();
  static const int kFNameFieldNumber = 8;
  inline const ::std::string& f_name() const;
  inline void set_f_name(const ::std::string& value);
  inline void set_f_name(const char* value);
  inline void set_f_name(const char* value, size_t size);
  inline ::std::string* mutable_f_name();
  inline ::std::string* release_f_name();
  inline void set_allocated_f_name(::std::string* f_name);

  // @@protoc_insertion_point(class_scope:NewYearActive.NewYearActiveHistory)
 private:
  inline void set_has_t_uid();
  inline void clear_has_t_uid();
  inline void set_has_f_uid();
  inline void clear_has_f_uid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_equid();
  inline void clear_has_equid();
  inline void set_has_equc();
  inline void clear_has_equc();
  inline void set_has_t_name();
  inline void clear_has_t_name();
  inline void set_has_f_name();
  inline void clear_has_f_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 t_uid_;
  ::google::protobuf::uint32 f_uid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 ts_;
  ::google::protobuf::uint32 equid_;
  ::google::protobuf::uint32 equc_;
  ::std::string* t_name_;
  ::std::string* f_name_;
  friend void  protobuf_AddDesc_NewYearActive_2eproto();
  friend void protobuf_AssignDesc_NewYearActive_2eproto();
  friend void protobuf_ShutdownFile_NewYearActive_2eproto();

  void InitAsDefaultInstance();
  static NewYearActiveHistory* default_instance_;
};
// -------------------------------------------------------------------

class NewYearActiveUser : public ::google::protobuf::Message {
 public:
  NewYearActiveUser();
  virtual ~NewYearActiveUser();

  NewYearActiveUser(const NewYearActiveUser& from);

  inline NewYearActiveUser& operator=(const NewYearActiveUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewYearActiveUser& default_instance();

  void Swap(NewYearActiveUser* other);

  // implements Message ----------------------------------------------

  NewYearActiveUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewYearActiveUser& from);
  void MergeFrom(const NewYearActiveUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required uint32 ts = 3;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 3;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // repeated .NewYearActive.NewYearActiveHistory history = 4;
  inline int history_size() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 4;
  inline const ::NewYearActive::NewYearActiveHistory& history(int index) const;
  inline ::NewYearActive::NewYearActiveHistory* mutable_history(int index);
  inline ::NewYearActive::NewYearActiveHistory* add_history();
  inline const ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory >&
      history() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory >*
      mutable_history();

  // repeated uint32 uids = 5;
  inline int uids_size() const;
  inline void clear_uids();
  static const int kUidsFieldNumber = 5;
  inline ::google::protobuf::uint32 uids(int index) const;
  inline void set_uids(int index, ::google::protobuf::uint32 value);
  inline void add_uids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uids();

  // @@protoc_insertion_point(class_scope:NewYearActive.NewYearActiveUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory > history_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uids_;
  ::google::protobuf::uint32 ts_;
  friend void  protobuf_AddDesc_NewYearActive_2eproto();
  friend void protobuf_AssignDesc_NewYearActive_2eproto();
  friend void protobuf_ShutdownFile_NewYearActive_2eproto();

  void InitAsDefaultInstance();
  static NewYearActiveUser* default_instance_;
};
// -------------------------------------------------------------------

class NewYearActiveRank : public ::google::protobuf::Message {
 public:
  NewYearActiveRank();
  virtual ~NewYearActiveRank();

  NewYearActiveRank(const NewYearActiveRank& from);

  inline NewYearActiveRank& operator=(const NewYearActiveRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewYearActiveRank& default_instance();

  void Swap(NewYearActiveRank* other);

  // implements Message ----------------------------------------------

  NewYearActiveRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewYearActiveRank& from);
  void MergeFrom(const NewYearActiveRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string pic = 4;
  inline bool has_pic() const;
  inline void clear_pic();
  static const int kPicFieldNumber = 4;
  inline const ::std::string& pic() const;
  inline void set_pic(const ::std::string& value);
  inline void set_pic(const char* value);
  inline void set_pic(const char* value, size_t size);
  inline ::std::string* mutable_pic();
  inline ::std::string* release_pic();
  inline void set_allocated_pic(::std::string* pic);

  // @@protoc_insertion_point(class_scope:NewYearActive.NewYearActiveRank)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pic();
  inline void clear_has_pic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 count_;
  ::std::string* name_;
  ::std::string* pic_;
  friend void  protobuf_AddDesc_NewYearActive_2eproto();
  friend void protobuf_AssignDesc_NewYearActive_2eproto();
  friend void protobuf_ShutdownFile_NewYearActive_2eproto();

  void InitAsDefaultInstance();
  static NewYearActiveRank* default_instance_;
};
// -------------------------------------------------------------------

class NewYearActive : public ::google::protobuf::Message {
 public:
  NewYearActive();
  virtual ~NewYearActive();

  NewYearActive(const NewYearActive& from);

  inline NewYearActive& operator=(const NewYearActive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewYearActive& default_instance();

  void Swap(NewYearActive* other);

  // implements Message ----------------------------------------------

  NewYearActive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewYearActive& from);
  void MergeFrom(const NewYearActive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // repeated .NewYearActive.NewYearActiveUser users = 2;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 2;
  inline const ::NewYearActive::NewYearActiveUser& users(int index) const;
  inline ::NewYearActive::NewYearActiveUser* mutable_users(int index);
  inline ::NewYearActive::NewYearActiveUser* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveUser >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveUser >*
      mutable_users();

  // repeated .NewYearActive.NewYearActiveRank ranks = 3;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 3;
  inline const ::NewYearActive::NewYearActiveRank& ranks(int index) const;
  inline ::NewYearActive::NewYearActiveRank* mutable_ranks(int index);
  inline ::NewYearActive::NewYearActiveRank* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveRank >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveRank >*
      mutable_ranks();

  // repeated .NewYearActive.NewYearActiveHistory historys = 4;
  inline int historys_size() const;
  inline void clear_historys();
  static const int kHistorysFieldNumber = 4;
  inline const ::NewYearActive::NewYearActiveHistory& historys(int index) const;
  inline ::NewYearActive::NewYearActiveHistory* mutable_historys(int index);
  inline ::NewYearActive::NewYearActiveHistory* add_historys();
  inline const ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory >&
      historys() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory >*
      mutable_historys();

  // @@protoc_insertion_point(class_scope:NewYearActive.NewYearActive)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveUser > users_;
  ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveRank > ranks_;
  ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory > historys_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_NewYearActive_2eproto();
  friend void protobuf_AssignDesc_NewYearActive_2eproto();
  friend void protobuf_ShutdownFile_NewYearActive_2eproto();

  void InitAsDefaultInstance();
  static NewYearActive* default_instance_;
};
// ===================================================================


// ===================================================================

// NewYearActiveHistory

// required uint32 t_uid = 1;
inline bool NewYearActiveHistory::has_t_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewYearActiveHistory::set_has_t_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewYearActiveHistory::clear_has_t_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewYearActiveHistory::clear_t_uid() {
  t_uid_ = 0u;
  clear_has_t_uid();
}
inline ::google::protobuf::uint32 NewYearActiveHistory::t_uid() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveHistory.t_uid)
  return t_uid_;
}
inline void NewYearActiveHistory::set_t_uid(::google::protobuf::uint32 value) {
  set_has_t_uid();
  t_uid_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveHistory.t_uid)
}

// required uint32 f_uid = 2;
inline bool NewYearActiveHistory::has_f_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewYearActiveHistory::set_has_f_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewYearActiveHistory::clear_has_f_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewYearActiveHistory::clear_f_uid() {
  f_uid_ = 0u;
  clear_has_f_uid();
}
inline ::google::protobuf::uint32 NewYearActiveHistory::f_uid() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveHistory.f_uid)
  return f_uid_;
}
inline void NewYearActiveHistory::set_f_uid(::google::protobuf::uint32 value) {
  set_has_f_uid();
  f_uid_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveHistory.f_uid)
}

// required uint32 type = 3;
inline bool NewYearActiveHistory::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewYearActiveHistory::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewYearActiveHistory::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewYearActiveHistory::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 NewYearActiveHistory::type() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveHistory.type)
  return type_;
}
inline void NewYearActiveHistory::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveHistory.type)
}

// required uint32 ts = 4;
inline bool NewYearActiveHistory::has_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewYearActiveHistory::set_has_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewYearActiveHistory::clear_has_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewYearActiveHistory::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 NewYearActiveHistory::ts() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveHistory.ts)
  return ts_;
}
inline void NewYearActiveHistory::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveHistory.ts)
}

// required uint32 equid = 5;
inline bool NewYearActiveHistory::has_equid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NewYearActiveHistory::set_has_equid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NewYearActiveHistory::clear_has_equid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NewYearActiveHistory::clear_equid() {
  equid_ = 0u;
  clear_has_equid();
}
inline ::google::protobuf::uint32 NewYearActiveHistory::equid() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveHistory.equid)
  return equid_;
}
inline void NewYearActiveHistory::set_equid(::google::protobuf::uint32 value) {
  set_has_equid();
  equid_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveHistory.equid)
}

// required uint32 equc = 6;
inline bool NewYearActiveHistory::has_equc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NewYearActiveHistory::set_has_equc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NewYearActiveHistory::clear_has_equc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NewYearActiveHistory::clear_equc() {
  equc_ = 0u;
  clear_has_equc();
}
inline ::google::protobuf::uint32 NewYearActiveHistory::equc() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveHistory.equc)
  return equc_;
}
inline void NewYearActiveHistory::set_equc(::google::protobuf::uint32 value) {
  set_has_equc();
  equc_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveHistory.equc)
}

// required string t_name = 7;
inline bool NewYearActiveHistory::has_t_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NewYearActiveHistory::set_has_t_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NewYearActiveHistory::clear_has_t_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NewYearActiveHistory::clear_t_name() {
  if (t_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_name_->clear();
  }
  clear_has_t_name();
}
inline const ::std::string& NewYearActiveHistory::t_name() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveHistory.t_name)
  return *t_name_;
}
inline void NewYearActiveHistory::set_t_name(const ::std::string& value) {
  set_has_t_name();
  if (t_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_name_ = new ::std::string;
  }
  t_name_->assign(value);
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveHistory.t_name)
}
inline void NewYearActiveHistory::set_t_name(const char* value) {
  set_has_t_name();
  if (t_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_name_ = new ::std::string;
  }
  t_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:NewYearActive.NewYearActiveHistory.t_name)
}
inline void NewYearActiveHistory::set_t_name(const char* value, size_t size) {
  set_has_t_name();
  if (t_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_name_ = new ::std::string;
  }
  t_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NewYearActive.NewYearActiveHistory.t_name)
}
inline ::std::string* NewYearActiveHistory::mutable_t_name() {
  set_has_t_name();
  if (t_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    t_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NewYearActive.NewYearActiveHistory.t_name)
  return t_name_;
}
inline ::std::string* NewYearActiveHistory::release_t_name() {
  clear_has_t_name();
  if (t_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = t_name_;
    t_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewYearActiveHistory::set_allocated_t_name(::std::string* t_name) {
  if (t_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete t_name_;
  }
  if (t_name) {
    set_has_t_name();
    t_name_ = t_name;
  } else {
    clear_has_t_name();
    t_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NewYearActive.NewYearActiveHistory.t_name)
}

// required string f_name = 8;
inline bool NewYearActiveHistory::has_f_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NewYearActiveHistory::set_has_f_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NewYearActiveHistory::clear_has_f_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NewYearActiveHistory::clear_f_name() {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_->clear();
  }
  clear_has_f_name();
}
inline const ::std::string& NewYearActiveHistory::f_name() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveHistory.f_name)
  return *f_name_;
}
inline void NewYearActiveHistory::set_f_name(const ::std::string& value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveHistory.f_name)
}
inline void NewYearActiveHistory::set_f_name(const char* value) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:NewYearActive.NewYearActiveHistory.f_name)
}
inline void NewYearActiveHistory::set_f_name(const char* value, size_t size) {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  f_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NewYearActive.NewYearActiveHistory.f_name)
}
inline ::std::string* NewYearActiveHistory::mutable_f_name() {
  set_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    f_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NewYearActive.NewYearActiveHistory.f_name)
  return f_name_;
}
inline ::std::string* NewYearActiveHistory::release_f_name() {
  clear_has_f_name();
  if (f_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = f_name_;
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewYearActiveHistory::set_allocated_f_name(::std::string* f_name) {
  if (f_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete f_name_;
  }
  if (f_name) {
    set_has_f_name();
    f_name_ = f_name;
  } else {
    clear_has_f_name();
    f_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NewYearActive.NewYearActiveHistory.f_name)
}

// -------------------------------------------------------------------

// NewYearActiveUser

// required uint32 uid = 1;
inline bool NewYearActiveUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewYearActiveUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewYearActiveUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewYearActiveUser::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 NewYearActiveUser::uid() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveUser.uid)
  return uid_;
}
inline void NewYearActiveUser::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveUser.uid)
}

// required uint32 count = 2;
inline bool NewYearActiveUser::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewYearActiveUser::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewYearActiveUser::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewYearActiveUser::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 NewYearActiveUser::count() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveUser.count)
  return count_;
}
inline void NewYearActiveUser::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveUser.count)
}

// required uint32 ts = 3;
inline bool NewYearActiveUser::has_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewYearActiveUser::set_has_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewYearActiveUser::clear_has_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewYearActiveUser::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 NewYearActiveUser::ts() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveUser.ts)
  return ts_;
}
inline void NewYearActiveUser::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveUser.ts)
}

// repeated .NewYearActive.NewYearActiveHistory history = 4;
inline int NewYearActiveUser::history_size() const {
  return history_.size();
}
inline void NewYearActiveUser::clear_history() {
  history_.Clear();
}
inline const ::NewYearActive::NewYearActiveHistory& NewYearActiveUser::history(int index) const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveUser.history)
  return history_.Get(index);
}
inline ::NewYearActive::NewYearActiveHistory* NewYearActiveUser::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:NewYearActive.NewYearActiveUser.history)
  return history_.Mutable(index);
}
inline ::NewYearActive::NewYearActiveHistory* NewYearActiveUser::add_history() {
  // @@protoc_insertion_point(field_add:NewYearActive.NewYearActiveUser.history)
  return history_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory >&
NewYearActiveUser::history() const {
  // @@protoc_insertion_point(field_list:NewYearActive.NewYearActiveUser.history)
  return history_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory >*
NewYearActiveUser::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:NewYearActive.NewYearActiveUser.history)
  return &history_;
}

// repeated uint32 uids = 5;
inline int NewYearActiveUser::uids_size() const {
  return uids_.size();
}
inline void NewYearActiveUser::clear_uids() {
  uids_.Clear();
}
inline ::google::protobuf::uint32 NewYearActiveUser::uids(int index) const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveUser.uids)
  return uids_.Get(index);
}
inline void NewYearActiveUser::set_uids(int index, ::google::protobuf::uint32 value) {
  uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveUser.uids)
}
inline void NewYearActiveUser::add_uids(::google::protobuf::uint32 value) {
  uids_.Add(value);
  // @@protoc_insertion_point(field_add:NewYearActive.NewYearActiveUser.uids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NewYearActiveUser::uids() const {
  // @@protoc_insertion_point(field_list:NewYearActive.NewYearActiveUser.uids)
  return uids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NewYearActiveUser::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:NewYearActive.NewYearActiveUser.uids)
  return &uids_;
}

// -------------------------------------------------------------------

// NewYearActiveRank

// required uint32 uid = 1;
inline bool NewYearActiveRank::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewYearActiveRank::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewYearActiveRank::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewYearActiveRank::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 NewYearActiveRank::uid() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveRank.uid)
  return uid_;
}
inline void NewYearActiveRank::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveRank.uid)
}

// required uint32 count = 2;
inline bool NewYearActiveRank::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewYearActiveRank::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewYearActiveRank::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewYearActiveRank::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 NewYearActiveRank::count() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveRank.count)
  return count_;
}
inline void NewYearActiveRank::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveRank.count)
}

// required string name = 3;
inline bool NewYearActiveRank::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NewYearActiveRank::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NewYearActiveRank::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NewYearActiveRank::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NewYearActiveRank::name() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveRank.name)
  return *name_;
}
inline void NewYearActiveRank::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveRank.name)
}
inline void NewYearActiveRank::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:NewYearActive.NewYearActiveRank.name)
}
inline void NewYearActiveRank::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NewYearActive.NewYearActiveRank.name)
}
inline ::std::string* NewYearActiveRank::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NewYearActive.NewYearActiveRank.name)
  return name_;
}
inline ::std::string* NewYearActiveRank::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewYearActiveRank::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NewYearActive.NewYearActiveRank.name)
}

// required string pic = 4;
inline bool NewYearActiveRank::has_pic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NewYearActiveRank::set_has_pic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NewYearActiveRank::clear_has_pic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NewYearActiveRank::clear_pic() {
  if (pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pic_->clear();
  }
  clear_has_pic();
}
inline const ::std::string& NewYearActiveRank::pic() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActiveRank.pic)
  return *pic_;
}
inline void NewYearActiveRank::set_pic(const ::std::string& value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActiveRank.pic)
}
inline void NewYearActiveRank::set_pic(const char* value) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pic_ = new ::std::string;
  }
  pic_->assign(value);
  // @@protoc_insertion_point(field_set_char:NewYearActive.NewYearActiveRank.pic)
}
inline void NewYearActiveRank::set_pic(const char* value, size_t size) {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pic_ = new ::std::string;
  }
  pic_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NewYearActive.NewYearActiveRank.pic)
}
inline ::std::string* NewYearActiveRank::mutable_pic() {
  set_has_pic();
  if (pic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pic_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NewYearActive.NewYearActiveRank.pic)
  return pic_;
}
inline ::std::string* NewYearActiveRank::release_pic() {
  clear_has_pic();
  if (pic_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pic_;
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewYearActiveRank::set_allocated_pic(::std::string* pic) {
  if (pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pic_;
  }
  if (pic) {
    set_has_pic();
    pic_ = pic;
  } else {
    clear_has_pic();
    pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NewYearActive.NewYearActiveRank.pic)
}

// -------------------------------------------------------------------

// NewYearActive

// required uint32 version = 1;
inline bool NewYearActive::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewYearActive::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewYearActive::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewYearActive::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 NewYearActive::version() const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActive.version)
  return version_;
}
inline void NewYearActive::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:NewYearActive.NewYearActive.version)
}

// repeated .NewYearActive.NewYearActiveUser users = 2;
inline int NewYearActive::users_size() const {
  return users_.size();
}
inline void NewYearActive::clear_users() {
  users_.Clear();
}
inline const ::NewYearActive::NewYearActiveUser& NewYearActive::users(int index) const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActive.users)
  return users_.Get(index);
}
inline ::NewYearActive::NewYearActiveUser* NewYearActive::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:NewYearActive.NewYearActive.users)
  return users_.Mutable(index);
}
inline ::NewYearActive::NewYearActiveUser* NewYearActive::add_users() {
  // @@protoc_insertion_point(field_add:NewYearActive.NewYearActive.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveUser >&
NewYearActive::users() const {
  // @@protoc_insertion_point(field_list:NewYearActive.NewYearActive.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveUser >*
NewYearActive::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:NewYearActive.NewYearActive.users)
  return &users_;
}

// repeated .NewYearActive.NewYearActiveRank ranks = 3;
inline int NewYearActive::ranks_size() const {
  return ranks_.size();
}
inline void NewYearActive::clear_ranks() {
  ranks_.Clear();
}
inline const ::NewYearActive::NewYearActiveRank& NewYearActive::ranks(int index) const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActive.ranks)
  return ranks_.Get(index);
}
inline ::NewYearActive::NewYearActiveRank* NewYearActive::mutable_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:NewYearActive.NewYearActive.ranks)
  return ranks_.Mutable(index);
}
inline ::NewYearActive::NewYearActiveRank* NewYearActive::add_ranks() {
  // @@protoc_insertion_point(field_add:NewYearActive.NewYearActive.ranks)
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveRank >&
NewYearActive::ranks() const {
  // @@protoc_insertion_point(field_list:NewYearActive.NewYearActive.ranks)
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveRank >*
NewYearActive::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:NewYearActive.NewYearActive.ranks)
  return &ranks_;
}

// repeated .NewYearActive.NewYearActiveHistory historys = 4;
inline int NewYearActive::historys_size() const {
  return historys_.size();
}
inline void NewYearActive::clear_historys() {
  historys_.Clear();
}
inline const ::NewYearActive::NewYearActiveHistory& NewYearActive::historys(int index) const {
  // @@protoc_insertion_point(field_get:NewYearActive.NewYearActive.historys)
  return historys_.Get(index);
}
inline ::NewYearActive::NewYearActiveHistory* NewYearActive::mutable_historys(int index) {
  // @@protoc_insertion_point(field_mutable:NewYearActive.NewYearActive.historys)
  return historys_.Mutable(index);
}
inline ::NewYearActive::NewYearActiveHistory* NewYearActive::add_historys() {
  // @@protoc_insertion_point(field_add:NewYearActive.NewYearActive.historys)
  return historys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory >&
NewYearActive::historys() const {
  // @@protoc_insertion_point(field_list:NewYearActive.NewYearActive.historys)
  return historys_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewYearActive::NewYearActiveHistory >*
NewYearActive::mutable_historys() {
  // @@protoc_insertion_point(field_mutable_list:NewYearActive.NewYearActive.historys)
  return &historys_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NewYearActive

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NewYearActive_2eproto__INCLUDED
