// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameproto.proto

#ifndef PROTOBUF_gameproto_2eproto__INCLUDED
#define PROTOBUF_gameproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace game {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gameproto_2eproto();
void protobuf_AssignDesc_gameproto_2eproto();
void protobuf_ShutdownFile_gameproto_2eproto();

class tagGain;
class tagHandCards;
class tagWeaveCards;
class tagPlayers;
class tagDissolveRoomInfo;
class tagIsChouPai;
class AckTableInfo;
class AckGameStart;
class AckOperateNotify;
class ReqOperateCard;
class AckOutNotify;
class AckCircleEnd;
class ReqOutCard;
class AckOutCard;
class ReqChangeCard;
class AckChangeCard;
class AckUpdateCard;
class AckUpdateAbandon;
class tagFanInfo;
class AckGameEnd;
class AckGameStartFail;
class AckUserReady;
class AckDissolveErr;
class AckDissolveSucc;
class ReqDissolveAct;
class AckDissolveActSucc;
class AckDissolveResult;
class AckOffline;
class AckFinalEnd;
class AckHandDetail;
class AckLastEndInfo;
class AckChouNotity;
class TableInfoVideo;
class GameStartVideo;
class OperateVideo;
class OperateNotify;
class AckChat;
class AckFace;
class AckGains;

// ===================================================================

class tagGain : public ::google::protobuf::Message {
 public:
  tagGain();
  virtual ~tagGain();

  tagGain(const tagGain& from);

  inline tagGain& operator=(const tagGain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagGain& default_instance();

  void Swap(tagGain* other);

  // implements Message ----------------------------------------------

  tagGain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagGain& from);
  void MergeFrom(const tagGain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 score = 1;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score(int index) const;
  inline void set_score(int index, ::google::protobuf::int32 value);
  inline void add_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_score();

  // @@protoc_insertion_point(class_scope:proto.game.tagGain)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagGain* default_instance_;
};
// -------------------------------------------------------------------

class tagHandCards : public ::google::protobuf::Message {
 public:
  tagHandCards();
  virtual ~tagHandCards();

  tagHandCards(const tagHandCards& from);

  inline tagHandCards& operator=(const tagHandCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagHandCards& default_instance();

  void Swap(tagHandCards* other);

  // implements Message ----------------------------------------------

  tagHandCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagHandCards& from);
  void MergeFrom(const tagHandCards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 card = 1;
  inline int card_size() const;
  inline void clear_card();
  static const int kCardFieldNumber = 1;
  inline ::google::protobuf::int32 card(int index) const;
  inline void set_card(int index, ::google::protobuf::int32 value);
  inline void add_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card();

  // optional int32 huxi = 2;
  inline bool has_huxi() const;
  inline void clear_huxi();
  static const int kHuxiFieldNumber = 2;
  inline ::google::protobuf::int32 huxi() const;
  inline void set_huxi(::google::protobuf::int32 value);

  // optional int32 wv_kind = 3;
  inline bool has_wv_kind() const;
  inline void clear_wv_kind();
  static const int kWvKindFieldNumber = 3;
  inline ::google::protobuf::int32 wv_kind() const;
  inline void set_wv_kind(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagHandCards)
 private:
  inline void set_has_huxi();
  inline void clear_has_huxi();
  inline void set_has_wv_kind();
  inline void clear_has_wv_kind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_;
  ::google::protobuf::int32 huxi_;
  ::google::protobuf::int32 wv_kind_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagHandCards* default_instance_;
};
// -------------------------------------------------------------------

class tagWeaveCards : public ::google::protobuf::Message {
 public:
  tagWeaveCards();
  virtual ~tagWeaveCards();

  tagWeaveCards(const tagWeaveCards& from);

  inline tagWeaveCards& operator=(const tagWeaveCards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagWeaveCards& default_instance();

  void Swap(tagWeaveCards* other);

  // implements Message ----------------------------------------------

  tagWeaveCards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagWeaveCards& from);
  void MergeFrom(const tagWeaveCards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 weave_kind = 1;
  inline bool has_weave_kind() const;
  inline void clear_weave_kind();
  static const int kWeaveKindFieldNumber = 1;
  inline ::google::protobuf::int32 weave_kind() const;
  inline void set_weave_kind(::google::protobuf::int32 value);

  // optional int32 card_count = 2;
  inline bool has_card_count() const;
  inline void clear_card_count();
  static const int kCardCountFieldNumber = 2;
  inline ::google::protobuf::int32 card_count() const;
  inline void set_card_count(::google::protobuf::int32 value);

  // optional int32 center_card = 3;
  inline bool has_center_card() const;
  inline void clear_center_card();
  static const int kCenterCardFieldNumber = 3;
  inline ::google::protobuf::int32 center_card() const;
  inline void set_center_card(::google::protobuf::int32 value);

  // repeated int32 card_list = 4;
  inline int card_list_size() const;
  inline void clear_card_list();
  static const int kCardListFieldNumber = 4;
  inline ::google::protobuf::int32 card_list(int index) const;
  inline void set_card_list(int index, ::google::protobuf::int32 value);
  inline void add_card_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card_list();

  // optional int32 hu_xi = 5;
  inline bool has_hu_xi() const;
  inline void clear_hu_xi();
  static const int kHuXiFieldNumber = 5;
  inline ::google::protobuf::int32 hu_xi() const;
  inline void set_hu_xi(::google::protobuf::int32 value);

  // optional int32 out_card = 6;
  inline bool has_out_card() const;
  inline void clear_out_card();
  static const int kOutCardFieldNumber = 6;
  inline ::google::protobuf::int32 out_card() const;
  inline void set_out_card(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagWeaveCards)
 private:
  inline void set_has_weave_kind();
  inline void clear_has_weave_kind();
  inline void set_has_card_count();
  inline void clear_has_card_count();
  inline void set_has_center_card();
  inline void clear_has_center_card();
  inline void set_has_hu_xi();
  inline void clear_has_hu_xi();
  inline void set_has_out_card();
  inline void clear_has_out_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 weave_kind_;
  ::google::protobuf::int32 card_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_list_;
  ::google::protobuf::int32 center_card_;
  ::google::protobuf::int32 hu_xi_;
  ::google::protobuf::int32 out_card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagWeaveCards* default_instance_;
};
// -------------------------------------------------------------------

class tagPlayers : public ::google::protobuf::Message {
 public:
  tagPlayers();
  virtual ~tagPlayers();

  tagPlayers(const tagPlayers& from);

  inline tagPlayers& operator=(const tagPlayers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPlayers& default_instance();

  void Swap(tagPlayers* other);

  // implements Message ----------------------------------------------

  tagPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagPlayers& from);
  void MergeFrom(const tagPlayers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 ready = 3;
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 3;
  inline ::google::protobuf::int32 ready() const;
  inline void set_ready(::google::protobuf::int32 value);

  // optional int32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional bytes avatar = 7;
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 7;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const void* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional int32 hu_xi = 8;
  inline bool has_hu_xi() const;
  inline void clear_hu_xi();
  static const int kHuXiFieldNumber = 8;
  inline ::google::protobuf::int32 hu_xi() const;
  inline void set_hu_xi(::google::protobuf::int32 value);

  // repeated .proto.game.tagWeaveCards weaves = 9;
  inline int weaves_size() const;
  inline void clear_weaves();
  static const int kWeavesFieldNumber = 9;
  inline const ::proto::game::tagWeaveCards& weaves(int index) const;
  inline ::proto::game::tagWeaveCards* mutable_weaves(int index);
  inline ::proto::game::tagWeaveCards* add_weaves();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
      weaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
      mutable_weaves();

  // repeated int32 abandon_cards = 10;
  inline int abandon_cards_size() const;
  inline void clear_abandon_cards();
  static const int kAbandonCardsFieldNumber = 10;
  inline ::google::protobuf::int32 abandon_cards(int index) const;
  inline void set_abandon_cards(int index, ::google::protobuf::int32 value);
  inline void add_abandon_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      abandon_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_abandon_cards();

  // repeated int32 abandon_type = 11;
  inline int abandon_type_size() const;
  inline void clear_abandon_type();
  static const int kAbandonTypeFieldNumber = 11;
  inline ::google::protobuf::int32 abandon_type(int index) const;
  inline void set_abandon_type(int index, ::google::protobuf::int32 value);
  inline void add_abandon_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      abandon_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_abandon_type();

  // optional int32 offline = 15;
  inline bool has_offline() const;
  inline void clear_offline();
  static const int kOfflineFieldNumber = 15;
  inline ::google::protobuf::int32 offline() const;
  inline void set_offline(::google::protobuf::int32 value);

  // optional int32 action = 16;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 16;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // repeated .proto.game.tagHandCards hand_cards = 17;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 17;
  inline const ::proto::game::tagHandCards& hand_cards(int index) const;
  inline ::proto::game::tagHandCards* mutable_hand_cards(int index);
  inline ::proto::game::tagHandCards* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_hand_cards();

  // optional int32 total_score = 18;
  inline bool has_total_score() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 18;
  inline ::google::protobuf::int32 total_score() const;
  inline void set_total_score(::google::protobuf::int32 value);

  // optional int32 hand_count = 22;
  inline bool has_hand_count() const;
  inline void clear_hand_count();
  static const int kHandCountFieldNumber = 22;
  inline ::google::protobuf::int32 hand_count() const;
  inline void set_hand_count(::google::protobuf::int32 value);

  // optional int32 hu_count = 23;
  inline bool has_hu_count() const;
  inline void clear_hu_count();
  static const int kHuCountFieldNumber = 23;
  inline ::google::protobuf::int32 hu_count() const;
  inline void set_hu_count(::google::protobuf::int32 value);

  // optional int32 best_huxi = 24;
  inline bool has_best_huxi() const;
  inline void clear_best_huxi();
  static const int kBestHuxiFieldNumber = 24;
  inline ::google::protobuf::int32 best_huxi() const;
  inline void set_best_huxi(::google::protobuf::int32 value);

  // optional int32 best_score = 26;
  inline bool has_best_score() const;
  inline void clear_best_score();
  static const int kBestScoreFieldNumber = 26;
  inline ::google::protobuf::int32 best_score() const;
  inline void set_best_score(::google::protobuf::int32 value);

  // optional int32 operate_type = 28;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 28;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // optional int32 score = 29;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 29;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // repeated int32 gains = 33;
  inline int gains_size() const;
  inline void clear_gains();
  static const int kGainsFieldNumber = 33;
  inline ::google::protobuf::int32 gains(int index) const;
  inline void set_gains(int index, ::google::protobuf::int32 value);
  inline void add_gains(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      gains() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_gains();

  // optional int32 total_gains = 34;
  inline bool has_total_gains() const;
  inline void clear_total_gains();
  static const int kTotalGainsFieldNumber = 34;
  inline ::google::protobuf::int32 total_gains() const;
  inline void set_total_gains(::google::protobuf::int32 value);

  // optional int32 dissolve_cnt = 40;
  inline bool has_dissolve_cnt() const;
  inline void clear_dissolve_cnt();
  static const int kDissolveCntFieldNumber = 40;
  inline ::google::protobuf::int32 dissolve_cnt() const;
  inline void set_dissolve_cnt(::google::protobuf::int32 value);

  // optional int32 dissovle_state = 41;
  inline bool has_dissovle_state() const;
  inline void clear_dissovle_state();
  static const int kDissovleStateFieldNumber = 41;
  inline ::google::protobuf::int32 dissovle_state() const;
  inline void set_dissovle_state(::google::protobuf::int32 value);

  // optional bytes tid = 42;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 42;
  inline const ::std::string& tid() const;
  inline void set_tid(const ::std::string& value);
  inline void set_tid(const char* value);
  inline void set_tid(const void* value, size_t size);
  inline ::std::string* mutable_tid();
  inline ::std::string* release_tid();
  inline void set_allocated_tid(::std::string* tid);

  // optional bytes skey = 43;
  inline bool has_skey() const;
  inline void clear_skey();
  static const int kSkeyFieldNumber = 43;
  inline const ::std::string& skey() const;
  inline void set_skey(const ::std::string& value);
  inline void set_skey(const char* value);
  inline void set_skey(const void* value, size_t size);
  inline ::std::string* mutable_skey();
  inline ::std::string* release_skey();
  inline void set_allocated_skey(::std::string* skey);

  // repeated int32 card_index = 44;
  inline int card_index_size() const;
  inline void clear_card_index();
  static const int kCardIndexFieldNumber = 44;
  inline ::google::protobuf::int32 card_index(int index) const;
  inline void set_card_index(int index, ::google::protobuf::int32 value);
  inline void add_card_index(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      card_index() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_card_index();

  // repeated .proto.game.tagHandCards cards_weave = 45;
  inline int cards_weave_size() const;
  inline void clear_cards_weave();
  static const int kCardsWeaveFieldNumber = 45;
  inline const ::proto::game::tagHandCards& cards_weave(int index) const;
  inline ::proto::game::tagHandCards* mutable_cards_weave(int index);
  inline ::proto::game::tagHandCards* add_cards_weave();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      cards_weave() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_cards_weave();

  // repeated .proto.game.tagHandCards best_weave = 46;
  inline int best_weave_size() const;
  inline void clear_best_weave();
  static const int kBestWeaveFieldNumber = 46;
  inline const ::proto::game::tagHandCards& best_weave(int index) const;
  inline ::proto::game::tagHandCards* mutable_best_weave(int index);
  inline ::proto::game::tagHandCards* add_best_weave();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      best_weave() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_best_weave();

  // repeated .proto.game.tagWeaveCards win_cards_weaves = 47;
  inline int win_cards_weaves_size() const;
  inline void clear_win_cards_weaves();
  static const int kWinCardsWeavesFieldNumber = 47;
  inline const ::proto::game::tagWeaveCards& win_cards_weaves(int index) const;
  inline ::proto::game::tagWeaveCards* mutable_win_cards_weaves(int index);
  inline ::proto::game::tagWeaveCards* add_win_cards_weaves();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
      win_cards_weaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
      mutable_win_cards_weaves();

  // optional int32 total_fan = 48;
  inline bool has_total_fan() const;
  inline void clear_total_fan();
  static const int kTotalFanFieldNumber = 48;
  inline ::google::protobuf::int32 total_fan() const;
  inline void set_total_fan(::google::protobuf::int32 value);

  // repeated int32 user_out_cards = 49;
  inline int user_out_cards_size() const;
  inline void clear_user_out_cards();
  static const int kUserOutCardsFieldNumber = 49;
  inline ::google::protobuf::int32 user_out_cards(int index) const;
  inline void set_user_out_cards(int index, ::google::protobuf::int32 value);
  inline void add_user_out_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      user_out_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_user_out_cards();

  // @@protoc_insertion_point(class_scope:proto.game.tagPlayers)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_hu_xi();
  inline void clear_has_hu_xi();
  inline void set_has_offline();
  inline void clear_has_offline();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_total_score();
  inline void clear_has_total_score();
  inline void set_has_hand_count();
  inline void clear_has_hand_count();
  inline void set_has_hu_count();
  inline void clear_has_hu_count();
  inline void set_has_best_huxi();
  inline void clear_has_best_huxi();
  inline void set_has_best_score();
  inline void clear_has_best_score();
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_total_gains();
  inline void clear_has_total_gains();
  inline void set_has_dissolve_cnt();
  inline void clear_has_dissolve_cnt();
  inline void set_has_dissovle_state();
  inline void clear_has_dissovle_state();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_skey();
  inline void clear_has_skey();
  inline void set_has_total_fan();
  inline void clear_has_total_fan();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 ready_;
  ::google::protobuf::int32 money_;
  ::std::string* name_;
  ::std::string* avatar_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 hu_xi_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards > weaves_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > abandon_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > abandon_type_;
  ::google::protobuf::int32 offline_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > hand_cards_;
  ::google::protobuf::int32 total_score_;
  ::google::protobuf::int32 hand_count_;
  ::google::protobuf::int32 hu_count_;
  ::google::protobuf::int32 best_huxi_;
  ::google::protobuf::int32 best_score_;
  ::google::protobuf::int32 operate_type_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 total_gains_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > gains_;
  ::google::protobuf::int32 dissolve_cnt_;
  ::google::protobuf::int32 dissovle_state_;
  ::std::string* tid_;
  ::std::string* skey_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > card_index_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > cards_weave_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > best_weave_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards > win_cards_weaves_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > user_out_cards_;
  ::google::protobuf::int32 total_fan_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagPlayers* default_instance_;
};
// -------------------------------------------------------------------

class tagDissolveRoomInfo : public ::google::protobuf::Message {
 public:
  tagDissolveRoomInfo();
  virtual ~tagDissolveRoomInfo();

  tagDissolveRoomInfo(const tagDissolveRoomInfo& from);

  inline tagDissolveRoomInfo& operator=(const tagDissolveRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagDissolveRoomInfo& default_instance();

  void Swap(tagDissolveRoomInfo* other);

  // implements Message ----------------------------------------------

  tagDissolveRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagDissolveRoomInfo& from);
  void MergeFrom(const tagDissolveRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // repeated int32 voters_uid = 3;
  inline int voters_uid_size() const;
  inline void clear_voters_uid();
  static const int kVotersUidFieldNumber = 3;
  inline ::google::protobuf::int32 voters_uid(int index) const;
  inline void set_voters_uid(int index, ::google::protobuf::int32 value);
  inline void add_voters_uid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      voters_uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_voters_uid();

  // repeated .proto.game.tagPlayers players = 4;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 4;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // optional int32 remain_time = 5;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 5;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagDissolveRoomInfo)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > voters_uid_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;
  ::google::protobuf::int32 remain_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagDissolveRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class tagIsChouPai : public ::google::protobuf::Message {
 public:
  tagIsChouPai();
  virtual ~tagIsChouPai();

  tagIsChouPai(const tagIsChouPai& from);

  inline tagIsChouPai& operator=(const tagIsChouPai& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagIsChouPai& default_instance();

  void Swap(tagIsChouPai* other);

  // implements Message ----------------------------------------------

  tagIsChouPai* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagIsChouPai& from);
  void MergeFrom(const tagIsChouPai& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool is_chou_pai = 1;
  inline int is_chou_pai_size() const;
  inline void clear_is_chou_pai();
  static const int kIsChouPaiFieldNumber = 1;
  inline bool is_chou_pai(int index) const;
  inline void set_is_chou_pai(int index, bool value);
  inline void add_is_chou_pai(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      is_chou_pai() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_is_chou_pai();

  // @@protoc_insertion_point(class_scope:proto.game.tagIsChouPai)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > is_chou_pai_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagIsChouPai* default_instance_;
};
// -------------------------------------------------------------------

class AckTableInfo : public ::google::protobuf::Message {
 public:
  AckTableInfo();
  virtual ~AckTableInfo();

  AckTableInfo(const AckTableInfo& from);

  inline AckTableInfo& operator=(const AckTableInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTableInfo& default_instance();

  void Swap(AckTableInfo* other);

  // implements Message ----------------------------------------------

  AckTableInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckTableInfo& from);
  void MergeFrom(const AckTableInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 operate_timer_stamp = 3;
  inline bool has_operate_timer_stamp() const;
  inline void clear_operate_timer_stamp();
  static const int kOperateTimerStampFieldNumber = 3;
  inline ::google::protobuf::int32 operate_timer_stamp() const;
  inline void set_operate_timer_stamp(::google::protobuf::int32 value);

  // optional int32 left_card_count = 4;
  inline bool has_left_card_count() const;
  inline void clear_left_card_count();
  static const int kLeftCardCountFieldNumber = 4;
  inline ::google::protobuf::int32 left_card_count() const;
  inline void set_left_card_count(::google::protobuf::int32 value);

  // optional int32 banker_user = 5;
  inline bool has_banker_user() const;
  inline void clear_banker_user();
  static const int kBankerUserFieldNumber = 5;
  inline ::google::protobuf::int32 banker_user() const;
  inline void set_banker_user(::google::protobuf::int32 value);

  // optional int32 current_user = 6;
  inline bool has_current_user() const;
  inline void clear_current_user();
  static const int kCurrentUserFieldNumber = 6;
  inline ::google::protobuf::int32 current_user() const;
  inline void set_current_user(::google::protobuf::int32 value);

  // optional int32 current_card = 7;
  inline bool has_current_card() const;
  inline void clear_current_card();
  static const int kCurrentCardFieldNumber = 7;
  inline ::google::protobuf::int32 current_card() const;
  inline void set_current_card(::google::protobuf::int32 value);

  // optional int32 current_outcard_user = 8;
  inline bool has_current_outcard_user() const;
  inline void clear_current_outcard_user();
  static const int kCurrentOutcardUserFieldNumber = 8;
  inline ::google::protobuf::int32 current_outcard_user() const;
  inline void set_current_outcard_user(::google::protobuf::int32 value);

  // optional int32 current_outcard = 9;
  inline bool has_current_outcard() const;
  inline void clear_current_outcard();
  static const int kCurrentOutcardFieldNumber = 9;
  inline ::google::protobuf::int32 current_outcard() const;
  inline void set_current_outcard(::google::protobuf::int32 value);

  // optional bool is_dispatch = 10;
  inline bool has_is_dispatch() const;
  inline void clear_is_dispatch();
  static const int kIsDispatchFieldNumber = 10;
  inline bool is_dispatch() const;
  inline void set_is_dispatch(bool value);

  // optional bool card_operated = 11;
  inline bool has_card_operated() const;
  inline void clear_card_operated();
  static const int kCardOperatedFieldNumber = 11;
  inline bool card_operated() const;
  inline void set_card_operated(bool value);

  // optional bool is_out_card = 13;
  inline bool has_is_out_card() const;
  inline void clear_is_out_card();
  static const int kIsOutCardFieldNumber = 13;
  inline bool is_out_card() const;
  inline void set_is_out_card(bool value);

  // optional bool is_first_card = 14;
  inline bool has_is_first_card() const;
  inline void clear_is_first_card();
  static const int kIsFirstCardFieldNumber = 14;
  inline bool is_first_card() const;
  inline void set_is_first_card(bool value);

  // optional int32 huang_count = 15;
  inline bool has_huang_count() const;
  inline void clear_huang_count();
  static const int kHuangCountFieldNumber = 15;
  inline ::google::protobuf::int32 huang_count() const;
  inline void set_huang_count(::google::protobuf::int32 value);

  // optional int32 take_in = 16;
  inline bool has_take_in() const;
  inline void clear_take_in();
  static const int kTakeInFieldNumber = 16;
  inline ::google::protobuf::int32 take_in() const;
  inline void set_take_in(::google::protobuf::int32 value);

  // optional int32 play_id = 17;
  inline bool has_play_id() const;
  inline void clear_play_id();
  static const int kPlayIdFieldNumber = 17;
  inline ::google::protobuf::int32 play_id() const;
  inline void set_play_id(::google::protobuf::int32 value);

  // optional int32 base_huxi = 18;
  inline bool has_base_huxi() const;
  inline void clear_base_huxi();
  static const int kBaseHuxiFieldNumber = 18;
  inline ::google::protobuf::int32 base_huxi() const;
  inline void set_base_huxi(::google::protobuf::int32 value);

  // optional int32 room_user_id = 19;
  inline bool has_room_user_id() const;
  inline void clear_room_user_id();
  static const int kRoomUserIdFieldNumber = 19;
  inline ::google::protobuf::int32 room_user_id() const;
  inline void set_room_user_id(::google::protobuf::int32 value);

  // optional int32 user_action = 22;
  inline bool has_user_action() const;
  inline void clear_user_action();
  static const int kUserActionFieldNumber = 22;
  inline ::google::protobuf::int32 user_action() const;
  inline void set_user_action(::google::protobuf::int32 value);

  // optional bool is_first_operate = 23;
  inline bool has_is_first_operate() const;
  inline void clear_is_first_operate();
  static const int kIsFirstOperateFieldNumber = 23;
  inline bool is_first_operate() const;
  inline void set_is_first_operate(bool value);

  // optional bool response = 24;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 24;
  inline bool response() const;
  inline void set_response(bool value);

  // optional int32 perform_action = 25;
  inline bool has_perform_action() const;
  inline void clear_perform_action();
  static const int kPerformActionFieldNumber = 25;
  inline ::google::protobuf::int32 perform_action() const;
  inline void set_perform_action(::google::protobuf::int32 value);

  // repeated .proto.game.tagHandCards hand_cards = 26;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 26;
  inline const ::proto::game::tagHandCards& hand_cards(int index) const;
  inline ::proto::game::tagHandCards* mutable_hand_cards(int index);
  inline ::proto::game::tagHandCards* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_hand_cards();

  // optional int32 stand_money = 30;
  inline bool has_stand_money() const;
  inline void clear_stand_money();
  static const int kStandMoneyFieldNumber = 30;
  inline ::google::protobuf::int32 stand_money() const;
  inline void set_stand_money(::google::protobuf::int32 value);

  // optional int32 base_money = 31;
  inline bool has_base_money() const;
  inline void clear_base_money();
  static const int kBaseMoneyFieldNumber = 31;
  inline ::google::protobuf::int32 base_money() const;
  inline void set_base_money(::google::protobuf::int32 value);

  // optional .proto.game.tagDissolveRoomInfo dissolve_room_info = 32;
  inline bool has_dissolve_room_info() const;
  inline void clear_dissolve_room_info();
  static const int kDissolveRoomInfoFieldNumber = 32;
  inline const ::proto::game::tagDissolveRoomInfo& dissolve_room_info() const;
  inline ::proto::game::tagDissolveRoomInfo* mutable_dissolve_room_info();
  inline ::proto::game::tagDissolveRoomInfo* release_dissolve_room_info();
  inline void set_allocated_dissolve_room_info(::proto::game::tagDissolveRoomInfo* dissolve_room_info);

  // repeated .proto.game.tagPlayers players = 33;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 33;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // repeated bytes offline_info = 34;
  inline int offline_info_size() const;
  inline void clear_offline_info();
  static const int kOfflineInfoFieldNumber = 34;
  inline const ::std::string& offline_info(int index) const;
  inline ::std::string* mutable_offline_info(int index);
  inline void set_offline_info(int index, const ::std::string& value);
  inline void set_offline_info(int index, const char* value);
  inline void set_offline_info(int index, const void* value, size_t size);
  inline ::std::string* add_offline_info();
  inline void add_offline_info(const ::std::string& value);
  inline void add_offline_info(const char* value);
  inline void add_offline_info(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& offline_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_offline_info();

  // optional int32 offline_max_count = 35;
  inline bool has_offline_max_count() const;
  inline void clear_offline_max_count();
  static const int kOfflineMaxCountFieldNumber = 35;
  inline ::google::protobuf::int32 offline_max_count() const;
  inline void set_offline_max_count(::google::protobuf::int32 value);

  // optional int32 game_player = 36;
  inline bool has_game_player() const;
  inline void clear_game_player();
  static const int kGamePlayerFieldNumber = 36;
  inline ::google::protobuf::int32 game_player() const;
  inline void set_game_player(::google::protobuf::int32 value);

  // optional bytes game_name = 37;
  inline bool has_game_name() const;
  inline void clear_game_name();
  static const int kGameNameFieldNumber = 37;
  inline const ::std::string& game_name() const;
  inline void set_game_name(const ::std::string& value);
  inline void set_game_name(const char* value);
  inline void set_game_name(const void* value, size_t size);
  inline ::std::string* mutable_game_name();
  inline ::std::string* release_game_name();
  inline void set_allocated_game_name(::std::string* game_name);

  // optional bool is_base_two_score = 46;
  inline bool has_is_base_two_score() const;
  inline void clear_is_base_two_score();
  static const int kIsBaseTwoScoreFieldNumber = 46;
  inline bool is_base_two_score() const;
  inline void set_is_base_two_score(bool value);

  // optional bytes tid = 50;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 50;
  inline const ::std::string& tid() const;
  inline void set_tid(const ::std::string& value);
  inline void set_tid(const char* value);
  inline void set_tid(const void* value, size_t size);
  inline ::std::string* mutable_tid();
  inline ::std::string* release_tid();
  inline void set_allocated_tid(::std::string* tid);

  // optional int32 room_status = 51;
  inline bool has_room_status() const;
  inline void clear_room_status();
  static const int kRoomStatusFieldNumber = 51;
  inline ::google::protobuf::int32 room_status() const;
  inline void set_room_status(::google::protobuf::int32 value);

  // optional int32 dissolve_applyer = 52;
  inline bool has_dissolve_applyer() const;
  inline void clear_dissolve_applyer();
  static const int kDissolveApplyerFieldNumber = 52;
  inline ::google::protobuf::int32 dissolve_applyer() const;
  inline void set_dissolve_applyer(::google::protobuf::int32 value);

  // optional int32 dissovle_state = 53;
  inline bool has_dissovle_state() const;
  inline void clear_dissovle_state();
  static const int kDissovleStateFieldNumber = 53;
  inline ::google::protobuf::int32 dissovle_state() const;
  inline void set_dissovle_state(::google::protobuf::int32 value);

  // optional int32 is_dissolved = 54;
  inline bool has_is_dissolved() const;
  inline void clear_is_dissolved();
  static const int kIsDissolvedFieldNumber = 54;
  inline ::google::protobuf::int32 is_dissolved() const;
  inline void set_is_dissolved(::google::protobuf::int32 value);

  // repeated int32 repertory_cards = 60;
  inline int repertory_cards_size() const;
  inline void clear_repertory_cards();
  static const int kRepertoryCardsFieldNumber = 60;
  inline ::google::protobuf::int32 repertory_cards(int index) const;
  inline void set_repertory_cards(int index, ::google::protobuf::int32 value);
  inline void add_repertory_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      repertory_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_repertory_cards();

  // repeated int32 weave_huxi = 61;
  inline int weave_huxi_size() const;
  inline void clear_weave_huxi();
  static const int kWeaveHuxiFieldNumber = 61;
  inline ::google::protobuf::int32 weave_huxi(int index) const;
  inline void set_weave_huxi(int index, ::google::protobuf::int32 value);
  inline void add_weave_huxi(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      weave_huxi() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_weave_huxi();

  // repeated int32 show_huxi = 62;
  inline int show_huxi_size() const;
  inline void clear_show_huxi();
  static const int kShowHuxiFieldNumber = 62;
  inline ::google::protobuf::int32 show_huxi(int index) const;
  inline void set_show_huxi(int index, ::google::protobuf::int32 value);
  inline void add_show_huxi(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      show_huxi() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_show_huxi();

  // repeated int32 out_count = 64;
  inline int out_count_size() const;
  inline void clear_out_count();
  static const int kOutCountFieldNumber = 64;
  inline ::google::protobuf::int32 out_count(int index) const;
  inline void set_out_count(int index, ::google::protobuf::int32 value);
  inline void add_out_count(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      out_count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_out_count();

  // repeated int32 cur_card_huxi = 65;
  inline int cur_card_huxi_size() const;
  inline void clear_cur_card_huxi();
  static const int kCurCardHuxiFieldNumber = 65;
  inline ::google::protobuf::int32 cur_card_huxi(int index) const;
  inline void set_cur_card_huxi(int index, ::google::protobuf::int32 value);
  inline void add_cur_card_huxi(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cur_card_huxi() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cur_card_huxi();

  // optional bool dispatch_hu = 70;
  inline bool has_dispatch_hu() const;
  inline void clear_dispatch_hu();
  static const int kDispatchHuFieldNumber = 70;
  inline bool dispatch_hu() const;
  inline void set_dispatch_hu(bool value);

  // optional int32 banker_card = 80;
  inline bool has_banker_card() const;
  inline void clear_banker_card();
  static const int kBankerCardFieldNumber = 80;
  inline ::google::protobuf::int32 banker_card() const;
  inline void set_banker_card(::google::protobuf::int32 value);

  // repeated bool user_responses = 81;
  inline int user_responses_size() const;
  inline void clear_user_responses();
  static const int kUserResponsesFieldNumber = 81;
  inline bool user_responses(int index) const;
  inline void set_user_responses(int index, bool value);
  inline void add_user_responses(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      user_responses() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_user_responses();

  // repeated int32 user_actions = 82;
  inline int user_actions_size() const;
  inline void clear_user_actions();
  static const int kUserActionsFieldNumber = 82;
  inline ::google::protobuf::int32 user_actions(int index) const;
  inline void set_user_actions(int index, ::google::protobuf::int32 value);
  inline void add_user_actions(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      user_actions() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_user_actions();

  // repeated int32 user_prerform = 83;
  inline int user_prerform_size() const;
  inline void clear_user_prerform();
  static const int kUserPrerformFieldNumber = 83;
  inline ::google::protobuf::int32 user_prerform(int index) const;
  inline void set_user_prerform(int index, ::google::protobuf::int32 value);
  inline void add_user_prerform(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      user_prerform() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_user_prerform();

  // optional bool is_tianhu_show = 92;
  inline bool has_is_tianhu_show() const;
  inline void clear_is_tianhu_show();
  static const int kIsTianhuShowFieldNumber = 92;
  inline bool is_tianhu_show() const;
  inline void set_is_tianhu_show(bool value);

  // optional bool already_resp = 94;
  inline bool has_already_resp() const;
  inline void clear_already_resp();
  static const int kAlreadyRespFieldNumber = 94;
  inline bool already_resp() const;
  inline void set_already_resp(bool value);

  // optional int32 current_num = 105;
  inline bool has_current_num() const;
  inline void clear_current_num();
  static const int kCurrentNumFieldNumber = 105;
  inline ::google::protobuf::int32 current_num() const;
  inline void set_current_num(::google::protobuf::int32 value);

  // optional bytes innings = 106;
  inline bool has_innings() const;
  inline void clear_innings();
  static const int kInningsFieldNumber = 106;
  inline const ::std::string& innings() const;
  inline void set_innings(const ::std::string& value);
  inline void set_innings(const char* value);
  inline void set_innings(const void* value, size_t size);
  inline ::std::string* mutable_innings();
  inline ::std::string* release_innings();
  inline void set_allocated_innings(::std::string* innings);

  // optional bytes video_str = 107;
  inline bool has_video_str() const;
  inline void clear_video_str();
  static const int kVideoStrFieldNumber = 107;
  inline const ::std::string& video_str() const;
  inline void set_video_str(const ::std::string& value);
  inline void set_video_str(const char* value);
  inline void set_video_str(const void* value, size_t size);
  inline ::std::string* mutable_video_str();
  inline ::std::string* release_video_str();
  inline void set_allocated_video_str(::std::string* video_str);

  // optional int32 first_banker_user = 114;
  inline bool has_first_banker_user() const;
  inline void clear_first_banker_user();
  static const int kFirstBankerUserFieldNumber = 114;
  inline ::google::protobuf::int32 first_banker_user() const;
  inline void set_first_banker_user(::google::protobuf::int32 value);

  // repeated .proto.game.tagGain gains = 117;
  inline int gains_size() const;
  inline void clear_gains();
  static const int kGainsFieldNumber = 117;
  inline const ::proto::game::tagGain& gains(int index) const;
  inline ::proto::game::tagGain* mutable_gains(int index);
  inline ::proto::game::tagGain* add_gains();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGain >&
      gains() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGain >*
      mutable_gains();

  // repeated int32 win_weaves = 118;
  inline int win_weaves_size() const;
  inline void clear_win_weaves();
  static const int kWinWeavesFieldNumber = 118;
  inline ::google::protobuf::int32 win_weaves(int index) const;
  inline void set_win_weaves(int index, ::google::protobuf::int32 value);
  inline void add_win_weaves(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_weaves() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_weaves();

  // @@protoc_insertion_point(class_scope:proto.game.AckTableInfo)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_operate_timer_stamp();
  inline void clear_has_operate_timer_stamp();
  inline void set_has_left_card_count();
  inline void clear_has_left_card_count();
  inline void set_has_banker_user();
  inline void clear_has_banker_user();
  inline void set_has_current_user();
  inline void clear_has_current_user();
  inline void set_has_current_card();
  inline void clear_has_current_card();
  inline void set_has_current_outcard_user();
  inline void clear_has_current_outcard_user();
  inline void set_has_current_outcard();
  inline void clear_has_current_outcard();
  inline void set_has_is_dispatch();
  inline void clear_has_is_dispatch();
  inline void set_has_card_operated();
  inline void clear_has_card_operated();
  inline void set_has_is_out_card();
  inline void clear_has_is_out_card();
  inline void set_has_is_first_card();
  inline void clear_has_is_first_card();
  inline void set_has_huang_count();
  inline void clear_has_huang_count();
  inline void set_has_take_in();
  inline void clear_has_take_in();
  inline void set_has_play_id();
  inline void clear_has_play_id();
  inline void set_has_base_huxi();
  inline void clear_has_base_huxi();
  inline void set_has_room_user_id();
  inline void clear_has_room_user_id();
  inline void set_has_user_action();
  inline void clear_has_user_action();
  inline void set_has_is_first_operate();
  inline void clear_has_is_first_operate();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_perform_action();
  inline void clear_has_perform_action();
  inline void set_has_stand_money();
  inline void clear_has_stand_money();
  inline void set_has_base_money();
  inline void clear_has_base_money();
  inline void set_has_dissolve_room_info();
  inline void clear_has_dissolve_room_info();
  inline void set_has_offline_max_count();
  inline void clear_has_offline_max_count();
  inline void set_has_game_player();
  inline void clear_has_game_player();
  inline void set_has_game_name();
  inline void clear_has_game_name();
  inline void set_has_is_base_two_score();
  inline void clear_has_is_base_two_score();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_room_status();
  inline void clear_has_room_status();
  inline void set_has_dissolve_applyer();
  inline void clear_has_dissolve_applyer();
  inline void set_has_dissovle_state();
  inline void clear_has_dissovle_state();
  inline void set_has_is_dissolved();
  inline void clear_has_is_dissolved();
  inline void set_has_dispatch_hu();
  inline void clear_has_dispatch_hu();
  inline void set_has_banker_card();
  inline void clear_has_banker_card();
  inline void set_has_is_tianhu_show();
  inline void clear_has_is_tianhu_show();
  inline void set_has_already_resp();
  inline void clear_has_already_resp();
  inline void set_has_current_num();
  inline void clear_has_current_num();
  inline void set_has_innings();
  inline void clear_has_innings();
  inline void set_has_video_str();
  inline void clear_has_video_str();
  inline void set_has_first_banker_user();
  inline void clear_has_first_banker_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 operate_timer_stamp_;
  ::google::protobuf::int32 left_card_count_;
  ::google::protobuf::int32 banker_user_;
  ::google::protobuf::int32 current_user_;
  ::google::protobuf::int32 current_card_;
  ::google::protobuf::int32 current_outcard_user_;
  ::google::protobuf::int32 current_outcard_;
  bool is_dispatch_;
  bool card_operated_;
  bool is_out_card_;
  bool is_first_card_;
  ::google::protobuf::int32 huang_count_;
  ::google::protobuf::int32 take_in_;
  ::google::protobuf::int32 play_id_;
  ::google::protobuf::int32 base_huxi_;
  ::google::protobuf::int32 room_user_id_;
  ::google::protobuf::int32 user_action_;
  ::google::protobuf::int32 perform_action_;
  ::google::protobuf::int32 stand_money_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > hand_cards_;
  ::proto::game::tagDissolveRoomInfo* dissolve_room_info_;
  ::google::protobuf::int32 base_money_;
  ::google::protobuf::int32 offline_max_count_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;
  ::google::protobuf::RepeatedPtrField< ::std::string> offline_info_;
  bool is_first_operate_;
  bool response_;
  bool is_base_two_score_;
  bool dispatch_hu_;
  ::google::protobuf::int32 game_player_;
  ::std::string* game_name_;
  ::std::string* tid_;
  ::google::protobuf::int32 room_status_;
  ::google::protobuf::int32 dissolve_applyer_;
  ::google::protobuf::int32 dissovle_state_;
  ::google::protobuf::int32 is_dissolved_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > repertory_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > weave_huxi_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > show_huxi_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > out_count_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cur_card_huxi_;
  ::google::protobuf::RepeatedField< bool > user_responses_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > user_actions_;
  ::google::protobuf::int32 banker_card_;
  bool is_tianhu_show_;
  bool already_resp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > user_prerform_;
  ::std::string* innings_;
  ::google::protobuf::int32 current_num_;
  ::google::protobuf::int32 first_banker_user_;
  ::std::string* video_str_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagGain > gains_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_weaves_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(55 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckTableInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckGameStart : public ::google::protobuf::Message {
 public:
  AckGameStart();
  virtual ~AckGameStart();

  AckGameStart(const AckGameStart& from);

  inline AckGameStart& operator=(const AckGameStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameStart& default_instance();

  void Swap(AckGameStart* other);

  // implements Message ----------------------------------------------

  AckGameStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameStart& from);
  void MergeFrom(const AckGameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 banker = 1;
  inline bool has_banker() const;
  inline void clear_banker();
  static const int kBankerFieldNumber = 1;
  inline ::google::protobuf::int32 banker() const;
  inline void set_banker(::google::protobuf::int32 value);

  // optional int32 banker_card = 2;
  inline bool has_banker_card() const;
  inline void clear_banker_card();
  static const int kBankerCardFieldNumber = 2;
  inline ::google::protobuf::int32 banker_card() const;
  inline void set_banker_card(::google::protobuf::int32 value);

  // optional int32 left_card_count = 3;
  inline bool has_left_card_count() const;
  inline void clear_left_card_count();
  static const int kLeftCardCountFieldNumber = 3;
  inline ::google::protobuf::int32 left_card_count() const;
  inline void set_left_card_count(::google::protobuf::int32 value);

  // repeated .proto.game.tagHandCards hand_cards = 4;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 4;
  inline const ::proto::game::tagHandCards& hand_cards(int index) const;
  inline ::proto::game::tagHandCards* mutable_hand_cards(int index);
  inline ::proto::game::tagHandCards* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_hand_cards();

  // repeated .proto.game.tagPlayers players = 5;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 5;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // optional int32 total_huxi = 6;
  inline bool has_total_huxi() const;
  inline void clear_total_huxi();
  static const int kTotalHuxiFieldNumber = 6;
  inline ::google::protobuf::int32 total_huxi() const;
  inline void set_total_huxi(::google::protobuf::int32 value);

  // repeated int32 listen_cards = 7;
  inline int listen_cards_size() const;
  inline void clear_listen_cards();
  static const int kListenCardsFieldNumber = 7;
  inline ::google::protobuf::int32 listen_cards(int index) const;
  inline void set_listen_cards(int index, ::google::protobuf::int32 value);
  inline void add_listen_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      listen_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_listen_cards();

  // optional int32 current_num = 8;
  inline bool has_current_num() const;
  inline void clear_current_num();
  static const int kCurrentNumFieldNumber = 8;
  inline ::google::protobuf::int32 current_num() const;
  inline void set_current_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckGameStart)
 private:
  inline void set_has_banker();
  inline void clear_has_banker();
  inline void set_has_banker_card();
  inline void clear_has_banker_card();
  inline void set_has_left_card_count();
  inline void clear_has_left_card_count();
  inline void set_has_total_huxi();
  inline void clear_has_total_huxi();
  inline void set_has_current_num();
  inline void clear_has_current_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 banker_;
  ::google::protobuf::int32 banker_card_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > hand_cards_;
  ::google::protobuf::int32 left_card_count_;
  ::google::protobuf::int32 total_huxi_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > listen_cards_;
  ::google::protobuf::int32 current_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameStart* default_instance_;
};
// -------------------------------------------------------------------

class AckOperateNotify : public ::google::protobuf::Message {
 public:
  AckOperateNotify();
  virtual ~AckOperateNotify();

  AckOperateNotify(const AckOperateNotify& from);

  inline AckOperateNotify& operator=(const AckOperateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckOperateNotify& default_instance();

  void Swap(AckOperateNotify* other);

  // implements Message ----------------------------------------------

  AckOperateNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckOperateNotify& from);
  void MergeFrom(const AckOperateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 operate_type = 1;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // optional int32 operate_card = 2;
  inline bool has_operate_card() const;
  inline void clear_operate_card();
  static const int kOperateCardFieldNumber = 2;
  inline ::google::protobuf::int32 operate_card() const;
  inline void set_operate_card(::google::protobuf::int32 value);

  // repeated int32 win_weaves = 3;
  inline int win_weaves_size() const;
  inline void clear_win_weaves();
  static const int kWinWeavesFieldNumber = 3;
  inline ::google::protobuf::int32 win_weaves(int index) const;
  inline void set_win_weaves(int index, ::google::protobuf::int32 value);
  inline void add_win_weaves(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_weaves() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_weaves();

  // optional int32 off_count = 4;
  inline bool has_off_count() const;
  inline void clear_off_count();
  static const int kOffCountFieldNumber = 4;
  inline ::google::protobuf::int32 off_count() const;
  inline void set_off_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckOperateNotify)
 private:
  inline void set_has_operate_type();
  inline void clear_has_operate_type();
  inline void set_has_operate_card();
  inline void clear_has_operate_card();
  inline void set_has_off_count();
  inline void clear_has_off_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 operate_type_;
  ::google::protobuf::int32 operate_card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_weaves_;
  ::google::protobuf::int32 off_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckOperateNotify* default_instance_;
};
// -------------------------------------------------------------------

class ReqOperateCard : public ::google::protobuf::Message {
 public:
  ReqOperateCard();
  virtual ~ReqOperateCard();

  ReqOperateCard(const ReqOperateCard& from);

  inline ReqOperateCard& operator=(const ReqOperateCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOperateCard& default_instance();

  void Swap(ReqOperateCard* other);

  // implements Message ----------------------------------------------

  ReqOperateCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOperateCard& from);
  void MergeFrom(const ReqOperateCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 operate_type = 1;
  inline bool has_operate_type() const;
  inline void clear_operate_type();
  static const int kOperateTypeFieldNumber = 1;
  inline ::google::protobuf::int32 operate_type() const;
  inline void set_operate_type(::google::protobuf::int32 value);

  // repeated int32 win_weaves = 2;
  inline int win_weaves_size() const;
  inline void clear_win_weaves();
  static const int kWinWeavesFieldNumber = 2;
  inline ::google::protobuf::int32 win_weaves(int index) const;
  inline void set_win_weaves(int index, ::google::protobuf::int32 value);
  inline void add_win_weaves(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_weaves() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_weaves();

  // @@protoc_insertion_point(class_scope:proto.game.ReqOperateCard)
 private:
  inline void set_has_operate_type();
  inline void clear_has_operate_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_weaves_;
  ::google::protobuf::int32 operate_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqOperateCard* default_instance_;
};
// -------------------------------------------------------------------

class AckOutNotify : public ::google::protobuf::Message {
 public:
  AckOutNotify();
  virtual ~AckOutNotify();

  AckOutNotify(const AckOutNotify& from);

  inline AckOutNotify& operator=(const AckOutNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckOutNotify& default_instance();

  void Swap(AckOutNotify* other);

  // implements Message ----------------------------------------------

  AckOutNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckOutNotify& from);
  void MergeFrom(const AckOutNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // repeated int32 win_weaves = 3;
  inline int win_weaves_size() const;
  inline void clear_win_weaves();
  static const int kWinWeavesFieldNumber = 3;
  inline ::google::protobuf::int32 win_weaves(int index) const;
  inline void set_win_weaves(int index, ::google::protobuf::int32 value);
  inline void add_win_weaves(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      win_weaves() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_win_weaves();

  // optional bool is_out_card = 4;
  inline bool has_is_out_card() const;
  inline void clear_is_out_card();
  static const int kIsOutCardFieldNumber = 4;
  inline bool is_out_card() const;
  inline void set_is_out_card(bool value);

  // optional int32 off_count = 5;
  inline bool has_off_count() const;
  inline void clear_off_count();
  static const int kOffCountFieldNumber = 5;
  inline ::google::protobuf::int32 off_count() const;
  inline void set_off_count(::google::protobuf::int32 value);

  // optional bool can_out_card = 6;
  inline bool has_can_out_card() const;
  inline void clear_can_out_card();
  static const int kCanOutCardFieldNumber = 6;
  inline bool can_out_card() const;
  inline void set_can_out_card(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.AckOutNotify)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_is_out_card();
  inline void clear_has_is_out_card();
  inline void set_has_off_count();
  inline void clear_has_off_count();
  inline void set_has_can_out_card();
  inline void clear_has_can_out_card();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > win_weaves_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 off_count_;
  bool is_out_card_;
  bool can_out_card_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckOutNotify* default_instance_;
};
// -------------------------------------------------------------------

class AckCircleEnd : public ::google::protobuf::Message {
 public:
  AckCircleEnd();
  virtual ~AckCircleEnd();

  AckCircleEnd(const AckCircleEnd& from);

  inline AckCircleEnd& operator=(const AckCircleEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckCircleEnd& default_instance();

  void Swap(AckCircleEnd* other);

  // implements Message ----------------------------------------------

  AckCircleEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckCircleEnd& from);
  void MergeFrom(const AckCircleEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional bool is_circle_end = 2;
  inline bool has_is_circle_end() const;
  inline void clear_is_circle_end();
  static const int kIsCircleEndFieldNumber = 2;
  inline bool is_circle_end() const;
  inline void set_is_circle_end(bool value);

  // repeated .proto.game.tagWeaveCards user_win_weaves = 3;
  inline int user_win_weaves_size() const;
  inline void clear_user_win_weaves();
  static const int kUserWinWeavesFieldNumber = 3;
  inline const ::proto::game::tagWeaveCards& user_win_weaves(int index) const;
  inline ::proto::game::tagWeaveCards* mutable_user_win_weaves(int index);
  inline ::proto::game::tagWeaveCards* add_user_win_weaves();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
      user_win_weaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
      mutable_user_win_weaves();

  // @@protoc_insertion_point(class_scope:proto.game.AckCircleEnd)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_is_circle_end();
  inline void clear_has_is_circle_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seatid_;
  bool is_circle_end_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards > user_win_weaves_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckCircleEnd* default_instance_;
};
// -------------------------------------------------------------------

class ReqOutCard : public ::google::protobuf::Message {
 public:
  ReqOutCard();
  virtual ~ReqOutCard();

  ReqOutCard(const ReqOutCard& from);

  inline ReqOutCard& operator=(const ReqOutCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOutCard& default_instance();

  void Swap(ReqOutCard* other);

  // implements Message ----------------------------------------------

  ReqOutCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOutCard& from);
  void MergeFrom(const ReqOutCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 out_card = 1;
  inline int out_card_size() const;
  inline void clear_out_card();
  static const int kOutCardFieldNumber = 1;
  inline ::google::protobuf::int32 out_card(int index) const;
  inline void set_out_card(int index, ::google::protobuf::int32 value);
  inline void add_out_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      out_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_out_card();

  // repeated int32 row = 2;
  inline int row_size() const;
  inline void clear_row();
  static const int kRowFieldNumber = 2;
  inline ::google::protobuf::int32 row(int index) const;
  inline void set_row(int index, ::google::protobuf::int32 value);
  inline void add_row(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      row() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_row();

  // repeated int32 col = 3;
  inline int col_size() const;
  inline void clear_col();
  static const int kColFieldNumber = 3;
  inline ::google::protobuf::int32 col(int index) const;
  inline void set_col(int index, ::google::protobuf::int32 value);
  inline void add_col(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      col() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_col();

  // @@protoc_insertion_point(class_scope:proto.game.ReqOutCard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > out_card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > row_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > col_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqOutCard* default_instance_;
};
// -------------------------------------------------------------------

class AckOutCard : public ::google::protobuf::Message {
 public:
  AckOutCard();
  virtual ~AckOutCard();

  AckOutCard(const AckOutCard& from);

  inline AckOutCard& operator=(const AckOutCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckOutCard& default_instance();

  void Swap(AckOutCard* other);

  // implements Message ----------------------------------------------

  AckOutCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckOutCard& from);
  void MergeFrom(const AckOutCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 out_card = 1;
  inline int out_card_size() const;
  inline void clear_out_card();
  static const int kOutCardFieldNumber = 1;
  inline ::google::protobuf::int32 out_card(int index) const;
  inline void set_out_card(int index, ::google::protobuf::int32 value);
  inline void add_out_card(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      out_card() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_out_card();

  // required int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // repeated .proto.game.tagHandCards hand_cards = 4;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 4;
  inline const ::proto::game::tagHandCards& hand_cards(int index) const;
  inline ::proto::game::tagHandCards* mutable_hand_cards(int index);
  inline ::proto::game::tagHandCards* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_hand_cards();

  // optional int32 off_count = 6;
  inline bool has_off_count() const;
  inline void clear_off_count();
  static const int kOffCountFieldNumber = 6;
  inline ::google::protobuf::int32 off_count() const;
  inline void set_off_count(::google::protobuf::int32 value);

  // optional int32 out_limit = 7;
  inline bool has_out_limit() const;
  inline void clear_out_limit();
  static const int kOutLimitFieldNumber = 7;
  inline ::google::protobuf::int32 out_limit() const;
  inline void set_out_limit(::google::protobuf::int32 value);

  // repeated .proto.game.tagWeaveCards user_win_weaves = 8;
  inline int user_win_weaves_size() const;
  inline void clear_user_win_weaves();
  static const int kUserWinWeavesFieldNumber = 8;
  inline const ::proto::game::tagWeaveCards& user_win_weaves(int index) const;
  inline ::proto::game::tagWeaveCards* mutable_user_win_weaves(int index);
  inline ::proto::game::tagWeaveCards* add_user_win_weaves();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
      user_win_weaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
      mutable_user_win_weaves();

  // optional bool is_valid = 9;
  inline bool has_is_valid() const;
  inline void clear_is_valid();
  static const int kIsValidFieldNumber = 9;
  inline bool is_valid() const;
  inline void set_is_valid(bool value);

  // @@protoc_insertion_point(class_scope:proto.game.AckOutCard)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_off_count();
  inline void clear_has_off_count();
  inline void set_has_out_limit();
  inline void clear_has_out_limit();
  inline void set_has_is_valid();
  inline void clear_has_is_valid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > out_card_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > hand_cards_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 off_count_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards > user_win_weaves_;
  ::google::protobuf::int32 out_limit_;
  bool is_valid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckOutCard* default_instance_;
};
// -------------------------------------------------------------------

class ReqChangeCard : public ::google::protobuf::Message {
 public:
  ReqChangeCard();
  virtual ~ReqChangeCard();

  ReqChangeCard(const ReqChangeCard& from);

  inline ReqChangeCard& operator=(const ReqChangeCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqChangeCard& default_instance();

  void Swap(ReqChangeCard* other);

  // implements Message ----------------------------------------------

  ReqChangeCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqChangeCard& from);
  void MergeFrom(const ReqChangeCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagHandCards hand_cards = 1;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 1;
  inline const ::proto::game::tagHandCards& hand_cards(int index) const;
  inline ::proto::game::tagHandCards* mutable_hand_cards(int index);
  inline ::proto::game::tagHandCards* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_hand_cards();

  // @@protoc_insertion_point(class_scope:proto.game.ReqChangeCard)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > hand_cards_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqChangeCard* default_instance_;
};
// -------------------------------------------------------------------

class AckChangeCard : public ::google::protobuf::Message {
 public:
  AckChangeCard();
  virtual ~AckChangeCard();

  AckChangeCard(const AckChangeCard& from);

  inline AckChangeCard& operator=(const AckChangeCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckChangeCard& default_instance();

  void Swap(AckChangeCard* other);

  // implements Message ----------------------------------------------

  AckChangeCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckChangeCard& from);
  void MergeFrom(const AckChangeCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagHandCards hand_cards = 1;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 1;
  inline const ::proto::game::tagHandCards& hand_cards(int index) const;
  inline ::proto::game::tagHandCards* mutable_hand_cards(int index);
  inline ::proto::game::tagHandCards* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_hand_cards();

  // optional int32 total_huxi = 2;
  inline bool has_total_huxi() const;
  inline void clear_total_huxi();
  static const int kTotalHuxiFieldNumber = 2;
  inline ::google::protobuf::int32 total_huxi() const;
  inline void set_total_huxi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckChangeCard)
 private:
  inline void set_has_total_huxi();
  inline void clear_has_total_huxi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > hand_cards_;
  ::google::protobuf::int32 total_huxi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckChangeCard* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdateCard : public ::google::protobuf::Message {
 public:
  AckUpdateCard();
  virtual ~AckUpdateCard();

  AckUpdateCard(const AckUpdateCard& from);

  inline AckUpdateCard& operator=(const AckUpdateCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdateCard& default_instance();

  void Swap(AckUpdateCard* other);

  // implements Message ----------------------------------------------

  AckUpdateCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdateCard& from);
  void MergeFrom(const AckUpdateCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagHandCards hand_cards = 1;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 1;
  inline const ::proto::game::tagHandCards& hand_cards(int index) const;
  inline ::proto::game::tagHandCards* mutable_hand_cards(int index);
  inline ::proto::game::tagHandCards* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_hand_cards();

  // optional int32 total_huxi = 2;
  inline bool has_total_huxi() const;
  inline void clear_total_huxi();
  static const int kTotalHuxiFieldNumber = 2;
  inline ::google::protobuf::int32 total_huxi() const;
  inline void set_total_huxi(::google::protobuf::int32 value);

  // repeated int32 listen_cards = 3;
  inline int listen_cards_size() const;
  inline void clear_listen_cards();
  static const int kListenCardsFieldNumber = 3;
  inline ::google::protobuf::int32 listen_cards(int index) const;
  inline void set_listen_cards(int index, ::google::protobuf::int32 value);
  inline void add_listen_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      listen_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_listen_cards();

  // @@protoc_insertion_point(class_scope:proto.game.AckUpdateCard)
 private:
  inline void set_has_total_huxi();
  inline void clear_has_total_huxi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > hand_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > listen_cards_;
  ::google::protobuf::int32 total_huxi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUpdateCard* default_instance_;
};
// -------------------------------------------------------------------

class AckUpdateAbandon : public ::google::protobuf::Message {
 public:
  AckUpdateAbandon();
  virtual ~AckUpdateAbandon();

  AckUpdateAbandon(const AckUpdateAbandon& from);

  inline AckUpdateAbandon& operator=(const AckUpdateAbandon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUpdateAbandon& default_instance();

  void Swap(AckUpdateAbandon* other);

  // implements Message ----------------------------------------------

  AckUpdateAbandon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUpdateAbandon& from);
  void MergeFrom(const AckUpdateAbandon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 card = 2;
  inline bool has_card() const;
  inline void clear_card();
  static const int kCardFieldNumber = 2;
  inline ::google::protobuf::int32 card() const;
  inline void set_card(::google::protobuf::int32 value);

  // repeated int32 abandon_cards = 3;
  inline int abandon_cards_size() const;
  inline void clear_abandon_cards();
  static const int kAbandonCardsFieldNumber = 3;
  inline ::google::protobuf::int32 abandon_cards(int index) const;
  inline void set_abandon_cards(int index, ::google::protobuf::int32 value);
  inline void add_abandon_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      abandon_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_abandon_cards();

  // optional int32 off_count = 4;
  inline bool has_off_count() const;
  inline void clear_off_count();
  static const int kOffCountFieldNumber = 4;
  inline ::google::protobuf::int32 off_count() const;
  inline void set_off_count(::google::protobuf::int32 value);

  // repeated int32 abandon_type = 5;
  inline int abandon_type_size() const;
  inline void clear_abandon_type();
  static const int kAbandonTypeFieldNumber = 5;
  inline ::google::protobuf::int32 abandon_type(int index) const;
  inline void set_abandon_type(int index, ::google::protobuf::int32 value);
  inline void add_abandon_type(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      abandon_type() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_abandon_type();

  // @@protoc_insertion_point(class_scope:proto.game.AckUpdateAbandon)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_card();
  inline void clear_has_card();
  inline void set_has_off_count();
  inline void clear_has_off_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 card_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > abandon_cards_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > abandon_type_;
  ::google::protobuf::int32 off_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUpdateAbandon* default_instance_;
};
// -------------------------------------------------------------------

class tagFanInfo : public ::google::protobuf::Message {
 public:
  tagFanInfo();
  virtual ~tagFanInfo();

  tagFanInfo(const tagFanInfo& from);

  inline tagFanInfo& operator=(const tagFanInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagFanInfo& default_instance();

  void Swap(tagFanInfo* other);

  // implements Message ----------------------------------------------

  tagFanInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tagFanInfo& from);
  void MergeFrom(const tagFanInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fan_type = 1;
  inline bool has_fan_type() const;
  inline void clear_fan_type();
  static const int kFanTypeFieldNumber = 1;
  inline ::google::protobuf::int32 fan_type() const;
  inline void set_fan_type(::google::protobuf::int32 value);

  // optional int32 fan_num = 2;
  inline bool has_fan_num() const;
  inline void clear_fan_num();
  static const int kFanNumFieldNumber = 2;
  inline ::google::protobuf::int32 fan_num() const;
  inline void set_fan_num(::google::protobuf::int32 value);

  // optional int32 fan_xi = 3;
  inline bool has_fan_xi() const;
  inline void clear_fan_xi();
  static const int kFanXiFieldNumber = 3;
  inline ::google::protobuf::int32 fan_xi() const;
  inline void set_fan_xi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.tagFanInfo)
 private:
  inline void set_has_fan_type();
  inline void clear_has_fan_type();
  inline void set_has_fan_num();
  inline void clear_has_fan_num();
  inline void set_has_fan_xi();
  inline void clear_has_fan_xi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fan_type_;
  ::google::protobuf::int32 fan_num_;
  ::google::protobuf::int32 fan_xi_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static tagFanInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckGameEnd : public ::google::protobuf::Message {
 public:
  AckGameEnd();
  virtual ~AckGameEnd();

  AckGameEnd(const AckGameEnd& from);

  inline AckGameEnd& operator=(const AckGameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameEnd& default_instance();

  void Swap(AckGameEnd* other);

  // implements Message ----------------------------------------------

  AckGameEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameEnd& from);
  void MergeFrom(const AckGameEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 end_type = 1;
  inline bool has_end_type() const;
  inline void clear_end_type();
  static const int kEndTypeFieldNumber = 1;
  inline ::google::protobuf::int32 end_type() const;
  inline void set_end_type(::google::protobuf::int32 value);

  // optional int32 win_seatid = 2;
  inline bool has_win_seatid() const;
  inline void clear_win_seatid();
  static const int kWinSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 win_seatid() const;
  inline void set_win_seatid(::google::protobuf::int32 value);

  // optional int32 hu_card = 3;
  inline bool has_hu_card() const;
  inline void clear_hu_card();
  static const int kHuCardFieldNumber = 3;
  inline ::google::protobuf::int32 hu_card() const;
  inline void set_hu_card(::google::protobuf::int32 value);

  // repeated int32 left_cards = 4;
  inline int left_cards_size() const;
  inline void clear_left_cards();
  static const int kLeftCardsFieldNumber = 4;
  inline ::google::protobuf::int32 left_cards(int index) const;
  inline void set_left_cards(int index, ::google::protobuf::int32 value);
  inline void add_left_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      left_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_left_cards();

  // optional int32 total_huxi = 5;
  inline bool has_total_huxi() const;
  inline void clear_total_huxi();
  static const int kTotalHuxiFieldNumber = 5;
  inline ::google::protobuf::int32 total_huxi() const;
  inline void set_total_huxi(::google::protobuf::int32 value);

  // optional int32 hu_xis = 6;
  inline bool has_hu_xis() const;
  inline void clear_hu_xis();
  static const int kHuXisFieldNumber = 6;
  inline ::google::protobuf::int32 hu_xis() const;
  inline void set_hu_xis(::google::protobuf::int32 value);

  // optional int32 tuns = 7;
  inline bool has_tuns() const;
  inline void clear_tuns();
  static const int kTunsFieldNumber = 7;
  inline ::google::protobuf::int32 tuns() const;
  inline void set_tuns(::google::protobuf::int32 value);

  // optional int32 fans = 8;
  inline bool has_fans() const;
  inline void clear_fans();
  static const int kFansFieldNumber = 8;
  inline ::google::protobuf::int32 fans() const;
  inline void set_fans(::google::protobuf::int32 value);

  // repeated .proto.game.tagFanInfo fan_info = 9;
  inline int fan_info_size() const;
  inline void clear_fan_info();
  static const int kFanInfoFieldNumber = 9;
  inline const ::proto::game::tagFanInfo& fan_info(int index) const;
  inline ::proto::game::tagFanInfo* mutable_fan_info(int index);
  inline ::proto::game::tagFanInfo* add_fan_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagFanInfo >&
      fan_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagFanInfo >*
      mutable_fan_info();

  // repeated .proto.game.tagWeaveCards weaves = 10;
  inline int weaves_size() const;
  inline void clear_weaves();
  static const int kWeavesFieldNumber = 10;
  inline const ::proto::game::tagWeaveCards& weaves(int index) const;
  inline ::proto::game::tagWeaveCards* mutable_weaves(int index);
  inline ::proto::game::tagWeaveCards* add_weaves();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
      weaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
      mutable_weaves();

  // repeated .proto.game.tagPlayers players = 11;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 11;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // optional int32 off_count = 12;
  inline bool has_off_count() const;
  inline void clear_off_count();
  static const int kOffCountFieldNumber = 12;
  inline ::google::protobuf::int32 off_count() const;
  inline void set_off_count(::google::protobuf::int32 value);

  // optional bool dian_pao = 13;
  inline bool has_dian_pao() const;
  inline void clear_dian_pao();
  static const int kDianPaoFieldNumber = 13;
  inline bool dian_pao() const;
  inline void set_dian_pao(bool value);

  // optional int32 dian_pao_user = 14;
  inline bool has_dian_pao_user() const;
  inline void clear_dian_pao_user();
  static const int kDianPaoUserFieldNumber = 14;
  inline ::google::protobuf::int32 dian_pao_user() const;
  inline void set_dian_pao_user(::google::protobuf::int32 value);

  // optional int32 current_cycle = 17;
  inline bool has_current_cycle() const;
  inline void clear_current_cycle();
  static const int kCurrentCycleFieldNumber = 17;
  inline ::google::protobuf::int32 current_cycle() const;
  inline void set_current_cycle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckGameEnd)
 private:
  inline void set_has_end_type();
  inline void clear_has_end_type();
  inline void set_has_win_seatid();
  inline void clear_has_win_seatid();
  inline void set_has_hu_card();
  inline void clear_has_hu_card();
  inline void set_has_total_huxi();
  inline void clear_has_total_huxi();
  inline void set_has_hu_xis();
  inline void clear_has_hu_xis();
  inline void set_has_tuns();
  inline void clear_has_tuns();
  inline void set_has_fans();
  inline void clear_has_fans();
  inline void set_has_off_count();
  inline void clear_has_off_count();
  inline void set_has_dian_pao();
  inline void clear_has_dian_pao();
  inline void set_has_dian_pao_user();
  inline void clear_has_dian_pao_user();
  inline void set_has_current_cycle();
  inline void clear_has_current_cycle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 end_type_;
  ::google::protobuf::int32 win_seatid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > left_cards_;
  ::google::protobuf::int32 hu_card_;
  ::google::protobuf::int32 total_huxi_;
  ::google::protobuf::int32 hu_xis_;
  ::google::protobuf::int32 tuns_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagFanInfo > fan_info_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards > weaves_;
  ::google::protobuf::int32 fans_;
  ::google::protobuf::int32 off_count_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;
  bool dian_pao_;
  ::google::protobuf::int32 dian_pao_user_;
  ::google::protobuf::int32 current_cycle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameEnd* default_instance_;
};
// -------------------------------------------------------------------

class AckGameStartFail : public ::google::protobuf::Message {
 public:
  AckGameStartFail();
  virtual ~AckGameStartFail();

  AckGameStartFail(const AckGameStartFail& from);

  inline AckGameStartFail& operator=(const AckGameStartFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGameStartFail& default_instance();

  void Swap(AckGameStartFail* other);

  // implements Message ----------------------------------------------

  AckGameStartFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGameStartFail& from);
  void MergeFrom(const AckGameStartFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 vid = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 1;
  inline ::google::protobuf::int32 vid() const;
  inline void set_vid(::google::protobuf::int32 value);

  // optional bytes roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional int32 can_start = 3;
  inline bool has_can_start() const;
  inline void clear_can_start();
  static const int kCanStartFieldNumber = 3;
  inline ::google::protobuf::int32 can_start() const;
  inline void set_can_start(::google::protobuf::int32 value);

  // optional int32 code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int32 ts = 5;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 5;
  inline ::google::protobuf::int32 ts() const;
  inline void set_ts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckGameStartFail)
 private:
  inline void set_has_vid();
  inline void clear_has_vid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_can_start();
  inline void clear_has_can_start();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* roomid_;
  ::google::protobuf::int32 vid_;
  ::google::protobuf::int32 can_start_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 ts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGameStartFail* default_instance_;
};
// -------------------------------------------------------------------

class AckUserReady : public ::google::protobuf::Message {
 public:
  AckUserReady();
  virtual ~AckUserReady();

  AckUserReady(const AckUserReady& from);

  inline AckUserReady& operator=(const AckUserReady& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUserReady& default_instance();

  void Swap(AckUserReady* other);

  // implements Message ----------------------------------------------

  AckUserReady* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUserReady& from);
  void MergeFrom(const AckUserReady& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckUserReady)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckUserReady* default_instance_;
};
// -------------------------------------------------------------------

class AckDissolveErr : public ::google::protobuf::Message {
 public:
  AckDissolveErr();
  virtual ~AckDissolveErr();

  AckDissolveErr(const AckDissolveErr& from);

  inline AckDissolveErr& operator=(const AckDissolveErr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDissolveErr& default_instance();

  void Swap(AckDissolveErr* other);

  // implements Message ----------------------------------------------

  AckDissolveErr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDissolveErr& from);
  void MergeFrom(const AckDissolveErr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDissolveErr)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDissolveErr* default_instance_;
};
// -------------------------------------------------------------------

class AckDissolveSucc : public ::google::protobuf::Message {
 public:
  AckDissolveSucc();
  virtual ~AckDissolveSucc();

  AckDissolveSucc(const AckDissolveSucc& from);

  inline AckDissolveSucc& operator=(const AckDissolveSucc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDissolveSucc& default_instance();

  void Swap(AckDissolveSucc* other);

  // implements Message ----------------------------------------------

  AckDissolveSucc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDissolveSucc& from);
  void MergeFrom(const AckDissolveSucc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // repeated int32 voters_uid = 2;
  inline int voters_uid_size() const;
  inline void clear_voters_uid();
  static const int kVotersUidFieldNumber = 2;
  inline ::google::protobuf::int32 voters_uid(int index) const;
  inline void set_voters_uid(int index, ::google::protobuf::int32 value);
  inline void add_voters_uid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      voters_uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_voters_uid();

  // optional int32 remain_time = 3;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 3;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDissolveSucc)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > voters_uid_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 remain_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDissolveSucc* default_instance_;
};
// -------------------------------------------------------------------

class ReqDissolveAct : public ::google::protobuf::Message {
 public:
  ReqDissolveAct();
  virtual ~ReqDissolveAct();

  ReqDissolveAct(const ReqDissolveAct& from);

  inline ReqDissolveAct& operator=(const ReqDissolveAct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDissolveAct& default_instance();

  void Swap(ReqDissolveAct* other);

  // implements Message ----------------------------------------------

  ReqDissolveAct* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDissolveAct& from);
  void MergeFrom(const ReqDissolveAct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.ReqDissolveAct)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static ReqDissolveAct* default_instance_;
};
// -------------------------------------------------------------------

class AckDissolveActSucc : public ::google::protobuf::Message {
 public:
  AckDissolveActSucc();
  virtual ~AckDissolveActSucc();

  AckDissolveActSucc(const AckDissolveActSucc& from);

  inline AckDissolveActSucc& operator=(const AckDissolveActSucc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDissolveActSucc& default_instance();

  void Swap(AckDissolveActSucc* other);

  // implements Message ----------------------------------------------

  AckDissolveActSucc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDissolveActSucc& from);
  void MergeFrom(const AckDissolveActSucc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDissolveActSucc)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDissolveActSucc* default_instance_;
};
// -------------------------------------------------------------------

class AckDissolveResult : public ::google::protobuf::Message {
 public:
  AckDissolveResult();
  virtual ~AckDissolveResult();

  AckDissolveResult(const AckDissolveResult& from);

  inline AckDissolveResult& operator=(const AckDissolveResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckDissolveResult& default_instance();

  void Swap(AckDissolveResult* other);

  // implements Message ----------------------------------------------

  AckDissolveResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckDissolveResult& from);
  void MergeFrom(const AckDissolveResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckDissolveResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckDissolveResult* default_instance_;
};
// -------------------------------------------------------------------

class AckOffline : public ::google::protobuf::Message {
 public:
  AckOffline();
  virtual ~AckOffline();

  AckOffline(const AckOffline& from);

  inline AckOffline& operator=(const AckOffline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckOffline& default_instance();

  void Swap(AckOffline* other);

  // implements Message ----------------------------------------------

  AckOffline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckOffline& from);
  void MergeFrom(const AckOffline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckOffline)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckOffline* default_instance_;
};
// -------------------------------------------------------------------

class AckFinalEnd : public ::google::protobuf::Message {
 public:
  AckFinalEnd();
  virtual ~AckFinalEnd();

  AckFinalEnd(const AckFinalEnd& from);

  inline AckFinalEnd& operator=(const AckFinalEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckFinalEnd& default_instance();

  void Swap(AckFinalEnd* other);

  // implements Message ----------------------------------------------

  AckFinalEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckFinalEnd& from);
  void MergeFrom(const AckFinalEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline const ::std::string& roomid() const;
  inline void set_roomid(const ::std::string& value);
  inline void set_roomid(const char* value);
  inline void set_roomid(const void* value, size_t size);
  inline ::std::string* mutable_roomid();
  inline ::std::string* release_roomid();
  inline void set_allocated_roomid(::std::string* roomid);

  // optional int32 room_user_id = 2;
  inline bool has_room_user_id() const;
  inline void clear_room_user_id();
  static const int kRoomUserIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_user_id() const;
  inline void set_room_user_id(::google::protobuf::int32 value);

  // optional int32 ts = 3;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 3;
  inline ::google::protobuf::int32 ts() const;
  inline void set_ts(::google::protobuf::int32 value);

  // repeated .proto.game.tagPlayers players = 4;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 4;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:proto.game.AckFinalEnd)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_room_user_id();
  inline void clear_has_room_user_id();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* roomid_;
  ::google::protobuf::int32 room_user_id_;
  ::google::protobuf::int32 ts_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckFinalEnd* default_instance_;
};
// -------------------------------------------------------------------

class AckHandDetail : public ::google::protobuf::Message {
 public:
  AckHandDetail();
  virtual ~AckHandDetail();

  AckHandDetail(const AckHandDetail& from);

  inline AckHandDetail& operator=(const AckHandDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckHandDetail& default_instance();

  void Swap(AckHandDetail* other);

  // implements Message ----------------------------------------------

  AckHandDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckHandDetail& from);
  void MergeFrom(const AckHandDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagPlayers players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:proto.game.AckHandDetail)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckHandDetail* default_instance_;
};
// -------------------------------------------------------------------

class AckLastEndInfo : public ::google::protobuf::Message {
 public:
  AckLastEndInfo();
  virtual ~AckLastEndInfo();

  AckLastEndInfo(const AckLastEndInfo& from);

  inline AckLastEndInfo& operator=(const AckLastEndInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLastEndInfo& default_instance();

  void Swap(AckLastEndInfo* other);

  // implements Message ----------------------------------------------

  AckLastEndInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckLastEndInfo& from);
  void MergeFrom(const AckLastEndInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const void* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:proto.game.AckLastEndInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckLastEndInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckChouNotity : public ::google::protobuf::Message {
 public:
  AckChouNotity();
  virtual ~AckChouNotity();

  AckChouNotity(const AckChouNotity& from);

  inline AckChouNotity& operator=(const AckChouNotity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckChouNotity& default_instance();

  void Swap(AckChouNotity* other);

  // implements Message ----------------------------------------------

  AckChouNotity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckChouNotity& from);
  void MergeFrom(const AckChouNotity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckChouNotity)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckChouNotity* default_instance_;
};
// -------------------------------------------------------------------

class TableInfoVideo : public ::google::protobuf::Message {
 public:
  TableInfoVideo();
  virtual ~TableInfoVideo();

  TableInfoVideo(const TableInfoVideo& from);

  inline TableInfoVideo& operator=(const TableInfoVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableInfoVideo& default_instance();

  void Swap(TableInfoVideo* other);

  // implements Message ----------------------------------------------

  TableInfoVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TableInfoVideo& from);
  void MergeFrom(const TableInfoVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 banker = 1;
  inline bool has_banker() const;
  inline void clear_banker();
  static const int kBankerFieldNumber = 1;
  inline ::google::protobuf::int32 banker() const;
  inline void set_banker(::google::protobuf::int32 value);

  // optional int32 take_in = 2;
  inline bool has_take_in() const;
  inline void clear_take_in();
  static const int kTakeInFieldNumber = 2;
  inline ::google::protobuf::int32 take_in() const;
  inline void set_take_in(::google::protobuf::int32 value);

  // optional int32 play_id = 3;
  inline bool has_play_id() const;
  inline void clear_play_id();
  static const int kPlayIdFieldNumber = 3;
  inline ::google::protobuf::int32 play_id() const;
  inline void set_play_id(::google::protobuf::int32 value);

  // optional int32 base_huxi = 4;
  inline bool has_base_huxi() const;
  inline void clear_base_huxi();
  static const int kBaseHuxiFieldNumber = 4;
  inline ::google::protobuf::int32 base_huxi() const;
  inline void set_base_huxi(::google::protobuf::int32 value);

  // optional int32 room_user_id = 5;
  inline bool has_room_user_id() const;
  inline void clear_room_user_id();
  static const int kRoomUserIdFieldNumber = 5;
  inline ::google::protobuf::int32 room_user_id() const;
  inline void set_room_user_id(::google::protobuf::int32 value);

  // repeated .proto.game.tagPlayers players = 6;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 6;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // optional int32 game_player = 7;
  inline bool has_game_player() const;
  inline void clear_game_player();
  static const int kGamePlayerFieldNumber = 7;
  inline ::google::protobuf::int32 game_player() const;
  inline void set_game_player(::google::protobuf::int32 value);

  // optional bytes game_name = 8;
  inline bool has_game_name() const;
  inline void clear_game_name();
  static const int kGameNameFieldNumber = 8;
  inline const ::std::string& game_name() const;
  inline void set_game_name(const ::std::string& value);
  inline void set_game_name(const char* value);
  inline void set_game_name(const void* value, size_t size);
  inline ::std::string* mutable_game_name();
  inline ::std::string* release_game_name();
  inline void set_allocated_game_name(::std::string* game_name);

  // @@protoc_insertion_point(class_scope:proto.game.TableInfoVideo)
 private:
  inline void set_has_banker();
  inline void clear_has_banker();
  inline void set_has_take_in();
  inline void clear_has_take_in();
  inline void set_has_play_id();
  inline void clear_has_play_id();
  inline void set_has_base_huxi();
  inline void clear_has_base_huxi();
  inline void set_has_room_user_id();
  inline void clear_has_room_user_id();
  inline void set_has_game_player();
  inline void clear_has_game_player();
  inline void set_has_game_name();
  inline void clear_has_game_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 banker_;
  ::google::protobuf::int32 take_in_;
  ::google::protobuf::int32 play_id_;
  ::google::protobuf::int32 base_huxi_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;
  ::google::protobuf::int32 room_user_id_;
  ::google::protobuf::int32 game_player_;
  ::std::string* game_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static TableInfoVideo* default_instance_;
};
// -------------------------------------------------------------------

class GameStartVideo : public ::google::protobuf::Message {
 public:
  GameStartVideo();
  virtual ~GameStartVideo();

  GameStartVideo(const GameStartVideo& from);

  inline GameStartVideo& operator=(const GameStartVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStartVideo& default_instance();

  void Swap(GameStartVideo* other);

  // implements Message ----------------------------------------------

  GameStartVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameStartVideo& from);
  void MergeFrom(const GameStartVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 banker = 1;
  inline bool has_banker() const;
  inline void clear_banker();
  static const int kBankerFieldNumber = 1;
  inline ::google::protobuf::int32 banker() const;
  inline void set_banker(::google::protobuf::int32 value);

  // optional int32 banker_card = 2;
  inline bool has_banker_card() const;
  inline void clear_banker_card();
  static const int kBankerCardFieldNumber = 2;
  inline ::google::protobuf::int32 banker_card() const;
  inline void set_banker_card(::google::protobuf::int32 value);

  // optional int32 left_card_count = 3;
  inline bool has_left_card_count() const;
  inline void clear_left_card_count();
  static const int kLeftCardCountFieldNumber = 3;
  inline ::google::protobuf::int32 left_card_count() const;
  inline void set_left_card_count(::google::protobuf::int32 value);

  // repeated .proto.game.tagPlayers players = 4;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 4;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:proto.game.GameStartVideo)
 private:
  inline void set_has_banker();
  inline void clear_has_banker();
  inline void set_has_banker_card();
  inline void clear_has_banker_card();
  inline void set_has_left_card_count();
  inline void clear_has_left_card_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 banker_;
  ::google::protobuf::int32 banker_card_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;
  ::google::protobuf::int32 left_card_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static GameStartVideo* default_instance_;
};
// -------------------------------------------------------------------

class OperateVideo : public ::google::protobuf::Message {
 public:
  OperateVideo();
  virtual ~OperateVideo();

  OperateVideo(const OperateVideo& from);

  inline OperateVideo& operator=(const OperateVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperateVideo& default_instance();

  void Swap(OperateVideo* other);

  // implements Message ----------------------------------------------

  OperateVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperateVideo& from);
  void MergeFrom(const OperateVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ack_code = 1;
  inline bool has_ack_code() const;
  inline void clear_ack_code();
  static const int kAckCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ack_code() const;
  inline void set_ack_code(::google::protobuf::int32 value);

  // optional int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 action_card = 3;
  inline bool has_action_card() const;
  inline void clear_action_card();
  static const int kActionCardFieldNumber = 3;
  inline ::google::protobuf::int32 action_card() const;
  inline void set_action_card(::google::protobuf::int32 value);

  // repeated .proto.game.tagHandCards hand_cards = 4;
  inline int hand_cards_size() const;
  inline void clear_hand_cards();
  static const int kHandCardsFieldNumber = 4;
  inline const ::proto::game::tagHandCards& hand_cards(int index) const;
  inline ::proto::game::tagHandCards* mutable_hand_cards(int index);
  inline ::proto::game::tagHandCards* add_hand_cards();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
      hand_cards() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
      mutable_hand_cards();

  // optional int32 total_huxi = 5;
  inline bool has_total_huxi() const;
  inline void clear_total_huxi();
  static const int kTotalHuxiFieldNumber = 5;
  inline ::google::protobuf::int32 total_huxi() const;
  inline void set_total_huxi(::google::protobuf::int32 value);

  // repeated int32 listen_cards = 6;
  inline int listen_cards_size() const;
  inline void clear_listen_cards();
  static const int kListenCardsFieldNumber = 6;
  inline ::google::protobuf::int32 listen_cards(int index) const;
  inline void set_listen_cards(int index, ::google::protobuf::int32 value);
  inline void add_listen_cards(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      listen_cards() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_listen_cards();

  // repeated .proto.game.tagWeaveCards weaves = 7;
  inline int weaves_size() const;
  inline void clear_weaves();
  static const int kWeavesFieldNumber = 7;
  inline const ::proto::game::tagWeaveCards& weaves(int index) const;
  inline ::proto::game::tagWeaveCards* mutable_weaves(int index);
  inline ::proto::game::tagWeaveCards* add_weaves();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
      weaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
      mutable_weaves();

  // repeated .proto.game.tagPlayers players = 8;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 8;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:proto.game.OperateVideo)
 private:
  inline void set_has_ack_code();
  inline void clear_has_ack_code();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_action_card();
  inline void clear_has_action_card();
  inline void set_has_total_huxi();
  inline void clear_has_total_huxi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ack_code_;
  ::google::protobuf::int32 seatid_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards > hand_cards_;
  ::google::protobuf::int32 action_card_;
  ::google::protobuf::int32 total_huxi_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > listen_cards_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards > weaves_;
  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static OperateVideo* default_instance_;
};
// -------------------------------------------------------------------

class OperateNotify : public ::google::protobuf::Message {
 public:
  OperateNotify();
  virtual ~OperateNotify();

  OperateNotify(const OperateNotify& from);

  inline OperateNotify& operator=(const OperateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OperateNotify& default_instance();

  void Swap(OperateNotify* other);

  // implements Message ----------------------------------------------

  OperateNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OperateNotify& from);
  void MergeFrom(const OperateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagPlayers players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:proto.game.OperateNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static OperateNotify* default_instance_;
};
// -------------------------------------------------------------------

class AckChat : public ::google::protobuf::Message {
 public:
  AckChat();
  virtual ~AckChat();

  AckChat(const AckChat& from);

  inline AckChat& operator=(const AckChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckChat& default_instance();

  void Swap(AckChat* other);

  // implements Message ----------------------------------------------

  AckChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckChat& from);
  void MergeFrom(const AckChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional bytes text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:proto.game.AckChat)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::google::protobuf::int32 seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckChat* default_instance_;
};
// -------------------------------------------------------------------

class AckFace : public ::google::protobuf::Message {
 public:
  AckFace();
  virtual ~AckFace();

  AckFace(const AckFace& from);

  inline AckFace& operator=(const AckFace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckFace& default_instance();

  void Swap(AckFace* other);

  // implements Message ----------------------------------------------

  AckFace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckFace& from);
  void MergeFrom(const AckFace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seatid = 1;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // optional int32 faceid = 2;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceidFieldNumber = 2;
  inline ::google::protobuf::int32 faceid() const;
  inline void set_faceid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.game.AckFace)
 private:
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_faceid();
  inline void clear_has_faceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seatid_;
  ::google::protobuf::int32 faceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckFace* default_instance_;
};
// -------------------------------------------------------------------

class AckGains : public ::google::protobuf::Message {
 public:
  AckGains();
  virtual ~AckGains();

  AckGains(const AckGains& from);

  inline AckGains& operator=(const AckGains& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGains& default_instance();

  void Swap(AckGains* other);

  // implements Message ----------------------------------------------

  AckGains* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGains& from);
  void MergeFrom(const AckGains& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.game.tagPlayers players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::proto::game::tagPlayers& players(int index) const;
  inline ::proto::game::tagPlayers* mutable_players(int index);
  inline ::proto::game::tagPlayers* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
      mutable_players();

  // @@protoc_insertion_point(class_scope:proto.game.AckGains)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers > players_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gameproto_2eproto();
  friend void protobuf_AssignDesc_gameproto_2eproto();
  friend void protobuf_ShutdownFile_gameproto_2eproto();

  void InitAsDefaultInstance();
  static AckGains* default_instance_;
};
// ===================================================================


// ===================================================================

// tagGain

// repeated int32 score = 1;
inline int tagGain::score_size() const {
  return score_.size();
}
inline void tagGain::clear_score() {
  score_.Clear();
}
inline ::google::protobuf::int32 tagGain::score(int index) const {
  return score_.Get(index);
}
inline void tagGain::set_score(int index, ::google::protobuf::int32 value) {
  score_.Set(index, value);
}
inline void tagGain::add_score(::google::protobuf::int32 value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagGain::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagGain::mutable_score() {
  return &score_;
}

// -------------------------------------------------------------------

// tagHandCards

// repeated int32 card = 1;
inline int tagHandCards::card_size() const {
  return card_.size();
}
inline void tagHandCards::clear_card() {
  card_.Clear();
}
inline ::google::protobuf::int32 tagHandCards::card(int index) const {
  return card_.Get(index);
}
inline void tagHandCards::set_card(int index, ::google::protobuf::int32 value) {
  card_.Set(index, value);
}
inline void tagHandCards::add_card(::google::protobuf::int32 value) {
  card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagHandCards::card() const {
  return card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagHandCards::mutable_card() {
  return &card_;
}

// optional int32 huxi = 2;
inline bool tagHandCards::has_huxi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagHandCards::set_has_huxi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagHandCards::clear_has_huxi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagHandCards::clear_huxi() {
  huxi_ = 0;
  clear_has_huxi();
}
inline ::google::protobuf::int32 tagHandCards::huxi() const {
  return huxi_;
}
inline void tagHandCards::set_huxi(::google::protobuf::int32 value) {
  set_has_huxi();
  huxi_ = value;
}

// optional int32 wv_kind = 3;
inline bool tagHandCards::has_wv_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagHandCards::set_has_wv_kind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagHandCards::clear_has_wv_kind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagHandCards::clear_wv_kind() {
  wv_kind_ = 0;
  clear_has_wv_kind();
}
inline ::google::protobuf::int32 tagHandCards::wv_kind() const {
  return wv_kind_;
}
inline void tagHandCards::set_wv_kind(::google::protobuf::int32 value) {
  set_has_wv_kind();
  wv_kind_ = value;
}

// -------------------------------------------------------------------

// tagWeaveCards

// optional int32 weave_kind = 1;
inline bool tagWeaveCards::has_weave_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagWeaveCards::set_has_weave_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagWeaveCards::clear_has_weave_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagWeaveCards::clear_weave_kind() {
  weave_kind_ = 0;
  clear_has_weave_kind();
}
inline ::google::protobuf::int32 tagWeaveCards::weave_kind() const {
  return weave_kind_;
}
inline void tagWeaveCards::set_weave_kind(::google::protobuf::int32 value) {
  set_has_weave_kind();
  weave_kind_ = value;
}

// optional int32 card_count = 2;
inline bool tagWeaveCards::has_card_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagWeaveCards::set_has_card_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagWeaveCards::clear_has_card_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagWeaveCards::clear_card_count() {
  card_count_ = 0;
  clear_has_card_count();
}
inline ::google::protobuf::int32 tagWeaveCards::card_count() const {
  return card_count_;
}
inline void tagWeaveCards::set_card_count(::google::protobuf::int32 value) {
  set_has_card_count();
  card_count_ = value;
}

// optional int32 center_card = 3;
inline bool tagWeaveCards::has_center_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagWeaveCards::set_has_center_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagWeaveCards::clear_has_center_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagWeaveCards::clear_center_card() {
  center_card_ = 0;
  clear_has_center_card();
}
inline ::google::protobuf::int32 tagWeaveCards::center_card() const {
  return center_card_;
}
inline void tagWeaveCards::set_center_card(::google::protobuf::int32 value) {
  set_has_center_card();
  center_card_ = value;
}

// repeated int32 card_list = 4;
inline int tagWeaveCards::card_list_size() const {
  return card_list_.size();
}
inline void tagWeaveCards::clear_card_list() {
  card_list_.Clear();
}
inline ::google::protobuf::int32 tagWeaveCards::card_list(int index) const {
  return card_list_.Get(index);
}
inline void tagWeaveCards::set_card_list(int index, ::google::protobuf::int32 value) {
  card_list_.Set(index, value);
}
inline void tagWeaveCards::add_card_list(::google::protobuf::int32 value) {
  card_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagWeaveCards::card_list() const {
  return card_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagWeaveCards::mutable_card_list() {
  return &card_list_;
}

// optional int32 hu_xi = 5;
inline bool tagWeaveCards::has_hu_xi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagWeaveCards::set_has_hu_xi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagWeaveCards::clear_has_hu_xi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagWeaveCards::clear_hu_xi() {
  hu_xi_ = 0;
  clear_has_hu_xi();
}
inline ::google::protobuf::int32 tagWeaveCards::hu_xi() const {
  return hu_xi_;
}
inline void tagWeaveCards::set_hu_xi(::google::protobuf::int32 value) {
  set_has_hu_xi();
  hu_xi_ = value;
}

// optional int32 out_card = 6;
inline bool tagWeaveCards::has_out_card() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagWeaveCards::set_has_out_card() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagWeaveCards::clear_has_out_card() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagWeaveCards::clear_out_card() {
  out_card_ = 0;
  clear_has_out_card();
}
inline ::google::protobuf::int32 tagWeaveCards::out_card() const {
  return out_card_;
}
inline void tagWeaveCards::set_out_card(::google::protobuf::int32 value) {
  set_has_out_card();
  out_card_ = value;
}

// -------------------------------------------------------------------

// tagPlayers

// optional int32 uid = 1;
inline bool tagPlayers::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagPlayers::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagPlayers::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagPlayers::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 tagPlayers::uid() const {
  return uid_;
}
inline void tagPlayers::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 seatid = 2;
inline bool tagPlayers::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagPlayers::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagPlayers::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagPlayers::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 tagPlayers::seatid() const {
  return seatid_;
}
inline void tagPlayers::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 ready = 3;
inline bool tagPlayers::has_ready() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagPlayers::set_has_ready() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagPlayers::clear_has_ready() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagPlayers::clear_ready() {
  ready_ = 0;
  clear_has_ready();
}
inline ::google::protobuf::int32 tagPlayers::ready() const {
  return ready_;
}
inline void tagPlayers::set_ready(::google::protobuf::int32 value) {
  set_has_ready();
  ready_ = value;
}

// optional int32 money = 4;
inline bool tagPlayers::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tagPlayers::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tagPlayers::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tagPlayers::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 tagPlayers::money() const {
  return money_;
}
inline void tagPlayers::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional bytes name = 5;
inline bool tagPlayers::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagPlayers::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagPlayers::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagPlayers::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& tagPlayers::name() const {
  return *name_;
}
inline void tagPlayers::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tagPlayers::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void tagPlayers::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tagPlayers::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* tagPlayers::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tagPlayers::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 6;
inline bool tagPlayers::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void tagPlayers::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void tagPlayers::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void tagPlayers::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 tagPlayers::sex() const {
  return sex_;
}
inline void tagPlayers::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional bytes avatar = 7;
inline bool tagPlayers::has_avatar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void tagPlayers::set_has_avatar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void tagPlayers::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void tagPlayers::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& tagPlayers::avatar() const {
  return *avatar_;
}
inline void tagPlayers::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void tagPlayers::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void tagPlayers::set_avatar(const void* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tagPlayers::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* tagPlayers::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tagPlayers::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 hu_xi = 8;
inline bool tagPlayers::has_hu_xi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void tagPlayers::set_has_hu_xi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void tagPlayers::clear_has_hu_xi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void tagPlayers::clear_hu_xi() {
  hu_xi_ = 0;
  clear_has_hu_xi();
}
inline ::google::protobuf::int32 tagPlayers::hu_xi() const {
  return hu_xi_;
}
inline void tagPlayers::set_hu_xi(::google::protobuf::int32 value) {
  set_has_hu_xi();
  hu_xi_ = value;
}

// repeated .proto.game.tagWeaveCards weaves = 9;
inline int tagPlayers::weaves_size() const {
  return weaves_.size();
}
inline void tagPlayers::clear_weaves() {
  weaves_.Clear();
}
inline const ::proto::game::tagWeaveCards& tagPlayers::weaves(int index) const {
  return weaves_.Get(index);
}
inline ::proto::game::tagWeaveCards* tagPlayers::mutable_weaves(int index) {
  return weaves_.Mutable(index);
}
inline ::proto::game::tagWeaveCards* tagPlayers::add_weaves() {
  return weaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
tagPlayers::weaves() const {
  return weaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
tagPlayers::mutable_weaves() {
  return &weaves_;
}

// repeated int32 abandon_cards = 10;
inline int tagPlayers::abandon_cards_size() const {
  return abandon_cards_.size();
}
inline void tagPlayers::clear_abandon_cards() {
  abandon_cards_.Clear();
}
inline ::google::protobuf::int32 tagPlayers::abandon_cards(int index) const {
  return abandon_cards_.Get(index);
}
inline void tagPlayers::set_abandon_cards(int index, ::google::protobuf::int32 value) {
  abandon_cards_.Set(index, value);
}
inline void tagPlayers::add_abandon_cards(::google::protobuf::int32 value) {
  abandon_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPlayers::abandon_cards() const {
  return abandon_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPlayers::mutable_abandon_cards() {
  return &abandon_cards_;
}

// repeated int32 abandon_type = 11;
inline int tagPlayers::abandon_type_size() const {
  return abandon_type_.size();
}
inline void tagPlayers::clear_abandon_type() {
  abandon_type_.Clear();
}
inline ::google::protobuf::int32 tagPlayers::abandon_type(int index) const {
  return abandon_type_.Get(index);
}
inline void tagPlayers::set_abandon_type(int index, ::google::protobuf::int32 value) {
  abandon_type_.Set(index, value);
}
inline void tagPlayers::add_abandon_type(::google::protobuf::int32 value) {
  abandon_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPlayers::abandon_type() const {
  return abandon_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPlayers::mutable_abandon_type() {
  return &abandon_type_;
}

// optional int32 offline = 15;
inline bool tagPlayers::has_offline() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void tagPlayers::set_has_offline() {
  _has_bits_[0] |= 0x00000800u;
}
inline void tagPlayers::clear_has_offline() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void tagPlayers::clear_offline() {
  offline_ = 0;
  clear_has_offline();
}
inline ::google::protobuf::int32 tagPlayers::offline() const {
  return offline_;
}
inline void tagPlayers::set_offline(::google::protobuf::int32 value) {
  set_has_offline();
  offline_ = value;
}

// optional int32 action = 16;
inline bool tagPlayers::has_action() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void tagPlayers::set_has_action() {
  _has_bits_[0] |= 0x00001000u;
}
inline void tagPlayers::clear_has_action() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void tagPlayers::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 tagPlayers::action() const {
  return action_;
}
inline void tagPlayers::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// repeated .proto.game.tagHandCards hand_cards = 17;
inline int tagPlayers::hand_cards_size() const {
  return hand_cards_.size();
}
inline void tagPlayers::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::proto::game::tagHandCards& tagPlayers::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::proto::game::tagHandCards* tagPlayers::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::proto::game::tagHandCards* tagPlayers::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
tagPlayers::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
tagPlayers::mutable_hand_cards() {
  return &hand_cards_;
}

// optional int32 total_score = 18;
inline bool tagPlayers::has_total_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void tagPlayers::set_has_total_score() {
  _has_bits_[0] |= 0x00004000u;
}
inline void tagPlayers::clear_has_total_score() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void tagPlayers::clear_total_score() {
  total_score_ = 0;
  clear_has_total_score();
}
inline ::google::protobuf::int32 tagPlayers::total_score() const {
  return total_score_;
}
inline void tagPlayers::set_total_score(::google::protobuf::int32 value) {
  set_has_total_score();
  total_score_ = value;
}

// optional int32 hand_count = 22;
inline bool tagPlayers::has_hand_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void tagPlayers::set_has_hand_count() {
  _has_bits_[0] |= 0x00008000u;
}
inline void tagPlayers::clear_has_hand_count() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void tagPlayers::clear_hand_count() {
  hand_count_ = 0;
  clear_has_hand_count();
}
inline ::google::protobuf::int32 tagPlayers::hand_count() const {
  return hand_count_;
}
inline void tagPlayers::set_hand_count(::google::protobuf::int32 value) {
  set_has_hand_count();
  hand_count_ = value;
}

// optional int32 hu_count = 23;
inline bool tagPlayers::has_hu_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void tagPlayers::set_has_hu_count() {
  _has_bits_[0] |= 0x00010000u;
}
inline void tagPlayers::clear_has_hu_count() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void tagPlayers::clear_hu_count() {
  hu_count_ = 0;
  clear_has_hu_count();
}
inline ::google::protobuf::int32 tagPlayers::hu_count() const {
  return hu_count_;
}
inline void tagPlayers::set_hu_count(::google::protobuf::int32 value) {
  set_has_hu_count();
  hu_count_ = value;
}

// optional int32 best_huxi = 24;
inline bool tagPlayers::has_best_huxi() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void tagPlayers::set_has_best_huxi() {
  _has_bits_[0] |= 0x00020000u;
}
inline void tagPlayers::clear_has_best_huxi() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void tagPlayers::clear_best_huxi() {
  best_huxi_ = 0;
  clear_has_best_huxi();
}
inline ::google::protobuf::int32 tagPlayers::best_huxi() const {
  return best_huxi_;
}
inline void tagPlayers::set_best_huxi(::google::protobuf::int32 value) {
  set_has_best_huxi();
  best_huxi_ = value;
}

// optional int32 best_score = 26;
inline bool tagPlayers::has_best_score() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void tagPlayers::set_has_best_score() {
  _has_bits_[0] |= 0x00040000u;
}
inline void tagPlayers::clear_has_best_score() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void tagPlayers::clear_best_score() {
  best_score_ = 0;
  clear_has_best_score();
}
inline ::google::protobuf::int32 tagPlayers::best_score() const {
  return best_score_;
}
inline void tagPlayers::set_best_score(::google::protobuf::int32 value) {
  set_has_best_score();
  best_score_ = value;
}

// optional int32 operate_type = 28;
inline bool tagPlayers::has_operate_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void tagPlayers::set_has_operate_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void tagPlayers::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void tagPlayers::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 tagPlayers::operate_type() const {
  return operate_type_;
}
inline void tagPlayers::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional int32 score = 29;
inline bool tagPlayers::has_score() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void tagPlayers::set_has_score() {
  _has_bits_[0] |= 0x00100000u;
}
inline void tagPlayers::clear_has_score() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void tagPlayers::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 tagPlayers::score() const {
  return score_;
}
inline void tagPlayers::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// repeated int32 gains = 33;
inline int tagPlayers::gains_size() const {
  return gains_.size();
}
inline void tagPlayers::clear_gains() {
  gains_.Clear();
}
inline ::google::protobuf::int32 tagPlayers::gains(int index) const {
  return gains_.Get(index);
}
inline void tagPlayers::set_gains(int index, ::google::protobuf::int32 value) {
  gains_.Set(index, value);
}
inline void tagPlayers::add_gains(::google::protobuf::int32 value) {
  gains_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPlayers::gains() const {
  return gains_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPlayers::mutable_gains() {
  return &gains_;
}

// optional int32 total_gains = 34;
inline bool tagPlayers::has_total_gains() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void tagPlayers::set_has_total_gains() {
  _has_bits_[0] |= 0x00400000u;
}
inline void tagPlayers::clear_has_total_gains() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void tagPlayers::clear_total_gains() {
  total_gains_ = 0;
  clear_has_total_gains();
}
inline ::google::protobuf::int32 tagPlayers::total_gains() const {
  return total_gains_;
}
inline void tagPlayers::set_total_gains(::google::protobuf::int32 value) {
  set_has_total_gains();
  total_gains_ = value;
}

// optional int32 dissolve_cnt = 40;
inline bool tagPlayers::has_dissolve_cnt() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void tagPlayers::set_has_dissolve_cnt() {
  _has_bits_[0] |= 0x00800000u;
}
inline void tagPlayers::clear_has_dissolve_cnt() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void tagPlayers::clear_dissolve_cnt() {
  dissolve_cnt_ = 0;
  clear_has_dissolve_cnt();
}
inline ::google::protobuf::int32 tagPlayers::dissolve_cnt() const {
  return dissolve_cnt_;
}
inline void tagPlayers::set_dissolve_cnt(::google::protobuf::int32 value) {
  set_has_dissolve_cnt();
  dissolve_cnt_ = value;
}

// optional int32 dissovle_state = 41;
inline bool tagPlayers::has_dissovle_state() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void tagPlayers::set_has_dissovle_state() {
  _has_bits_[0] |= 0x01000000u;
}
inline void tagPlayers::clear_has_dissovle_state() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void tagPlayers::clear_dissovle_state() {
  dissovle_state_ = 0;
  clear_has_dissovle_state();
}
inline ::google::protobuf::int32 tagPlayers::dissovle_state() const {
  return dissovle_state_;
}
inline void tagPlayers::set_dissovle_state(::google::protobuf::int32 value) {
  set_has_dissovle_state();
  dissovle_state_ = value;
}

// optional bytes tid = 42;
inline bool tagPlayers::has_tid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void tagPlayers::set_has_tid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void tagPlayers::clear_has_tid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void tagPlayers::clear_tid() {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    tid_->clear();
  }
  clear_has_tid();
}
inline const ::std::string& tagPlayers::tid() const {
  return *tid_;
}
inline void tagPlayers::set_tid(const ::std::string& value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void tagPlayers::set_tid(const char* value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void tagPlayers::set_tid(const void* value, size_t size) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tagPlayers::mutable_tid() {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  return tid_;
}
inline ::std::string* tagPlayers::release_tid() {
  clear_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tid_;
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tagPlayers::set_allocated_tid(::std::string* tid) {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (tid) {
    set_has_tid();
    tid_ = tid;
  } else {
    clear_has_tid();
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes skey = 43;
inline bool tagPlayers::has_skey() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void tagPlayers::set_has_skey() {
  _has_bits_[0] |= 0x04000000u;
}
inline void tagPlayers::clear_has_skey() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void tagPlayers::clear_skey() {
  if (skey_ != &::google::protobuf::internal::kEmptyString) {
    skey_->clear();
  }
  clear_has_skey();
}
inline const ::std::string& tagPlayers::skey() const {
  return *skey_;
}
inline void tagPlayers::set_skey(const ::std::string& value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
}
inline void tagPlayers::set_skey(const char* value) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    skey_ = new ::std::string;
  }
  skey_->assign(value);
}
inline void tagPlayers::set_skey(const void* value, size_t size) {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    skey_ = new ::std::string;
  }
  skey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tagPlayers::mutable_skey() {
  set_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    skey_ = new ::std::string;
  }
  return skey_;
}
inline ::std::string* tagPlayers::release_skey() {
  clear_has_skey();
  if (skey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skey_;
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tagPlayers::set_allocated_skey(::std::string* skey) {
  if (skey_ != &::google::protobuf::internal::kEmptyString) {
    delete skey_;
  }
  if (skey) {
    set_has_skey();
    skey_ = skey;
  } else {
    clear_has_skey();
    skey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 card_index = 44;
inline int tagPlayers::card_index_size() const {
  return card_index_.size();
}
inline void tagPlayers::clear_card_index() {
  card_index_.Clear();
}
inline ::google::protobuf::int32 tagPlayers::card_index(int index) const {
  return card_index_.Get(index);
}
inline void tagPlayers::set_card_index(int index, ::google::protobuf::int32 value) {
  card_index_.Set(index, value);
}
inline void tagPlayers::add_card_index(::google::protobuf::int32 value) {
  card_index_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPlayers::card_index() const {
  return card_index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPlayers::mutable_card_index() {
  return &card_index_;
}

// repeated .proto.game.tagHandCards cards_weave = 45;
inline int tagPlayers::cards_weave_size() const {
  return cards_weave_.size();
}
inline void tagPlayers::clear_cards_weave() {
  cards_weave_.Clear();
}
inline const ::proto::game::tagHandCards& tagPlayers::cards_weave(int index) const {
  return cards_weave_.Get(index);
}
inline ::proto::game::tagHandCards* tagPlayers::mutable_cards_weave(int index) {
  return cards_weave_.Mutable(index);
}
inline ::proto::game::tagHandCards* tagPlayers::add_cards_weave() {
  return cards_weave_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
tagPlayers::cards_weave() const {
  return cards_weave_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
tagPlayers::mutable_cards_weave() {
  return &cards_weave_;
}

// repeated .proto.game.tagHandCards best_weave = 46;
inline int tagPlayers::best_weave_size() const {
  return best_weave_.size();
}
inline void tagPlayers::clear_best_weave() {
  best_weave_.Clear();
}
inline const ::proto::game::tagHandCards& tagPlayers::best_weave(int index) const {
  return best_weave_.Get(index);
}
inline ::proto::game::tagHandCards* tagPlayers::mutable_best_weave(int index) {
  return best_weave_.Mutable(index);
}
inline ::proto::game::tagHandCards* tagPlayers::add_best_weave() {
  return best_weave_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
tagPlayers::best_weave() const {
  return best_weave_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
tagPlayers::mutable_best_weave() {
  return &best_weave_;
}

// repeated .proto.game.tagWeaveCards win_cards_weaves = 47;
inline int tagPlayers::win_cards_weaves_size() const {
  return win_cards_weaves_.size();
}
inline void tagPlayers::clear_win_cards_weaves() {
  win_cards_weaves_.Clear();
}
inline const ::proto::game::tagWeaveCards& tagPlayers::win_cards_weaves(int index) const {
  return win_cards_weaves_.Get(index);
}
inline ::proto::game::tagWeaveCards* tagPlayers::mutable_win_cards_weaves(int index) {
  return win_cards_weaves_.Mutable(index);
}
inline ::proto::game::tagWeaveCards* tagPlayers::add_win_cards_weaves() {
  return win_cards_weaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
tagPlayers::win_cards_weaves() const {
  return win_cards_weaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
tagPlayers::mutable_win_cards_weaves() {
  return &win_cards_weaves_;
}

// optional int32 total_fan = 48;
inline bool tagPlayers::has_total_fan() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void tagPlayers::set_has_total_fan() {
  _has_bits_[0] |= 0x80000000u;
}
inline void tagPlayers::clear_has_total_fan() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void tagPlayers::clear_total_fan() {
  total_fan_ = 0;
  clear_has_total_fan();
}
inline ::google::protobuf::int32 tagPlayers::total_fan() const {
  return total_fan_;
}
inline void tagPlayers::set_total_fan(::google::protobuf::int32 value) {
  set_has_total_fan();
  total_fan_ = value;
}

// repeated int32 user_out_cards = 49;
inline int tagPlayers::user_out_cards_size() const {
  return user_out_cards_.size();
}
inline void tagPlayers::clear_user_out_cards() {
  user_out_cards_.Clear();
}
inline ::google::protobuf::int32 tagPlayers::user_out_cards(int index) const {
  return user_out_cards_.Get(index);
}
inline void tagPlayers::set_user_out_cards(int index, ::google::protobuf::int32 value) {
  user_out_cards_.Set(index, value);
}
inline void tagPlayers::add_user_out_cards(::google::protobuf::int32 value) {
  user_out_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPlayers::user_out_cards() const {
  return user_out_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPlayers::mutable_user_out_cards() {
  return &user_out_cards_;
}

// -------------------------------------------------------------------

// tagDissolveRoomInfo

// optional int32 state = 1;
inline bool tagDissolveRoomInfo::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagDissolveRoomInfo::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagDissolveRoomInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagDissolveRoomInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 tagDissolveRoomInfo::state() const {
  return state_;
}
inline void tagDissolveRoomInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 uid = 2;
inline bool tagDissolveRoomInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagDissolveRoomInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagDissolveRoomInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagDissolveRoomInfo::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 tagDissolveRoomInfo::uid() const {
  return uid_;
}
inline void tagDissolveRoomInfo::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// repeated int32 voters_uid = 3;
inline int tagDissolveRoomInfo::voters_uid_size() const {
  return voters_uid_.size();
}
inline void tagDissolveRoomInfo::clear_voters_uid() {
  voters_uid_.Clear();
}
inline ::google::protobuf::int32 tagDissolveRoomInfo::voters_uid(int index) const {
  return voters_uid_.Get(index);
}
inline void tagDissolveRoomInfo::set_voters_uid(int index, ::google::protobuf::int32 value) {
  voters_uid_.Set(index, value);
}
inline void tagDissolveRoomInfo::add_voters_uid(::google::protobuf::int32 value) {
  voters_uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagDissolveRoomInfo::voters_uid() const {
  return voters_uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagDissolveRoomInfo::mutable_voters_uid() {
  return &voters_uid_;
}

// repeated .proto.game.tagPlayers players = 4;
inline int tagDissolveRoomInfo::players_size() const {
  return players_.size();
}
inline void tagDissolveRoomInfo::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& tagDissolveRoomInfo::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* tagDissolveRoomInfo::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* tagDissolveRoomInfo::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
tagDissolveRoomInfo::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
tagDissolveRoomInfo::mutable_players() {
  return &players_;
}

// optional int32 remain_time = 5;
inline bool tagDissolveRoomInfo::has_remain_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void tagDissolveRoomInfo::set_has_remain_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void tagDissolveRoomInfo::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void tagDissolveRoomInfo::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 tagDissolveRoomInfo::remain_time() const {
  return remain_time_;
}
inline void tagDissolveRoomInfo::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// -------------------------------------------------------------------

// tagIsChouPai

// repeated bool is_chou_pai = 1;
inline int tagIsChouPai::is_chou_pai_size() const {
  return is_chou_pai_.size();
}
inline void tagIsChouPai::clear_is_chou_pai() {
  is_chou_pai_.Clear();
}
inline bool tagIsChouPai::is_chou_pai(int index) const {
  return is_chou_pai_.Get(index);
}
inline void tagIsChouPai::set_is_chou_pai(int index, bool value) {
  is_chou_pai_.Set(index, value);
}
inline void tagIsChouPai::add_is_chou_pai(bool value) {
  is_chou_pai_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
tagIsChouPai::is_chou_pai() const {
  return is_chou_pai_;
}
inline ::google::protobuf::RepeatedField< bool >*
tagIsChouPai::mutable_is_chou_pai() {
  return &is_chou_pai_;
}

// -------------------------------------------------------------------

// AckTableInfo

// optional int32 seatid = 1;
inline bool AckTableInfo::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckTableInfo::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckTableInfo::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckTableInfo::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckTableInfo::seatid() const {
  return seatid_;
}
inline void AckTableInfo::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 state = 2;
inline bool AckTableInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckTableInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckTableInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckTableInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 AckTableInfo::state() const {
  return state_;
}
inline void AckTableInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 operate_timer_stamp = 3;
inline bool AckTableInfo::has_operate_timer_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckTableInfo::set_has_operate_timer_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckTableInfo::clear_has_operate_timer_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckTableInfo::clear_operate_timer_stamp() {
  operate_timer_stamp_ = 0;
  clear_has_operate_timer_stamp();
}
inline ::google::protobuf::int32 AckTableInfo::operate_timer_stamp() const {
  return operate_timer_stamp_;
}
inline void AckTableInfo::set_operate_timer_stamp(::google::protobuf::int32 value) {
  set_has_operate_timer_stamp();
  operate_timer_stamp_ = value;
}

// optional int32 left_card_count = 4;
inline bool AckTableInfo::has_left_card_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckTableInfo::set_has_left_card_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckTableInfo::clear_has_left_card_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckTableInfo::clear_left_card_count() {
  left_card_count_ = 0;
  clear_has_left_card_count();
}
inline ::google::protobuf::int32 AckTableInfo::left_card_count() const {
  return left_card_count_;
}
inline void AckTableInfo::set_left_card_count(::google::protobuf::int32 value) {
  set_has_left_card_count();
  left_card_count_ = value;
}

// optional int32 banker_user = 5;
inline bool AckTableInfo::has_banker_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckTableInfo::set_has_banker_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckTableInfo::clear_has_banker_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckTableInfo::clear_banker_user() {
  banker_user_ = 0;
  clear_has_banker_user();
}
inline ::google::protobuf::int32 AckTableInfo::banker_user() const {
  return banker_user_;
}
inline void AckTableInfo::set_banker_user(::google::protobuf::int32 value) {
  set_has_banker_user();
  banker_user_ = value;
}

// optional int32 current_user = 6;
inline bool AckTableInfo::has_current_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckTableInfo::set_has_current_user() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckTableInfo::clear_has_current_user() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckTableInfo::clear_current_user() {
  current_user_ = 0;
  clear_has_current_user();
}
inline ::google::protobuf::int32 AckTableInfo::current_user() const {
  return current_user_;
}
inline void AckTableInfo::set_current_user(::google::protobuf::int32 value) {
  set_has_current_user();
  current_user_ = value;
}

// optional int32 current_card = 7;
inline bool AckTableInfo::has_current_card() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckTableInfo::set_has_current_card() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckTableInfo::clear_has_current_card() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckTableInfo::clear_current_card() {
  current_card_ = 0;
  clear_has_current_card();
}
inline ::google::protobuf::int32 AckTableInfo::current_card() const {
  return current_card_;
}
inline void AckTableInfo::set_current_card(::google::protobuf::int32 value) {
  set_has_current_card();
  current_card_ = value;
}

// optional int32 current_outcard_user = 8;
inline bool AckTableInfo::has_current_outcard_user() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckTableInfo::set_has_current_outcard_user() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckTableInfo::clear_has_current_outcard_user() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckTableInfo::clear_current_outcard_user() {
  current_outcard_user_ = 0;
  clear_has_current_outcard_user();
}
inline ::google::protobuf::int32 AckTableInfo::current_outcard_user() const {
  return current_outcard_user_;
}
inline void AckTableInfo::set_current_outcard_user(::google::protobuf::int32 value) {
  set_has_current_outcard_user();
  current_outcard_user_ = value;
}

// optional int32 current_outcard = 9;
inline bool AckTableInfo::has_current_outcard() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AckTableInfo::set_has_current_outcard() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AckTableInfo::clear_has_current_outcard() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AckTableInfo::clear_current_outcard() {
  current_outcard_ = 0;
  clear_has_current_outcard();
}
inline ::google::protobuf::int32 AckTableInfo::current_outcard() const {
  return current_outcard_;
}
inline void AckTableInfo::set_current_outcard(::google::protobuf::int32 value) {
  set_has_current_outcard();
  current_outcard_ = value;
}

// optional bool is_dispatch = 10;
inline bool AckTableInfo::has_is_dispatch() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AckTableInfo::set_has_is_dispatch() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AckTableInfo::clear_has_is_dispatch() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AckTableInfo::clear_is_dispatch() {
  is_dispatch_ = false;
  clear_has_is_dispatch();
}
inline bool AckTableInfo::is_dispatch() const {
  return is_dispatch_;
}
inline void AckTableInfo::set_is_dispatch(bool value) {
  set_has_is_dispatch();
  is_dispatch_ = value;
}

// optional bool card_operated = 11;
inline bool AckTableInfo::has_card_operated() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AckTableInfo::set_has_card_operated() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AckTableInfo::clear_has_card_operated() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AckTableInfo::clear_card_operated() {
  card_operated_ = false;
  clear_has_card_operated();
}
inline bool AckTableInfo::card_operated() const {
  return card_operated_;
}
inline void AckTableInfo::set_card_operated(bool value) {
  set_has_card_operated();
  card_operated_ = value;
}

// optional bool is_out_card = 13;
inline bool AckTableInfo::has_is_out_card() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AckTableInfo::set_has_is_out_card() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AckTableInfo::clear_has_is_out_card() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AckTableInfo::clear_is_out_card() {
  is_out_card_ = false;
  clear_has_is_out_card();
}
inline bool AckTableInfo::is_out_card() const {
  return is_out_card_;
}
inline void AckTableInfo::set_is_out_card(bool value) {
  set_has_is_out_card();
  is_out_card_ = value;
}

// optional bool is_first_card = 14;
inline bool AckTableInfo::has_is_first_card() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AckTableInfo::set_has_is_first_card() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AckTableInfo::clear_has_is_first_card() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AckTableInfo::clear_is_first_card() {
  is_first_card_ = false;
  clear_has_is_first_card();
}
inline bool AckTableInfo::is_first_card() const {
  return is_first_card_;
}
inline void AckTableInfo::set_is_first_card(bool value) {
  set_has_is_first_card();
  is_first_card_ = value;
}

// optional int32 huang_count = 15;
inline bool AckTableInfo::has_huang_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AckTableInfo::set_has_huang_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AckTableInfo::clear_has_huang_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AckTableInfo::clear_huang_count() {
  huang_count_ = 0;
  clear_has_huang_count();
}
inline ::google::protobuf::int32 AckTableInfo::huang_count() const {
  return huang_count_;
}
inline void AckTableInfo::set_huang_count(::google::protobuf::int32 value) {
  set_has_huang_count();
  huang_count_ = value;
}

// optional int32 take_in = 16;
inline bool AckTableInfo::has_take_in() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AckTableInfo::set_has_take_in() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AckTableInfo::clear_has_take_in() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AckTableInfo::clear_take_in() {
  take_in_ = 0;
  clear_has_take_in();
}
inline ::google::protobuf::int32 AckTableInfo::take_in() const {
  return take_in_;
}
inline void AckTableInfo::set_take_in(::google::protobuf::int32 value) {
  set_has_take_in();
  take_in_ = value;
}

// optional int32 play_id = 17;
inline bool AckTableInfo::has_play_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void AckTableInfo::set_has_play_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void AckTableInfo::clear_has_play_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void AckTableInfo::clear_play_id() {
  play_id_ = 0;
  clear_has_play_id();
}
inline ::google::protobuf::int32 AckTableInfo::play_id() const {
  return play_id_;
}
inline void AckTableInfo::set_play_id(::google::protobuf::int32 value) {
  set_has_play_id();
  play_id_ = value;
}

// optional int32 base_huxi = 18;
inline bool AckTableInfo::has_base_huxi() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void AckTableInfo::set_has_base_huxi() {
  _has_bits_[0] |= 0x00010000u;
}
inline void AckTableInfo::clear_has_base_huxi() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void AckTableInfo::clear_base_huxi() {
  base_huxi_ = 0;
  clear_has_base_huxi();
}
inline ::google::protobuf::int32 AckTableInfo::base_huxi() const {
  return base_huxi_;
}
inline void AckTableInfo::set_base_huxi(::google::protobuf::int32 value) {
  set_has_base_huxi();
  base_huxi_ = value;
}

// optional int32 room_user_id = 19;
inline bool AckTableInfo::has_room_user_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void AckTableInfo::set_has_room_user_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void AckTableInfo::clear_has_room_user_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void AckTableInfo::clear_room_user_id() {
  room_user_id_ = 0;
  clear_has_room_user_id();
}
inline ::google::protobuf::int32 AckTableInfo::room_user_id() const {
  return room_user_id_;
}
inline void AckTableInfo::set_room_user_id(::google::protobuf::int32 value) {
  set_has_room_user_id();
  room_user_id_ = value;
}

// optional int32 user_action = 22;
inline bool AckTableInfo::has_user_action() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void AckTableInfo::set_has_user_action() {
  _has_bits_[0] |= 0x00040000u;
}
inline void AckTableInfo::clear_has_user_action() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void AckTableInfo::clear_user_action() {
  user_action_ = 0;
  clear_has_user_action();
}
inline ::google::protobuf::int32 AckTableInfo::user_action() const {
  return user_action_;
}
inline void AckTableInfo::set_user_action(::google::protobuf::int32 value) {
  set_has_user_action();
  user_action_ = value;
}

// optional bool is_first_operate = 23;
inline bool AckTableInfo::has_is_first_operate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void AckTableInfo::set_has_is_first_operate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void AckTableInfo::clear_has_is_first_operate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void AckTableInfo::clear_is_first_operate() {
  is_first_operate_ = false;
  clear_has_is_first_operate();
}
inline bool AckTableInfo::is_first_operate() const {
  return is_first_operate_;
}
inline void AckTableInfo::set_is_first_operate(bool value) {
  set_has_is_first_operate();
  is_first_operate_ = value;
}

// optional bool response = 24;
inline bool AckTableInfo::has_response() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void AckTableInfo::set_has_response() {
  _has_bits_[0] |= 0x00100000u;
}
inline void AckTableInfo::clear_has_response() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void AckTableInfo::clear_response() {
  response_ = false;
  clear_has_response();
}
inline bool AckTableInfo::response() const {
  return response_;
}
inline void AckTableInfo::set_response(bool value) {
  set_has_response();
  response_ = value;
}

// optional int32 perform_action = 25;
inline bool AckTableInfo::has_perform_action() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void AckTableInfo::set_has_perform_action() {
  _has_bits_[0] |= 0x00200000u;
}
inline void AckTableInfo::clear_has_perform_action() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void AckTableInfo::clear_perform_action() {
  perform_action_ = 0;
  clear_has_perform_action();
}
inline ::google::protobuf::int32 AckTableInfo::perform_action() const {
  return perform_action_;
}
inline void AckTableInfo::set_perform_action(::google::protobuf::int32 value) {
  set_has_perform_action();
  perform_action_ = value;
}

// repeated .proto.game.tagHandCards hand_cards = 26;
inline int AckTableInfo::hand_cards_size() const {
  return hand_cards_.size();
}
inline void AckTableInfo::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::proto::game::tagHandCards& AckTableInfo::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::proto::game::tagHandCards* AckTableInfo::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::proto::game::tagHandCards* AckTableInfo::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
AckTableInfo::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
AckTableInfo::mutable_hand_cards() {
  return &hand_cards_;
}

// optional int32 stand_money = 30;
inline bool AckTableInfo::has_stand_money() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void AckTableInfo::set_has_stand_money() {
  _has_bits_[0] |= 0x00800000u;
}
inline void AckTableInfo::clear_has_stand_money() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void AckTableInfo::clear_stand_money() {
  stand_money_ = 0;
  clear_has_stand_money();
}
inline ::google::protobuf::int32 AckTableInfo::stand_money() const {
  return stand_money_;
}
inline void AckTableInfo::set_stand_money(::google::protobuf::int32 value) {
  set_has_stand_money();
  stand_money_ = value;
}

// optional int32 base_money = 31;
inline bool AckTableInfo::has_base_money() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void AckTableInfo::set_has_base_money() {
  _has_bits_[0] |= 0x01000000u;
}
inline void AckTableInfo::clear_has_base_money() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void AckTableInfo::clear_base_money() {
  base_money_ = 0;
  clear_has_base_money();
}
inline ::google::protobuf::int32 AckTableInfo::base_money() const {
  return base_money_;
}
inline void AckTableInfo::set_base_money(::google::protobuf::int32 value) {
  set_has_base_money();
  base_money_ = value;
}

// optional .proto.game.tagDissolveRoomInfo dissolve_room_info = 32;
inline bool AckTableInfo::has_dissolve_room_info() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void AckTableInfo::set_has_dissolve_room_info() {
  _has_bits_[0] |= 0x02000000u;
}
inline void AckTableInfo::clear_has_dissolve_room_info() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void AckTableInfo::clear_dissolve_room_info() {
  if (dissolve_room_info_ != NULL) dissolve_room_info_->::proto::game::tagDissolveRoomInfo::Clear();
  clear_has_dissolve_room_info();
}
inline const ::proto::game::tagDissolveRoomInfo& AckTableInfo::dissolve_room_info() const {
  return dissolve_room_info_ != NULL ? *dissolve_room_info_ : *default_instance_->dissolve_room_info_;
}
inline ::proto::game::tagDissolveRoomInfo* AckTableInfo::mutable_dissolve_room_info() {
  set_has_dissolve_room_info();
  if (dissolve_room_info_ == NULL) dissolve_room_info_ = new ::proto::game::tagDissolveRoomInfo;
  return dissolve_room_info_;
}
inline ::proto::game::tagDissolveRoomInfo* AckTableInfo::release_dissolve_room_info() {
  clear_has_dissolve_room_info();
  ::proto::game::tagDissolveRoomInfo* temp = dissolve_room_info_;
  dissolve_room_info_ = NULL;
  return temp;
}
inline void AckTableInfo::set_allocated_dissolve_room_info(::proto::game::tagDissolveRoomInfo* dissolve_room_info) {
  delete dissolve_room_info_;
  dissolve_room_info_ = dissolve_room_info;
  if (dissolve_room_info) {
    set_has_dissolve_room_info();
  } else {
    clear_has_dissolve_room_info();
  }
}

// repeated .proto.game.tagPlayers players = 33;
inline int AckTableInfo::players_size() const {
  return players_.size();
}
inline void AckTableInfo::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& AckTableInfo::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* AckTableInfo::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* AckTableInfo::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
AckTableInfo::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
AckTableInfo::mutable_players() {
  return &players_;
}

// repeated bytes offline_info = 34;
inline int AckTableInfo::offline_info_size() const {
  return offline_info_.size();
}
inline void AckTableInfo::clear_offline_info() {
  offline_info_.Clear();
}
inline const ::std::string& AckTableInfo::offline_info(int index) const {
  return offline_info_.Get(index);
}
inline ::std::string* AckTableInfo::mutable_offline_info(int index) {
  return offline_info_.Mutable(index);
}
inline void AckTableInfo::set_offline_info(int index, const ::std::string& value) {
  offline_info_.Mutable(index)->assign(value);
}
inline void AckTableInfo::set_offline_info(int index, const char* value) {
  offline_info_.Mutable(index)->assign(value);
}
inline void AckTableInfo::set_offline_info(int index, const void* value, size_t size) {
  offline_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckTableInfo::add_offline_info() {
  return offline_info_.Add();
}
inline void AckTableInfo::add_offline_info(const ::std::string& value) {
  offline_info_.Add()->assign(value);
}
inline void AckTableInfo::add_offline_info(const char* value) {
  offline_info_.Add()->assign(value);
}
inline void AckTableInfo::add_offline_info(const void* value, size_t size) {
  offline_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AckTableInfo::offline_info() const {
  return offline_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AckTableInfo::mutable_offline_info() {
  return &offline_info_;
}

// optional int32 offline_max_count = 35;
inline bool AckTableInfo::has_offline_max_count() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void AckTableInfo::set_has_offline_max_count() {
  _has_bits_[0] |= 0x10000000u;
}
inline void AckTableInfo::clear_has_offline_max_count() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void AckTableInfo::clear_offline_max_count() {
  offline_max_count_ = 0;
  clear_has_offline_max_count();
}
inline ::google::protobuf::int32 AckTableInfo::offline_max_count() const {
  return offline_max_count_;
}
inline void AckTableInfo::set_offline_max_count(::google::protobuf::int32 value) {
  set_has_offline_max_count();
  offline_max_count_ = value;
}

// optional int32 game_player = 36;
inline bool AckTableInfo::has_game_player() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void AckTableInfo::set_has_game_player() {
  _has_bits_[0] |= 0x20000000u;
}
inline void AckTableInfo::clear_has_game_player() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void AckTableInfo::clear_game_player() {
  game_player_ = 0;
  clear_has_game_player();
}
inline ::google::protobuf::int32 AckTableInfo::game_player() const {
  return game_player_;
}
inline void AckTableInfo::set_game_player(::google::protobuf::int32 value) {
  set_has_game_player();
  game_player_ = value;
}

// optional bytes game_name = 37;
inline bool AckTableInfo::has_game_name() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void AckTableInfo::set_has_game_name() {
  _has_bits_[0] |= 0x40000000u;
}
inline void AckTableInfo::clear_has_game_name() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void AckTableInfo::clear_game_name() {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    game_name_->clear();
  }
  clear_has_game_name();
}
inline const ::std::string& AckTableInfo::game_name() const {
  return *game_name_;
}
inline void AckTableInfo::set_game_name(const ::std::string& value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void AckTableInfo::set_game_name(const char* value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void AckTableInfo::set_game_name(const void* value, size_t size) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckTableInfo::mutable_game_name() {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  return game_name_;
}
inline ::std::string* AckTableInfo::release_game_name() {
  clear_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_name_;
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckTableInfo::set_allocated_game_name(::std::string* game_name) {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (game_name) {
    set_has_game_name();
    game_name_ = game_name;
  } else {
    clear_has_game_name();
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_base_two_score = 46;
inline bool AckTableInfo::has_is_base_two_score() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void AckTableInfo::set_has_is_base_two_score() {
  _has_bits_[0] |= 0x80000000u;
}
inline void AckTableInfo::clear_has_is_base_two_score() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void AckTableInfo::clear_is_base_two_score() {
  is_base_two_score_ = false;
  clear_has_is_base_two_score();
}
inline bool AckTableInfo::is_base_two_score() const {
  return is_base_two_score_;
}
inline void AckTableInfo::set_is_base_two_score(bool value) {
  set_has_is_base_two_score();
  is_base_two_score_ = value;
}

// optional bytes tid = 50;
inline bool AckTableInfo::has_tid() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void AckTableInfo::set_has_tid() {
  _has_bits_[1] |= 0x00000001u;
}
inline void AckTableInfo::clear_has_tid() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void AckTableInfo::clear_tid() {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    tid_->clear();
  }
  clear_has_tid();
}
inline const ::std::string& AckTableInfo::tid() const {
  return *tid_;
}
inline void AckTableInfo::set_tid(const ::std::string& value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void AckTableInfo::set_tid(const char* value) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(value);
}
inline void AckTableInfo::set_tid(const void* value, size_t size) {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  tid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckTableInfo::mutable_tid() {
  set_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    tid_ = new ::std::string;
  }
  return tid_;
}
inline ::std::string* AckTableInfo::release_tid() {
  clear_has_tid();
  if (tid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tid_;
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckTableInfo::set_allocated_tid(::std::string* tid) {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (tid) {
    set_has_tid();
    tid_ = tid;
  } else {
    clear_has_tid();
    tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 room_status = 51;
inline bool AckTableInfo::has_room_status() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void AckTableInfo::set_has_room_status() {
  _has_bits_[1] |= 0x00000002u;
}
inline void AckTableInfo::clear_has_room_status() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void AckTableInfo::clear_room_status() {
  room_status_ = 0;
  clear_has_room_status();
}
inline ::google::protobuf::int32 AckTableInfo::room_status() const {
  return room_status_;
}
inline void AckTableInfo::set_room_status(::google::protobuf::int32 value) {
  set_has_room_status();
  room_status_ = value;
}

// optional int32 dissolve_applyer = 52;
inline bool AckTableInfo::has_dissolve_applyer() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void AckTableInfo::set_has_dissolve_applyer() {
  _has_bits_[1] |= 0x00000004u;
}
inline void AckTableInfo::clear_has_dissolve_applyer() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void AckTableInfo::clear_dissolve_applyer() {
  dissolve_applyer_ = 0;
  clear_has_dissolve_applyer();
}
inline ::google::protobuf::int32 AckTableInfo::dissolve_applyer() const {
  return dissolve_applyer_;
}
inline void AckTableInfo::set_dissolve_applyer(::google::protobuf::int32 value) {
  set_has_dissolve_applyer();
  dissolve_applyer_ = value;
}

// optional int32 dissovle_state = 53;
inline bool AckTableInfo::has_dissovle_state() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void AckTableInfo::set_has_dissovle_state() {
  _has_bits_[1] |= 0x00000008u;
}
inline void AckTableInfo::clear_has_dissovle_state() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void AckTableInfo::clear_dissovle_state() {
  dissovle_state_ = 0;
  clear_has_dissovle_state();
}
inline ::google::protobuf::int32 AckTableInfo::dissovle_state() const {
  return dissovle_state_;
}
inline void AckTableInfo::set_dissovle_state(::google::protobuf::int32 value) {
  set_has_dissovle_state();
  dissovle_state_ = value;
}

// optional int32 is_dissolved = 54;
inline bool AckTableInfo::has_is_dissolved() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void AckTableInfo::set_has_is_dissolved() {
  _has_bits_[1] |= 0x00000010u;
}
inline void AckTableInfo::clear_has_is_dissolved() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void AckTableInfo::clear_is_dissolved() {
  is_dissolved_ = 0;
  clear_has_is_dissolved();
}
inline ::google::protobuf::int32 AckTableInfo::is_dissolved() const {
  return is_dissolved_;
}
inline void AckTableInfo::set_is_dissolved(::google::protobuf::int32 value) {
  set_has_is_dissolved();
  is_dissolved_ = value;
}

// repeated int32 repertory_cards = 60;
inline int AckTableInfo::repertory_cards_size() const {
  return repertory_cards_.size();
}
inline void AckTableInfo::clear_repertory_cards() {
  repertory_cards_.Clear();
}
inline ::google::protobuf::int32 AckTableInfo::repertory_cards(int index) const {
  return repertory_cards_.Get(index);
}
inline void AckTableInfo::set_repertory_cards(int index, ::google::protobuf::int32 value) {
  repertory_cards_.Set(index, value);
}
inline void AckTableInfo::add_repertory_cards(::google::protobuf::int32 value) {
  repertory_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckTableInfo::repertory_cards() const {
  return repertory_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckTableInfo::mutable_repertory_cards() {
  return &repertory_cards_;
}

// repeated int32 weave_huxi = 61;
inline int AckTableInfo::weave_huxi_size() const {
  return weave_huxi_.size();
}
inline void AckTableInfo::clear_weave_huxi() {
  weave_huxi_.Clear();
}
inline ::google::protobuf::int32 AckTableInfo::weave_huxi(int index) const {
  return weave_huxi_.Get(index);
}
inline void AckTableInfo::set_weave_huxi(int index, ::google::protobuf::int32 value) {
  weave_huxi_.Set(index, value);
}
inline void AckTableInfo::add_weave_huxi(::google::protobuf::int32 value) {
  weave_huxi_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckTableInfo::weave_huxi() const {
  return weave_huxi_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckTableInfo::mutable_weave_huxi() {
  return &weave_huxi_;
}

// repeated int32 show_huxi = 62;
inline int AckTableInfo::show_huxi_size() const {
  return show_huxi_.size();
}
inline void AckTableInfo::clear_show_huxi() {
  show_huxi_.Clear();
}
inline ::google::protobuf::int32 AckTableInfo::show_huxi(int index) const {
  return show_huxi_.Get(index);
}
inline void AckTableInfo::set_show_huxi(int index, ::google::protobuf::int32 value) {
  show_huxi_.Set(index, value);
}
inline void AckTableInfo::add_show_huxi(::google::protobuf::int32 value) {
  show_huxi_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckTableInfo::show_huxi() const {
  return show_huxi_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckTableInfo::mutable_show_huxi() {
  return &show_huxi_;
}

// repeated int32 out_count = 64;
inline int AckTableInfo::out_count_size() const {
  return out_count_.size();
}
inline void AckTableInfo::clear_out_count() {
  out_count_.Clear();
}
inline ::google::protobuf::int32 AckTableInfo::out_count(int index) const {
  return out_count_.Get(index);
}
inline void AckTableInfo::set_out_count(int index, ::google::protobuf::int32 value) {
  out_count_.Set(index, value);
}
inline void AckTableInfo::add_out_count(::google::protobuf::int32 value) {
  out_count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckTableInfo::out_count() const {
  return out_count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckTableInfo::mutable_out_count() {
  return &out_count_;
}

// repeated int32 cur_card_huxi = 65;
inline int AckTableInfo::cur_card_huxi_size() const {
  return cur_card_huxi_.size();
}
inline void AckTableInfo::clear_cur_card_huxi() {
  cur_card_huxi_.Clear();
}
inline ::google::protobuf::int32 AckTableInfo::cur_card_huxi(int index) const {
  return cur_card_huxi_.Get(index);
}
inline void AckTableInfo::set_cur_card_huxi(int index, ::google::protobuf::int32 value) {
  cur_card_huxi_.Set(index, value);
}
inline void AckTableInfo::add_cur_card_huxi(::google::protobuf::int32 value) {
  cur_card_huxi_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckTableInfo::cur_card_huxi() const {
  return cur_card_huxi_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckTableInfo::mutable_cur_card_huxi() {
  return &cur_card_huxi_;
}

// optional bool dispatch_hu = 70;
inline bool AckTableInfo::has_dispatch_hu() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void AckTableInfo::set_has_dispatch_hu() {
  _has_bits_[1] |= 0x00000400u;
}
inline void AckTableInfo::clear_has_dispatch_hu() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void AckTableInfo::clear_dispatch_hu() {
  dispatch_hu_ = false;
  clear_has_dispatch_hu();
}
inline bool AckTableInfo::dispatch_hu() const {
  return dispatch_hu_;
}
inline void AckTableInfo::set_dispatch_hu(bool value) {
  set_has_dispatch_hu();
  dispatch_hu_ = value;
}

// optional int32 banker_card = 80;
inline bool AckTableInfo::has_banker_card() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void AckTableInfo::set_has_banker_card() {
  _has_bits_[1] |= 0x00000800u;
}
inline void AckTableInfo::clear_has_banker_card() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void AckTableInfo::clear_banker_card() {
  banker_card_ = 0;
  clear_has_banker_card();
}
inline ::google::protobuf::int32 AckTableInfo::banker_card() const {
  return banker_card_;
}
inline void AckTableInfo::set_banker_card(::google::protobuf::int32 value) {
  set_has_banker_card();
  banker_card_ = value;
}

// repeated bool user_responses = 81;
inline int AckTableInfo::user_responses_size() const {
  return user_responses_.size();
}
inline void AckTableInfo::clear_user_responses() {
  user_responses_.Clear();
}
inline bool AckTableInfo::user_responses(int index) const {
  return user_responses_.Get(index);
}
inline void AckTableInfo::set_user_responses(int index, bool value) {
  user_responses_.Set(index, value);
}
inline void AckTableInfo::add_user_responses(bool value) {
  user_responses_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
AckTableInfo::user_responses() const {
  return user_responses_;
}
inline ::google::protobuf::RepeatedField< bool >*
AckTableInfo::mutable_user_responses() {
  return &user_responses_;
}

// repeated int32 user_actions = 82;
inline int AckTableInfo::user_actions_size() const {
  return user_actions_.size();
}
inline void AckTableInfo::clear_user_actions() {
  user_actions_.Clear();
}
inline ::google::protobuf::int32 AckTableInfo::user_actions(int index) const {
  return user_actions_.Get(index);
}
inline void AckTableInfo::set_user_actions(int index, ::google::protobuf::int32 value) {
  user_actions_.Set(index, value);
}
inline void AckTableInfo::add_user_actions(::google::protobuf::int32 value) {
  user_actions_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckTableInfo::user_actions() const {
  return user_actions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckTableInfo::mutable_user_actions() {
  return &user_actions_;
}

// repeated int32 user_prerform = 83;
inline int AckTableInfo::user_prerform_size() const {
  return user_prerform_.size();
}
inline void AckTableInfo::clear_user_prerform() {
  user_prerform_.Clear();
}
inline ::google::protobuf::int32 AckTableInfo::user_prerform(int index) const {
  return user_prerform_.Get(index);
}
inline void AckTableInfo::set_user_prerform(int index, ::google::protobuf::int32 value) {
  user_prerform_.Set(index, value);
}
inline void AckTableInfo::add_user_prerform(::google::protobuf::int32 value) {
  user_prerform_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckTableInfo::user_prerform() const {
  return user_prerform_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckTableInfo::mutable_user_prerform() {
  return &user_prerform_;
}

// optional bool is_tianhu_show = 92;
inline bool AckTableInfo::has_is_tianhu_show() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void AckTableInfo::set_has_is_tianhu_show() {
  _has_bits_[1] |= 0x00008000u;
}
inline void AckTableInfo::clear_has_is_tianhu_show() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void AckTableInfo::clear_is_tianhu_show() {
  is_tianhu_show_ = false;
  clear_has_is_tianhu_show();
}
inline bool AckTableInfo::is_tianhu_show() const {
  return is_tianhu_show_;
}
inline void AckTableInfo::set_is_tianhu_show(bool value) {
  set_has_is_tianhu_show();
  is_tianhu_show_ = value;
}

// optional bool already_resp = 94;
inline bool AckTableInfo::has_already_resp() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void AckTableInfo::set_has_already_resp() {
  _has_bits_[1] |= 0x00010000u;
}
inline void AckTableInfo::clear_has_already_resp() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void AckTableInfo::clear_already_resp() {
  already_resp_ = false;
  clear_has_already_resp();
}
inline bool AckTableInfo::already_resp() const {
  return already_resp_;
}
inline void AckTableInfo::set_already_resp(bool value) {
  set_has_already_resp();
  already_resp_ = value;
}

// optional int32 current_num = 105;
inline bool AckTableInfo::has_current_num() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void AckTableInfo::set_has_current_num() {
  _has_bits_[1] |= 0x00020000u;
}
inline void AckTableInfo::clear_has_current_num() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void AckTableInfo::clear_current_num() {
  current_num_ = 0;
  clear_has_current_num();
}
inline ::google::protobuf::int32 AckTableInfo::current_num() const {
  return current_num_;
}
inline void AckTableInfo::set_current_num(::google::protobuf::int32 value) {
  set_has_current_num();
  current_num_ = value;
}

// optional bytes innings = 106;
inline bool AckTableInfo::has_innings() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void AckTableInfo::set_has_innings() {
  _has_bits_[1] |= 0x00040000u;
}
inline void AckTableInfo::clear_has_innings() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void AckTableInfo::clear_innings() {
  if (innings_ != &::google::protobuf::internal::kEmptyString) {
    innings_->clear();
  }
  clear_has_innings();
}
inline const ::std::string& AckTableInfo::innings() const {
  return *innings_;
}
inline void AckTableInfo::set_innings(const ::std::string& value) {
  set_has_innings();
  if (innings_ == &::google::protobuf::internal::kEmptyString) {
    innings_ = new ::std::string;
  }
  innings_->assign(value);
}
inline void AckTableInfo::set_innings(const char* value) {
  set_has_innings();
  if (innings_ == &::google::protobuf::internal::kEmptyString) {
    innings_ = new ::std::string;
  }
  innings_->assign(value);
}
inline void AckTableInfo::set_innings(const void* value, size_t size) {
  set_has_innings();
  if (innings_ == &::google::protobuf::internal::kEmptyString) {
    innings_ = new ::std::string;
  }
  innings_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckTableInfo::mutable_innings() {
  set_has_innings();
  if (innings_ == &::google::protobuf::internal::kEmptyString) {
    innings_ = new ::std::string;
  }
  return innings_;
}
inline ::std::string* AckTableInfo::release_innings() {
  clear_has_innings();
  if (innings_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = innings_;
    innings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckTableInfo::set_allocated_innings(::std::string* innings) {
  if (innings_ != &::google::protobuf::internal::kEmptyString) {
    delete innings_;
  }
  if (innings) {
    set_has_innings();
    innings_ = innings;
  } else {
    clear_has_innings();
    innings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes video_str = 107;
inline bool AckTableInfo::has_video_str() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void AckTableInfo::set_has_video_str() {
  _has_bits_[1] |= 0x00080000u;
}
inline void AckTableInfo::clear_has_video_str() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void AckTableInfo::clear_video_str() {
  if (video_str_ != &::google::protobuf::internal::kEmptyString) {
    video_str_->clear();
  }
  clear_has_video_str();
}
inline const ::std::string& AckTableInfo::video_str() const {
  return *video_str_;
}
inline void AckTableInfo::set_video_str(const ::std::string& value) {
  set_has_video_str();
  if (video_str_ == &::google::protobuf::internal::kEmptyString) {
    video_str_ = new ::std::string;
  }
  video_str_->assign(value);
}
inline void AckTableInfo::set_video_str(const char* value) {
  set_has_video_str();
  if (video_str_ == &::google::protobuf::internal::kEmptyString) {
    video_str_ = new ::std::string;
  }
  video_str_->assign(value);
}
inline void AckTableInfo::set_video_str(const void* value, size_t size) {
  set_has_video_str();
  if (video_str_ == &::google::protobuf::internal::kEmptyString) {
    video_str_ = new ::std::string;
  }
  video_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckTableInfo::mutable_video_str() {
  set_has_video_str();
  if (video_str_ == &::google::protobuf::internal::kEmptyString) {
    video_str_ = new ::std::string;
  }
  return video_str_;
}
inline ::std::string* AckTableInfo::release_video_str() {
  clear_has_video_str();
  if (video_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = video_str_;
    video_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckTableInfo::set_allocated_video_str(::std::string* video_str) {
  if (video_str_ != &::google::protobuf::internal::kEmptyString) {
    delete video_str_;
  }
  if (video_str) {
    set_has_video_str();
    video_str_ = video_str;
  } else {
    clear_has_video_str();
    video_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 first_banker_user = 114;
inline bool AckTableInfo::has_first_banker_user() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void AckTableInfo::set_has_first_banker_user() {
  _has_bits_[1] |= 0x00100000u;
}
inline void AckTableInfo::clear_has_first_banker_user() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void AckTableInfo::clear_first_banker_user() {
  first_banker_user_ = 0;
  clear_has_first_banker_user();
}
inline ::google::protobuf::int32 AckTableInfo::first_banker_user() const {
  return first_banker_user_;
}
inline void AckTableInfo::set_first_banker_user(::google::protobuf::int32 value) {
  set_has_first_banker_user();
  first_banker_user_ = value;
}

// repeated .proto.game.tagGain gains = 117;
inline int AckTableInfo::gains_size() const {
  return gains_.size();
}
inline void AckTableInfo::clear_gains() {
  gains_.Clear();
}
inline const ::proto::game::tagGain& AckTableInfo::gains(int index) const {
  return gains_.Get(index);
}
inline ::proto::game::tagGain* AckTableInfo::mutable_gains(int index) {
  return gains_.Mutable(index);
}
inline ::proto::game::tagGain* AckTableInfo::add_gains() {
  return gains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagGain >&
AckTableInfo::gains() const {
  return gains_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagGain >*
AckTableInfo::mutable_gains() {
  return &gains_;
}

// repeated int32 win_weaves = 118;
inline int AckTableInfo::win_weaves_size() const {
  return win_weaves_.size();
}
inline void AckTableInfo::clear_win_weaves() {
  win_weaves_.Clear();
}
inline ::google::protobuf::int32 AckTableInfo::win_weaves(int index) const {
  return win_weaves_.Get(index);
}
inline void AckTableInfo::set_win_weaves(int index, ::google::protobuf::int32 value) {
  win_weaves_.Set(index, value);
}
inline void AckTableInfo::add_win_weaves(::google::protobuf::int32 value) {
  win_weaves_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckTableInfo::win_weaves() const {
  return win_weaves_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckTableInfo::mutable_win_weaves() {
  return &win_weaves_;
}

// -------------------------------------------------------------------

// AckGameStart

// required int32 banker = 1;
inline bool AckGameStart::has_banker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGameStart::set_has_banker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGameStart::clear_has_banker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGameStart::clear_banker() {
  banker_ = 0;
  clear_has_banker();
}
inline ::google::protobuf::int32 AckGameStart::banker() const {
  return banker_;
}
inline void AckGameStart::set_banker(::google::protobuf::int32 value) {
  set_has_banker();
  banker_ = value;
}

// optional int32 banker_card = 2;
inline bool AckGameStart::has_banker_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameStart::set_has_banker_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameStart::clear_has_banker_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameStart::clear_banker_card() {
  banker_card_ = 0;
  clear_has_banker_card();
}
inline ::google::protobuf::int32 AckGameStart::banker_card() const {
  return banker_card_;
}
inline void AckGameStart::set_banker_card(::google::protobuf::int32 value) {
  set_has_banker_card();
  banker_card_ = value;
}

// optional int32 left_card_count = 3;
inline bool AckGameStart::has_left_card_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckGameStart::set_has_left_card_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckGameStart::clear_has_left_card_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckGameStart::clear_left_card_count() {
  left_card_count_ = 0;
  clear_has_left_card_count();
}
inline ::google::protobuf::int32 AckGameStart::left_card_count() const {
  return left_card_count_;
}
inline void AckGameStart::set_left_card_count(::google::protobuf::int32 value) {
  set_has_left_card_count();
  left_card_count_ = value;
}

// repeated .proto.game.tagHandCards hand_cards = 4;
inline int AckGameStart::hand_cards_size() const {
  return hand_cards_.size();
}
inline void AckGameStart::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::proto::game::tagHandCards& AckGameStart::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::proto::game::tagHandCards* AckGameStart::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::proto::game::tagHandCards* AckGameStart::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
AckGameStart::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
AckGameStart::mutable_hand_cards() {
  return &hand_cards_;
}

// repeated .proto.game.tagPlayers players = 5;
inline int AckGameStart::players_size() const {
  return players_.size();
}
inline void AckGameStart::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& AckGameStart::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* AckGameStart::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* AckGameStart::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
AckGameStart::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
AckGameStart::mutable_players() {
  return &players_;
}

// optional int32 total_huxi = 6;
inline bool AckGameStart::has_total_huxi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckGameStart::set_has_total_huxi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckGameStart::clear_has_total_huxi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckGameStart::clear_total_huxi() {
  total_huxi_ = 0;
  clear_has_total_huxi();
}
inline ::google::protobuf::int32 AckGameStart::total_huxi() const {
  return total_huxi_;
}
inline void AckGameStart::set_total_huxi(::google::protobuf::int32 value) {
  set_has_total_huxi();
  total_huxi_ = value;
}

// repeated int32 listen_cards = 7;
inline int AckGameStart::listen_cards_size() const {
  return listen_cards_.size();
}
inline void AckGameStart::clear_listen_cards() {
  listen_cards_.Clear();
}
inline ::google::protobuf::int32 AckGameStart::listen_cards(int index) const {
  return listen_cards_.Get(index);
}
inline void AckGameStart::set_listen_cards(int index, ::google::protobuf::int32 value) {
  listen_cards_.Set(index, value);
}
inline void AckGameStart::add_listen_cards(::google::protobuf::int32 value) {
  listen_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameStart::listen_cards() const {
  return listen_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameStart::mutable_listen_cards() {
  return &listen_cards_;
}

// optional int32 current_num = 8;
inline bool AckGameStart::has_current_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckGameStart::set_has_current_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckGameStart::clear_has_current_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckGameStart::clear_current_num() {
  current_num_ = 0;
  clear_has_current_num();
}
inline ::google::protobuf::int32 AckGameStart::current_num() const {
  return current_num_;
}
inline void AckGameStart::set_current_num(::google::protobuf::int32 value) {
  set_has_current_num();
  current_num_ = value;
}

// -------------------------------------------------------------------

// AckOperateNotify

// optional int32 operate_type = 1;
inline bool AckOperateNotify::has_operate_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckOperateNotify::set_has_operate_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckOperateNotify::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckOperateNotify::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 AckOperateNotify::operate_type() const {
  return operate_type_;
}
inline void AckOperateNotify::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// optional int32 operate_card = 2;
inline bool AckOperateNotify::has_operate_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckOperateNotify::set_has_operate_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckOperateNotify::clear_has_operate_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckOperateNotify::clear_operate_card() {
  operate_card_ = 0;
  clear_has_operate_card();
}
inline ::google::protobuf::int32 AckOperateNotify::operate_card() const {
  return operate_card_;
}
inline void AckOperateNotify::set_operate_card(::google::protobuf::int32 value) {
  set_has_operate_card();
  operate_card_ = value;
}

// repeated int32 win_weaves = 3;
inline int AckOperateNotify::win_weaves_size() const {
  return win_weaves_.size();
}
inline void AckOperateNotify::clear_win_weaves() {
  win_weaves_.Clear();
}
inline ::google::protobuf::int32 AckOperateNotify::win_weaves(int index) const {
  return win_weaves_.Get(index);
}
inline void AckOperateNotify::set_win_weaves(int index, ::google::protobuf::int32 value) {
  win_weaves_.Set(index, value);
}
inline void AckOperateNotify::add_win_weaves(::google::protobuf::int32 value) {
  win_weaves_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckOperateNotify::win_weaves() const {
  return win_weaves_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckOperateNotify::mutable_win_weaves() {
  return &win_weaves_;
}

// optional int32 off_count = 4;
inline bool AckOperateNotify::has_off_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckOperateNotify::set_has_off_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckOperateNotify::clear_has_off_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckOperateNotify::clear_off_count() {
  off_count_ = 0;
  clear_has_off_count();
}
inline ::google::protobuf::int32 AckOperateNotify::off_count() const {
  return off_count_;
}
inline void AckOperateNotify::set_off_count(::google::protobuf::int32 value) {
  set_has_off_count();
  off_count_ = value;
}

// -------------------------------------------------------------------

// ReqOperateCard

// required int32 operate_type = 1;
inline bool ReqOperateCard::has_operate_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOperateCard::set_has_operate_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOperateCard::clear_has_operate_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOperateCard::clear_operate_type() {
  operate_type_ = 0;
  clear_has_operate_type();
}
inline ::google::protobuf::int32 ReqOperateCard::operate_type() const {
  return operate_type_;
}
inline void ReqOperateCard::set_operate_type(::google::protobuf::int32 value) {
  set_has_operate_type();
  operate_type_ = value;
}

// repeated int32 win_weaves = 2;
inline int ReqOperateCard::win_weaves_size() const {
  return win_weaves_.size();
}
inline void ReqOperateCard::clear_win_weaves() {
  win_weaves_.Clear();
}
inline ::google::protobuf::int32 ReqOperateCard::win_weaves(int index) const {
  return win_weaves_.Get(index);
}
inline void ReqOperateCard::set_win_weaves(int index, ::google::protobuf::int32 value) {
  win_weaves_.Set(index, value);
}
inline void ReqOperateCard::add_win_weaves(::google::protobuf::int32 value) {
  win_weaves_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqOperateCard::win_weaves() const {
  return win_weaves_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqOperateCard::mutable_win_weaves() {
  return &win_weaves_;
}

// -------------------------------------------------------------------

// AckOutNotify

// required int32 seatid = 1;
inline bool AckOutNotify::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckOutNotify::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckOutNotify::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckOutNotify::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckOutNotify::seatid() const {
  return seatid_;
}
inline void AckOutNotify::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// repeated int32 win_weaves = 3;
inline int AckOutNotify::win_weaves_size() const {
  return win_weaves_.size();
}
inline void AckOutNotify::clear_win_weaves() {
  win_weaves_.Clear();
}
inline ::google::protobuf::int32 AckOutNotify::win_weaves(int index) const {
  return win_weaves_.Get(index);
}
inline void AckOutNotify::set_win_weaves(int index, ::google::protobuf::int32 value) {
  win_weaves_.Set(index, value);
}
inline void AckOutNotify::add_win_weaves(::google::protobuf::int32 value) {
  win_weaves_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckOutNotify::win_weaves() const {
  return win_weaves_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckOutNotify::mutable_win_weaves() {
  return &win_weaves_;
}

// optional bool is_out_card = 4;
inline bool AckOutNotify::has_is_out_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckOutNotify::set_has_is_out_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckOutNotify::clear_has_is_out_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckOutNotify::clear_is_out_card() {
  is_out_card_ = false;
  clear_has_is_out_card();
}
inline bool AckOutNotify::is_out_card() const {
  return is_out_card_;
}
inline void AckOutNotify::set_is_out_card(bool value) {
  set_has_is_out_card();
  is_out_card_ = value;
}

// optional int32 off_count = 5;
inline bool AckOutNotify::has_off_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckOutNotify::set_has_off_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckOutNotify::clear_has_off_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckOutNotify::clear_off_count() {
  off_count_ = 0;
  clear_has_off_count();
}
inline ::google::protobuf::int32 AckOutNotify::off_count() const {
  return off_count_;
}
inline void AckOutNotify::set_off_count(::google::protobuf::int32 value) {
  set_has_off_count();
  off_count_ = value;
}

// optional bool can_out_card = 6;
inline bool AckOutNotify::has_can_out_card() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckOutNotify::set_has_can_out_card() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckOutNotify::clear_has_can_out_card() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckOutNotify::clear_can_out_card() {
  can_out_card_ = false;
  clear_has_can_out_card();
}
inline bool AckOutNotify::can_out_card() const {
  return can_out_card_;
}
inline void AckOutNotify::set_can_out_card(bool value) {
  set_has_can_out_card();
  can_out_card_ = value;
}

// -------------------------------------------------------------------

// AckCircleEnd

// required int32 seatid = 1;
inline bool AckCircleEnd::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckCircleEnd::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckCircleEnd::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckCircleEnd::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckCircleEnd::seatid() const {
  return seatid_;
}
inline void AckCircleEnd::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional bool is_circle_end = 2;
inline bool AckCircleEnd::has_is_circle_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckCircleEnd::set_has_is_circle_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckCircleEnd::clear_has_is_circle_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckCircleEnd::clear_is_circle_end() {
  is_circle_end_ = false;
  clear_has_is_circle_end();
}
inline bool AckCircleEnd::is_circle_end() const {
  return is_circle_end_;
}
inline void AckCircleEnd::set_is_circle_end(bool value) {
  set_has_is_circle_end();
  is_circle_end_ = value;
}

// repeated .proto.game.tagWeaveCards user_win_weaves = 3;
inline int AckCircleEnd::user_win_weaves_size() const {
  return user_win_weaves_.size();
}
inline void AckCircleEnd::clear_user_win_weaves() {
  user_win_weaves_.Clear();
}
inline const ::proto::game::tagWeaveCards& AckCircleEnd::user_win_weaves(int index) const {
  return user_win_weaves_.Get(index);
}
inline ::proto::game::tagWeaveCards* AckCircleEnd::mutable_user_win_weaves(int index) {
  return user_win_weaves_.Mutable(index);
}
inline ::proto::game::tagWeaveCards* AckCircleEnd::add_user_win_weaves() {
  return user_win_weaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
AckCircleEnd::user_win_weaves() const {
  return user_win_weaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
AckCircleEnd::mutable_user_win_weaves() {
  return &user_win_weaves_;
}

// -------------------------------------------------------------------

// ReqOutCard

// repeated int32 out_card = 1;
inline int ReqOutCard::out_card_size() const {
  return out_card_.size();
}
inline void ReqOutCard::clear_out_card() {
  out_card_.Clear();
}
inline ::google::protobuf::int32 ReqOutCard::out_card(int index) const {
  return out_card_.Get(index);
}
inline void ReqOutCard::set_out_card(int index, ::google::protobuf::int32 value) {
  out_card_.Set(index, value);
}
inline void ReqOutCard::add_out_card(::google::protobuf::int32 value) {
  out_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqOutCard::out_card() const {
  return out_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqOutCard::mutable_out_card() {
  return &out_card_;
}

// repeated int32 row = 2;
inline int ReqOutCard::row_size() const {
  return row_.size();
}
inline void ReqOutCard::clear_row() {
  row_.Clear();
}
inline ::google::protobuf::int32 ReqOutCard::row(int index) const {
  return row_.Get(index);
}
inline void ReqOutCard::set_row(int index, ::google::protobuf::int32 value) {
  row_.Set(index, value);
}
inline void ReqOutCard::add_row(::google::protobuf::int32 value) {
  row_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqOutCard::row() const {
  return row_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqOutCard::mutable_row() {
  return &row_;
}

// repeated int32 col = 3;
inline int ReqOutCard::col_size() const {
  return col_.size();
}
inline void ReqOutCard::clear_col() {
  col_.Clear();
}
inline ::google::protobuf::int32 ReqOutCard::col(int index) const {
  return col_.Get(index);
}
inline void ReqOutCard::set_col(int index, ::google::protobuf::int32 value) {
  col_.Set(index, value);
}
inline void ReqOutCard::add_col(::google::protobuf::int32 value) {
  col_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ReqOutCard::col() const {
  return col_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ReqOutCard::mutable_col() {
  return &col_;
}

// -------------------------------------------------------------------

// AckOutCard

// repeated int32 out_card = 1;
inline int AckOutCard::out_card_size() const {
  return out_card_.size();
}
inline void AckOutCard::clear_out_card() {
  out_card_.Clear();
}
inline ::google::protobuf::int32 AckOutCard::out_card(int index) const {
  return out_card_.Get(index);
}
inline void AckOutCard::set_out_card(int index, ::google::protobuf::int32 value) {
  out_card_.Set(index, value);
}
inline void AckOutCard::add_out_card(::google::protobuf::int32 value) {
  out_card_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckOutCard::out_card() const {
  return out_card_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckOutCard::mutable_out_card() {
  return &out_card_;
}

// required int32 seatid = 2;
inline bool AckOutCard::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckOutCard::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckOutCard::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckOutCard::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckOutCard::seatid() const {
  return seatid_;
}
inline void AckOutCard::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// repeated .proto.game.tagHandCards hand_cards = 4;
inline int AckOutCard::hand_cards_size() const {
  return hand_cards_.size();
}
inline void AckOutCard::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::proto::game::tagHandCards& AckOutCard::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::proto::game::tagHandCards* AckOutCard::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::proto::game::tagHandCards* AckOutCard::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
AckOutCard::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
AckOutCard::mutable_hand_cards() {
  return &hand_cards_;
}

// optional int32 off_count = 6;
inline bool AckOutCard::has_off_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckOutCard::set_has_off_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckOutCard::clear_has_off_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckOutCard::clear_off_count() {
  off_count_ = 0;
  clear_has_off_count();
}
inline ::google::protobuf::int32 AckOutCard::off_count() const {
  return off_count_;
}
inline void AckOutCard::set_off_count(::google::protobuf::int32 value) {
  set_has_off_count();
  off_count_ = value;
}

// optional int32 out_limit = 7;
inline bool AckOutCard::has_out_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckOutCard::set_has_out_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckOutCard::clear_has_out_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckOutCard::clear_out_limit() {
  out_limit_ = 0;
  clear_has_out_limit();
}
inline ::google::protobuf::int32 AckOutCard::out_limit() const {
  return out_limit_;
}
inline void AckOutCard::set_out_limit(::google::protobuf::int32 value) {
  set_has_out_limit();
  out_limit_ = value;
}

// repeated .proto.game.tagWeaveCards user_win_weaves = 8;
inline int AckOutCard::user_win_weaves_size() const {
  return user_win_weaves_.size();
}
inline void AckOutCard::clear_user_win_weaves() {
  user_win_weaves_.Clear();
}
inline const ::proto::game::tagWeaveCards& AckOutCard::user_win_weaves(int index) const {
  return user_win_weaves_.Get(index);
}
inline ::proto::game::tagWeaveCards* AckOutCard::mutable_user_win_weaves(int index) {
  return user_win_weaves_.Mutable(index);
}
inline ::proto::game::tagWeaveCards* AckOutCard::add_user_win_weaves() {
  return user_win_weaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
AckOutCard::user_win_weaves() const {
  return user_win_weaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
AckOutCard::mutable_user_win_weaves() {
  return &user_win_weaves_;
}

// optional bool is_valid = 9;
inline bool AckOutCard::has_is_valid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckOutCard::set_has_is_valid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckOutCard::clear_has_is_valid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckOutCard::clear_is_valid() {
  is_valid_ = false;
  clear_has_is_valid();
}
inline bool AckOutCard::is_valid() const {
  return is_valid_;
}
inline void AckOutCard::set_is_valid(bool value) {
  set_has_is_valid();
  is_valid_ = value;
}

// -------------------------------------------------------------------

// ReqChangeCard

// repeated .proto.game.tagHandCards hand_cards = 1;
inline int ReqChangeCard::hand_cards_size() const {
  return hand_cards_.size();
}
inline void ReqChangeCard::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::proto::game::tagHandCards& ReqChangeCard::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::proto::game::tagHandCards* ReqChangeCard::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::proto::game::tagHandCards* ReqChangeCard::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
ReqChangeCard::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
ReqChangeCard::mutable_hand_cards() {
  return &hand_cards_;
}

// -------------------------------------------------------------------

// AckChangeCard

// repeated .proto.game.tagHandCards hand_cards = 1;
inline int AckChangeCard::hand_cards_size() const {
  return hand_cards_.size();
}
inline void AckChangeCard::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::proto::game::tagHandCards& AckChangeCard::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::proto::game::tagHandCards* AckChangeCard::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::proto::game::tagHandCards* AckChangeCard::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
AckChangeCard::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
AckChangeCard::mutable_hand_cards() {
  return &hand_cards_;
}

// optional int32 total_huxi = 2;
inline bool AckChangeCard::has_total_huxi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckChangeCard::set_has_total_huxi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckChangeCard::clear_has_total_huxi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckChangeCard::clear_total_huxi() {
  total_huxi_ = 0;
  clear_has_total_huxi();
}
inline ::google::protobuf::int32 AckChangeCard::total_huxi() const {
  return total_huxi_;
}
inline void AckChangeCard::set_total_huxi(::google::protobuf::int32 value) {
  set_has_total_huxi();
  total_huxi_ = value;
}

// -------------------------------------------------------------------

// AckUpdateCard

// repeated .proto.game.tagHandCards hand_cards = 1;
inline int AckUpdateCard::hand_cards_size() const {
  return hand_cards_.size();
}
inline void AckUpdateCard::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::proto::game::tagHandCards& AckUpdateCard::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::proto::game::tagHandCards* AckUpdateCard::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::proto::game::tagHandCards* AckUpdateCard::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
AckUpdateCard::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
AckUpdateCard::mutable_hand_cards() {
  return &hand_cards_;
}

// optional int32 total_huxi = 2;
inline bool AckUpdateCard::has_total_huxi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUpdateCard::set_has_total_huxi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUpdateCard::clear_has_total_huxi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUpdateCard::clear_total_huxi() {
  total_huxi_ = 0;
  clear_has_total_huxi();
}
inline ::google::protobuf::int32 AckUpdateCard::total_huxi() const {
  return total_huxi_;
}
inline void AckUpdateCard::set_total_huxi(::google::protobuf::int32 value) {
  set_has_total_huxi();
  total_huxi_ = value;
}

// repeated int32 listen_cards = 3;
inline int AckUpdateCard::listen_cards_size() const {
  return listen_cards_.size();
}
inline void AckUpdateCard::clear_listen_cards() {
  listen_cards_.Clear();
}
inline ::google::protobuf::int32 AckUpdateCard::listen_cards(int index) const {
  return listen_cards_.Get(index);
}
inline void AckUpdateCard::set_listen_cards(int index, ::google::protobuf::int32 value) {
  listen_cards_.Set(index, value);
}
inline void AckUpdateCard::add_listen_cards(::google::protobuf::int32 value) {
  listen_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUpdateCard::listen_cards() const {
  return listen_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUpdateCard::mutable_listen_cards() {
  return &listen_cards_;
}

// -------------------------------------------------------------------

// AckUpdateAbandon

// required int32 seatid = 1;
inline bool AckUpdateAbandon::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUpdateAbandon::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUpdateAbandon::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUpdateAbandon::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckUpdateAbandon::seatid() const {
  return seatid_;
}
inline void AckUpdateAbandon::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 card = 2;
inline bool AckUpdateAbandon::has_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUpdateAbandon::set_has_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUpdateAbandon::clear_has_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUpdateAbandon::clear_card() {
  card_ = 0;
  clear_has_card();
}
inline ::google::protobuf::int32 AckUpdateAbandon::card() const {
  return card_;
}
inline void AckUpdateAbandon::set_card(::google::protobuf::int32 value) {
  set_has_card();
  card_ = value;
}

// repeated int32 abandon_cards = 3;
inline int AckUpdateAbandon::abandon_cards_size() const {
  return abandon_cards_.size();
}
inline void AckUpdateAbandon::clear_abandon_cards() {
  abandon_cards_.Clear();
}
inline ::google::protobuf::int32 AckUpdateAbandon::abandon_cards(int index) const {
  return abandon_cards_.Get(index);
}
inline void AckUpdateAbandon::set_abandon_cards(int index, ::google::protobuf::int32 value) {
  abandon_cards_.Set(index, value);
}
inline void AckUpdateAbandon::add_abandon_cards(::google::protobuf::int32 value) {
  abandon_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUpdateAbandon::abandon_cards() const {
  return abandon_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUpdateAbandon::mutable_abandon_cards() {
  return &abandon_cards_;
}

// optional int32 off_count = 4;
inline bool AckUpdateAbandon::has_off_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckUpdateAbandon::set_has_off_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckUpdateAbandon::clear_has_off_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckUpdateAbandon::clear_off_count() {
  off_count_ = 0;
  clear_has_off_count();
}
inline ::google::protobuf::int32 AckUpdateAbandon::off_count() const {
  return off_count_;
}
inline void AckUpdateAbandon::set_off_count(::google::protobuf::int32 value) {
  set_has_off_count();
  off_count_ = value;
}

// repeated int32 abandon_type = 5;
inline int AckUpdateAbandon::abandon_type_size() const {
  return abandon_type_.size();
}
inline void AckUpdateAbandon::clear_abandon_type() {
  abandon_type_.Clear();
}
inline ::google::protobuf::int32 AckUpdateAbandon::abandon_type(int index) const {
  return abandon_type_.Get(index);
}
inline void AckUpdateAbandon::set_abandon_type(int index, ::google::protobuf::int32 value) {
  abandon_type_.Set(index, value);
}
inline void AckUpdateAbandon::add_abandon_type(::google::protobuf::int32 value) {
  abandon_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckUpdateAbandon::abandon_type() const {
  return abandon_type_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckUpdateAbandon::mutable_abandon_type() {
  return &abandon_type_;
}

// -------------------------------------------------------------------

// tagFanInfo

// optional int32 fan_type = 1;
inline bool tagFanInfo::has_fan_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tagFanInfo::set_has_fan_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tagFanInfo::clear_has_fan_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tagFanInfo::clear_fan_type() {
  fan_type_ = 0;
  clear_has_fan_type();
}
inline ::google::protobuf::int32 tagFanInfo::fan_type() const {
  return fan_type_;
}
inline void tagFanInfo::set_fan_type(::google::protobuf::int32 value) {
  set_has_fan_type();
  fan_type_ = value;
}

// optional int32 fan_num = 2;
inline bool tagFanInfo::has_fan_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tagFanInfo::set_has_fan_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tagFanInfo::clear_has_fan_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tagFanInfo::clear_fan_num() {
  fan_num_ = 0;
  clear_has_fan_num();
}
inline ::google::protobuf::int32 tagFanInfo::fan_num() const {
  return fan_num_;
}
inline void tagFanInfo::set_fan_num(::google::protobuf::int32 value) {
  set_has_fan_num();
  fan_num_ = value;
}

// optional int32 fan_xi = 3;
inline bool tagFanInfo::has_fan_xi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tagFanInfo::set_has_fan_xi() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tagFanInfo::clear_has_fan_xi() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tagFanInfo::clear_fan_xi() {
  fan_xi_ = 0;
  clear_has_fan_xi();
}
inline ::google::protobuf::int32 tagFanInfo::fan_xi() const {
  return fan_xi_;
}
inline void tagFanInfo::set_fan_xi(::google::protobuf::int32 value) {
  set_has_fan_xi();
  fan_xi_ = value;
}

// -------------------------------------------------------------------

// AckGameEnd

// required int32 end_type = 1;
inline bool AckGameEnd::has_end_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGameEnd::set_has_end_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGameEnd::clear_has_end_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGameEnd::clear_end_type() {
  end_type_ = 0;
  clear_has_end_type();
}
inline ::google::protobuf::int32 AckGameEnd::end_type() const {
  return end_type_;
}
inline void AckGameEnd::set_end_type(::google::protobuf::int32 value) {
  set_has_end_type();
  end_type_ = value;
}

// optional int32 win_seatid = 2;
inline bool AckGameEnd::has_win_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameEnd::set_has_win_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameEnd::clear_has_win_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameEnd::clear_win_seatid() {
  win_seatid_ = 0;
  clear_has_win_seatid();
}
inline ::google::protobuf::int32 AckGameEnd::win_seatid() const {
  return win_seatid_;
}
inline void AckGameEnd::set_win_seatid(::google::protobuf::int32 value) {
  set_has_win_seatid();
  win_seatid_ = value;
}

// optional int32 hu_card = 3;
inline bool AckGameEnd::has_hu_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckGameEnd::set_has_hu_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckGameEnd::clear_has_hu_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckGameEnd::clear_hu_card() {
  hu_card_ = 0;
  clear_has_hu_card();
}
inline ::google::protobuf::int32 AckGameEnd::hu_card() const {
  return hu_card_;
}
inline void AckGameEnd::set_hu_card(::google::protobuf::int32 value) {
  set_has_hu_card();
  hu_card_ = value;
}

// repeated int32 left_cards = 4;
inline int AckGameEnd::left_cards_size() const {
  return left_cards_.size();
}
inline void AckGameEnd::clear_left_cards() {
  left_cards_.Clear();
}
inline ::google::protobuf::int32 AckGameEnd::left_cards(int index) const {
  return left_cards_.Get(index);
}
inline void AckGameEnd::set_left_cards(int index, ::google::protobuf::int32 value) {
  left_cards_.Set(index, value);
}
inline void AckGameEnd::add_left_cards(::google::protobuf::int32 value) {
  left_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckGameEnd::left_cards() const {
  return left_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckGameEnd::mutable_left_cards() {
  return &left_cards_;
}

// optional int32 total_huxi = 5;
inline bool AckGameEnd::has_total_huxi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckGameEnd::set_has_total_huxi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckGameEnd::clear_has_total_huxi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckGameEnd::clear_total_huxi() {
  total_huxi_ = 0;
  clear_has_total_huxi();
}
inline ::google::protobuf::int32 AckGameEnd::total_huxi() const {
  return total_huxi_;
}
inline void AckGameEnd::set_total_huxi(::google::protobuf::int32 value) {
  set_has_total_huxi();
  total_huxi_ = value;
}

// optional int32 hu_xis = 6;
inline bool AckGameEnd::has_hu_xis() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckGameEnd::set_has_hu_xis() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckGameEnd::clear_has_hu_xis() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckGameEnd::clear_hu_xis() {
  hu_xis_ = 0;
  clear_has_hu_xis();
}
inline ::google::protobuf::int32 AckGameEnd::hu_xis() const {
  return hu_xis_;
}
inline void AckGameEnd::set_hu_xis(::google::protobuf::int32 value) {
  set_has_hu_xis();
  hu_xis_ = value;
}

// optional int32 tuns = 7;
inline bool AckGameEnd::has_tuns() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckGameEnd::set_has_tuns() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckGameEnd::clear_has_tuns() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckGameEnd::clear_tuns() {
  tuns_ = 0;
  clear_has_tuns();
}
inline ::google::protobuf::int32 AckGameEnd::tuns() const {
  return tuns_;
}
inline void AckGameEnd::set_tuns(::google::protobuf::int32 value) {
  set_has_tuns();
  tuns_ = value;
}

// optional int32 fans = 8;
inline bool AckGameEnd::has_fans() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AckGameEnd::set_has_fans() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AckGameEnd::clear_has_fans() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AckGameEnd::clear_fans() {
  fans_ = 0;
  clear_has_fans();
}
inline ::google::protobuf::int32 AckGameEnd::fans() const {
  return fans_;
}
inline void AckGameEnd::set_fans(::google::protobuf::int32 value) {
  set_has_fans();
  fans_ = value;
}

// repeated .proto.game.tagFanInfo fan_info = 9;
inline int AckGameEnd::fan_info_size() const {
  return fan_info_.size();
}
inline void AckGameEnd::clear_fan_info() {
  fan_info_.Clear();
}
inline const ::proto::game::tagFanInfo& AckGameEnd::fan_info(int index) const {
  return fan_info_.Get(index);
}
inline ::proto::game::tagFanInfo* AckGameEnd::mutable_fan_info(int index) {
  return fan_info_.Mutable(index);
}
inline ::proto::game::tagFanInfo* AckGameEnd::add_fan_info() {
  return fan_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagFanInfo >&
AckGameEnd::fan_info() const {
  return fan_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagFanInfo >*
AckGameEnd::mutable_fan_info() {
  return &fan_info_;
}

// repeated .proto.game.tagWeaveCards weaves = 10;
inline int AckGameEnd::weaves_size() const {
  return weaves_.size();
}
inline void AckGameEnd::clear_weaves() {
  weaves_.Clear();
}
inline const ::proto::game::tagWeaveCards& AckGameEnd::weaves(int index) const {
  return weaves_.Get(index);
}
inline ::proto::game::tagWeaveCards* AckGameEnd::mutable_weaves(int index) {
  return weaves_.Mutable(index);
}
inline ::proto::game::tagWeaveCards* AckGameEnd::add_weaves() {
  return weaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
AckGameEnd::weaves() const {
  return weaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
AckGameEnd::mutable_weaves() {
  return &weaves_;
}

// repeated .proto.game.tagPlayers players = 11;
inline int AckGameEnd::players_size() const {
  return players_.size();
}
inline void AckGameEnd::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& AckGameEnd::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* AckGameEnd::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* AckGameEnd::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
AckGameEnd::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
AckGameEnd::mutable_players() {
  return &players_;
}

// optional int32 off_count = 12;
inline bool AckGameEnd::has_off_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AckGameEnd::set_has_off_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AckGameEnd::clear_has_off_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AckGameEnd::clear_off_count() {
  off_count_ = 0;
  clear_has_off_count();
}
inline ::google::protobuf::int32 AckGameEnd::off_count() const {
  return off_count_;
}
inline void AckGameEnd::set_off_count(::google::protobuf::int32 value) {
  set_has_off_count();
  off_count_ = value;
}

// optional bool dian_pao = 13;
inline bool AckGameEnd::has_dian_pao() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AckGameEnd::set_has_dian_pao() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AckGameEnd::clear_has_dian_pao() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AckGameEnd::clear_dian_pao() {
  dian_pao_ = false;
  clear_has_dian_pao();
}
inline bool AckGameEnd::dian_pao() const {
  return dian_pao_;
}
inline void AckGameEnd::set_dian_pao(bool value) {
  set_has_dian_pao();
  dian_pao_ = value;
}

// optional int32 dian_pao_user = 14;
inline bool AckGameEnd::has_dian_pao_user() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AckGameEnd::set_has_dian_pao_user() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AckGameEnd::clear_has_dian_pao_user() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AckGameEnd::clear_dian_pao_user() {
  dian_pao_user_ = 0;
  clear_has_dian_pao_user();
}
inline ::google::protobuf::int32 AckGameEnd::dian_pao_user() const {
  return dian_pao_user_;
}
inline void AckGameEnd::set_dian_pao_user(::google::protobuf::int32 value) {
  set_has_dian_pao_user();
  dian_pao_user_ = value;
}

// optional int32 current_cycle = 17;
inline bool AckGameEnd::has_current_cycle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AckGameEnd::set_has_current_cycle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AckGameEnd::clear_has_current_cycle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AckGameEnd::clear_current_cycle() {
  current_cycle_ = 0;
  clear_has_current_cycle();
}
inline ::google::protobuf::int32 AckGameEnd::current_cycle() const {
  return current_cycle_;
}
inline void AckGameEnd::set_current_cycle(::google::protobuf::int32 value) {
  set_has_current_cycle();
  current_cycle_ = value;
}

// -------------------------------------------------------------------

// AckGameStartFail

// required int32 vid = 1;
inline bool AckGameStartFail::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGameStartFail::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGameStartFail::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGameStartFail::clear_vid() {
  vid_ = 0;
  clear_has_vid();
}
inline ::google::protobuf::int32 AckGameStartFail::vid() const {
  return vid_;
}
inline void AckGameStartFail::set_vid(::google::protobuf::int32 value) {
  set_has_vid();
  vid_ = value;
}

// optional bytes roomid = 2;
inline bool AckGameStartFail::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGameStartFail::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGameStartFail::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGameStartFail::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& AckGameStartFail::roomid() const {
  return *roomid_;
}
inline void AckGameStartFail::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
}
inline void AckGameStartFail::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
}
inline void AckGameStartFail::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckGameStartFail::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  return roomid_;
}
inline ::std::string* AckGameStartFail::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckGameStartFail::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 can_start = 3;
inline bool AckGameStartFail::has_can_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckGameStartFail::set_has_can_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckGameStartFail::clear_has_can_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckGameStartFail::clear_can_start() {
  can_start_ = 0;
  clear_has_can_start();
}
inline ::google::protobuf::int32 AckGameStartFail::can_start() const {
  return can_start_;
}
inline void AckGameStartFail::set_can_start(::google::protobuf::int32 value) {
  set_has_can_start();
  can_start_ = value;
}

// optional int32 code = 4;
inline bool AckGameStartFail::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckGameStartFail::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckGameStartFail::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckGameStartFail::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckGameStartFail::code() const {
  return code_;
}
inline void AckGameStartFail::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional int32 ts = 5;
inline bool AckGameStartFail::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckGameStartFail::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckGameStartFail::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckGameStartFail::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 AckGameStartFail::ts() const {
  return ts_;
}
inline void AckGameStartFail::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
}

// -------------------------------------------------------------------

// AckUserReady

// required int32 seatid = 1;
inline bool AckUserReady::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUserReady::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUserReady::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUserReady::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckUserReady::seatid() const {
  return seatid_;
}
inline void AckUserReady::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 uid = 2;
inline bool AckUserReady::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckUserReady::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckUserReady::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckUserReady::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 AckUserReady::uid() const {
  return uid_;
}
inline void AckUserReady::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// -------------------------------------------------------------------

// AckDissolveErr

// required int32 code = 1;
inline bool AckDissolveErr::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDissolveErr::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDissolveErr::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDissolveErr::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckDissolveErr::code() const {
  return code_;
}
inline void AckDissolveErr::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// AckDissolveSucc

// required int32 uid = 1;
inline bool AckDissolveSucc::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDissolveSucc::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDissolveSucc::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDissolveSucc::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 AckDissolveSucc::uid() const {
  return uid_;
}
inline void AckDissolveSucc::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// repeated int32 voters_uid = 2;
inline int AckDissolveSucc::voters_uid_size() const {
  return voters_uid_.size();
}
inline void AckDissolveSucc::clear_voters_uid() {
  voters_uid_.Clear();
}
inline ::google::protobuf::int32 AckDissolveSucc::voters_uid(int index) const {
  return voters_uid_.Get(index);
}
inline void AckDissolveSucc::set_voters_uid(int index, ::google::protobuf::int32 value) {
  voters_uid_.Set(index, value);
}
inline void AckDissolveSucc::add_voters_uid(::google::protobuf::int32 value) {
  voters_uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckDissolveSucc::voters_uid() const {
  return voters_uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckDissolveSucc::mutable_voters_uid() {
  return &voters_uid_;
}

// optional int32 remain_time = 3;
inline bool AckDissolveSucc::has_remain_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckDissolveSucc::set_has_remain_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckDissolveSucc::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckDissolveSucc::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 AckDissolveSucc::remain_time() const {
  return remain_time_;
}
inline void AckDissolveSucc::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// -------------------------------------------------------------------

// ReqDissolveAct

// required int32 uid = 1;
inline bool ReqDissolveAct::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDissolveAct::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDissolveAct::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDissolveAct::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 ReqDissolveAct::uid() const {
  return uid_;
}
inline void ReqDissolveAct::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 action = 2;
inline bool ReqDissolveAct::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqDissolveAct::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqDissolveAct::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqDissolveAct::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 ReqDissolveAct::action() const {
  return action_;
}
inline void ReqDissolveAct::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// AckDissolveActSucc

// required int32 uid = 1;
inline bool AckDissolveActSucc::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDissolveActSucc::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDissolveActSucc::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDissolveActSucc::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 AckDissolveActSucc::uid() const {
  return uid_;
}
inline void AckDissolveActSucc::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 action = 2;
inline bool AckDissolveActSucc::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckDissolveActSucc::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckDissolveActSucc::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckDissolveActSucc::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 AckDissolveActSucc::action() const {
  return action_;
}
inline void AckDissolveActSucc::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// -------------------------------------------------------------------

// AckDissolveResult

// required int32 result = 1;
inline bool AckDissolveResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckDissolveResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckDissolveResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckDissolveResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AckDissolveResult::result() const {
  return result_;
}
inline void AckDissolveResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// AckOffline

// required int32 uid = 1;
inline bool AckOffline::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckOffline::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckOffline::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckOffline::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 AckOffline::uid() const {
  return uid_;
}
inline void AckOffline::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 seatid = 2;
inline bool AckOffline::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckOffline::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckOffline::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckOffline::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckOffline::seatid() const {
  return seatid_;
}
inline void AckOffline::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// -------------------------------------------------------------------

// AckFinalEnd

// required bytes roomid = 1;
inline bool AckFinalEnd::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckFinalEnd::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckFinalEnd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckFinalEnd::clear_roomid() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    roomid_->clear();
  }
  clear_has_roomid();
}
inline const ::std::string& AckFinalEnd::roomid() const {
  return *roomid_;
}
inline void AckFinalEnd::set_roomid(const ::std::string& value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
}
inline void AckFinalEnd::set_roomid(const char* value) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(value);
}
inline void AckFinalEnd::set_roomid(const void* value, size_t size) {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  roomid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckFinalEnd::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    roomid_ = new ::std::string;
  }
  return roomid_;
}
inline ::std::string* AckFinalEnd::release_roomid() {
  clear_has_roomid();
  if (roomid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomid_;
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckFinalEnd::set_allocated_roomid(::std::string* roomid) {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (roomid) {
    set_has_roomid();
    roomid_ = roomid;
  } else {
    clear_has_roomid();
    roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 room_user_id = 2;
inline bool AckFinalEnd::has_room_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckFinalEnd::set_has_room_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckFinalEnd::clear_has_room_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckFinalEnd::clear_room_user_id() {
  room_user_id_ = 0;
  clear_has_room_user_id();
}
inline ::google::protobuf::int32 AckFinalEnd::room_user_id() const {
  return room_user_id_;
}
inline void AckFinalEnd::set_room_user_id(::google::protobuf::int32 value) {
  set_has_room_user_id();
  room_user_id_ = value;
}

// optional int32 ts = 3;
inline bool AckFinalEnd::has_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckFinalEnd::set_has_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckFinalEnd::clear_has_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckFinalEnd::clear_ts() {
  ts_ = 0;
  clear_has_ts();
}
inline ::google::protobuf::int32 AckFinalEnd::ts() const {
  return ts_;
}
inline void AckFinalEnd::set_ts(::google::protobuf::int32 value) {
  set_has_ts();
  ts_ = value;
}

// repeated .proto.game.tagPlayers players = 4;
inline int AckFinalEnd::players_size() const {
  return players_.size();
}
inline void AckFinalEnd::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& AckFinalEnd::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* AckFinalEnd::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* AckFinalEnd::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
AckFinalEnd::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
AckFinalEnd::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// AckHandDetail

// repeated .proto.game.tagPlayers players = 1;
inline int AckHandDetail::players_size() const {
  return players_.size();
}
inline void AckHandDetail::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& AckHandDetail::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* AckHandDetail::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* AckHandDetail::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
AckHandDetail::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
AckHandDetail::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// AckLastEndInfo

// required bytes info = 1;
inline bool AckLastEndInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckLastEndInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckLastEndInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckLastEndInfo::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& AckLastEndInfo::info() const {
  return *info_;
}
inline void AckLastEndInfo::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void AckLastEndInfo::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void AckLastEndInfo::set_info(const void* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckLastEndInfo::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* AckLastEndInfo::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckLastEndInfo::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AckChouNotity

// required int32 type = 1;
inline bool AckChouNotity::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckChouNotity::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckChouNotity::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckChouNotity::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AckChouNotity::type() const {
  return type_;
}
inline void AckChouNotity::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// TableInfoVideo

// optional int32 banker = 1;
inline bool TableInfoVideo::has_banker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableInfoVideo::set_has_banker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableInfoVideo::clear_has_banker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableInfoVideo::clear_banker() {
  banker_ = 0;
  clear_has_banker();
}
inline ::google::protobuf::int32 TableInfoVideo::banker() const {
  return banker_;
}
inline void TableInfoVideo::set_banker(::google::protobuf::int32 value) {
  set_has_banker();
  banker_ = value;
}

// optional int32 take_in = 2;
inline bool TableInfoVideo::has_take_in() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableInfoVideo::set_has_take_in() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableInfoVideo::clear_has_take_in() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableInfoVideo::clear_take_in() {
  take_in_ = 0;
  clear_has_take_in();
}
inline ::google::protobuf::int32 TableInfoVideo::take_in() const {
  return take_in_;
}
inline void TableInfoVideo::set_take_in(::google::protobuf::int32 value) {
  set_has_take_in();
  take_in_ = value;
}

// optional int32 play_id = 3;
inline bool TableInfoVideo::has_play_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableInfoVideo::set_has_play_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableInfoVideo::clear_has_play_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableInfoVideo::clear_play_id() {
  play_id_ = 0;
  clear_has_play_id();
}
inline ::google::protobuf::int32 TableInfoVideo::play_id() const {
  return play_id_;
}
inline void TableInfoVideo::set_play_id(::google::protobuf::int32 value) {
  set_has_play_id();
  play_id_ = value;
}

// optional int32 base_huxi = 4;
inline bool TableInfoVideo::has_base_huxi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TableInfoVideo::set_has_base_huxi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TableInfoVideo::clear_has_base_huxi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TableInfoVideo::clear_base_huxi() {
  base_huxi_ = 0;
  clear_has_base_huxi();
}
inline ::google::protobuf::int32 TableInfoVideo::base_huxi() const {
  return base_huxi_;
}
inline void TableInfoVideo::set_base_huxi(::google::protobuf::int32 value) {
  set_has_base_huxi();
  base_huxi_ = value;
}

// optional int32 room_user_id = 5;
inline bool TableInfoVideo::has_room_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TableInfoVideo::set_has_room_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TableInfoVideo::clear_has_room_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TableInfoVideo::clear_room_user_id() {
  room_user_id_ = 0;
  clear_has_room_user_id();
}
inline ::google::protobuf::int32 TableInfoVideo::room_user_id() const {
  return room_user_id_;
}
inline void TableInfoVideo::set_room_user_id(::google::protobuf::int32 value) {
  set_has_room_user_id();
  room_user_id_ = value;
}

// repeated .proto.game.tagPlayers players = 6;
inline int TableInfoVideo::players_size() const {
  return players_.size();
}
inline void TableInfoVideo::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& TableInfoVideo::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* TableInfoVideo::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* TableInfoVideo::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
TableInfoVideo::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
TableInfoVideo::mutable_players() {
  return &players_;
}

// optional int32 game_player = 7;
inline bool TableInfoVideo::has_game_player() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TableInfoVideo::set_has_game_player() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TableInfoVideo::clear_has_game_player() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TableInfoVideo::clear_game_player() {
  game_player_ = 0;
  clear_has_game_player();
}
inline ::google::protobuf::int32 TableInfoVideo::game_player() const {
  return game_player_;
}
inline void TableInfoVideo::set_game_player(::google::protobuf::int32 value) {
  set_has_game_player();
  game_player_ = value;
}

// optional bytes game_name = 8;
inline bool TableInfoVideo::has_game_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TableInfoVideo::set_has_game_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TableInfoVideo::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TableInfoVideo::clear_game_name() {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    game_name_->clear();
  }
  clear_has_game_name();
}
inline const ::std::string& TableInfoVideo::game_name() const {
  return *game_name_;
}
inline void TableInfoVideo::set_game_name(const ::std::string& value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void TableInfoVideo::set_game_name(const char* value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void TableInfoVideo::set_game_name(const void* value, size_t size) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TableInfoVideo::mutable_game_name() {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  return game_name_;
}
inline ::std::string* TableInfoVideo::release_game_name() {
  clear_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_name_;
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TableInfoVideo::set_allocated_game_name(::std::string* game_name) {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (game_name) {
    set_has_game_name();
    game_name_ = game_name;
  } else {
    clear_has_game_name();
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GameStartVideo

// required int32 banker = 1;
inline bool GameStartVideo::has_banker() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStartVideo::set_has_banker() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStartVideo::clear_has_banker() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStartVideo::clear_banker() {
  banker_ = 0;
  clear_has_banker();
}
inline ::google::protobuf::int32 GameStartVideo::banker() const {
  return banker_;
}
inline void GameStartVideo::set_banker(::google::protobuf::int32 value) {
  set_has_banker();
  banker_ = value;
}

// optional int32 banker_card = 2;
inline bool GameStartVideo::has_banker_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStartVideo::set_has_banker_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStartVideo::clear_has_banker_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStartVideo::clear_banker_card() {
  banker_card_ = 0;
  clear_has_banker_card();
}
inline ::google::protobuf::int32 GameStartVideo::banker_card() const {
  return banker_card_;
}
inline void GameStartVideo::set_banker_card(::google::protobuf::int32 value) {
  set_has_banker_card();
  banker_card_ = value;
}

// optional int32 left_card_count = 3;
inline bool GameStartVideo::has_left_card_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameStartVideo::set_has_left_card_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameStartVideo::clear_has_left_card_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameStartVideo::clear_left_card_count() {
  left_card_count_ = 0;
  clear_has_left_card_count();
}
inline ::google::protobuf::int32 GameStartVideo::left_card_count() const {
  return left_card_count_;
}
inline void GameStartVideo::set_left_card_count(::google::protobuf::int32 value) {
  set_has_left_card_count();
  left_card_count_ = value;
}

// repeated .proto.game.tagPlayers players = 4;
inline int GameStartVideo::players_size() const {
  return players_.size();
}
inline void GameStartVideo::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& GameStartVideo::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* GameStartVideo::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* GameStartVideo::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
GameStartVideo::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
GameStartVideo::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// OperateVideo

// required int32 ack_code = 1;
inline bool OperateVideo::has_ack_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateVideo::set_has_ack_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateVideo::clear_has_ack_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateVideo::clear_ack_code() {
  ack_code_ = 0;
  clear_has_ack_code();
}
inline ::google::protobuf::int32 OperateVideo::ack_code() const {
  return ack_code_;
}
inline void OperateVideo::set_ack_code(::google::protobuf::int32 value) {
  set_has_ack_code();
  ack_code_ = value;
}

// optional int32 seatid = 2;
inline bool OperateVideo::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperateVideo::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperateVideo::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperateVideo::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 OperateVideo::seatid() const {
  return seatid_;
}
inline void OperateVideo::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 action_card = 3;
inline bool OperateVideo::has_action_card() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperateVideo::set_has_action_card() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperateVideo::clear_has_action_card() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperateVideo::clear_action_card() {
  action_card_ = 0;
  clear_has_action_card();
}
inline ::google::protobuf::int32 OperateVideo::action_card() const {
  return action_card_;
}
inline void OperateVideo::set_action_card(::google::protobuf::int32 value) {
  set_has_action_card();
  action_card_ = value;
}

// repeated .proto.game.tagHandCards hand_cards = 4;
inline int OperateVideo::hand_cards_size() const {
  return hand_cards_.size();
}
inline void OperateVideo::clear_hand_cards() {
  hand_cards_.Clear();
}
inline const ::proto::game::tagHandCards& OperateVideo::hand_cards(int index) const {
  return hand_cards_.Get(index);
}
inline ::proto::game::tagHandCards* OperateVideo::mutable_hand_cards(int index) {
  return hand_cards_.Mutable(index);
}
inline ::proto::game::tagHandCards* OperateVideo::add_hand_cards() {
  return hand_cards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >&
OperateVideo::hand_cards() const {
  return hand_cards_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagHandCards >*
OperateVideo::mutable_hand_cards() {
  return &hand_cards_;
}

// optional int32 total_huxi = 5;
inline bool OperateVideo::has_total_huxi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OperateVideo::set_has_total_huxi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OperateVideo::clear_has_total_huxi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OperateVideo::clear_total_huxi() {
  total_huxi_ = 0;
  clear_has_total_huxi();
}
inline ::google::protobuf::int32 OperateVideo::total_huxi() const {
  return total_huxi_;
}
inline void OperateVideo::set_total_huxi(::google::protobuf::int32 value) {
  set_has_total_huxi();
  total_huxi_ = value;
}

// repeated int32 listen_cards = 6;
inline int OperateVideo::listen_cards_size() const {
  return listen_cards_.size();
}
inline void OperateVideo::clear_listen_cards() {
  listen_cards_.Clear();
}
inline ::google::protobuf::int32 OperateVideo::listen_cards(int index) const {
  return listen_cards_.Get(index);
}
inline void OperateVideo::set_listen_cards(int index, ::google::protobuf::int32 value) {
  listen_cards_.Set(index, value);
}
inline void OperateVideo::add_listen_cards(::google::protobuf::int32 value) {
  listen_cards_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
OperateVideo::listen_cards() const {
  return listen_cards_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
OperateVideo::mutable_listen_cards() {
  return &listen_cards_;
}

// repeated .proto.game.tagWeaveCards weaves = 7;
inline int OperateVideo::weaves_size() const {
  return weaves_.size();
}
inline void OperateVideo::clear_weaves() {
  weaves_.Clear();
}
inline const ::proto::game::tagWeaveCards& OperateVideo::weaves(int index) const {
  return weaves_.Get(index);
}
inline ::proto::game::tagWeaveCards* OperateVideo::mutable_weaves(int index) {
  return weaves_.Mutable(index);
}
inline ::proto::game::tagWeaveCards* OperateVideo::add_weaves() {
  return weaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >&
OperateVideo::weaves() const {
  return weaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagWeaveCards >*
OperateVideo::mutable_weaves() {
  return &weaves_;
}

// repeated .proto.game.tagPlayers players = 8;
inline int OperateVideo::players_size() const {
  return players_.size();
}
inline void OperateVideo::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& OperateVideo::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* OperateVideo::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* OperateVideo::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
OperateVideo::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
OperateVideo::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// OperateNotify

// repeated .proto.game.tagPlayers players = 1;
inline int OperateNotify::players_size() const {
  return players_.size();
}
inline void OperateNotify::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& OperateNotify::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* OperateNotify::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* OperateNotify::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
OperateNotify::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
OperateNotify::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// AckChat

// required int32 seatid = 1;
inline bool AckChat::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckChat::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckChat::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckChat::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckChat::seatid() const {
  return seatid_;
}
inline void AckChat::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional bytes text = 2;
inline bool AckChat::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckChat::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckChat::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckChat::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& AckChat::text() const {
  return *text_;
}
inline void AckChat::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void AckChat::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void AckChat::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckChat::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* AckChat::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckChat::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AckFace

// required int32 seatid = 1;
inline bool AckFace::has_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckFace::set_has_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckFace::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckFace::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 AckFace::seatid() const {
  return seatid_;
}
inline void AckFace::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
}

// optional int32 faceid = 2;
inline bool AckFace::has_faceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckFace::set_has_faceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckFace::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckFace::clear_faceid() {
  faceid_ = 0;
  clear_has_faceid();
}
inline ::google::protobuf::int32 AckFace::faceid() const {
  return faceid_;
}
inline void AckFace::set_faceid(::google::protobuf::int32 value) {
  set_has_faceid();
  faceid_ = value;
}

// -------------------------------------------------------------------

// AckGains

// repeated .proto.game.tagPlayers players = 1;
inline int AckGains::players_size() const {
  return players_.size();
}
inline void AckGains::clear_players() {
  players_.Clear();
}
inline const ::proto::game::tagPlayers& AckGains::players(int index) const {
  return players_.Get(index);
}
inline ::proto::game::tagPlayers* AckGains::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto::game::tagPlayers* AckGains::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >&
AckGains::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::game::tagPlayers >*
AckGains::mutable_players() {
  return &players_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace game
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gameproto_2eproto__INCLUDED
