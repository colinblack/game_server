import "DataConfig.proto";
import "DataCommon.proto";
import "User.proto";

package ProtoNPCActivity;

message OpenPlatformAffairConfigCPP
{
	required uint32 startday			= 1; //起始时间
	repeated DataConfig.RewardConfigCPP reward	= 2;   //事件的奖励
	required uint32 active_value		= 3;   //活力值
	optional uint32 paycash				= 4;	//支付的钻石
}

message AffairItemConfigCPP
{
	optional uint32 props					= 1;   //道具id
	optional uint32 count					= 2;   //数量
	repeated OpenPlatformAffairConfigCPP open_platform_affair = 3; //开服事件奖励消耗库
}

message AffairConfigCPP
{
	required uint32 id				= 1;
	repeated AffairItemConfigCPP items	= 2;
}

message ActiveValueConfigCPP
{
	required uint32                     value	= 1;  //活力值
	repeated DataConfig.RewardConfigCPP reward	= 2;  //活力值奖励
}

message OpenPlatformRewardConfigCPP
{
	required uint32 startday							= 1; //起始时间
	repeated ActiveValueConfigCPP active_value_reward	= 2;   //活力值兑换奖励库
}

//后端使用
message ActivityAffairConfigCPP
{
	required uint32 			day			= 1;
	repeated AffairConfigCPP affairs		= 2;
}

//后端使用
message NPCActivityConfigCPP
{
	repeated ActivityAffairConfigCPP 		activity_affairs		= 1; //事件
	repeated OpenPlatformRewardConfigCPP 	open_platform_reward 	= 2; //开服时间下的活力值奖励库
}

//活动的配置内容
message NPCActivitySingleConfigCPP
{
	repeated ActiveValueConfigCPP  		activevalueconfig	= 1;
}

//活动内容
message NPCActivityCPP
{
	required uint32 id  			= 1;   //活动事件id
	required uint32 active_value   	= 2; //活力值
	required uint32 status   		= 3; //领取状态
	repeated uint32 material   		= 4; //材料数量
}

//掉落物品NPC的信息
message SpecialNPCCPP
{
	required uint32 kindom	= 1;   //国家
	required uint32 city	= 2;   //据点
	required uint32 nextts	= 3;   //下次NPC刷新时间，当city非0时时该字段无意义
	required uint32 npcid	= 4; //npc的id，当city非0时才有意义
}

//打开活动窗口
message OpenNPCActivityWindowReq
{

}

message OpenNPCActivityWindowResp
{
	optional User.ActivityItem		activityitem			= 1;  //活动的版本号以及开始和结束时间
	repeated SpecialNPCCPP 			npcinfo					= 2;  //掉落NPC信息
	optional NPCActivitySingleConfigCPP   activityconfig 	= 3;  //活动单个配置
	optional NPCActivityCPP         activity				= 4;  //当前活动内容
	optional uint32 				multiple				= 5;  //活力值大奖奖励倍数
	optional uint32 				day						= 6;  //活动已开始的天数
}

//事件完成奖励
message GetActiveAffairRewardReq
{
	required uint32 type = 1;  //完成类型，1-道具，2-钻石
}

message FinalRewardCPP
{
	optional DataCommon.EquipmentAllCPP  equips		= 1;  //道具奖励
	optional DataCommon.CommonBaseRewardCPP	base	= 2; //资源、钻石和各种次数 
}

message GetActiveAffairRewardResp
{
	required FinalRewardCPP 			reward		= 1; //奖励
	required NPCActivityCPP 			activity	= 2; //活动内容
	required uint32 					cash		= 3;  //钻石
}

//活力值奖励
message GetActiveValueRewardReq
{
	required uint32 index	= 1;  //从1开始
}

message GetActiveValueRewardResp
{
	required FinalRewardCPP 			reward		= 1; //奖励
	required NPCActivityCPP 			activity	= 2; //活动内容
}

