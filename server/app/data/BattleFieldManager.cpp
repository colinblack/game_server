/*
 * BattleFieldManager.cpp
 *
 *  Created on: 2016-8-18
 *      Author: Ralf
 */

#include "BattleFieldManager.h"

int BattleFieldManager::OnInit() {
	for(unsigned i=0;i<BATTLE_FIELD_ROAD;++i)
	{
		m_roadmap[road_map[i][0]].insert(road_map[i][1]);
		m_roadmap[road_map[i][1]].insert(road_map[i][0]);
	}
	for(unsigned i=1;i<=SG17_KINGDOM;++i)
	{
		unsigned k = getCapital(i);
		list<unsigned> o;
		set<unsigned> c;

		o.push_back(k);
		while(!o.empty())
		{
			unsigned cid = *(o.begin());
			o.pop_front();
			c.insert(cid);
			for(set<unsigned>::iterator it=m_roadmap[cid].begin();it!=m_roadmap[cid].end();++it)
			{
				if(c.count(*it))
					continue;
				m_capital[i][*it] = m_capital[i][cid];
				m_capital[i][*it].push_back(*it);
				o.push_back(*it);
			}
		}
	}

	if(m_data->city[0].cid == 0)
	{
		for(unsigned k=0;k<=SG17_KINGDOM;++k)
		{
			unsigned i = k ? (BATTLE_FIELD_CITY_KINGDOM * (k - 1) + BATTLE_FIELD_CITY_NEUTRAL) : 0;
			unsigned n = BATTLE_FIELD_CITY_KINGDOM * k + BATTLE_FIELD_CITY_NEUTRAL;
			unsigned j = BATTLE_FIELD_CITY_KINGDOM_SEQ * k + BATTLE_FIELD_CITY_CAPITAL;
			for(;i<n;++i,++j)
			{
				m_data->city[i].cid = j;
				m_data->city[i].kingdom = k;
			}
		}

		for(unsigned k=1;k<=SG17_KINGDOM;++k)
		{
			for(unsigned g=0;g<BATTLE_FIELD_REWARD_R;++g)
			{
				for(unsigned c=0;c<BATTLE_FIELD_REWARD_R;++c)
					m_data->reward[k-1][g][c][0] = BATTLE_FIELD_CITY_KINGDOM_SEQ * k + BATTLE_FIELD_CITY_CAPITAL + c;
			}
		}
	}

	for(unsigned i=0;i<BATTLE_FIELD_CITY;++i)
	{
		if(m_data->city[i].uid)
			m_cityMaster[m_data->city[i].uid] = m_data->city[i].cid;
	}

	return 0;
}

void BattleFieldManager::OnDay()
{
	for(unsigned k=1;k<=SG17_KINGDOM;++k)
	{
		vector<uint16_t> cids;
		for(unsigned i=0;i<BATTLE_FIELD_CITY;++i)
		{
			if(m_data->city[i].kingdom == k)
				cids.push_back(m_data->city[i].cid);
		}
		for(unsigned g=0;g<BATTLE_FIELD_REWARD_R;++g)
		{
			random_shuffle(cids.begin(), cids.end());
			for(unsigned c=0;c<BATTLE_FIELD_REWARD_R;++c)
			{
				m_data->reward[k-1][g][c][0] = c<cids.size()?cids[c]:1;
				m_data->reward[k-1][g][c][1] = ConfigManager::Instance()->GetBattleRewardType();
			}
		}
	}
}
void BattleFieldManager::OnCityReward()
{
	for(unsigned i=0;i<BATTLE_FIELD_CITY;++i)
	{
		m_data->city[i].reward = m_data->city[i].next_reward;
		m_data->city[i].next_reward = ConfigManager::Instance()->GetCityRewardType(ConfigManager::Instance()->GetScale(m_data->city[i].cid));
	}
}

const unsigned BattleFieldManager::road_map[BATTLE_FIELD_ROAD][2] = {
		{1,2},
		{1,5},
		{1,3},
		{1,10},
		{1,4},
		{1,11},
		{330,7},
		{7,2},
		{2,6},
		{6,140},
		{140,13},
		{13,4},
		{4,12},
		{12,230},
		{230,9},
		{9,3},
		{3,8},
		{8,330},
		{10,230},
		{230,232},
		{230,227},
		{140,11},
		{140,138},
		{140,182},
		{330,5},
		{330,328},
		{330,332},
		{333,340},
		{327,322},
		{161,167},
		{137,134},
		{239,233},
		{226,223},
		{201,202},
		{201,203},
		{201,204},
		{201,205},
		{205,206},
		{206,204},
		{206,207},
		{207,254},
		{207,208},
		{255,208},
		{208,209},
		{209,210},
		{210,255},
		{210,212},
		{210,211},
		{211,213},
		{213,212},
		{213,214},
		{214,219},
		{219,218},
		{219,220},
		{219,224},
		{218,217},
		{217,216},
		{216,215},
		{215,217},
		{217,343},
		{217,342},
		{218,221},
		{221,220},
		{221,223},
		{221,222},
		{221,341},
		{222,340},
		{220,223},
		{213,256},
		{255,256},
		{255,231},
		{256,229},
		{224,225},
		{225,228},
		{225,227},
		{225,226},
		{228,227},
		{226,227},
		{204,203},
		{204,253},
		{253,231},
		{231,250},
		{229,250},
		{203,202},
		{203,252},
		{252,282},
		{252,251},
		{251,250},
		{250,249},
		{249,248},
		{248,230},
		{248,247},
		{247,246},
		{246,282},
		{282,281},
		{281,280},
		{246,280},
		{246,279},
		{202,274},
		{274,275},
		{273,272},
		{273,271},
		{273,276},
		{276,280},
		{280,277},
		{272,258},
		{272,271},
		{271,277},
		{271,270},
		{270,269},
		{277,269},
		{277,278},
		{278,266},
		{278,279},
		{279,234},
		{278,234},
		{234,232},
		{234,235},
		{232,235},
		{232,233},
		{233,235},
		{235,236},
		{236,237},
		{269,261},
		{269,268},
		{269,267},
		{268,266},
		{267,266},
		{266,265},
		{265,264},
		{264,263},
		{265,237},
		{237,238},
		{237,244},
		{238,243},
		{238,242},
		{242,239},
		{242,240},
		{240,239},
		{242,241},
		{243,244},
		{244,245},
		{243,245},
		{258,260},
		{258,259},
		{258,257},
		{258,261},
		{261,262},
		{262,263},
		{126,243},
		{127,243},
		{131,241},
		{131,240},
		{101,102},
		{101,103},
		{101,104},
		{101,105},
		{102,106},
		{102,109},
		{102,104},
		{105,106},
		{106,107},
		{107,108},
		{108,112},
		{107,117},
		{109,112},
		{109,110},
		{110,113},
		{112,113},
		{112,116},
		{116,117},
		{117,118},
		{118,119},
		{116,119},
		{119,120},
		{119,121},
		{120,122},
		{116,123},
		{121,122},
		{122,123},
		{122,129},
		{129,130},
		{130,128},
		{128,126},
		{128,131},
		{126,124},
		{124,125},
		{125,126},
		{131,134},
		{131,133},
		{133,130},
		{133,134},
		{130,132},
		{132,135},
		{123,136},
		{115,136},
		{113,114},
		{114,141},
		{103,104},
		{104,111},
		{110,111},
		{111,144},
		{144,143},
		{144,145},
		{103,146},
		{146,147},
		{146,148},
		{148,149},
		{103,145},
		{145,150},
		{149,150},
		{135,136},
		{135,137},
		{135,138},
		{136,138},
		{137,138},
		{140,141},
		{141,142},
		{142,143},
		{143,180},
		{150,151},
		{151,152},
		{152,153},
		{153,155},
		{155,154},
		{155,157},
		{155,158},
		{155,172},
		{152,156},
		{156,173},
		{151,173},
		{151,179},
		{179,180},
		{180,181},
		{181,182},
		{181,162},
		{181,179},
		{182,162},
		{182,161},
		{161,162},
		{162,163},
		{163,164},
		{179,177},
		{177,178},
		{177,174},
		{177,176},
		{178,173},
		{173,172},
		{173,174},
		{172,158},
		{172,171},
		{164,176},
		{164,169},
		{164,165},
		{165,166},
		{165,160},
		{166,167},
		{166,168},
		{167,168},
		{166,321},
		{166,320},
		{169,160},
		{169,159},
		{159,160},
		{160,139},
		{160,319},
		{139,318},
		{139,317},
		{176,175},
		{175,170},
		{170,171},
		{115,113},
		{115,123},
		{301,302},
		{301,303},
		{301,304},
		{301,305},
		{302,303},
		{303,304},
		{305,306},
		{304,306},
		{306,307},
		{304,354},
		{307,308},
		{307,353},
		{353,352},
		{308,309},
		{308,351},
		{309,310},
		{351,352},
		{352,354},
		{303,356},
		{356,357},
		{356,355},
		{355,354},
		{355,348},
		{352,348},
		{351,310},
		{351,350},
		{310,312},
		{310,311},
		{311,313},
		{312,313},
		{313,350},
		{350,326},
		{313,314},
		{314,315},
		{315,324},
		{315,323},
		{315,316},
		{324,325},
		{316,318},
		{318,317},
		{318,319},
		{319,320},
		{316,321},
		{321,322},
		{323,322},
		{323,321},
		{325,327},
		{325,328},
		{325,326},
		{327,328},
		{326,328},
		{348,349},
		{349,326},
		{348,347},
		{347,346},
		{330,346},
		{346,359},
		{359,358},
		{358,357},
		{358,360},
		{358,369},
		{357,370},
		{370,369},
		{369,368},
		{370,302},
		{302,373},
		{373,374},
		{373,372},
		{369,371},
		{371,372},
		{372,331},
		{372,376},
		{332,333},
		{332,334},
		{332,335},
		{333,335},
		{334,335},
		{335,336},
		{334,360},
		{334,361},
		{360,361},
		{361,362},
		{361,368},
		{368,382},
		{368,331},
		{331,376},
		{331,329},
		{376,378},
		{378,375},
		{378,379},
		{378,377},
		{377,380},
		{380,378},
		{380,381},
		{380,382},
		{382,329},
		{382,366},
		{382,367},
		{367,362},
		{366,362},
		{362,363},
		{363,337},
		{337,336},
		{337,345},
		{337,338},
		{338,339},
		{339,340},
		{339,341},
		{341,342},
		{342,343},
		{338,343},
		{343,344},
		{343,345},
		{344,345},
		{363,364},
		{364,365},
		{365,381},
		{350,349},
		{320,321},
		{261,257},
		{254,231},
		{228,229},
		{274,273},
		{281,202},
		{222,339},
		{251,253},
		{228,256},
		{126,127},
		{143,150},
		{148,153},
		{148,152}
};
