// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CrossBusinessConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CrossBusinessConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CrossBusinessConfig {

namespace {

const ::google::protobuf::Descriptor* SlotGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlotGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenPlatformSlots_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenPlatformSlots_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrossBusinessCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrossBusinessCfg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CrossBusinessConfig_2eproto() {
  protobuf_AddDesc_CrossBusinessConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CrossBusinessConfig.proto");
  GOOGLE_CHECK(file != NULL);
  SlotGoods_descriptor_ = file->message_type(0);
  static const int SlotGoods_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotGoods, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotGoods, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotGoods, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotGoods, goods_),
  };
  SlotGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlotGoods_descriptor_,
      SlotGoods::default_instance_,
      SlotGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlotGoods));
  OpenPlatformSlots_descriptor_ = file->message_type(1);
  static const int OpenPlatformSlots_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformSlots, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformSlots, slots_),
  };
  OpenPlatformSlots_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenPlatformSlots_descriptor_,
      OpenPlatformSlots::default_instance_,
      OpenPlatformSlots_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformSlots, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformSlots, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenPlatformSlots));
  CrossBusinessCfg_descriptor_ = file->message_type(2);
  static const int CrossBusinessCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCfg, cash_refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCfg, open_platform_shop_),
  };
  CrossBusinessCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrossBusinessCfg_descriptor_,
      CrossBusinessCfg::default_instance_,
      CrossBusinessCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrossBusinessCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrossBusinessCfg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CrossBusinessConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlotGoods_descriptor_, &SlotGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenPlatformSlots_descriptor_, &OpenPlatformSlots::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrossBusinessCfg_descriptor_, &CrossBusinessCfg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CrossBusinessConfig_2eproto() {
  delete SlotGoods::default_instance_;
  delete SlotGoods_reflection_;
  delete OpenPlatformSlots::default_instance_;
  delete OpenPlatformSlots_reflection_;
  delete CrossBusinessCfg::default_instance_;
  delete CrossBusinessCfg_reflection_;
}

void protobuf_AddDesc_CrossBusinessConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031CrossBusinessConfig.proto\022\023CrossBusine"
    "ssConfig\032\022RewardConfig.proto\"Y\n\tSlotGood"
    "s\022\n\n\002id\030\001 \002(\r\022\r\n\005price\030\002 \002(\r\022\014\n\004rate\030\003 \002"
    "(\r\022#\n\005goods\030\004 \003(\0132\024.RewardConfig.Reward\""
    "T\n\021OpenPlatformSlots\022\020\n\010startday\030\001 \002(\r\022-"
    "\n\005slots\030\002 \003(\0132\036.CrossBusinessConfig.Slot"
    "Goods\"l\n\020CrossBusinessCfg\022\024\n\014cash_refres"
    "h\030\001 \002(\r\022B\n\022open_platform_shop\030\002 \003(\0132&.Cr"
    "ossBusinessConfig.OpenPlatformSlots", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CrossBusinessConfig.proto", &protobuf_RegisterTypes);
  SlotGoods::default_instance_ = new SlotGoods();
  OpenPlatformSlots::default_instance_ = new OpenPlatformSlots();
  CrossBusinessCfg::default_instance_ = new CrossBusinessCfg();
  SlotGoods::default_instance_->InitAsDefaultInstance();
  OpenPlatformSlots::default_instance_->InitAsDefaultInstance();
  CrossBusinessCfg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CrossBusinessConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CrossBusinessConfig_2eproto {
  StaticDescriptorInitializer_CrossBusinessConfig_2eproto() {
    protobuf_AddDesc_CrossBusinessConfig_2eproto();
  }
} static_descriptor_initializer_CrossBusinessConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SlotGoods::kIdFieldNumber;
const int SlotGoods::kPriceFieldNumber;
const int SlotGoods::kRateFieldNumber;
const int SlotGoods::kGoodsFieldNumber;
#endif  // !_MSC_VER

SlotGoods::SlotGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrossBusinessConfig.SlotGoods)
}

void SlotGoods::InitAsDefaultInstance() {
}

SlotGoods::SlotGoods(const SlotGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrossBusinessConfig.SlotGoods)
}

void SlotGoods::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  price_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlotGoods::~SlotGoods() {
  // @@protoc_insertion_point(destructor:CrossBusinessConfig.SlotGoods)
  SharedDtor();
}

void SlotGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlotGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlotGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlotGoods_descriptor_;
}

const SlotGoods& SlotGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossBusinessConfig_2eproto();
  return *default_instance_;
}

SlotGoods* SlotGoods::default_instance_ = NULL;

SlotGoods* SlotGoods::New() const {
  return new SlotGoods;
}

void SlotGoods::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SlotGoods*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, price_);
    rate_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlotGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrossBusinessConfig.SlotGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // required uint32 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // required uint32 rate = 3;
      case 3: {
        if (tag == 24) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_goods;
        break;
      }

      // repeated .RewardConfig.Reward goods = 4;
      case 4: {
        if (tag == 34) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_goods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrossBusinessConfig.SlotGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrossBusinessConfig.SlotGoods)
  return false;
#undef DO_
}

void SlotGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrossBusinessConfig.SlotGoods)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price(), output);
  }

  // required uint32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rate(), output);
  }

  // repeated .RewardConfig.Reward goods = 4;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CrossBusinessConfig.SlotGoods)
}

::google::protobuf::uint8* SlotGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrossBusinessConfig.SlotGoods)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price(), target);
  }

  // required uint32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rate(), target);
  }

  // repeated .RewardConfig.Reward goods = 4;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CrossBusinessConfig.SlotGoods)
  return target;
}

int SlotGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required uint32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  // repeated .RewardConfig.Reward goods = 4;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlotGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlotGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlotGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlotGoods::MergeFrom(const SlotGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlotGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotGoods::CopyFrom(const SlotGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->goods())) return false;
  return true;
}

void SlotGoods::Swap(SlotGoods* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(price_, other->price_);
    std::swap(rate_, other->rate_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlotGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlotGoods_descriptor_;
  metadata.reflection = SlotGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenPlatformSlots::kStartdayFieldNumber;
const int OpenPlatformSlots::kSlotsFieldNumber;
#endif  // !_MSC_VER

OpenPlatformSlots::OpenPlatformSlots()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrossBusinessConfig.OpenPlatformSlots)
}

void OpenPlatformSlots::InitAsDefaultInstance() {
}

OpenPlatformSlots::OpenPlatformSlots(const OpenPlatformSlots& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrossBusinessConfig.OpenPlatformSlots)
}

void OpenPlatformSlots::SharedCtor() {
  _cached_size_ = 0;
  startday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenPlatformSlots::~OpenPlatformSlots() {
  // @@protoc_insertion_point(destructor:CrossBusinessConfig.OpenPlatformSlots)
  SharedDtor();
}

void OpenPlatformSlots::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenPlatformSlots::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenPlatformSlots::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenPlatformSlots_descriptor_;
}

const OpenPlatformSlots& OpenPlatformSlots::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossBusinessConfig_2eproto();
  return *default_instance_;
}

OpenPlatformSlots* OpenPlatformSlots::default_instance_ = NULL;

OpenPlatformSlots* OpenPlatformSlots::New() const {
  return new OpenPlatformSlots;
}

void OpenPlatformSlots::Clear() {
  startday_ = 0u;
  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenPlatformSlots::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrossBusinessConfig.OpenPlatformSlots)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startday = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startday_)));
          set_has_startday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slots;
        break;
      }

      // repeated .CrossBusinessConfig.SlotGoods slots = 2;
      case 2: {
        if (tag == 18) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrossBusinessConfig.OpenPlatformSlots)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrossBusinessConfig.OpenPlatformSlots)
  return false;
#undef DO_
}

void OpenPlatformSlots::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrossBusinessConfig.OpenPlatformSlots)
  // required uint32 startday = 1;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startday(), output);
  }

  // repeated .CrossBusinessConfig.SlotGoods slots = 2;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CrossBusinessConfig.OpenPlatformSlots)
}

::google::protobuf::uint8* OpenPlatformSlots::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrossBusinessConfig.OpenPlatformSlots)
  // required uint32 startday = 1;
  if (has_startday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startday(), target);
  }

  // repeated .CrossBusinessConfig.SlotGoods slots = 2;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CrossBusinessConfig.OpenPlatformSlots)
  return target;
}

int OpenPlatformSlots::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 startday = 1;
    if (has_startday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startday());
    }

  }
  // repeated .CrossBusinessConfig.SlotGoods slots = 2;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenPlatformSlots::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenPlatformSlots* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenPlatformSlots*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenPlatformSlots::MergeFrom(const OpenPlatformSlots& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startday()) {
      set_startday(from.startday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenPlatformSlots::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPlatformSlots::CopyFrom(const OpenPlatformSlots& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPlatformSlots::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->slots())) return false;
  return true;
}

void OpenPlatformSlots::Swap(OpenPlatformSlots* other) {
  if (other != this) {
    std::swap(startday_, other->startday_);
    slots_.Swap(&other->slots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenPlatformSlots::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenPlatformSlots_descriptor_;
  metadata.reflection = OpenPlatformSlots_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrossBusinessCfg::kCashRefreshFieldNumber;
const int CrossBusinessCfg::kOpenPlatformShopFieldNumber;
#endif  // !_MSC_VER

CrossBusinessCfg::CrossBusinessCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CrossBusinessConfig.CrossBusinessCfg)
}

void CrossBusinessCfg::InitAsDefaultInstance() {
}

CrossBusinessCfg::CrossBusinessCfg(const CrossBusinessCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CrossBusinessConfig.CrossBusinessCfg)
}

void CrossBusinessCfg::SharedCtor() {
  _cached_size_ = 0;
  cash_refresh_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrossBusinessCfg::~CrossBusinessCfg() {
  // @@protoc_insertion_point(destructor:CrossBusinessConfig.CrossBusinessCfg)
  SharedDtor();
}

void CrossBusinessCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrossBusinessCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrossBusinessCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrossBusinessCfg_descriptor_;
}

const CrossBusinessCfg& CrossBusinessCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CrossBusinessConfig_2eproto();
  return *default_instance_;
}

CrossBusinessCfg* CrossBusinessCfg::default_instance_ = NULL;

CrossBusinessCfg* CrossBusinessCfg::New() const {
  return new CrossBusinessCfg;
}

void CrossBusinessCfg::Clear() {
  cash_refresh_ = 0u;
  open_platform_shop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrossBusinessCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CrossBusinessConfig.CrossBusinessCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash_refresh = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_refresh_)));
          set_has_cash_refresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_platform_shop;
        break;
      }

      // repeated .CrossBusinessConfig.OpenPlatformSlots open_platform_shop = 2;
      case 2: {
        if (tag == 18) {
         parse_open_platform_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_platform_shop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_platform_shop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CrossBusinessConfig.CrossBusinessCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CrossBusinessConfig.CrossBusinessCfg)
  return false;
#undef DO_
}

void CrossBusinessCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CrossBusinessConfig.CrossBusinessCfg)
  // required uint32 cash_refresh = 1;
  if (has_cash_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash_refresh(), output);
  }

  // repeated .CrossBusinessConfig.OpenPlatformSlots open_platform_shop = 2;
  for (int i = 0; i < this->open_platform_shop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->open_platform_shop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CrossBusinessConfig.CrossBusinessCfg)
}

::google::protobuf::uint8* CrossBusinessCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CrossBusinessConfig.CrossBusinessCfg)
  // required uint32 cash_refresh = 1;
  if (has_cash_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash_refresh(), target);
  }

  // repeated .CrossBusinessConfig.OpenPlatformSlots open_platform_shop = 2;
  for (int i = 0; i < this->open_platform_shop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->open_platform_shop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CrossBusinessConfig.CrossBusinessCfg)
  return target;
}

int CrossBusinessCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash_refresh = 1;
    if (has_cash_refresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash_refresh());
    }

  }
  // repeated .CrossBusinessConfig.OpenPlatformSlots open_platform_shop = 2;
  total_size += 1 * this->open_platform_shop_size();
  for (int i = 0; i < this->open_platform_shop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->open_platform_shop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrossBusinessCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrossBusinessCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrossBusinessCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrossBusinessCfg::MergeFrom(const CrossBusinessCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_platform_shop_.MergeFrom(from.open_platform_shop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash_refresh()) {
      set_cash_refresh(from.cash_refresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrossBusinessCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrossBusinessCfg::CopyFrom(const CrossBusinessCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossBusinessCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->open_platform_shop())) return false;
  return true;
}

void CrossBusinessCfg::Swap(CrossBusinessCfg* other) {
  if (other != this) {
    std::swap(cash_refresh_, other->cash_refresh_);
    open_platform_shop_.Swap(&other->open_platform_shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrossBusinessCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrossBusinessCfg_descriptor_;
  metadata.reflection = CrossBusinessCfg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CrossBusinessConfig

// @@protoc_insertion_point(global_scope)
