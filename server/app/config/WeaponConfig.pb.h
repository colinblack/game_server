// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeaponConfig.proto

#ifndef PROTOBUF_WeaponConfig_2eproto__INCLUDED
#define PROTOBUF_WeaponConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace WeaponConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WeaponConfig_2eproto();
void protobuf_AssignDesc_WeaponConfig_2eproto();
void protobuf_ShutdownFile_WeaponConfig_2eproto();

class WeaponLvL;
class WeaponItem;
class Weapon;

// ===================================================================

class WeaponLvL : public ::google::protobuf::Message {
 public:
  WeaponLvL();
  virtual ~WeaponLvL();

  WeaponLvL(const WeaponLvL& from);

  inline WeaponLvL& operator=(const WeaponLvL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeaponLvL& default_instance();

  void Swap(WeaponLvL* other);

  // implements Message ----------------------------------------------

  WeaponLvL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeaponLvL& from);
  void MergeFrom(const WeaponLvL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 lvl = 1;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLvlFieldNumber = 1;
  inline ::google::protobuf::uint32 lvl() const;
  inline void set_lvl(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // required uint32 cost_iron = 3;
  inline bool has_cost_iron() const;
  inline void clear_cost_iron();
  static const int kCostIronFieldNumber = 3;
  inline ::google::protobuf::uint32 cost_iron() const;
  inline void set_cost_iron(::google::protobuf::uint32 value);

  // repeated uint32 prob = 4;
  inline int prob_size() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 4;
  inline ::google::protobuf::uint32 prob(int index) const;
  inline void set_prob(int index, ::google::protobuf::uint32 value);
  inline void add_prob(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      prob() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_prob();

  // @@protoc_insertion_point(class_scope:WeaponConfig.WeaponLvL)
 private:
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_cost_iron();
  inline void clear_has_cost_iron();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 lvl_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > prob_;
  ::google::protobuf::uint32 cost_iron_;
  friend void  protobuf_AddDesc_WeaponConfig_2eproto();
  friend void protobuf_AssignDesc_WeaponConfig_2eproto();
  friend void protobuf_ShutdownFile_WeaponConfig_2eproto();

  void InitAsDefaultInstance();
  static WeaponLvL* default_instance_;
};
// -------------------------------------------------------------------

class WeaponItem : public ::google::protobuf::Message {
 public:
  WeaponItem();
  virtual ~WeaponItem();

  WeaponItem(const WeaponItem& from);

  inline WeaponItem& operator=(const WeaponItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeaponItem& default_instance();

  void Swap(WeaponItem* other);

  // implements Message ----------------------------------------------

  WeaponItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeaponItem& from);
  void MergeFrom(const WeaponItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 unlock_pass = 2;
  inline bool has_unlock_pass() const;
  inline void clear_unlock_pass();
  static const int kUnlockPassFieldNumber = 2;
  inline ::google::protobuf::uint32 unlock_pass() const;
  inline void set_unlock_pass(::google::protobuf::uint32 value);

  // required uint32 pass_cnt = 3;
  inline bool has_pass_cnt() const;
  inline void clear_pass_cnt();
  static const int kPassCntFieldNumber = 3;
  inline ::google::protobuf::uint32 pass_cnt() const;
  inline void set_pass_cnt(::google::protobuf::uint32 value);

  // required uint32 unlock_coin = 4;
  inline bool has_unlock_coin() const;
  inline void clear_unlock_coin();
  static const int kUnlockCoinFieldNumber = 4;
  inline ::google::protobuf::uint32 unlock_coin() const;
  inline void set_unlock_coin(::google::protobuf::uint32 value);

  // required uint32 unlock_wood = 5;
  inline bool has_unlock_wood() const;
  inline void clear_unlock_wood();
  static const int kUnlockWoodFieldNumber = 5;
  inline ::google::protobuf::uint32 unlock_wood() const;
  inline void set_unlock_wood(::google::protobuf::uint32 value);

  // repeated .WeaponConfig.WeaponLvL lvls = 6;
  inline int lvls_size() const;
  inline void clear_lvls();
  static const int kLvlsFieldNumber = 6;
  inline const ::WeaponConfig::WeaponLvL& lvls(int index) const;
  inline ::WeaponConfig::WeaponLvL* mutable_lvls(int index);
  inline ::WeaponConfig::WeaponLvL* add_lvls();
  inline const ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponLvL >&
      lvls() const;
  inline ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponLvL >*
      mutable_lvls();

  // @@protoc_insertion_point(class_scope:WeaponConfig.WeaponItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_unlock_pass();
  inline void clear_has_unlock_pass();
  inline void set_has_pass_cnt();
  inline void clear_has_pass_cnt();
  inline void set_has_unlock_coin();
  inline void clear_has_unlock_coin();
  inline void set_has_unlock_wood();
  inline void clear_has_unlock_wood();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 unlock_pass_;
  ::google::protobuf::uint32 pass_cnt_;
  ::google::protobuf::uint32 unlock_coin_;
  ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponLvL > lvls_;
  ::google::protobuf::uint32 unlock_wood_;
  friend void  protobuf_AddDesc_WeaponConfig_2eproto();
  friend void protobuf_AssignDesc_WeaponConfig_2eproto();
  friend void protobuf_ShutdownFile_WeaponConfig_2eproto();

  void InitAsDefaultInstance();
  static WeaponItem* default_instance_;
};
// -------------------------------------------------------------------

class Weapon : public ::google::protobuf::Message {
 public:
  Weapon();
  virtual ~Weapon();

  Weapon(const Weapon& from);

  inline Weapon& operator=(const Weapon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Weapon& default_instance();

  void Swap(Weapon* other);

  // implements Message ----------------------------------------------

  Weapon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Weapon& from);
  void MergeFrom(const Weapon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WeaponConfig.WeaponItem weapons = 1;
  inline int weapons_size() const;
  inline void clear_weapons();
  static const int kWeaponsFieldNumber = 1;
  inline const ::WeaponConfig::WeaponItem& weapons(int index) const;
  inline ::WeaponConfig::WeaponItem* mutable_weapons(int index);
  inline ::WeaponConfig::WeaponItem* add_weapons();
  inline const ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponItem >&
      weapons() const;
  inline ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponItem >*
      mutable_weapons();

  // @@protoc_insertion_point(class_scope:WeaponConfig.Weapon)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponItem > weapons_;
  friend void  protobuf_AddDesc_WeaponConfig_2eproto();
  friend void protobuf_AssignDesc_WeaponConfig_2eproto();
  friend void protobuf_ShutdownFile_WeaponConfig_2eproto();

  void InitAsDefaultInstance();
  static Weapon* default_instance_;
};
// ===================================================================


// ===================================================================

// WeaponLvL

// required uint32 lvl = 1;
inline bool WeaponLvL::has_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeaponLvL::set_has_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeaponLvL::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeaponLvL::clear_lvl() {
  lvl_ = 0u;
  clear_has_lvl();
}
inline ::google::protobuf::uint32 WeaponLvL::lvl() const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponLvL.lvl)
  return lvl_;
}
inline void WeaponLvL::set_lvl(::google::protobuf::uint32 value) {
  set_has_lvl();
  lvl_ = value;
  // @@protoc_insertion_point(field_set:WeaponConfig.WeaponLvL.lvl)
}

// required uint32 value = 2;
inline bool WeaponLvL::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeaponLvL::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeaponLvL::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeaponLvL::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 WeaponLvL::value() const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponLvL.value)
  return value_;
}
inline void WeaponLvL::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:WeaponConfig.WeaponLvL.value)
}

// required uint32 cost_iron = 3;
inline bool WeaponLvL::has_cost_iron() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeaponLvL::set_has_cost_iron() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeaponLvL::clear_has_cost_iron() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeaponLvL::clear_cost_iron() {
  cost_iron_ = 0u;
  clear_has_cost_iron();
}
inline ::google::protobuf::uint32 WeaponLvL::cost_iron() const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponLvL.cost_iron)
  return cost_iron_;
}
inline void WeaponLvL::set_cost_iron(::google::protobuf::uint32 value) {
  set_has_cost_iron();
  cost_iron_ = value;
  // @@protoc_insertion_point(field_set:WeaponConfig.WeaponLvL.cost_iron)
}

// repeated uint32 prob = 4;
inline int WeaponLvL::prob_size() const {
  return prob_.size();
}
inline void WeaponLvL::clear_prob() {
  prob_.Clear();
}
inline ::google::protobuf::uint32 WeaponLvL::prob(int index) const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponLvL.prob)
  return prob_.Get(index);
}
inline void WeaponLvL::set_prob(int index, ::google::protobuf::uint32 value) {
  prob_.Set(index, value);
  // @@protoc_insertion_point(field_set:WeaponConfig.WeaponLvL.prob)
}
inline void WeaponLvL::add_prob(::google::protobuf::uint32 value) {
  prob_.Add(value);
  // @@protoc_insertion_point(field_add:WeaponConfig.WeaponLvL.prob)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WeaponLvL::prob() const {
  // @@protoc_insertion_point(field_list:WeaponConfig.WeaponLvL.prob)
  return prob_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WeaponLvL::mutable_prob() {
  // @@protoc_insertion_point(field_mutable_list:WeaponConfig.WeaponLvL.prob)
  return &prob_;
}

// -------------------------------------------------------------------

// WeaponItem

// required uint32 id = 1;
inline bool WeaponItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeaponItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeaponItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeaponItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 WeaponItem::id() const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponItem.id)
  return id_;
}
inline void WeaponItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:WeaponConfig.WeaponItem.id)
}

// required uint32 unlock_pass = 2;
inline bool WeaponItem::has_unlock_pass() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeaponItem::set_has_unlock_pass() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeaponItem::clear_has_unlock_pass() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeaponItem::clear_unlock_pass() {
  unlock_pass_ = 0u;
  clear_has_unlock_pass();
}
inline ::google::protobuf::uint32 WeaponItem::unlock_pass() const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponItem.unlock_pass)
  return unlock_pass_;
}
inline void WeaponItem::set_unlock_pass(::google::protobuf::uint32 value) {
  set_has_unlock_pass();
  unlock_pass_ = value;
  // @@protoc_insertion_point(field_set:WeaponConfig.WeaponItem.unlock_pass)
}

// required uint32 pass_cnt = 3;
inline bool WeaponItem::has_pass_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeaponItem::set_has_pass_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeaponItem::clear_has_pass_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeaponItem::clear_pass_cnt() {
  pass_cnt_ = 0u;
  clear_has_pass_cnt();
}
inline ::google::protobuf::uint32 WeaponItem::pass_cnt() const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponItem.pass_cnt)
  return pass_cnt_;
}
inline void WeaponItem::set_pass_cnt(::google::protobuf::uint32 value) {
  set_has_pass_cnt();
  pass_cnt_ = value;
  // @@protoc_insertion_point(field_set:WeaponConfig.WeaponItem.pass_cnt)
}

// required uint32 unlock_coin = 4;
inline bool WeaponItem::has_unlock_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeaponItem::set_has_unlock_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeaponItem::clear_has_unlock_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeaponItem::clear_unlock_coin() {
  unlock_coin_ = 0u;
  clear_has_unlock_coin();
}
inline ::google::protobuf::uint32 WeaponItem::unlock_coin() const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponItem.unlock_coin)
  return unlock_coin_;
}
inline void WeaponItem::set_unlock_coin(::google::protobuf::uint32 value) {
  set_has_unlock_coin();
  unlock_coin_ = value;
  // @@protoc_insertion_point(field_set:WeaponConfig.WeaponItem.unlock_coin)
}

// required uint32 unlock_wood = 5;
inline bool WeaponItem::has_unlock_wood() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeaponItem::set_has_unlock_wood() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeaponItem::clear_has_unlock_wood() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeaponItem::clear_unlock_wood() {
  unlock_wood_ = 0u;
  clear_has_unlock_wood();
}
inline ::google::protobuf::uint32 WeaponItem::unlock_wood() const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponItem.unlock_wood)
  return unlock_wood_;
}
inline void WeaponItem::set_unlock_wood(::google::protobuf::uint32 value) {
  set_has_unlock_wood();
  unlock_wood_ = value;
  // @@protoc_insertion_point(field_set:WeaponConfig.WeaponItem.unlock_wood)
}

// repeated .WeaponConfig.WeaponLvL lvls = 6;
inline int WeaponItem::lvls_size() const {
  return lvls_.size();
}
inline void WeaponItem::clear_lvls() {
  lvls_.Clear();
}
inline const ::WeaponConfig::WeaponLvL& WeaponItem::lvls(int index) const {
  // @@protoc_insertion_point(field_get:WeaponConfig.WeaponItem.lvls)
  return lvls_.Get(index);
}
inline ::WeaponConfig::WeaponLvL* WeaponItem::mutable_lvls(int index) {
  // @@protoc_insertion_point(field_mutable:WeaponConfig.WeaponItem.lvls)
  return lvls_.Mutable(index);
}
inline ::WeaponConfig::WeaponLvL* WeaponItem::add_lvls() {
  // @@protoc_insertion_point(field_add:WeaponConfig.WeaponItem.lvls)
  return lvls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponLvL >&
WeaponItem::lvls() const {
  // @@protoc_insertion_point(field_list:WeaponConfig.WeaponItem.lvls)
  return lvls_;
}
inline ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponLvL >*
WeaponItem::mutable_lvls() {
  // @@protoc_insertion_point(field_mutable_list:WeaponConfig.WeaponItem.lvls)
  return &lvls_;
}

// -------------------------------------------------------------------

// Weapon

// repeated .WeaponConfig.WeaponItem weapons = 1;
inline int Weapon::weapons_size() const {
  return weapons_.size();
}
inline void Weapon::clear_weapons() {
  weapons_.Clear();
}
inline const ::WeaponConfig::WeaponItem& Weapon::weapons(int index) const {
  // @@protoc_insertion_point(field_get:WeaponConfig.Weapon.weapons)
  return weapons_.Get(index);
}
inline ::WeaponConfig::WeaponItem* Weapon::mutable_weapons(int index) {
  // @@protoc_insertion_point(field_mutable:WeaponConfig.Weapon.weapons)
  return weapons_.Mutable(index);
}
inline ::WeaponConfig::WeaponItem* Weapon::add_weapons() {
  // @@protoc_insertion_point(field_add:WeaponConfig.Weapon.weapons)
  return weapons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponItem >&
Weapon::weapons() const {
  // @@protoc_insertion_point(field_list:WeaponConfig.Weapon.weapons)
  return weapons_;
}
inline ::google::protobuf::RepeatedPtrField< ::WeaponConfig::WeaponItem >*
Weapon::mutable_weapons() {
  // @@protoc_insertion_point(field_mutable_list:WeaponConfig.Weapon.weapons)
  return &weapons_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace WeaponConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WeaponConfig_2eproto__INCLUDED
