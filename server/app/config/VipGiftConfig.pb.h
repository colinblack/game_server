// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VipGiftConfig.proto

#ifndef PROTOBUF_VipGiftConfig_2eproto__INCLUDED
#define PROTOBUF_VipGiftConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace VipGiftConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VipGiftConfig_2eproto();
void protobuf_AssignDesc_VipGiftConfig_2eproto();
void protobuf_ShutdownFile_VipGiftConfig_2eproto();

class EquipReward;
class FinalReward;
class LevelDailyGift;
class YearDailyGift;
class NewerGift;
class PrivilegeGift;
class UpgradeGift;
class YellowVIPGift;
class PrivilegeZoneGift;
class QQZoneGift;
class VIPGift;

// ===================================================================

class EquipReward : public ::google::protobuf::Message {
 public:
  EquipReward();
  virtual ~EquipReward();

  EquipReward(const EquipReward& from);

  inline EquipReward& operator=(const EquipReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipReward& default_instance();

  void Swap(EquipReward* other);

  // implements Message ----------------------------------------------

  EquipReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipReward& from);
  void MergeFrom(const EquipReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:VipGiftConfig.EquipReward)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipReward* default_instance_;
};
// -------------------------------------------------------------------

class FinalReward : public ::google::protobuf::Message {
 public:
  FinalReward();
  virtual ~FinalReward();

  FinalReward(const FinalReward& from);

  inline FinalReward& operator=(const FinalReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FinalReward& default_instance();

  void Swap(FinalReward* other);

  // implements Message ----------------------------------------------

  FinalReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinalReward& from);
  void MergeFrom(const FinalReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VipGiftConfig.EquipReward equips = 1;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 1;
  inline const ::VipGiftConfig::EquipReward& equips(int index) const;
  inline ::VipGiftConfig::EquipReward* mutable_equips(int index);
  inline ::VipGiftConfig::EquipReward* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::EquipReward >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::EquipReward >*
      mutable_equips();

  // optional uint32 coin = 2;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // optional uint32 wood = 3;
  inline bool has_wood() const;
  inline void clear_wood();
  static const int kWoodFieldNumber = 3;
  inline ::google::protobuf::uint32 wood() const;
  inline void set_wood(::google::protobuf::uint32 value);

  // optional uint32 food = 4;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 4;
  inline ::google::protobuf::uint32 food() const;
  inline void set_food(::google::protobuf::uint32 value);

  // optional uint32 iron = 5;
  inline bool has_iron() const;
  inline void clear_iron();
  static const int kIronFieldNumber = 5;
  inline ::google::protobuf::uint32 iron() const;
  inline void set_iron(::google::protobuf::uint32 value);

  // optional uint32 hammer = 6;
  inline bool has_hammer() const;
  inline void clear_hammer();
  static const int kHammerFieldNumber = 6;
  inline ::google::protobuf::uint32 hammer() const;
  inline void set_hammer(::google::protobuf::uint32 value);

  // optional uint32 order = 7;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 7;
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // optional uint32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:VipGiftConfig.FinalReward)
 private:
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_wood();
  inline void clear_has_wood();
  inline void set_has_food();
  inline void clear_has_food();
  inline void set_has_iron();
  inline void clear_has_iron();
  inline void set_has_hammer();
  inline void clear_has_hammer();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::EquipReward > equips_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 wood_;
  ::google::protobuf::uint32 food_;
  ::google::protobuf::uint32 iron_;
  ::google::protobuf::uint32 hammer_;
  ::google::protobuf::uint32 order_;
  ::google::protobuf::uint32 exp_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static FinalReward* default_instance_;
};
// -------------------------------------------------------------------

class LevelDailyGift : public ::google::protobuf::Message {
 public:
  LevelDailyGift();
  virtual ~LevelDailyGift();

  LevelDailyGift(const LevelDailyGift& from);

  inline LevelDailyGift& operator=(const LevelDailyGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelDailyGift& default_instance();

  void Swap(LevelDailyGift* other);

  // implements Message ----------------------------------------------

  LevelDailyGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelDailyGift& from);
  void MergeFrom(const LevelDailyGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required .VipGiftConfig.FinalReward reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::VipGiftConfig::FinalReward& reward() const;
  inline ::VipGiftConfig::FinalReward* mutable_reward();
  inline ::VipGiftConfig::FinalReward* release_reward();
  inline void set_allocated_reward(::VipGiftConfig::FinalReward* reward);

  // @@protoc_insertion_point(class_scope:VipGiftConfig.LevelDailyGift)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::FinalReward* reward_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static LevelDailyGift* default_instance_;
};
// -------------------------------------------------------------------

class YearDailyGift : public ::google::protobuf::Message {
 public:
  YearDailyGift();
  virtual ~YearDailyGift();

  YearDailyGift(const YearDailyGift& from);

  inline YearDailyGift& operator=(const YearDailyGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YearDailyGift& default_instance();

  void Swap(YearDailyGift* other);

  // implements Message ----------------------------------------------

  YearDailyGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YearDailyGift& from);
  void MergeFrom(const YearDailyGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VipGiftConfig.FinalReward reward = 1;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::VipGiftConfig::FinalReward& reward() const;
  inline ::VipGiftConfig::FinalReward* mutable_reward();
  inline ::VipGiftConfig::FinalReward* release_reward();
  inline void set_allocated_reward(::VipGiftConfig::FinalReward* reward);

  // @@protoc_insertion_point(class_scope:VipGiftConfig.YearDailyGift)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::FinalReward* reward_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static YearDailyGift* default_instance_;
};
// -------------------------------------------------------------------

class NewerGift : public ::google::protobuf::Message {
 public:
  NewerGift();
  virtual ~NewerGift();

  NewerGift(const NewerGift& from);

  inline NewerGift& operator=(const NewerGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewerGift& default_instance();

  void Swap(NewerGift* other);

  // implements Message ----------------------------------------------

  NewerGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewerGift& from);
  void MergeFrom(const NewerGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VipGiftConfig.FinalReward reward = 1;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::VipGiftConfig::FinalReward& reward() const;
  inline ::VipGiftConfig::FinalReward* mutable_reward();
  inline ::VipGiftConfig::FinalReward* release_reward();
  inline void set_allocated_reward(::VipGiftConfig::FinalReward* reward);

  // @@protoc_insertion_point(class_scope:VipGiftConfig.NewerGift)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::FinalReward* reward_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static NewerGift* default_instance_;
};
// -------------------------------------------------------------------

class PrivilegeGift : public ::google::protobuf::Message {
 public:
  PrivilegeGift();
  virtual ~PrivilegeGift();

  PrivilegeGift(const PrivilegeGift& from);

  inline PrivilegeGift& operator=(const PrivilegeGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivilegeGift& default_instance();

  void Swap(PrivilegeGift* other);

  // implements Message ----------------------------------------------

  PrivilegeGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrivilegeGift& from);
  void MergeFrom(const PrivilegeGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VipGiftConfig.LevelDailyGift leveldaily = 1;
  inline int leveldaily_size() const;
  inline void clear_leveldaily();
  static const int kLeveldailyFieldNumber = 1;
  inline const ::VipGiftConfig::LevelDailyGift& leveldaily(int index) const;
  inline ::VipGiftConfig::LevelDailyGift* mutable_leveldaily(int index);
  inline ::VipGiftConfig::LevelDailyGift* add_leveldaily();
  inline const ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::LevelDailyGift >&
      leveldaily() const;
  inline ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::LevelDailyGift >*
      mutable_leveldaily();

  // required .VipGiftConfig.YearDailyGift yeardaily = 2;
  inline bool has_yeardaily() const;
  inline void clear_yeardaily();
  static const int kYeardailyFieldNumber = 2;
  inline const ::VipGiftConfig::YearDailyGift& yeardaily() const;
  inline ::VipGiftConfig::YearDailyGift* mutable_yeardaily();
  inline ::VipGiftConfig::YearDailyGift* release_yeardaily();
  inline void set_allocated_yeardaily(::VipGiftConfig::YearDailyGift* yeardaily);

  // @@protoc_insertion_point(class_scope:VipGiftConfig.PrivilegeGift)
 private:
  inline void set_has_yeardaily();
  inline void clear_has_yeardaily();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::LevelDailyGift > leveldaily_;
  ::VipGiftConfig::YearDailyGift* yeardaily_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static PrivilegeGift* default_instance_;
};
// -------------------------------------------------------------------

class UpgradeGift : public ::google::protobuf::Message {
 public:
  UpgradeGift();
  virtual ~UpgradeGift();

  UpgradeGift(const UpgradeGift& from);

  inline UpgradeGift& operator=(const UpgradeGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpgradeGift& default_instance();

  void Swap(UpgradeGift* other);

  // implements Message ----------------------------------------------

  UpgradeGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpgradeGift& from);
  void MergeFrom(const UpgradeGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 userlevel = 1;
  inline bool has_userlevel() const;
  inline void clear_userlevel();
  static const int kUserlevelFieldNumber = 1;
  inline ::google::protobuf::uint32 userlevel() const;
  inline void set_userlevel(::google::protobuf::uint32 value);

  // required .VipGiftConfig.FinalReward reward = 2;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::VipGiftConfig::FinalReward& reward() const;
  inline ::VipGiftConfig::FinalReward* mutable_reward();
  inline ::VipGiftConfig::FinalReward* release_reward();
  inline void set_allocated_reward(::VipGiftConfig::FinalReward* reward);

  // @@protoc_insertion_point(class_scope:VipGiftConfig.UpgradeGift)
 private:
  inline void set_has_userlevel();
  inline void clear_has_userlevel();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::FinalReward* reward_;
  ::google::protobuf::uint32 userlevel_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static UpgradeGift* default_instance_;
};
// -------------------------------------------------------------------

class YellowVIPGift : public ::google::protobuf::Message {
 public:
  YellowVIPGift();
  virtual ~YellowVIPGift();

  YellowVIPGift(const YellowVIPGift& from);

  inline YellowVIPGift& operator=(const YellowVIPGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YellowVIPGift& default_instance();

  void Swap(YellowVIPGift* other);

  // implements Message ----------------------------------------------

  YellowVIPGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YellowVIPGift& from);
  void MergeFrom(const YellowVIPGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VipGiftConfig.NewerGift newer = 1;
  inline bool has_newer() const;
  inline void clear_newer();
  static const int kNewerFieldNumber = 1;
  inline const ::VipGiftConfig::NewerGift& newer() const;
  inline ::VipGiftConfig::NewerGift* mutable_newer();
  inline ::VipGiftConfig::NewerGift* release_newer();
  inline void set_allocated_newer(::VipGiftConfig::NewerGift* newer);

  // required .VipGiftConfig.PrivilegeGift privilege = 2;
  inline bool has_privilege() const;
  inline void clear_privilege();
  static const int kPrivilegeFieldNumber = 2;
  inline const ::VipGiftConfig::PrivilegeGift& privilege() const;
  inline ::VipGiftConfig::PrivilegeGift* mutable_privilege();
  inline ::VipGiftConfig::PrivilegeGift* release_privilege();
  inline void set_allocated_privilege(::VipGiftConfig::PrivilegeGift* privilege);

  // repeated .VipGiftConfig.UpgradeGift upgrade = 3;
  inline int upgrade_size() const;
  inline void clear_upgrade();
  static const int kUpgradeFieldNumber = 3;
  inline const ::VipGiftConfig::UpgradeGift& upgrade(int index) const;
  inline ::VipGiftConfig::UpgradeGift* mutable_upgrade(int index);
  inline ::VipGiftConfig::UpgradeGift* add_upgrade();
  inline const ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift >&
      upgrade() const;
  inline ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift >*
      mutable_upgrade();

  // @@protoc_insertion_point(class_scope:VipGiftConfig.YellowVIPGift)
 private:
  inline void set_has_newer();
  inline void clear_has_newer();
  inline void set_has_privilege();
  inline void clear_has_privilege();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::NewerGift* newer_;
  ::VipGiftConfig::PrivilegeGift* privilege_;
  ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift > upgrade_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static YellowVIPGift* default_instance_;
};
// -------------------------------------------------------------------

class PrivilegeZoneGift : public ::google::protobuf::Message {
 public:
  PrivilegeZoneGift();
  virtual ~PrivilegeZoneGift();

  PrivilegeZoneGift(const PrivilegeZoneGift& from);

  inline PrivilegeZoneGift& operator=(const PrivilegeZoneGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivilegeZoneGift& default_instance();

  void Swap(PrivilegeZoneGift* other);

  // implements Message ----------------------------------------------

  PrivilegeZoneGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrivilegeZoneGift& from);
  void MergeFrom(const PrivilegeZoneGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VipGiftConfig.YearDailyGift daily = 1;
  inline bool has_daily() const;
  inline void clear_daily();
  static const int kDailyFieldNumber = 1;
  inline const ::VipGiftConfig::YearDailyGift& daily() const;
  inline ::VipGiftConfig::YearDailyGift* mutable_daily();
  inline ::VipGiftConfig::YearDailyGift* release_daily();
  inline void set_allocated_daily(::VipGiftConfig::YearDailyGift* daily);

  // @@protoc_insertion_point(class_scope:VipGiftConfig.PrivilegeZoneGift)
 private:
  inline void set_has_daily();
  inline void clear_has_daily();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::YearDailyGift* daily_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static PrivilegeZoneGift* default_instance_;
};
// -------------------------------------------------------------------

class QQZoneGift : public ::google::protobuf::Message {
 public:
  QQZoneGift();
  virtual ~QQZoneGift();

  QQZoneGift(const QQZoneGift& from);

  inline QQZoneGift& operator=(const QQZoneGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QQZoneGift& default_instance();

  void Swap(QQZoneGift* other);

  // implements Message ----------------------------------------------

  QQZoneGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QQZoneGift& from);
  void MergeFrom(const QQZoneGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VipGiftConfig.PrivilegeZoneGift privilege = 1;
  inline bool has_privilege() const;
  inline void clear_privilege();
  static const int kPrivilegeFieldNumber = 1;
  inline const ::VipGiftConfig::PrivilegeZoneGift& privilege() const;
  inline ::VipGiftConfig::PrivilegeZoneGift* mutable_privilege();
  inline ::VipGiftConfig::PrivilegeZoneGift* release_privilege();
  inline void set_allocated_privilege(::VipGiftConfig::PrivilegeZoneGift* privilege);

  // repeated .VipGiftConfig.UpgradeGift upgrade = 2;
  inline int upgrade_size() const;
  inline void clear_upgrade();
  static const int kUpgradeFieldNumber = 2;
  inline const ::VipGiftConfig::UpgradeGift& upgrade(int index) const;
  inline ::VipGiftConfig::UpgradeGift* mutable_upgrade(int index);
  inline ::VipGiftConfig::UpgradeGift* add_upgrade();
  inline const ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift >&
      upgrade() const;
  inline ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift >*
      mutable_upgrade();

  // @@protoc_insertion_point(class_scope:VipGiftConfig.QQZoneGift)
 private:
  inline void set_has_privilege();
  inline void clear_has_privilege();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::PrivilegeZoneGift* privilege_;
  ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift > upgrade_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static QQZoneGift* default_instance_;
};
// -------------------------------------------------------------------

class VIPGift : public ::google::protobuf::Message {
 public:
  VIPGift();
  virtual ~VIPGift();

  VIPGift(const VIPGift& from);

  inline VIPGift& operator=(const VIPGift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VIPGift& default_instance();

  void Swap(VIPGift* other);

  // implements Message ----------------------------------------------

  VIPGift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VIPGift& from);
  void MergeFrom(const VIPGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .VipGiftConfig.YellowVIPGift yellowvip = 1;
  inline bool has_yellowvip() const;
  inline void clear_yellowvip();
  static const int kYellowvipFieldNumber = 1;
  inline const ::VipGiftConfig::YellowVIPGift& yellowvip() const;
  inline ::VipGiftConfig::YellowVIPGift* mutable_yellowvip();
  inline ::VipGiftConfig::YellowVIPGift* release_yellowvip();
  inline void set_allocated_yellowvip(::VipGiftConfig::YellowVIPGift* yellowvip);

  // required .VipGiftConfig.QQZoneGift qqzone = 2;
  inline bool has_qqzone() const;
  inline void clear_qqzone();
  static const int kQqzoneFieldNumber = 2;
  inline const ::VipGiftConfig::QQZoneGift& qqzone() const;
  inline ::VipGiftConfig::QQZoneGift* mutable_qqzone();
  inline ::VipGiftConfig::QQZoneGift* release_qqzone();
  inline void set_allocated_qqzone(::VipGiftConfig::QQZoneGift* qqzone);

  // @@protoc_insertion_point(class_scope:VipGiftConfig.VIPGift)
 private:
  inline void set_has_yellowvip();
  inline void clear_has_yellowvip();
  inline void set_has_qqzone();
  inline void clear_has_qqzone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::YellowVIPGift* yellowvip_;
  ::VipGiftConfig::QQZoneGift* qqzone_;
  friend void  protobuf_AddDesc_VipGiftConfig_2eproto();
  friend void protobuf_AssignDesc_VipGiftConfig_2eproto();
  friend void protobuf_ShutdownFile_VipGiftConfig_2eproto();

  void InitAsDefaultInstance();
  static VIPGift* default_instance_;
};
// ===================================================================


// ===================================================================

// EquipReward

// required uint32 eqid = 1;
inline bool EquipReward::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipReward::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipReward::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipReward::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 EquipReward::eqid() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.EquipReward.eqid)
  return eqid_;
}
inline void EquipReward::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.EquipReward.eqid)
}

// required uint32 count = 2;
inline bool EquipReward::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipReward::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipReward::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipReward::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 EquipReward::count() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.EquipReward.count)
  return count_;
}
inline void EquipReward::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.EquipReward.count)
}

// -------------------------------------------------------------------

// FinalReward

// repeated .VipGiftConfig.EquipReward equips = 1;
inline int FinalReward::equips_size() const {
  return equips_.size();
}
inline void FinalReward::clear_equips() {
  equips_.Clear();
}
inline const ::VipGiftConfig::EquipReward& FinalReward::equips(int index) const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.FinalReward.equips)
  return equips_.Get(index);
}
inline ::VipGiftConfig::EquipReward* FinalReward::mutable_equips(int index) {
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.FinalReward.equips)
  return equips_.Mutable(index);
}
inline ::VipGiftConfig::EquipReward* FinalReward::add_equips() {
  // @@protoc_insertion_point(field_add:VipGiftConfig.FinalReward.equips)
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::EquipReward >&
FinalReward::equips() const {
  // @@protoc_insertion_point(field_list:VipGiftConfig.FinalReward.equips)
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::EquipReward >*
FinalReward::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:VipGiftConfig.FinalReward.equips)
  return &equips_;
}

// optional uint32 coin = 2;
inline bool FinalReward::has_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FinalReward::set_has_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FinalReward::clear_has_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FinalReward::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 FinalReward::coin() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.FinalReward.coin)
  return coin_;
}
inline void FinalReward::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.FinalReward.coin)
}

// optional uint32 wood = 3;
inline bool FinalReward::has_wood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FinalReward::set_has_wood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FinalReward::clear_has_wood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FinalReward::clear_wood() {
  wood_ = 0u;
  clear_has_wood();
}
inline ::google::protobuf::uint32 FinalReward::wood() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.FinalReward.wood)
  return wood_;
}
inline void FinalReward::set_wood(::google::protobuf::uint32 value) {
  set_has_wood();
  wood_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.FinalReward.wood)
}

// optional uint32 food = 4;
inline bool FinalReward::has_food() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FinalReward::set_has_food() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FinalReward::clear_has_food() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FinalReward::clear_food() {
  food_ = 0u;
  clear_has_food();
}
inline ::google::protobuf::uint32 FinalReward::food() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.FinalReward.food)
  return food_;
}
inline void FinalReward::set_food(::google::protobuf::uint32 value) {
  set_has_food();
  food_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.FinalReward.food)
}

// optional uint32 iron = 5;
inline bool FinalReward::has_iron() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FinalReward::set_has_iron() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FinalReward::clear_has_iron() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FinalReward::clear_iron() {
  iron_ = 0u;
  clear_has_iron();
}
inline ::google::protobuf::uint32 FinalReward::iron() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.FinalReward.iron)
  return iron_;
}
inline void FinalReward::set_iron(::google::protobuf::uint32 value) {
  set_has_iron();
  iron_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.FinalReward.iron)
}

// optional uint32 hammer = 6;
inline bool FinalReward::has_hammer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FinalReward::set_has_hammer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FinalReward::clear_has_hammer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FinalReward::clear_hammer() {
  hammer_ = 0u;
  clear_has_hammer();
}
inline ::google::protobuf::uint32 FinalReward::hammer() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.FinalReward.hammer)
  return hammer_;
}
inline void FinalReward::set_hammer(::google::protobuf::uint32 value) {
  set_has_hammer();
  hammer_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.FinalReward.hammer)
}

// optional uint32 order = 7;
inline bool FinalReward::has_order() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FinalReward::set_has_order() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FinalReward::clear_has_order() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FinalReward::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 FinalReward::order() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.FinalReward.order)
  return order_;
}
inline void FinalReward::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.FinalReward.order)
}

// optional uint32 exp = 8;
inline bool FinalReward::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FinalReward::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FinalReward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FinalReward::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 FinalReward::exp() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.FinalReward.exp)
  return exp_;
}
inline void FinalReward::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.FinalReward.exp)
}

// -------------------------------------------------------------------

// LevelDailyGift

// required uint32 level = 1;
inline bool LevelDailyGift::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelDailyGift::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelDailyGift::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelDailyGift::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 LevelDailyGift::level() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.LevelDailyGift.level)
  return level_;
}
inline void LevelDailyGift::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.LevelDailyGift.level)
}

// required .VipGiftConfig.FinalReward reward = 2;
inline bool LevelDailyGift::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelDailyGift::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelDailyGift::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelDailyGift::clear_reward() {
  if (reward_ != NULL) reward_->::VipGiftConfig::FinalReward::Clear();
  clear_has_reward();
}
inline const ::VipGiftConfig::FinalReward& LevelDailyGift::reward() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.LevelDailyGift.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::VipGiftConfig::FinalReward* LevelDailyGift::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::VipGiftConfig::FinalReward;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.LevelDailyGift.reward)
  return reward_;
}
inline ::VipGiftConfig::FinalReward* LevelDailyGift::release_reward() {
  clear_has_reward();
  ::VipGiftConfig::FinalReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void LevelDailyGift::set_allocated_reward(::VipGiftConfig::FinalReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.LevelDailyGift.reward)
}

// -------------------------------------------------------------------

// YearDailyGift

// required .VipGiftConfig.FinalReward reward = 1;
inline bool YearDailyGift::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YearDailyGift::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YearDailyGift::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YearDailyGift::clear_reward() {
  if (reward_ != NULL) reward_->::VipGiftConfig::FinalReward::Clear();
  clear_has_reward();
}
inline const ::VipGiftConfig::FinalReward& YearDailyGift::reward() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.YearDailyGift.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::VipGiftConfig::FinalReward* YearDailyGift::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::VipGiftConfig::FinalReward;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.YearDailyGift.reward)
  return reward_;
}
inline ::VipGiftConfig::FinalReward* YearDailyGift::release_reward() {
  clear_has_reward();
  ::VipGiftConfig::FinalReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void YearDailyGift::set_allocated_reward(::VipGiftConfig::FinalReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.YearDailyGift.reward)
}

// -------------------------------------------------------------------

// NewerGift

// required .VipGiftConfig.FinalReward reward = 1;
inline bool NewerGift::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewerGift::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewerGift::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewerGift::clear_reward() {
  if (reward_ != NULL) reward_->::VipGiftConfig::FinalReward::Clear();
  clear_has_reward();
}
inline const ::VipGiftConfig::FinalReward& NewerGift::reward() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.NewerGift.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::VipGiftConfig::FinalReward* NewerGift::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::VipGiftConfig::FinalReward;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.NewerGift.reward)
  return reward_;
}
inline ::VipGiftConfig::FinalReward* NewerGift::release_reward() {
  clear_has_reward();
  ::VipGiftConfig::FinalReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void NewerGift::set_allocated_reward(::VipGiftConfig::FinalReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.NewerGift.reward)
}

// -------------------------------------------------------------------

// PrivilegeGift

// repeated .VipGiftConfig.LevelDailyGift leveldaily = 1;
inline int PrivilegeGift::leveldaily_size() const {
  return leveldaily_.size();
}
inline void PrivilegeGift::clear_leveldaily() {
  leveldaily_.Clear();
}
inline const ::VipGiftConfig::LevelDailyGift& PrivilegeGift::leveldaily(int index) const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.PrivilegeGift.leveldaily)
  return leveldaily_.Get(index);
}
inline ::VipGiftConfig::LevelDailyGift* PrivilegeGift::mutable_leveldaily(int index) {
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.PrivilegeGift.leveldaily)
  return leveldaily_.Mutable(index);
}
inline ::VipGiftConfig::LevelDailyGift* PrivilegeGift::add_leveldaily() {
  // @@protoc_insertion_point(field_add:VipGiftConfig.PrivilegeGift.leveldaily)
  return leveldaily_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::LevelDailyGift >&
PrivilegeGift::leveldaily() const {
  // @@protoc_insertion_point(field_list:VipGiftConfig.PrivilegeGift.leveldaily)
  return leveldaily_;
}
inline ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::LevelDailyGift >*
PrivilegeGift::mutable_leveldaily() {
  // @@protoc_insertion_point(field_mutable_list:VipGiftConfig.PrivilegeGift.leveldaily)
  return &leveldaily_;
}

// required .VipGiftConfig.YearDailyGift yeardaily = 2;
inline bool PrivilegeGift::has_yeardaily() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrivilegeGift::set_has_yeardaily() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrivilegeGift::clear_has_yeardaily() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrivilegeGift::clear_yeardaily() {
  if (yeardaily_ != NULL) yeardaily_->::VipGiftConfig::YearDailyGift::Clear();
  clear_has_yeardaily();
}
inline const ::VipGiftConfig::YearDailyGift& PrivilegeGift::yeardaily() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.PrivilegeGift.yeardaily)
  return yeardaily_ != NULL ? *yeardaily_ : *default_instance_->yeardaily_;
}
inline ::VipGiftConfig::YearDailyGift* PrivilegeGift::mutable_yeardaily() {
  set_has_yeardaily();
  if (yeardaily_ == NULL) yeardaily_ = new ::VipGiftConfig::YearDailyGift;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.PrivilegeGift.yeardaily)
  return yeardaily_;
}
inline ::VipGiftConfig::YearDailyGift* PrivilegeGift::release_yeardaily() {
  clear_has_yeardaily();
  ::VipGiftConfig::YearDailyGift* temp = yeardaily_;
  yeardaily_ = NULL;
  return temp;
}
inline void PrivilegeGift::set_allocated_yeardaily(::VipGiftConfig::YearDailyGift* yeardaily) {
  delete yeardaily_;
  yeardaily_ = yeardaily;
  if (yeardaily) {
    set_has_yeardaily();
  } else {
    clear_has_yeardaily();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.PrivilegeGift.yeardaily)
}

// -------------------------------------------------------------------

// UpgradeGift

// required uint32 userlevel = 1;
inline bool UpgradeGift::has_userlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpgradeGift::set_has_userlevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpgradeGift::clear_has_userlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpgradeGift::clear_userlevel() {
  userlevel_ = 0u;
  clear_has_userlevel();
}
inline ::google::protobuf::uint32 UpgradeGift::userlevel() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.UpgradeGift.userlevel)
  return userlevel_;
}
inline void UpgradeGift::set_userlevel(::google::protobuf::uint32 value) {
  set_has_userlevel();
  userlevel_ = value;
  // @@protoc_insertion_point(field_set:VipGiftConfig.UpgradeGift.userlevel)
}

// required .VipGiftConfig.FinalReward reward = 2;
inline bool UpgradeGift::has_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpgradeGift::set_has_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpgradeGift::clear_has_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpgradeGift::clear_reward() {
  if (reward_ != NULL) reward_->::VipGiftConfig::FinalReward::Clear();
  clear_has_reward();
}
inline const ::VipGiftConfig::FinalReward& UpgradeGift::reward() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.UpgradeGift.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::VipGiftConfig::FinalReward* UpgradeGift::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::VipGiftConfig::FinalReward;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.UpgradeGift.reward)
  return reward_;
}
inline ::VipGiftConfig::FinalReward* UpgradeGift::release_reward() {
  clear_has_reward();
  ::VipGiftConfig::FinalReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void UpgradeGift::set_allocated_reward(::VipGiftConfig::FinalReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.UpgradeGift.reward)
}

// -------------------------------------------------------------------

// YellowVIPGift

// required .VipGiftConfig.NewerGift newer = 1;
inline bool YellowVIPGift::has_newer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YellowVIPGift::set_has_newer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YellowVIPGift::clear_has_newer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YellowVIPGift::clear_newer() {
  if (newer_ != NULL) newer_->::VipGiftConfig::NewerGift::Clear();
  clear_has_newer();
}
inline const ::VipGiftConfig::NewerGift& YellowVIPGift::newer() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.YellowVIPGift.newer)
  return newer_ != NULL ? *newer_ : *default_instance_->newer_;
}
inline ::VipGiftConfig::NewerGift* YellowVIPGift::mutable_newer() {
  set_has_newer();
  if (newer_ == NULL) newer_ = new ::VipGiftConfig::NewerGift;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.YellowVIPGift.newer)
  return newer_;
}
inline ::VipGiftConfig::NewerGift* YellowVIPGift::release_newer() {
  clear_has_newer();
  ::VipGiftConfig::NewerGift* temp = newer_;
  newer_ = NULL;
  return temp;
}
inline void YellowVIPGift::set_allocated_newer(::VipGiftConfig::NewerGift* newer) {
  delete newer_;
  newer_ = newer;
  if (newer) {
    set_has_newer();
  } else {
    clear_has_newer();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.YellowVIPGift.newer)
}

// required .VipGiftConfig.PrivilegeGift privilege = 2;
inline bool YellowVIPGift::has_privilege() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YellowVIPGift::set_has_privilege() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YellowVIPGift::clear_has_privilege() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YellowVIPGift::clear_privilege() {
  if (privilege_ != NULL) privilege_->::VipGiftConfig::PrivilegeGift::Clear();
  clear_has_privilege();
}
inline const ::VipGiftConfig::PrivilegeGift& YellowVIPGift::privilege() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.YellowVIPGift.privilege)
  return privilege_ != NULL ? *privilege_ : *default_instance_->privilege_;
}
inline ::VipGiftConfig::PrivilegeGift* YellowVIPGift::mutable_privilege() {
  set_has_privilege();
  if (privilege_ == NULL) privilege_ = new ::VipGiftConfig::PrivilegeGift;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.YellowVIPGift.privilege)
  return privilege_;
}
inline ::VipGiftConfig::PrivilegeGift* YellowVIPGift::release_privilege() {
  clear_has_privilege();
  ::VipGiftConfig::PrivilegeGift* temp = privilege_;
  privilege_ = NULL;
  return temp;
}
inline void YellowVIPGift::set_allocated_privilege(::VipGiftConfig::PrivilegeGift* privilege) {
  delete privilege_;
  privilege_ = privilege;
  if (privilege) {
    set_has_privilege();
  } else {
    clear_has_privilege();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.YellowVIPGift.privilege)
}

// repeated .VipGiftConfig.UpgradeGift upgrade = 3;
inline int YellowVIPGift::upgrade_size() const {
  return upgrade_.size();
}
inline void YellowVIPGift::clear_upgrade() {
  upgrade_.Clear();
}
inline const ::VipGiftConfig::UpgradeGift& YellowVIPGift::upgrade(int index) const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.YellowVIPGift.upgrade)
  return upgrade_.Get(index);
}
inline ::VipGiftConfig::UpgradeGift* YellowVIPGift::mutable_upgrade(int index) {
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.YellowVIPGift.upgrade)
  return upgrade_.Mutable(index);
}
inline ::VipGiftConfig::UpgradeGift* YellowVIPGift::add_upgrade() {
  // @@protoc_insertion_point(field_add:VipGiftConfig.YellowVIPGift.upgrade)
  return upgrade_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift >&
YellowVIPGift::upgrade() const {
  // @@protoc_insertion_point(field_list:VipGiftConfig.YellowVIPGift.upgrade)
  return upgrade_;
}
inline ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift >*
YellowVIPGift::mutable_upgrade() {
  // @@protoc_insertion_point(field_mutable_list:VipGiftConfig.YellowVIPGift.upgrade)
  return &upgrade_;
}

// -------------------------------------------------------------------

// PrivilegeZoneGift

// required .VipGiftConfig.YearDailyGift daily = 1;
inline bool PrivilegeZoneGift::has_daily() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrivilegeZoneGift::set_has_daily() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrivilegeZoneGift::clear_has_daily() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrivilegeZoneGift::clear_daily() {
  if (daily_ != NULL) daily_->::VipGiftConfig::YearDailyGift::Clear();
  clear_has_daily();
}
inline const ::VipGiftConfig::YearDailyGift& PrivilegeZoneGift::daily() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.PrivilegeZoneGift.daily)
  return daily_ != NULL ? *daily_ : *default_instance_->daily_;
}
inline ::VipGiftConfig::YearDailyGift* PrivilegeZoneGift::mutable_daily() {
  set_has_daily();
  if (daily_ == NULL) daily_ = new ::VipGiftConfig::YearDailyGift;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.PrivilegeZoneGift.daily)
  return daily_;
}
inline ::VipGiftConfig::YearDailyGift* PrivilegeZoneGift::release_daily() {
  clear_has_daily();
  ::VipGiftConfig::YearDailyGift* temp = daily_;
  daily_ = NULL;
  return temp;
}
inline void PrivilegeZoneGift::set_allocated_daily(::VipGiftConfig::YearDailyGift* daily) {
  delete daily_;
  daily_ = daily;
  if (daily) {
    set_has_daily();
  } else {
    clear_has_daily();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.PrivilegeZoneGift.daily)
}

// -------------------------------------------------------------------

// QQZoneGift

// required .VipGiftConfig.PrivilegeZoneGift privilege = 1;
inline bool QQZoneGift::has_privilege() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QQZoneGift::set_has_privilege() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QQZoneGift::clear_has_privilege() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QQZoneGift::clear_privilege() {
  if (privilege_ != NULL) privilege_->::VipGiftConfig::PrivilegeZoneGift::Clear();
  clear_has_privilege();
}
inline const ::VipGiftConfig::PrivilegeZoneGift& QQZoneGift::privilege() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.QQZoneGift.privilege)
  return privilege_ != NULL ? *privilege_ : *default_instance_->privilege_;
}
inline ::VipGiftConfig::PrivilegeZoneGift* QQZoneGift::mutable_privilege() {
  set_has_privilege();
  if (privilege_ == NULL) privilege_ = new ::VipGiftConfig::PrivilegeZoneGift;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.QQZoneGift.privilege)
  return privilege_;
}
inline ::VipGiftConfig::PrivilegeZoneGift* QQZoneGift::release_privilege() {
  clear_has_privilege();
  ::VipGiftConfig::PrivilegeZoneGift* temp = privilege_;
  privilege_ = NULL;
  return temp;
}
inline void QQZoneGift::set_allocated_privilege(::VipGiftConfig::PrivilegeZoneGift* privilege) {
  delete privilege_;
  privilege_ = privilege;
  if (privilege) {
    set_has_privilege();
  } else {
    clear_has_privilege();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.QQZoneGift.privilege)
}

// repeated .VipGiftConfig.UpgradeGift upgrade = 2;
inline int QQZoneGift::upgrade_size() const {
  return upgrade_.size();
}
inline void QQZoneGift::clear_upgrade() {
  upgrade_.Clear();
}
inline const ::VipGiftConfig::UpgradeGift& QQZoneGift::upgrade(int index) const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.QQZoneGift.upgrade)
  return upgrade_.Get(index);
}
inline ::VipGiftConfig::UpgradeGift* QQZoneGift::mutable_upgrade(int index) {
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.QQZoneGift.upgrade)
  return upgrade_.Mutable(index);
}
inline ::VipGiftConfig::UpgradeGift* QQZoneGift::add_upgrade() {
  // @@protoc_insertion_point(field_add:VipGiftConfig.QQZoneGift.upgrade)
  return upgrade_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift >&
QQZoneGift::upgrade() const {
  // @@protoc_insertion_point(field_list:VipGiftConfig.QQZoneGift.upgrade)
  return upgrade_;
}
inline ::google::protobuf::RepeatedPtrField< ::VipGiftConfig::UpgradeGift >*
QQZoneGift::mutable_upgrade() {
  // @@protoc_insertion_point(field_mutable_list:VipGiftConfig.QQZoneGift.upgrade)
  return &upgrade_;
}

// -------------------------------------------------------------------

// VIPGift

// required .VipGiftConfig.YellowVIPGift yellowvip = 1;
inline bool VIPGift::has_yellowvip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VIPGift::set_has_yellowvip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VIPGift::clear_has_yellowvip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VIPGift::clear_yellowvip() {
  if (yellowvip_ != NULL) yellowvip_->::VipGiftConfig::YellowVIPGift::Clear();
  clear_has_yellowvip();
}
inline const ::VipGiftConfig::YellowVIPGift& VIPGift::yellowvip() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.VIPGift.yellowvip)
  return yellowvip_ != NULL ? *yellowvip_ : *default_instance_->yellowvip_;
}
inline ::VipGiftConfig::YellowVIPGift* VIPGift::mutable_yellowvip() {
  set_has_yellowvip();
  if (yellowvip_ == NULL) yellowvip_ = new ::VipGiftConfig::YellowVIPGift;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.VIPGift.yellowvip)
  return yellowvip_;
}
inline ::VipGiftConfig::YellowVIPGift* VIPGift::release_yellowvip() {
  clear_has_yellowvip();
  ::VipGiftConfig::YellowVIPGift* temp = yellowvip_;
  yellowvip_ = NULL;
  return temp;
}
inline void VIPGift::set_allocated_yellowvip(::VipGiftConfig::YellowVIPGift* yellowvip) {
  delete yellowvip_;
  yellowvip_ = yellowvip;
  if (yellowvip) {
    set_has_yellowvip();
  } else {
    clear_has_yellowvip();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.VIPGift.yellowvip)
}

// required .VipGiftConfig.QQZoneGift qqzone = 2;
inline bool VIPGift::has_qqzone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VIPGift::set_has_qqzone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VIPGift::clear_has_qqzone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VIPGift::clear_qqzone() {
  if (qqzone_ != NULL) qqzone_->::VipGiftConfig::QQZoneGift::Clear();
  clear_has_qqzone();
}
inline const ::VipGiftConfig::QQZoneGift& VIPGift::qqzone() const {
  // @@protoc_insertion_point(field_get:VipGiftConfig.VIPGift.qqzone)
  return qqzone_ != NULL ? *qqzone_ : *default_instance_->qqzone_;
}
inline ::VipGiftConfig::QQZoneGift* VIPGift::mutable_qqzone() {
  set_has_qqzone();
  if (qqzone_ == NULL) qqzone_ = new ::VipGiftConfig::QQZoneGift;
  // @@protoc_insertion_point(field_mutable:VipGiftConfig.VIPGift.qqzone)
  return qqzone_;
}
inline ::VipGiftConfig::QQZoneGift* VIPGift::release_qqzone() {
  clear_has_qqzone();
  ::VipGiftConfig::QQZoneGift* temp = qqzone_;
  qqzone_ = NULL;
  return temp;
}
inline void VIPGift::set_allocated_qqzone(::VipGiftConfig::QQZoneGift* qqzone) {
  delete qqzone_;
  qqzone_ = qqzone;
  if (qqzone) {
    set_has_qqzone();
  } else {
    clear_has_qqzone();
  }
  // @@protoc_insertion_point(field_set_allocated:VipGiftConfig.VIPGift.qqzone)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VipGiftConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VipGiftConfig_2eproto__INCLUDED
