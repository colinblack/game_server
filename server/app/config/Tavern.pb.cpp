// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tavern.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Tavern.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TavernConfig {

namespace {

const ::google::protobuf::Descriptor* UnlockCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroRecruit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroRecruit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Tavern_2eproto() {
  protobuf_AddDesc_Tavern_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Tavern.proto");
  GOOGLE_CHECK(file != NULL);
  UnlockCondition_descriptor_ = file->message_type(0);
  static const int UnlockCondition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockCondition, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockCondition, times_),
  };
  UnlockCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockCondition_descriptor_,
      UnlockCondition::default_instance_,
      UnlockCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockCondition));
  SingleHero_descriptor_ = file->message_type(1);
  static const int SingleHero_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHero, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHero, price_),
  };
  SingleHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleHero_descriptor_,
      SingleHero::default_instance_,
      SingleHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleHero));
  HeroRecruit_descriptor_ = file->message_type(2);
  static const int HeroRecruit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRecruit, heroes_),
  };
  HeroRecruit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroRecruit_descriptor_,
      HeroRecruit::default_instance_,
      HeroRecruit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRecruit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroRecruit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroRecruit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Tavern_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockCondition_descriptor_, &UnlockCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleHero_descriptor_, &SingleHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroRecruit_descriptor_, &HeroRecruit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Tavern_2eproto() {
  delete UnlockCondition::default_instance_;
  delete UnlockCondition_reflection_;
  delete SingleHero::default_instance_;
  delete SingleHero_reflection_;
  delete HeroRecruit::default_instance_;
  delete HeroRecruit_reflection_;
}

void protobuf_AddDesc_Tavern_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Tavern.proto\022\014TavernConfig\"0\n\017UnlockCo"
    "ndition\022\016\n\006gateid\030\001 \002(\r\022\r\n\005times\030\002 \002(\r\"i"
    "\n\nSingleHero\022\n\n\002id\030\001 \002(\r\022\016\n\006heroid\030\002 \002(\r"
    "\0220\n\tcondition\030\003 \002(\0132\035.TavernConfig.Unloc"
    "kCondition\022\r\n\005price\030\004 \002(\r\"7\n\013HeroRecruit"
    "\022(\n\006heroes\030\001 \003(\0132\030.TavernConfig.SingleHe"
    "ro", 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Tavern.proto", &protobuf_RegisterTypes);
  UnlockCondition::default_instance_ = new UnlockCondition();
  SingleHero::default_instance_ = new SingleHero();
  HeroRecruit::default_instance_ = new HeroRecruit();
  UnlockCondition::default_instance_->InitAsDefaultInstance();
  SingleHero::default_instance_->InitAsDefaultInstance();
  HeroRecruit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Tavern_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Tavern_2eproto {
  StaticDescriptorInitializer_Tavern_2eproto() {
    protobuf_AddDesc_Tavern_2eproto();
  }
} static_descriptor_initializer_Tavern_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UnlockCondition::kGateidFieldNumber;
const int UnlockCondition::kTimesFieldNumber;
#endif  // !_MSC_VER

UnlockCondition::UnlockCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TavernConfig.UnlockCondition)
}

void UnlockCondition::InitAsDefaultInstance() {
}

UnlockCondition::UnlockCondition(const UnlockCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TavernConfig.UnlockCondition)
}

void UnlockCondition::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockCondition::~UnlockCondition() {
  // @@protoc_insertion_point(destructor:TavernConfig.UnlockCondition)
  SharedDtor();
}

void UnlockCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockCondition_descriptor_;
}

const UnlockCondition& UnlockCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tavern_2eproto();
  return *default_instance_;
}

UnlockCondition* UnlockCondition::default_instance_ = NULL;

UnlockCondition* UnlockCondition::New() const {
  return new UnlockCondition;
}

void UnlockCondition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnlockCondition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gateid_, times_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TavernConfig.UnlockCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // required uint32 times = 2;
      case 2: {
        if (tag == 16) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TavernConfig.UnlockCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TavernConfig.UnlockCondition)
  return false;
#undef DO_
}

void UnlockCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TavernConfig.UnlockCondition)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TavernConfig.UnlockCondition)
}

::google::protobuf::uint8* UnlockCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TavernConfig.UnlockCondition)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TavernConfig.UnlockCondition)
  return target;
}

int UnlockCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockCondition::MergeFrom(const UnlockCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockCondition::CopyFrom(const UnlockCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UnlockCondition::Swap(UnlockCondition* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockCondition_descriptor_;
  metadata.reflection = UnlockCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleHero::kIdFieldNumber;
const int SingleHero::kHeroidFieldNumber;
const int SingleHero::kConditionFieldNumber;
const int SingleHero::kPriceFieldNumber;
#endif  // !_MSC_VER

SingleHero::SingleHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TavernConfig.SingleHero)
}

void SingleHero::InitAsDefaultInstance() {
  condition_ = const_cast< ::TavernConfig::UnlockCondition*>(&::TavernConfig::UnlockCondition::default_instance());
}

SingleHero::SingleHero(const SingleHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TavernConfig.SingleHero)
}

void SingleHero::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  heroid_ = 0u;
  condition_ = NULL;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleHero::~SingleHero() {
  // @@protoc_insertion_point(destructor:TavernConfig.SingleHero)
  SharedDtor();
}

void SingleHero::SharedDtor() {
  if (this != default_instance_) {
    delete condition_;
  }
}

void SingleHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleHero_descriptor_;
}

const SingleHero& SingleHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tavern_2eproto();
  return *default_instance_;
}

SingleHero* SingleHero::default_instance_ = NULL;

SingleHero* SingleHero::New() const {
  return new SingleHero;
}

void SingleHero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SingleHero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, heroid_);
    if (has_condition()) {
      if (condition_ != NULL) condition_->::TavernConfig::UnlockCondition::Clear();
    }
    price_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TavernConfig.SingleHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heroid;
        break;
      }

      // required uint32 heroid = 2;
      case 2: {
        if (tag == 16) {
         parse_heroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_condition;
        break;
      }

      // required .TavernConfig.UnlockCondition condition = 3;
      case 3: {
        if (tag == 26) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }

      // required uint32 price = 4;
      case 4: {
        if (tag == 32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TavernConfig.SingleHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TavernConfig.SingleHero)
  return false;
#undef DO_
}

void SingleHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TavernConfig.SingleHero)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  // required .TavernConfig.UnlockCondition condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->condition(), output);
  }

  // required uint32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TavernConfig.SingleHero)
}

::google::protobuf::uint8* SingleHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TavernConfig.SingleHero)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  // required .TavernConfig.UnlockCondition condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->condition(), target);
  }

  // required uint32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TavernConfig.SingleHero)
  return target;
}

int SingleHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 heroid = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // required .TavernConfig.UnlockCondition condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

    // required uint32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleHero::MergeFrom(const SingleHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_condition()) {
      mutable_condition()->::TavernConfig::UnlockCondition::MergeFrom(from.condition());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleHero::CopyFrom(const SingleHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  return true;
}

void SingleHero::Swap(SingleHero* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(heroid_, other->heroid_);
    std::swap(condition_, other->condition_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleHero_descriptor_;
  metadata.reflection = SingleHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroRecruit::kHeroesFieldNumber;
#endif  // !_MSC_VER

HeroRecruit::HeroRecruit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TavernConfig.HeroRecruit)
}

void HeroRecruit::InitAsDefaultInstance() {
}

HeroRecruit::HeroRecruit(const HeroRecruit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TavernConfig.HeroRecruit)
}

void HeroRecruit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroRecruit::~HeroRecruit() {
  // @@protoc_insertion_point(destructor:TavernConfig.HeroRecruit)
  SharedDtor();
}

void HeroRecruit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroRecruit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroRecruit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroRecruit_descriptor_;
}

const HeroRecruit& HeroRecruit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tavern_2eproto();
  return *default_instance_;
}

HeroRecruit* HeroRecruit::default_instance_ = NULL;

HeroRecruit* HeroRecruit::New() const {
  return new HeroRecruit;
}

void HeroRecruit::Clear() {
  heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroRecruit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TavernConfig.HeroRecruit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TavernConfig.SingleHero heroes = 1;
      case 1: {
        if (tag == 10) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_heroes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TavernConfig.HeroRecruit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TavernConfig.HeroRecruit)
  return false;
#undef DO_
}

void HeroRecruit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TavernConfig.HeroRecruit)
  // repeated .TavernConfig.SingleHero heroes = 1;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heroes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TavernConfig.HeroRecruit)
}

::google::protobuf::uint8* HeroRecruit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TavernConfig.HeroRecruit)
  // repeated .TavernConfig.SingleHero heroes = 1;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heroes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TavernConfig.HeroRecruit)
  return target;
}

int HeroRecruit::ByteSize() const {
  int total_size = 0;

  // repeated .TavernConfig.SingleHero heroes = 1;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroRecruit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroRecruit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroRecruit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroRecruit::MergeFrom(const HeroRecruit& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroRecruit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroRecruit::CopyFrom(const HeroRecruit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroRecruit::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->heroes())) return false;
  return true;
}

void HeroRecruit::Swap(HeroRecruit* other) {
  if (other != this) {
    heroes_.Swap(&other->heroes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroRecruit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroRecruit_descriptor_;
  metadata.reflection = HeroRecruit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TavernConfig

// @@protoc_insertion_point(global_scope)
