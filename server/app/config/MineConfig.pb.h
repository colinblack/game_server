// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MineConfig.proto

#ifndef PROTOBUF_MineConfig_2eproto__INCLUDED
#define PROTOBUF_MineConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MineConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MineConfig_2eproto();
void protobuf_AssignDesc_MineConfig_2eproto();
void protobuf_ShutdownFile_MineConfig_2eproto();

class Normal;
class Kingdom;
class MineItem;
class Mine;

// ===================================================================

class Normal : public ::google::protobuf::Message {
 public:
  Normal();
  virtual ~Normal();

  Normal(const Normal& from);

  inline Normal& operator=(const Normal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Normal& default_instance();

  void Swap(Normal* other);

  // implements Message ----------------------------------------------

  Normal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Normal& from);
  void MergeFrom(const Normal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 exp = 1;
  inline int exp_size() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::uint32 exp(int index) const;
  inline void set_exp(int index, ::google::protobuf::uint32 value);
  inline void add_exp(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      exp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_exp();

  // repeated uint32 open_cost = 2;
  inline int open_cost_size() const;
  inline void clear_open_cost();
  static const int kOpenCostFieldNumber = 2;
  inline ::google::protobuf::uint32 open_cost(int index) const;
  inline void set_open_cost(int index, ::google::protobuf::uint32 value);
  inline void add_open_cost(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      open_cost() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_open_cost();

  // repeated uint32 donate_cnt = 3;
  inline int donate_cnt_size() const;
  inline void clear_donate_cnt();
  static const int kDonateCntFieldNumber = 3;
  inline ::google::protobuf::uint32 donate_cnt(int index) const;
  inline void set_donate_cnt(int index, ::google::protobuf::uint32 value);
  inline void add_donate_cnt(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      donate_cnt() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_donate_cnt();

  // required uint32 donate_cost = 4;
  inline bool has_donate_cost() const;
  inline void clear_donate_cost();
  static const int kDonateCostFieldNumber = 4;
  inline ::google::protobuf::uint32 donate_cost() const;
  inline void set_donate_cost(::google::protobuf::uint32 value);

  // repeated uint32 harvest = 5;
  inline int harvest_size() const;
  inline void clear_harvest();
  static const int kHarvestFieldNumber = 5;
  inline ::google::protobuf::uint32 harvest(int index) const;
  inline void set_harvest(int index, ::google::protobuf::uint32 value);
  inline void add_harvest(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      harvest() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_harvest();

  // @@protoc_insertion_point(class_scope:MineConfig.Normal)
 private:
  inline void set_has_donate_cost();
  inline void clear_has_donate_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > exp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > open_cost_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > donate_cnt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > harvest_;
  ::google::protobuf::uint32 donate_cost_;
  friend void  protobuf_AddDesc_MineConfig_2eproto();
  friend void protobuf_AssignDesc_MineConfig_2eproto();
  friend void protobuf_ShutdownFile_MineConfig_2eproto();

  void InitAsDefaultInstance();
  static Normal* default_instance_;
};
// -------------------------------------------------------------------

class Kingdom : public ::google::protobuf::Message {
 public:
  Kingdom();
  virtual ~Kingdom();

  Kingdom(const Kingdom& from);

  inline Kingdom& operator=(const Kingdom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Kingdom& default_instance();

  void Swap(Kingdom* other);

  // implements Message ----------------------------------------------

  Kingdom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Kingdom& from);
  void MergeFrom(const Kingdom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 open_cost = 1;
  inline bool has_open_cost() const;
  inline void clear_open_cost();
  static const int kOpenCostFieldNumber = 1;
  inline ::google::protobuf::uint32 open_cost() const;
  inline void set_open_cost(::google::protobuf::uint32 value);

  // required uint32 donate_cnt = 2;
  inline bool has_donate_cnt() const;
  inline void clear_donate_cnt();
  static const int kDonateCntFieldNumber = 2;
  inline ::google::protobuf::uint32 donate_cnt() const;
  inline void set_donate_cnt(::google::protobuf::uint32 value);

  // required uint32 donate_cost = 3;
  inline bool has_donate_cost() const;
  inline void clear_donate_cost();
  static const int kDonateCostFieldNumber = 3;
  inline ::google::protobuf::uint32 donate_cost() const;
  inline void set_donate_cost(::google::protobuf::uint32 value);

  // required uint32 reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline ::google::protobuf::uint32 reward() const;
  inline void set_reward(::google::protobuf::uint32 value);

  // repeated uint32 harvest = 5;
  inline int harvest_size() const;
  inline void clear_harvest();
  static const int kHarvestFieldNumber = 5;
  inline ::google::protobuf::uint32 harvest(int index) const;
  inline void set_harvest(int index, ::google::protobuf::uint32 value);
  inline void add_harvest(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      harvest() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_harvest();

  // @@protoc_insertion_point(class_scope:MineConfig.Kingdom)
 private:
  inline void set_has_open_cost();
  inline void clear_has_open_cost();
  inline void set_has_donate_cnt();
  inline void clear_has_donate_cnt();
  inline void set_has_donate_cost();
  inline void clear_has_donate_cost();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 open_cost_;
  ::google::protobuf::uint32 donate_cnt_;
  ::google::protobuf::uint32 donate_cost_;
  ::google::protobuf::uint32 reward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > harvest_;
  friend void  protobuf_AddDesc_MineConfig_2eproto();
  friend void protobuf_AssignDesc_MineConfig_2eproto();
  friend void protobuf_ShutdownFile_MineConfig_2eproto();

  void InitAsDefaultInstance();
  static Kingdom* default_instance_;
};
// -------------------------------------------------------------------

class MineItem : public ::google::protobuf::Message {
 public:
  MineItem();
  virtual ~MineItem();

  MineItem(const MineItem& from);

  inline MineItem& operator=(const MineItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineItem& default_instance();

  void Swap(MineItem* other);

  // implements Message ----------------------------------------------

  MineItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineItem& from);
  void MergeFrom(const MineItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 open_exp = 1;
  inline bool has_open_exp() const;
  inline void clear_open_exp();
  static const int kOpenExpFieldNumber = 1;
  inline ::google::protobuf::uint32 open_exp() const;
  inline void set_open_exp(::google::protobuf::uint32 value);

  // required uint32 donate_exp = 2;
  inline bool has_donate_exp() const;
  inline void clear_donate_exp();
  static const int kDonateExpFieldNumber = 2;
  inline ::google::protobuf::uint32 donate_exp() const;
  inline void set_donate_exp(::google::protobuf::uint32 value);

  // required .MineConfig.Normal normal = 3;
  inline bool has_normal() const;
  inline void clear_normal();
  static const int kNormalFieldNumber = 3;
  inline const ::MineConfig::Normal& normal() const;
  inline ::MineConfig::Normal* mutable_normal();
  inline ::MineConfig::Normal* release_normal();
  inline void set_allocated_normal(::MineConfig::Normal* normal);

  // required .MineConfig.Kingdom kingdom = 4;
  inline bool has_kingdom() const;
  inline void clear_kingdom();
  static const int kKingdomFieldNumber = 4;
  inline const ::MineConfig::Kingdom& kingdom() const;
  inline ::MineConfig::Kingdom* mutable_kingdom();
  inline ::MineConfig::Kingdom* release_kingdom();
  inline void set_allocated_kingdom(::MineConfig::Kingdom* kingdom);

  // @@protoc_insertion_point(class_scope:MineConfig.MineItem)
 private:
  inline void set_has_open_exp();
  inline void clear_has_open_exp();
  inline void set_has_donate_exp();
  inline void clear_has_donate_exp();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_kingdom();
  inline void clear_has_kingdom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 open_exp_;
  ::google::protobuf::uint32 donate_exp_;
  ::MineConfig::Normal* normal_;
  ::MineConfig::Kingdom* kingdom_;
  friend void  protobuf_AddDesc_MineConfig_2eproto();
  friend void protobuf_AssignDesc_MineConfig_2eproto();
  friend void protobuf_ShutdownFile_MineConfig_2eproto();

  void InitAsDefaultInstance();
  static MineItem* default_instance_;
};
// -------------------------------------------------------------------

class Mine : public ::google::protobuf::Message {
 public:
  Mine();
  virtual ~Mine();

  Mine(const Mine& from);

  inline Mine& operator=(const Mine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mine& default_instance();

  void Swap(Mine* other);

  // implements Message ----------------------------------------------

  Mine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mine& from);
  void MergeFrom(const Mine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MineConfig.MineItem mine = 1;
  inline bool has_mine() const;
  inline void clear_mine();
  static const int kMineFieldNumber = 1;
  inline const ::MineConfig::MineItem& mine() const;
  inline ::MineConfig::MineItem* mutable_mine();
  inline ::MineConfig::MineItem* release_mine();
  inline void set_allocated_mine(::MineConfig::MineItem* mine);

  // @@protoc_insertion_point(class_scope:MineConfig.Mine)
 private:
  inline void set_has_mine();
  inline void clear_has_mine();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MineConfig::MineItem* mine_;
  friend void  protobuf_AddDesc_MineConfig_2eproto();
  friend void protobuf_AssignDesc_MineConfig_2eproto();
  friend void protobuf_ShutdownFile_MineConfig_2eproto();

  void InitAsDefaultInstance();
  static Mine* default_instance_;
};
// ===================================================================


// ===================================================================

// Normal

// repeated uint32 exp = 1;
inline int Normal::exp_size() const {
  return exp_.size();
}
inline void Normal::clear_exp() {
  exp_.Clear();
}
inline ::google::protobuf::uint32 Normal::exp(int index) const {
  // @@protoc_insertion_point(field_get:MineConfig.Normal.exp)
  return exp_.Get(index);
}
inline void Normal::set_exp(int index, ::google::protobuf::uint32 value) {
  exp_.Set(index, value);
  // @@protoc_insertion_point(field_set:MineConfig.Normal.exp)
}
inline void Normal::add_exp(::google::protobuf::uint32 value) {
  exp_.Add(value);
  // @@protoc_insertion_point(field_add:MineConfig.Normal.exp)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Normal::exp() const {
  // @@protoc_insertion_point(field_list:MineConfig.Normal.exp)
  return exp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Normal::mutable_exp() {
  // @@protoc_insertion_point(field_mutable_list:MineConfig.Normal.exp)
  return &exp_;
}

// repeated uint32 open_cost = 2;
inline int Normal::open_cost_size() const {
  return open_cost_.size();
}
inline void Normal::clear_open_cost() {
  open_cost_.Clear();
}
inline ::google::protobuf::uint32 Normal::open_cost(int index) const {
  // @@protoc_insertion_point(field_get:MineConfig.Normal.open_cost)
  return open_cost_.Get(index);
}
inline void Normal::set_open_cost(int index, ::google::protobuf::uint32 value) {
  open_cost_.Set(index, value);
  // @@protoc_insertion_point(field_set:MineConfig.Normal.open_cost)
}
inline void Normal::add_open_cost(::google::protobuf::uint32 value) {
  open_cost_.Add(value);
  // @@protoc_insertion_point(field_add:MineConfig.Normal.open_cost)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Normal::open_cost() const {
  // @@protoc_insertion_point(field_list:MineConfig.Normal.open_cost)
  return open_cost_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Normal::mutable_open_cost() {
  // @@protoc_insertion_point(field_mutable_list:MineConfig.Normal.open_cost)
  return &open_cost_;
}

// repeated uint32 donate_cnt = 3;
inline int Normal::donate_cnt_size() const {
  return donate_cnt_.size();
}
inline void Normal::clear_donate_cnt() {
  donate_cnt_.Clear();
}
inline ::google::protobuf::uint32 Normal::donate_cnt(int index) const {
  // @@protoc_insertion_point(field_get:MineConfig.Normal.donate_cnt)
  return donate_cnt_.Get(index);
}
inline void Normal::set_donate_cnt(int index, ::google::protobuf::uint32 value) {
  donate_cnt_.Set(index, value);
  // @@protoc_insertion_point(field_set:MineConfig.Normal.donate_cnt)
}
inline void Normal::add_donate_cnt(::google::protobuf::uint32 value) {
  donate_cnt_.Add(value);
  // @@protoc_insertion_point(field_add:MineConfig.Normal.donate_cnt)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Normal::donate_cnt() const {
  // @@protoc_insertion_point(field_list:MineConfig.Normal.donate_cnt)
  return donate_cnt_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Normal::mutable_donate_cnt() {
  // @@protoc_insertion_point(field_mutable_list:MineConfig.Normal.donate_cnt)
  return &donate_cnt_;
}

// required uint32 donate_cost = 4;
inline bool Normal::has_donate_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Normal::set_has_donate_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Normal::clear_has_donate_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Normal::clear_donate_cost() {
  donate_cost_ = 0u;
  clear_has_donate_cost();
}
inline ::google::protobuf::uint32 Normal::donate_cost() const {
  // @@protoc_insertion_point(field_get:MineConfig.Normal.donate_cost)
  return donate_cost_;
}
inline void Normal::set_donate_cost(::google::protobuf::uint32 value) {
  set_has_donate_cost();
  donate_cost_ = value;
  // @@protoc_insertion_point(field_set:MineConfig.Normal.donate_cost)
}

// repeated uint32 harvest = 5;
inline int Normal::harvest_size() const {
  return harvest_.size();
}
inline void Normal::clear_harvest() {
  harvest_.Clear();
}
inline ::google::protobuf::uint32 Normal::harvest(int index) const {
  // @@protoc_insertion_point(field_get:MineConfig.Normal.harvest)
  return harvest_.Get(index);
}
inline void Normal::set_harvest(int index, ::google::protobuf::uint32 value) {
  harvest_.Set(index, value);
  // @@protoc_insertion_point(field_set:MineConfig.Normal.harvest)
}
inline void Normal::add_harvest(::google::protobuf::uint32 value) {
  harvest_.Add(value);
  // @@protoc_insertion_point(field_add:MineConfig.Normal.harvest)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Normal::harvest() const {
  // @@protoc_insertion_point(field_list:MineConfig.Normal.harvest)
  return harvest_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Normal::mutable_harvest() {
  // @@protoc_insertion_point(field_mutable_list:MineConfig.Normal.harvest)
  return &harvest_;
}

// -------------------------------------------------------------------

// Kingdom

// required uint32 open_cost = 1;
inline bool Kingdom::has_open_cost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Kingdom::set_has_open_cost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Kingdom::clear_has_open_cost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Kingdom::clear_open_cost() {
  open_cost_ = 0u;
  clear_has_open_cost();
}
inline ::google::protobuf::uint32 Kingdom::open_cost() const {
  // @@protoc_insertion_point(field_get:MineConfig.Kingdom.open_cost)
  return open_cost_;
}
inline void Kingdom::set_open_cost(::google::protobuf::uint32 value) {
  set_has_open_cost();
  open_cost_ = value;
  // @@protoc_insertion_point(field_set:MineConfig.Kingdom.open_cost)
}

// required uint32 donate_cnt = 2;
inline bool Kingdom::has_donate_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Kingdom::set_has_donate_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Kingdom::clear_has_donate_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Kingdom::clear_donate_cnt() {
  donate_cnt_ = 0u;
  clear_has_donate_cnt();
}
inline ::google::protobuf::uint32 Kingdom::donate_cnt() const {
  // @@protoc_insertion_point(field_get:MineConfig.Kingdom.donate_cnt)
  return donate_cnt_;
}
inline void Kingdom::set_donate_cnt(::google::protobuf::uint32 value) {
  set_has_donate_cnt();
  donate_cnt_ = value;
  // @@protoc_insertion_point(field_set:MineConfig.Kingdom.donate_cnt)
}

// required uint32 donate_cost = 3;
inline bool Kingdom::has_donate_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Kingdom::set_has_donate_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Kingdom::clear_has_donate_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Kingdom::clear_donate_cost() {
  donate_cost_ = 0u;
  clear_has_donate_cost();
}
inline ::google::protobuf::uint32 Kingdom::donate_cost() const {
  // @@protoc_insertion_point(field_get:MineConfig.Kingdom.donate_cost)
  return donate_cost_;
}
inline void Kingdom::set_donate_cost(::google::protobuf::uint32 value) {
  set_has_donate_cost();
  donate_cost_ = value;
  // @@protoc_insertion_point(field_set:MineConfig.Kingdom.donate_cost)
}

// required uint32 reward = 4;
inline bool Kingdom::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Kingdom::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Kingdom::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Kingdom::clear_reward() {
  reward_ = 0u;
  clear_has_reward();
}
inline ::google::protobuf::uint32 Kingdom::reward() const {
  // @@protoc_insertion_point(field_get:MineConfig.Kingdom.reward)
  return reward_;
}
inline void Kingdom::set_reward(::google::protobuf::uint32 value) {
  set_has_reward();
  reward_ = value;
  // @@protoc_insertion_point(field_set:MineConfig.Kingdom.reward)
}

// repeated uint32 harvest = 5;
inline int Kingdom::harvest_size() const {
  return harvest_.size();
}
inline void Kingdom::clear_harvest() {
  harvest_.Clear();
}
inline ::google::protobuf::uint32 Kingdom::harvest(int index) const {
  // @@protoc_insertion_point(field_get:MineConfig.Kingdom.harvest)
  return harvest_.Get(index);
}
inline void Kingdom::set_harvest(int index, ::google::protobuf::uint32 value) {
  harvest_.Set(index, value);
  // @@protoc_insertion_point(field_set:MineConfig.Kingdom.harvest)
}
inline void Kingdom::add_harvest(::google::protobuf::uint32 value) {
  harvest_.Add(value);
  // @@protoc_insertion_point(field_add:MineConfig.Kingdom.harvest)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Kingdom::harvest() const {
  // @@protoc_insertion_point(field_list:MineConfig.Kingdom.harvest)
  return harvest_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Kingdom::mutable_harvest() {
  // @@protoc_insertion_point(field_mutable_list:MineConfig.Kingdom.harvest)
  return &harvest_;
}

// -------------------------------------------------------------------

// MineItem

// required uint32 open_exp = 1;
inline bool MineItem::has_open_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MineItem::set_has_open_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MineItem::clear_has_open_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MineItem::clear_open_exp() {
  open_exp_ = 0u;
  clear_has_open_exp();
}
inline ::google::protobuf::uint32 MineItem::open_exp() const {
  // @@protoc_insertion_point(field_get:MineConfig.MineItem.open_exp)
  return open_exp_;
}
inline void MineItem::set_open_exp(::google::protobuf::uint32 value) {
  set_has_open_exp();
  open_exp_ = value;
  // @@protoc_insertion_point(field_set:MineConfig.MineItem.open_exp)
}

// required uint32 donate_exp = 2;
inline bool MineItem::has_donate_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MineItem::set_has_donate_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MineItem::clear_has_donate_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MineItem::clear_donate_exp() {
  donate_exp_ = 0u;
  clear_has_donate_exp();
}
inline ::google::protobuf::uint32 MineItem::donate_exp() const {
  // @@protoc_insertion_point(field_get:MineConfig.MineItem.donate_exp)
  return donate_exp_;
}
inline void MineItem::set_donate_exp(::google::protobuf::uint32 value) {
  set_has_donate_exp();
  donate_exp_ = value;
  // @@protoc_insertion_point(field_set:MineConfig.MineItem.donate_exp)
}

// required .MineConfig.Normal normal = 3;
inline bool MineItem::has_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MineItem::set_has_normal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MineItem::clear_has_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MineItem::clear_normal() {
  if (normal_ != NULL) normal_->::MineConfig::Normal::Clear();
  clear_has_normal();
}
inline const ::MineConfig::Normal& MineItem::normal() const {
  // @@protoc_insertion_point(field_get:MineConfig.MineItem.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::MineConfig::Normal* MineItem::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) normal_ = new ::MineConfig::Normal;
  // @@protoc_insertion_point(field_mutable:MineConfig.MineItem.normal)
  return normal_;
}
inline ::MineConfig::Normal* MineItem::release_normal() {
  clear_has_normal();
  ::MineConfig::Normal* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void MineItem::set_allocated_normal(::MineConfig::Normal* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:MineConfig.MineItem.normal)
}

// required .MineConfig.Kingdom kingdom = 4;
inline bool MineItem::has_kingdom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MineItem::set_has_kingdom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MineItem::clear_has_kingdom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MineItem::clear_kingdom() {
  if (kingdom_ != NULL) kingdom_->::MineConfig::Kingdom::Clear();
  clear_has_kingdom();
}
inline const ::MineConfig::Kingdom& MineItem::kingdom() const {
  // @@protoc_insertion_point(field_get:MineConfig.MineItem.kingdom)
  return kingdom_ != NULL ? *kingdom_ : *default_instance_->kingdom_;
}
inline ::MineConfig::Kingdom* MineItem::mutable_kingdom() {
  set_has_kingdom();
  if (kingdom_ == NULL) kingdom_ = new ::MineConfig::Kingdom;
  // @@protoc_insertion_point(field_mutable:MineConfig.MineItem.kingdom)
  return kingdom_;
}
inline ::MineConfig::Kingdom* MineItem::release_kingdom() {
  clear_has_kingdom();
  ::MineConfig::Kingdom* temp = kingdom_;
  kingdom_ = NULL;
  return temp;
}
inline void MineItem::set_allocated_kingdom(::MineConfig::Kingdom* kingdom) {
  delete kingdom_;
  kingdom_ = kingdom;
  if (kingdom) {
    set_has_kingdom();
  } else {
    clear_has_kingdom();
  }
  // @@protoc_insertion_point(field_set_allocated:MineConfig.MineItem.kingdom)
}

// -------------------------------------------------------------------

// Mine

// required .MineConfig.MineItem mine = 1;
inline bool Mine::has_mine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mine::set_has_mine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mine::clear_has_mine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mine::clear_mine() {
  if (mine_ != NULL) mine_->::MineConfig::MineItem::Clear();
  clear_has_mine();
}
inline const ::MineConfig::MineItem& Mine::mine() const {
  // @@protoc_insertion_point(field_get:MineConfig.Mine.mine)
  return mine_ != NULL ? *mine_ : *default_instance_->mine_;
}
inline ::MineConfig::MineItem* Mine::mutable_mine() {
  set_has_mine();
  if (mine_ == NULL) mine_ = new ::MineConfig::MineItem;
  // @@protoc_insertion_point(field_mutable:MineConfig.Mine.mine)
  return mine_;
}
inline ::MineConfig::MineItem* Mine::release_mine() {
  clear_has_mine();
  ::MineConfig::MineItem* temp = mine_;
  mine_ = NULL;
  return temp;
}
inline void Mine::set_allocated_mine(::MineConfig::MineItem* mine) {
  delete mine_;
  mine_ = mine;
  if (mine) {
    set_has_mine();
  } else {
    clear_has_mine();
  }
  // @@protoc_insertion_point(field_set_allocated:MineConfig.Mine.mine)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MineConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MineConfig_2eproto__INCLUDED
