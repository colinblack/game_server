// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GovernAffair.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GovernAffair.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GovernAffairConfig {

namespace {

const ::google::protobuf::Descriptor* RewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AffairsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AffairsItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildRelationTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildRelationTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coefficients_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coefficients_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoyalReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoyalReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GovernAffairs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GovernAffairs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GovernAffair_2eproto() {
  protobuf_AddDesc_GovernAffair_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GovernAffair.proto");
  GOOGLE_CHECK(file != NULL);
  RewardItem_descriptor_ = file->message_type(0);
  static const int RewardItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, loyal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, paycash_),
  };
  RewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardItem_descriptor_,
      RewardItem::default_instance_,
      RewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardItem));
  AffairsItem_descriptor_ = file->message_type(1);
  static const int AffairsItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairsItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairsItem, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairsItem, reward_),
  };
  AffairsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AffairsItem_descriptor_,
      AffairsItem::default_instance_,
      AffairsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AffairsItem));
  BuildRelationTimes_descriptor_ = file->message_type(2);
  static const int BuildRelationTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildRelationTimes, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildRelationTimes, sublevelsum_),
  };
  BuildRelationTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildRelationTimes_descriptor_,
      BuildRelationTimes::default_instance_,
      BuildRelationTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildRelationTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildRelationTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildRelationTimes));
  Coefficients_descriptor_ = file->message_type(3);
  static const int Coefficients_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, levelrange_),
  };
  Coefficients_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coefficients_descriptor_,
      Coefficients::default_instance_,
      Coefficients_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coefficients, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coefficients));
  LoyalReward_descriptor_ = file->message_type(4);
  static const int LoyalReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalReward, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalReward, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalReward, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalReward, iron_),
  };
  LoyalReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoyalReward_descriptor_,
      LoyalReward::default_instance_,
      LoyalReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoyalReward));
  GovernAffairs_descriptor_ = file->message_type(5);
  static const int GovernAffairs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GovernAffairs, govern_affairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GovernAffairs, build_affairtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GovernAffairs, coefficients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GovernAffairs, loyal_reward_),
  };
  GovernAffairs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GovernAffairs_descriptor_,
      GovernAffairs::default_instance_,
      GovernAffairs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GovernAffairs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GovernAffairs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GovernAffairs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GovernAffair_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardItem_descriptor_, &RewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AffairsItem_descriptor_, &AffairsItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildRelationTimes_descriptor_, &BuildRelationTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coefficients_descriptor_, &Coefficients::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoyalReward_descriptor_, &LoyalReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GovernAffairs_descriptor_, &GovernAffairs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GovernAffair_2eproto() {
  delete RewardItem::default_instance_;
  delete RewardItem_reflection_;
  delete AffairsItem::default_instance_;
  delete AffairsItem_reflection_;
  delete BuildRelationTimes::default_instance_;
  delete BuildRelationTimes_reflection_;
  delete Coefficients::default_instance_;
  delete Coefficients_reflection_;
  delete LoyalReward::default_instance_;
  delete LoyalReward_reflection_;
  delete GovernAffairs::default_instance_;
  delete GovernAffairs_reflection_;
}

void protobuf_AddDesc_GovernAffair_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022GovernAffair.proto\022\022GovernAffairConfig"
    "\"V\n\nRewardItem\022\014\n\004coin\030\001 \001(\r\022\014\n\004wood\030\002 \001"
    "(\r\022\014\n\004food\030\003 \001(\r\022\r\n\005loyal\030\004 \001(\r\022\017\n\007payca"
    "sh\030\005 \001(\r\"W\n\013AffairsItem\022\n\n\002id\030\001 \002(\r\022\014\n\004r"
    "ate\030\002 \002(\r\022.\n\006reward\030\003 \003(\0132\036.GovernAffair"
    "Config.RewardItem\"7\n\022BuildRelationTimes\022"
    "\014\n\004type\030\001 \002(\r\022\023\n\013sublevelsum\030\002 \003(\r\"7\n\014Co"
    "efficients\022\023\n\013coefficient\030\001 \002(\r\022\022\n\nlevel"
    "range\030\002 \003(\r\"E\n\013LoyalReward\022\014\n\004coin\030\001 \002(\r"
    "\022\014\n\004wood\030\002 \002(\r\022\014\n\004food\030\003 \002(\r\022\014\n\004iron\030\004 \002"
    "(\r\"\372\001\n\rGovernAffairs\0227\n\016govern_affairs\030\001"
    " \003(\0132\037.GovernAffairConfig.AffairsItem\022A\n"
    "\021build_affairtimes\030\002 \003(\0132&.GovernAffairC"
    "onfig.BuildRelationTimes\0226\n\014coefficients"
    "\030\003 \003(\0132 .GovernAffairConfig.Coefficients"
    "\0225\n\014loyal_reward\030\004 \002(\0132\037.GovernAffairCon"
    "fig.LoyalReward", 655);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GovernAffair.proto", &protobuf_RegisterTypes);
  RewardItem::default_instance_ = new RewardItem();
  AffairsItem::default_instance_ = new AffairsItem();
  BuildRelationTimes::default_instance_ = new BuildRelationTimes();
  Coefficients::default_instance_ = new Coefficients();
  LoyalReward::default_instance_ = new LoyalReward();
  GovernAffairs::default_instance_ = new GovernAffairs();
  RewardItem::default_instance_->InitAsDefaultInstance();
  AffairsItem::default_instance_->InitAsDefaultInstance();
  BuildRelationTimes::default_instance_->InitAsDefaultInstance();
  Coefficients::default_instance_->InitAsDefaultInstance();
  LoyalReward::default_instance_->InitAsDefaultInstance();
  GovernAffairs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GovernAffair_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GovernAffair_2eproto {
  StaticDescriptorInitializer_GovernAffair_2eproto() {
    protobuf_AddDesc_GovernAffair_2eproto();
  }
} static_descriptor_initializer_GovernAffair_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RewardItem::kCoinFieldNumber;
const int RewardItem::kWoodFieldNumber;
const int RewardItem::kFoodFieldNumber;
const int RewardItem::kLoyalFieldNumber;
const int RewardItem::kPaycashFieldNumber;
#endif  // !_MSC_VER

RewardItem::RewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GovernAffairConfig.RewardItem)
}

void RewardItem::InitAsDefaultInstance() {
}

RewardItem::RewardItem(const RewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GovernAffairConfig.RewardItem)
}

void RewardItem::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  wood_ = 0u;
  food_ = 0u;
  loyal_ = 0u;
  paycash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardItem::~RewardItem() {
  // @@protoc_insertion_point(destructor:GovernAffairConfig.RewardItem)
  SharedDtor();
}

void RewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardItem_descriptor_;
}

const RewardItem& RewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GovernAffair_2eproto();
  return *default_instance_;
}

RewardItem* RewardItem::default_instance_ = NULL;

RewardItem* RewardItem::New() const {
  return new RewardItem;
}

void RewardItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(coin_, paycash_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GovernAffairConfig.RewardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 coin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wood;
        break;
      }

      // optional uint32 wood = 2;
      case 2: {
        if (tag == 16) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_food;
        break;
      }

      // optional uint32 food = 3;
      case 3: {
        if (tag == 24) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_loyal;
        break;
      }

      // optional uint32 loyal = 4;
      case 4: {
        if (tag == 32) {
         parse_loyal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loyal_)));
          set_has_loyal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_paycash;
        break;
      }

      // optional uint32 paycash = 5;
      case 5: {
        if (tag == 40) {
         parse_paycash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paycash_)));
          set_has_paycash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GovernAffairConfig.RewardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GovernAffairConfig.RewardItem)
  return false;
#undef DO_
}

void RewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GovernAffairConfig.RewardItem)
  // optional uint32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // optional uint32 wood = 2;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wood(), output);
  }

  // optional uint32 food = 3;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->food(), output);
  }

  // optional uint32 loyal = 4;
  if (has_loyal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->loyal(), output);
  }

  // optional uint32 paycash = 5;
  if (has_paycash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->paycash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GovernAffairConfig.RewardItem)
}

::google::protobuf::uint8* RewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GovernAffairConfig.RewardItem)
  // optional uint32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coin(), target);
  }

  // optional uint32 wood = 2;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wood(), target);
  }

  // optional uint32 food = 3;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->food(), target);
  }

  // optional uint32 loyal = 4;
  if (has_loyal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->loyal(), target);
  }

  // optional uint32 paycash = 5;
  if (has_paycash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->paycash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GovernAffairConfig.RewardItem)
  return target;
}

int RewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 wood = 2;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // optional uint32 food = 3;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // optional uint32 loyal = 4;
    if (has_loyal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loyal());
    }

    // optional uint32 paycash = 5;
    if (has_paycash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paycash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardItem::MergeFrom(const RewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_loyal()) {
      set_loyal(from.loyal());
    }
    if (from.has_paycash()) {
      set_paycash(from.paycash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardItem::CopyFrom(const RewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardItem::IsInitialized() const {

  return true;
}

void RewardItem::Swap(RewardItem* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(loyal_, other->loyal_);
    std::swap(paycash_, other->paycash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardItem_descriptor_;
  metadata.reflection = RewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AffairsItem::kIdFieldNumber;
const int AffairsItem::kRateFieldNumber;
const int AffairsItem::kRewardFieldNumber;
#endif  // !_MSC_VER

AffairsItem::AffairsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GovernAffairConfig.AffairsItem)
}

void AffairsItem::InitAsDefaultInstance() {
}

AffairsItem::AffairsItem(const AffairsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GovernAffairConfig.AffairsItem)
}

void AffairsItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AffairsItem::~AffairsItem() {
  // @@protoc_insertion_point(destructor:GovernAffairConfig.AffairsItem)
  SharedDtor();
}

void AffairsItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AffairsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AffairsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AffairsItem_descriptor_;
}

const AffairsItem& AffairsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GovernAffair_2eproto();
  return *default_instance_;
}

AffairsItem* AffairsItem::default_instance_ = NULL;

AffairsItem* AffairsItem::New() const {
  return new AffairsItem;
}

void AffairsItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AffairsItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AffairsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GovernAffairConfig.AffairsItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rate;
        break;
      }

      // required uint32 rate = 2;
      case 2: {
        if (tag == 16) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .GovernAffairConfig.RewardItem reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GovernAffairConfig.AffairsItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GovernAffairConfig.AffairsItem)
  return false;
#undef DO_
}

void AffairsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GovernAffairConfig.AffairsItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 rate = 2;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rate(), output);
  }

  // repeated .GovernAffairConfig.RewardItem reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GovernAffairConfig.AffairsItem)
}

::google::protobuf::uint8* AffairsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GovernAffairConfig.AffairsItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 rate = 2;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rate(), target);
  }

  // repeated .GovernAffairConfig.RewardItem reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GovernAffairConfig.AffairsItem)
  return target;
}

int AffairsItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 rate = 2;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rate());
    }

  }
  // repeated .GovernAffairConfig.RewardItem reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AffairsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AffairsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AffairsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AffairsItem::MergeFrom(const AffairsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AffairsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffairsItem::CopyFrom(const AffairsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffairsItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AffairsItem::Swap(AffairsItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rate_, other->rate_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AffairsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AffairsItem_descriptor_;
  metadata.reflection = AffairsItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildRelationTimes::kTypeFieldNumber;
const int BuildRelationTimes::kSublevelsumFieldNumber;
#endif  // !_MSC_VER

BuildRelationTimes::BuildRelationTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GovernAffairConfig.BuildRelationTimes)
}

void BuildRelationTimes::InitAsDefaultInstance() {
}

BuildRelationTimes::BuildRelationTimes(const BuildRelationTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GovernAffairConfig.BuildRelationTimes)
}

void BuildRelationTimes::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildRelationTimes::~BuildRelationTimes() {
  // @@protoc_insertion_point(destructor:GovernAffairConfig.BuildRelationTimes)
  SharedDtor();
}

void BuildRelationTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildRelationTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildRelationTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildRelationTimes_descriptor_;
}

const BuildRelationTimes& BuildRelationTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GovernAffair_2eproto();
  return *default_instance_;
}

BuildRelationTimes* BuildRelationTimes::default_instance_ = NULL;

BuildRelationTimes* BuildRelationTimes::New() const {
  return new BuildRelationTimes;
}

void BuildRelationTimes::Clear() {
  type_ = 0u;
  sublevelsum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildRelationTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GovernAffairConfig.BuildRelationTimes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sublevelsum;
        break;
      }

      // repeated uint32 sublevelsum = 2;
      case 2: {
        if (tag == 16) {
         parse_sublevelsum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_sublevelsum())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sublevelsum())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sublevelsum;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GovernAffairConfig.BuildRelationTimes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GovernAffairConfig.BuildRelationTimes)
  return false;
#undef DO_
}

void BuildRelationTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GovernAffairConfig.BuildRelationTimes)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated uint32 sublevelsum = 2;
  for (int i = 0; i < this->sublevelsum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->sublevelsum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GovernAffairConfig.BuildRelationTimes)
}

::google::protobuf::uint8* BuildRelationTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GovernAffairConfig.BuildRelationTimes)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated uint32 sublevelsum = 2;
  for (int i = 0; i < this->sublevelsum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->sublevelsum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GovernAffairConfig.BuildRelationTimes)
  return target;
}

int BuildRelationTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated uint32 sublevelsum = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->sublevelsum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sublevelsum(i));
    }
    total_size += 1 * this->sublevelsum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildRelationTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildRelationTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildRelationTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildRelationTimes::MergeFrom(const BuildRelationTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  sublevelsum_.MergeFrom(from.sublevelsum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildRelationTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildRelationTimes::CopyFrom(const BuildRelationTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildRelationTimes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildRelationTimes::Swap(BuildRelationTimes* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    sublevelsum_.Swap(&other->sublevelsum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildRelationTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildRelationTimes_descriptor_;
  metadata.reflection = BuildRelationTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coefficients::kCoefficientFieldNumber;
const int Coefficients::kLevelrangeFieldNumber;
#endif  // !_MSC_VER

Coefficients::Coefficients()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GovernAffairConfig.Coefficients)
}

void Coefficients::InitAsDefaultInstance() {
}

Coefficients::Coefficients(const Coefficients& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GovernAffairConfig.Coefficients)
}

void Coefficients::SharedCtor() {
  _cached_size_ = 0;
  coefficient_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coefficients::~Coefficients() {
  // @@protoc_insertion_point(destructor:GovernAffairConfig.Coefficients)
  SharedDtor();
}

void Coefficients::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Coefficients::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coefficients::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coefficients_descriptor_;
}

const Coefficients& Coefficients::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GovernAffair_2eproto();
  return *default_instance_;
}

Coefficients* Coefficients::default_instance_ = NULL;

Coefficients* Coefficients::New() const {
  return new Coefficients;
}

void Coefficients::Clear() {
  coefficient_ = 0u;
  levelrange_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coefficients::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GovernAffairConfig.Coefficients)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coefficient = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coefficient_)));
          set_has_coefficient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_levelrange;
        break;
      }

      // repeated uint32 levelrange = 2;
      case 2: {
        if (tag == 16) {
         parse_levelrange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_levelrange())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_levelrange())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_levelrange;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GovernAffairConfig.Coefficients)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GovernAffairConfig.Coefficients)
  return false;
#undef DO_
}

void Coefficients::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GovernAffairConfig.Coefficients)
  // required uint32 coefficient = 1;
  if (has_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coefficient(), output);
  }

  // repeated uint32 levelrange = 2;
  for (int i = 0; i < this->levelrange_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->levelrange(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GovernAffairConfig.Coefficients)
}

::google::protobuf::uint8* Coefficients::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GovernAffairConfig.Coefficients)
  // required uint32 coefficient = 1;
  if (has_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coefficient(), target);
  }

  // repeated uint32 levelrange = 2;
  for (int i = 0; i < this->levelrange_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->levelrange(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GovernAffairConfig.Coefficients)
  return target;
}

int Coefficients::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coefficient = 1;
    if (has_coefficient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coefficient());
    }

  }
  // repeated uint32 levelrange = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->levelrange_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->levelrange(i));
    }
    total_size += 1 * this->levelrange_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coefficients::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coefficients* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coefficients*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coefficients::MergeFrom(const Coefficients& from) {
  GOOGLE_CHECK_NE(&from, this);
  levelrange_.MergeFrom(from.levelrange_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coefficient()) {
      set_coefficient(from.coefficient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coefficients::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coefficients::CopyFrom(const Coefficients& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coefficients::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Coefficients::Swap(Coefficients* other) {
  if (other != this) {
    std::swap(coefficient_, other->coefficient_);
    levelrange_.Swap(&other->levelrange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coefficients::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coefficients_descriptor_;
  metadata.reflection = Coefficients_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoyalReward::kCoinFieldNumber;
const int LoyalReward::kWoodFieldNumber;
const int LoyalReward::kFoodFieldNumber;
const int LoyalReward::kIronFieldNumber;
#endif  // !_MSC_VER

LoyalReward::LoyalReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GovernAffairConfig.LoyalReward)
}

void LoyalReward::InitAsDefaultInstance() {
}

LoyalReward::LoyalReward(const LoyalReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GovernAffairConfig.LoyalReward)
}

void LoyalReward::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  wood_ = 0u;
  food_ = 0u;
  iron_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoyalReward::~LoyalReward() {
  // @@protoc_insertion_point(destructor:GovernAffairConfig.LoyalReward)
  SharedDtor();
}

void LoyalReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoyalReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoyalReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoyalReward_descriptor_;
}

const LoyalReward& LoyalReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GovernAffair_2eproto();
  return *default_instance_;
}

LoyalReward* LoyalReward::default_instance_ = NULL;

LoyalReward* LoyalReward::New() const {
  return new LoyalReward;
}

void LoyalReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoyalReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(coin_, iron_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoyalReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GovernAffairConfig.LoyalReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wood;
        break;
      }

      // required uint32 wood = 2;
      case 2: {
        if (tag == 16) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_food;
        break;
      }

      // required uint32 food = 3;
      case 3: {
        if (tag == 24) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iron;
        break;
      }

      // required uint32 iron = 4;
      case 4: {
        if (tag == 32) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GovernAffairConfig.LoyalReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GovernAffairConfig.LoyalReward)
  return false;
#undef DO_
}

void LoyalReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GovernAffairConfig.LoyalReward)
  // required uint32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // required uint32 wood = 2;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wood(), output);
  }

  // required uint32 food = 3;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->food(), output);
  }

  // required uint32 iron = 4;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iron(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GovernAffairConfig.LoyalReward)
}

::google::protobuf::uint8* LoyalReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GovernAffairConfig.LoyalReward)
  // required uint32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coin(), target);
  }

  // required uint32 wood = 2;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wood(), target);
  }

  // required uint32 food = 3;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->food(), target);
  }

  // required uint32 iron = 4;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->iron(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GovernAffairConfig.LoyalReward)
  return target;
}

int LoyalReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 wood = 2;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // required uint32 food = 3;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // required uint32 iron = 4;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoyalReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoyalReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoyalReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoyalReward::MergeFrom(const LoyalReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoyalReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoyalReward::CopyFrom(const LoyalReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoyalReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LoyalReward::Swap(LoyalReward* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoyalReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoyalReward_descriptor_;
  metadata.reflection = LoyalReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GovernAffairs::kGovernAffairsFieldNumber;
const int GovernAffairs::kBuildAffairtimesFieldNumber;
const int GovernAffairs::kCoefficientsFieldNumber;
const int GovernAffairs::kLoyalRewardFieldNumber;
#endif  // !_MSC_VER

GovernAffairs::GovernAffairs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GovernAffairConfig.GovernAffairs)
}

void GovernAffairs::InitAsDefaultInstance() {
  loyal_reward_ = const_cast< ::GovernAffairConfig::LoyalReward*>(&::GovernAffairConfig::LoyalReward::default_instance());
}

GovernAffairs::GovernAffairs(const GovernAffairs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GovernAffairConfig.GovernAffairs)
}

void GovernAffairs::SharedCtor() {
  _cached_size_ = 0;
  loyal_reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GovernAffairs::~GovernAffairs() {
  // @@protoc_insertion_point(destructor:GovernAffairConfig.GovernAffairs)
  SharedDtor();
}

void GovernAffairs::SharedDtor() {
  if (this != default_instance_) {
    delete loyal_reward_;
  }
}

void GovernAffairs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GovernAffairs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GovernAffairs_descriptor_;
}

const GovernAffairs& GovernAffairs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GovernAffair_2eproto();
  return *default_instance_;
}

GovernAffairs* GovernAffairs::default_instance_ = NULL;

GovernAffairs* GovernAffairs::New() const {
  return new GovernAffairs;
}

void GovernAffairs::Clear() {
  if (has_loyal_reward()) {
    if (loyal_reward_ != NULL) loyal_reward_->::GovernAffairConfig::LoyalReward::Clear();
  }
  govern_affairs_.Clear();
  build_affairtimes_.Clear();
  coefficients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GovernAffairs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GovernAffairConfig.GovernAffairs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GovernAffairConfig.AffairsItem govern_affairs = 1;
      case 1: {
        if (tag == 10) {
         parse_govern_affairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_govern_affairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_govern_affairs;
        if (input->ExpectTag(18)) goto parse_build_affairtimes;
        break;
      }

      // repeated .GovernAffairConfig.BuildRelationTimes build_affairtimes = 2;
      case 2: {
        if (tag == 18) {
         parse_build_affairtimes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_build_affairtimes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_build_affairtimes;
        if (input->ExpectTag(26)) goto parse_coefficients;
        break;
      }

      // repeated .GovernAffairConfig.Coefficients coefficients = 3;
      case 3: {
        if (tag == 26) {
         parse_coefficients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coefficients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coefficients;
        if (input->ExpectTag(34)) goto parse_loyal_reward;
        break;
      }

      // required .GovernAffairConfig.LoyalReward loyal_reward = 4;
      case 4: {
        if (tag == 34) {
         parse_loyal_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loyal_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GovernAffairConfig.GovernAffairs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GovernAffairConfig.GovernAffairs)
  return false;
#undef DO_
}

void GovernAffairs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GovernAffairConfig.GovernAffairs)
  // repeated .GovernAffairConfig.AffairsItem govern_affairs = 1;
  for (int i = 0; i < this->govern_affairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->govern_affairs(i), output);
  }

  // repeated .GovernAffairConfig.BuildRelationTimes build_affairtimes = 2;
  for (int i = 0; i < this->build_affairtimes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->build_affairtimes(i), output);
  }

  // repeated .GovernAffairConfig.Coefficients coefficients = 3;
  for (int i = 0; i < this->coefficients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coefficients(i), output);
  }

  // required .GovernAffairConfig.LoyalReward loyal_reward = 4;
  if (has_loyal_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->loyal_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GovernAffairConfig.GovernAffairs)
}

::google::protobuf::uint8* GovernAffairs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GovernAffairConfig.GovernAffairs)
  // repeated .GovernAffairConfig.AffairsItem govern_affairs = 1;
  for (int i = 0; i < this->govern_affairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->govern_affairs(i), target);
  }

  // repeated .GovernAffairConfig.BuildRelationTimes build_affairtimes = 2;
  for (int i = 0; i < this->build_affairtimes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->build_affairtimes(i), target);
  }

  // repeated .GovernAffairConfig.Coefficients coefficients = 3;
  for (int i = 0; i < this->coefficients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coefficients(i), target);
  }

  // required .GovernAffairConfig.LoyalReward loyal_reward = 4;
  if (has_loyal_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->loyal_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GovernAffairConfig.GovernAffairs)
  return target;
}

int GovernAffairs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required .GovernAffairConfig.LoyalReward loyal_reward = 4;
    if (has_loyal_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loyal_reward());
    }

  }
  // repeated .GovernAffairConfig.AffairsItem govern_affairs = 1;
  total_size += 1 * this->govern_affairs_size();
  for (int i = 0; i < this->govern_affairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->govern_affairs(i));
  }

  // repeated .GovernAffairConfig.BuildRelationTimes build_affairtimes = 2;
  total_size += 1 * this->build_affairtimes_size();
  for (int i = 0; i < this->build_affairtimes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->build_affairtimes(i));
  }

  // repeated .GovernAffairConfig.Coefficients coefficients = 3;
  total_size += 1 * this->coefficients_size();
  for (int i = 0; i < this->coefficients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coefficients(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GovernAffairs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GovernAffairs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GovernAffairs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GovernAffairs::MergeFrom(const GovernAffairs& from) {
  GOOGLE_CHECK_NE(&from, this);
  govern_affairs_.MergeFrom(from.govern_affairs_);
  build_affairtimes_.MergeFrom(from.build_affairtimes_);
  coefficients_.MergeFrom(from.coefficients_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_loyal_reward()) {
      mutable_loyal_reward()->::GovernAffairConfig::LoyalReward::MergeFrom(from.loyal_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GovernAffairs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GovernAffairs::CopyFrom(const GovernAffairs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GovernAffairs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->govern_affairs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->build_affairtimes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->coefficients())) return false;
  if (has_loyal_reward()) {
    if (!this->loyal_reward().IsInitialized()) return false;
  }
  return true;
}

void GovernAffairs::Swap(GovernAffairs* other) {
  if (other != this) {
    govern_affairs_.Swap(&other->govern_affairs_);
    build_affairtimes_.Swap(&other->build_affairtimes_);
    coefficients_.Swap(&other->coefficients_);
    std::swap(loyal_reward_, other->loyal_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GovernAffairs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GovernAffairs_descriptor_;
  metadata.reflection = GovernAffairs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GovernAffairConfig

// @@protoc_insertion_point(global_scope)
