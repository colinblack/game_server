// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShakeDiceConfig.proto

#ifndef PROTOBUF_ShakeDiceConfig_2eproto__INCLUDED
#define PROTOBUF_ShakeDiceConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "RewardConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace ShakeDiceConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ShakeDiceConfig_2eproto();
void protobuf_AssignDesc_ShakeDiceConfig_2eproto();
void protobuf_ShutdownFile_ShakeDiceConfig_2eproto();

class PointReward;
class MapInfo;
class OpenPlatformMap;
class ShakeDice;
class ShakeDiceAll;

// ===================================================================

class PointReward : public ::google::protobuf::Message {
 public:
  PointReward();
  virtual ~PointReward();

  PointReward(const PointReward& from);

  inline PointReward& operator=(const PointReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointReward& default_instance();

  void Swap(PointReward* other);

  // implements Message ----------------------------------------------

  PointReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointReward& from);
  void MergeFrom(const PointReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // repeated .RewardConfig.Reward reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::Reward& reward(int index) const;
  inline ::RewardConfig::Reward* mutable_reward(int index);
  inline ::RewardConfig::Reward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:ShakeDiceConfig.PointReward)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward > reward_;
  ::google::protobuf::uint32 pid_;
  friend void  protobuf_AddDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_AssignDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_ShutdownFile_ShakeDiceConfig_2eproto();

  void InitAsDefaultInstance();
  static PointReward* default_instance_;
};
// -------------------------------------------------------------------

class MapInfo : public ::google::protobuf::Message {
 public:
  MapInfo();
  virtual ~MapInfo();

  MapInfo(const MapInfo& from);

  inline MapInfo& operator=(const MapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapInfo& default_instance();

  void Swap(MapInfo* other);

  // implements Message ----------------------------------------------

  MapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapInfo& from);
  void MergeFrom(const MapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 points = 2;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 2;
  inline ::google::protobuf::uint32 points() const;
  inline void set_points(::google::protobuf::uint32 value);

  // repeated .RewardConfig.Reward extra_reward = 3;
  inline int extra_reward_size() const;
  inline void clear_extra_reward();
  static const int kExtraRewardFieldNumber = 3;
  inline const ::RewardConfig::Reward& extra_reward(int index) const;
  inline ::RewardConfig::Reward* mutable_extra_reward(int index);
  inline ::RewardConfig::Reward* add_extra_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
      extra_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
      mutable_extra_reward();

  // repeated .ShakeDiceConfig.PointReward points_reward = 4;
  inline int points_reward_size() const;
  inline void clear_points_reward();
  static const int kPointsRewardFieldNumber = 4;
  inline const ::ShakeDiceConfig::PointReward& points_reward(int index) const;
  inline ::ShakeDiceConfig::PointReward* mutable_points_reward(int index);
  inline ::ShakeDiceConfig::PointReward* add_points_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::PointReward >&
      points_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::PointReward >*
      mutable_points_reward();

  // @@protoc_insertion_point(class_scope:ShakeDiceConfig.MapInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_points();
  inline void clear_has_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 points_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward > extra_reward_;
  ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::PointReward > points_reward_;
  friend void  protobuf_AddDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_AssignDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_ShutdownFile_ShakeDiceConfig_2eproto();

  void InitAsDefaultInstance();
  static MapInfo* default_instance_;
};
// -------------------------------------------------------------------

class OpenPlatformMap : public ::google::protobuf::Message {
 public:
  OpenPlatformMap();
  virtual ~OpenPlatformMap();

  OpenPlatformMap(const OpenPlatformMap& from);

  inline OpenPlatformMap& operator=(const OpenPlatformMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenPlatformMap& default_instance();

  void Swap(OpenPlatformMap* other);

  // implements Message ----------------------------------------------

  OpenPlatformMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenPlatformMap& from);
  void MergeFrom(const OpenPlatformMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 startday = 1;
  inline bool has_startday() const;
  inline void clear_startday();
  static const int kStartdayFieldNumber = 1;
  inline ::google::protobuf::uint32 startday() const;
  inline void set_startday(::google::protobuf::uint32 value);

  // repeated .ShakeDiceConfig.MapInfo mapinfo = 2;
  inline int mapinfo_size() const;
  inline void clear_mapinfo();
  static const int kMapinfoFieldNumber = 2;
  inline const ::ShakeDiceConfig::MapInfo& mapinfo(int index) const;
  inline ::ShakeDiceConfig::MapInfo* mutable_mapinfo(int index);
  inline ::ShakeDiceConfig::MapInfo* add_mapinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::MapInfo >&
      mapinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::MapInfo >*
      mutable_mapinfo();

  // @@protoc_insertion_point(class_scope:ShakeDiceConfig.OpenPlatformMap)
 private:
  inline void set_has_startday();
  inline void clear_has_startday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::MapInfo > mapinfo_;
  ::google::protobuf::uint32 startday_;
  friend void  protobuf_AddDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_AssignDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_ShutdownFile_ShakeDiceConfig_2eproto();

  void InitAsDefaultInstance();
  static OpenPlatformMap* default_instance_;
};
// -------------------------------------------------------------------

class ShakeDice : public ::google::protobuf::Message {
 public:
  ShakeDice();
  virtual ~ShakeDice();

  ShakeDice(const ShakeDice& from);

  inline ShakeDice& operator=(const ShakeDice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakeDice& default_instance();

  void Swap(ShakeDice* other);

  // implements Message ----------------------------------------------

  ShakeDice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShakeDice& from);
  void MergeFrom(const ShakeDice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 reset_times = 1;
  inline bool has_reset_times() const;
  inline void clear_reset_times();
  static const int kResetTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 reset_times() const;
  inline void set_reset_times(::google::protobuf::uint32 value);

  // required uint32 reset_cash = 2;
  inline bool has_reset_cash() const;
  inline void clear_reset_cash();
  static const int kResetCashFieldNumber = 2;
  inline ::google::protobuf::uint32 reset_cash() const;
  inline void set_reset_cash(::google::protobuf::uint32 value);

  // required uint32 free_times = 3;
  inline bool has_free_times() const;
  inline void clear_free_times();
  static const int kFreeTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 free_times() const;
  inline void set_free_times(::google::protobuf::uint32 value);

  // required uint32 dice_cash = 4;
  inline bool has_dice_cash() const;
  inline void clear_dice_cash();
  static const int kDiceCashFieldNumber = 4;
  inline ::google::protobuf::uint32 dice_cash() const;
  inline void set_dice_cash(::google::protobuf::uint32 value);

  // repeated .ShakeDiceConfig.OpenPlatformMap open_platform_map = 5;
  inline int open_platform_map_size() const;
  inline void clear_open_platform_map();
  static const int kOpenPlatformMapFieldNumber = 5;
  inline const ::ShakeDiceConfig::OpenPlatformMap& open_platform_map(int index) const;
  inline ::ShakeDiceConfig::OpenPlatformMap* mutable_open_platform_map(int index);
  inline ::ShakeDiceConfig::OpenPlatformMap* add_open_platform_map();
  inline const ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::OpenPlatformMap >&
      open_platform_map() const;
  inline ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::OpenPlatformMap >*
      mutable_open_platform_map();

  // @@protoc_insertion_point(class_scope:ShakeDiceConfig.ShakeDice)
 private:
  inline void set_has_reset_times();
  inline void clear_has_reset_times();
  inline void set_has_reset_cash();
  inline void clear_has_reset_cash();
  inline void set_has_free_times();
  inline void clear_has_free_times();
  inline void set_has_dice_cash();
  inline void clear_has_dice_cash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 reset_times_;
  ::google::protobuf::uint32 reset_cash_;
  ::google::protobuf::uint32 free_times_;
  ::google::protobuf::uint32 dice_cash_;
  ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::OpenPlatformMap > open_platform_map_;
  friend void  protobuf_AddDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_AssignDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_ShutdownFile_ShakeDiceConfig_2eproto();

  void InitAsDefaultInstance();
  static ShakeDice* default_instance_;
};
// -------------------------------------------------------------------

class ShakeDiceAll : public ::google::protobuf::Message {
 public:
  ShakeDiceAll();
  virtual ~ShakeDiceAll();

  ShakeDiceAll(const ShakeDiceAll& from);

  inline ShakeDiceAll& operator=(const ShakeDiceAll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShakeDiceAll& default_instance();

  void Swap(ShakeDiceAll* other);

  // implements Message ----------------------------------------------

  ShakeDiceAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShakeDiceAll& from);
  void MergeFrom(const ShakeDiceAll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ShakeDiceConfig.ShakeDice shakedice = 1;
  inline bool has_shakedice() const;
  inline void clear_shakedice();
  static const int kShakediceFieldNumber = 1;
  inline const ::ShakeDiceConfig::ShakeDice& shakedice() const;
  inline ::ShakeDiceConfig::ShakeDice* mutable_shakedice();
  inline ::ShakeDiceConfig::ShakeDice* release_shakedice();
  inline void set_allocated_shakedice(::ShakeDiceConfig::ShakeDice* shakedice);

  // @@protoc_insertion_point(class_scope:ShakeDiceConfig.ShakeDiceAll)
 private:
  inline void set_has_shakedice();
  inline void clear_has_shakedice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ShakeDiceConfig::ShakeDice* shakedice_;
  friend void  protobuf_AddDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_AssignDesc_ShakeDiceConfig_2eproto();
  friend void protobuf_ShutdownFile_ShakeDiceConfig_2eproto();

  void InitAsDefaultInstance();
  static ShakeDiceAll* default_instance_;
};
// ===================================================================


// ===================================================================

// PointReward

// required uint32 pid = 1;
inline bool PointReward::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointReward::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointReward::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointReward::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 PointReward::pid() const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.PointReward.pid)
  return pid_;
}
inline void PointReward::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:ShakeDiceConfig.PointReward.pid)
}

// repeated .RewardConfig.Reward reward = 2;
inline int PointReward::reward_size() const {
  return reward_.size();
}
inline void PointReward::clear_reward() {
  reward_.Clear();
}
inline const ::RewardConfig::Reward& PointReward::reward(int index) const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.PointReward.reward)
  return reward_.Get(index);
}
inline ::RewardConfig::Reward* PointReward::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ShakeDiceConfig.PointReward.reward)
  return reward_.Mutable(index);
}
inline ::RewardConfig::Reward* PointReward::add_reward() {
  // @@protoc_insertion_point(field_add:ShakeDiceConfig.PointReward.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
PointReward::reward() const {
  // @@protoc_insertion_point(field_list:ShakeDiceConfig.PointReward.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
PointReward::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:ShakeDiceConfig.PointReward.reward)
  return &reward_;
}

// -------------------------------------------------------------------

// MapInfo

// required uint32 id = 1;
inline bool MapInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MapInfo::id() const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.MapInfo.id)
  return id_;
}
inline void MapInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ShakeDiceConfig.MapInfo.id)
}

// required uint32 points = 2;
inline bool MapInfo::has_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapInfo::set_has_points() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapInfo::clear_has_points() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapInfo::clear_points() {
  points_ = 0u;
  clear_has_points();
}
inline ::google::protobuf::uint32 MapInfo::points() const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.MapInfo.points)
  return points_;
}
inline void MapInfo::set_points(::google::protobuf::uint32 value) {
  set_has_points();
  points_ = value;
  // @@protoc_insertion_point(field_set:ShakeDiceConfig.MapInfo.points)
}

// repeated .RewardConfig.Reward extra_reward = 3;
inline int MapInfo::extra_reward_size() const {
  return extra_reward_.size();
}
inline void MapInfo::clear_extra_reward() {
  extra_reward_.Clear();
}
inline const ::RewardConfig::Reward& MapInfo::extra_reward(int index) const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.MapInfo.extra_reward)
  return extra_reward_.Get(index);
}
inline ::RewardConfig::Reward* MapInfo::mutable_extra_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ShakeDiceConfig.MapInfo.extra_reward)
  return extra_reward_.Mutable(index);
}
inline ::RewardConfig::Reward* MapInfo::add_extra_reward() {
  // @@protoc_insertion_point(field_add:ShakeDiceConfig.MapInfo.extra_reward)
  return extra_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
MapInfo::extra_reward() const {
  // @@protoc_insertion_point(field_list:ShakeDiceConfig.MapInfo.extra_reward)
  return extra_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
MapInfo::mutable_extra_reward() {
  // @@protoc_insertion_point(field_mutable_list:ShakeDiceConfig.MapInfo.extra_reward)
  return &extra_reward_;
}

// repeated .ShakeDiceConfig.PointReward points_reward = 4;
inline int MapInfo::points_reward_size() const {
  return points_reward_.size();
}
inline void MapInfo::clear_points_reward() {
  points_reward_.Clear();
}
inline const ::ShakeDiceConfig::PointReward& MapInfo::points_reward(int index) const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.MapInfo.points_reward)
  return points_reward_.Get(index);
}
inline ::ShakeDiceConfig::PointReward* MapInfo::mutable_points_reward(int index) {
  // @@protoc_insertion_point(field_mutable:ShakeDiceConfig.MapInfo.points_reward)
  return points_reward_.Mutable(index);
}
inline ::ShakeDiceConfig::PointReward* MapInfo::add_points_reward() {
  // @@protoc_insertion_point(field_add:ShakeDiceConfig.MapInfo.points_reward)
  return points_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::PointReward >&
MapInfo::points_reward() const {
  // @@protoc_insertion_point(field_list:ShakeDiceConfig.MapInfo.points_reward)
  return points_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::PointReward >*
MapInfo::mutable_points_reward() {
  // @@protoc_insertion_point(field_mutable_list:ShakeDiceConfig.MapInfo.points_reward)
  return &points_reward_;
}

// -------------------------------------------------------------------

// OpenPlatformMap

// required uint32 startday = 1;
inline bool OpenPlatformMap::has_startday() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenPlatformMap::set_has_startday() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenPlatformMap::clear_has_startday() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenPlatformMap::clear_startday() {
  startday_ = 0u;
  clear_has_startday();
}
inline ::google::protobuf::uint32 OpenPlatformMap::startday() const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.OpenPlatformMap.startday)
  return startday_;
}
inline void OpenPlatformMap::set_startday(::google::protobuf::uint32 value) {
  set_has_startday();
  startday_ = value;
  // @@protoc_insertion_point(field_set:ShakeDiceConfig.OpenPlatformMap.startday)
}

// repeated .ShakeDiceConfig.MapInfo mapinfo = 2;
inline int OpenPlatformMap::mapinfo_size() const {
  return mapinfo_.size();
}
inline void OpenPlatformMap::clear_mapinfo() {
  mapinfo_.Clear();
}
inline const ::ShakeDiceConfig::MapInfo& OpenPlatformMap::mapinfo(int index) const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.OpenPlatformMap.mapinfo)
  return mapinfo_.Get(index);
}
inline ::ShakeDiceConfig::MapInfo* OpenPlatformMap::mutable_mapinfo(int index) {
  // @@protoc_insertion_point(field_mutable:ShakeDiceConfig.OpenPlatformMap.mapinfo)
  return mapinfo_.Mutable(index);
}
inline ::ShakeDiceConfig::MapInfo* OpenPlatformMap::add_mapinfo() {
  // @@protoc_insertion_point(field_add:ShakeDiceConfig.OpenPlatformMap.mapinfo)
  return mapinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::MapInfo >&
OpenPlatformMap::mapinfo() const {
  // @@protoc_insertion_point(field_list:ShakeDiceConfig.OpenPlatformMap.mapinfo)
  return mapinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::MapInfo >*
OpenPlatformMap::mutable_mapinfo() {
  // @@protoc_insertion_point(field_mutable_list:ShakeDiceConfig.OpenPlatformMap.mapinfo)
  return &mapinfo_;
}

// -------------------------------------------------------------------

// ShakeDice

// required uint32 reset_times = 1;
inline bool ShakeDice::has_reset_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakeDice::set_has_reset_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakeDice::clear_has_reset_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakeDice::clear_reset_times() {
  reset_times_ = 0u;
  clear_has_reset_times();
}
inline ::google::protobuf::uint32 ShakeDice::reset_times() const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.ShakeDice.reset_times)
  return reset_times_;
}
inline void ShakeDice::set_reset_times(::google::protobuf::uint32 value) {
  set_has_reset_times();
  reset_times_ = value;
  // @@protoc_insertion_point(field_set:ShakeDiceConfig.ShakeDice.reset_times)
}

// required uint32 reset_cash = 2;
inline bool ShakeDice::has_reset_cash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShakeDice::set_has_reset_cash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShakeDice::clear_has_reset_cash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShakeDice::clear_reset_cash() {
  reset_cash_ = 0u;
  clear_has_reset_cash();
}
inline ::google::protobuf::uint32 ShakeDice::reset_cash() const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.ShakeDice.reset_cash)
  return reset_cash_;
}
inline void ShakeDice::set_reset_cash(::google::protobuf::uint32 value) {
  set_has_reset_cash();
  reset_cash_ = value;
  // @@protoc_insertion_point(field_set:ShakeDiceConfig.ShakeDice.reset_cash)
}

// required uint32 free_times = 3;
inline bool ShakeDice::has_free_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShakeDice::set_has_free_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShakeDice::clear_has_free_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShakeDice::clear_free_times() {
  free_times_ = 0u;
  clear_has_free_times();
}
inline ::google::protobuf::uint32 ShakeDice::free_times() const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.ShakeDice.free_times)
  return free_times_;
}
inline void ShakeDice::set_free_times(::google::protobuf::uint32 value) {
  set_has_free_times();
  free_times_ = value;
  // @@protoc_insertion_point(field_set:ShakeDiceConfig.ShakeDice.free_times)
}

// required uint32 dice_cash = 4;
inline bool ShakeDice::has_dice_cash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShakeDice::set_has_dice_cash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShakeDice::clear_has_dice_cash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShakeDice::clear_dice_cash() {
  dice_cash_ = 0u;
  clear_has_dice_cash();
}
inline ::google::protobuf::uint32 ShakeDice::dice_cash() const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.ShakeDice.dice_cash)
  return dice_cash_;
}
inline void ShakeDice::set_dice_cash(::google::protobuf::uint32 value) {
  set_has_dice_cash();
  dice_cash_ = value;
  // @@protoc_insertion_point(field_set:ShakeDiceConfig.ShakeDice.dice_cash)
}

// repeated .ShakeDiceConfig.OpenPlatformMap open_platform_map = 5;
inline int ShakeDice::open_platform_map_size() const {
  return open_platform_map_.size();
}
inline void ShakeDice::clear_open_platform_map() {
  open_platform_map_.Clear();
}
inline const ::ShakeDiceConfig::OpenPlatformMap& ShakeDice::open_platform_map(int index) const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.ShakeDice.open_platform_map)
  return open_platform_map_.Get(index);
}
inline ::ShakeDiceConfig::OpenPlatformMap* ShakeDice::mutable_open_platform_map(int index) {
  // @@protoc_insertion_point(field_mutable:ShakeDiceConfig.ShakeDice.open_platform_map)
  return open_platform_map_.Mutable(index);
}
inline ::ShakeDiceConfig::OpenPlatformMap* ShakeDice::add_open_platform_map() {
  // @@protoc_insertion_point(field_add:ShakeDiceConfig.ShakeDice.open_platform_map)
  return open_platform_map_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::OpenPlatformMap >&
ShakeDice::open_platform_map() const {
  // @@protoc_insertion_point(field_list:ShakeDiceConfig.ShakeDice.open_platform_map)
  return open_platform_map_;
}
inline ::google::protobuf::RepeatedPtrField< ::ShakeDiceConfig::OpenPlatformMap >*
ShakeDice::mutable_open_platform_map() {
  // @@protoc_insertion_point(field_mutable_list:ShakeDiceConfig.ShakeDice.open_platform_map)
  return &open_platform_map_;
}

// -------------------------------------------------------------------

// ShakeDiceAll

// required .ShakeDiceConfig.ShakeDice shakedice = 1;
inline bool ShakeDiceAll::has_shakedice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShakeDiceAll::set_has_shakedice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShakeDiceAll::clear_has_shakedice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShakeDiceAll::clear_shakedice() {
  if (shakedice_ != NULL) shakedice_->::ShakeDiceConfig::ShakeDice::Clear();
  clear_has_shakedice();
}
inline const ::ShakeDiceConfig::ShakeDice& ShakeDiceAll::shakedice() const {
  // @@protoc_insertion_point(field_get:ShakeDiceConfig.ShakeDiceAll.shakedice)
  return shakedice_ != NULL ? *shakedice_ : *default_instance_->shakedice_;
}
inline ::ShakeDiceConfig::ShakeDice* ShakeDiceAll::mutable_shakedice() {
  set_has_shakedice();
  if (shakedice_ == NULL) shakedice_ = new ::ShakeDiceConfig::ShakeDice;
  // @@protoc_insertion_point(field_mutable:ShakeDiceConfig.ShakeDiceAll.shakedice)
  return shakedice_;
}
inline ::ShakeDiceConfig::ShakeDice* ShakeDiceAll::release_shakedice() {
  clear_has_shakedice();
  ::ShakeDiceConfig::ShakeDice* temp = shakedice_;
  shakedice_ = NULL;
  return temp;
}
inline void ShakeDiceAll::set_allocated_shakedice(::ShakeDiceConfig::ShakeDice* shakedice) {
  delete shakedice_;
  shakedice_ = shakedice;
  if (shakedice) {
    set_has_shakedice();
  } else {
    clear_has_shakedice();
  }
  // @@protoc_insertion_point(field_set_allocated:ShakeDiceConfig.ShakeDiceAll.shakedice)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ShakeDiceConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ShakeDiceConfig_2eproto__INCLUDED
