// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MissionConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MissionConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MissionConfig {

namespace {

const ::google::protobuf::Descriptor* MissionReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripleCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripleCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhetherMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhetherMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoubleMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoubleMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripleMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripleMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssembleMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssembleMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mission_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionAll_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MissionConfig_2eproto() {
  protobuf_AddDesc_MissionConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MissionConfig.proto");
  GOOGLE_CHECK(file != NULL);
  MissionReward_descriptor_ = file->message_type(0);
  static const int MissionReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionReward, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionReward, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionReward, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionReward, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionReward, hammer_),
  };
  MissionReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionReward_descriptor_,
      MissionReward::default_instance_,
      MissionReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionReward));
  DoubleCondition_descriptor_ = file->message_type(1);
  static const int DoubleCondition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleCondition, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleCondition, count_),
  };
  DoubleCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleCondition_descriptor_,
      DoubleCondition::default_instance_,
      DoubleCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleCondition));
  TripleCondition_descriptor_ = file->message_type(2);
  static const int TripleCondition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleCondition, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleCondition, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleCondition, count_),
  };
  TripleCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripleCondition_descriptor_,
      TripleCondition::default_instance_,
      TripleCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripleCondition));
  WhetherMission_descriptor_ = file->message_type(3);
  static const int WhetherMission_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhetherMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhetherMission, pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhetherMission, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhetherMission, reward_),
  };
  WhetherMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhetherMission_descriptor_,
      WhetherMission::default_instance_,
      WhetherMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhetherMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhetherMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhetherMission));
  SingleMission_descriptor_ = file->message_type(4);
  static const int SingleMission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMission, pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMission, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMission, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMission, reward_),
  };
  SingleMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleMission_descriptor_,
      SingleMission::default_instance_,
      SingleMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleMission));
  DoubleMission_descriptor_ = file->message_type(5);
  static const int DoubleMission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMission, pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMission, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMission, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMission, reward_),
  };
  DoubleMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoubleMission_descriptor_,
      DoubleMission::default_instance_,
      DoubleMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoubleMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoubleMission));
  TripleMission_descriptor_ = file->message_type(6);
  static const int TripleMission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleMission, pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleMission, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleMission, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleMission, reward_),
  };
  TripleMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripleMission_descriptor_,
      TripleMission::default_instance_,
      TripleMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripleMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripleMission));
  AssembleMission_descriptor_ = file->message_type(7);
  static const int AssembleMission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembleMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembleMission, pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembleMission, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembleMission, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembleMission, reward_),
  };
  AssembleMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssembleMission_descriptor_,
      AssembleMission::default_instance_,
      AssembleMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembleMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembleMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssembleMission));
  Mission_descriptor_ = file->message_type(8);
  static const int Mission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, whether_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, single_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, triple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, assemble_),
  };
  Mission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mission_descriptor_,
      Mission::default_instance_,
      Mission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mission));
  MissionAll_descriptor_ = file->message_type(9);
  static const int MissionAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAll, missions_),
  };
  MissionAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionAll_descriptor_,
      MissionAll::default_instance_,
      MissionAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionAll));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MissionConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionReward_descriptor_, &MissionReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleCondition_descriptor_, &DoubleCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripleCondition_descriptor_, &TripleCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhetherMission_descriptor_, &WhetherMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleMission_descriptor_, &SingleMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoubleMission_descriptor_, &DoubleMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripleMission_descriptor_, &TripleMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssembleMission_descriptor_, &AssembleMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mission_descriptor_, &Mission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionAll_descriptor_, &MissionAll::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MissionConfig_2eproto() {
  delete MissionReward::default_instance_;
  delete MissionReward_reflection_;
  delete DoubleCondition::default_instance_;
  delete DoubleCondition_reflection_;
  delete TripleCondition::default_instance_;
  delete TripleCondition_reflection_;
  delete WhetherMission::default_instance_;
  delete WhetherMission_reflection_;
  delete SingleMission::default_instance_;
  delete SingleMission_reflection_;
  delete DoubleMission::default_instance_;
  delete DoubleMission_reflection_;
  delete TripleMission::default_instance_;
  delete TripleMission_reflection_;
  delete AssembleMission::default_instance_;
  delete AssembleMission_reflection_;
  delete Mission::default_instance_;
  delete Mission_reflection_;
  delete MissionAll::default_instance_;
  delete MissionAll_reflection_;
}

void protobuf_AddDesc_MissionConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MissionConfig.proto\022\rMissionConfig\"V\n\r"
    "MissionReward\022\014\n\004food\030\001 \002(\r\022\014\n\004coin\030\002 \002("
    "\r\022\014\n\004wood\030\003 \002(\r\022\013\n\003exp\030\004 \002(\r\022\016\n\006hammer\030\005"
    " \001(\r\"1\n\017DoubleCondition\022\017\n\007subtype\030\001 \002(\r"
    "\022\r\n\005count\030\002 \002(\r\"@\n\017TripleCondition\022\017\n\007su"
    "btype\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\r\n\005count\030\003 \002("
    "\r\"e\n\016WhetherMission\022\n\n\002id\030\001 \002(\r\022\013\n\003pre\030\002"
    " \002(\r\022\014\n\004type\030\003 \002(\r\022,\n\006reward\030\004 \002(\0132\034.Mis"
    "sionConfig.MissionReward\"w\n\rSingleMissio"
    "n\022\n\n\002id\030\001 \002(\r\022\013\n\003pre\030\002 \002(\r\022\014\n\004type\030\003 \002(\r"
    "\022\021\n\tcondition\030\004 \002(\r\022,\n\006reward\030\005 \002(\0132\034.Mi"
    "ssionConfig.MissionReward\"\227\001\n\rDoubleMiss"
    "ion\022\n\n\002id\030\001 \002(\r\022\013\n\003pre\030\002 \002(\r\022\014\n\004type\030\003 \002"
    "(\r\0221\n\tcondition\030\004 \002(\0132\036.MissionConfig.Do"
    "ubleCondition\022,\n\006reward\030\005 \002(\0132\034.MissionC"
    "onfig.MissionReward\"\227\001\n\rTripleMission\022\n\n"
    "\002id\030\001 \002(\r\022\013\n\003pre\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\0221\n\t"
    "condition\030\004 \002(\0132\036.MissionConfig.TripleCo"
    "ndition\022,\n\006reward\030\005 \002(\0132\034.MissionConfig."
    "MissionReward\"y\n\017AssembleMission\022\n\n\002id\030\001"
    " \002(\r\022\013\n\003pre\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\022\021\n\tcondi"
    "tion\030\004 \003(\r\022,\n\006reward\030\005 \002(\0132\034.MissionConf"
    "ig.MissionReward\"\366\001\n\007Mission\022.\n\007whether\030"
    "\001 \003(\0132\035.MissionConfig.WhetherMission\022,\n\006"
    "single\030\002 \003(\0132\034.MissionConfig.SingleMissi"
    "on\022-\n\007_double\030\003 \003(\0132\034.MissionConfig.Doub"
    "leMission\022,\n\006triple\030\004 \003(\0132\034.MissionConfi"
    "g.TripleMission\0220\n\010assemble\030\005 \003(\0132\036.Miss"
    "ionConfig.AssembleMission\"6\n\nMissionAll\022"
    "(\n\010missions\030\001 \002(\0132\026.MissionConfig.Missio"
    "n", 1201);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MissionConfig.proto", &protobuf_RegisterTypes);
  MissionReward::default_instance_ = new MissionReward();
  DoubleCondition::default_instance_ = new DoubleCondition();
  TripleCondition::default_instance_ = new TripleCondition();
  WhetherMission::default_instance_ = new WhetherMission();
  SingleMission::default_instance_ = new SingleMission();
  DoubleMission::default_instance_ = new DoubleMission();
  TripleMission::default_instance_ = new TripleMission();
  AssembleMission::default_instance_ = new AssembleMission();
  Mission::default_instance_ = new Mission();
  MissionAll::default_instance_ = new MissionAll();
  MissionReward::default_instance_->InitAsDefaultInstance();
  DoubleCondition::default_instance_->InitAsDefaultInstance();
  TripleCondition::default_instance_->InitAsDefaultInstance();
  WhetherMission::default_instance_->InitAsDefaultInstance();
  SingleMission::default_instance_->InitAsDefaultInstance();
  DoubleMission::default_instance_->InitAsDefaultInstance();
  TripleMission::default_instance_->InitAsDefaultInstance();
  AssembleMission::default_instance_->InitAsDefaultInstance();
  Mission::default_instance_->InitAsDefaultInstance();
  MissionAll::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MissionConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MissionConfig_2eproto {
  StaticDescriptorInitializer_MissionConfig_2eproto() {
    protobuf_AddDesc_MissionConfig_2eproto();
  }
} static_descriptor_initializer_MissionConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MissionReward::kFoodFieldNumber;
const int MissionReward::kCoinFieldNumber;
const int MissionReward::kWoodFieldNumber;
const int MissionReward::kExpFieldNumber;
const int MissionReward::kHammerFieldNumber;
#endif  // !_MSC_VER

MissionReward::MissionReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.MissionReward)
}

void MissionReward::InitAsDefaultInstance() {
}

MissionReward::MissionReward(const MissionReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.MissionReward)
}

void MissionReward::SharedCtor() {
  _cached_size_ = 0;
  food_ = 0u;
  coin_ = 0u;
  wood_ = 0u;
  exp_ = 0u;
  hammer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionReward::~MissionReward() {
  // @@protoc_insertion_point(destructor:MissionConfig.MissionReward)
  SharedDtor();
}

void MissionReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionReward_descriptor_;
}

const MissionReward& MissionReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

MissionReward* MissionReward::default_instance_ = NULL;

MissionReward* MissionReward::New() const {
  return new MissionReward;
}

void MissionReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MissionReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(food_, hammer_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.MissionReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 food = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // required uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wood;
        break;
      }

      // required uint32 wood = 3;
      case 3: {
        if (tag == 24) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (tag == 32) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hammer;
        break;
      }

      // optional uint32 hammer = 5;
      case 5: {
        if (tag == 40) {
         parse_hammer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hammer_)));
          set_has_hammer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.MissionReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.MissionReward)
  return false;
#undef DO_
}

void MissionReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.MissionReward)
  // required uint32 food = 1;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->food(), output);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // required uint32 wood = 3;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wood(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 hammer = 5;
  if (has_hammer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hammer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.MissionReward)
}

::google::protobuf::uint8* MissionReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.MissionReward)
  // required uint32 food = 1;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->food(), target);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // required uint32 wood = 3;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wood(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 hammer = 5;
  if (has_hammer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hammer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.MissionReward)
  return target;
}

int MissionReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 food = 1;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // required uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 wood = 3;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 hammer = 5;
    if (has_hammer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hammer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionReward::MergeFrom(const MissionReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hammer()) {
      set_hammer(from.hammer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionReward::CopyFrom(const MissionReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MissionReward::Swap(MissionReward* other) {
  if (other != this) {
    std::swap(food_, other->food_);
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(exp_, other->exp_);
    std::swap(hammer_, other->hammer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionReward_descriptor_;
  metadata.reflection = MissionReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleCondition::kSubtypeFieldNumber;
const int DoubleCondition::kCountFieldNumber;
#endif  // !_MSC_VER

DoubleCondition::DoubleCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.DoubleCondition)
}

void DoubleCondition::InitAsDefaultInstance() {
}

DoubleCondition::DoubleCondition(const DoubleCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.DoubleCondition)
}

void DoubleCondition::SharedCtor() {
  _cached_size_ = 0;
  subtype_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleCondition::~DoubleCondition() {
  // @@protoc_insertion_point(destructor:MissionConfig.DoubleCondition)
  SharedDtor();
}

void DoubleCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DoubleCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleCondition_descriptor_;
}

const DoubleCondition& DoubleCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

DoubleCondition* DoubleCondition::default_instance_ = NULL;

DoubleCondition* DoubleCondition::New() const {
  return new DoubleCondition;
}

void DoubleCondition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DoubleCondition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(subtype_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.DoubleCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 subtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.DoubleCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.DoubleCondition)
  return false;
#undef DO_
}

void DoubleCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.DoubleCondition)
  // required uint32 subtype = 1;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->subtype(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.DoubleCondition)
}

::google::protobuf::uint8* DoubleCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.DoubleCondition)
  // required uint32 subtype = 1;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->subtype(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.DoubleCondition)
  return target;
}

int DoubleCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 subtype = 1;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtype());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleCondition::MergeFrom(const DoubleCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleCondition::CopyFrom(const DoubleCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DoubleCondition::Swap(DoubleCondition* other) {
  if (other != this) {
    std::swap(subtype_, other->subtype_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleCondition_descriptor_;
  metadata.reflection = DoubleCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TripleCondition::kSubtypeFieldNumber;
const int TripleCondition::kLevelFieldNumber;
const int TripleCondition::kCountFieldNumber;
#endif  // !_MSC_VER

TripleCondition::TripleCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.TripleCondition)
}

void TripleCondition::InitAsDefaultInstance() {
}

TripleCondition::TripleCondition(const TripleCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.TripleCondition)
}

void TripleCondition::SharedCtor() {
  _cached_size_ = 0;
  subtype_ = 0u;
  level_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripleCondition::~TripleCondition() {
  // @@protoc_insertion_point(destructor:MissionConfig.TripleCondition)
  SharedDtor();
}

void TripleCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripleCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripleCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripleCondition_descriptor_;
}

const TripleCondition& TripleCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

TripleCondition* TripleCondition::default_instance_ = NULL;

TripleCondition* TripleCondition::New() const {
  return new TripleCondition;
}

void TripleCondition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TripleCondition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(subtype_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripleCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.TripleCondition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 subtype = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.TripleCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.TripleCondition)
  return false;
#undef DO_
}

void TripleCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.TripleCondition)
  // required uint32 subtype = 1;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->subtype(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.TripleCondition)
}

::google::protobuf::uint8* TripleCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.TripleCondition)
  // required uint32 subtype = 1;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->subtype(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.TripleCondition)
  return target;
}

int TripleCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 subtype = 1;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtype());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripleCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripleCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripleCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripleCondition::MergeFrom(const TripleCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripleCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripleCondition::CopyFrom(const TripleCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripleCondition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TripleCondition::Swap(TripleCondition* other) {
  if (other != this) {
    std::swap(subtype_, other->subtype_);
    std::swap(level_, other->level_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripleCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripleCondition_descriptor_;
  metadata.reflection = TripleCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhetherMission::kIdFieldNumber;
const int WhetherMission::kPreFieldNumber;
const int WhetherMission::kTypeFieldNumber;
const int WhetherMission::kRewardFieldNumber;
#endif  // !_MSC_VER

WhetherMission::WhetherMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.WhetherMission)
}

void WhetherMission::InitAsDefaultInstance() {
  reward_ = const_cast< ::MissionConfig::MissionReward*>(&::MissionConfig::MissionReward::default_instance());
}

WhetherMission::WhetherMission(const WhetherMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.WhetherMission)
}

void WhetherMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pre_ = 0u;
  type_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhetherMission::~WhetherMission() {
  // @@protoc_insertion_point(destructor:MissionConfig.WhetherMission)
  SharedDtor();
}

void WhetherMission::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void WhetherMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhetherMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhetherMission_descriptor_;
}

const WhetherMission& WhetherMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

WhetherMission* WhetherMission::default_instance_ = NULL;

WhetherMission* WhetherMission::New() const {
  return new WhetherMission;
}

void WhetherMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WhetherMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, pre_);
    type_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhetherMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.WhetherMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pre;
        break;
      }

      // required uint32 pre = 2;
      case 2: {
        if (tag == 16) {
         parse_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_)));
          set_has_pre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // required .MissionConfig.MissionReward reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.WhetherMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.WhetherMission)
  return false;
#undef DO_
}

void WhetherMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.WhetherMission)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pre(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required .MissionConfig.MissionReward reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.WhetherMission)
}

::google::protobuf::uint8* WhetherMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.WhetherMission)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pre(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required .MissionConfig.MissionReward reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.WhetherMission)
  return target;
}

int WhetherMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 pre = 2;
    if (has_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .MissionConfig.MissionReward reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhetherMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhetherMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhetherMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhetherMission::MergeFrom(const WhetherMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pre()) {
      set_pre(from.pre());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reward()) {
      mutable_reward()->::MissionConfig::MissionReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhetherMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhetherMission::CopyFrom(const WhetherMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhetherMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void WhetherMission::Swap(WhetherMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pre_, other->pre_);
    std::swap(type_, other->type_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhetherMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhetherMission_descriptor_;
  metadata.reflection = WhetherMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleMission::kIdFieldNumber;
const int SingleMission::kPreFieldNumber;
const int SingleMission::kTypeFieldNumber;
const int SingleMission::kConditionFieldNumber;
const int SingleMission::kRewardFieldNumber;
#endif  // !_MSC_VER

SingleMission::SingleMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.SingleMission)
}

void SingleMission::InitAsDefaultInstance() {
  reward_ = const_cast< ::MissionConfig::MissionReward*>(&::MissionConfig::MissionReward::default_instance());
}

SingleMission::SingleMission(const SingleMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.SingleMission)
}

void SingleMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pre_ = 0u;
  type_ = 0u;
  condition_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleMission::~SingleMission() {
  // @@protoc_insertion_point(destructor:MissionConfig.SingleMission)
  SharedDtor();
}

void SingleMission::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void SingleMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleMission_descriptor_;
}

const SingleMission& SingleMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

SingleMission* SingleMission::default_instance_ = NULL;

SingleMission* SingleMission::New() const {
  return new SingleMission;
}

void SingleMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SingleMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, condition_);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.SingleMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pre;
        break;
      }

      // required uint32 pre = 2;
      case 2: {
        if (tag == 16) {
         parse_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_)));
          set_has_pre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_condition;
        break;
      }

      // required uint32 condition = 4;
      case 4: {
        if (tag == 32) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // required .MissionConfig.MissionReward reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.SingleMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.SingleMission)
  return false;
#undef DO_
}

void SingleMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.SingleMission)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pre(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 condition = 4;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->condition(), output);
  }

  // required .MissionConfig.MissionReward reward = 5;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.SingleMission)
}

::google::protobuf::uint8* SingleMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.SingleMission)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pre(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 condition = 4;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->condition(), target);
  }

  // required .MissionConfig.MissionReward reward = 5;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.SingleMission)
  return target;
}

int SingleMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 pre = 2;
    if (has_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 condition = 4;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition());
    }

    // required .MissionConfig.MissionReward reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleMission::MergeFrom(const SingleMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pre()) {
      set_pre(from.pre());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_reward()) {
      mutable_reward()->::MissionConfig::MissionReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleMission::CopyFrom(const SingleMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void SingleMission::Swap(SingleMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pre_, other->pre_);
    std::swap(type_, other->type_);
    std::swap(condition_, other->condition_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleMission_descriptor_;
  metadata.reflection = SingleMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoubleMission::kIdFieldNumber;
const int DoubleMission::kPreFieldNumber;
const int DoubleMission::kTypeFieldNumber;
const int DoubleMission::kConditionFieldNumber;
const int DoubleMission::kRewardFieldNumber;
#endif  // !_MSC_VER

DoubleMission::DoubleMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.DoubleMission)
}

void DoubleMission::InitAsDefaultInstance() {
  condition_ = const_cast< ::MissionConfig::DoubleCondition*>(&::MissionConfig::DoubleCondition::default_instance());
  reward_ = const_cast< ::MissionConfig::MissionReward*>(&::MissionConfig::MissionReward::default_instance());
}

DoubleMission::DoubleMission(const DoubleMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.DoubleMission)
}

void DoubleMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pre_ = 0u;
  type_ = 0u;
  condition_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoubleMission::~DoubleMission() {
  // @@protoc_insertion_point(destructor:MissionConfig.DoubleMission)
  SharedDtor();
}

void DoubleMission::SharedDtor() {
  if (this != default_instance_) {
    delete condition_;
    delete reward_;
  }
}

void DoubleMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoubleMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoubleMission_descriptor_;
}

const DoubleMission& DoubleMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

DoubleMission* DoubleMission::default_instance_ = NULL;

DoubleMission* DoubleMission::New() const {
  return new DoubleMission;
}

void DoubleMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DoubleMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, pre_);
    type_ = 0u;
    if (has_condition()) {
      if (condition_ != NULL) condition_->::MissionConfig::DoubleCondition::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoubleMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.DoubleMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pre;
        break;
      }

      // required uint32 pre = 2;
      case 2: {
        if (tag == 16) {
         parse_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_)));
          set_has_pre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_condition;
        break;
      }

      // required .MissionConfig.DoubleCondition condition = 4;
      case 4: {
        if (tag == 34) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // required .MissionConfig.MissionReward reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.DoubleMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.DoubleMission)
  return false;
#undef DO_
}

void DoubleMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.DoubleMission)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pre(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required .MissionConfig.DoubleCondition condition = 4;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->condition(), output);
  }

  // required .MissionConfig.MissionReward reward = 5;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.DoubleMission)
}

::google::protobuf::uint8* DoubleMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.DoubleMission)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pre(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required .MissionConfig.DoubleCondition condition = 4;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->condition(), target);
  }

  // required .MissionConfig.MissionReward reward = 5;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.DoubleMission)
  return target;
}

int DoubleMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 pre = 2;
    if (has_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .MissionConfig.DoubleCondition condition = 4;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

    // required .MissionConfig.MissionReward reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoubleMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoubleMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoubleMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoubleMission::MergeFrom(const DoubleMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pre()) {
      set_pre(from.pre());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_condition()) {
      mutable_condition()->::MissionConfig::DoubleCondition::MergeFrom(from.condition());
    }
    if (from.has_reward()) {
      mutable_reward()->::MissionConfig::MissionReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoubleMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleMission::CopyFrom(const DoubleMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void DoubleMission::Swap(DoubleMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pre_, other->pre_);
    std::swap(type_, other->type_);
    std::swap(condition_, other->condition_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoubleMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoubleMission_descriptor_;
  metadata.reflection = DoubleMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TripleMission::kIdFieldNumber;
const int TripleMission::kPreFieldNumber;
const int TripleMission::kTypeFieldNumber;
const int TripleMission::kConditionFieldNumber;
const int TripleMission::kRewardFieldNumber;
#endif  // !_MSC_VER

TripleMission::TripleMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.TripleMission)
}

void TripleMission::InitAsDefaultInstance() {
  condition_ = const_cast< ::MissionConfig::TripleCondition*>(&::MissionConfig::TripleCondition::default_instance());
  reward_ = const_cast< ::MissionConfig::MissionReward*>(&::MissionConfig::MissionReward::default_instance());
}

TripleMission::TripleMission(const TripleMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.TripleMission)
}

void TripleMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pre_ = 0u;
  type_ = 0u;
  condition_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripleMission::~TripleMission() {
  // @@protoc_insertion_point(destructor:MissionConfig.TripleMission)
  SharedDtor();
}

void TripleMission::SharedDtor() {
  if (this != default_instance_) {
    delete condition_;
    delete reward_;
  }
}

void TripleMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripleMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripleMission_descriptor_;
}

const TripleMission& TripleMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

TripleMission* TripleMission::default_instance_ = NULL;

TripleMission* TripleMission::New() const {
  return new TripleMission;
}

void TripleMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TripleMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, pre_);
    type_ = 0u;
    if (has_condition()) {
      if (condition_ != NULL) condition_->::MissionConfig::TripleCondition::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripleMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.TripleMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pre;
        break;
      }

      // required uint32 pre = 2;
      case 2: {
        if (tag == 16) {
         parse_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_)));
          set_has_pre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_condition;
        break;
      }

      // required .MissionConfig.TripleCondition condition = 4;
      case 4: {
        if (tag == 34) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // required .MissionConfig.MissionReward reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.TripleMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.TripleMission)
  return false;
#undef DO_
}

void TripleMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.TripleMission)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pre(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required .MissionConfig.TripleCondition condition = 4;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->condition(), output);
  }

  // required .MissionConfig.MissionReward reward = 5;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.TripleMission)
}

::google::protobuf::uint8* TripleMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.TripleMission)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pre(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required .MissionConfig.TripleCondition condition = 4;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->condition(), target);
  }

  // required .MissionConfig.MissionReward reward = 5;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.TripleMission)
  return target;
}

int TripleMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 pre = 2;
    if (has_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .MissionConfig.TripleCondition condition = 4;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->condition());
    }

    // required .MissionConfig.MissionReward reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripleMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripleMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripleMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripleMission::MergeFrom(const TripleMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pre()) {
      set_pre(from.pre());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_condition()) {
      mutable_condition()->::MissionConfig::TripleCondition::MergeFrom(from.condition());
    }
    if (from.has_reward()) {
      mutable_reward()->::MissionConfig::MissionReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripleMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripleMission::CopyFrom(const TripleMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripleMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_condition()) {
    if (!this->condition().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void TripleMission::Swap(TripleMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pre_, other->pre_);
    std::swap(type_, other->type_);
    std::swap(condition_, other->condition_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripleMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripleMission_descriptor_;
  metadata.reflection = TripleMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssembleMission::kIdFieldNumber;
const int AssembleMission::kPreFieldNumber;
const int AssembleMission::kTypeFieldNumber;
const int AssembleMission::kConditionFieldNumber;
const int AssembleMission::kRewardFieldNumber;
#endif  // !_MSC_VER

AssembleMission::AssembleMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.AssembleMission)
}

void AssembleMission::InitAsDefaultInstance() {
  reward_ = const_cast< ::MissionConfig::MissionReward*>(&::MissionConfig::MissionReward::default_instance());
}

AssembleMission::AssembleMission(const AssembleMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.AssembleMission)
}

void AssembleMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pre_ = 0u;
  type_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssembleMission::~AssembleMission() {
  // @@protoc_insertion_point(destructor:MissionConfig.AssembleMission)
  SharedDtor();
}

void AssembleMission::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void AssembleMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssembleMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssembleMission_descriptor_;
}

const AssembleMission& AssembleMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

AssembleMission* AssembleMission::default_instance_ = NULL;

AssembleMission* AssembleMission::New() const {
  return new AssembleMission;
}

void AssembleMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AssembleMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(id_, pre_);
    type_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssembleMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.AssembleMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pre;
        break;
      }

      // required uint32 pre = 2;
      case 2: {
        if (tag == 16) {
         parse_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_)));
          set_has_pre();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_condition;
        break;
      }

      // repeated uint32 condition = 4;
      case 4: {
        if (tag == 32) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_condition())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_condition())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_condition;
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // required .MissionConfig.MissionReward reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.AssembleMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.AssembleMission)
  return false;
#undef DO_
}

void AssembleMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.AssembleMission)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pre(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // repeated uint32 condition = 4;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->condition(i), output);
  }

  // required .MissionConfig.MissionReward reward = 5;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.AssembleMission)
}

::google::protobuf::uint8* AssembleMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.AssembleMission)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 pre = 2;
  if (has_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pre(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // repeated uint32 condition = 4;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->condition(i), target);
  }

  // required .MissionConfig.MissionReward reward = 5;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.AssembleMission)
  return target;
}

int AssembleMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 pre = 2;
    if (has_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .MissionConfig.MissionReward reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  // repeated uint32 condition = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->condition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->condition(i));
    }
    total_size += 1 * this->condition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssembleMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssembleMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssembleMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssembleMission::MergeFrom(const AssembleMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  condition_.MergeFrom(from.condition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pre()) {
      set_pre(from.pre());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reward()) {
      mutable_reward()->::MissionConfig::MissionReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssembleMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssembleMission::CopyFrom(const AssembleMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssembleMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void AssembleMission::Swap(AssembleMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pre_, other->pre_);
    std::swap(type_, other->type_);
    condition_.Swap(&other->condition_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssembleMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssembleMission_descriptor_;
  metadata.reflection = AssembleMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mission::kWhetherFieldNumber;
const int Mission::kSingleFieldNumber;
const int Mission::kDoubleFieldNumber;
const int Mission::kTripleFieldNumber;
const int Mission::kAssembleFieldNumber;
#endif  // !_MSC_VER

Mission::Mission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.Mission)
}

void Mission::InitAsDefaultInstance() {
}

Mission::Mission(const Mission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.Mission)
}

void Mission::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:MissionConfig.Mission)
  SharedDtor();
}

void Mission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mission_descriptor_;
}

const Mission& Mission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

Mission* Mission::default_instance_ = NULL;

Mission* Mission::New() const {
  return new Mission;
}

void Mission::Clear() {
  whether_.Clear();
  single_.Clear();
  _double_.Clear();
  triple_.Clear();
  assemble_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.Mission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MissionConfig.WhetherMission whether = 1;
      case 1: {
        if (tag == 10) {
         parse_whether:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_whether()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_whether;
        if (input->ExpectTag(18)) goto parse_single;
        break;
      }

      // repeated .MissionConfig.SingleMission single = 2;
      case 2: {
        if (tag == 18) {
         parse_single:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_single()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_single;
        if (input->ExpectTag(26)) goto parse__double;
        break;
      }

      // repeated .MissionConfig.DoubleMission _double = 3;
      case 3: {
        if (tag == 26) {
         parse__double:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__double()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse__double;
        if (input->ExpectTag(34)) goto parse_triple;
        break;
      }

      // repeated .MissionConfig.TripleMission triple = 4;
      case 4: {
        if (tag == 34) {
         parse_triple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triple()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_triple;
        if (input->ExpectTag(42)) goto parse_assemble;
        break;
      }

      // repeated .MissionConfig.AssembleMission assemble = 5;
      case 5: {
        if (tag == 42) {
         parse_assemble:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assemble()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_assemble;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.Mission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.Mission)
  return false;
#undef DO_
}

void Mission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.Mission)
  // repeated .MissionConfig.WhetherMission whether = 1;
  for (int i = 0; i < this->whether_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->whether(i), output);
  }

  // repeated .MissionConfig.SingleMission single = 2;
  for (int i = 0; i < this->single_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->single(i), output);
  }

  // repeated .MissionConfig.DoubleMission _double = 3;
  for (int i = 0; i < this->_double_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_double(i), output);
  }

  // repeated .MissionConfig.TripleMission triple = 4;
  for (int i = 0; i < this->triple_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->triple(i), output);
  }

  // repeated .MissionConfig.AssembleMission assemble = 5;
  for (int i = 0; i < this->assemble_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->assemble(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.Mission)
}

::google::protobuf::uint8* Mission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.Mission)
  // repeated .MissionConfig.WhetherMission whether = 1;
  for (int i = 0; i < this->whether_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->whether(i), target);
  }

  // repeated .MissionConfig.SingleMission single = 2;
  for (int i = 0; i < this->single_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->single(i), target);
  }

  // repeated .MissionConfig.DoubleMission _double = 3;
  for (int i = 0; i < this->_double_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_double(i), target);
  }

  // repeated .MissionConfig.TripleMission triple = 4;
  for (int i = 0; i < this->triple_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->triple(i), target);
  }

  // repeated .MissionConfig.AssembleMission assemble = 5;
  for (int i = 0; i < this->assemble_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->assemble(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.Mission)
  return target;
}

int Mission::ByteSize() const {
  int total_size = 0;

  // repeated .MissionConfig.WhetherMission whether = 1;
  total_size += 1 * this->whether_size();
  for (int i = 0; i < this->whether_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->whether(i));
  }

  // repeated .MissionConfig.SingleMission single = 2;
  total_size += 1 * this->single_size();
  for (int i = 0; i < this->single_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->single(i));
  }

  // repeated .MissionConfig.DoubleMission _double = 3;
  total_size += 1 * this->_double_size();
  for (int i = 0; i < this->_double_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_double(i));
  }

  // repeated .MissionConfig.TripleMission triple = 4;
  total_size += 1 * this->triple_size();
  for (int i = 0; i < this->triple_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triple(i));
  }

  // repeated .MissionConfig.AssembleMission assemble = 5;
  total_size += 1 * this->assemble_size();
  for (int i = 0; i < this->assemble_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assemble(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
  GOOGLE_CHECK_NE(&from, this);
  whether_.MergeFrom(from.whether_);
  single_.MergeFrom(from.single_);
  _double_.MergeFrom(from._double_);
  triple_.MergeFrom(from.triple_);
  assemble_.MergeFrom(from.assemble_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->whether())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->single())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->_double())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->triple())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->assemble())) return false;
  return true;
}

void Mission::Swap(Mission* other) {
  if (other != this) {
    whether_.Swap(&other->whether_);
    single_.Swap(&other->single_);
    _double_.Swap(&other->_double_);
    triple_.Swap(&other->triple_);
    assemble_.Swap(&other->assemble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mission_descriptor_;
  metadata.reflection = Mission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionAll::kMissionsFieldNumber;
#endif  // !_MSC_VER

MissionAll::MissionAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MissionConfig.MissionAll)
}

void MissionAll::InitAsDefaultInstance() {
  missions_ = const_cast< ::MissionConfig::Mission*>(&::MissionConfig::Mission::default_instance());
}

MissionAll::MissionAll(const MissionAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MissionConfig.MissionAll)
}

void MissionAll::SharedCtor() {
  _cached_size_ = 0;
  missions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionAll::~MissionAll() {
  // @@protoc_insertion_point(destructor:MissionConfig.MissionAll)
  SharedDtor();
}

void MissionAll::SharedDtor() {
  if (this != default_instance_) {
    delete missions_;
  }
}

void MissionAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionAll_descriptor_;
}

const MissionAll& MissionAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MissionConfig_2eproto();
  return *default_instance_;
}

MissionAll* MissionAll::default_instance_ = NULL;

MissionAll* MissionAll::New() const {
  return new MissionAll;
}

void MissionAll::Clear() {
  if (has_missions()) {
    if (missions_ != NULL) missions_->::MissionConfig::Mission::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MissionConfig.MissionAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MissionConfig.Mission missions = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MissionConfig.MissionAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MissionConfig.MissionAll)
  return false;
#undef DO_
}

void MissionAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MissionConfig.MissionAll)
  // required .MissionConfig.Mission missions = 1;
  if (has_missions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MissionConfig.MissionAll)
}

::google::protobuf::uint8* MissionAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MissionConfig.MissionAll)
  // required .MissionConfig.Mission missions = 1;
  if (has_missions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MissionConfig.MissionAll)
  return target;
}

int MissionAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MissionConfig.Mission missions = 1;
    if (has_missions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionAll::MergeFrom(const MissionAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missions()) {
      mutable_missions()->::MissionConfig::Mission::MergeFrom(from.missions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionAll::CopyFrom(const MissionAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionAll::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_missions()) {
    if (!this->missions().IsInitialized()) return false;
  }
  return true;
}

void MissionAll::Swap(MissionAll* other) {
  if (other != this) {
    std::swap(missions_, other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionAll_descriptor_;
  metadata.reflection = MissionAll_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MissionConfig

// @@protoc_insertion_point(global_scope)
