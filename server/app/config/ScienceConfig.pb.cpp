// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ScienceConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ScienceConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ScienceConfig {

namespace {

const ::google::protobuf::Descriptor* ScienceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScienceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Science_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Science_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ScienceConfig_2eproto() {
  protobuf_AddDesc_ScienceConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ScienceConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ScienceItem_descriptor_ = file->message_type(0);
  static const int ScienceItem_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, cost_coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, cost_food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, cost_wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, cost_iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, capital_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, pre_lock_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, speed_cash_),
  };
  ScienceItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScienceItem_descriptor_,
      ScienceItem::default_instance_,
      ScienceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScienceItem));
  Science_descriptor_ = file->message_type(1);
  static const int Science_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, sciences_),
  };
  Science_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Science_descriptor_,
      Science::default_instance_,
      Science_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Science, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Science));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ScienceConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScienceItem_descriptor_, &ScienceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Science_descriptor_, &Science::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ScienceConfig_2eproto() {
  delete ScienceItem::default_instance_;
  delete ScienceItem_reflection_;
  delete Science::default_instance_;
  delete Science_reflection_;
}

void protobuf_AddDesc_ScienceConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ScienceConfig.proto\022\rScienceConfig\"\331\001\n"
    "\013ScienceItem\022\n\n\002id\030\001 \002(\r\022\014\n\004pass\030\002 \002(\r\022\014"
    "\n\004type\030\003 \002(\r\022\013\n\003val\030\004 \002(\r\022\n\n\002cd\030\005 \002(\r\022\022\n"
    "\ncost_coins\030\006 \002(\r\022\021\n\tcost_food\030\007 \002(\r\022\021\n\t"
    "cost_wood\030\010 \002(\r\022\021\n\tcost_iron\030\t \002(\r\022\023\n\013ca"
    "pital_cnt\030\n \002(\r\022\023\n\013pre_lock_id\030\013 \002(\r\022\022\n\n"
    "speed_cash\030\014 \002(\r\"7\n\007Science\022,\n\010sciences\030"
    "\001 \003(\0132\032.ScienceConfig.ScienceItem", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ScienceConfig.proto", &protobuf_RegisterTypes);
  ScienceItem::default_instance_ = new ScienceItem();
  Science::default_instance_ = new Science();
  ScienceItem::default_instance_->InitAsDefaultInstance();
  Science::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ScienceConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ScienceConfig_2eproto {
  StaticDescriptorInitializer_ScienceConfig_2eproto() {
    protobuf_AddDesc_ScienceConfig_2eproto();
  }
} static_descriptor_initializer_ScienceConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ScienceItem::kIdFieldNumber;
const int ScienceItem::kPassFieldNumber;
const int ScienceItem::kTypeFieldNumber;
const int ScienceItem::kValFieldNumber;
const int ScienceItem::kCdFieldNumber;
const int ScienceItem::kCostCoinsFieldNumber;
const int ScienceItem::kCostFoodFieldNumber;
const int ScienceItem::kCostWoodFieldNumber;
const int ScienceItem::kCostIronFieldNumber;
const int ScienceItem::kCapitalCntFieldNumber;
const int ScienceItem::kPreLockIdFieldNumber;
const int ScienceItem::kSpeedCashFieldNumber;
#endif  // !_MSC_VER

ScienceItem::ScienceItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScienceConfig.ScienceItem)
}

void ScienceItem::InitAsDefaultInstance() {
}

ScienceItem::ScienceItem(const ScienceItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScienceConfig.ScienceItem)
}

void ScienceItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pass_ = 0u;
  type_ = 0u;
  val_ = 0u;
  cd_ = 0u;
  cost_coins_ = 0u;
  cost_food_ = 0u;
  cost_wood_ = 0u;
  cost_iron_ = 0u;
  capital_cnt_ = 0u;
  pre_lock_id_ = 0u;
  speed_cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScienceItem::~ScienceItem() {
  // @@protoc_insertion_point(destructor:ScienceConfig.ScienceItem)
  SharedDtor();
}

void ScienceItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScienceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScienceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScienceItem_descriptor_;
}

const ScienceItem& ScienceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScienceConfig_2eproto();
  return *default_instance_;
}

ScienceItem* ScienceItem::default_instance_ = NULL;

ScienceItem* ScienceItem::New() const {
  return new ScienceItem;
}

void ScienceItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScienceItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, cost_wood_);
  }
  ZR_(cost_iron_, speed_cash_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScienceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScienceConfig.ScienceItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // required uint32 pass = 2;
      case 2: {
        if (tag == 16) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_val;
        break;
      }

      // required uint32 val = 4;
      case 4: {
        if (tag == 32) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cd;
        break;
      }

      // required uint32 cd = 5;
      case 5: {
        if (tag == 40) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cost_coins;
        break;
      }

      // required uint32 cost_coins = 6;
      case 6: {
        if (tag == 48) {
         parse_cost_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_coins_)));
          set_has_cost_coins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cost_food;
        break;
      }

      // required uint32 cost_food = 7;
      case 7: {
        if (tag == 56) {
         parse_cost_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_food_)));
          set_has_cost_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_cost_wood;
        break;
      }

      // required uint32 cost_wood = 8;
      case 8: {
        if (tag == 64) {
         parse_cost_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_wood_)));
          set_has_cost_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cost_iron;
        break;
      }

      // required uint32 cost_iron = 9;
      case 9: {
        if (tag == 72) {
         parse_cost_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_iron_)));
          set_has_cost_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_capital_cnt;
        break;
      }

      // required uint32 capital_cnt = 10;
      case 10: {
        if (tag == 80) {
         parse_capital_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capital_cnt_)));
          set_has_capital_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pre_lock_id;
        break;
      }

      // required uint32 pre_lock_id = 11;
      case 11: {
        if (tag == 88) {
         parse_pre_lock_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_lock_id_)));
          set_has_pre_lock_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_speed_cash;
        break;
      }

      // required uint32 speed_cash = 12;
      case 12: {
        if (tag == 96) {
         parse_speed_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_cash_)));
          set_has_speed_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScienceConfig.ScienceItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScienceConfig.ScienceItem)
  return false;
#undef DO_
}

void ScienceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScienceConfig.ScienceItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pass(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 val = 4;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->val(), output);
  }

  // required uint32 cd = 5;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cd(), output);
  }

  // required uint32 cost_coins = 6;
  if (has_cost_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cost_coins(), output);
  }

  // required uint32 cost_food = 7;
  if (has_cost_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cost_food(), output);
  }

  // required uint32 cost_wood = 8;
  if (has_cost_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cost_wood(), output);
  }

  // required uint32 cost_iron = 9;
  if (has_cost_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cost_iron(), output);
  }

  // required uint32 capital_cnt = 10;
  if (has_capital_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->capital_cnt(), output);
  }

  // required uint32 pre_lock_id = 11;
  if (has_pre_lock_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pre_lock_id(), output);
  }

  // required uint32 speed_cash = 12;
  if (has_speed_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->speed_cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScienceConfig.ScienceItem)
}

::google::protobuf::uint8* ScienceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScienceConfig.ScienceItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pass(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // required uint32 val = 4;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->val(), target);
  }

  // required uint32 cd = 5;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cd(), target);
  }

  // required uint32 cost_coins = 6;
  if (has_cost_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cost_coins(), target);
  }

  // required uint32 cost_food = 7;
  if (has_cost_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cost_food(), target);
  }

  // required uint32 cost_wood = 8;
  if (has_cost_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cost_wood(), target);
  }

  // required uint32 cost_iron = 9;
  if (has_cost_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cost_iron(), target);
  }

  // required uint32 capital_cnt = 10;
  if (has_capital_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->capital_cnt(), target);
  }

  // required uint32 pre_lock_id = 11;
  if (has_pre_lock_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pre_lock_id(), target);
  }

  // required uint32 speed_cash = 12;
  if (has_speed_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->speed_cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScienceConfig.ScienceItem)
  return target;
}

int ScienceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 val = 4;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

    // required uint32 cd = 5;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // required uint32 cost_coins = 6;
    if (has_cost_coins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_coins());
    }

    // required uint32 cost_food = 7;
    if (has_cost_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_food());
    }

    // required uint32 cost_wood = 8;
    if (has_cost_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_wood());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 cost_iron = 9;
    if (has_cost_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_iron());
    }

    // required uint32 capital_cnt = 10;
    if (has_capital_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->capital_cnt());
    }

    // required uint32 pre_lock_id = 11;
    if (has_pre_lock_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_lock_id());
    }

    // required uint32 speed_cash = 12;
    if (has_speed_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed_cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScienceItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScienceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScienceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScienceItem::MergeFrom(const ScienceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_cost_coins()) {
      set_cost_coins(from.cost_coins());
    }
    if (from.has_cost_food()) {
      set_cost_food(from.cost_food());
    }
    if (from.has_cost_wood()) {
      set_cost_wood(from.cost_wood());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cost_iron()) {
      set_cost_iron(from.cost_iron());
    }
    if (from.has_capital_cnt()) {
      set_capital_cnt(from.capital_cnt());
    }
    if (from.has_pre_lock_id()) {
      set_pre_lock_id(from.pre_lock_id());
    }
    if (from.has_speed_cash()) {
      set_speed_cash(from.speed_cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScienceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScienceItem::CopyFrom(const ScienceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScienceItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void ScienceItem::Swap(ScienceItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pass_, other->pass_);
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(cd_, other->cd_);
    std::swap(cost_coins_, other->cost_coins_);
    std::swap(cost_food_, other->cost_food_);
    std::swap(cost_wood_, other->cost_wood_);
    std::swap(cost_iron_, other->cost_iron_);
    std::swap(capital_cnt_, other->capital_cnt_);
    std::swap(pre_lock_id_, other->pre_lock_id_);
    std::swap(speed_cash_, other->speed_cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScienceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScienceItem_descriptor_;
  metadata.reflection = ScienceItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Science::kSciencesFieldNumber;
#endif  // !_MSC_VER

Science::Science()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScienceConfig.Science)
}

void Science::InitAsDefaultInstance() {
}

Science::Science(const Science& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ScienceConfig.Science)
}

void Science::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Science::~Science() {
  // @@protoc_insertion_point(destructor:ScienceConfig.Science)
  SharedDtor();
}

void Science::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Science::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Science::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Science_descriptor_;
}

const Science& Science::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ScienceConfig_2eproto();
  return *default_instance_;
}

Science* Science::default_instance_ = NULL;

Science* Science::New() const {
  return new Science;
}

void Science::Clear() {
  sciences_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Science::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScienceConfig.Science)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ScienceConfig.ScienceItem sciences = 1;
      case 1: {
        if (tag == 10) {
         parse_sciences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sciences()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_sciences;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScienceConfig.Science)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScienceConfig.Science)
  return false;
#undef DO_
}

void Science::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScienceConfig.Science)
  // repeated .ScienceConfig.ScienceItem sciences = 1;
  for (int i = 0; i < this->sciences_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sciences(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScienceConfig.Science)
}

::google::protobuf::uint8* Science::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScienceConfig.Science)
  // repeated .ScienceConfig.ScienceItem sciences = 1;
  for (int i = 0; i < this->sciences_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sciences(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScienceConfig.Science)
  return target;
}

int Science::ByteSize() const {
  int total_size = 0;

  // repeated .ScienceConfig.ScienceItem sciences = 1;
  total_size += 1 * this->sciences_size();
  for (int i = 0; i < this->sciences_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sciences(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Science::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Science* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Science*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Science::MergeFrom(const Science& from) {
  GOOGLE_CHECK_NE(&from, this);
  sciences_.MergeFrom(from.sciences_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Science::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Science::CopyFrom(const Science& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Science::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->sciences())) return false;
  return true;
}

void Science::Swap(Science* other) {
  if (other != this) {
    sciences_.Swap(&other->sciences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Science::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Science_descriptor_;
  metadata.reflection = Science_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ScienceConfig

// @@protoc_insertion_point(global_scope)
