// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OperaBattleConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OperaBattleConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OperaBattleConfig {

namespace {

const ::google::protobuf::Descriptor* StarReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DifficultyReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DifficultyReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleRewardAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleRewardAll_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OperaBattleConfig_2eproto() {
  protobuf_AddDesc_OperaBattleConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OperaBattleConfig.proto");
  GOOGLE_CHECK(file != NULL);
  StarReward_descriptor_ = file->message_type(0);
  static const int StarReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarReward, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarReward, cash_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarReward, time_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarReward, reward_),
  };
  StarReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarReward_descriptor_,
      StarReward::default_instance_,
      StarReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarReward));
  DifficultyReward_descriptor_ = file->message_type(1);
  static const int DifficultyReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifficultyReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifficultyReward, time_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifficultyReward, cost_food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifficultyReward, star_reward_),
  };
  DifficultyReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DifficultyReward_descriptor_,
      DifficultyReward::default_instance_,
      DifficultyReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifficultyReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DifficultyReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DifficultyReward));
  BattleReward_descriptor_ = file->message_type(2);
  static const int BattleReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, difficulty_),
  };
  BattleReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleReward_descriptor_,
      BattleReward::default_instance_,
      BattleReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleReward));
  BattleRewardAll_descriptor_ = file->message_type(3);
  static const int BattleRewardAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRewardAll, battle_rewards_),
  };
  BattleRewardAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleRewardAll_descriptor_,
      BattleRewardAll::default_instance_,
      BattleRewardAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRewardAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRewardAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleRewardAll));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OperaBattleConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarReward_descriptor_, &StarReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DifficultyReward_descriptor_, &DifficultyReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleReward_descriptor_, &BattleReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleRewardAll_descriptor_, &BattleRewardAll::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OperaBattleConfig_2eproto() {
  delete StarReward::default_instance_;
  delete StarReward_reflection_;
  delete DifficultyReward::default_instance_;
  delete DifficultyReward_reflection_;
  delete BattleReward::default_instance_;
  delete BattleReward_reflection_;
  delete BattleRewardAll::default_instance_;
  delete BattleRewardAll_reflection_;
}

void protobuf_AddDesc_OperaBattleConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027OperaBattleConfig.proto\022\021OperaBattleCo"
    "nfig\032\022RewardConfig.proto\"f\n\nStarReward\022\014"
    "\n\004star\030\001 \002(\r\022\021\n\tcash_cost\030\002 \002(\r\022\021\n\ttime_"
    "left\030\003 \002(\r\022$\n\006reward\030\004 \003(\0132\024.RewardConfi"
    "g.Reward\"|\n\020DifficultyReward\022\r\n\005index\030\001 "
    "\002(\r\022\022\n\ntime_limit\030\002 \002(\r\022\021\n\tcost_food\030\003 \002"
    "(\r\0222\n\013star_reward\030\004 \003(\0132\035.OperaBattleCon"
    "fig.StarReward\"S\n\014BattleReward\022\n\n\002id\030\001 \002"
    "(\r\0227\n\ndifficulty\030\002 \003(\0132#.OperaBattleConf"
    "ig.DifficultyReward\"J\n\017BattleRewardAll\0227"
    "\n\016battle_rewards\030\001 \003(\0132\037.OperaBattleConf"
    "ig.BattleReward", 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OperaBattleConfig.proto", &protobuf_RegisterTypes);
  StarReward::default_instance_ = new StarReward();
  DifficultyReward::default_instance_ = new DifficultyReward();
  BattleReward::default_instance_ = new BattleReward();
  BattleRewardAll::default_instance_ = new BattleRewardAll();
  StarReward::default_instance_->InitAsDefaultInstance();
  DifficultyReward::default_instance_->InitAsDefaultInstance();
  BattleReward::default_instance_->InitAsDefaultInstance();
  BattleRewardAll::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OperaBattleConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OperaBattleConfig_2eproto {
  StaticDescriptorInitializer_OperaBattleConfig_2eproto() {
    protobuf_AddDesc_OperaBattleConfig_2eproto();
  }
} static_descriptor_initializer_OperaBattleConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StarReward::kStarFieldNumber;
const int StarReward::kCashCostFieldNumber;
const int StarReward::kTimeLeftFieldNumber;
const int StarReward::kRewardFieldNumber;
#endif  // !_MSC_VER

StarReward::StarReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OperaBattleConfig.StarReward)
}

void StarReward::InitAsDefaultInstance() {
}

StarReward::StarReward(const StarReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OperaBattleConfig.StarReward)
}

void StarReward::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  cash_cost_ = 0u;
  time_left_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarReward::~StarReward() {
  // @@protoc_insertion_point(destructor:OperaBattleConfig.StarReward)
  SharedDtor();
}

void StarReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StarReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarReward_descriptor_;
}

const StarReward& StarReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OperaBattleConfig_2eproto();
  return *default_instance_;
}

StarReward* StarReward::default_instance_ = NULL;

StarReward* StarReward::New() const {
  return new StarReward;
}

void StarReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StarReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(star_, cash_cost_);
    time_left_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OperaBattleConfig.StarReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 star = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash_cost;
        break;
      }

      // required uint32 cash_cost = 2;
      case 2: {
        if (tag == 16) {
         parse_cash_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_cost_)));
          set_has_cash_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time_left;
        break;
      }

      // required uint32 time_left = 3;
      case 3: {
        if (tag == 24) {
         parse_time_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_left_)));
          set_has_time_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // repeated .RewardConfig.Reward reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OperaBattleConfig.StarReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OperaBattleConfig.StarReward)
  return false;
#undef DO_
}

void StarReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OperaBattleConfig.StarReward)
  // required uint32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star(), output);
  }

  // required uint32 cash_cost = 2;
  if (has_cash_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash_cost(), output);
  }

  // required uint32 time_left = 3;
  if (has_time_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_left(), output);
  }

  // repeated .RewardConfig.Reward reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OperaBattleConfig.StarReward)
}

::google::protobuf::uint8* StarReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperaBattleConfig.StarReward)
  // required uint32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star(), target);
  }

  // required uint32 cash_cost = 2;
  if (has_cash_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash_cost(), target);
  }

  // required uint32 time_left = 3;
  if (has_time_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_left(), target);
  }

  // repeated .RewardConfig.Reward reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperaBattleConfig.StarReward)
  return target;
}

int StarReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 cash_cost = 2;
    if (has_cash_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash_cost());
    }

    // required uint32 time_left = 3;
    if (has_time_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_left());
    }

  }
  // repeated .RewardConfig.Reward reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarReward::MergeFrom(const StarReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_cash_cost()) {
      set_cash_cost(from.cash_cost());
    }
    if (from.has_time_left()) {
      set_time_left(from.time_left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarReward::CopyFrom(const StarReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void StarReward::Swap(StarReward* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    std::swap(cash_cost_, other->cash_cost_);
    std::swap(time_left_, other->time_left_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarReward_descriptor_;
  metadata.reflection = StarReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DifficultyReward::kIndexFieldNumber;
const int DifficultyReward::kTimeLimitFieldNumber;
const int DifficultyReward::kCostFoodFieldNumber;
const int DifficultyReward::kStarRewardFieldNumber;
#endif  // !_MSC_VER

DifficultyReward::DifficultyReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OperaBattleConfig.DifficultyReward)
}

void DifficultyReward::InitAsDefaultInstance() {
}

DifficultyReward::DifficultyReward(const DifficultyReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OperaBattleConfig.DifficultyReward)
}

void DifficultyReward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  time_limit_ = 0u;
  cost_food_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DifficultyReward::~DifficultyReward() {
  // @@protoc_insertion_point(destructor:OperaBattleConfig.DifficultyReward)
  SharedDtor();
}

void DifficultyReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DifficultyReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DifficultyReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DifficultyReward_descriptor_;
}

const DifficultyReward& DifficultyReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OperaBattleConfig_2eproto();
  return *default_instance_;
}

DifficultyReward* DifficultyReward::default_instance_ = NULL;

DifficultyReward* DifficultyReward::New() const {
  return new DifficultyReward;
}

void DifficultyReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DifficultyReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, time_limit_);
    cost_food_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  star_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DifficultyReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OperaBattleConfig.DifficultyReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time_limit;
        break;
      }

      // required uint32 time_limit = 2;
      case 2: {
        if (tag == 16) {
         parse_time_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_limit_)));
          set_has_time_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost_food;
        break;
      }

      // required uint32 cost_food = 3;
      case 3: {
        if (tag == 24) {
         parse_cost_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_food_)));
          set_has_cost_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_star_reward;
        break;
      }

      // repeated .OperaBattleConfig.StarReward star_reward = 4;
      case 4: {
        if (tag == 34) {
         parse_star_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_star_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_star_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OperaBattleConfig.DifficultyReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OperaBattleConfig.DifficultyReward)
  return false;
#undef DO_
}

void DifficultyReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OperaBattleConfig.DifficultyReward)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required uint32 time_limit = 2;
  if (has_time_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_limit(), output);
  }

  // required uint32 cost_food = 3;
  if (has_cost_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_food(), output);
  }

  // repeated .OperaBattleConfig.StarReward star_reward = 4;
  for (int i = 0; i < this->star_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->star_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OperaBattleConfig.DifficultyReward)
}

::google::protobuf::uint8* DifficultyReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperaBattleConfig.DifficultyReward)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required uint32 time_limit = 2;
  if (has_time_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_limit(), target);
  }

  // required uint32 cost_food = 3;
  if (has_cost_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_food(), target);
  }

  // repeated .OperaBattleConfig.StarReward star_reward = 4;
  for (int i = 0; i < this->star_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->star_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperaBattleConfig.DifficultyReward)
  return target;
}

int DifficultyReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required uint32 time_limit = 2;
    if (has_time_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_limit());
    }

    // required uint32 cost_food = 3;
    if (has_cost_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_food());
    }

  }
  // repeated .OperaBattleConfig.StarReward star_reward = 4;
  total_size += 1 * this->star_reward_size();
  for (int i = 0; i < this->star_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->star_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DifficultyReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DifficultyReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DifficultyReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DifficultyReward::MergeFrom(const DifficultyReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  star_reward_.MergeFrom(from.star_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_time_limit()) {
      set_time_limit(from.time_limit());
    }
    if (from.has_cost_food()) {
      set_cost_food(from.cost_food());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DifficultyReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DifficultyReward::CopyFrom(const DifficultyReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DifficultyReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->star_reward())) return false;
  return true;
}

void DifficultyReward::Swap(DifficultyReward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(time_limit_, other->time_limit_);
    std::swap(cost_food_, other->cost_food_);
    star_reward_.Swap(&other->star_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DifficultyReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DifficultyReward_descriptor_;
  metadata.reflection = DifficultyReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleReward::kIdFieldNumber;
const int BattleReward::kDifficultyFieldNumber;
#endif  // !_MSC_VER

BattleReward::BattleReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OperaBattleConfig.BattleReward)
}

void BattleReward::InitAsDefaultInstance() {
}

BattleReward::BattleReward(const BattleReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OperaBattleConfig.BattleReward)
}

void BattleReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleReward::~BattleReward() {
  // @@protoc_insertion_point(destructor:OperaBattleConfig.BattleReward)
  SharedDtor();
}

void BattleReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleReward_descriptor_;
}

const BattleReward& BattleReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OperaBattleConfig_2eproto();
  return *default_instance_;
}

BattleReward* BattleReward::default_instance_ = NULL;

BattleReward* BattleReward::New() const {
  return new BattleReward;
}

void BattleReward::Clear() {
  id_ = 0u;
  difficulty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OperaBattleConfig.BattleReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_difficulty;
        break;
      }

      // repeated .OperaBattleConfig.DifficultyReward difficulty = 2;
      case 2: {
        if (tag == 18) {
         parse_difficulty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_difficulty()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_difficulty;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OperaBattleConfig.BattleReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OperaBattleConfig.BattleReward)
  return false;
#undef DO_
}

void BattleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OperaBattleConfig.BattleReward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .OperaBattleConfig.DifficultyReward difficulty = 2;
  for (int i = 0; i < this->difficulty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->difficulty(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OperaBattleConfig.BattleReward)
}

::google::protobuf::uint8* BattleReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperaBattleConfig.BattleReward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .OperaBattleConfig.DifficultyReward difficulty = 2;
  for (int i = 0; i < this->difficulty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->difficulty(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperaBattleConfig.BattleReward)
  return target;
}

int BattleReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .OperaBattleConfig.DifficultyReward difficulty = 2;
  total_size += 1 * this->difficulty_size();
  for (int i = 0; i < this->difficulty_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->difficulty(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleReward::MergeFrom(const BattleReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  difficulty_.MergeFrom(from.difficulty_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleReward::CopyFrom(const BattleReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->difficulty())) return false;
  return true;
}

void BattleReward::Swap(BattleReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    difficulty_.Swap(&other->difficulty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleReward_descriptor_;
  metadata.reflection = BattleReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRewardAll::kBattleRewardsFieldNumber;
#endif  // !_MSC_VER

BattleRewardAll::BattleRewardAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OperaBattleConfig.BattleRewardAll)
}

void BattleRewardAll::InitAsDefaultInstance() {
}

BattleRewardAll::BattleRewardAll(const BattleRewardAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OperaBattleConfig.BattleRewardAll)
}

void BattleRewardAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRewardAll::~BattleRewardAll() {
  // @@protoc_insertion_point(destructor:OperaBattleConfig.BattleRewardAll)
  SharedDtor();
}

void BattleRewardAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleRewardAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleRewardAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleRewardAll_descriptor_;
}

const BattleRewardAll& BattleRewardAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OperaBattleConfig_2eproto();
  return *default_instance_;
}

BattleRewardAll* BattleRewardAll::default_instance_ = NULL;

BattleRewardAll* BattleRewardAll::New() const {
  return new BattleRewardAll;
}

void BattleRewardAll::Clear() {
  battle_rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleRewardAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OperaBattleConfig.BattleRewardAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OperaBattleConfig.BattleReward battle_rewards = 1;
      case 1: {
        if (tag == 10) {
         parse_battle_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_battle_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OperaBattleConfig.BattleRewardAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OperaBattleConfig.BattleRewardAll)
  return false;
#undef DO_
}

void BattleRewardAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OperaBattleConfig.BattleRewardAll)
  // repeated .OperaBattleConfig.BattleReward battle_rewards = 1;
  for (int i = 0; i < this->battle_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OperaBattleConfig.BattleRewardAll)
}

::google::protobuf::uint8* BattleRewardAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OperaBattleConfig.BattleRewardAll)
  // repeated .OperaBattleConfig.BattleReward battle_rewards = 1;
  for (int i = 0; i < this->battle_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OperaBattleConfig.BattleRewardAll)
  return target;
}

int BattleRewardAll::ByteSize() const {
  int total_size = 0;

  // repeated .OperaBattleConfig.BattleReward battle_rewards = 1;
  total_size += 1 * this->battle_rewards_size();
  for (int i = 0; i < this->battle_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRewardAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleRewardAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleRewardAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleRewardAll::MergeFrom(const BattleRewardAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_rewards_.MergeFrom(from.battle_rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleRewardAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleRewardAll::CopyFrom(const BattleRewardAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRewardAll::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->battle_rewards())) return false;
  return true;
}

void BattleRewardAll::Swap(BattleRewardAll* other) {
  if (other != this) {
    battle_rewards_.Swap(&other->battle_rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleRewardAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleRewardAll_descriptor_;
  metadata.reflection = BattleRewardAll_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OperaBattleConfig

// @@protoc_insertion_point(global_scope)
