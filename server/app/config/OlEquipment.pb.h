// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OlEquipment.proto

#ifndef PROTOBUF_OlEquipment_2eproto__INCLUDED
#define PROTOBUF_OlEquipment_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "VipGiftConfig.pb.h"
#include "CommonGiftConfig.pb.h"
#include "RewardConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace EquipmentConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OlEquipment_2eproto();
void protobuf_AssignDesc_OlEquipment_2eproto();
void protobuf_ShutdownFile_OlEquipment_2eproto();

class Born;
class Equip;
class SPProperty;
class EquipExp;
class NormalGiftBag;
class LuckGiftBagItem;
class LuckGiftBag;
class TimeLimitProp;
class EquipList;

// ===================================================================

class Born : public ::google::protobuf::Message {
 public:
  Born();
  virtual ~Born();

  Born(const Born& from);

  inline Born& operator=(const Born& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Born& default_instance();

  void Swap(Born* other);

  // implements Message ----------------------------------------------

  Born* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Born& from);
  void MergeFrom(const Born& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EquipmentConfig.Born)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 val_;
  friend void  protobuf_AddDesc_OlEquipment_2eproto();
  friend void protobuf_AssignDesc_OlEquipment_2eproto();
  friend void protobuf_ShutdownFile_OlEquipment_2eproto();

  void InitAsDefaultInstance();
  static Born* default_instance_;
};
// -------------------------------------------------------------------

class Equip : public ::google::protobuf::Message {
 public:
  Equip();
  virtual ~Equip();

  Equip(const Equip& from);

  inline Equip& operator=(const Equip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Equip& default_instance();

  void Swap(Equip* other);

  // implements Message ----------------------------------------------

  Equip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Equip& from);
  void MergeFrom(const Equip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 postion = 3;
  inline bool has_postion() const;
  inline void clear_postion();
  static const int kPostionFieldNumber = 3;
  inline ::google::protobuf::uint32 postion() const;
  inline void set_postion(::google::protobuf::uint32 value);

  // repeated .EquipmentConfig.Born born = 4;
  inline int born_size() const;
  inline void clear_born();
  static const int kBornFieldNumber = 4;
  inline const ::EquipmentConfig::Born& born(int index) const;
  inline ::EquipmentConfig::Born* mutable_born(int index);
  inline ::EquipmentConfig::Born* add_born();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Born >&
      born() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Born >*
      mutable_born();

  // required uint32 star = 5;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 character = 6;
  inline bool has_character() const;
  inline void clear_character();
  static const int kCharacterFieldNumber = 6;
  inline ::google::protobuf::uint32 character() const;
  inline void set_character(::google::protobuf::uint32 value);

  // required uint32 limitnum = 7;
  inline bool has_limitnum() const;
  inline void clear_limitnum();
  static const int kLimitnumFieldNumber = 7;
  inline ::google::protobuf::uint32 limitnum() const;
  inline void set_limitnum(::google::protobuf::uint32 value);

  // required uint32 price = 8;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 8;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EquipmentConfig.Equip)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_postion();
  inline void clear_has_postion();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_character();
  inline void clear_has_character();
  inline void set_has_limitnum();
  inline void clear_has_limitnum();
  inline void set_has_price();
  inline void clear_has_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Born > born_;
  ::google::protobuf::uint32 postion_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 character_;
  ::google::protobuf::uint32 limitnum_;
  ::google::protobuf::uint32 price_;
  friend void  protobuf_AddDesc_OlEquipment_2eproto();
  friend void protobuf_AssignDesc_OlEquipment_2eproto();
  friend void protobuf_ShutdownFile_OlEquipment_2eproto();

  void InitAsDefaultInstance();
  static Equip* default_instance_;
};
// -------------------------------------------------------------------

class SPProperty : public ::google::protobuf::Message {
 public:
  SPProperty();
  virtual ~SPProperty();

  SPProperty(const SPProperty& from);

  inline SPProperty& operator=(const SPProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SPProperty& default_instance();

  void Swap(SPProperty* other);

  // implements Message ----------------------------------------------

  SPProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SPProperty& from);
  void MergeFrom(const SPProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ch = 1;
  inline bool has_ch() const;
  inline void clear_ch();
  static const int kChFieldNumber = 1;
  inline ::google::protobuf::uint32 ch() const;
  inline void set_ch(::google::protobuf::uint32 value);

  // repeated uint32 value = 2;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::uint32 value);
  inline void add_value(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:EquipmentConfig.SPProperty)
 private:
  inline void set_has_ch();
  inline void clear_has_ch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > value_;
  ::google::protobuf::uint32 ch_;
  friend void  protobuf_AddDesc_OlEquipment_2eproto();
  friend void protobuf_AssignDesc_OlEquipment_2eproto();
  friend void protobuf_ShutdownFile_OlEquipment_2eproto();

  void InitAsDefaultInstance();
  static SPProperty* default_instance_;
};
// -------------------------------------------------------------------

class EquipExp : public ::google::protobuf::Message {
 public:
  EquipExp();
  virtual ~EquipExp();

  EquipExp(const EquipExp& from);

  inline EquipExp& operator=(const EquipExp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipExp& default_instance();

  void Swap(EquipExp* other);

  // implements Message ----------------------------------------------

  EquipExp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipExp& from);
  void MergeFrom(const EquipExp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EquipmentConfig.EquipExp)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 exp_;
  friend void  protobuf_AddDesc_OlEquipment_2eproto();
  friend void protobuf_AssignDesc_OlEquipment_2eproto();
  friend void protobuf_ShutdownFile_OlEquipment_2eproto();

  void InitAsDefaultInstance();
  static EquipExp* default_instance_;
};
// -------------------------------------------------------------------

class NormalGiftBag : public ::google::protobuf::Message {
 public:
  NormalGiftBag();
  virtual ~NormalGiftBag();

  NormalGiftBag(const NormalGiftBag& from);

  inline NormalGiftBag& operator=(const NormalGiftBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalGiftBag& default_instance();

  void Swap(NormalGiftBag* other);

  // implements Message ----------------------------------------------

  NormalGiftBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalGiftBag& from);
  void MergeFrom(const NormalGiftBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // repeated .RewardConfig.Reward gifts = 2;
  inline int gifts_size() const;
  inline void clear_gifts();
  static const int kGiftsFieldNumber = 2;
  inline const ::RewardConfig::Reward& gifts(int index) const;
  inline ::RewardConfig::Reward* mutable_gifts(int index);
  inline ::RewardConfig::Reward* add_gifts();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
      gifts() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
      mutable_gifts();

  // @@protoc_insertion_point(class_scope:EquipmentConfig.NormalGiftBag)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward > gifts_;
  ::google::protobuf::uint32 eqid_;
  friend void  protobuf_AddDesc_OlEquipment_2eproto();
  friend void protobuf_AssignDesc_OlEquipment_2eproto();
  friend void protobuf_ShutdownFile_OlEquipment_2eproto();

  void InitAsDefaultInstance();
  static NormalGiftBag* default_instance_;
};
// -------------------------------------------------------------------

class LuckGiftBagItem : public ::google::protobuf::Message {
 public:
  LuckGiftBagItem();
  virtual ~LuckGiftBagItem();

  LuckGiftBagItem(const LuckGiftBagItem& from);

  inline LuckGiftBagItem& operator=(const LuckGiftBagItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LuckGiftBagItem& default_instance();

  void Swap(LuckGiftBagItem* other);

  // implements Message ----------------------------------------------

  LuckGiftBagItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LuckGiftBagItem& from);
  void MergeFrom(const LuckGiftBagItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .VipGiftConfig.EquipReward equips = 1;
  inline bool has_equips() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 1;
  inline const ::VipGiftConfig::EquipReward& equips() const;
  inline ::VipGiftConfig::EquipReward* mutable_equips();
  inline ::VipGiftConfig::EquipReward* release_equips();
  inline void set_allocated_equips(::VipGiftConfig::EquipReward* equips);

  // optional .CommonGiftConfig.BaseReward base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::CommonGiftConfig::BaseReward& base() const;
  inline ::CommonGiftConfig::BaseReward* mutable_base();
  inline ::CommonGiftConfig::BaseReward* release_base();
  inline void set_allocated_base(::CommonGiftConfig::BaseReward* base);

  // optional uint32 hero = 3;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 3;
  inline ::google::protobuf::uint32 hero() const;
  inline void set_hero(::google::protobuf::uint32 value);

  // optional .RewardConfig.Component component = 4;
  inline bool has_component() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 4;
  inline const ::RewardConfig::Component& component() const;
  inline ::RewardConfig::Component* mutable_component();
  inline ::RewardConfig::Component* release_component();
  inline void set_allocated_component(::RewardConfig::Component* component);

  // required uint32 prob = 5;
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 5;
  inline ::google::protobuf::uint32 prob() const;
  inline void set_prob(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EquipmentConfig.LuckGiftBagItem)
 private:
  inline void set_has_equips();
  inline void clear_has_equips();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_component();
  inline void clear_has_component();
  inline void set_has_prob();
  inline void clear_has_prob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::EquipReward* equips_;
  ::CommonGiftConfig::BaseReward* base_;
  ::RewardConfig::Component* component_;
  ::google::protobuf::uint32 hero_;
  ::google::protobuf::uint32 prob_;
  friend void  protobuf_AddDesc_OlEquipment_2eproto();
  friend void protobuf_AssignDesc_OlEquipment_2eproto();
  friend void protobuf_ShutdownFile_OlEquipment_2eproto();

  void InitAsDefaultInstance();
  static LuckGiftBagItem* default_instance_;
};
// -------------------------------------------------------------------

class LuckGiftBag : public ::google::protobuf::Message {
 public:
  LuckGiftBag();
  virtual ~LuckGiftBag();

  LuckGiftBag(const LuckGiftBag& from);

  inline LuckGiftBag& operator=(const LuckGiftBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LuckGiftBag& default_instance();

  void Swap(LuckGiftBag* other);

  // implements Message ----------------------------------------------

  LuckGiftBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LuckGiftBag& from);
  void MergeFrom(const LuckGiftBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 numbers = 2;
  inline bool has_numbers() const;
  inline void clear_numbers();
  static const int kNumbersFieldNumber = 2;
  inline ::google::protobuf::uint32 numbers() const;
  inline void set_numbers(::google::protobuf::uint32 value);

  // repeated .EquipmentConfig.LuckGiftBagItem gifts = 3;
  inline int gifts_size() const;
  inline void clear_gifts();
  static const int kGiftsFieldNumber = 3;
  inline const ::EquipmentConfig::LuckGiftBagItem& gifts(int index) const;
  inline ::EquipmentConfig::LuckGiftBagItem* mutable_gifts(int index);
  inline ::EquipmentConfig::LuckGiftBagItem* add_gifts();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBagItem >&
      gifts() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBagItem >*
      mutable_gifts();

  // @@protoc_insertion_point(class_scope:EquipmentConfig.LuckGiftBag)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_numbers();
  inline void clear_has_numbers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 numbers_;
  ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBagItem > gifts_;
  friend void  protobuf_AddDesc_OlEquipment_2eproto();
  friend void protobuf_AssignDesc_OlEquipment_2eproto();
  friend void protobuf_ShutdownFile_OlEquipment_2eproto();

  void InitAsDefaultInstance();
  static LuckGiftBag* default_instance_;
};
// -------------------------------------------------------------------

class TimeLimitProp : public ::google::protobuf::Message {
 public:
  TimeLimitProp();
  virtual ~TimeLimitProp();

  TimeLimitProp(const TimeLimitProp& from);

  inline TimeLimitProp& operator=(const TimeLimitProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeLimitProp& default_instance();

  void Swap(TimeLimitProp* other);

  // implements Message ----------------------------------------------

  TimeLimitProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeLimitProp& from);
  void MergeFrom(const TimeLimitProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 attribute = 2;
  inline bool has_attribute() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 2;
  inline ::google::protobuf::uint32 attribute() const;
  inline void set_attribute(::google::protobuf::uint32 value);

  // required uint32 valid_peroid = 3;
  inline bool has_valid_peroid() const;
  inline void clear_valid_peroid();
  static const int kValidPeroidFieldNumber = 3;
  inline ::google::protobuf::uint32 valid_peroid() const;
  inline void set_valid_peroid(::google::protobuf::uint32 value);

  // required uint32 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:EquipmentConfig.TimeLimitProp)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_attribute();
  inline void clear_has_attribute();
  inline void set_has_valid_peroid();
  inline void clear_has_valid_peroid();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 attribute_;
  ::google::protobuf::uint32 valid_peroid_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_OlEquipment_2eproto();
  friend void protobuf_AssignDesc_OlEquipment_2eproto();
  friend void protobuf_ShutdownFile_OlEquipment_2eproto();

  void InitAsDefaultInstance();
  static TimeLimitProp* default_instance_;
};
// -------------------------------------------------------------------

class EquipList : public ::google::protobuf::Message {
 public:
  EquipList();
  virtual ~EquipList();

  EquipList(const EquipList& from);

  inline EquipList& operator=(const EquipList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipList& default_instance();

  void Swap(EquipList* other);

  // implements Message ----------------------------------------------

  EquipList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipList& from);
  void MergeFrom(const EquipList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EquipmentConfig.Equip equips = 1;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 1;
  inline const ::EquipmentConfig::Equip& equips(int index) const;
  inline ::EquipmentConfig::Equip* mutable_equips(int index);
  inline ::EquipmentConfig::Equip* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Equip >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Equip >*
      mutable_equips();

  // required uint32 chmax = 2;
  inline bool has_chmax() const;
  inline void clear_chmax();
  static const int kChmaxFieldNumber = 2;
  inline ::google::protobuf::uint32 chmax() const;
  inline void set_chmax(::google::protobuf::uint32 value);

  // repeated .EquipmentConfig.SPProperty spProp = 3;
  inline int spprop_size() const;
  inline void clear_spprop();
  static const int kSpPropFieldNumber = 3;
  inline const ::EquipmentConfig::SPProperty& spprop(int index) const;
  inline ::EquipmentConfig::SPProperty* mutable_spprop(int index);
  inline ::EquipmentConfig::SPProperty* add_spprop();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::SPProperty >&
      spprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::SPProperty >*
      mutable_spprop();

  // repeated .EquipmentConfig.EquipExp equipexp = 4;
  inline int equipexp_size() const;
  inline void clear_equipexp();
  static const int kEquipexpFieldNumber = 4;
  inline const ::EquipmentConfig::EquipExp& equipexp(int index) const;
  inline ::EquipmentConfig::EquipExp* mutable_equipexp(int index);
  inline ::EquipmentConfig::EquipExp* add_equipexp();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::EquipExp >&
      equipexp() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::EquipExp >*
      mutable_equipexp();

  // repeated .EquipmentConfig.NormalGiftBag normal_giftbag = 5;
  inline int normal_giftbag_size() const;
  inline void clear_normal_giftbag();
  static const int kNormalGiftbagFieldNumber = 5;
  inline const ::EquipmentConfig::NormalGiftBag& normal_giftbag(int index) const;
  inline ::EquipmentConfig::NormalGiftBag* mutable_normal_giftbag(int index);
  inline ::EquipmentConfig::NormalGiftBag* add_normal_giftbag();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::NormalGiftBag >&
      normal_giftbag() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::NormalGiftBag >*
      mutable_normal_giftbag();

  // repeated .EquipmentConfig.LuckGiftBag luck_giftbag = 6;
  inline int luck_giftbag_size() const;
  inline void clear_luck_giftbag();
  static const int kLuckGiftbagFieldNumber = 6;
  inline const ::EquipmentConfig::LuckGiftBag& luck_giftbag(int index) const;
  inline ::EquipmentConfig::LuckGiftBag* mutable_luck_giftbag(int index);
  inline ::EquipmentConfig::LuckGiftBag* add_luck_giftbag();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBag >&
      luck_giftbag() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBag >*
      mutable_luck_giftbag();

  // repeated .EquipmentConfig.TimeLimitProp time_limit_prop = 7;
  inline int time_limit_prop_size() const;
  inline void clear_time_limit_prop();
  static const int kTimeLimitPropFieldNumber = 7;
  inline const ::EquipmentConfig::TimeLimitProp& time_limit_prop(int index) const;
  inline ::EquipmentConfig::TimeLimitProp* mutable_time_limit_prop(int index);
  inline ::EquipmentConfig::TimeLimitProp* add_time_limit_prop();
  inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::TimeLimitProp >&
      time_limit_prop() const;
  inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::TimeLimitProp >*
      mutable_time_limit_prop();

  // @@protoc_insertion_point(class_scope:EquipmentConfig.EquipList)
 private:
  inline void set_has_chmax();
  inline void clear_has_chmax();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Equip > equips_;
  ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::SPProperty > spprop_;
  ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::EquipExp > equipexp_;
  ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::NormalGiftBag > normal_giftbag_;
  ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBag > luck_giftbag_;
  ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::TimeLimitProp > time_limit_prop_;
  ::google::protobuf::uint32 chmax_;
  friend void  protobuf_AddDesc_OlEquipment_2eproto();
  friend void protobuf_AssignDesc_OlEquipment_2eproto();
  friend void protobuf_ShutdownFile_OlEquipment_2eproto();

  void InitAsDefaultInstance();
  static EquipList* default_instance_;
};
// ===================================================================


// ===================================================================

// Born

// required uint32 type = 1;
inline bool Born::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Born::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Born::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Born::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Born::type() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Born.type)
  return type_;
}
inline void Born::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.Born.type)
}

// required uint32 val = 2;
inline bool Born::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Born::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Born::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Born::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 Born::val() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Born.val)
  return val_;
}
inline void Born::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.Born.val)
}

// -------------------------------------------------------------------

// Equip

// required uint32 eqid = 1;
inline bool Equip::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Equip::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Equip::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Equip::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 Equip::eqid() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Equip.eqid)
  return eqid_;
}
inline void Equip::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.Equip.eqid)
}

// required uint32 type = 2;
inline bool Equip::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Equip::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Equip::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Equip::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Equip::type() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Equip.type)
  return type_;
}
inline void Equip::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.Equip.type)
}

// required uint32 postion = 3;
inline bool Equip::has_postion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Equip::set_has_postion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Equip::clear_has_postion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Equip::clear_postion() {
  postion_ = 0u;
  clear_has_postion();
}
inline ::google::protobuf::uint32 Equip::postion() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Equip.postion)
  return postion_;
}
inline void Equip::set_postion(::google::protobuf::uint32 value) {
  set_has_postion();
  postion_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.Equip.postion)
}

// repeated .EquipmentConfig.Born born = 4;
inline int Equip::born_size() const {
  return born_.size();
}
inline void Equip::clear_born() {
  born_.Clear();
}
inline const ::EquipmentConfig::Born& Equip::born(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Equip.born)
  return born_.Get(index);
}
inline ::EquipmentConfig::Born* Equip::mutable_born(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.Equip.born)
  return born_.Mutable(index);
}
inline ::EquipmentConfig::Born* Equip::add_born() {
  // @@protoc_insertion_point(field_add:EquipmentConfig.Equip.born)
  return born_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Born >&
Equip::born() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.Equip.born)
  return born_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Born >*
Equip::mutable_born() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.Equip.born)
  return &born_;
}

// required uint32 star = 5;
inline bool Equip::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Equip::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Equip::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Equip::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 Equip::star() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Equip.star)
  return star_;
}
inline void Equip::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.Equip.star)
}

// required uint32 character = 6;
inline bool Equip::has_character() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Equip::set_has_character() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Equip::clear_has_character() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Equip::clear_character() {
  character_ = 0u;
  clear_has_character();
}
inline ::google::protobuf::uint32 Equip::character() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Equip.character)
  return character_;
}
inline void Equip::set_character(::google::protobuf::uint32 value) {
  set_has_character();
  character_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.Equip.character)
}

// required uint32 limitnum = 7;
inline bool Equip::has_limitnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Equip::set_has_limitnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Equip::clear_has_limitnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Equip::clear_limitnum() {
  limitnum_ = 0u;
  clear_has_limitnum();
}
inline ::google::protobuf::uint32 Equip::limitnum() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Equip.limitnum)
  return limitnum_;
}
inline void Equip::set_limitnum(::google::protobuf::uint32 value) {
  set_has_limitnum();
  limitnum_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.Equip.limitnum)
}

// required uint32 price = 8;
inline bool Equip::has_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Equip::set_has_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Equip::clear_has_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Equip::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 Equip::price() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.Equip.price)
  return price_;
}
inline void Equip::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.Equip.price)
}

// -------------------------------------------------------------------

// SPProperty

// required uint32 ch = 1;
inline bool SPProperty::has_ch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SPProperty::set_has_ch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SPProperty::clear_has_ch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SPProperty::clear_ch() {
  ch_ = 0u;
  clear_has_ch();
}
inline ::google::protobuf::uint32 SPProperty::ch() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.SPProperty.ch)
  return ch_;
}
inline void SPProperty::set_ch(::google::protobuf::uint32 value) {
  set_has_ch();
  ch_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.SPProperty.ch)
}

// repeated uint32 value = 2;
inline int SPProperty::value_size() const {
  return value_.size();
}
inline void SPProperty::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint32 SPProperty::value(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.SPProperty.value)
  return value_.Get(index);
}
inline void SPProperty::set_value(int index, ::google::protobuf::uint32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:EquipmentConfig.SPProperty.value)
}
inline void SPProperty::add_value(::google::protobuf::uint32 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:EquipmentConfig.SPProperty.value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SPProperty::value() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.SPProperty.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SPProperty::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.SPProperty.value)
  return &value_;
}

// -------------------------------------------------------------------

// EquipExp

// required uint32 eqid = 1;
inline bool EquipExp::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipExp::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipExp::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipExp::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 EquipExp::eqid() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.EquipExp.eqid)
  return eqid_;
}
inline void EquipExp::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.EquipExp.eqid)
}

// required uint32 exp = 2;
inline bool EquipExp::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipExp::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipExp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipExp::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 EquipExp::exp() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.EquipExp.exp)
  return exp_;
}
inline void EquipExp::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.EquipExp.exp)
}

// -------------------------------------------------------------------

// NormalGiftBag

// required uint32 eqid = 1;
inline bool NormalGiftBag::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalGiftBag::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalGiftBag::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalGiftBag::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 NormalGiftBag::eqid() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.NormalGiftBag.eqid)
  return eqid_;
}
inline void NormalGiftBag::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.NormalGiftBag.eqid)
}

// repeated .RewardConfig.Reward gifts = 2;
inline int NormalGiftBag::gifts_size() const {
  return gifts_.size();
}
inline void NormalGiftBag::clear_gifts() {
  gifts_.Clear();
}
inline const ::RewardConfig::Reward& NormalGiftBag::gifts(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.NormalGiftBag.gifts)
  return gifts_.Get(index);
}
inline ::RewardConfig::Reward* NormalGiftBag::mutable_gifts(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.NormalGiftBag.gifts)
  return gifts_.Mutable(index);
}
inline ::RewardConfig::Reward* NormalGiftBag::add_gifts() {
  // @@protoc_insertion_point(field_add:EquipmentConfig.NormalGiftBag.gifts)
  return gifts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
NormalGiftBag::gifts() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.NormalGiftBag.gifts)
  return gifts_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
NormalGiftBag::mutable_gifts() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.NormalGiftBag.gifts)
  return &gifts_;
}

// -------------------------------------------------------------------

// LuckGiftBagItem

// optional .VipGiftConfig.EquipReward equips = 1;
inline bool LuckGiftBagItem::has_equips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuckGiftBagItem::set_has_equips() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuckGiftBagItem::clear_has_equips() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuckGiftBagItem::clear_equips() {
  if (equips_ != NULL) equips_->::VipGiftConfig::EquipReward::Clear();
  clear_has_equips();
}
inline const ::VipGiftConfig::EquipReward& LuckGiftBagItem::equips() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.LuckGiftBagItem.equips)
  return equips_ != NULL ? *equips_ : *default_instance_->equips_;
}
inline ::VipGiftConfig::EquipReward* LuckGiftBagItem::mutable_equips() {
  set_has_equips();
  if (equips_ == NULL) equips_ = new ::VipGiftConfig::EquipReward;
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.LuckGiftBagItem.equips)
  return equips_;
}
inline ::VipGiftConfig::EquipReward* LuckGiftBagItem::release_equips() {
  clear_has_equips();
  ::VipGiftConfig::EquipReward* temp = equips_;
  equips_ = NULL;
  return temp;
}
inline void LuckGiftBagItem::set_allocated_equips(::VipGiftConfig::EquipReward* equips) {
  delete equips_;
  equips_ = equips;
  if (equips) {
    set_has_equips();
  } else {
    clear_has_equips();
  }
  // @@protoc_insertion_point(field_set_allocated:EquipmentConfig.LuckGiftBagItem.equips)
}

// optional .CommonGiftConfig.BaseReward base = 2;
inline bool LuckGiftBagItem::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuckGiftBagItem::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuckGiftBagItem::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuckGiftBagItem::clear_base() {
  if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
  clear_has_base();
}
inline const ::CommonGiftConfig::BaseReward& LuckGiftBagItem::base() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.LuckGiftBagItem.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CommonGiftConfig::BaseReward* LuckGiftBagItem::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::CommonGiftConfig::BaseReward;
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.LuckGiftBagItem.base)
  return base_;
}
inline ::CommonGiftConfig::BaseReward* LuckGiftBagItem::release_base() {
  clear_has_base();
  ::CommonGiftConfig::BaseReward* temp = base_;
  base_ = NULL;
  return temp;
}
inline void LuckGiftBagItem::set_allocated_base(::CommonGiftConfig::BaseReward* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:EquipmentConfig.LuckGiftBagItem.base)
}

// optional uint32 hero = 3;
inline bool LuckGiftBagItem::has_hero() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LuckGiftBagItem::set_has_hero() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LuckGiftBagItem::clear_has_hero() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LuckGiftBagItem::clear_hero() {
  hero_ = 0u;
  clear_has_hero();
}
inline ::google::protobuf::uint32 LuckGiftBagItem::hero() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.LuckGiftBagItem.hero)
  return hero_;
}
inline void LuckGiftBagItem::set_hero(::google::protobuf::uint32 value) {
  set_has_hero();
  hero_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.LuckGiftBagItem.hero)
}

// optional .RewardConfig.Component component = 4;
inline bool LuckGiftBagItem::has_component() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LuckGiftBagItem::set_has_component() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LuckGiftBagItem::clear_has_component() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LuckGiftBagItem::clear_component() {
  if (component_ != NULL) component_->::RewardConfig::Component::Clear();
  clear_has_component();
}
inline const ::RewardConfig::Component& LuckGiftBagItem::component() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.LuckGiftBagItem.component)
  return component_ != NULL ? *component_ : *default_instance_->component_;
}
inline ::RewardConfig::Component* LuckGiftBagItem::mutable_component() {
  set_has_component();
  if (component_ == NULL) component_ = new ::RewardConfig::Component;
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.LuckGiftBagItem.component)
  return component_;
}
inline ::RewardConfig::Component* LuckGiftBagItem::release_component() {
  clear_has_component();
  ::RewardConfig::Component* temp = component_;
  component_ = NULL;
  return temp;
}
inline void LuckGiftBagItem::set_allocated_component(::RewardConfig::Component* component) {
  delete component_;
  component_ = component;
  if (component) {
    set_has_component();
  } else {
    clear_has_component();
  }
  // @@protoc_insertion_point(field_set_allocated:EquipmentConfig.LuckGiftBagItem.component)
}

// required uint32 prob = 5;
inline bool LuckGiftBagItem::has_prob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LuckGiftBagItem::set_has_prob() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LuckGiftBagItem::clear_has_prob() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LuckGiftBagItem::clear_prob() {
  prob_ = 0u;
  clear_has_prob();
}
inline ::google::protobuf::uint32 LuckGiftBagItem::prob() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.LuckGiftBagItem.prob)
  return prob_;
}
inline void LuckGiftBagItem::set_prob(::google::protobuf::uint32 value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.LuckGiftBagItem.prob)
}

// -------------------------------------------------------------------

// LuckGiftBag

// required uint32 eqid = 1;
inline bool LuckGiftBag::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuckGiftBag::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuckGiftBag::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuckGiftBag::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 LuckGiftBag::eqid() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.LuckGiftBag.eqid)
  return eqid_;
}
inline void LuckGiftBag::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.LuckGiftBag.eqid)
}

// required uint32 numbers = 2;
inline bool LuckGiftBag::has_numbers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuckGiftBag::set_has_numbers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuckGiftBag::clear_has_numbers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuckGiftBag::clear_numbers() {
  numbers_ = 0u;
  clear_has_numbers();
}
inline ::google::protobuf::uint32 LuckGiftBag::numbers() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.LuckGiftBag.numbers)
  return numbers_;
}
inline void LuckGiftBag::set_numbers(::google::protobuf::uint32 value) {
  set_has_numbers();
  numbers_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.LuckGiftBag.numbers)
}

// repeated .EquipmentConfig.LuckGiftBagItem gifts = 3;
inline int LuckGiftBag::gifts_size() const {
  return gifts_.size();
}
inline void LuckGiftBag::clear_gifts() {
  gifts_.Clear();
}
inline const ::EquipmentConfig::LuckGiftBagItem& LuckGiftBag::gifts(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.LuckGiftBag.gifts)
  return gifts_.Get(index);
}
inline ::EquipmentConfig::LuckGiftBagItem* LuckGiftBag::mutable_gifts(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.LuckGiftBag.gifts)
  return gifts_.Mutable(index);
}
inline ::EquipmentConfig::LuckGiftBagItem* LuckGiftBag::add_gifts() {
  // @@protoc_insertion_point(field_add:EquipmentConfig.LuckGiftBag.gifts)
  return gifts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBagItem >&
LuckGiftBag::gifts() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.LuckGiftBag.gifts)
  return gifts_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBagItem >*
LuckGiftBag::mutable_gifts() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.LuckGiftBag.gifts)
  return &gifts_;
}

// -------------------------------------------------------------------

// TimeLimitProp

// required uint32 eqid = 1;
inline bool TimeLimitProp::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeLimitProp::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeLimitProp::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeLimitProp::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 TimeLimitProp::eqid() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.TimeLimitProp.eqid)
  return eqid_;
}
inline void TimeLimitProp::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.TimeLimitProp.eqid)
}

// required uint32 attribute = 2;
inline bool TimeLimitProp::has_attribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeLimitProp::set_has_attribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeLimitProp::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeLimitProp::clear_attribute() {
  attribute_ = 0u;
  clear_has_attribute();
}
inline ::google::protobuf::uint32 TimeLimitProp::attribute() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.TimeLimitProp.attribute)
  return attribute_;
}
inline void TimeLimitProp::set_attribute(::google::protobuf::uint32 value) {
  set_has_attribute();
  attribute_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.TimeLimitProp.attribute)
}

// required uint32 valid_peroid = 3;
inline bool TimeLimitProp::has_valid_peroid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeLimitProp::set_has_valid_peroid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeLimitProp::clear_has_valid_peroid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeLimitProp::clear_valid_peroid() {
  valid_peroid_ = 0u;
  clear_has_valid_peroid();
}
inline ::google::protobuf::uint32 TimeLimitProp::valid_peroid() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.TimeLimitProp.valid_peroid)
  return valid_peroid_;
}
inline void TimeLimitProp::set_valid_peroid(::google::protobuf::uint32 value) {
  set_has_valid_peroid();
  valid_peroid_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.TimeLimitProp.valid_peroid)
}

// required uint32 value = 4;
inline bool TimeLimitProp::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimeLimitProp::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimeLimitProp::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimeLimitProp::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 TimeLimitProp::value() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.TimeLimitProp.value)
  return value_;
}
inline void TimeLimitProp::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.TimeLimitProp.value)
}

// -------------------------------------------------------------------

// EquipList

// repeated .EquipmentConfig.Equip equips = 1;
inline int EquipList::equips_size() const {
  return equips_.size();
}
inline void EquipList::clear_equips() {
  equips_.Clear();
}
inline const ::EquipmentConfig::Equip& EquipList::equips(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.EquipList.equips)
  return equips_.Get(index);
}
inline ::EquipmentConfig::Equip* EquipList::mutable_equips(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.EquipList.equips)
  return equips_.Mutable(index);
}
inline ::EquipmentConfig::Equip* EquipList::add_equips() {
  // @@protoc_insertion_point(field_add:EquipmentConfig.EquipList.equips)
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Equip >&
EquipList::equips() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.EquipList.equips)
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::Equip >*
EquipList::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.EquipList.equips)
  return &equips_;
}

// required uint32 chmax = 2;
inline bool EquipList::has_chmax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipList::set_has_chmax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipList::clear_has_chmax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipList::clear_chmax() {
  chmax_ = 0u;
  clear_has_chmax();
}
inline ::google::protobuf::uint32 EquipList::chmax() const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.EquipList.chmax)
  return chmax_;
}
inline void EquipList::set_chmax(::google::protobuf::uint32 value) {
  set_has_chmax();
  chmax_ = value;
  // @@protoc_insertion_point(field_set:EquipmentConfig.EquipList.chmax)
}

// repeated .EquipmentConfig.SPProperty spProp = 3;
inline int EquipList::spprop_size() const {
  return spprop_.size();
}
inline void EquipList::clear_spprop() {
  spprop_.Clear();
}
inline const ::EquipmentConfig::SPProperty& EquipList::spprop(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.EquipList.spProp)
  return spprop_.Get(index);
}
inline ::EquipmentConfig::SPProperty* EquipList::mutable_spprop(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.EquipList.spProp)
  return spprop_.Mutable(index);
}
inline ::EquipmentConfig::SPProperty* EquipList::add_spprop() {
  // @@protoc_insertion_point(field_add:EquipmentConfig.EquipList.spProp)
  return spprop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::SPProperty >&
EquipList::spprop() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.EquipList.spProp)
  return spprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::SPProperty >*
EquipList::mutable_spprop() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.EquipList.spProp)
  return &spprop_;
}

// repeated .EquipmentConfig.EquipExp equipexp = 4;
inline int EquipList::equipexp_size() const {
  return equipexp_.size();
}
inline void EquipList::clear_equipexp() {
  equipexp_.Clear();
}
inline const ::EquipmentConfig::EquipExp& EquipList::equipexp(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.EquipList.equipexp)
  return equipexp_.Get(index);
}
inline ::EquipmentConfig::EquipExp* EquipList::mutable_equipexp(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.EquipList.equipexp)
  return equipexp_.Mutable(index);
}
inline ::EquipmentConfig::EquipExp* EquipList::add_equipexp() {
  // @@protoc_insertion_point(field_add:EquipmentConfig.EquipList.equipexp)
  return equipexp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::EquipExp >&
EquipList::equipexp() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.EquipList.equipexp)
  return equipexp_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::EquipExp >*
EquipList::mutable_equipexp() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.EquipList.equipexp)
  return &equipexp_;
}

// repeated .EquipmentConfig.NormalGiftBag normal_giftbag = 5;
inline int EquipList::normal_giftbag_size() const {
  return normal_giftbag_.size();
}
inline void EquipList::clear_normal_giftbag() {
  normal_giftbag_.Clear();
}
inline const ::EquipmentConfig::NormalGiftBag& EquipList::normal_giftbag(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.EquipList.normal_giftbag)
  return normal_giftbag_.Get(index);
}
inline ::EquipmentConfig::NormalGiftBag* EquipList::mutable_normal_giftbag(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.EquipList.normal_giftbag)
  return normal_giftbag_.Mutable(index);
}
inline ::EquipmentConfig::NormalGiftBag* EquipList::add_normal_giftbag() {
  // @@protoc_insertion_point(field_add:EquipmentConfig.EquipList.normal_giftbag)
  return normal_giftbag_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::NormalGiftBag >&
EquipList::normal_giftbag() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.EquipList.normal_giftbag)
  return normal_giftbag_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::NormalGiftBag >*
EquipList::mutable_normal_giftbag() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.EquipList.normal_giftbag)
  return &normal_giftbag_;
}

// repeated .EquipmentConfig.LuckGiftBag luck_giftbag = 6;
inline int EquipList::luck_giftbag_size() const {
  return luck_giftbag_.size();
}
inline void EquipList::clear_luck_giftbag() {
  luck_giftbag_.Clear();
}
inline const ::EquipmentConfig::LuckGiftBag& EquipList::luck_giftbag(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.EquipList.luck_giftbag)
  return luck_giftbag_.Get(index);
}
inline ::EquipmentConfig::LuckGiftBag* EquipList::mutable_luck_giftbag(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.EquipList.luck_giftbag)
  return luck_giftbag_.Mutable(index);
}
inline ::EquipmentConfig::LuckGiftBag* EquipList::add_luck_giftbag() {
  // @@protoc_insertion_point(field_add:EquipmentConfig.EquipList.luck_giftbag)
  return luck_giftbag_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBag >&
EquipList::luck_giftbag() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.EquipList.luck_giftbag)
  return luck_giftbag_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::LuckGiftBag >*
EquipList::mutable_luck_giftbag() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.EquipList.luck_giftbag)
  return &luck_giftbag_;
}

// repeated .EquipmentConfig.TimeLimitProp time_limit_prop = 7;
inline int EquipList::time_limit_prop_size() const {
  return time_limit_prop_.size();
}
inline void EquipList::clear_time_limit_prop() {
  time_limit_prop_.Clear();
}
inline const ::EquipmentConfig::TimeLimitProp& EquipList::time_limit_prop(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentConfig.EquipList.time_limit_prop)
  return time_limit_prop_.Get(index);
}
inline ::EquipmentConfig::TimeLimitProp* EquipList::mutable_time_limit_prop(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentConfig.EquipList.time_limit_prop)
  return time_limit_prop_.Mutable(index);
}
inline ::EquipmentConfig::TimeLimitProp* EquipList::add_time_limit_prop() {
  // @@protoc_insertion_point(field_add:EquipmentConfig.EquipList.time_limit_prop)
  return time_limit_prop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::TimeLimitProp >&
EquipList::time_limit_prop() const {
  // @@protoc_insertion_point(field_list:EquipmentConfig.EquipList.time_limit_prop)
  return time_limit_prop_;
}
inline ::google::protobuf::RepeatedPtrField< ::EquipmentConfig::TimeLimitProp >*
EquipList::mutable_time_limit_prop() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentConfig.EquipList.time_limit_prop)
  return &time_limit_prop_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EquipmentConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OlEquipment_2eproto__INCLUDED
