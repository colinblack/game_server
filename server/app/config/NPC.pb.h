// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NPC.proto

#ifndef PROTOBUF_NPC_2eproto__INCLUDED
#define PROTOBUF_NPC_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NPC {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NPC_2eproto();
void protobuf_AssignDesc_NPC_2eproto();
void protobuf_ShutdownFile_NPC_2eproto();

class NPCInfoItem;
class NPCInfo;
class NPCList;

// ===================================================================

class NPCInfoItem : public ::google::protobuf::Message {
 public:
  NPCInfoItem();
  virtual ~NPCInfoItem();

  NPCInfoItem(const NPCInfoItem& from);

  inline NPCInfoItem& operator=(const NPCInfoItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCInfoItem& default_instance();

  void Swap(NPCInfoItem* other);

  // implements Message ----------------------------------------------

  NPCInfoItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCInfoItem& from);
  void MergeFrom(const NPCInfoItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NPC.NPCInfoItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_NPC_2eproto();
  friend void protobuf_AssignDesc_NPC_2eproto();
  friend void protobuf_ShutdownFile_NPC_2eproto();

  void InitAsDefaultInstance();
  static NPCInfoItem* default_instance_;
};
// -------------------------------------------------------------------

class NPCInfo : public ::google::protobuf::Message {
 public:
  NPCInfo();
  virtual ~NPCInfo();

  NPCInfo(const NPCInfo& from);

  inline NPCInfo& operator=(const NPCInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCInfo& default_instance();

  void Swap(NPCInfo* other);

  // implements Message ----------------------------------------------

  NPCInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCInfo& from);
  void MergeFrom(const NPCInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 npcid = 1;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 1;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // required uint32 character = 2;
  inline bool has_character() const;
  inline void clear_character();
  static const int kCharacterFieldNumber = 2;
  inline ::google::protobuf::uint32 character() const;
  inline void set_character(::google::protobuf::uint32 value);

  // required uint32 skillid = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 3;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // required float skillco = 4;
  inline bool has_skillco() const;
  inline void clear_skillco();
  static const int kSkillcoFieldNumber = 4;
  inline float skillco() const;
  inline void set_skillco(float value);

  // required uint32 skillrange = 5;
  inline bool has_skillrange() const;
  inline void clear_skillrange();
  static const int kSkillrangeFieldNumber = 5;
  inline ::google::protobuf::uint32 skillrange() const;
  inline void set_skillrange(::google::protobuf::uint32 value);

  // required uint32 skilltime = 6;
  inline bool has_skilltime() const;
  inline void clear_skilltime();
  static const int kSkilltimeFieldNumber = 6;
  inline ::google::protobuf::uint32 skilltime() const;
  inline void set_skilltime(::google::protobuf::uint32 value);

  // repeated uint32 tacticalarea1 = 7;
  inline int tacticalarea1_size() const;
  inline void clear_tacticalarea1();
  static const int kTacticalarea1FieldNumber = 7;
  inline ::google::protobuf::uint32 tacticalarea1(int index) const;
  inline void set_tacticalarea1(int index, ::google::protobuf::uint32 value);
  inline void add_tacticalarea1(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tacticalarea1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tacticalarea1();

  // repeated uint32 tacticalarea2 = 8;
  inline int tacticalarea2_size() const;
  inline void clear_tacticalarea2();
  static const int kTacticalarea2FieldNumber = 8;
  inline ::google::protobuf::uint32 tacticalarea2(int index) const;
  inline void set_tacticalarea2(int index, ::google::protobuf::uint32 value);
  inline void add_tacticalarea2(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tacticalarea2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tacticalarea2();

  // repeated uint32 tacticalarea3 = 9;
  inline int tacticalarea3_size() const;
  inline void clear_tacticalarea3();
  static const int kTacticalarea3FieldNumber = 9;
  inline ::google::protobuf::uint32 tacticalarea3(int index) const;
  inline void set_tacticalarea3(int index, ::google::protobuf::uint32 value);
  inline void add_tacticalarea3(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tacticalarea3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tacticalarea3();

  // repeated uint32 tacticalarea4 = 10;
  inline int tacticalarea4_size() const;
  inline void clear_tacticalarea4();
  static const int kTacticalarea4FieldNumber = 10;
  inline ::google::protobuf::uint32 tacticalarea4(int index) const;
  inline void set_tacticalarea4(int index, ::google::protobuf::uint32 value);
  inline void add_tacticalarea4(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tacticalarea4() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tacticalarea4();

  // required uint32 tacticaladd = 11;
  inline bool has_tacticaladd() const;
  inline void clear_tacticaladd();
  static const int kTacticaladdFieldNumber = 11;
  inline ::google::protobuf::uint32 tacticaladd() const;
  inline void set_tacticaladd(::google::protobuf::uint32 value);

  // repeated uint32 giftarea = 12;
  inline int giftarea_size() const;
  inline void clear_giftarea();
  static const int kGiftareaFieldNumber = 12;
  inline ::google::protobuf::uint32 giftarea(int index) const;
  inline void set_giftarea(int index, ::google::protobuf::uint32 value);
  inline void add_giftarea(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      giftarea() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_giftarea();

  // required float giftadd = 13;
  inline bool has_giftadd() const;
  inline void clear_giftadd();
  static const int kGiftaddFieldNumber = 13;
  inline float giftadd() const;
  inline void set_giftadd(float value);

  // required uint32 p_hp = 14;
  inline bool has_p_hp() const;
  inline void clear_p_hp();
  static const int kPHpFieldNumber = 14;
  inline ::google::protobuf::uint32 p_hp() const;
  inline void set_p_hp(::google::protobuf::uint32 value);

  // required uint32 p_attack = 15;
  inline bool has_p_attack() const;
  inline void clear_p_attack();
  static const int kPAttackFieldNumber = 15;
  inline ::google::protobuf::uint32 p_attack() const;
  inline void set_p_attack(::google::protobuf::uint32 value);

  // required uint32 p_defend = 16;
  inline bool has_p_defend() const;
  inline void clear_p_defend();
  static const int kPDefendFieldNumber = 16;
  inline ::google::protobuf::uint32 p_defend() const;
  inline void set_p_defend(::google::protobuf::uint32 value);

  // required uint32 p_skill_extra = 17;
  inline bool has_p_skill_extra() const;
  inline void clear_p_skill_extra();
  static const int kPSkillExtraFieldNumber = 17;
  inline ::google::protobuf::uint32 p_skill_extra() const;
  inline void set_p_skill_extra(::google::protobuf::uint32 value);

  // required uint32 p_skill_anti = 18;
  inline bool has_p_skill_anti() const;
  inline void clear_p_skill_anti();
  static const int kPSkillAntiFieldNumber = 18;
  inline ::google::protobuf::uint32 p_skill_anti() const;
  inline void set_p_skill_anti(::google::protobuf::uint32 value);

  // required uint32 p_attack_extra = 19;
  inline bool has_p_attack_extra() const;
  inline void clear_p_attack_extra();
  static const int kPAttackExtraFieldNumber = 19;
  inline ::google::protobuf::uint32 p_attack_extra() const;
  inline void set_p_attack_extra(::google::protobuf::uint32 value);

  // required uint32 p_attack_anti = 20;
  inline bool has_p_attack_anti() const;
  inline void clear_p_attack_anti();
  static const int kPAttackAntiFieldNumber = 20;
  inline ::google::protobuf::uint32 p_attack_anti() const;
  inline void set_p_attack_anti(::google::protobuf::uint32 value);

  // required uint32 p_int = 21;
  inline bool has_p_int() const;
  inline void clear_p_int();
  static const int kPIntFieldNumber = 21;
  inline ::google::protobuf::uint32 p_int() const;
  inline void set_p_int(::google::protobuf::uint32 value);

  // required uint32 p_str = 22;
  inline bool has_p_str() const;
  inline void clear_p_str();
  static const int kPStrFieldNumber = 22;
  inline ::google::protobuf::uint32 p_str() const;
  inline void set_p_str(::google::protobuf::uint32 value);

  // required uint32 p_level = 23;
  inline bool has_p_level() const;
  inline void clear_p_level();
  static const int kPLevelFieldNumber = 23;
  inline ::google::protobuf::uint32 p_level() const;
  inline void set_p_level(::google::protobuf::uint32 value);

  // required uint32 p_soldier = 24;
  inline bool has_p_soldier() const;
  inline void clear_p_soldier();
  static const int kPSoldierFieldNumber = 24;
  inline ::google::protobuf::uint32 p_soldier() const;
  inline void set_p_soldier(::google::protobuf::uint32 value);

  // required uint32 p_tech = 25;
  inline bool has_p_tech() const;
  inline void clear_p_tech();
  static const int kPTechFieldNumber = 25;
  inline ::google::protobuf::uint32 p_tech() const;
  inline void set_p_tech(::google::protobuf::uint32 value);

  // required uint32 p_anti_tech = 26;
  inline bool has_p_anti_tech() const;
  inline void clear_p_anti_tech();
  static const int kPAntiTechFieldNumber = 26;
  inline ::google::protobuf::uint32 p_anti_tech() const;
  inline void set_p_anti_tech(::google::protobuf::uint32 value);

  // required uint32 r_exp = 27;
  inline bool has_r_exp() const;
  inline void clear_r_exp();
  static const int kRExpFieldNumber = 27;
  inline ::google::protobuf::uint32 r_exp() const;
  inline void set_r_exp(::google::protobuf::uint32 value);

  // required uint32 r_coin = 28;
  inline bool has_r_coin() const;
  inline void clear_r_coin();
  static const int kRCoinFieldNumber = 28;
  inline ::google::protobuf::uint32 r_coin() const;
  inline void set_r_coin(::google::protobuf::uint32 value);

  // required uint32 r_food = 29;
  inline bool has_r_food() const;
  inline void clear_r_food();
  static const int kRFoodFieldNumber = 29;
  inline ::google::protobuf::uint32 r_food() const;
  inline void set_r_food(::google::protobuf::uint32 value);

  // required uint32 r_wood = 30;
  inline bool has_r_wood() const;
  inline void clear_r_wood();
  static const int kRWoodFieldNumber = 30;
  inline ::google::protobuf::uint32 r_wood() const;
  inline void set_r_wood(::google::protobuf::uint32 value);

  // required uint32 r_iron = 31;
  inline bool has_r_iron() const;
  inline void clear_r_iron();
  static const int kRIronFieldNumber = 31;
  inline ::google::protobuf::uint32 r_iron() const;
  inline void set_r_iron(::google::protobuf::uint32 value);

  // repeated .NPC.NPCInfoItem r_item = 32;
  inline int r_item_size() const;
  inline void clear_r_item();
  static const int kRItemFieldNumber = 32;
  inline const ::NPC::NPCInfoItem& r_item(int index) const;
  inline ::NPC::NPCInfoItem* mutable_r_item(int index);
  inline ::NPC::NPCInfoItem* add_r_item();
  inline const ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfoItem >&
      r_item() const;
  inline ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfoItem >*
      mutable_r_item();

  // @@protoc_insertion_point(class_scope:NPC.NPCInfo)
 private:
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_character();
  inline void clear_has_character();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skillco();
  inline void clear_has_skillco();
  inline void set_has_skillrange();
  inline void clear_has_skillrange();
  inline void set_has_skilltime();
  inline void clear_has_skilltime();
  inline void set_has_tacticaladd();
  inline void clear_has_tacticaladd();
  inline void set_has_giftadd();
  inline void clear_has_giftadd();
  inline void set_has_p_hp();
  inline void clear_has_p_hp();
  inline void set_has_p_attack();
  inline void clear_has_p_attack();
  inline void set_has_p_defend();
  inline void clear_has_p_defend();
  inline void set_has_p_skill_extra();
  inline void clear_has_p_skill_extra();
  inline void set_has_p_skill_anti();
  inline void clear_has_p_skill_anti();
  inline void set_has_p_attack_extra();
  inline void clear_has_p_attack_extra();
  inline void set_has_p_attack_anti();
  inline void clear_has_p_attack_anti();
  inline void set_has_p_int();
  inline void clear_has_p_int();
  inline void set_has_p_str();
  inline void clear_has_p_str();
  inline void set_has_p_level();
  inline void clear_has_p_level();
  inline void set_has_p_soldier();
  inline void clear_has_p_soldier();
  inline void set_has_p_tech();
  inline void clear_has_p_tech();
  inline void set_has_p_anti_tech();
  inline void clear_has_p_anti_tech();
  inline void set_has_r_exp();
  inline void clear_has_r_exp();
  inline void set_has_r_coin();
  inline void clear_has_r_coin();
  inline void set_has_r_food();
  inline void clear_has_r_food();
  inline void set_has_r_wood();
  inline void clear_has_r_wood();
  inline void set_has_r_iron();
  inline void clear_has_r_iron();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 character_;
  ::google::protobuf::uint32 skillid_;
  float skillco_;
  ::google::protobuf::uint32 skillrange_;
  ::google::protobuf::uint32 skilltime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tacticalarea1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tacticalarea2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tacticalarea3_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tacticalarea4_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > giftarea_;
  ::google::protobuf::uint32 tacticaladd_;
  float giftadd_;
  ::google::protobuf::uint32 p_hp_;
  ::google::protobuf::uint32 p_attack_;
  ::google::protobuf::uint32 p_defend_;
  ::google::protobuf::uint32 p_skill_extra_;
  ::google::protobuf::uint32 p_skill_anti_;
  ::google::protobuf::uint32 p_attack_extra_;
  ::google::protobuf::uint32 p_attack_anti_;
  ::google::protobuf::uint32 p_int_;
  ::google::protobuf::uint32 p_str_;
  ::google::protobuf::uint32 p_level_;
  ::google::protobuf::uint32 p_soldier_;
  ::google::protobuf::uint32 p_tech_;
  ::google::protobuf::uint32 p_anti_tech_;
  ::google::protobuf::uint32 r_exp_;
  ::google::protobuf::uint32 r_coin_;
  ::google::protobuf::uint32 r_food_;
  ::google::protobuf::uint32 r_wood_;
  ::google::protobuf::uint32 r_iron_;
  ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfoItem > r_item_;
  friend void  protobuf_AddDesc_NPC_2eproto();
  friend void protobuf_AssignDesc_NPC_2eproto();
  friend void protobuf_ShutdownFile_NPC_2eproto();

  void InitAsDefaultInstance();
  static NPCInfo* default_instance_;
};
// -------------------------------------------------------------------

class NPCList : public ::google::protobuf::Message {
 public:
  NPCList();
  virtual ~NPCList();

  NPCList(const NPCList& from);

  inline NPCList& operator=(const NPCList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NPCList& default_instance();

  void Swap(NPCList* other);

  // implements Message ----------------------------------------------

  NPCList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NPCList& from);
  void MergeFrom(const NPCList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NPC.NPCInfo npc = 1;
  inline int npc_size() const;
  inline void clear_npc();
  static const int kNpcFieldNumber = 1;
  inline const ::NPC::NPCInfo& npc(int index) const;
  inline ::NPC::NPCInfo* mutable_npc(int index);
  inline ::NPC::NPCInfo* add_npc();
  inline const ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfo >&
      npc() const;
  inline ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfo >*
      mutable_npc();

  // @@protoc_insertion_point(class_scope:NPC.NPCList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfo > npc_;
  friend void  protobuf_AddDesc_NPC_2eproto();
  friend void protobuf_AssignDesc_NPC_2eproto();
  friend void protobuf_ShutdownFile_NPC_2eproto();

  void InitAsDefaultInstance();
  static NPCList* default_instance_;
};
// ===================================================================


// ===================================================================

// NPCInfoItem

// required uint32 id = 1;
inline bool NPCInfoItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NPCInfoItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NPCInfoItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NPCInfoItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 NPCInfoItem::id() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfoItem.id)
  return id_;
}
inline void NPCInfoItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfoItem.id)
}

// required uint32 count = 2;
inline bool NPCInfoItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NPCInfoItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NPCInfoItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NPCInfoItem::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 NPCInfoItem::count() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfoItem.count)
  return count_;
}
inline void NPCInfoItem::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfoItem.count)
}

// -------------------------------------------------------------------

// NPCInfo

// required uint32 npcid = 1;
inline bool NPCInfo::has_npcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NPCInfo::set_has_npcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NPCInfo::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NPCInfo::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 NPCInfo::npcid() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.npcid)
  return npcid_;
}
inline void NPCInfo::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.npcid)
}

// required uint32 character = 2;
inline bool NPCInfo::has_character() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NPCInfo::set_has_character() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NPCInfo::clear_has_character() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NPCInfo::clear_character() {
  character_ = 0u;
  clear_has_character();
}
inline ::google::protobuf::uint32 NPCInfo::character() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.character)
  return character_;
}
inline void NPCInfo::set_character(::google::protobuf::uint32 value) {
  set_has_character();
  character_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.character)
}

// required uint32 skillid = 3;
inline bool NPCInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NPCInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NPCInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NPCInfo::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 NPCInfo::skillid() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.skillid)
  return skillid_;
}
inline void NPCInfo::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.skillid)
}

// required float skillco = 4;
inline bool NPCInfo::has_skillco() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NPCInfo::set_has_skillco() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NPCInfo::clear_has_skillco() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NPCInfo::clear_skillco() {
  skillco_ = 0;
  clear_has_skillco();
}
inline float NPCInfo::skillco() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.skillco)
  return skillco_;
}
inline void NPCInfo::set_skillco(float value) {
  set_has_skillco();
  skillco_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.skillco)
}

// required uint32 skillrange = 5;
inline bool NPCInfo::has_skillrange() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NPCInfo::set_has_skillrange() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NPCInfo::clear_has_skillrange() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NPCInfo::clear_skillrange() {
  skillrange_ = 0u;
  clear_has_skillrange();
}
inline ::google::protobuf::uint32 NPCInfo::skillrange() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.skillrange)
  return skillrange_;
}
inline void NPCInfo::set_skillrange(::google::protobuf::uint32 value) {
  set_has_skillrange();
  skillrange_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.skillrange)
}

// required uint32 skilltime = 6;
inline bool NPCInfo::has_skilltime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NPCInfo::set_has_skilltime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NPCInfo::clear_has_skilltime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NPCInfo::clear_skilltime() {
  skilltime_ = 0u;
  clear_has_skilltime();
}
inline ::google::protobuf::uint32 NPCInfo::skilltime() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.skilltime)
  return skilltime_;
}
inline void NPCInfo::set_skilltime(::google::protobuf::uint32 value) {
  set_has_skilltime();
  skilltime_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.skilltime)
}

// repeated uint32 tacticalarea1 = 7;
inline int NPCInfo::tacticalarea1_size() const {
  return tacticalarea1_.size();
}
inline void NPCInfo::clear_tacticalarea1() {
  tacticalarea1_.Clear();
}
inline ::google::protobuf::uint32 NPCInfo::tacticalarea1(int index) const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.tacticalarea1)
  return tacticalarea1_.Get(index);
}
inline void NPCInfo::set_tacticalarea1(int index, ::google::protobuf::uint32 value) {
  tacticalarea1_.Set(index, value);
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.tacticalarea1)
}
inline void NPCInfo::add_tacticalarea1(::google::protobuf::uint32 value) {
  tacticalarea1_.Add(value);
  // @@protoc_insertion_point(field_add:NPC.NPCInfo.tacticalarea1)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NPCInfo::tacticalarea1() const {
  // @@protoc_insertion_point(field_list:NPC.NPCInfo.tacticalarea1)
  return tacticalarea1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NPCInfo::mutable_tacticalarea1() {
  // @@protoc_insertion_point(field_mutable_list:NPC.NPCInfo.tacticalarea1)
  return &tacticalarea1_;
}

// repeated uint32 tacticalarea2 = 8;
inline int NPCInfo::tacticalarea2_size() const {
  return tacticalarea2_.size();
}
inline void NPCInfo::clear_tacticalarea2() {
  tacticalarea2_.Clear();
}
inline ::google::protobuf::uint32 NPCInfo::tacticalarea2(int index) const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.tacticalarea2)
  return tacticalarea2_.Get(index);
}
inline void NPCInfo::set_tacticalarea2(int index, ::google::protobuf::uint32 value) {
  tacticalarea2_.Set(index, value);
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.tacticalarea2)
}
inline void NPCInfo::add_tacticalarea2(::google::protobuf::uint32 value) {
  tacticalarea2_.Add(value);
  // @@protoc_insertion_point(field_add:NPC.NPCInfo.tacticalarea2)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NPCInfo::tacticalarea2() const {
  // @@protoc_insertion_point(field_list:NPC.NPCInfo.tacticalarea2)
  return tacticalarea2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NPCInfo::mutable_tacticalarea2() {
  // @@protoc_insertion_point(field_mutable_list:NPC.NPCInfo.tacticalarea2)
  return &tacticalarea2_;
}

// repeated uint32 tacticalarea3 = 9;
inline int NPCInfo::tacticalarea3_size() const {
  return tacticalarea3_.size();
}
inline void NPCInfo::clear_tacticalarea3() {
  tacticalarea3_.Clear();
}
inline ::google::protobuf::uint32 NPCInfo::tacticalarea3(int index) const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.tacticalarea3)
  return tacticalarea3_.Get(index);
}
inline void NPCInfo::set_tacticalarea3(int index, ::google::protobuf::uint32 value) {
  tacticalarea3_.Set(index, value);
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.tacticalarea3)
}
inline void NPCInfo::add_tacticalarea3(::google::protobuf::uint32 value) {
  tacticalarea3_.Add(value);
  // @@protoc_insertion_point(field_add:NPC.NPCInfo.tacticalarea3)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NPCInfo::tacticalarea3() const {
  // @@protoc_insertion_point(field_list:NPC.NPCInfo.tacticalarea3)
  return tacticalarea3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NPCInfo::mutable_tacticalarea3() {
  // @@protoc_insertion_point(field_mutable_list:NPC.NPCInfo.tacticalarea3)
  return &tacticalarea3_;
}

// repeated uint32 tacticalarea4 = 10;
inline int NPCInfo::tacticalarea4_size() const {
  return tacticalarea4_.size();
}
inline void NPCInfo::clear_tacticalarea4() {
  tacticalarea4_.Clear();
}
inline ::google::protobuf::uint32 NPCInfo::tacticalarea4(int index) const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.tacticalarea4)
  return tacticalarea4_.Get(index);
}
inline void NPCInfo::set_tacticalarea4(int index, ::google::protobuf::uint32 value) {
  tacticalarea4_.Set(index, value);
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.tacticalarea4)
}
inline void NPCInfo::add_tacticalarea4(::google::protobuf::uint32 value) {
  tacticalarea4_.Add(value);
  // @@protoc_insertion_point(field_add:NPC.NPCInfo.tacticalarea4)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NPCInfo::tacticalarea4() const {
  // @@protoc_insertion_point(field_list:NPC.NPCInfo.tacticalarea4)
  return tacticalarea4_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NPCInfo::mutable_tacticalarea4() {
  // @@protoc_insertion_point(field_mutable_list:NPC.NPCInfo.tacticalarea4)
  return &tacticalarea4_;
}

// required uint32 tacticaladd = 11;
inline bool NPCInfo::has_tacticaladd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NPCInfo::set_has_tacticaladd() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NPCInfo::clear_has_tacticaladd() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NPCInfo::clear_tacticaladd() {
  tacticaladd_ = 0u;
  clear_has_tacticaladd();
}
inline ::google::protobuf::uint32 NPCInfo::tacticaladd() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.tacticaladd)
  return tacticaladd_;
}
inline void NPCInfo::set_tacticaladd(::google::protobuf::uint32 value) {
  set_has_tacticaladd();
  tacticaladd_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.tacticaladd)
}

// repeated uint32 giftarea = 12;
inline int NPCInfo::giftarea_size() const {
  return giftarea_.size();
}
inline void NPCInfo::clear_giftarea() {
  giftarea_.Clear();
}
inline ::google::protobuf::uint32 NPCInfo::giftarea(int index) const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.giftarea)
  return giftarea_.Get(index);
}
inline void NPCInfo::set_giftarea(int index, ::google::protobuf::uint32 value) {
  giftarea_.Set(index, value);
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.giftarea)
}
inline void NPCInfo::add_giftarea(::google::protobuf::uint32 value) {
  giftarea_.Add(value);
  // @@protoc_insertion_point(field_add:NPC.NPCInfo.giftarea)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NPCInfo::giftarea() const {
  // @@protoc_insertion_point(field_list:NPC.NPCInfo.giftarea)
  return giftarea_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NPCInfo::mutable_giftarea() {
  // @@protoc_insertion_point(field_mutable_list:NPC.NPCInfo.giftarea)
  return &giftarea_;
}

// required float giftadd = 13;
inline bool NPCInfo::has_giftadd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NPCInfo::set_has_giftadd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NPCInfo::clear_has_giftadd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NPCInfo::clear_giftadd() {
  giftadd_ = 0;
  clear_has_giftadd();
}
inline float NPCInfo::giftadd() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.giftadd)
  return giftadd_;
}
inline void NPCInfo::set_giftadd(float value) {
  set_has_giftadd();
  giftadd_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.giftadd)
}

// required uint32 p_hp = 14;
inline bool NPCInfo::has_p_hp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NPCInfo::set_has_p_hp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NPCInfo::clear_has_p_hp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NPCInfo::clear_p_hp() {
  p_hp_ = 0u;
  clear_has_p_hp();
}
inline ::google::protobuf::uint32 NPCInfo::p_hp() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_hp)
  return p_hp_;
}
inline void NPCInfo::set_p_hp(::google::protobuf::uint32 value) {
  set_has_p_hp();
  p_hp_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_hp)
}

// required uint32 p_attack = 15;
inline bool NPCInfo::has_p_attack() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NPCInfo::set_has_p_attack() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NPCInfo::clear_has_p_attack() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NPCInfo::clear_p_attack() {
  p_attack_ = 0u;
  clear_has_p_attack();
}
inline ::google::protobuf::uint32 NPCInfo::p_attack() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_attack)
  return p_attack_;
}
inline void NPCInfo::set_p_attack(::google::protobuf::uint32 value) {
  set_has_p_attack();
  p_attack_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_attack)
}

// required uint32 p_defend = 16;
inline bool NPCInfo::has_p_defend() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NPCInfo::set_has_p_defend() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NPCInfo::clear_has_p_defend() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NPCInfo::clear_p_defend() {
  p_defend_ = 0u;
  clear_has_p_defend();
}
inline ::google::protobuf::uint32 NPCInfo::p_defend() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_defend)
  return p_defend_;
}
inline void NPCInfo::set_p_defend(::google::protobuf::uint32 value) {
  set_has_p_defend();
  p_defend_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_defend)
}

// required uint32 p_skill_extra = 17;
inline bool NPCInfo::has_p_skill_extra() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NPCInfo::set_has_p_skill_extra() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NPCInfo::clear_has_p_skill_extra() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NPCInfo::clear_p_skill_extra() {
  p_skill_extra_ = 0u;
  clear_has_p_skill_extra();
}
inline ::google::protobuf::uint32 NPCInfo::p_skill_extra() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_skill_extra)
  return p_skill_extra_;
}
inline void NPCInfo::set_p_skill_extra(::google::protobuf::uint32 value) {
  set_has_p_skill_extra();
  p_skill_extra_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_skill_extra)
}

// required uint32 p_skill_anti = 18;
inline bool NPCInfo::has_p_skill_anti() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NPCInfo::set_has_p_skill_anti() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NPCInfo::clear_has_p_skill_anti() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NPCInfo::clear_p_skill_anti() {
  p_skill_anti_ = 0u;
  clear_has_p_skill_anti();
}
inline ::google::protobuf::uint32 NPCInfo::p_skill_anti() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_skill_anti)
  return p_skill_anti_;
}
inline void NPCInfo::set_p_skill_anti(::google::protobuf::uint32 value) {
  set_has_p_skill_anti();
  p_skill_anti_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_skill_anti)
}

// required uint32 p_attack_extra = 19;
inline bool NPCInfo::has_p_attack_extra() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void NPCInfo::set_has_p_attack_extra() {
  _has_bits_[0] |= 0x00040000u;
}
inline void NPCInfo::clear_has_p_attack_extra() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void NPCInfo::clear_p_attack_extra() {
  p_attack_extra_ = 0u;
  clear_has_p_attack_extra();
}
inline ::google::protobuf::uint32 NPCInfo::p_attack_extra() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_attack_extra)
  return p_attack_extra_;
}
inline void NPCInfo::set_p_attack_extra(::google::protobuf::uint32 value) {
  set_has_p_attack_extra();
  p_attack_extra_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_attack_extra)
}

// required uint32 p_attack_anti = 20;
inline bool NPCInfo::has_p_attack_anti() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void NPCInfo::set_has_p_attack_anti() {
  _has_bits_[0] |= 0x00080000u;
}
inline void NPCInfo::clear_has_p_attack_anti() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void NPCInfo::clear_p_attack_anti() {
  p_attack_anti_ = 0u;
  clear_has_p_attack_anti();
}
inline ::google::protobuf::uint32 NPCInfo::p_attack_anti() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_attack_anti)
  return p_attack_anti_;
}
inline void NPCInfo::set_p_attack_anti(::google::protobuf::uint32 value) {
  set_has_p_attack_anti();
  p_attack_anti_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_attack_anti)
}

// required uint32 p_int = 21;
inline bool NPCInfo::has_p_int() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void NPCInfo::set_has_p_int() {
  _has_bits_[0] |= 0x00100000u;
}
inline void NPCInfo::clear_has_p_int() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void NPCInfo::clear_p_int() {
  p_int_ = 0u;
  clear_has_p_int();
}
inline ::google::protobuf::uint32 NPCInfo::p_int() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_int)
  return p_int_;
}
inline void NPCInfo::set_p_int(::google::protobuf::uint32 value) {
  set_has_p_int();
  p_int_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_int)
}

// required uint32 p_str = 22;
inline bool NPCInfo::has_p_str() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void NPCInfo::set_has_p_str() {
  _has_bits_[0] |= 0x00200000u;
}
inline void NPCInfo::clear_has_p_str() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void NPCInfo::clear_p_str() {
  p_str_ = 0u;
  clear_has_p_str();
}
inline ::google::protobuf::uint32 NPCInfo::p_str() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_str)
  return p_str_;
}
inline void NPCInfo::set_p_str(::google::protobuf::uint32 value) {
  set_has_p_str();
  p_str_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_str)
}

// required uint32 p_level = 23;
inline bool NPCInfo::has_p_level() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void NPCInfo::set_has_p_level() {
  _has_bits_[0] |= 0x00400000u;
}
inline void NPCInfo::clear_has_p_level() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void NPCInfo::clear_p_level() {
  p_level_ = 0u;
  clear_has_p_level();
}
inline ::google::protobuf::uint32 NPCInfo::p_level() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_level)
  return p_level_;
}
inline void NPCInfo::set_p_level(::google::protobuf::uint32 value) {
  set_has_p_level();
  p_level_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_level)
}

// required uint32 p_soldier = 24;
inline bool NPCInfo::has_p_soldier() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void NPCInfo::set_has_p_soldier() {
  _has_bits_[0] |= 0x00800000u;
}
inline void NPCInfo::clear_has_p_soldier() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void NPCInfo::clear_p_soldier() {
  p_soldier_ = 0u;
  clear_has_p_soldier();
}
inline ::google::protobuf::uint32 NPCInfo::p_soldier() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_soldier)
  return p_soldier_;
}
inline void NPCInfo::set_p_soldier(::google::protobuf::uint32 value) {
  set_has_p_soldier();
  p_soldier_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_soldier)
}

// required uint32 p_tech = 25;
inline bool NPCInfo::has_p_tech() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void NPCInfo::set_has_p_tech() {
  _has_bits_[0] |= 0x01000000u;
}
inline void NPCInfo::clear_has_p_tech() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void NPCInfo::clear_p_tech() {
  p_tech_ = 0u;
  clear_has_p_tech();
}
inline ::google::protobuf::uint32 NPCInfo::p_tech() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_tech)
  return p_tech_;
}
inline void NPCInfo::set_p_tech(::google::protobuf::uint32 value) {
  set_has_p_tech();
  p_tech_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_tech)
}

// required uint32 p_anti_tech = 26;
inline bool NPCInfo::has_p_anti_tech() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void NPCInfo::set_has_p_anti_tech() {
  _has_bits_[0] |= 0x02000000u;
}
inline void NPCInfo::clear_has_p_anti_tech() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void NPCInfo::clear_p_anti_tech() {
  p_anti_tech_ = 0u;
  clear_has_p_anti_tech();
}
inline ::google::protobuf::uint32 NPCInfo::p_anti_tech() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.p_anti_tech)
  return p_anti_tech_;
}
inline void NPCInfo::set_p_anti_tech(::google::protobuf::uint32 value) {
  set_has_p_anti_tech();
  p_anti_tech_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.p_anti_tech)
}

// required uint32 r_exp = 27;
inline bool NPCInfo::has_r_exp() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void NPCInfo::set_has_r_exp() {
  _has_bits_[0] |= 0x04000000u;
}
inline void NPCInfo::clear_has_r_exp() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void NPCInfo::clear_r_exp() {
  r_exp_ = 0u;
  clear_has_r_exp();
}
inline ::google::protobuf::uint32 NPCInfo::r_exp() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.r_exp)
  return r_exp_;
}
inline void NPCInfo::set_r_exp(::google::protobuf::uint32 value) {
  set_has_r_exp();
  r_exp_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.r_exp)
}

// required uint32 r_coin = 28;
inline bool NPCInfo::has_r_coin() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void NPCInfo::set_has_r_coin() {
  _has_bits_[0] |= 0x08000000u;
}
inline void NPCInfo::clear_has_r_coin() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void NPCInfo::clear_r_coin() {
  r_coin_ = 0u;
  clear_has_r_coin();
}
inline ::google::protobuf::uint32 NPCInfo::r_coin() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.r_coin)
  return r_coin_;
}
inline void NPCInfo::set_r_coin(::google::protobuf::uint32 value) {
  set_has_r_coin();
  r_coin_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.r_coin)
}

// required uint32 r_food = 29;
inline bool NPCInfo::has_r_food() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void NPCInfo::set_has_r_food() {
  _has_bits_[0] |= 0x10000000u;
}
inline void NPCInfo::clear_has_r_food() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void NPCInfo::clear_r_food() {
  r_food_ = 0u;
  clear_has_r_food();
}
inline ::google::protobuf::uint32 NPCInfo::r_food() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.r_food)
  return r_food_;
}
inline void NPCInfo::set_r_food(::google::protobuf::uint32 value) {
  set_has_r_food();
  r_food_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.r_food)
}

// required uint32 r_wood = 30;
inline bool NPCInfo::has_r_wood() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void NPCInfo::set_has_r_wood() {
  _has_bits_[0] |= 0x20000000u;
}
inline void NPCInfo::clear_has_r_wood() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void NPCInfo::clear_r_wood() {
  r_wood_ = 0u;
  clear_has_r_wood();
}
inline ::google::protobuf::uint32 NPCInfo::r_wood() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.r_wood)
  return r_wood_;
}
inline void NPCInfo::set_r_wood(::google::protobuf::uint32 value) {
  set_has_r_wood();
  r_wood_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.r_wood)
}

// required uint32 r_iron = 31;
inline bool NPCInfo::has_r_iron() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void NPCInfo::set_has_r_iron() {
  _has_bits_[0] |= 0x40000000u;
}
inline void NPCInfo::clear_has_r_iron() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void NPCInfo::clear_r_iron() {
  r_iron_ = 0u;
  clear_has_r_iron();
}
inline ::google::protobuf::uint32 NPCInfo::r_iron() const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.r_iron)
  return r_iron_;
}
inline void NPCInfo::set_r_iron(::google::protobuf::uint32 value) {
  set_has_r_iron();
  r_iron_ = value;
  // @@protoc_insertion_point(field_set:NPC.NPCInfo.r_iron)
}

// repeated .NPC.NPCInfoItem r_item = 32;
inline int NPCInfo::r_item_size() const {
  return r_item_.size();
}
inline void NPCInfo::clear_r_item() {
  r_item_.Clear();
}
inline const ::NPC::NPCInfoItem& NPCInfo::r_item(int index) const {
  // @@protoc_insertion_point(field_get:NPC.NPCInfo.r_item)
  return r_item_.Get(index);
}
inline ::NPC::NPCInfoItem* NPCInfo::mutable_r_item(int index) {
  // @@protoc_insertion_point(field_mutable:NPC.NPCInfo.r_item)
  return r_item_.Mutable(index);
}
inline ::NPC::NPCInfoItem* NPCInfo::add_r_item() {
  // @@protoc_insertion_point(field_add:NPC.NPCInfo.r_item)
  return r_item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfoItem >&
NPCInfo::r_item() const {
  // @@protoc_insertion_point(field_list:NPC.NPCInfo.r_item)
  return r_item_;
}
inline ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfoItem >*
NPCInfo::mutable_r_item() {
  // @@protoc_insertion_point(field_mutable_list:NPC.NPCInfo.r_item)
  return &r_item_;
}

// -------------------------------------------------------------------

// NPCList

// repeated .NPC.NPCInfo npc = 1;
inline int NPCList::npc_size() const {
  return npc_.size();
}
inline void NPCList::clear_npc() {
  npc_.Clear();
}
inline const ::NPC::NPCInfo& NPCList::npc(int index) const {
  // @@protoc_insertion_point(field_get:NPC.NPCList.npc)
  return npc_.Get(index);
}
inline ::NPC::NPCInfo* NPCList::mutable_npc(int index) {
  // @@protoc_insertion_point(field_mutable:NPC.NPCList.npc)
  return npc_.Mutable(index);
}
inline ::NPC::NPCInfo* NPCList::add_npc() {
  // @@protoc_insertion_point(field_add:NPC.NPCList.npc)
  return npc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfo >&
NPCList::npc() const {
  // @@protoc_insertion_point(field_list:NPC.NPCList.npc)
  return npc_;
}
inline ::google::protobuf::RepeatedPtrField< ::NPC::NPCInfo >*
NPCList::mutable_npc() {
  // @@protoc_insertion_point(field_mutable_list:NPC.NPCList.npc)
  return &npc_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NPC

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NPC_2eproto__INCLUDED
