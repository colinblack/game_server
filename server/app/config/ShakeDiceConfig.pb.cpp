// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShakeDiceConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ShakeDiceConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ShakeDiceConfig {

namespace {

const ::google::protobuf::Descriptor* PointReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenPlatformMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenPlatformMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShakeDice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShakeDice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShakeDiceAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShakeDiceAll_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ShakeDiceConfig_2eproto() {
  protobuf_AddDesc_ShakeDiceConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ShakeDiceConfig.proto");
  GOOGLE_CHECK(file != NULL);
  PointReward_descriptor_ = file->message_type(0);
  static const int PointReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReward, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReward, reward_),
  };
  PointReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointReward_descriptor_,
      PointReward::default_instance_,
      PointReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointReward));
  MapInfo_descriptor_ = file->message_type(1);
  static const int MapInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, extra_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, points_reward_),
  };
  MapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapInfo_descriptor_,
      MapInfo::default_instance_,
      MapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapInfo));
  OpenPlatformMap_descriptor_ = file->message_type(2);
  static const int OpenPlatformMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformMap, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformMap, mapinfo_),
  };
  OpenPlatformMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenPlatformMap_descriptor_,
      OpenPlatformMap::default_instance_,
      OpenPlatformMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenPlatformMap));
  ShakeDice_descriptor_ = file->message_type(3);
  static const int ShakeDice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDice, reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDice, reset_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDice, free_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDice, dice_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDice, open_platform_map_),
  };
  ShakeDice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShakeDice_descriptor_,
      ShakeDice::default_instance_,
      ShakeDice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShakeDice));
  ShakeDiceAll_descriptor_ = file->message_type(4);
  static const int ShakeDiceAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDiceAll, shakedice_),
  };
  ShakeDiceAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShakeDiceAll_descriptor_,
      ShakeDiceAll::default_instance_,
      ShakeDiceAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDiceAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeDiceAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShakeDiceAll));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ShakeDiceConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointReward_descriptor_, &PointReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapInfo_descriptor_, &MapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenPlatformMap_descriptor_, &OpenPlatformMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShakeDice_descriptor_, &ShakeDice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShakeDiceAll_descriptor_, &ShakeDiceAll::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ShakeDiceConfig_2eproto() {
  delete PointReward::default_instance_;
  delete PointReward_reflection_;
  delete MapInfo::default_instance_;
  delete MapInfo_reflection_;
  delete OpenPlatformMap::default_instance_;
  delete OpenPlatformMap_reflection_;
  delete ShakeDice::default_instance_;
  delete ShakeDice_reflection_;
  delete ShakeDiceAll::default_instance_;
  delete ShakeDiceAll_reflection_;
}

void protobuf_AddDesc_ShakeDiceConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ShakeDiceConfig.proto\022\017ShakeDiceConfig"
    "\032\022RewardConfig.proto\"@\n\013PointReward\022\013\n\003p"
    "id\030\001 \002(\r\022$\n\006reward\030\002 \003(\0132\024.RewardConfig."
    "Reward\"\206\001\n\007MapInfo\022\n\n\002id\030\001 \002(\r\022\016\n\006points"
    "\030\002 \002(\r\022*\n\014extra_reward\030\003 \003(\0132\024.RewardCon"
    "fig.Reward\0223\n\rpoints_reward\030\004 \003(\0132\034.Shak"
    "eDiceConfig.PointReward\"N\n\017OpenPlatformM"
    "ap\022\020\n\010startday\030\001 \002(\r\022)\n\007mapinfo\030\002 \003(\0132\030."
    "ShakeDiceConfig.MapInfo\"\230\001\n\tShakeDice\022\023\n"
    "\013reset_times\030\001 \002(\r\022\022\n\nreset_cash\030\002 \002(\r\022\022"
    "\n\nfree_times\030\003 \002(\r\022\021\n\tdice_cash\030\004 \002(\r\022;\n"
    "\021open_platform_map\030\005 \003(\0132 .ShakeDiceConf"
    "ig.OpenPlatformMap\"=\n\014ShakeDiceAll\022-\n\tsh"
    "akedice\030\001 \002(\0132\032.ShakeDiceConfig.ShakeDic"
    "e", 561);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ShakeDiceConfig.proto", &protobuf_RegisterTypes);
  PointReward::default_instance_ = new PointReward();
  MapInfo::default_instance_ = new MapInfo();
  OpenPlatformMap::default_instance_ = new OpenPlatformMap();
  ShakeDice::default_instance_ = new ShakeDice();
  ShakeDiceAll::default_instance_ = new ShakeDiceAll();
  PointReward::default_instance_->InitAsDefaultInstance();
  MapInfo::default_instance_->InitAsDefaultInstance();
  OpenPlatformMap::default_instance_->InitAsDefaultInstance();
  ShakeDice::default_instance_->InitAsDefaultInstance();
  ShakeDiceAll::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ShakeDiceConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ShakeDiceConfig_2eproto {
  StaticDescriptorInitializer_ShakeDiceConfig_2eproto() {
    protobuf_AddDesc_ShakeDiceConfig_2eproto();
  }
} static_descriptor_initializer_ShakeDiceConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointReward::kPidFieldNumber;
const int PointReward::kRewardFieldNumber;
#endif  // !_MSC_VER

PointReward::PointReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShakeDiceConfig.PointReward)
}

void PointReward::InitAsDefaultInstance() {
}

PointReward::PointReward(const PointReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShakeDiceConfig.PointReward)
}

void PointReward::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointReward::~PointReward() {
  // @@protoc_insertion_point(destructor:ShakeDiceConfig.PointReward)
  SharedDtor();
}

void PointReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointReward_descriptor_;
}

const PointReward& PointReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShakeDiceConfig_2eproto();
  return *default_instance_;
}

PointReward* PointReward::default_instance_ = NULL;

PointReward* PointReward::New() const {
  return new PointReward;
}

void PointReward::Clear() {
  pid_ = 0u;
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShakeDiceConfig.PointReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .RewardConfig.Reward reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShakeDiceConfig.PointReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShakeDiceConfig.PointReward)
  return false;
#undef DO_
}

void PointReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShakeDiceConfig.PointReward)
  // required uint32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // repeated .RewardConfig.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShakeDiceConfig.PointReward)
}

::google::protobuf::uint8* PointReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShakeDiceConfig.PointReward)
  // required uint32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }

  // repeated .RewardConfig.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShakeDiceConfig.PointReward)
  return target;
}

int PointReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }

  }
  // repeated .RewardConfig.Reward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointReward::MergeFrom(const PointReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointReward::CopyFrom(const PointReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void PointReward::Swap(PointReward* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointReward_descriptor_;
  metadata.reflection = PointReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapInfo::kIdFieldNumber;
const int MapInfo::kPointsFieldNumber;
const int MapInfo::kExtraRewardFieldNumber;
const int MapInfo::kPointsRewardFieldNumber;
#endif  // !_MSC_VER

MapInfo::MapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShakeDiceConfig.MapInfo)
}

void MapInfo::InitAsDefaultInstance() {
}

MapInfo::MapInfo(const MapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShakeDiceConfig.MapInfo)
}

void MapInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  points_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapInfo::~MapInfo() {
  // @@protoc_insertion_point(destructor:ShakeDiceConfig.MapInfo)
  SharedDtor();
}

void MapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapInfo_descriptor_;
}

const MapInfo& MapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShakeDiceConfig_2eproto();
  return *default_instance_;
}

MapInfo* MapInfo::default_instance_ = NULL;

MapInfo* MapInfo::New() const {
  return new MapInfo;
}

void MapInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MapInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, points_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  extra_reward_.Clear();
  points_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShakeDiceConfig.MapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_points;
        break;
      }

      // required uint32 points = 2;
      case 2: {
        if (tag == 16) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extra_reward;
        break;
      }

      // repeated .RewardConfig.Reward extra_reward = 3;
      case 3: {
        if (tag == 26) {
         parse_extra_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extra_reward;
        if (input->ExpectTag(34)) goto parse_points_reward;
        break;
      }

      // repeated .ShakeDiceConfig.PointReward points_reward = 4;
      case 4: {
        if (tag == 34) {
         parse_points_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_points_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShakeDiceConfig.MapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShakeDiceConfig.MapInfo)
  return false;
#undef DO_
}

void MapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShakeDiceConfig.MapInfo)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 points = 2;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->points(), output);
  }

  // repeated .RewardConfig.Reward extra_reward = 3;
  for (int i = 0; i < this->extra_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extra_reward(i), output);
  }

  // repeated .ShakeDiceConfig.PointReward points_reward = 4;
  for (int i = 0; i < this->points_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShakeDiceConfig.MapInfo)
}

::google::protobuf::uint8* MapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShakeDiceConfig.MapInfo)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 points = 2;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->points(), target);
  }

  // repeated .RewardConfig.Reward extra_reward = 3;
  for (int i = 0; i < this->extra_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->extra_reward(i), target);
  }

  // repeated .ShakeDiceConfig.PointReward points_reward = 4;
  for (int i = 0; i < this->points_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->points_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShakeDiceConfig.MapInfo)
  return target;
}

int MapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 points = 2;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points());
    }

  }
  // repeated .RewardConfig.Reward extra_reward = 3;
  total_size += 1 * this->extra_reward_size();
  for (int i = 0; i < this->extra_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extra_reward(i));
  }

  // repeated .ShakeDiceConfig.PointReward points_reward = 4;
  total_size += 1 * this->points_reward_size();
  for (int i = 0; i < this->points_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapInfo::MergeFrom(const MapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  extra_reward_.MergeFrom(from.extra_reward_);
  points_reward_.MergeFrom(from.points_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapInfo::CopyFrom(const MapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->extra_reward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->points_reward())) return false;
  return true;
}

void MapInfo::Swap(MapInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(points_, other->points_);
    extra_reward_.Swap(&other->extra_reward_);
    points_reward_.Swap(&other->points_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapInfo_descriptor_;
  metadata.reflection = MapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenPlatformMap::kStartdayFieldNumber;
const int OpenPlatformMap::kMapinfoFieldNumber;
#endif  // !_MSC_VER

OpenPlatformMap::OpenPlatformMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShakeDiceConfig.OpenPlatformMap)
}

void OpenPlatformMap::InitAsDefaultInstance() {
}

OpenPlatformMap::OpenPlatformMap(const OpenPlatformMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShakeDiceConfig.OpenPlatformMap)
}

void OpenPlatformMap::SharedCtor() {
  _cached_size_ = 0;
  startday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenPlatformMap::~OpenPlatformMap() {
  // @@protoc_insertion_point(destructor:ShakeDiceConfig.OpenPlatformMap)
  SharedDtor();
}

void OpenPlatformMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenPlatformMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenPlatformMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenPlatformMap_descriptor_;
}

const OpenPlatformMap& OpenPlatformMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShakeDiceConfig_2eproto();
  return *default_instance_;
}

OpenPlatformMap* OpenPlatformMap::default_instance_ = NULL;

OpenPlatformMap* OpenPlatformMap::New() const {
  return new OpenPlatformMap;
}

void OpenPlatformMap::Clear() {
  startday_ = 0u;
  mapinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenPlatformMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShakeDiceConfig.OpenPlatformMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startday = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startday_)));
          set_has_startday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapinfo;
        break;
      }

      // repeated .ShakeDiceConfig.MapInfo mapinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_mapinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mapinfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShakeDiceConfig.OpenPlatformMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShakeDiceConfig.OpenPlatformMap)
  return false;
#undef DO_
}

void OpenPlatformMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShakeDiceConfig.OpenPlatformMap)
  // required uint32 startday = 1;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startday(), output);
  }

  // repeated .ShakeDiceConfig.MapInfo mapinfo = 2;
  for (int i = 0; i < this->mapinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mapinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShakeDiceConfig.OpenPlatformMap)
}

::google::protobuf::uint8* OpenPlatformMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShakeDiceConfig.OpenPlatformMap)
  // required uint32 startday = 1;
  if (has_startday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startday(), target);
  }

  // repeated .ShakeDiceConfig.MapInfo mapinfo = 2;
  for (int i = 0; i < this->mapinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mapinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShakeDiceConfig.OpenPlatformMap)
  return target;
}

int OpenPlatformMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 startday = 1;
    if (has_startday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startday());
    }

  }
  // repeated .ShakeDiceConfig.MapInfo mapinfo = 2;
  total_size += 1 * this->mapinfo_size();
  for (int i = 0; i < this->mapinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenPlatformMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenPlatformMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenPlatformMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenPlatformMap::MergeFrom(const OpenPlatformMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapinfo_.MergeFrom(from.mapinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startday()) {
      set_startday(from.startday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenPlatformMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPlatformMap::CopyFrom(const OpenPlatformMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPlatformMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->mapinfo())) return false;
  return true;
}

void OpenPlatformMap::Swap(OpenPlatformMap* other) {
  if (other != this) {
    std::swap(startday_, other->startday_);
    mapinfo_.Swap(&other->mapinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenPlatformMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenPlatformMap_descriptor_;
  metadata.reflection = OpenPlatformMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShakeDice::kResetTimesFieldNumber;
const int ShakeDice::kResetCashFieldNumber;
const int ShakeDice::kFreeTimesFieldNumber;
const int ShakeDice::kDiceCashFieldNumber;
const int ShakeDice::kOpenPlatformMapFieldNumber;
#endif  // !_MSC_VER

ShakeDice::ShakeDice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShakeDiceConfig.ShakeDice)
}

void ShakeDice::InitAsDefaultInstance() {
}

ShakeDice::ShakeDice(const ShakeDice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShakeDiceConfig.ShakeDice)
}

void ShakeDice::SharedCtor() {
  _cached_size_ = 0;
  reset_times_ = 0u;
  reset_cash_ = 0u;
  free_times_ = 0u;
  dice_cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShakeDice::~ShakeDice() {
  // @@protoc_insertion_point(destructor:ShakeDiceConfig.ShakeDice)
  SharedDtor();
}

void ShakeDice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShakeDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeDice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShakeDice_descriptor_;
}

const ShakeDice& ShakeDice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShakeDiceConfig_2eproto();
  return *default_instance_;
}

ShakeDice* ShakeDice::default_instance_ = NULL;

ShakeDice* ShakeDice::New() const {
  return new ShakeDice;
}

void ShakeDice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShakeDice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(reset_times_, dice_cash_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  open_platform_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShakeDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShakeDiceConfig.ShakeDice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 reset_times = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_times_)));
          set_has_reset_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reset_cash;
        break;
      }

      // required uint32 reset_cash = 2;
      case 2: {
        if (tag == 16) {
         parse_reset_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_cash_)));
          set_has_reset_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_free_times;
        break;
      }

      // required uint32 free_times = 3;
      case 3: {
        if (tag == 24) {
         parse_free_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_times_)));
          set_has_free_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dice_cash;
        break;
      }

      // required uint32 dice_cash = 4;
      case 4: {
        if (tag == 32) {
         parse_dice_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dice_cash_)));
          set_has_dice_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_open_platform_map;
        break;
      }

      // repeated .ShakeDiceConfig.OpenPlatformMap open_platform_map = 5;
      case 5: {
        if (tag == 42) {
         parse_open_platform_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_platform_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_open_platform_map;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShakeDiceConfig.ShakeDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShakeDiceConfig.ShakeDice)
  return false;
#undef DO_
}

void ShakeDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShakeDiceConfig.ShakeDice)
  // required uint32 reset_times = 1;
  if (has_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reset_times(), output);
  }

  // required uint32 reset_cash = 2;
  if (has_reset_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reset_cash(), output);
  }

  // required uint32 free_times = 3;
  if (has_free_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->free_times(), output);
  }

  // required uint32 dice_cash = 4;
  if (has_dice_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dice_cash(), output);
  }

  // repeated .ShakeDiceConfig.OpenPlatformMap open_platform_map = 5;
  for (int i = 0; i < this->open_platform_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->open_platform_map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShakeDiceConfig.ShakeDice)
}

::google::protobuf::uint8* ShakeDice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShakeDiceConfig.ShakeDice)
  // required uint32 reset_times = 1;
  if (has_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reset_times(), target);
  }

  // required uint32 reset_cash = 2;
  if (has_reset_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reset_cash(), target);
  }

  // required uint32 free_times = 3;
  if (has_free_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->free_times(), target);
  }

  // required uint32 dice_cash = 4;
  if (has_dice_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dice_cash(), target);
  }

  // repeated .ShakeDiceConfig.OpenPlatformMap open_platform_map = 5;
  for (int i = 0; i < this->open_platform_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->open_platform_map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShakeDiceConfig.ShakeDice)
  return target;
}

int ShakeDice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 reset_times = 1;
    if (has_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_times());
    }

    // required uint32 reset_cash = 2;
    if (has_reset_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_cash());
    }

    // required uint32 free_times = 3;
    if (has_free_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_times());
    }

    // required uint32 dice_cash = 4;
    if (has_dice_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dice_cash());
    }

  }
  // repeated .ShakeDiceConfig.OpenPlatformMap open_platform_map = 5;
  total_size += 1 * this->open_platform_map_size();
  for (int i = 0; i < this->open_platform_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->open_platform_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeDice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShakeDice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShakeDice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShakeDice::MergeFrom(const ShakeDice& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_platform_map_.MergeFrom(from.open_platform_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reset_times()) {
      set_reset_times(from.reset_times());
    }
    if (from.has_reset_cash()) {
      set_reset_cash(from.reset_cash());
    }
    if (from.has_free_times()) {
      set_free_times(from.free_times());
    }
    if (from.has_dice_cash()) {
      set_dice_cash(from.dice_cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShakeDice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeDice::CopyFrom(const ShakeDice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeDice::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->open_platform_map())) return false;
  return true;
}

void ShakeDice::Swap(ShakeDice* other) {
  if (other != this) {
    std::swap(reset_times_, other->reset_times_);
    std::swap(reset_cash_, other->reset_cash_);
    std::swap(free_times_, other->free_times_);
    std::swap(dice_cash_, other->dice_cash_);
    open_platform_map_.Swap(&other->open_platform_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShakeDice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShakeDice_descriptor_;
  metadata.reflection = ShakeDice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShakeDiceAll::kShakediceFieldNumber;
#endif  // !_MSC_VER

ShakeDiceAll::ShakeDiceAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShakeDiceConfig.ShakeDiceAll)
}

void ShakeDiceAll::InitAsDefaultInstance() {
  shakedice_ = const_cast< ::ShakeDiceConfig::ShakeDice*>(&::ShakeDiceConfig::ShakeDice::default_instance());
}

ShakeDiceAll::ShakeDiceAll(const ShakeDiceAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShakeDiceConfig.ShakeDiceAll)
}

void ShakeDiceAll::SharedCtor() {
  _cached_size_ = 0;
  shakedice_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShakeDiceAll::~ShakeDiceAll() {
  // @@protoc_insertion_point(destructor:ShakeDiceConfig.ShakeDiceAll)
  SharedDtor();
}

void ShakeDiceAll::SharedDtor() {
  if (this != default_instance_) {
    delete shakedice_;
  }
}

void ShakeDiceAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeDiceAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShakeDiceAll_descriptor_;
}

const ShakeDiceAll& ShakeDiceAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShakeDiceConfig_2eproto();
  return *default_instance_;
}

ShakeDiceAll* ShakeDiceAll::default_instance_ = NULL;

ShakeDiceAll* ShakeDiceAll::New() const {
  return new ShakeDiceAll;
}

void ShakeDiceAll::Clear() {
  if (has_shakedice()) {
    if (shakedice_ != NULL) shakedice_->::ShakeDiceConfig::ShakeDice::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShakeDiceAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShakeDiceConfig.ShakeDiceAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ShakeDiceConfig.ShakeDice shakedice = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shakedice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShakeDiceConfig.ShakeDiceAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShakeDiceConfig.ShakeDiceAll)
  return false;
#undef DO_
}

void ShakeDiceAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShakeDiceConfig.ShakeDiceAll)
  // required .ShakeDiceConfig.ShakeDice shakedice = 1;
  if (has_shakedice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shakedice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShakeDiceConfig.ShakeDiceAll)
}

::google::protobuf::uint8* ShakeDiceAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShakeDiceConfig.ShakeDiceAll)
  // required .ShakeDiceConfig.ShakeDice shakedice = 1;
  if (has_shakedice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shakedice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShakeDiceConfig.ShakeDiceAll)
  return target;
}

int ShakeDiceAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ShakeDiceConfig.ShakeDice shakedice = 1;
    if (has_shakedice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shakedice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeDiceAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShakeDiceAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShakeDiceAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShakeDiceAll::MergeFrom(const ShakeDiceAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shakedice()) {
      mutable_shakedice()->::ShakeDiceConfig::ShakeDice::MergeFrom(from.shakedice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShakeDiceAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeDiceAll::CopyFrom(const ShakeDiceAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeDiceAll::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_shakedice()) {
    if (!this->shakedice().IsInitialized()) return false;
  }
  return true;
}

void ShakeDiceAll::Swap(ShakeDiceAll* other) {
  if (other != this) {
    std::swap(shakedice_, other->shakedice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShakeDiceAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShakeDiceAll_descriptor_;
  metadata.reflection = ShakeDiceAll_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ShakeDiceConfig

// @@protoc_insertion_point(global_scope)
