// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MissionConfig.proto

#ifndef PROTOBUF_MissionConfig_2eproto__INCLUDED
#define PROTOBUF_MissionConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MissionConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MissionConfig_2eproto();
void protobuf_AssignDesc_MissionConfig_2eproto();
void protobuf_ShutdownFile_MissionConfig_2eproto();

class MissionReward;
class DoubleCondition;
class TripleCondition;
class WhetherMission;
class SingleMission;
class DoubleMission;
class TripleMission;
class AssembleMission;
class Mission;
class MissionAll;

// ===================================================================

class MissionReward : public ::google::protobuf::Message {
 public:
  MissionReward();
  virtual ~MissionReward();

  MissionReward(const MissionReward& from);

  inline MissionReward& operator=(const MissionReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionReward& default_instance();

  void Swap(MissionReward* other);

  // implements Message ----------------------------------------------

  MissionReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MissionReward& from);
  void MergeFrom(const MissionReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 food = 1;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 1;
  inline ::google::protobuf::uint32 food() const;
  inline void set_food(::google::protobuf::uint32 value);

  // required uint32 coin = 2;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // required uint32 wood = 3;
  inline bool has_wood() const;
  inline void clear_wood();
  static const int kWoodFieldNumber = 3;
  inline ::google::protobuf::uint32 wood() const;
  inline void set_wood(::google::protobuf::uint32 value);

  // required uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 hammer = 5;
  inline bool has_hammer() const;
  inline void clear_hammer();
  static const int kHammerFieldNumber = 5;
  inline ::google::protobuf::uint32 hammer() const;
  inline void set_hammer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MissionConfig.MissionReward)
 private:
  inline void set_has_food();
  inline void clear_has_food();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_wood();
  inline void clear_has_wood();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_hammer();
  inline void clear_has_hammer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 food_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 wood_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 hammer_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static MissionReward* default_instance_;
};
// -------------------------------------------------------------------

class DoubleCondition : public ::google::protobuf::Message {
 public:
  DoubleCondition();
  virtual ~DoubleCondition();

  DoubleCondition(const DoubleCondition& from);

  inline DoubleCondition& operator=(const DoubleCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleCondition& default_instance();

  void Swap(DoubleCondition* other);

  // implements Message ----------------------------------------------

  DoubleCondition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoubleCondition& from);
  void MergeFrom(const DoubleCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 subtype = 1;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 subtype() const;
  inline void set_subtype(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MissionConfig.DoubleCondition)
 private:
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 subtype_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static DoubleCondition* default_instance_;
};
// -------------------------------------------------------------------

class TripleCondition : public ::google::protobuf::Message {
 public:
  TripleCondition();
  virtual ~TripleCondition();

  TripleCondition(const TripleCondition& from);

  inline TripleCondition& operator=(const TripleCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TripleCondition& default_instance();

  void Swap(TripleCondition* other);

  // implements Message ----------------------------------------------

  TripleCondition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TripleCondition& from);
  void MergeFrom(const TripleCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 subtype = 1;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 subtype() const;
  inline void set_subtype(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MissionConfig.TripleCondition)
 private:
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 subtype_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static TripleCondition* default_instance_;
};
// -------------------------------------------------------------------

class WhetherMission : public ::google::protobuf::Message {
 public:
  WhetherMission();
  virtual ~WhetherMission();

  WhetherMission(const WhetherMission& from);

  inline WhetherMission& operator=(const WhetherMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhetherMission& default_instance();

  void Swap(WhetherMission* other);

  // implements Message ----------------------------------------------

  WhetherMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhetherMission& from);
  void MergeFrom(const WhetherMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 pre = 2;
  inline bool has_pre() const;
  inline void clear_pre();
  static const int kPreFieldNumber = 2;
  inline ::google::protobuf::uint32 pre() const;
  inline void set_pre(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required .MissionConfig.MissionReward reward = 4;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::MissionConfig::MissionReward& reward() const;
  inline ::MissionConfig::MissionReward* mutable_reward();
  inline ::MissionConfig::MissionReward* release_reward();
  inline void set_allocated_reward(::MissionConfig::MissionReward* reward);

  // @@protoc_insertion_point(class_scope:MissionConfig.WhetherMission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pre();
  inline void clear_has_pre();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 pre_;
  ::MissionConfig::MissionReward* reward_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static WhetherMission* default_instance_;
};
// -------------------------------------------------------------------

class SingleMission : public ::google::protobuf::Message {
 public:
  SingleMission();
  virtual ~SingleMission();

  SingleMission(const SingleMission& from);

  inline SingleMission& operator=(const SingleMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleMission& default_instance();

  void Swap(SingleMission* other);

  // implements Message ----------------------------------------------

  SingleMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleMission& from);
  void MergeFrom(const SingleMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 pre = 2;
  inline bool has_pre() const;
  inline void clear_pre();
  static const int kPreFieldNumber = 2;
  inline ::google::protobuf::uint32 pre() const;
  inline void set_pre(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 condition = 4;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 4;
  inline ::google::protobuf::uint32 condition() const;
  inline void set_condition(::google::protobuf::uint32 value);

  // required .MissionConfig.MissionReward reward = 5;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::MissionConfig::MissionReward& reward() const;
  inline ::MissionConfig::MissionReward* mutable_reward();
  inline ::MissionConfig::MissionReward* release_reward();
  inline void set_allocated_reward(::MissionConfig::MissionReward* reward);

  // @@protoc_insertion_point(class_scope:MissionConfig.SingleMission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pre();
  inline void clear_has_pre();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 pre_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 condition_;
  ::MissionConfig::MissionReward* reward_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static SingleMission* default_instance_;
};
// -------------------------------------------------------------------

class DoubleMission : public ::google::protobuf::Message {
 public:
  DoubleMission();
  virtual ~DoubleMission();

  DoubleMission(const DoubleMission& from);

  inline DoubleMission& operator=(const DoubleMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoubleMission& default_instance();

  void Swap(DoubleMission* other);

  // implements Message ----------------------------------------------

  DoubleMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoubleMission& from);
  void MergeFrom(const DoubleMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 pre = 2;
  inline bool has_pre() const;
  inline void clear_pre();
  static const int kPreFieldNumber = 2;
  inline ::google::protobuf::uint32 pre() const;
  inline void set_pre(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required .MissionConfig.DoubleCondition condition = 4;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 4;
  inline const ::MissionConfig::DoubleCondition& condition() const;
  inline ::MissionConfig::DoubleCondition* mutable_condition();
  inline ::MissionConfig::DoubleCondition* release_condition();
  inline void set_allocated_condition(::MissionConfig::DoubleCondition* condition);

  // required .MissionConfig.MissionReward reward = 5;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::MissionConfig::MissionReward& reward() const;
  inline ::MissionConfig::MissionReward* mutable_reward();
  inline ::MissionConfig::MissionReward* release_reward();
  inline void set_allocated_reward(::MissionConfig::MissionReward* reward);

  // @@protoc_insertion_point(class_scope:MissionConfig.DoubleMission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pre();
  inline void clear_has_pre();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 pre_;
  ::MissionConfig::DoubleCondition* condition_;
  ::MissionConfig::MissionReward* reward_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static DoubleMission* default_instance_;
};
// -------------------------------------------------------------------

class TripleMission : public ::google::protobuf::Message {
 public:
  TripleMission();
  virtual ~TripleMission();

  TripleMission(const TripleMission& from);

  inline TripleMission& operator=(const TripleMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TripleMission& default_instance();

  void Swap(TripleMission* other);

  // implements Message ----------------------------------------------

  TripleMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TripleMission& from);
  void MergeFrom(const TripleMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 pre = 2;
  inline bool has_pre() const;
  inline void clear_pre();
  static const int kPreFieldNumber = 2;
  inline ::google::protobuf::uint32 pre() const;
  inline void set_pre(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required .MissionConfig.TripleCondition condition = 4;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 4;
  inline const ::MissionConfig::TripleCondition& condition() const;
  inline ::MissionConfig::TripleCondition* mutable_condition();
  inline ::MissionConfig::TripleCondition* release_condition();
  inline void set_allocated_condition(::MissionConfig::TripleCondition* condition);

  // required .MissionConfig.MissionReward reward = 5;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::MissionConfig::MissionReward& reward() const;
  inline ::MissionConfig::MissionReward* mutable_reward();
  inline ::MissionConfig::MissionReward* release_reward();
  inline void set_allocated_reward(::MissionConfig::MissionReward* reward);

  // @@protoc_insertion_point(class_scope:MissionConfig.TripleMission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pre();
  inline void clear_has_pre();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 pre_;
  ::MissionConfig::TripleCondition* condition_;
  ::MissionConfig::MissionReward* reward_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static TripleMission* default_instance_;
};
// -------------------------------------------------------------------

class AssembleMission : public ::google::protobuf::Message {
 public:
  AssembleMission();
  virtual ~AssembleMission();

  AssembleMission(const AssembleMission& from);

  inline AssembleMission& operator=(const AssembleMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AssembleMission& default_instance();

  void Swap(AssembleMission* other);

  // implements Message ----------------------------------------------

  AssembleMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AssembleMission& from);
  void MergeFrom(const AssembleMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 pre = 2;
  inline bool has_pre() const;
  inline void clear_pre();
  static const int kPreFieldNumber = 2;
  inline ::google::protobuf::uint32 pre() const;
  inline void set_pre(::google::protobuf::uint32 value);

  // required uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated uint32 condition = 4;
  inline int condition_size() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 4;
  inline ::google::protobuf::uint32 condition(int index) const;
  inline void set_condition(int index, ::google::protobuf::uint32 value);
  inline void add_condition(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      condition() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_condition();

  // required .MissionConfig.MissionReward reward = 5;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::MissionConfig::MissionReward& reward() const;
  inline ::MissionConfig::MissionReward* mutable_reward();
  inline ::MissionConfig::MissionReward* release_reward();
  inline void set_allocated_reward(::MissionConfig::MissionReward* reward);

  // @@protoc_insertion_point(class_scope:MissionConfig.AssembleMission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pre();
  inline void clear_has_pre();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 pre_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > condition_;
  ::MissionConfig::MissionReward* reward_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static AssembleMission* default_instance_;
};
// -------------------------------------------------------------------

class Mission : public ::google::protobuf::Message {
 public:
  Mission();
  virtual ~Mission();

  Mission(const Mission& from);

  inline Mission& operator=(const Mission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mission& default_instance();

  void Swap(Mission* other);

  // implements Message ----------------------------------------------

  Mission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mission& from);
  void MergeFrom(const Mission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MissionConfig.WhetherMission whether = 1;
  inline int whether_size() const;
  inline void clear_whether();
  static const int kWhetherFieldNumber = 1;
  inline const ::MissionConfig::WhetherMission& whether(int index) const;
  inline ::MissionConfig::WhetherMission* mutable_whether(int index);
  inline ::MissionConfig::WhetherMission* add_whether();
  inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::WhetherMission >&
      whether() const;
  inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::WhetherMission >*
      mutable_whether();

  // repeated .MissionConfig.SingleMission single = 2;
  inline int single_size() const;
  inline void clear_single();
  static const int kSingleFieldNumber = 2;
  inline const ::MissionConfig::SingleMission& single(int index) const;
  inline ::MissionConfig::SingleMission* mutable_single(int index);
  inline ::MissionConfig::SingleMission* add_single();
  inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::SingleMission >&
      single() const;
  inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::SingleMission >*
      mutable_single();

  // repeated .MissionConfig.DoubleMission _double = 3;
  inline int _double_size() const;
  inline void clear__double();
  static const int kDoubleFieldNumber = 3;
  inline const ::MissionConfig::DoubleMission& _double(int index) const;
  inline ::MissionConfig::DoubleMission* mutable__double(int index);
  inline ::MissionConfig::DoubleMission* add__double();
  inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::DoubleMission >&
      _double() const;
  inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::DoubleMission >*
      mutable__double();

  // repeated .MissionConfig.TripleMission triple = 4;
  inline int triple_size() const;
  inline void clear_triple();
  static const int kTripleFieldNumber = 4;
  inline const ::MissionConfig::TripleMission& triple(int index) const;
  inline ::MissionConfig::TripleMission* mutable_triple(int index);
  inline ::MissionConfig::TripleMission* add_triple();
  inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::TripleMission >&
      triple() const;
  inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::TripleMission >*
      mutable_triple();

  // repeated .MissionConfig.AssembleMission assemble = 5;
  inline int assemble_size() const;
  inline void clear_assemble();
  static const int kAssembleFieldNumber = 5;
  inline const ::MissionConfig::AssembleMission& assemble(int index) const;
  inline ::MissionConfig::AssembleMission* mutable_assemble(int index);
  inline ::MissionConfig::AssembleMission* add_assemble();
  inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::AssembleMission >&
      assemble() const;
  inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::AssembleMission >*
      mutable_assemble();

  // @@protoc_insertion_point(class_scope:MissionConfig.Mission)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MissionConfig::WhetherMission > whether_;
  ::google::protobuf::RepeatedPtrField< ::MissionConfig::SingleMission > single_;
  ::google::protobuf::RepeatedPtrField< ::MissionConfig::DoubleMission > _double_;
  ::google::protobuf::RepeatedPtrField< ::MissionConfig::TripleMission > triple_;
  ::google::protobuf::RepeatedPtrField< ::MissionConfig::AssembleMission > assemble_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static Mission* default_instance_;
};
// -------------------------------------------------------------------

class MissionAll : public ::google::protobuf::Message {
 public:
  MissionAll();
  virtual ~MissionAll();

  MissionAll(const MissionAll& from);

  inline MissionAll& operator=(const MissionAll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MissionAll& default_instance();

  void Swap(MissionAll* other);

  // implements Message ----------------------------------------------

  MissionAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MissionAll& from);
  void MergeFrom(const MissionAll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MissionConfig.Mission missions = 1;
  inline bool has_missions() const;
  inline void clear_missions();
  static const int kMissionsFieldNumber = 1;
  inline const ::MissionConfig::Mission& missions() const;
  inline ::MissionConfig::Mission* mutable_missions();
  inline ::MissionConfig::Mission* release_missions();
  inline void set_allocated_missions(::MissionConfig::Mission* missions);

  // @@protoc_insertion_point(class_scope:MissionConfig.MissionAll)
 private:
  inline void set_has_missions();
  inline void clear_has_missions();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MissionConfig::Mission* missions_;
  friend void  protobuf_AddDesc_MissionConfig_2eproto();
  friend void protobuf_AssignDesc_MissionConfig_2eproto();
  friend void protobuf_ShutdownFile_MissionConfig_2eproto();

  void InitAsDefaultInstance();
  static MissionAll* default_instance_;
};
// ===================================================================


// ===================================================================

// MissionReward

// required uint32 food = 1;
inline bool MissionReward::has_food() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MissionReward::set_has_food() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MissionReward::clear_has_food() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MissionReward::clear_food() {
  food_ = 0u;
  clear_has_food();
}
inline ::google::protobuf::uint32 MissionReward::food() const {
  // @@protoc_insertion_point(field_get:MissionConfig.MissionReward.food)
  return food_;
}
inline void MissionReward::set_food(::google::protobuf::uint32 value) {
  set_has_food();
  food_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.MissionReward.food)
}

// required uint32 coin = 2;
inline bool MissionReward::has_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MissionReward::set_has_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MissionReward::clear_has_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MissionReward::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 MissionReward::coin() const {
  // @@protoc_insertion_point(field_get:MissionConfig.MissionReward.coin)
  return coin_;
}
inline void MissionReward::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.MissionReward.coin)
}

// required uint32 wood = 3;
inline bool MissionReward::has_wood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MissionReward::set_has_wood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MissionReward::clear_has_wood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MissionReward::clear_wood() {
  wood_ = 0u;
  clear_has_wood();
}
inline ::google::protobuf::uint32 MissionReward::wood() const {
  // @@protoc_insertion_point(field_get:MissionConfig.MissionReward.wood)
  return wood_;
}
inline void MissionReward::set_wood(::google::protobuf::uint32 value) {
  set_has_wood();
  wood_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.MissionReward.wood)
}

// required uint32 exp = 4;
inline bool MissionReward::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MissionReward::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MissionReward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MissionReward::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 MissionReward::exp() const {
  // @@protoc_insertion_point(field_get:MissionConfig.MissionReward.exp)
  return exp_;
}
inline void MissionReward::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.MissionReward.exp)
}

// optional uint32 hammer = 5;
inline bool MissionReward::has_hammer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MissionReward::set_has_hammer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MissionReward::clear_has_hammer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MissionReward::clear_hammer() {
  hammer_ = 0u;
  clear_has_hammer();
}
inline ::google::protobuf::uint32 MissionReward::hammer() const {
  // @@protoc_insertion_point(field_get:MissionConfig.MissionReward.hammer)
  return hammer_;
}
inline void MissionReward::set_hammer(::google::protobuf::uint32 value) {
  set_has_hammer();
  hammer_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.MissionReward.hammer)
}

// -------------------------------------------------------------------

// DoubleCondition

// required uint32 subtype = 1;
inline bool DoubleCondition::has_subtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoubleCondition::set_has_subtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoubleCondition::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoubleCondition::clear_subtype() {
  subtype_ = 0u;
  clear_has_subtype();
}
inline ::google::protobuf::uint32 DoubleCondition::subtype() const {
  // @@protoc_insertion_point(field_get:MissionConfig.DoubleCondition.subtype)
  return subtype_;
}
inline void DoubleCondition::set_subtype(::google::protobuf::uint32 value) {
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.DoubleCondition.subtype)
}

// required uint32 count = 2;
inline bool DoubleCondition::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DoubleCondition::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DoubleCondition::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DoubleCondition::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 DoubleCondition::count() const {
  // @@protoc_insertion_point(field_get:MissionConfig.DoubleCondition.count)
  return count_;
}
inline void DoubleCondition::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.DoubleCondition.count)
}

// -------------------------------------------------------------------

// TripleCondition

// required uint32 subtype = 1;
inline bool TripleCondition::has_subtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TripleCondition::set_has_subtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TripleCondition::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TripleCondition::clear_subtype() {
  subtype_ = 0u;
  clear_has_subtype();
}
inline ::google::protobuf::uint32 TripleCondition::subtype() const {
  // @@protoc_insertion_point(field_get:MissionConfig.TripleCondition.subtype)
  return subtype_;
}
inline void TripleCondition::set_subtype(::google::protobuf::uint32 value) {
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.TripleCondition.subtype)
}

// required uint32 level = 2;
inline bool TripleCondition::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TripleCondition::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TripleCondition::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TripleCondition::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TripleCondition::level() const {
  // @@protoc_insertion_point(field_get:MissionConfig.TripleCondition.level)
  return level_;
}
inline void TripleCondition::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.TripleCondition.level)
}

// required uint32 count = 3;
inline bool TripleCondition::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TripleCondition::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TripleCondition::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TripleCondition::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TripleCondition::count() const {
  // @@protoc_insertion_point(field_get:MissionConfig.TripleCondition.count)
  return count_;
}
inline void TripleCondition::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.TripleCondition.count)
}

// -------------------------------------------------------------------

// WhetherMission

// required uint32 id = 1;
inline bool WhetherMission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhetherMission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhetherMission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhetherMission::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 WhetherMission::id() const {
  // @@protoc_insertion_point(field_get:MissionConfig.WhetherMission.id)
  return id_;
}
inline void WhetherMission::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.WhetherMission.id)
}

// required uint32 pre = 2;
inline bool WhetherMission::has_pre() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhetherMission::set_has_pre() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhetherMission::clear_has_pre() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhetherMission::clear_pre() {
  pre_ = 0u;
  clear_has_pre();
}
inline ::google::protobuf::uint32 WhetherMission::pre() const {
  // @@protoc_insertion_point(field_get:MissionConfig.WhetherMission.pre)
  return pre_;
}
inline void WhetherMission::set_pre(::google::protobuf::uint32 value) {
  set_has_pre();
  pre_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.WhetherMission.pre)
}

// required uint32 type = 3;
inline bool WhetherMission::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhetherMission::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhetherMission::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhetherMission::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 WhetherMission::type() const {
  // @@protoc_insertion_point(field_get:MissionConfig.WhetherMission.type)
  return type_;
}
inline void WhetherMission::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.WhetherMission.type)
}

// required .MissionConfig.MissionReward reward = 4;
inline bool WhetherMission::has_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WhetherMission::set_has_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WhetherMission::clear_has_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WhetherMission::clear_reward() {
  if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
  clear_has_reward();
}
inline const ::MissionConfig::MissionReward& WhetherMission::reward() const {
  // @@protoc_insertion_point(field_get:MissionConfig.WhetherMission.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::MissionConfig::MissionReward* WhetherMission::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::MissionConfig::MissionReward;
  // @@protoc_insertion_point(field_mutable:MissionConfig.WhetherMission.reward)
  return reward_;
}
inline ::MissionConfig::MissionReward* WhetherMission::release_reward() {
  clear_has_reward();
  ::MissionConfig::MissionReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void WhetherMission::set_allocated_reward(::MissionConfig::MissionReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:MissionConfig.WhetherMission.reward)
}

// -------------------------------------------------------------------

// SingleMission

// required uint32 id = 1;
inline bool SingleMission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleMission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleMission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleMission::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SingleMission::id() const {
  // @@protoc_insertion_point(field_get:MissionConfig.SingleMission.id)
  return id_;
}
inline void SingleMission::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.SingleMission.id)
}

// required uint32 pre = 2;
inline bool SingleMission::has_pre() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleMission::set_has_pre() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleMission::clear_has_pre() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleMission::clear_pre() {
  pre_ = 0u;
  clear_has_pre();
}
inline ::google::protobuf::uint32 SingleMission::pre() const {
  // @@protoc_insertion_point(field_get:MissionConfig.SingleMission.pre)
  return pre_;
}
inline void SingleMission::set_pre(::google::protobuf::uint32 value) {
  set_has_pre();
  pre_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.SingleMission.pre)
}

// required uint32 type = 3;
inline bool SingleMission::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleMission::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleMission::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleMission::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SingleMission::type() const {
  // @@protoc_insertion_point(field_get:MissionConfig.SingleMission.type)
  return type_;
}
inline void SingleMission::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.SingleMission.type)
}

// required uint32 condition = 4;
inline bool SingleMission::has_condition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleMission::set_has_condition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleMission::clear_has_condition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleMission::clear_condition() {
  condition_ = 0u;
  clear_has_condition();
}
inline ::google::protobuf::uint32 SingleMission::condition() const {
  // @@protoc_insertion_point(field_get:MissionConfig.SingleMission.condition)
  return condition_;
}
inline void SingleMission::set_condition(::google::protobuf::uint32 value) {
  set_has_condition();
  condition_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.SingleMission.condition)
}

// required .MissionConfig.MissionReward reward = 5;
inline bool SingleMission::has_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleMission::set_has_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SingleMission::clear_has_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SingleMission::clear_reward() {
  if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
  clear_has_reward();
}
inline const ::MissionConfig::MissionReward& SingleMission::reward() const {
  // @@protoc_insertion_point(field_get:MissionConfig.SingleMission.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::MissionConfig::MissionReward* SingleMission::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::MissionConfig::MissionReward;
  // @@protoc_insertion_point(field_mutable:MissionConfig.SingleMission.reward)
  return reward_;
}
inline ::MissionConfig::MissionReward* SingleMission::release_reward() {
  clear_has_reward();
  ::MissionConfig::MissionReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void SingleMission::set_allocated_reward(::MissionConfig::MissionReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:MissionConfig.SingleMission.reward)
}

// -------------------------------------------------------------------

// DoubleMission

// required uint32 id = 1;
inline bool DoubleMission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoubleMission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoubleMission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoubleMission::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DoubleMission::id() const {
  // @@protoc_insertion_point(field_get:MissionConfig.DoubleMission.id)
  return id_;
}
inline void DoubleMission::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.DoubleMission.id)
}

// required uint32 pre = 2;
inline bool DoubleMission::has_pre() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DoubleMission::set_has_pre() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DoubleMission::clear_has_pre() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DoubleMission::clear_pre() {
  pre_ = 0u;
  clear_has_pre();
}
inline ::google::protobuf::uint32 DoubleMission::pre() const {
  // @@protoc_insertion_point(field_get:MissionConfig.DoubleMission.pre)
  return pre_;
}
inline void DoubleMission::set_pre(::google::protobuf::uint32 value) {
  set_has_pre();
  pre_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.DoubleMission.pre)
}

// required uint32 type = 3;
inline bool DoubleMission::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DoubleMission::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DoubleMission::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DoubleMission::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 DoubleMission::type() const {
  // @@protoc_insertion_point(field_get:MissionConfig.DoubleMission.type)
  return type_;
}
inline void DoubleMission::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.DoubleMission.type)
}

// required .MissionConfig.DoubleCondition condition = 4;
inline bool DoubleMission::has_condition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DoubleMission::set_has_condition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DoubleMission::clear_has_condition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DoubleMission::clear_condition() {
  if (condition_ != NULL) condition_->::MissionConfig::DoubleCondition::Clear();
  clear_has_condition();
}
inline const ::MissionConfig::DoubleCondition& DoubleMission::condition() const {
  // @@protoc_insertion_point(field_get:MissionConfig.DoubleMission.condition)
  return condition_ != NULL ? *condition_ : *default_instance_->condition_;
}
inline ::MissionConfig::DoubleCondition* DoubleMission::mutable_condition() {
  set_has_condition();
  if (condition_ == NULL) condition_ = new ::MissionConfig::DoubleCondition;
  // @@protoc_insertion_point(field_mutable:MissionConfig.DoubleMission.condition)
  return condition_;
}
inline ::MissionConfig::DoubleCondition* DoubleMission::release_condition() {
  clear_has_condition();
  ::MissionConfig::DoubleCondition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline void DoubleMission::set_allocated_condition(::MissionConfig::DoubleCondition* condition) {
  delete condition_;
  condition_ = condition;
  if (condition) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  // @@protoc_insertion_point(field_set_allocated:MissionConfig.DoubleMission.condition)
}

// required .MissionConfig.MissionReward reward = 5;
inline bool DoubleMission::has_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DoubleMission::set_has_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DoubleMission::clear_has_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DoubleMission::clear_reward() {
  if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
  clear_has_reward();
}
inline const ::MissionConfig::MissionReward& DoubleMission::reward() const {
  // @@protoc_insertion_point(field_get:MissionConfig.DoubleMission.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::MissionConfig::MissionReward* DoubleMission::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::MissionConfig::MissionReward;
  // @@protoc_insertion_point(field_mutable:MissionConfig.DoubleMission.reward)
  return reward_;
}
inline ::MissionConfig::MissionReward* DoubleMission::release_reward() {
  clear_has_reward();
  ::MissionConfig::MissionReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void DoubleMission::set_allocated_reward(::MissionConfig::MissionReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:MissionConfig.DoubleMission.reward)
}

// -------------------------------------------------------------------

// TripleMission

// required uint32 id = 1;
inline bool TripleMission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TripleMission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TripleMission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TripleMission::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TripleMission::id() const {
  // @@protoc_insertion_point(field_get:MissionConfig.TripleMission.id)
  return id_;
}
inline void TripleMission::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.TripleMission.id)
}

// required uint32 pre = 2;
inline bool TripleMission::has_pre() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TripleMission::set_has_pre() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TripleMission::clear_has_pre() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TripleMission::clear_pre() {
  pre_ = 0u;
  clear_has_pre();
}
inline ::google::protobuf::uint32 TripleMission::pre() const {
  // @@protoc_insertion_point(field_get:MissionConfig.TripleMission.pre)
  return pre_;
}
inline void TripleMission::set_pre(::google::protobuf::uint32 value) {
  set_has_pre();
  pre_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.TripleMission.pre)
}

// required uint32 type = 3;
inline bool TripleMission::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TripleMission::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TripleMission::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TripleMission::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TripleMission::type() const {
  // @@protoc_insertion_point(field_get:MissionConfig.TripleMission.type)
  return type_;
}
inline void TripleMission::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.TripleMission.type)
}

// required .MissionConfig.TripleCondition condition = 4;
inline bool TripleMission::has_condition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TripleMission::set_has_condition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TripleMission::clear_has_condition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TripleMission::clear_condition() {
  if (condition_ != NULL) condition_->::MissionConfig::TripleCondition::Clear();
  clear_has_condition();
}
inline const ::MissionConfig::TripleCondition& TripleMission::condition() const {
  // @@protoc_insertion_point(field_get:MissionConfig.TripleMission.condition)
  return condition_ != NULL ? *condition_ : *default_instance_->condition_;
}
inline ::MissionConfig::TripleCondition* TripleMission::mutable_condition() {
  set_has_condition();
  if (condition_ == NULL) condition_ = new ::MissionConfig::TripleCondition;
  // @@protoc_insertion_point(field_mutable:MissionConfig.TripleMission.condition)
  return condition_;
}
inline ::MissionConfig::TripleCondition* TripleMission::release_condition() {
  clear_has_condition();
  ::MissionConfig::TripleCondition* temp = condition_;
  condition_ = NULL;
  return temp;
}
inline void TripleMission::set_allocated_condition(::MissionConfig::TripleCondition* condition) {
  delete condition_;
  condition_ = condition;
  if (condition) {
    set_has_condition();
  } else {
    clear_has_condition();
  }
  // @@protoc_insertion_point(field_set_allocated:MissionConfig.TripleMission.condition)
}

// required .MissionConfig.MissionReward reward = 5;
inline bool TripleMission::has_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TripleMission::set_has_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TripleMission::clear_has_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TripleMission::clear_reward() {
  if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
  clear_has_reward();
}
inline const ::MissionConfig::MissionReward& TripleMission::reward() const {
  // @@protoc_insertion_point(field_get:MissionConfig.TripleMission.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::MissionConfig::MissionReward* TripleMission::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::MissionConfig::MissionReward;
  // @@protoc_insertion_point(field_mutable:MissionConfig.TripleMission.reward)
  return reward_;
}
inline ::MissionConfig::MissionReward* TripleMission::release_reward() {
  clear_has_reward();
  ::MissionConfig::MissionReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void TripleMission::set_allocated_reward(::MissionConfig::MissionReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:MissionConfig.TripleMission.reward)
}

// -------------------------------------------------------------------

// AssembleMission

// required uint32 id = 1;
inline bool AssembleMission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AssembleMission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AssembleMission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AssembleMission::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AssembleMission::id() const {
  // @@protoc_insertion_point(field_get:MissionConfig.AssembleMission.id)
  return id_;
}
inline void AssembleMission::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.AssembleMission.id)
}

// required uint32 pre = 2;
inline bool AssembleMission::has_pre() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AssembleMission::set_has_pre() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AssembleMission::clear_has_pre() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AssembleMission::clear_pre() {
  pre_ = 0u;
  clear_has_pre();
}
inline ::google::protobuf::uint32 AssembleMission::pre() const {
  // @@protoc_insertion_point(field_get:MissionConfig.AssembleMission.pre)
  return pre_;
}
inline void AssembleMission::set_pre(::google::protobuf::uint32 value) {
  set_has_pre();
  pre_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.AssembleMission.pre)
}

// required uint32 type = 3;
inline bool AssembleMission::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AssembleMission::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AssembleMission::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AssembleMission::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 AssembleMission::type() const {
  // @@protoc_insertion_point(field_get:MissionConfig.AssembleMission.type)
  return type_;
}
inline void AssembleMission::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:MissionConfig.AssembleMission.type)
}

// repeated uint32 condition = 4;
inline int AssembleMission::condition_size() const {
  return condition_.size();
}
inline void AssembleMission::clear_condition() {
  condition_.Clear();
}
inline ::google::protobuf::uint32 AssembleMission::condition(int index) const {
  // @@protoc_insertion_point(field_get:MissionConfig.AssembleMission.condition)
  return condition_.Get(index);
}
inline void AssembleMission::set_condition(int index, ::google::protobuf::uint32 value) {
  condition_.Set(index, value);
  // @@protoc_insertion_point(field_set:MissionConfig.AssembleMission.condition)
}
inline void AssembleMission::add_condition(::google::protobuf::uint32 value) {
  condition_.Add(value);
  // @@protoc_insertion_point(field_add:MissionConfig.AssembleMission.condition)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AssembleMission::condition() const {
  // @@protoc_insertion_point(field_list:MissionConfig.AssembleMission.condition)
  return condition_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AssembleMission::mutable_condition() {
  // @@protoc_insertion_point(field_mutable_list:MissionConfig.AssembleMission.condition)
  return &condition_;
}

// required .MissionConfig.MissionReward reward = 5;
inline bool AssembleMission::has_reward() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AssembleMission::set_has_reward() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AssembleMission::clear_has_reward() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AssembleMission::clear_reward() {
  if (reward_ != NULL) reward_->::MissionConfig::MissionReward::Clear();
  clear_has_reward();
}
inline const ::MissionConfig::MissionReward& AssembleMission::reward() const {
  // @@protoc_insertion_point(field_get:MissionConfig.AssembleMission.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::MissionConfig::MissionReward* AssembleMission::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::MissionConfig::MissionReward;
  // @@protoc_insertion_point(field_mutable:MissionConfig.AssembleMission.reward)
  return reward_;
}
inline ::MissionConfig::MissionReward* AssembleMission::release_reward() {
  clear_has_reward();
  ::MissionConfig::MissionReward* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void AssembleMission::set_allocated_reward(::MissionConfig::MissionReward* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:MissionConfig.AssembleMission.reward)
}

// -------------------------------------------------------------------

// Mission

// repeated .MissionConfig.WhetherMission whether = 1;
inline int Mission::whether_size() const {
  return whether_.size();
}
inline void Mission::clear_whether() {
  whether_.Clear();
}
inline const ::MissionConfig::WhetherMission& Mission::whether(int index) const {
  // @@protoc_insertion_point(field_get:MissionConfig.Mission.whether)
  return whether_.Get(index);
}
inline ::MissionConfig::WhetherMission* Mission::mutable_whether(int index) {
  // @@protoc_insertion_point(field_mutable:MissionConfig.Mission.whether)
  return whether_.Mutable(index);
}
inline ::MissionConfig::WhetherMission* Mission::add_whether() {
  // @@protoc_insertion_point(field_add:MissionConfig.Mission.whether)
  return whether_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::WhetherMission >&
Mission::whether() const {
  // @@protoc_insertion_point(field_list:MissionConfig.Mission.whether)
  return whether_;
}
inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::WhetherMission >*
Mission::mutable_whether() {
  // @@protoc_insertion_point(field_mutable_list:MissionConfig.Mission.whether)
  return &whether_;
}

// repeated .MissionConfig.SingleMission single = 2;
inline int Mission::single_size() const {
  return single_.size();
}
inline void Mission::clear_single() {
  single_.Clear();
}
inline const ::MissionConfig::SingleMission& Mission::single(int index) const {
  // @@protoc_insertion_point(field_get:MissionConfig.Mission.single)
  return single_.Get(index);
}
inline ::MissionConfig::SingleMission* Mission::mutable_single(int index) {
  // @@protoc_insertion_point(field_mutable:MissionConfig.Mission.single)
  return single_.Mutable(index);
}
inline ::MissionConfig::SingleMission* Mission::add_single() {
  // @@protoc_insertion_point(field_add:MissionConfig.Mission.single)
  return single_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::SingleMission >&
Mission::single() const {
  // @@protoc_insertion_point(field_list:MissionConfig.Mission.single)
  return single_;
}
inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::SingleMission >*
Mission::mutable_single() {
  // @@protoc_insertion_point(field_mutable_list:MissionConfig.Mission.single)
  return &single_;
}

// repeated .MissionConfig.DoubleMission _double = 3;
inline int Mission::_double_size() const {
  return _double_.size();
}
inline void Mission::clear__double() {
  _double_.Clear();
}
inline const ::MissionConfig::DoubleMission& Mission::_double(int index) const {
  // @@protoc_insertion_point(field_get:MissionConfig.Mission._double)
  return _double_.Get(index);
}
inline ::MissionConfig::DoubleMission* Mission::mutable__double(int index) {
  // @@protoc_insertion_point(field_mutable:MissionConfig.Mission._double)
  return _double_.Mutable(index);
}
inline ::MissionConfig::DoubleMission* Mission::add__double() {
  // @@protoc_insertion_point(field_add:MissionConfig.Mission._double)
  return _double_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::DoubleMission >&
Mission::_double() const {
  // @@protoc_insertion_point(field_list:MissionConfig.Mission._double)
  return _double_;
}
inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::DoubleMission >*
Mission::mutable__double() {
  // @@protoc_insertion_point(field_mutable_list:MissionConfig.Mission._double)
  return &_double_;
}

// repeated .MissionConfig.TripleMission triple = 4;
inline int Mission::triple_size() const {
  return triple_.size();
}
inline void Mission::clear_triple() {
  triple_.Clear();
}
inline const ::MissionConfig::TripleMission& Mission::triple(int index) const {
  // @@protoc_insertion_point(field_get:MissionConfig.Mission.triple)
  return triple_.Get(index);
}
inline ::MissionConfig::TripleMission* Mission::mutable_triple(int index) {
  // @@protoc_insertion_point(field_mutable:MissionConfig.Mission.triple)
  return triple_.Mutable(index);
}
inline ::MissionConfig::TripleMission* Mission::add_triple() {
  // @@protoc_insertion_point(field_add:MissionConfig.Mission.triple)
  return triple_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::TripleMission >&
Mission::triple() const {
  // @@protoc_insertion_point(field_list:MissionConfig.Mission.triple)
  return triple_;
}
inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::TripleMission >*
Mission::mutable_triple() {
  // @@protoc_insertion_point(field_mutable_list:MissionConfig.Mission.triple)
  return &triple_;
}

// repeated .MissionConfig.AssembleMission assemble = 5;
inline int Mission::assemble_size() const {
  return assemble_.size();
}
inline void Mission::clear_assemble() {
  assemble_.Clear();
}
inline const ::MissionConfig::AssembleMission& Mission::assemble(int index) const {
  // @@protoc_insertion_point(field_get:MissionConfig.Mission.assemble)
  return assemble_.Get(index);
}
inline ::MissionConfig::AssembleMission* Mission::mutable_assemble(int index) {
  // @@protoc_insertion_point(field_mutable:MissionConfig.Mission.assemble)
  return assemble_.Mutable(index);
}
inline ::MissionConfig::AssembleMission* Mission::add_assemble() {
  // @@protoc_insertion_point(field_add:MissionConfig.Mission.assemble)
  return assemble_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MissionConfig::AssembleMission >&
Mission::assemble() const {
  // @@protoc_insertion_point(field_list:MissionConfig.Mission.assemble)
  return assemble_;
}
inline ::google::protobuf::RepeatedPtrField< ::MissionConfig::AssembleMission >*
Mission::mutable_assemble() {
  // @@protoc_insertion_point(field_mutable_list:MissionConfig.Mission.assemble)
  return &assemble_;
}

// -------------------------------------------------------------------

// MissionAll

// required .MissionConfig.Mission missions = 1;
inline bool MissionAll::has_missions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MissionAll::set_has_missions() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MissionAll::clear_has_missions() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MissionAll::clear_missions() {
  if (missions_ != NULL) missions_->::MissionConfig::Mission::Clear();
  clear_has_missions();
}
inline const ::MissionConfig::Mission& MissionAll::missions() const {
  // @@protoc_insertion_point(field_get:MissionConfig.MissionAll.missions)
  return missions_ != NULL ? *missions_ : *default_instance_->missions_;
}
inline ::MissionConfig::Mission* MissionAll::mutable_missions() {
  set_has_missions();
  if (missions_ == NULL) missions_ = new ::MissionConfig::Mission;
  // @@protoc_insertion_point(field_mutable:MissionConfig.MissionAll.missions)
  return missions_;
}
inline ::MissionConfig::Mission* MissionAll::release_missions() {
  clear_has_missions();
  ::MissionConfig::Mission* temp = missions_;
  missions_ = NULL;
  return temp;
}
inline void MissionAll::set_allocated_missions(::MissionConfig::Mission* missions) {
  delete missions_;
  missions_ = missions;
  if (missions) {
    set_has_missions();
  } else {
    clear_has_missions();
  }
  // @@protoc_insertion_point(field_set_allocated:MissionConfig.MissionAll.missions)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MissionConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MissionConfig_2eproto__INCLUDED
