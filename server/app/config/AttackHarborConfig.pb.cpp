// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AttackHarborConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AttackHarborConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AttackHarborConfig {

namespace {

const ::google::protobuf::Descriptor* NPCInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenPlatformNPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenPlatformNPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenPlatformReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenPlatformReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryRankReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryRankReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttackPearlHarbor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttackPearlHarbor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AttackHarborConfig_2eproto() {
  protobuf_AddDesc_AttackHarborConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AttackHarborConfig.proto");
  GOOGLE_CHECK(file != NULL);
  NPCInfo_descriptor_ = file->message_type(0);
  static const int NPCInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, count_),
  };
  NPCInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCInfo_descriptor_,
      NPCInfo::default_instance_,
      NPCInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCInfo));
  OpenPlatformNPC_descriptor_ = file->message_type(1);
  static const int OpenPlatformNPC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformNPC, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformNPC, npcs_),
  };
  OpenPlatformNPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenPlatformNPC_descriptor_,
      OpenPlatformNPC::default_instance_,
      OpenPlatformNPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformNPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformNPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenPlatformNPC));
  NPCRefresh_descriptor_ = file->message_type(2);
  static const int NPCRefresh_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCRefresh, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCRefresh, enemy_kindom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCRefresh, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCRefresh, open_platform_npc_),
  };
  NPCRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCRefresh_descriptor_,
      NPCRefresh::default_instance_,
      NPCRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCRefresh));
  OpenPlatformReward_descriptor_ = file->message_type(3);
  static const int OpenPlatformReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformReward, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformReward, reward_),
  };
  OpenPlatformReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenPlatformReward_descriptor_,
      OpenPlatformReward::default_instance_,
      OpenPlatformReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenPlatformReward));
  CountryRankReward_descriptor_ = file->message_type(4);
  static const int CountryRankReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankReward, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankReward, open_platform_reward_),
  };
  CountryRankReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryRankReward_descriptor_,
      CountryRankReward::default_instance_,
      CountryRankReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryRankReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryRankReward));
  AttackPearlHarbor_descriptor_ = file->message_type(5);
  static const int AttackPearlHarbor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPearlHarbor, npcrefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPearlHarbor, refresh_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPearlHarbor, individual_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPearlHarbor, country_reward_),
  };
  AttackPearlHarbor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttackPearlHarbor_descriptor_,
      AttackPearlHarbor::default_instance_,
      AttackPearlHarbor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPearlHarbor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttackPearlHarbor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttackPearlHarbor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AttackHarborConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCInfo_descriptor_, &NPCInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenPlatformNPC_descriptor_, &OpenPlatformNPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCRefresh_descriptor_, &NPCRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenPlatformReward_descriptor_, &OpenPlatformReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryRankReward_descriptor_, &CountryRankReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttackPearlHarbor_descriptor_, &AttackPearlHarbor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AttackHarborConfig_2eproto() {
  delete NPCInfo::default_instance_;
  delete NPCInfo_reflection_;
  delete OpenPlatformNPC::default_instance_;
  delete OpenPlatformNPC_reflection_;
  delete NPCRefresh::default_instance_;
  delete NPCRefresh_reflection_;
  delete OpenPlatformReward::default_instance_;
  delete OpenPlatformReward_reflection_;
  delete CountryRankReward::default_instance_;
  delete CountryRankReward_reflection_;
  delete AttackPearlHarbor::default_instance_;
  delete AttackPearlHarbor_reflection_;
}

void protobuf_AddDesc_AttackHarborConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030AttackHarborConfig.proto\022\022AttackHarbor"
    "Config\032\022RewardConfig.proto\"\'\n\007NPCInfo\022\r\n"
    "\005npcid\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"N\n\017OpenPlatf"
    "ormNPC\022\020\n\010startday\030\001 \002(\r\022)\n\004npcs\030\002 \003(\0132\033"
    ".AttackHarborConfig.NPCInfo\"\203\001\n\nNPCRefre"
    "sh\022\013\n\003cid\030\001 \003(\r\022\024\n\014enemy_kindom\030\002 \002(\r\022\022\n"
    "\nstart_time\030\003 \002(\r\022>\n\021open_platform_npc\030\004"
    " \003(\0132#.AttackHarborConfig.OpenPlatformNP"
    "C\"L\n\022OpenPlatformReward\022\020\n\010startday\030\001 \002("
    "\r\022$\n\006reward\030\002 \003(\0132\024.RewardConfig.Reward\""
    "g\n\021CountryRankReward\022\014\n\004rank\030\001 \002(\r\022D\n\024op"
    "en_platform_reward\030\002 \003(\0132&.AttackHarborC"
    "onfig.OpenPlatformReward\"\274\001\n\021AttackPearl"
    "Harbor\0222\n\nnpcrefresh\030\001 \003(\0132\036.AttackHarbo"
    "rConfig.NPCRefresh\022\031\n\021refresh_frequency\030"
    "\002 \002(\r\022\031\n\021individual_reward\030\003 \003(\r\022=\n\016coun"
    "try_reward\030\004 \003(\0132%.AttackHarborConfig.Co"
    "untryRankReward", 695);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AttackHarborConfig.proto", &protobuf_RegisterTypes);
  NPCInfo::default_instance_ = new NPCInfo();
  OpenPlatformNPC::default_instance_ = new OpenPlatformNPC();
  NPCRefresh::default_instance_ = new NPCRefresh();
  OpenPlatformReward::default_instance_ = new OpenPlatformReward();
  CountryRankReward::default_instance_ = new CountryRankReward();
  AttackPearlHarbor::default_instance_ = new AttackPearlHarbor();
  NPCInfo::default_instance_->InitAsDefaultInstance();
  OpenPlatformNPC::default_instance_->InitAsDefaultInstance();
  NPCRefresh::default_instance_->InitAsDefaultInstance();
  OpenPlatformReward::default_instance_->InitAsDefaultInstance();
  CountryRankReward::default_instance_->InitAsDefaultInstance();
  AttackPearlHarbor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AttackHarborConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AttackHarborConfig_2eproto {
  StaticDescriptorInitializer_AttackHarborConfig_2eproto() {
    protobuf_AddDesc_AttackHarborConfig_2eproto();
  }
} static_descriptor_initializer_AttackHarborConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NPCInfo::kNpcidFieldNumber;
const int NPCInfo::kCountFieldNumber;
#endif  // !_MSC_VER

NPCInfo::NPCInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AttackHarborConfig.NPCInfo)
}

void NPCInfo::InitAsDefaultInstance() {
}

NPCInfo::NPCInfo(const NPCInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AttackHarborConfig.NPCInfo)
}

void NPCInfo::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCInfo::~NPCInfo() {
  // @@protoc_insertion_point(destructor:AttackHarborConfig.NPCInfo)
  SharedDtor();
}

void NPCInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCInfo_descriptor_;
}

const NPCInfo& NPCInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AttackHarborConfig_2eproto();
  return *default_instance_;
}

NPCInfo* NPCInfo::default_instance_ = NULL;

NPCInfo* NPCInfo::New() const {
  return new NPCInfo;
}

void NPCInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NPCInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(npcid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AttackHarborConfig.NPCInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 npcid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AttackHarborConfig.NPCInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AttackHarborConfig.NPCInfo)
  return false;
#undef DO_
}

void NPCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AttackHarborConfig.NPCInfo)
  // required uint32 npcid = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AttackHarborConfig.NPCInfo)
}

::google::protobuf::uint8* NPCInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AttackHarborConfig.NPCInfo)
  // required uint32 npcid = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AttackHarborConfig.NPCInfo)
  return target;
}

int NPCInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 npcid = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCInfo::MergeFrom(const NPCInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCInfo::CopyFrom(const NPCInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NPCInfo::Swap(NPCInfo* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCInfo_descriptor_;
  metadata.reflection = NPCInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenPlatformNPC::kStartdayFieldNumber;
const int OpenPlatformNPC::kNpcsFieldNumber;
#endif  // !_MSC_VER

OpenPlatformNPC::OpenPlatformNPC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AttackHarborConfig.OpenPlatformNPC)
}

void OpenPlatformNPC::InitAsDefaultInstance() {
}

OpenPlatformNPC::OpenPlatformNPC(const OpenPlatformNPC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AttackHarborConfig.OpenPlatformNPC)
}

void OpenPlatformNPC::SharedCtor() {
  _cached_size_ = 0;
  startday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenPlatformNPC::~OpenPlatformNPC() {
  // @@protoc_insertion_point(destructor:AttackHarborConfig.OpenPlatformNPC)
  SharedDtor();
}

void OpenPlatformNPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenPlatformNPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenPlatformNPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenPlatformNPC_descriptor_;
}

const OpenPlatformNPC& OpenPlatformNPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AttackHarborConfig_2eproto();
  return *default_instance_;
}

OpenPlatformNPC* OpenPlatformNPC::default_instance_ = NULL;

OpenPlatformNPC* OpenPlatformNPC::New() const {
  return new OpenPlatformNPC;
}

void OpenPlatformNPC::Clear() {
  startday_ = 0u;
  npcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenPlatformNPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AttackHarborConfig.OpenPlatformNPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startday = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startday_)));
          set_has_startday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_npcs;
        break;
      }

      // repeated .AttackHarborConfig.NPCInfo npcs = 2;
      case 2: {
        if (tag == 18) {
         parse_npcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_npcs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AttackHarborConfig.OpenPlatformNPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AttackHarborConfig.OpenPlatformNPC)
  return false;
#undef DO_
}

void OpenPlatformNPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AttackHarborConfig.OpenPlatformNPC)
  // required uint32 startday = 1;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startday(), output);
  }

  // repeated .AttackHarborConfig.NPCInfo npcs = 2;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->npcs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AttackHarborConfig.OpenPlatformNPC)
}

::google::protobuf::uint8* OpenPlatformNPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AttackHarborConfig.OpenPlatformNPC)
  // required uint32 startday = 1;
  if (has_startday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startday(), target);
  }

  // repeated .AttackHarborConfig.NPCInfo npcs = 2;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->npcs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AttackHarborConfig.OpenPlatformNPC)
  return target;
}

int OpenPlatformNPC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 startday = 1;
    if (has_startday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startday());
    }

  }
  // repeated .AttackHarborConfig.NPCInfo npcs = 2;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenPlatformNPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenPlatformNPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenPlatformNPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenPlatformNPC::MergeFrom(const OpenPlatformNPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startday()) {
      set_startday(from.startday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenPlatformNPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPlatformNPC::CopyFrom(const OpenPlatformNPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPlatformNPC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->npcs())) return false;
  return true;
}

void OpenPlatformNPC::Swap(OpenPlatformNPC* other) {
  if (other != this) {
    std::swap(startday_, other->startday_);
    npcs_.Swap(&other->npcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenPlatformNPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenPlatformNPC_descriptor_;
  metadata.reflection = OpenPlatformNPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCRefresh::kCidFieldNumber;
const int NPCRefresh::kEnemyKindomFieldNumber;
const int NPCRefresh::kStartTimeFieldNumber;
const int NPCRefresh::kOpenPlatformNpcFieldNumber;
#endif  // !_MSC_VER

NPCRefresh::NPCRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AttackHarborConfig.NPCRefresh)
}

void NPCRefresh::InitAsDefaultInstance() {
}

NPCRefresh::NPCRefresh(const NPCRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AttackHarborConfig.NPCRefresh)
}

void NPCRefresh::SharedCtor() {
  _cached_size_ = 0;
  enemy_kindom_ = 0u;
  start_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCRefresh::~NPCRefresh() {
  // @@protoc_insertion_point(destructor:AttackHarborConfig.NPCRefresh)
  SharedDtor();
}

void NPCRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCRefresh_descriptor_;
}

const NPCRefresh& NPCRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AttackHarborConfig_2eproto();
  return *default_instance_;
}

NPCRefresh* NPCRefresh::default_instance_ = NULL;

NPCRefresh* NPCRefresh::New() const {
  return new NPCRefresh;
}

void NPCRefresh::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NPCRefresh*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(enemy_kindom_, start_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  cid_.Clear();
  open_platform_npc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AttackHarborConfig.NPCRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cid = 1;
      case 1: {
        if (tag == 8) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_cid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_cid;
        if (input->ExpectTag(16)) goto parse_enemy_kindom;
        break;
      }

      // required uint32 enemy_kindom = 2;
      case 2: {
        if (tag == 16) {
         parse_enemy_kindom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_kindom_)));
          set_has_enemy_kindom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required uint32 start_time = 3;
      case 3: {
        if (tag == 24) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_open_platform_npc;
        break;
      }

      // repeated .AttackHarborConfig.OpenPlatformNPC open_platform_npc = 4;
      case 4: {
        if (tag == 34) {
         parse_open_platform_npc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_platform_npc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_open_platform_npc;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AttackHarborConfig.NPCRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AttackHarborConfig.NPCRefresh)
  return false;
#undef DO_
}

void NPCRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AttackHarborConfig.NPCRefresh)
  // repeated uint32 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cid(i), output);
  }

  // required uint32 enemy_kindom = 2;
  if (has_enemy_kindom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enemy_kindom(), output);
  }

  // required uint32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // repeated .AttackHarborConfig.OpenPlatformNPC open_platform_npc = 4;
  for (int i = 0; i < this->open_platform_npc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->open_platform_npc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AttackHarborConfig.NPCRefresh)
}

::google::protobuf::uint8* NPCRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AttackHarborConfig.NPCRefresh)
  // repeated uint32 cid = 1;
  for (int i = 0; i < this->cid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->cid(i), target);
  }

  // required uint32 enemy_kindom = 2;
  if (has_enemy_kindom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enemy_kindom(), target);
  }

  // required uint32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // repeated .AttackHarborConfig.OpenPlatformNPC open_platform_npc = 4;
  for (int i = 0; i < this->open_platform_npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->open_platform_npc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AttackHarborConfig.NPCRefresh)
  return target;
}

int NPCRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 enemy_kindom = 2;
    if (has_enemy_kindom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_kindom());
    }

    // required uint32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  // repeated uint32 cid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cid(i));
    }
    total_size += 1 * this->cid_size() + data_size;
  }

  // repeated .AttackHarborConfig.OpenPlatformNPC open_platform_npc = 4;
  total_size += 1 * this->open_platform_npc_size();
  for (int i = 0; i < this->open_platform_npc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->open_platform_npc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCRefresh::MergeFrom(const NPCRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_.MergeFrom(from.cid_);
  open_platform_npc_.MergeFrom(from.open_platform_npc_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_enemy_kindom()) {
      set_enemy_kindom(from.enemy_kindom());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCRefresh::CopyFrom(const NPCRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCRefresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->open_platform_npc())) return false;
  return true;
}

void NPCRefresh::Swap(NPCRefresh* other) {
  if (other != this) {
    cid_.Swap(&other->cid_);
    std::swap(enemy_kindom_, other->enemy_kindom_);
    std::swap(start_time_, other->start_time_);
    open_platform_npc_.Swap(&other->open_platform_npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCRefresh_descriptor_;
  metadata.reflection = NPCRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenPlatformReward::kStartdayFieldNumber;
const int OpenPlatformReward::kRewardFieldNumber;
#endif  // !_MSC_VER

OpenPlatformReward::OpenPlatformReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AttackHarborConfig.OpenPlatformReward)
}

void OpenPlatformReward::InitAsDefaultInstance() {
}

OpenPlatformReward::OpenPlatformReward(const OpenPlatformReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AttackHarborConfig.OpenPlatformReward)
}

void OpenPlatformReward::SharedCtor() {
  _cached_size_ = 0;
  startday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenPlatformReward::~OpenPlatformReward() {
  // @@protoc_insertion_point(destructor:AttackHarborConfig.OpenPlatformReward)
  SharedDtor();
}

void OpenPlatformReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenPlatformReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenPlatformReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenPlatformReward_descriptor_;
}

const OpenPlatformReward& OpenPlatformReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AttackHarborConfig_2eproto();
  return *default_instance_;
}

OpenPlatformReward* OpenPlatformReward::default_instance_ = NULL;

OpenPlatformReward* OpenPlatformReward::New() const {
  return new OpenPlatformReward;
}

void OpenPlatformReward::Clear() {
  startday_ = 0u;
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenPlatformReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AttackHarborConfig.OpenPlatformReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startday = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startday_)));
          set_has_startday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .RewardConfig.Reward reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AttackHarborConfig.OpenPlatformReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AttackHarborConfig.OpenPlatformReward)
  return false;
#undef DO_
}

void OpenPlatformReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AttackHarborConfig.OpenPlatformReward)
  // required uint32 startday = 1;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startday(), output);
  }

  // repeated .RewardConfig.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AttackHarborConfig.OpenPlatformReward)
}

::google::protobuf::uint8* OpenPlatformReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AttackHarborConfig.OpenPlatformReward)
  // required uint32 startday = 1;
  if (has_startday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startday(), target);
  }

  // repeated .RewardConfig.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AttackHarborConfig.OpenPlatformReward)
  return target;
}

int OpenPlatformReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 startday = 1;
    if (has_startday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startday());
    }

  }
  // repeated .RewardConfig.Reward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenPlatformReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenPlatformReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenPlatformReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenPlatformReward::MergeFrom(const OpenPlatformReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startday()) {
      set_startday(from.startday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenPlatformReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPlatformReward::CopyFrom(const OpenPlatformReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPlatformReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void OpenPlatformReward::Swap(OpenPlatformReward* other) {
  if (other != this) {
    std::swap(startday_, other->startday_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenPlatformReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenPlatformReward_descriptor_;
  metadata.reflection = OpenPlatformReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryRankReward::kRankFieldNumber;
const int CountryRankReward::kOpenPlatformRewardFieldNumber;
#endif  // !_MSC_VER

CountryRankReward::CountryRankReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AttackHarborConfig.CountryRankReward)
}

void CountryRankReward::InitAsDefaultInstance() {
}

CountryRankReward::CountryRankReward(const CountryRankReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AttackHarborConfig.CountryRankReward)
}

void CountryRankReward::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryRankReward::~CountryRankReward() {
  // @@protoc_insertion_point(destructor:AttackHarborConfig.CountryRankReward)
  SharedDtor();
}

void CountryRankReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryRankReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryRankReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryRankReward_descriptor_;
}

const CountryRankReward& CountryRankReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AttackHarborConfig_2eproto();
  return *default_instance_;
}

CountryRankReward* CountryRankReward::default_instance_ = NULL;

CountryRankReward* CountryRankReward::New() const {
  return new CountryRankReward;
}

void CountryRankReward::Clear() {
  rank_ = 0u;
  open_platform_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryRankReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AttackHarborConfig.CountryRankReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_platform_reward;
        break;
      }

      // repeated .AttackHarborConfig.OpenPlatformReward open_platform_reward = 2;
      case 2: {
        if (tag == 18) {
         parse_open_platform_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_platform_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_platform_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AttackHarborConfig.CountryRankReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AttackHarborConfig.CountryRankReward)
  return false;
#undef DO_
}

void CountryRankReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AttackHarborConfig.CountryRankReward)
  // required uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // repeated .AttackHarborConfig.OpenPlatformReward open_platform_reward = 2;
  for (int i = 0; i < this->open_platform_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->open_platform_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AttackHarborConfig.CountryRankReward)
}

::google::protobuf::uint8* CountryRankReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AttackHarborConfig.CountryRankReward)
  // required uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // repeated .AttackHarborConfig.OpenPlatformReward open_platform_reward = 2;
  for (int i = 0; i < this->open_platform_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->open_platform_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AttackHarborConfig.CountryRankReward)
  return target;
}

int CountryRankReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  // repeated .AttackHarborConfig.OpenPlatformReward open_platform_reward = 2;
  total_size += 1 * this->open_platform_reward_size();
  for (int i = 0; i < this->open_platform_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->open_platform_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryRankReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryRankReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryRankReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryRankReward::MergeFrom(const CountryRankReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_platform_reward_.MergeFrom(from.open_platform_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryRankReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryRankReward::CopyFrom(const CountryRankReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryRankReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->open_platform_reward())) return false;
  return true;
}

void CountryRankReward::Swap(CountryRankReward* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    open_platform_reward_.Swap(&other->open_platform_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryRankReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryRankReward_descriptor_;
  metadata.reflection = CountryRankReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttackPearlHarbor::kNpcrefreshFieldNumber;
const int AttackPearlHarbor::kRefreshFrequencyFieldNumber;
const int AttackPearlHarbor::kIndividualRewardFieldNumber;
const int AttackPearlHarbor::kCountryRewardFieldNumber;
#endif  // !_MSC_VER

AttackPearlHarbor::AttackPearlHarbor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AttackHarborConfig.AttackPearlHarbor)
}

void AttackPearlHarbor::InitAsDefaultInstance() {
}

AttackPearlHarbor::AttackPearlHarbor(const AttackPearlHarbor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AttackHarborConfig.AttackPearlHarbor)
}

void AttackPearlHarbor::SharedCtor() {
  _cached_size_ = 0;
  refresh_frequency_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttackPearlHarbor::~AttackPearlHarbor() {
  // @@protoc_insertion_point(destructor:AttackHarborConfig.AttackPearlHarbor)
  SharedDtor();
}

void AttackPearlHarbor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttackPearlHarbor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttackPearlHarbor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttackPearlHarbor_descriptor_;
}

const AttackPearlHarbor& AttackPearlHarbor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AttackHarborConfig_2eproto();
  return *default_instance_;
}

AttackPearlHarbor* AttackPearlHarbor::default_instance_ = NULL;

AttackPearlHarbor* AttackPearlHarbor::New() const {
  return new AttackPearlHarbor;
}

void AttackPearlHarbor::Clear() {
  refresh_frequency_ = 0u;
  npcrefresh_.Clear();
  individual_reward_.Clear();
  country_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttackPearlHarbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AttackHarborConfig.AttackPearlHarbor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AttackHarborConfig.NPCRefresh npcrefresh = 1;
      case 1: {
        if (tag == 10) {
         parse_npcrefresh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcrefresh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_npcrefresh;
        if (input->ExpectTag(16)) goto parse_refresh_frequency;
        break;
      }

      // required uint32 refresh_frequency = 2;
      case 2: {
        if (tag == 16) {
         parse_refresh_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_frequency_)));
          set_has_refresh_frequency();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_individual_reward;
        break;
      }

      // repeated uint32 individual_reward = 3;
      case 3: {
        if (tag == 24) {
         parse_individual_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_individual_reward())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_individual_reward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_individual_reward;
        if (input->ExpectTag(34)) goto parse_country_reward;
        break;
      }

      // repeated .AttackHarborConfig.CountryRankReward country_reward = 4;
      case 4: {
        if (tag == 34) {
         parse_country_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_country_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_country_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AttackHarborConfig.AttackPearlHarbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AttackHarborConfig.AttackPearlHarbor)
  return false;
#undef DO_
}

void AttackPearlHarbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AttackHarborConfig.AttackPearlHarbor)
  // repeated .AttackHarborConfig.NPCRefresh npcrefresh = 1;
  for (int i = 0; i < this->npcrefresh_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->npcrefresh(i), output);
  }

  // required uint32 refresh_frequency = 2;
  if (has_refresh_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refresh_frequency(), output);
  }

  // repeated uint32 individual_reward = 3;
  for (int i = 0; i < this->individual_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->individual_reward(i), output);
  }

  // repeated .AttackHarborConfig.CountryRankReward country_reward = 4;
  for (int i = 0; i < this->country_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->country_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AttackHarborConfig.AttackPearlHarbor)
}

::google::protobuf::uint8* AttackPearlHarbor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AttackHarborConfig.AttackPearlHarbor)
  // repeated .AttackHarborConfig.NPCRefresh npcrefresh = 1;
  for (int i = 0; i < this->npcrefresh_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->npcrefresh(i), target);
  }

  // required uint32 refresh_frequency = 2;
  if (has_refresh_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refresh_frequency(), target);
  }

  // repeated uint32 individual_reward = 3;
  for (int i = 0; i < this->individual_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->individual_reward(i), target);
  }

  // repeated .AttackHarborConfig.CountryRankReward country_reward = 4;
  for (int i = 0; i < this->country_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->country_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AttackHarborConfig.AttackPearlHarbor)
  return target;
}

int AttackPearlHarbor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 refresh_frequency = 2;
    if (has_refresh_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_frequency());
    }

  }
  // repeated .AttackHarborConfig.NPCRefresh npcrefresh = 1;
  total_size += 1 * this->npcrefresh_size();
  for (int i = 0; i < this->npcrefresh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcrefresh(i));
  }

  // repeated uint32 individual_reward = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->individual_reward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->individual_reward(i));
    }
    total_size += 1 * this->individual_reward_size() + data_size;
  }

  // repeated .AttackHarborConfig.CountryRankReward country_reward = 4;
  total_size += 1 * this->country_reward_size();
  for (int i = 0; i < this->country_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->country_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttackPearlHarbor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttackPearlHarbor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttackPearlHarbor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttackPearlHarbor::MergeFrom(const AttackPearlHarbor& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcrefresh_.MergeFrom(from.npcrefresh_);
  individual_reward_.MergeFrom(from.individual_reward_);
  country_reward_.MergeFrom(from.country_reward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_refresh_frequency()) {
      set_refresh_frequency(from.refresh_frequency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttackPearlHarbor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttackPearlHarbor::CopyFrom(const AttackPearlHarbor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttackPearlHarbor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->npcrefresh())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->country_reward())) return false;
  return true;
}

void AttackPearlHarbor::Swap(AttackPearlHarbor* other) {
  if (other != this) {
    npcrefresh_.Swap(&other->npcrefresh_);
    std::swap(refresh_frequency_, other->refresh_frequency_);
    individual_reward_.Swap(&other->individual_reward_);
    country_reward_.Swap(&other->country_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttackPearlHarbor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttackPearlHarbor_descriptor_;
  metadata.reflection = AttackPearlHarbor_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AttackHarborConfig

// @@protoc_insertion_point(global_scope)
