// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeaponConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WeaponConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WeaponConfig {

namespace {

const ::google::protobuf::Descriptor* WeaponLvL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponLvL_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Weapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Weapon_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WeaponConfig_2eproto() {
  protobuf_AddDesc_WeaponConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WeaponConfig.proto");
  GOOGLE_CHECK(file != NULL);
  WeaponLvL_descriptor_ = file->message_type(0);
  static const int WeaponLvL_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponLvL, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponLvL, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponLvL, cost_iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponLvL, prob_),
  };
  WeaponLvL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponLvL_descriptor_,
      WeaponLvL::default_instance_,
      WeaponLvL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponLvL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponLvL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponLvL));
  WeaponItem_descriptor_ = file->message_type(1);
  static const int WeaponItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, unlock_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, pass_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, unlock_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, unlock_wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, lvls_),
  };
  WeaponItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponItem_descriptor_,
      WeaponItem::default_instance_,
      WeaponItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponItem));
  Weapon_descriptor_ = file->message_type(2);
  static const int Weapon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, weapons_),
  };
  Weapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Weapon_descriptor_,
      Weapon::default_instance_,
      Weapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Weapon));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WeaponConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponLvL_descriptor_, &WeaponLvL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponItem_descriptor_, &WeaponItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Weapon_descriptor_, &Weapon::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WeaponConfig_2eproto() {
  delete WeaponLvL::default_instance_;
  delete WeaponLvL_reflection_;
  delete WeaponItem::default_instance_;
  delete WeaponItem_reflection_;
  delete Weapon::default_instance_;
  delete Weapon_reflection_;
}

void protobuf_AddDesc_WeaponConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022WeaponConfig.proto\022\014WeaponConfig\"H\n\tWe"
    "aponLvL\022\013\n\003lvl\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\022\021\n\tc"
    "ost_iron\030\003 \002(\r\022\014\n\004prob\030\004 \003(\r\"\220\001\n\nWeaponI"
    "tem\022\n\n\002id\030\001 \002(\r\022\023\n\013unlock_pass\030\002 \002(\r\022\020\n\010"
    "pass_cnt\030\003 \002(\r\022\023\n\013unlock_coin\030\004 \002(\r\022\023\n\013u"
    "nlock_wood\030\005 \002(\r\022%\n\004lvls\030\006 \003(\0132\027.WeaponC"
    "onfig.WeaponLvL\"3\n\006Weapon\022)\n\007weapons\030\001 \003"
    "(\0132\030.WeaponConfig.WeaponItem", 308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WeaponConfig.proto", &protobuf_RegisterTypes);
  WeaponLvL::default_instance_ = new WeaponLvL();
  WeaponItem::default_instance_ = new WeaponItem();
  Weapon::default_instance_ = new Weapon();
  WeaponLvL::default_instance_->InitAsDefaultInstance();
  WeaponItem::default_instance_->InitAsDefaultInstance();
  Weapon::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WeaponConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WeaponConfig_2eproto {
  StaticDescriptorInitializer_WeaponConfig_2eproto() {
    protobuf_AddDesc_WeaponConfig_2eproto();
  }
} static_descriptor_initializer_WeaponConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WeaponLvL::kLvlFieldNumber;
const int WeaponLvL::kValueFieldNumber;
const int WeaponLvL::kCostIronFieldNumber;
const int WeaponLvL::kProbFieldNumber;
#endif  // !_MSC_VER

WeaponLvL::WeaponLvL()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WeaponConfig.WeaponLvL)
}

void WeaponLvL::InitAsDefaultInstance() {
}

WeaponLvL::WeaponLvL(const WeaponLvL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WeaponConfig.WeaponLvL)
}

void WeaponLvL::SharedCtor() {
  _cached_size_ = 0;
  lvl_ = 0u;
  value_ = 0u;
  cost_iron_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponLvL::~WeaponLvL() {
  // @@protoc_insertion_point(destructor:WeaponConfig.WeaponLvL)
  SharedDtor();
}

void WeaponLvL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeaponLvL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponLvL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponLvL_descriptor_;
}

const WeaponLvL& WeaponLvL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponConfig_2eproto();
  return *default_instance_;
}

WeaponLvL* WeaponLvL::default_instance_ = NULL;

WeaponLvL* WeaponLvL::New() const {
  return new WeaponLvL;
}

void WeaponLvL::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeaponLvL*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(lvl_, value_);
    cost_iron_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  prob_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponLvL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WeaponConfig.WeaponLvL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 lvl = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cost_iron;
        break;
      }

      // required uint32 cost_iron = 3;
      case 3: {
        if (tag == 24) {
         parse_cost_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_iron_)));
          set_has_cost_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prob;
        break;
      }

      // repeated uint32 prob = 4;
      case 4: {
        if (tag == 32) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_prob())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_prob())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prob;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WeaponConfig.WeaponLvL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WeaponConfig.WeaponLvL)
  return false;
#undef DO_
}

void WeaponLvL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WeaponConfig.WeaponLvL)
  // required uint32 lvl = 1;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lvl(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // required uint32 cost_iron = 3;
  if (has_cost_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_iron(), output);
  }

  // repeated uint32 prob = 4;
  for (int i = 0; i < this->prob_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->prob(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WeaponConfig.WeaponLvL)
}

::google::protobuf::uint8* WeaponLvL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WeaponConfig.WeaponLvL)
  // required uint32 lvl = 1;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lvl(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // required uint32 cost_iron = 3;
  if (has_cost_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_iron(), target);
  }

  // repeated uint32 prob = 4;
  for (int i = 0; i < this->prob_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->prob(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WeaponConfig.WeaponLvL)
  return target;
}

int WeaponLvL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 lvl = 1;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 cost_iron = 3;
    if (has_cost_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_iron());
    }

  }
  // repeated uint32 prob = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->prob_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->prob(i));
    }
    total_size += 1 * this->prob_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponLvL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponLvL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponLvL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponLvL::MergeFrom(const WeaponLvL& from) {
  GOOGLE_CHECK_NE(&from, this);
  prob_.MergeFrom(from.prob_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_cost_iron()) {
      set_cost_iron(from.cost_iron());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponLvL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponLvL::CopyFrom(const WeaponLvL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponLvL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WeaponLvL::Swap(WeaponLvL* other) {
  if (other != this) {
    std::swap(lvl_, other->lvl_);
    std::swap(value_, other->value_);
    std::swap(cost_iron_, other->cost_iron_);
    prob_.Swap(&other->prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponLvL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponLvL_descriptor_;
  metadata.reflection = WeaponLvL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponItem::kIdFieldNumber;
const int WeaponItem::kUnlockPassFieldNumber;
const int WeaponItem::kPassCntFieldNumber;
const int WeaponItem::kUnlockCoinFieldNumber;
const int WeaponItem::kUnlockWoodFieldNumber;
const int WeaponItem::kLvlsFieldNumber;
#endif  // !_MSC_VER

WeaponItem::WeaponItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WeaponConfig.WeaponItem)
}

void WeaponItem::InitAsDefaultInstance() {
}

WeaponItem::WeaponItem(const WeaponItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WeaponConfig.WeaponItem)
}

void WeaponItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  unlock_pass_ = 0u;
  pass_cnt_ = 0u;
  unlock_coin_ = 0u;
  unlock_wood_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponItem::~WeaponItem() {
  // @@protoc_insertion_point(destructor:WeaponConfig.WeaponItem)
  SharedDtor();
}

void WeaponItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeaponItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponItem_descriptor_;
}

const WeaponItem& WeaponItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponConfig_2eproto();
  return *default_instance_;
}

WeaponItem* WeaponItem::default_instance_ = NULL;

WeaponItem* WeaponItem::New() const {
  return new WeaponItem;
}

void WeaponItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeaponItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, unlock_coin_);
    unlock_wood_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  lvls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WeaponConfig.WeaponItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unlock_pass;
        break;
      }

      // required uint32 unlock_pass = 2;
      case 2: {
        if (tag == 16) {
         parse_unlock_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_pass_)));
          set_has_unlock_pass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pass_cnt;
        break;
      }

      // required uint32 pass_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_pass_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_cnt_)));
          set_has_pass_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlock_coin;
        break;
      }

      // required uint32 unlock_coin = 4;
      case 4: {
        if (tag == 32) {
         parse_unlock_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_coin_)));
          set_has_unlock_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_unlock_wood;
        break;
      }

      // required uint32 unlock_wood = 5;
      case 5: {
        if (tag == 40) {
         parse_unlock_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_wood_)));
          set_has_unlock_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lvls;
        break;
      }

      // repeated .WeaponConfig.WeaponLvL lvls = 6;
      case 6: {
        if (tag == 50) {
         parse_lvls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lvls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lvls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WeaponConfig.WeaponItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WeaponConfig.WeaponItem)
  return false;
#undef DO_
}

void WeaponItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WeaponConfig.WeaponItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 unlock_pass = 2;
  if (has_unlock_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unlock_pass(), output);
  }

  // required uint32 pass_cnt = 3;
  if (has_pass_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pass_cnt(), output);
  }

  // required uint32 unlock_coin = 4;
  if (has_unlock_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unlock_coin(), output);
  }

  // required uint32 unlock_wood = 5;
  if (has_unlock_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unlock_wood(), output);
  }

  // repeated .WeaponConfig.WeaponLvL lvls = 6;
  for (int i = 0; i < this->lvls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lvls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WeaponConfig.WeaponItem)
}

::google::protobuf::uint8* WeaponItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WeaponConfig.WeaponItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 unlock_pass = 2;
  if (has_unlock_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unlock_pass(), target);
  }

  // required uint32 pass_cnt = 3;
  if (has_pass_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pass_cnt(), target);
  }

  // required uint32 unlock_coin = 4;
  if (has_unlock_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unlock_coin(), target);
  }

  // required uint32 unlock_wood = 5;
  if (has_unlock_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->unlock_wood(), target);
  }

  // repeated .WeaponConfig.WeaponLvL lvls = 6;
  for (int i = 0; i < this->lvls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lvls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WeaponConfig.WeaponItem)
  return target;
}

int WeaponItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 unlock_pass = 2;
    if (has_unlock_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_pass());
    }

    // required uint32 pass_cnt = 3;
    if (has_pass_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_cnt());
    }

    // required uint32 unlock_coin = 4;
    if (has_unlock_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_coin());
    }

    // required uint32 unlock_wood = 5;
    if (has_unlock_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock_wood());
    }

  }
  // repeated .WeaponConfig.WeaponLvL lvls = 6;
  total_size += 1 * this->lvls_size();
  for (int i = 0; i < this->lvls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lvls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponItem::MergeFrom(const WeaponItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  lvls_.MergeFrom(from.lvls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_unlock_pass()) {
      set_unlock_pass(from.unlock_pass());
    }
    if (from.has_pass_cnt()) {
      set_pass_cnt(from.pass_cnt());
    }
    if (from.has_unlock_coin()) {
      set_unlock_coin(from.unlock_coin());
    }
    if (from.has_unlock_wood()) {
      set_unlock_wood(from.unlock_wood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponItem::CopyFrom(const WeaponItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->lvls())) return false;
  return true;
}

void WeaponItem::Swap(WeaponItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(unlock_pass_, other->unlock_pass_);
    std::swap(pass_cnt_, other->pass_cnt_);
    std::swap(unlock_coin_, other->unlock_coin_);
    std::swap(unlock_wood_, other->unlock_wood_);
    lvls_.Swap(&other->lvls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponItem_descriptor_;
  metadata.reflection = WeaponItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Weapon::kWeaponsFieldNumber;
#endif  // !_MSC_VER

Weapon::Weapon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WeaponConfig.Weapon)
}

void Weapon::InitAsDefaultInstance() {
}

Weapon::Weapon(const Weapon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WeaponConfig.Weapon)
}

void Weapon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Weapon::~Weapon() {
  // @@protoc_insertion_point(destructor:WeaponConfig.Weapon)
  SharedDtor();
}

void Weapon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Weapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Weapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Weapon_descriptor_;
}

const Weapon& Weapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponConfig_2eproto();
  return *default_instance_;
}

Weapon* Weapon::default_instance_ = NULL;

Weapon* Weapon::New() const {
  return new Weapon;
}

void Weapon::Clear() {
  weapons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Weapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WeaponConfig.Weapon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WeaponConfig.WeaponItem weapons = 1;
      case 1: {
        if (tag == 10) {
         parse_weapons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_weapons;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WeaponConfig.Weapon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WeaponConfig.Weapon)
  return false;
#undef DO_
}

void Weapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WeaponConfig.Weapon)
  // repeated .WeaponConfig.WeaponItem weapons = 1;
  for (int i = 0; i < this->weapons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weapons(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WeaponConfig.Weapon)
}

::google::protobuf::uint8* Weapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WeaponConfig.Weapon)
  // repeated .WeaponConfig.WeaponItem weapons = 1;
  for (int i = 0; i < this->weapons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weapons(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WeaponConfig.Weapon)
  return target;
}

int Weapon::ByteSize() const {
  int total_size = 0;

  // repeated .WeaponConfig.WeaponItem weapons = 1;
  total_size += 1 * this->weapons_size();
  for (int i = 0; i < this->weapons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weapons(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Weapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Weapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Weapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Weapon::MergeFrom(const Weapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  weapons_.MergeFrom(from.weapons_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Weapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weapon::CopyFrom(const Weapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weapon::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->weapons())) return false;
  return true;
}

void Weapon::Swap(Weapon* other) {
  if (other != this) {
    weapons_.Swap(&other->weapons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Weapon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Weapon_descriptor_;
  metadata.reflection = Weapon_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace WeaponConfig

// @@protoc_insertion_point(global_scope)
