// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KillRankConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KillRankConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KillRankConfig {

namespace {

const ::google::protobuf::Descriptor* KillRankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillRankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillRank_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KillRankConfig_2eproto() {
  protobuf_AddDesc_KillRankConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KillRankConfig.proto");
  GOOGLE_CHECK(file != NULL);
  KillRankItem_descriptor_ = file->message_type(0);
  static const int KillRankItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRankItem, exp_killrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRankItem, exp_coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRankItem, reward_),
  };
  KillRankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillRankItem_descriptor_,
      KillRankItem::default_instance_,
      KillRankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillRankItem));
  KillRank_descriptor_ = file->message_type(1);
  static const int KillRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRank, killrank_),
  };
  KillRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillRank_descriptor_,
      KillRank::default_instance_,
      KillRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillRank));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KillRankConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillRankItem_descriptor_, &KillRankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillRank_descriptor_, &KillRank::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KillRankConfig_2eproto() {
  delete KillRankItem::default_instance_;
  delete KillRankItem_reflection_;
  delete KillRank::default_instance_;
  delete KillRank_reflection_;
}

void protobuf_AddDesc_KillRankConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024KillRankConfig.proto\022\016KillRankConfig\032\022"
    "RewardConfig.proto\"d\n\014KillRankItem\022\025\n\rex"
    "p_killrange\030\001 \003(\r\022\027\n\017exp_coefficient\030\002 \003"
    "(\002\022$\n\006reward\030\003 \003(\0132\024.RewardConfig.Reward"
    "\":\n\010KillRank\022.\n\010killrank\030\001 \002(\0132\034.KillRan"
    "kConfig.KillRankItem", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KillRankConfig.proto", &protobuf_RegisterTypes);
  KillRankItem::default_instance_ = new KillRankItem();
  KillRank::default_instance_ = new KillRank();
  KillRankItem::default_instance_->InitAsDefaultInstance();
  KillRank::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KillRankConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KillRankConfig_2eproto {
  StaticDescriptorInitializer_KillRankConfig_2eproto() {
    protobuf_AddDesc_KillRankConfig_2eproto();
  }
} static_descriptor_initializer_KillRankConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KillRankItem::kExpKillrangeFieldNumber;
const int KillRankItem::kExpCoefficientFieldNumber;
const int KillRankItem::kRewardFieldNumber;
#endif  // !_MSC_VER

KillRankItem::KillRankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KillRankConfig.KillRankItem)
}

void KillRankItem::InitAsDefaultInstance() {
}

KillRankItem::KillRankItem(const KillRankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KillRankConfig.KillRankItem)
}

void KillRankItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillRankItem::~KillRankItem() {
  // @@protoc_insertion_point(destructor:KillRankConfig.KillRankItem)
  SharedDtor();
}

void KillRankItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillRankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillRankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillRankItem_descriptor_;
}

const KillRankItem& KillRankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KillRankConfig_2eproto();
  return *default_instance_;
}

KillRankItem* KillRankItem::default_instance_ = NULL;

KillRankItem* KillRankItem::New() const {
  return new KillRankItem;
}

void KillRankItem::Clear() {
  exp_killrange_.Clear();
  exp_coefficient_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillRankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KillRankConfig.KillRankItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 exp_killrange = 1;
      case 1: {
        if (tag == 8) {
         parse_exp_killrange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_exp_killrange())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exp_killrange())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_exp_killrange;
        if (input->ExpectTag(21)) goto parse_exp_coefficient;
        break;
      }

      // repeated float exp_coefficient = 2;
      case 2: {
        if (tag == 21) {
         parse_exp_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_exp_coefficient())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_exp_coefficient())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_exp_coefficient;
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // repeated .RewardConfig.Reward reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KillRankConfig.KillRankItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KillRankConfig.KillRankItem)
  return false;
#undef DO_
}

void KillRankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KillRankConfig.KillRankItem)
  // repeated uint32 exp_killrange = 1;
  for (int i = 0; i < this->exp_killrange_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->exp_killrange(i), output);
  }

  // repeated float exp_coefficient = 2;
  for (int i = 0; i < this->exp_coefficient_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->exp_coefficient(i), output);
  }

  // repeated .RewardConfig.Reward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KillRankConfig.KillRankItem)
}

::google::protobuf::uint8* KillRankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KillRankConfig.KillRankItem)
  // repeated uint32 exp_killrange = 1;
  for (int i = 0; i < this->exp_killrange_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->exp_killrange(i), target);
  }

  // repeated float exp_coefficient = 2;
  for (int i = 0; i < this->exp_coefficient_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->exp_coefficient(i), target);
  }

  // repeated .RewardConfig.Reward reward = 3;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KillRankConfig.KillRankItem)
  return target;
}

int KillRankItem::ByteSize() const {
  int total_size = 0;

  // repeated uint32 exp_killrange = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_killrange_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exp_killrange(i));
    }
    total_size += 1 * this->exp_killrange_size() + data_size;
  }

  // repeated float exp_coefficient = 2;
  {
    int data_size = 0;
    data_size = 4 * this->exp_coefficient_size();
    total_size += 1 * this->exp_coefficient_size() + data_size;
  }

  // repeated .RewardConfig.Reward reward = 3;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillRankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillRankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillRankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillRankItem::MergeFrom(const KillRankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  exp_killrange_.MergeFrom(from.exp_killrange_);
  exp_coefficient_.MergeFrom(from.exp_coefficient_);
  reward_.MergeFrom(from.reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillRankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillRankItem::CopyFrom(const KillRankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillRankItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void KillRankItem::Swap(KillRankItem* other) {
  if (other != this) {
    exp_killrange_.Swap(&other->exp_killrange_);
    exp_coefficient_.Swap(&other->exp_coefficient_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillRankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillRankItem_descriptor_;
  metadata.reflection = KillRankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillRank::kKillrankFieldNumber;
#endif  // !_MSC_VER

KillRank::KillRank()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KillRankConfig.KillRank)
}

void KillRank::InitAsDefaultInstance() {
  killrank_ = const_cast< ::KillRankConfig::KillRankItem*>(&::KillRankConfig::KillRankItem::default_instance());
}

KillRank::KillRank(const KillRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KillRankConfig.KillRank)
}

void KillRank::SharedCtor() {
  _cached_size_ = 0;
  killrank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillRank::~KillRank() {
  // @@protoc_insertion_point(destructor:KillRankConfig.KillRank)
  SharedDtor();
}

void KillRank::SharedDtor() {
  if (this != default_instance_) {
    delete killrank_;
  }
}

void KillRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillRank_descriptor_;
}

const KillRank& KillRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KillRankConfig_2eproto();
  return *default_instance_;
}

KillRank* KillRank::default_instance_ = NULL;

KillRank* KillRank::New() const {
  return new KillRank;
}

void KillRank::Clear() {
  if (has_killrank()) {
    if (killrank_ != NULL) killrank_->::KillRankConfig::KillRankItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KillRankConfig.KillRank)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KillRankConfig.KillRankItem killrank = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_killrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KillRankConfig.KillRank)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KillRankConfig.KillRank)
  return false;
#undef DO_
}

void KillRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KillRankConfig.KillRank)
  // required .KillRankConfig.KillRankItem killrank = 1;
  if (has_killrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->killrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KillRankConfig.KillRank)
}

::google::protobuf::uint8* KillRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KillRankConfig.KillRank)
  // required .KillRankConfig.KillRankItem killrank = 1;
  if (has_killrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->killrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KillRankConfig.KillRank)
  return target;
}

int KillRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KillRankConfig.KillRankItem killrank = 1;
    if (has_killrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->killrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillRank::MergeFrom(const KillRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killrank()) {
      mutable_killrank()->::KillRankConfig::KillRankItem::MergeFrom(from.killrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillRank::CopyFrom(const KillRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_killrank()) {
    if (!this->killrank().IsInitialized()) return false;
  }
  return true;
}

void KillRank::Swap(KillRank* other) {
  if (other != this) {
    std::swap(killrank_, other->killrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillRank_descriptor_;
  metadata.reflection = KillRank_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KillRankConfig

// @@protoc_insertion_point(global_scope)
