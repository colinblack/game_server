// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VipGiftConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VipGiftConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace VipGiftConfig {

namespace {

const ::google::protobuf::Descriptor* EquipReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinalReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinalReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelDailyGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelDailyGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* YearDailyGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YearDailyGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewerGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewerGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivilegeGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivilegeGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* YellowVIPGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YellowVIPGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivilegeZoneGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivilegeZoneGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* QQZoneGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QQZoneGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* VIPGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VIPGift_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VipGiftConfig_2eproto() {
  protobuf_AddDesc_VipGiftConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VipGiftConfig.proto");
  GOOGLE_CHECK(file != NULL);
  EquipReward_descriptor_ = file->message_type(0);
  static const int EquipReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipReward, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipReward, count_),
  };
  EquipReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipReward_descriptor_,
      EquipReward::default_instance_,
      EquipReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipReward));
  FinalReward_descriptor_ = file->message_type(1);
  static const int FinalReward_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, hammer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, exp_),
  };
  FinalReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinalReward_descriptor_,
      FinalReward::default_instance_,
      FinalReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinalReward));
  LevelDailyGift_descriptor_ = file->message_type(2);
  static const int LevelDailyGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelDailyGift, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelDailyGift, reward_),
  };
  LevelDailyGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelDailyGift_descriptor_,
      LevelDailyGift::default_instance_,
      LevelDailyGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelDailyGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelDailyGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelDailyGift));
  YearDailyGift_descriptor_ = file->message_type(3);
  static const int YearDailyGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YearDailyGift, reward_),
  };
  YearDailyGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YearDailyGift_descriptor_,
      YearDailyGift::default_instance_,
      YearDailyGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YearDailyGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YearDailyGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YearDailyGift));
  NewerGift_descriptor_ = file->message_type(4);
  static const int NewerGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewerGift, reward_),
  };
  NewerGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewerGift_descriptor_,
      NewerGift::default_instance_,
      NewerGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewerGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewerGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewerGift));
  PrivilegeGift_descriptor_ = file->message_type(5);
  static const int PrivilegeGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeGift, leveldaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeGift, yeardaily_),
  };
  PrivilegeGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivilegeGift_descriptor_,
      PrivilegeGift::default_instance_,
      PrivilegeGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivilegeGift));
  UpgradeGift_descriptor_ = file->message_type(6);
  static const int UpgradeGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGift, userlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGift, reward_),
  };
  UpgradeGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeGift_descriptor_,
      UpgradeGift::default_instance_,
      UpgradeGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeGift));
  YellowVIPGift_descriptor_ = file->message_type(7);
  static const int YellowVIPGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YellowVIPGift, newer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YellowVIPGift, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YellowVIPGift, upgrade_),
  };
  YellowVIPGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YellowVIPGift_descriptor_,
      YellowVIPGift::default_instance_,
      YellowVIPGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YellowVIPGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YellowVIPGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YellowVIPGift));
  PrivilegeZoneGift_descriptor_ = file->message_type(8);
  static const int PrivilegeZoneGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeZoneGift, daily_),
  };
  PrivilegeZoneGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivilegeZoneGift_descriptor_,
      PrivilegeZoneGift::default_instance_,
      PrivilegeZoneGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeZoneGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivilegeZoneGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivilegeZoneGift));
  QQZoneGift_descriptor_ = file->message_type(9);
  static const int QQZoneGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQZoneGift, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQZoneGift, upgrade_),
  };
  QQZoneGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QQZoneGift_descriptor_,
      QQZoneGift::default_instance_,
      QQZoneGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQZoneGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQZoneGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QQZoneGift));
  VIPGift_descriptor_ = file->message_type(10);
  static const int VIPGift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPGift, yellowvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPGift, qqzone_),
  };
  VIPGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VIPGift_descriptor_,
      VIPGift::default_instance_,
      VIPGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VIPGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VIPGift));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VipGiftConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipReward_descriptor_, &EquipReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinalReward_descriptor_, &FinalReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelDailyGift_descriptor_, &LevelDailyGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YearDailyGift_descriptor_, &YearDailyGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewerGift_descriptor_, &NewerGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivilegeGift_descriptor_, &PrivilegeGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeGift_descriptor_, &UpgradeGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YellowVIPGift_descriptor_, &YellowVIPGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivilegeZoneGift_descriptor_, &PrivilegeZoneGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QQZoneGift_descriptor_, &QQZoneGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VIPGift_descriptor_, &VIPGift::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VipGiftConfig_2eproto() {
  delete EquipReward::default_instance_;
  delete EquipReward_reflection_;
  delete FinalReward::default_instance_;
  delete FinalReward_reflection_;
  delete LevelDailyGift::default_instance_;
  delete LevelDailyGift_reflection_;
  delete YearDailyGift::default_instance_;
  delete YearDailyGift_reflection_;
  delete NewerGift::default_instance_;
  delete NewerGift_reflection_;
  delete PrivilegeGift::default_instance_;
  delete PrivilegeGift_reflection_;
  delete UpgradeGift::default_instance_;
  delete UpgradeGift_reflection_;
  delete YellowVIPGift::default_instance_;
  delete YellowVIPGift_reflection_;
  delete PrivilegeZoneGift::default_instance_;
  delete PrivilegeZoneGift_reflection_;
  delete QQZoneGift::default_instance_;
  delete QQZoneGift_reflection_;
  delete VIPGift::default_instance_;
  delete VIPGift_reflection_;
}

void protobuf_AddDesc_VipGiftConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023VipGiftConfig.proto\022\rVipGiftConfig\"*\n\013"
    "EquipReward\022\014\n\004eqid\030\001 \002(\r\022\r\n\005count\030\002 \002(\r"
    "\"\235\001\n\013FinalReward\022*\n\006equips\030\001 \003(\0132\032.VipGi"
    "ftConfig.EquipReward\022\014\n\004coin\030\002 \001(\r\022\014\n\004wo"
    "od\030\003 \001(\r\022\014\n\004food\030\004 \001(\r\022\014\n\004iron\030\005 \001(\r\022\016\n\006"
    "hammer\030\006 \001(\r\022\r\n\005order\030\007 \001(\r\022\013\n\003exp\030\010 \001(\r"
    "\"K\n\016LevelDailyGift\022\r\n\005level\030\001 \002(\r\022*\n\006rew"
    "ard\030\002 \002(\0132\032.VipGiftConfig.FinalReward\";\n"
    "\rYearDailyGift\022*\n\006reward\030\001 \002(\0132\032.VipGift"
    "Config.FinalReward\"7\n\tNewerGift\022*\n\006rewar"
    "d\030\001 \002(\0132\032.VipGiftConfig.FinalReward\"s\n\rP"
    "rivilegeGift\0221\n\nleveldaily\030\001 \003(\0132\035.VipGi"
    "ftConfig.LevelDailyGift\022/\n\tyeardaily\030\002 \002"
    "(\0132\034.VipGiftConfig.YearDailyGift\"L\n\013Upgr"
    "adeGift\022\021\n\tuserlevel\030\001 \002(\r\022*\n\006reward\030\002 \002"
    "(\0132\032.VipGiftConfig.FinalReward\"\226\001\n\rYello"
    "wVIPGift\022\'\n\005newer\030\001 \002(\0132\030.VipGiftConfig."
    "NewerGift\022/\n\tprivilege\030\002 \002(\0132\034.VipGiftCo"
    "nfig.PrivilegeGift\022+\n\007upgrade\030\003 \003(\0132\032.Vi"
    "pGiftConfig.UpgradeGift\"@\n\021PrivilegeZone"
    "Gift\022+\n\005daily\030\001 \002(\0132\034.VipGiftConfig.Year"
    "DailyGift\"n\n\nQQZoneGift\0223\n\tprivilege\030\001 \002"
    "(\0132 .VipGiftConfig.PrivilegeZoneGift\022+\n\007"
    "upgrade\030\002 \003(\0132\032.VipGiftConfig.UpgradeGif"
    "t\"e\n\007VIPGift\022/\n\tyellowvip\030\001 \002(\0132\034.VipGif"
    "tConfig.YellowVIPGift\022)\n\006qqzone\030\002 \002(\0132\031."
    "VipGiftConfig.QQZoneGift", 1064);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VipGiftConfig.proto", &protobuf_RegisterTypes);
  EquipReward::default_instance_ = new EquipReward();
  FinalReward::default_instance_ = new FinalReward();
  LevelDailyGift::default_instance_ = new LevelDailyGift();
  YearDailyGift::default_instance_ = new YearDailyGift();
  NewerGift::default_instance_ = new NewerGift();
  PrivilegeGift::default_instance_ = new PrivilegeGift();
  UpgradeGift::default_instance_ = new UpgradeGift();
  YellowVIPGift::default_instance_ = new YellowVIPGift();
  PrivilegeZoneGift::default_instance_ = new PrivilegeZoneGift();
  QQZoneGift::default_instance_ = new QQZoneGift();
  VIPGift::default_instance_ = new VIPGift();
  EquipReward::default_instance_->InitAsDefaultInstance();
  FinalReward::default_instance_->InitAsDefaultInstance();
  LevelDailyGift::default_instance_->InitAsDefaultInstance();
  YearDailyGift::default_instance_->InitAsDefaultInstance();
  NewerGift::default_instance_->InitAsDefaultInstance();
  PrivilegeGift::default_instance_->InitAsDefaultInstance();
  UpgradeGift::default_instance_->InitAsDefaultInstance();
  YellowVIPGift::default_instance_->InitAsDefaultInstance();
  PrivilegeZoneGift::default_instance_->InitAsDefaultInstance();
  QQZoneGift::default_instance_->InitAsDefaultInstance();
  VIPGift::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VipGiftConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VipGiftConfig_2eproto {
  StaticDescriptorInitializer_VipGiftConfig_2eproto() {
    protobuf_AddDesc_VipGiftConfig_2eproto();
  }
} static_descriptor_initializer_VipGiftConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int EquipReward::kEqidFieldNumber;
const int EquipReward::kCountFieldNumber;
#endif  // !_MSC_VER

EquipReward::EquipReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.EquipReward)
}

void EquipReward::InitAsDefaultInstance() {
}

EquipReward::EquipReward(const EquipReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.EquipReward)
}

void EquipReward::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipReward::~EquipReward() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.EquipReward)
  SharedDtor();
}

void EquipReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipReward_descriptor_;
}

const EquipReward& EquipReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

EquipReward* EquipReward::default_instance_ = NULL;

EquipReward* EquipReward::New() const {
  return new EquipReward;
}

void EquipReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.EquipReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.EquipReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.EquipReward)
  return false;
#undef DO_
}

void EquipReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.EquipReward)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.EquipReward)
}

::google::protobuf::uint8* EquipReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.EquipReward)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.EquipReward)
  return target;
}

int EquipReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipReward::MergeFrom(const EquipReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipReward::CopyFrom(const EquipReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipReward::Swap(EquipReward* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipReward_descriptor_;
  metadata.reflection = EquipReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinalReward::kEquipsFieldNumber;
const int FinalReward::kCoinFieldNumber;
const int FinalReward::kWoodFieldNumber;
const int FinalReward::kFoodFieldNumber;
const int FinalReward::kIronFieldNumber;
const int FinalReward::kHammerFieldNumber;
const int FinalReward::kOrderFieldNumber;
const int FinalReward::kExpFieldNumber;
#endif  // !_MSC_VER

FinalReward::FinalReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.FinalReward)
}

void FinalReward::InitAsDefaultInstance() {
}

FinalReward::FinalReward(const FinalReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.FinalReward)
}

void FinalReward::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  wood_ = 0u;
  food_ = 0u;
  iron_ = 0u;
  hammer_ = 0u;
  order_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinalReward::~FinalReward() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.FinalReward)
  SharedDtor();
}

void FinalReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinalReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinalReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalReward_descriptor_;
}

const FinalReward& FinalReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

FinalReward* FinalReward::default_instance_ = NULL;

FinalReward* FinalReward::New() const {
  return new FinalReward;
}

void FinalReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FinalReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(coin_, exp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinalReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.FinalReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VipGiftConfig.EquipReward equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // optional uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wood;
        break;
      }

      // optional uint32 wood = 3;
      case 3: {
        if (tag == 24) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_food;
        break;
      }

      // optional uint32 food = 4;
      case 4: {
        if (tag == 32) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iron;
        break;
      }

      // optional uint32 iron = 5;
      case 5: {
        if (tag == 40) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_hammer;
        break;
      }

      // optional uint32 hammer = 6;
      case 6: {
        if (tag == 48) {
         parse_hammer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hammer_)));
          set_has_hammer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_order;
        break;
      }

      // optional uint32 order = 7;
      case 7: {
        if (tag == 56) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 8;
      case 8: {
        if (tag == 64) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.FinalReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.FinalReward)
  return false;
#undef DO_
}

void FinalReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.FinalReward)
  // repeated .VipGiftConfig.EquipReward equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  // optional uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // optional uint32 wood = 3;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wood(), output);
  }

  // optional uint32 food = 4;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->food(), output);
  }

  // optional uint32 iron = 5;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->iron(), output);
  }

  // optional uint32 hammer = 6;
  if (has_hammer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hammer(), output);
  }

  // optional uint32 order = 7;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->order(), output);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.FinalReward)
}

::google::protobuf::uint8* FinalReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.FinalReward)
  // repeated .VipGiftConfig.EquipReward equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  // optional uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // optional uint32 wood = 3;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wood(), target);
  }

  // optional uint32 food = 4;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->food(), target);
  }

  // optional uint32 iron = 5;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->iron(), target);
  }

  // optional uint32 hammer = 6;
  if (has_hammer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hammer(), target);
  }

  // optional uint32 order = 7;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->order(), target);
  }

  // optional uint32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.FinalReward)
  return target;
}

int FinalReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 wood = 3;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // optional uint32 food = 4;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // optional uint32 iron = 5;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

    // optional uint32 hammer = 6;
    if (has_hammer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hammer());
    }

    // optional uint32 order = 7;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

    // optional uint32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  // repeated .VipGiftConfig.EquipReward equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinalReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinalReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinalReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinalReward::MergeFrom(const FinalReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
    if (from.has_hammer()) {
      set_hammer(from.hammer());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinalReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalReward::CopyFrom(const FinalReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalReward::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->equips())) return false;
  return true;
}

void FinalReward::Swap(FinalReward* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(hammer_, other->hammer_);
    std::swap(order_, other->order_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinalReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinalReward_descriptor_;
  metadata.reflection = FinalReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelDailyGift::kLevelFieldNumber;
const int LevelDailyGift::kRewardFieldNumber;
#endif  // !_MSC_VER

LevelDailyGift::LevelDailyGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.LevelDailyGift)
}

void LevelDailyGift::InitAsDefaultInstance() {
  reward_ = const_cast< ::VipGiftConfig::FinalReward*>(&::VipGiftConfig::FinalReward::default_instance());
}

LevelDailyGift::LevelDailyGift(const LevelDailyGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.LevelDailyGift)
}

void LevelDailyGift::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelDailyGift::~LevelDailyGift() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.LevelDailyGift)
  SharedDtor();
}

void LevelDailyGift::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void LevelDailyGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelDailyGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelDailyGift_descriptor_;
}

const LevelDailyGift& LevelDailyGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

LevelDailyGift* LevelDailyGift::default_instance_ = NULL;

LevelDailyGift* LevelDailyGift::New() const {
  return new LevelDailyGift;
}

void LevelDailyGift::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    level_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::VipGiftConfig::FinalReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelDailyGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.LevelDailyGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .VipGiftConfig.FinalReward reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.LevelDailyGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.LevelDailyGift)
  return false;
#undef DO_
}

void LevelDailyGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.LevelDailyGift)
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required .VipGiftConfig.FinalReward reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.LevelDailyGift)
}

::google::protobuf::uint8* LevelDailyGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.LevelDailyGift)
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required .VipGiftConfig.FinalReward reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.LevelDailyGift)
  return target;
}

int LevelDailyGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required .VipGiftConfig.FinalReward reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelDailyGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelDailyGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelDailyGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelDailyGift::MergeFrom(const LevelDailyGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reward()) {
      mutable_reward()->::VipGiftConfig::FinalReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelDailyGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelDailyGift::CopyFrom(const LevelDailyGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDailyGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void LevelDailyGift::Swap(LevelDailyGift* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelDailyGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelDailyGift_descriptor_;
  metadata.reflection = LevelDailyGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YearDailyGift::kRewardFieldNumber;
#endif  // !_MSC_VER

YearDailyGift::YearDailyGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.YearDailyGift)
}

void YearDailyGift::InitAsDefaultInstance() {
  reward_ = const_cast< ::VipGiftConfig::FinalReward*>(&::VipGiftConfig::FinalReward::default_instance());
}

YearDailyGift::YearDailyGift(const YearDailyGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.YearDailyGift)
}

void YearDailyGift::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YearDailyGift::~YearDailyGift() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.YearDailyGift)
  SharedDtor();
}

void YearDailyGift::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void YearDailyGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YearDailyGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YearDailyGift_descriptor_;
}

const YearDailyGift& YearDailyGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

YearDailyGift* YearDailyGift::default_instance_ = NULL;

YearDailyGift* YearDailyGift::New() const {
  return new YearDailyGift;
}

void YearDailyGift::Clear() {
  if (has_reward()) {
    if (reward_ != NULL) reward_->::VipGiftConfig::FinalReward::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YearDailyGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.YearDailyGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .VipGiftConfig.FinalReward reward = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.YearDailyGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.YearDailyGift)
  return false;
#undef DO_
}

void YearDailyGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.YearDailyGift)
  // required .VipGiftConfig.FinalReward reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.YearDailyGift)
}

::google::protobuf::uint8* YearDailyGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.YearDailyGift)
  // required .VipGiftConfig.FinalReward reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.YearDailyGift)
  return target;
}

int YearDailyGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .VipGiftConfig.FinalReward reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YearDailyGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YearDailyGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YearDailyGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YearDailyGift::MergeFrom(const YearDailyGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::VipGiftConfig::FinalReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YearDailyGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YearDailyGift::CopyFrom(const YearDailyGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YearDailyGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void YearDailyGift::Swap(YearDailyGift* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YearDailyGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YearDailyGift_descriptor_;
  metadata.reflection = YearDailyGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewerGift::kRewardFieldNumber;
#endif  // !_MSC_VER

NewerGift::NewerGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.NewerGift)
}

void NewerGift::InitAsDefaultInstance() {
  reward_ = const_cast< ::VipGiftConfig::FinalReward*>(&::VipGiftConfig::FinalReward::default_instance());
}

NewerGift::NewerGift(const NewerGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.NewerGift)
}

void NewerGift::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewerGift::~NewerGift() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.NewerGift)
  SharedDtor();
}

void NewerGift::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void NewerGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewerGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewerGift_descriptor_;
}

const NewerGift& NewerGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

NewerGift* NewerGift::default_instance_ = NULL;

NewerGift* NewerGift::New() const {
  return new NewerGift;
}

void NewerGift::Clear() {
  if (has_reward()) {
    if (reward_ != NULL) reward_->::VipGiftConfig::FinalReward::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewerGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.NewerGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .VipGiftConfig.FinalReward reward = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.NewerGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.NewerGift)
  return false;
#undef DO_
}

void NewerGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.NewerGift)
  // required .VipGiftConfig.FinalReward reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.NewerGift)
}

::google::protobuf::uint8* NewerGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.NewerGift)
  // required .VipGiftConfig.FinalReward reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.NewerGift)
  return target;
}

int NewerGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .VipGiftConfig.FinalReward reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewerGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewerGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewerGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewerGift::MergeFrom(const NewerGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::VipGiftConfig::FinalReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewerGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewerGift::CopyFrom(const NewerGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewerGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void NewerGift::Swap(NewerGift* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewerGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewerGift_descriptor_;
  metadata.reflection = NewerGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivilegeGift::kLeveldailyFieldNumber;
const int PrivilegeGift::kYeardailyFieldNumber;
#endif  // !_MSC_VER

PrivilegeGift::PrivilegeGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.PrivilegeGift)
}

void PrivilegeGift::InitAsDefaultInstance() {
  yeardaily_ = const_cast< ::VipGiftConfig::YearDailyGift*>(&::VipGiftConfig::YearDailyGift::default_instance());
}

PrivilegeGift::PrivilegeGift(const PrivilegeGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.PrivilegeGift)
}

void PrivilegeGift::SharedCtor() {
  _cached_size_ = 0;
  yeardaily_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivilegeGift::~PrivilegeGift() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.PrivilegeGift)
  SharedDtor();
}

void PrivilegeGift::SharedDtor() {
  if (this != default_instance_) {
    delete yeardaily_;
  }
}

void PrivilegeGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivilegeGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivilegeGift_descriptor_;
}

const PrivilegeGift& PrivilegeGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

PrivilegeGift* PrivilegeGift::default_instance_ = NULL;

PrivilegeGift* PrivilegeGift::New() const {
  return new PrivilegeGift;
}

void PrivilegeGift::Clear() {
  if (has_yeardaily()) {
    if (yeardaily_ != NULL) yeardaily_->::VipGiftConfig::YearDailyGift::Clear();
  }
  leveldaily_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivilegeGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.PrivilegeGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VipGiftConfig.LevelDailyGift leveldaily = 1;
      case 1: {
        if (tag == 10) {
         parse_leveldaily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leveldaily()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_leveldaily;
        if (input->ExpectTag(18)) goto parse_yeardaily;
        break;
      }

      // required .VipGiftConfig.YearDailyGift yeardaily = 2;
      case 2: {
        if (tag == 18) {
         parse_yeardaily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yeardaily()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.PrivilegeGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.PrivilegeGift)
  return false;
#undef DO_
}

void PrivilegeGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.PrivilegeGift)
  // repeated .VipGiftConfig.LevelDailyGift leveldaily = 1;
  for (int i = 0; i < this->leveldaily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->leveldaily(i), output);
  }

  // required .VipGiftConfig.YearDailyGift yeardaily = 2;
  if (has_yeardaily()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->yeardaily(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.PrivilegeGift)
}

::google::protobuf::uint8* PrivilegeGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.PrivilegeGift)
  // repeated .VipGiftConfig.LevelDailyGift leveldaily = 1;
  for (int i = 0; i < this->leveldaily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->leveldaily(i), target);
  }

  // required .VipGiftConfig.YearDailyGift yeardaily = 2;
  if (has_yeardaily()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->yeardaily(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.PrivilegeGift)
  return target;
}

int PrivilegeGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .VipGiftConfig.YearDailyGift yeardaily = 2;
    if (has_yeardaily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yeardaily());
    }

  }
  // repeated .VipGiftConfig.LevelDailyGift leveldaily = 1;
  total_size += 1 * this->leveldaily_size();
  for (int i = 0; i < this->leveldaily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leveldaily(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivilegeGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivilegeGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivilegeGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivilegeGift::MergeFrom(const PrivilegeGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  leveldaily_.MergeFrom(from.leveldaily_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_yeardaily()) {
      mutable_yeardaily()->::VipGiftConfig::YearDailyGift::MergeFrom(from.yeardaily());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivilegeGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivilegeGift::CopyFrom(const PrivilegeGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivilegeGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->leveldaily())) return false;
  if (has_yeardaily()) {
    if (!this->yeardaily().IsInitialized()) return false;
  }
  return true;
}

void PrivilegeGift::Swap(PrivilegeGift* other) {
  if (other != this) {
    leveldaily_.Swap(&other->leveldaily_);
    std::swap(yeardaily_, other->yeardaily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrivilegeGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivilegeGift_descriptor_;
  metadata.reflection = PrivilegeGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeGift::kUserlevelFieldNumber;
const int UpgradeGift::kRewardFieldNumber;
#endif  // !_MSC_VER

UpgradeGift::UpgradeGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.UpgradeGift)
}

void UpgradeGift::InitAsDefaultInstance() {
  reward_ = const_cast< ::VipGiftConfig::FinalReward*>(&::VipGiftConfig::FinalReward::default_instance());
}

UpgradeGift::UpgradeGift(const UpgradeGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.UpgradeGift)
}

void UpgradeGift::SharedCtor() {
  _cached_size_ = 0;
  userlevel_ = 0u;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeGift::~UpgradeGift() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.UpgradeGift)
  SharedDtor();
}

void UpgradeGift::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void UpgradeGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeGift_descriptor_;
}

const UpgradeGift& UpgradeGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

UpgradeGift* UpgradeGift::default_instance_ = NULL;

UpgradeGift* UpgradeGift::New() const {
  return new UpgradeGift;
}

void UpgradeGift::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    userlevel_ = 0u;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::VipGiftConfig::FinalReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.UpgradeGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 userlevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlevel_)));
          set_has_userlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .VipGiftConfig.FinalReward reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.UpgradeGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.UpgradeGift)
  return false;
#undef DO_
}

void UpgradeGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.UpgradeGift)
  // required uint32 userlevel = 1;
  if (has_userlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userlevel(), output);
  }

  // required .VipGiftConfig.FinalReward reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.UpgradeGift)
}

::google::protobuf::uint8* UpgradeGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.UpgradeGift)
  // required uint32 userlevel = 1;
  if (has_userlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userlevel(), target);
  }

  // required .VipGiftConfig.FinalReward reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.UpgradeGift)
  return target;
}

int UpgradeGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 userlevel = 1;
    if (has_userlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlevel());
    }

    // required .VipGiftConfig.FinalReward reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeGift::MergeFrom(const UpgradeGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userlevel()) {
      set_userlevel(from.userlevel());
    }
    if (from.has_reward()) {
      mutable_reward()->::VipGiftConfig::FinalReward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeGift::CopyFrom(const UpgradeGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void UpgradeGift::Swap(UpgradeGift* other) {
  if (other != this) {
    std::swap(userlevel_, other->userlevel_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeGift_descriptor_;
  metadata.reflection = UpgradeGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YellowVIPGift::kNewerFieldNumber;
const int YellowVIPGift::kPrivilegeFieldNumber;
const int YellowVIPGift::kUpgradeFieldNumber;
#endif  // !_MSC_VER

YellowVIPGift::YellowVIPGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.YellowVIPGift)
}

void YellowVIPGift::InitAsDefaultInstance() {
  newer_ = const_cast< ::VipGiftConfig::NewerGift*>(&::VipGiftConfig::NewerGift::default_instance());
  privilege_ = const_cast< ::VipGiftConfig::PrivilegeGift*>(&::VipGiftConfig::PrivilegeGift::default_instance());
}

YellowVIPGift::YellowVIPGift(const YellowVIPGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.YellowVIPGift)
}

void YellowVIPGift::SharedCtor() {
  _cached_size_ = 0;
  newer_ = NULL;
  privilege_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YellowVIPGift::~YellowVIPGift() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.YellowVIPGift)
  SharedDtor();
}

void YellowVIPGift::SharedDtor() {
  if (this != default_instance_) {
    delete newer_;
    delete privilege_;
  }
}

void YellowVIPGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YellowVIPGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YellowVIPGift_descriptor_;
}

const YellowVIPGift& YellowVIPGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

YellowVIPGift* YellowVIPGift::default_instance_ = NULL;

YellowVIPGift* YellowVIPGift::New() const {
  return new YellowVIPGift;
}

void YellowVIPGift::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_newer()) {
      if (newer_ != NULL) newer_->::VipGiftConfig::NewerGift::Clear();
    }
    if (has_privilege()) {
      if (privilege_ != NULL) privilege_->::VipGiftConfig::PrivilegeGift::Clear();
    }
  }
  upgrade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YellowVIPGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.YellowVIPGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .VipGiftConfig.NewerGift newer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_privilege;
        break;
      }

      // required .VipGiftConfig.PrivilegeGift privilege = 2;
      case 2: {
        if (tag == 18) {
         parse_privilege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privilege()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_upgrade;
        break;
      }

      // repeated .VipGiftConfig.UpgradeGift upgrade = 3;
      case 3: {
        if (tag == 26) {
         parse_upgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upgrade()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_upgrade;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.YellowVIPGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.YellowVIPGift)
  return false;
#undef DO_
}

void YellowVIPGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.YellowVIPGift)
  // required .VipGiftConfig.NewerGift newer = 1;
  if (has_newer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->newer(), output);
  }

  // required .VipGiftConfig.PrivilegeGift privilege = 2;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->privilege(), output);
  }

  // repeated .VipGiftConfig.UpgradeGift upgrade = 3;
  for (int i = 0; i < this->upgrade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upgrade(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.YellowVIPGift)
}

::google::protobuf::uint8* YellowVIPGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.YellowVIPGift)
  // required .VipGiftConfig.NewerGift newer = 1;
  if (has_newer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->newer(), target);
  }

  // required .VipGiftConfig.PrivilegeGift privilege = 2;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->privilege(), target);
  }

  // repeated .VipGiftConfig.UpgradeGift upgrade = 3;
  for (int i = 0; i < this->upgrade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upgrade(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.YellowVIPGift)
  return target;
}

int YellowVIPGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .VipGiftConfig.NewerGift newer = 1;
    if (has_newer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newer());
    }

    // required .VipGiftConfig.PrivilegeGift privilege = 2;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privilege());
    }

  }
  // repeated .VipGiftConfig.UpgradeGift upgrade = 3;
  total_size += 1 * this->upgrade_size();
  for (int i = 0; i < this->upgrade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgrade(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YellowVIPGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YellowVIPGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YellowVIPGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YellowVIPGift::MergeFrom(const YellowVIPGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  upgrade_.MergeFrom(from.upgrade_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newer()) {
      mutable_newer()->::VipGiftConfig::NewerGift::MergeFrom(from.newer());
    }
    if (from.has_privilege()) {
      mutable_privilege()->::VipGiftConfig::PrivilegeGift::MergeFrom(from.privilege());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YellowVIPGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YellowVIPGift::CopyFrom(const YellowVIPGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YellowVIPGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_newer()) {
    if (!this->newer().IsInitialized()) return false;
  }
  if (has_privilege()) {
    if (!this->privilege().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->upgrade())) return false;
  return true;
}

void YellowVIPGift::Swap(YellowVIPGift* other) {
  if (other != this) {
    std::swap(newer_, other->newer_);
    std::swap(privilege_, other->privilege_);
    upgrade_.Swap(&other->upgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YellowVIPGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YellowVIPGift_descriptor_;
  metadata.reflection = YellowVIPGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivilegeZoneGift::kDailyFieldNumber;
#endif  // !_MSC_VER

PrivilegeZoneGift::PrivilegeZoneGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.PrivilegeZoneGift)
}

void PrivilegeZoneGift::InitAsDefaultInstance() {
  daily_ = const_cast< ::VipGiftConfig::YearDailyGift*>(&::VipGiftConfig::YearDailyGift::default_instance());
}

PrivilegeZoneGift::PrivilegeZoneGift(const PrivilegeZoneGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.PrivilegeZoneGift)
}

void PrivilegeZoneGift::SharedCtor() {
  _cached_size_ = 0;
  daily_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivilegeZoneGift::~PrivilegeZoneGift() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.PrivilegeZoneGift)
  SharedDtor();
}

void PrivilegeZoneGift::SharedDtor() {
  if (this != default_instance_) {
    delete daily_;
  }
}

void PrivilegeZoneGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivilegeZoneGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivilegeZoneGift_descriptor_;
}

const PrivilegeZoneGift& PrivilegeZoneGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

PrivilegeZoneGift* PrivilegeZoneGift::default_instance_ = NULL;

PrivilegeZoneGift* PrivilegeZoneGift::New() const {
  return new PrivilegeZoneGift;
}

void PrivilegeZoneGift::Clear() {
  if (has_daily()) {
    if (daily_ != NULL) daily_->::VipGiftConfig::YearDailyGift::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivilegeZoneGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.PrivilegeZoneGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .VipGiftConfig.YearDailyGift daily = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.PrivilegeZoneGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.PrivilegeZoneGift)
  return false;
#undef DO_
}

void PrivilegeZoneGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.PrivilegeZoneGift)
  // required .VipGiftConfig.YearDailyGift daily = 1;
  if (has_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->daily(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.PrivilegeZoneGift)
}

::google::protobuf::uint8* PrivilegeZoneGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.PrivilegeZoneGift)
  // required .VipGiftConfig.YearDailyGift daily = 1;
  if (has_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->daily(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.PrivilegeZoneGift)
  return target;
}

int PrivilegeZoneGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .VipGiftConfig.YearDailyGift daily = 1;
    if (has_daily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivilegeZoneGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivilegeZoneGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivilegeZoneGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivilegeZoneGift::MergeFrom(const PrivilegeZoneGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daily()) {
      mutable_daily()->::VipGiftConfig::YearDailyGift::MergeFrom(from.daily());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivilegeZoneGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivilegeZoneGift::CopyFrom(const PrivilegeZoneGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivilegeZoneGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_daily()) {
    if (!this->daily().IsInitialized()) return false;
  }
  return true;
}

void PrivilegeZoneGift::Swap(PrivilegeZoneGift* other) {
  if (other != this) {
    std::swap(daily_, other->daily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrivilegeZoneGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivilegeZoneGift_descriptor_;
  metadata.reflection = PrivilegeZoneGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QQZoneGift::kPrivilegeFieldNumber;
const int QQZoneGift::kUpgradeFieldNumber;
#endif  // !_MSC_VER

QQZoneGift::QQZoneGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.QQZoneGift)
}

void QQZoneGift::InitAsDefaultInstance() {
  privilege_ = const_cast< ::VipGiftConfig::PrivilegeZoneGift*>(&::VipGiftConfig::PrivilegeZoneGift::default_instance());
}

QQZoneGift::QQZoneGift(const QQZoneGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.QQZoneGift)
}

void QQZoneGift::SharedCtor() {
  _cached_size_ = 0;
  privilege_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QQZoneGift::~QQZoneGift() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.QQZoneGift)
  SharedDtor();
}

void QQZoneGift::SharedDtor() {
  if (this != default_instance_) {
    delete privilege_;
  }
}

void QQZoneGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QQZoneGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQZoneGift_descriptor_;
}

const QQZoneGift& QQZoneGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

QQZoneGift* QQZoneGift::default_instance_ = NULL;

QQZoneGift* QQZoneGift::New() const {
  return new QQZoneGift;
}

void QQZoneGift::Clear() {
  if (has_privilege()) {
    if (privilege_ != NULL) privilege_->::VipGiftConfig::PrivilegeZoneGift::Clear();
  }
  upgrade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QQZoneGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.QQZoneGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .VipGiftConfig.PrivilegeZoneGift privilege = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privilege()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_upgrade;
        break;
      }

      // repeated .VipGiftConfig.UpgradeGift upgrade = 2;
      case 2: {
        if (tag == 18) {
         parse_upgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upgrade()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_upgrade;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.QQZoneGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.QQZoneGift)
  return false;
#undef DO_
}

void QQZoneGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.QQZoneGift)
  // required .VipGiftConfig.PrivilegeZoneGift privilege = 1;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->privilege(), output);
  }

  // repeated .VipGiftConfig.UpgradeGift upgrade = 2;
  for (int i = 0; i < this->upgrade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->upgrade(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.QQZoneGift)
}

::google::protobuf::uint8* QQZoneGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.QQZoneGift)
  // required .VipGiftConfig.PrivilegeZoneGift privilege = 1;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->privilege(), target);
  }

  // repeated .VipGiftConfig.UpgradeGift upgrade = 2;
  for (int i = 0; i < this->upgrade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->upgrade(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.QQZoneGift)
  return target;
}

int QQZoneGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .VipGiftConfig.PrivilegeZoneGift privilege = 1;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->privilege());
    }

  }
  // repeated .VipGiftConfig.UpgradeGift upgrade = 2;
  total_size += 1 * this->upgrade_size();
  for (int i = 0; i < this->upgrade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgrade(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QQZoneGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QQZoneGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QQZoneGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QQZoneGift::MergeFrom(const QQZoneGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  upgrade_.MergeFrom(from.upgrade_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_privilege()) {
      mutable_privilege()->::VipGiftConfig::PrivilegeZoneGift::MergeFrom(from.privilege());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QQZoneGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QQZoneGift::CopyFrom(const QQZoneGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QQZoneGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_privilege()) {
    if (!this->privilege().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->upgrade())) return false;
  return true;
}

void QQZoneGift::Swap(QQZoneGift* other) {
  if (other != this) {
    std::swap(privilege_, other->privilege_);
    upgrade_.Swap(&other->upgrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QQZoneGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QQZoneGift_descriptor_;
  metadata.reflection = QQZoneGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VIPGift::kYellowvipFieldNumber;
const int VIPGift::kQqzoneFieldNumber;
#endif  // !_MSC_VER

VIPGift::VIPGift()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VipGiftConfig.VIPGift)
}

void VIPGift::InitAsDefaultInstance() {
  yellowvip_ = const_cast< ::VipGiftConfig::YellowVIPGift*>(&::VipGiftConfig::YellowVIPGift::default_instance());
  qqzone_ = const_cast< ::VipGiftConfig::QQZoneGift*>(&::VipGiftConfig::QQZoneGift::default_instance());
}

VIPGift::VIPGift(const VIPGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VipGiftConfig.VIPGift)
}

void VIPGift::SharedCtor() {
  _cached_size_ = 0;
  yellowvip_ = NULL;
  qqzone_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPGift::~VIPGift() {
  // @@protoc_insertion_point(destructor:VipGiftConfig.VIPGift)
  SharedDtor();
}

void VIPGift::SharedDtor() {
  if (this != default_instance_) {
    delete yellowvip_;
    delete qqzone_;
  }
}

void VIPGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VIPGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VIPGift_descriptor_;
}

const VIPGift& VIPGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VipGiftConfig_2eproto();
  return *default_instance_;
}

VIPGift* VIPGift::default_instance_ = NULL;

VIPGift* VIPGift::New() const {
  return new VIPGift;
}

void VIPGift::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_yellowvip()) {
      if (yellowvip_ != NULL) yellowvip_->::VipGiftConfig::YellowVIPGift::Clear();
    }
    if (has_qqzone()) {
      if (qqzone_ != NULL) qqzone_->::VipGiftConfig::QQZoneGift::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VIPGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VipGiftConfig.VIPGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .VipGiftConfig.YellowVIPGift yellowvip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yellowvip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_qqzone;
        break;
      }

      // required .VipGiftConfig.QQZoneGift qqzone = 2;
      case 2: {
        if (tag == 18) {
         parse_qqzone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qqzone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VipGiftConfig.VIPGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VipGiftConfig.VIPGift)
  return false;
#undef DO_
}

void VIPGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VipGiftConfig.VIPGift)
  // required .VipGiftConfig.YellowVIPGift yellowvip = 1;
  if (has_yellowvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->yellowvip(), output);
  }

  // required .VipGiftConfig.QQZoneGift qqzone = 2;
  if (has_qqzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->qqzone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VipGiftConfig.VIPGift)
}

::google::protobuf::uint8* VIPGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VipGiftConfig.VIPGift)
  // required .VipGiftConfig.YellowVIPGift yellowvip = 1;
  if (has_yellowvip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->yellowvip(), target);
  }

  // required .VipGiftConfig.QQZoneGift qqzone = 2;
  if (has_qqzone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->qqzone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VipGiftConfig.VIPGift)
  return target;
}

int VIPGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .VipGiftConfig.YellowVIPGift yellowvip = 1;
    if (has_yellowvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yellowvip());
    }

    // required .VipGiftConfig.QQZoneGift qqzone = 2;
    if (has_qqzone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qqzone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VIPGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VIPGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VIPGift::MergeFrom(const VIPGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yellowvip()) {
      mutable_yellowvip()->::VipGiftConfig::YellowVIPGift::MergeFrom(from.yellowvip());
    }
    if (from.has_qqzone()) {
      mutable_qqzone()->::VipGiftConfig::QQZoneGift::MergeFrom(from.qqzone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VIPGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VIPGift::CopyFrom(const VIPGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_yellowvip()) {
    if (!this->yellowvip().IsInitialized()) return false;
  }
  if (has_qqzone()) {
    if (!this->qqzone().IsInitialized()) return false;
  }
  return true;
}

void VIPGift::Swap(VIPGift* other) {
  if (other != this) {
    std::swap(yellowvip_, other->yellowvip_);
    std::swap(qqzone_, other->qqzone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VIPGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VIPGift_descriptor_;
  metadata.reflection = VIPGift_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VipGiftConfig

// @@protoc_insertion_point(global_scope)
