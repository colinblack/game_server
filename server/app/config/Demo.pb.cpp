// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Demo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Demo {

namespace {

const ::google::protobuf::Descriptor* DemoTimeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoTimeConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoConstConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoConstConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoNPCTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoNPCTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoCityG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoCityG_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemoNPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemoNPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleRewardDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleRewardDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityNPCDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityNPCDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Demo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Demo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Demo_2eproto() {
  protobuf_AddDesc_Demo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Demo.proto");
  GOOGLE_CHECK(file != NULL);
  DemoTimeConfig_descriptor_ = file->message_type(0);
  static const int DemoTimeConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, npcwait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, userwait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, skilldodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, skillattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, attack_),
  };
  DemoTimeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DemoTimeConfig_descriptor_,
      DemoTimeConfig::default_instance_,
      DemoTimeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoTimeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DemoTimeConfig));
  DemoConstConfig_descriptor_ = file->message_type(1);
  static const int DemoConstConfig_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, npcskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, userskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skillmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skillmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skill_p_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skill_p_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skillrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skill_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skill_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skill_a_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skill_b_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skill_c_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skill_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, skill_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, form_s_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, form_s_e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, form_s_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, form_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, form_e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, form_l_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, npcattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, userattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, hp_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, f_s_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, f_s_e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, f_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, f_e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, r_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, r_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, r_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, randmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, randmax_),
  };
  DemoConstConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DemoConstConfig_descriptor_,
      DemoConstConfig::default_instance_,
      DemoConstConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoConstConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DemoConstConfig));
  DemoNPCTime_descriptor_ = file->message_type(2);
  static const int DemoNPCTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPCTime, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPCTime, npcid_),
  };
  DemoNPCTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DemoNPCTime_descriptor_,
      DemoNPCTime::default_instance_,
      DemoNPCTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPCTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPCTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DemoNPCTime));
  DemoCityG_descriptor_ = file->message_type(3);
  static const int DemoCityG_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoCityG, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoCityG, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoCityG, scale_),
  };
  DemoCityG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DemoCityG_descriptor_,
      DemoCityG::default_instance_,
      DemoCityG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoCityG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoCityG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DemoCityG));
  DemoReward_descriptor_ = file->message_type(4);
  static const int DemoReward_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, v_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, b_c_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, b_c_o_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, c_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, c_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, c_1_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, c_2_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, c_3_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, i_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, f_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, f_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, f_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, fb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, hexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, coin_),
  };
  DemoReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DemoReward_descriptor_,
      DemoReward::default_instance_,
      DemoReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DemoReward));
  DemoNPC_descriptor_ = file->message_type(5);
  static const int DemoNPC_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPC, npc_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPC, npc_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPC, npc_m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPC, npc_extra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPC, npc_extra_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPC, npc_extra_m_),
  };
  DemoNPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DemoNPC_descriptor_,
      DemoNPC::default_instance_,
      DemoNPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemoNPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DemoNPC));
  BattleRewardDay_descriptor_ = file->message_type(6);
  static const int BattleRewardDay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRewardDay, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRewardDay, c_),
  };
  BattleRewardDay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleRewardDay_descriptor_,
      BattleRewardDay::default_instance_,
      BattleRewardDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRewardDay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRewardDay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleRewardDay));
  BattleReward_descriptor_ = file->message_type(7);
  static const int BattleReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, cu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, count_),
  };
  BattleReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleReward_descriptor_,
      BattleReward::default_instance_,
      BattleReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleReward));
  CityNPCDay_descriptor_ = file->message_type(8);
  static const int CityNPCDay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityNPCDay, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityNPCDay, npc_),
  };
  CityNPCDay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityNPCDay_descriptor_,
      CityNPCDay::default_instance_,
      CityNPCDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityNPCDay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityNPCDay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityNPCDay));
  CityReward_descriptor_ = file->message_type(9);
  static const int CityReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityReward, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityReward, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityReward, npc_),
  };
  CityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityReward_descriptor_,
      CityReward::default_instance_,
      CityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityReward));
  Demo_descriptor_ = file->message_type(10);
  static const int Demo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, timeconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, constconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, normalnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, attacknpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, defendnpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, npc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, killreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, battlereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, cityreward_),
  };
  Demo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Demo_descriptor_,
      Demo::default_instance_,
      Demo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Demo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Demo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Demo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DemoTimeConfig_descriptor_, &DemoTimeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DemoConstConfig_descriptor_, &DemoConstConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DemoNPCTime_descriptor_, &DemoNPCTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DemoCityG_descriptor_, &DemoCityG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DemoReward_descriptor_, &DemoReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DemoNPC_descriptor_, &DemoNPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleRewardDay_descriptor_, &BattleRewardDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleReward_descriptor_, &BattleReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityNPCDay_descriptor_, &CityNPCDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityReward_descriptor_, &CityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Demo_descriptor_, &Demo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Demo_2eproto() {
  delete DemoTimeConfig::default_instance_;
  delete DemoTimeConfig_reflection_;
  delete DemoConstConfig::default_instance_;
  delete DemoConstConfig_reflection_;
  delete DemoNPCTime::default_instance_;
  delete DemoNPCTime_reflection_;
  delete DemoCityG::default_instance_;
  delete DemoCityG_reflection_;
  delete DemoReward::default_instance_;
  delete DemoReward_reflection_;
  delete DemoNPC::default_instance_;
  delete DemoNPC_reflection_;
  delete BattleRewardDay::default_instance_;
  delete BattleRewardDay_reflection_;
  delete BattleReward::default_instance_;
  delete BattleReward_reflection_;
  delete CityNPCDay::default_instance_;
  delete CityNPCDay_reflection_;
  delete CityReward::default_instance_;
  delete CityReward_reflection_;
  delete Demo::default_instance_;
  delete Demo_reflection_;
}

void protobuf_AddDesc_Demo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nDemo.proto\022\004Demo\"\227\001\n\016DemoTimeConfig\022\017\n"
    "\007npcwait\030\001 \002(\r\022\020\n\010userwait\030\002 \002(\r\022\014\n\004move"
    "\030\003 \002(\r\022\r\n\005skill\030\004 \002(\r\022\022\n\nskilldodge\030\005 \002("
    "\r\022\023\n\013skillattack\030\006 \002(\r\022\014\n\004form\030\007 \002(\r\022\016\n\006"
    "attack\030\010 \002(\r\"\255\004\n\017DemoConstConfig\022\020\n\010npcs"
    "kill\030\001 \002(\005\022\021\n\tuserskill\030\002 \002(\005\022\020\n\010skillma"
    "x\030\003 \002(\005\022\020\n\010skillmin\030\004 \002(\005\022\021\n\tskill_p_a\030\005"
    " \002(\005\022\021\n\tskill_p_b\030\006 \002(\005\022\022\n\nskillrange\030\007 "
    "\002(\001\022\017\n\007skill_a\030\010 \002(\005\022\017\n\007skill_b\030\t \002(\005\022\021\n"
    "\tskill_a_c\030\n \002(\001\022\021\n\tskill_b_c\030\013 \002(\001\022\021\n\ts"
    "kill_c_c\030\014 \002(\001\022\017\n\007skill_l\030\r \002(\005\022\017\n\007skill"
    "_h\030\016 \002(\005\022\020\n\010form_s_w\030\017 \002(\001\022\020\n\010form_s_e\030\020"
    " \002(\001\022\020\n\010form_s_l\030\021 \002(\001\022\016\n\006form_w\030\022 \002(\001\022\016"
    "\n\006form_e\030\023 \002(\001\022\016\n\006form_l\030\024 \002(\001\022\021\n\tnpcatt"
    "ack\030\025 \002(\001\022\022\n\nuserattack\030\026 \002(\001\022\014\n\004hp_c\030\027 "
    "\002(\001\022\r\n\005f_s_w\030\030 \002(\001\022\r\n\005f_s_e\030\031 \002(\001\022\013\n\003f_w"
    "\030\032 \002(\001\022\013\n\003f_e\030\033 \002(\001\022\013\n\003r_a\030\034 \002(\001\022\013\n\003r_b\030"
    "\035 \002(\001\022\013\n\003r_c\030\036 \002(\001\022\017\n\007randmin\030\037 \002(\005\022\017\n\007r"
    "andmax\030  \002(\005\")\n\013DemoNPCTime\022\013\n\003day\030\001 \002(\r"
    "\022\r\n\005npcid\030\002 \002(\r\"4\n\tDemoCityG\022\013\n\003cid\030\001 \002("
    "\r\022\013\n\003gid\030\002 \002(\r\022\r\n\005scale\030\003 \002(\r\"\345\001\n\nDemoRe"
    "ward\022\013\n\003v_c\030\001 \003(\001\022\r\n\005b_c_w\030\002 \002(\001\022\r\n\005b_c_"
    "o\030\003 \002(\001\022\013\n\003c_1\030\004 \002(\001\022\013\n\003c_2\030\005 \002(\001\022\r\n\005c_1"
    "_c\030\006 \002(\001\022\r\n\005c_2_c\030\007 \002(\001\022\r\n\005c_3_c\030\010 \002(\001\022\t"
    "\n\001i\030\t \002(\r\022\013\n\003i_c\030\n \002(\001\022\013\n\003f_1\030\013 \002(\001\022\013\n\003f"
    "_2\030\014 \002(\001\022\013\n\003f_3\030\r \002(\001\022\n\n\002fb\030\016 \002(\001\022\014\n\004hex"
    "p\030\017 \002(\001\022\014\n\004coin\030\020 \002(\001\"z\n\007DemoNPC\022\022\n\nnpc_"
    "change\030\001 \002(\r\022\017\n\007npc_max\030\002 \002(\r\022\r\n\005npc_m\030\003"
    " \002(\r\022\021\n\tnpc_extra\030\004 \002(\r\022\023\n\013npc_extra_s\030\005"
    " \002(\r\022\023\n\013npc_extra_m\030\006 \002(\r\")\n\017BattleRewar"
    "dDay\022\013\n\003day\030\001 \002(\r\022\t\n\001c\030\002 \002(\r\"b\n\014BattleRe"
    "ward\022\n\n\002id\030\001 \002(\r\022\t\n\001r\030\002 \002(\r\022\t\n\001c\030\003 \002(\r\022\n"
    "\n\002cu\030\004 \002(\r\022$\n\005count\030\005 \003(\0132\025.Demo.BattleR"
    "ewardDay\"&\n\nCityNPCDay\022\013\n\003day\030\001 \002(\r\022\013\n\003n"
    "pc\030\002 \003(\r\"M\n\nCityReward\022\n\n\002id\030\001 \002(\r\022\t\n\001r\030"
    "\002 \003(\r\022\t\n\001c\030\003 \003(\r\022\035\n\003npc\030\004 \003(\0132\020.Demo.Cit"
    "yNPCDay\"\217\003\n\004Demo\022(\n\ntimeconfig\030\001 \002(\0132\024.D"
    "emo.DemoTimeConfig\022*\n\013constconfig\030\002 \002(\0132"
    "\025.Demo.DemoConstConfig\022\035\n\004city\030\003 \003(\0132\017.D"
    "emo.DemoCityG\022$\n\tnormalnpc\030\004 \003(\0132\021.Demo."
    "DemoNPCTime\022$\n\tattacknpc\030\005 \003(\0132\021.Demo.De"
    "moNPCTime\022$\n\tdefendnpc\030\006 \003(\0132\021.Demo.Demo"
    "NPCTime\022 \n\006reward\030\007 \002(\0132\020.Demo.DemoRewar"
    "d\022\032\n\003npc\030\010 \002(\0132\r.Demo.DemoNPC\022\022\n\nkillrew"
    "ard\030\t \003(\r\022(\n\014battlereward\030\n \003(\0132\022.Demo.B"
    "attleReward\022$\n\ncityreward\030\013 \003(\0132\020.Demo.C"
    "ityReward", 1849);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Demo.proto", &protobuf_RegisterTypes);
  DemoTimeConfig::default_instance_ = new DemoTimeConfig();
  DemoConstConfig::default_instance_ = new DemoConstConfig();
  DemoNPCTime::default_instance_ = new DemoNPCTime();
  DemoCityG::default_instance_ = new DemoCityG();
  DemoReward::default_instance_ = new DemoReward();
  DemoNPC::default_instance_ = new DemoNPC();
  BattleRewardDay::default_instance_ = new BattleRewardDay();
  BattleReward::default_instance_ = new BattleReward();
  CityNPCDay::default_instance_ = new CityNPCDay();
  CityReward::default_instance_ = new CityReward();
  Demo::default_instance_ = new Demo();
  DemoTimeConfig::default_instance_->InitAsDefaultInstance();
  DemoConstConfig::default_instance_->InitAsDefaultInstance();
  DemoNPCTime::default_instance_->InitAsDefaultInstance();
  DemoCityG::default_instance_->InitAsDefaultInstance();
  DemoReward::default_instance_->InitAsDefaultInstance();
  DemoNPC::default_instance_->InitAsDefaultInstance();
  BattleRewardDay::default_instance_->InitAsDefaultInstance();
  BattleReward::default_instance_->InitAsDefaultInstance();
  CityNPCDay::default_instance_->InitAsDefaultInstance();
  CityReward::default_instance_->InitAsDefaultInstance();
  Demo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Demo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Demo_2eproto {
  StaticDescriptorInitializer_Demo_2eproto() {
    protobuf_AddDesc_Demo_2eproto();
  }
} static_descriptor_initializer_Demo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DemoTimeConfig::kNpcwaitFieldNumber;
const int DemoTimeConfig::kUserwaitFieldNumber;
const int DemoTimeConfig::kMoveFieldNumber;
const int DemoTimeConfig::kSkillFieldNumber;
const int DemoTimeConfig::kSkilldodgeFieldNumber;
const int DemoTimeConfig::kSkillattackFieldNumber;
const int DemoTimeConfig::kFormFieldNumber;
const int DemoTimeConfig::kAttackFieldNumber;
#endif  // !_MSC_VER

DemoTimeConfig::DemoTimeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.DemoTimeConfig)
}

void DemoTimeConfig::InitAsDefaultInstance() {
}

DemoTimeConfig::DemoTimeConfig(const DemoTimeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.DemoTimeConfig)
}

void DemoTimeConfig::SharedCtor() {
  _cached_size_ = 0;
  npcwait_ = 0u;
  userwait_ = 0u;
  move_ = 0u;
  skill_ = 0u;
  skilldodge_ = 0u;
  skillattack_ = 0u;
  form_ = 0u;
  attack_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DemoTimeConfig::~DemoTimeConfig() {
  // @@protoc_insertion_point(destructor:Demo.DemoTimeConfig)
  SharedDtor();
}

void DemoTimeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DemoTimeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoTimeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoTimeConfig_descriptor_;
}

const DemoTimeConfig& DemoTimeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

DemoTimeConfig* DemoTimeConfig::default_instance_ = NULL;

DemoTimeConfig* DemoTimeConfig::New() const {
  return new DemoTimeConfig;
}

void DemoTimeConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DemoTimeConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(npcwait_, attack_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DemoTimeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.DemoTimeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 npcwait = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcwait_)));
          set_has_npcwait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userwait;
        break;
      }

      // required uint32 userwait = 2;
      case 2: {
        if (tag == 16) {
         parse_userwait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userwait_)));
          set_has_userwait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_move;
        break;
      }

      // required uint32 move = 3;
      case 3: {
        if (tag == 24) {
         parse_move:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_)));
          set_has_move();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skill;
        break;
      }

      // required uint32 skill = 4;
      case 4: {
        if (tag == 32) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skilldodge;
        break;
      }

      // required uint32 skilldodge = 5;
      case 5: {
        if (tag == 40) {
         parse_skilldodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilldodge_)));
          set_has_skilldodge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skillattack;
        break;
      }

      // required uint32 skillattack = 6;
      case 6: {
        if (tag == 48) {
         parse_skillattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillattack_)));
          set_has_skillattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_form;
        break;
      }

      // required uint32 form = 7;
      case 7: {
        if (tag == 56) {
         parse_form:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &form_)));
          set_has_form();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_attack;
        break;
      }

      // required uint32 attack = 8;
      case 8: {
        if (tag == 64) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.DemoTimeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.DemoTimeConfig)
  return false;
#undef DO_
}

void DemoTimeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.DemoTimeConfig)
  // required uint32 npcwait = 1;
  if (has_npcwait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcwait(), output);
  }

  // required uint32 userwait = 2;
  if (has_userwait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->userwait(), output);
  }

  // required uint32 move = 3;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->move(), output);
  }

  // required uint32 skill = 4;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill(), output);
  }

  // required uint32 skilldodge = 5;
  if (has_skilldodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skilldodge(), output);
  }

  // required uint32 skillattack = 6;
  if (has_skillattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skillattack(), output);
  }

  // required uint32 form = 7;
  if (has_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->form(), output);
  }

  // required uint32 attack = 8;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->attack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.DemoTimeConfig)
}

::google::protobuf::uint8* DemoTimeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.DemoTimeConfig)
  // required uint32 npcwait = 1;
  if (has_npcwait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcwait(), target);
  }

  // required uint32 userwait = 2;
  if (has_userwait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->userwait(), target);
  }

  // required uint32 move = 3;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->move(), target);
  }

  // required uint32 skill = 4;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill(), target);
  }

  // required uint32 skilldodge = 5;
  if (has_skilldodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skilldodge(), target);
  }

  // required uint32 skillattack = 6;
  if (has_skillattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skillattack(), target);
  }

  // required uint32 form = 7;
  if (has_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->form(), target);
  }

  // required uint32 attack = 8;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->attack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.DemoTimeConfig)
  return target;
}

int DemoTimeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 npcwait = 1;
    if (has_npcwait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcwait());
    }

    // required uint32 userwait = 2;
    if (has_userwait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userwait());
    }

    // required uint32 move = 3;
    if (has_move()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move());
    }

    // required uint32 skill = 4;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill());
    }

    // required uint32 skilldodge = 5;
    if (has_skilldodge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilldodge());
    }

    // required uint32 skillattack = 6;
    if (has_skillattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillattack());
    }

    // required uint32 form = 7;
    if (has_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->form());
    }

    // required uint32 attack = 8;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoTimeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DemoTimeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DemoTimeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DemoTimeConfig::MergeFrom(const DemoTimeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcwait()) {
      set_npcwait(from.npcwait());
    }
    if (from.has_userwait()) {
      set_userwait(from.userwait());
    }
    if (from.has_move()) {
      set_move(from.move());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_skilldodge()) {
      set_skilldodge(from.skilldodge());
    }
    if (from.has_skillattack()) {
      set_skillattack(from.skillattack());
    }
    if (from.has_form()) {
      set_form(from.form());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DemoTimeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoTimeConfig::CopyFrom(const DemoTimeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoTimeConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void DemoTimeConfig::Swap(DemoTimeConfig* other) {
  if (other != this) {
    std::swap(npcwait_, other->npcwait_);
    std::swap(userwait_, other->userwait_);
    std::swap(move_, other->move_);
    std::swap(skill_, other->skill_);
    std::swap(skilldodge_, other->skilldodge_);
    std::swap(skillattack_, other->skillattack_);
    std::swap(form_, other->form_);
    std::swap(attack_, other->attack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DemoTimeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoTimeConfig_descriptor_;
  metadata.reflection = DemoTimeConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DemoConstConfig::kNpcskillFieldNumber;
const int DemoConstConfig::kUserskillFieldNumber;
const int DemoConstConfig::kSkillmaxFieldNumber;
const int DemoConstConfig::kSkillminFieldNumber;
const int DemoConstConfig::kSkillPAFieldNumber;
const int DemoConstConfig::kSkillPBFieldNumber;
const int DemoConstConfig::kSkillrangeFieldNumber;
const int DemoConstConfig::kSkillAFieldNumber;
const int DemoConstConfig::kSkillBFieldNumber;
const int DemoConstConfig::kSkillACFieldNumber;
const int DemoConstConfig::kSkillBCFieldNumber;
const int DemoConstConfig::kSkillCCFieldNumber;
const int DemoConstConfig::kSkillLFieldNumber;
const int DemoConstConfig::kSkillHFieldNumber;
const int DemoConstConfig::kFormSWFieldNumber;
const int DemoConstConfig::kFormSEFieldNumber;
const int DemoConstConfig::kFormSLFieldNumber;
const int DemoConstConfig::kFormWFieldNumber;
const int DemoConstConfig::kFormEFieldNumber;
const int DemoConstConfig::kFormLFieldNumber;
const int DemoConstConfig::kNpcattackFieldNumber;
const int DemoConstConfig::kUserattackFieldNumber;
const int DemoConstConfig::kHpCFieldNumber;
const int DemoConstConfig::kFSWFieldNumber;
const int DemoConstConfig::kFSEFieldNumber;
const int DemoConstConfig::kFWFieldNumber;
const int DemoConstConfig::kFEFieldNumber;
const int DemoConstConfig::kRAFieldNumber;
const int DemoConstConfig::kRBFieldNumber;
const int DemoConstConfig::kRCFieldNumber;
const int DemoConstConfig::kRandminFieldNumber;
const int DemoConstConfig::kRandmaxFieldNumber;
#endif  // !_MSC_VER

DemoConstConfig::DemoConstConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.DemoConstConfig)
}

void DemoConstConfig::InitAsDefaultInstance() {
}

DemoConstConfig::DemoConstConfig(const DemoConstConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.DemoConstConfig)
}

void DemoConstConfig::SharedCtor() {
  _cached_size_ = 0;
  npcskill_ = 0;
  userskill_ = 0;
  skillmax_ = 0;
  skillmin_ = 0;
  skill_p_a_ = 0;
  skill_p_b_ = 0;
  skillrange_ = 0;
  skill_a_ = 0;
  skill_b_ = 0;
  skill_a_c_ = 0;
  skill_b_c_ = 0;
  skill_c_c_ = 0;
  skill_l_ = 0;
  skill_h_ = 0;
  form_s_w_ = 0;
  form_s_e_ = 0;
  form_s_l_ = 0;
  form_w_ = 0;
  form_e_ = 0;
  form_l_ = 0;
  npcattack_ = 0;
  userattack_ = 0;
  hp_c_ = 0;
  f_s_w_ = 0;
  f_s_e_ = 0;
  f_w_ = 0;
  f_e_ = 0;
  r_a_ = 0;
  r_b_ = 0;
  r_c_ = 0;
  randmin_ = 0;
  randmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DemoConstConfig::~DemoConstConfig() {
  // @@protoc_insertion_point(destructor:Demo.DemoConstConfig)
  SharedDtor();
}

void DemoConstConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DemoConstConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoConstConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoConstConfig_descriptor_;
}

const DemoConstConfig& DemoConstConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

DemoConstConfig* DemoConstConfig::default_instance_ = NULL;

DemoConstConfig* DemoConstConfig::New() const {
  return new DemoConstConfig;
}

void DemoConstConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DemoConstConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(npcskill_, skill_a_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(skill_b_, form_s_e_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(form_s_l_, f_s_w_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(f_s_e_, randmax_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DemoConstConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.DemoConstConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 npcskill = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcskill_)));
          set_has_npcskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userskill;
        break;
      }

      // required int32 userskill = 2;
      case 2: {
        if (tag == 16) {
         parse_userskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userskill_)));
          set_has_userskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillmax;
        break;
      }

      // required int32 skillmax = 3;
      case 3: {
        if (tag == 24) {
         parse_skillmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillmax_)));
          set_has_skillmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skillmin;
        break;
      }

      // required int32 skillmin = 4;
      case 4: {
        if (tag == 32) {
         parse_skillmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillmin_)));
          set_has_skillmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skill_p_a;
        break;
      }

      // required int32 skill_p_a = 5;
      case 5: {
        if (tag == 40) {
         parse_skill_p_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_p_a_)));
          set_has_skill_p_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skill_p_b;
        break;
      }

      // required int32 skill_p_b = 6;
      case 6: {
        if (tag == 48) {
         parse_skill_p_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_p_b_)));
          set_has_skill_p_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_skillrange;
        break;
      }

      // required double skillrange = 7;
      case 7: {
        if (tag == 57) {
         parse_skillrange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &skillrange_)));
          set_has_skillrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_skill_a;
        break;
      }

      // required int32 skill_a = 8;
      case 8: {
        if (tag == 64) {
         parse_skill_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_a_)));
          set_has_skill_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_skill_b;
        break;
      }

      // required int32 skill_b = 9;
      case 9: {
        if (tag == 72) {
         parse_skill_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_b_)));
          set_has_skill_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_skill_a_c;
        break;
      }

      // required double skill_a_c = 10;
      case 10: {
        if (tag == 81) {
         parse_skill_a_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &skill_a_c_)));
          set_has_skill_a_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_skill_b_c;
        break;
      }

      // required double skill_b_c = 11;
      case 11: {
        if (tag == 89) {
         parse_skill_b_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &skill_b_c_)));
          set_has_skill_b_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_skill_c_c;
        break;
      }

      // required double skill_c_c = 12;
      case 12: {
        if (tag == 97) {
         parse_skill_c_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &skill_c_c_)));
          set_has_skill_c_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_skill_l;
        break;
      }

      // required int32 skill_l = 13;
      case 13: {
        if (tag == 104) {
         parse_skill_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_l_)));
          set_has_skill_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_skill_h;
        break;
      }

      // required int32 skill_h = 14;
      case 14: {
        if (tag == 112) {
         parse_skill_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_h_)));
          set_has_skill_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_form_s_w;
        break;
      }

      // required double form_s_w = 15;
      case 15: {
        if (tag == 121) {
         parse_form_s_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &form_s_w_)));
          set_has_form_s_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_form_s_e;
        break;
      }

      // required double form_s_e = 16;
      case 16: {
        if (tag == 129) {
         parse_form_s_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &form_s_e_)));
          set_has_form_s_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_form_s_l;
        break;
      }

      // required double form_s_l = 17;
      case 17: {
        if (tag == 137) {
         parse_form_s_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &form_s_l_)));
          set_has_form_s_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_form_w;
        break;
      }

      // required double form_w = 18;
      case 18: {
        if (tag == 145) {
         parse_form_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &form_w_)));
          set_has_form_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_form_e;
        break;
      }

      // required double form_e = 19;
      case 19: {
        if (tag == 153) {
         parse_form_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &form_e_)));
          set_has_form_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_form_l;
        break;
      }

      // required double form_l = 20;
      case 20: {
        if (tag == 161) {
         parse_form_l:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &form_l_)));
          set_has_form_l();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_npcattack;
        break;
      }

      // required double npcattack = 21;
      case 21: {
        if (tag == 169) {
         parse_npcattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &npcattack_)));
          set_has_npcattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_userattack;
        break;
      }

      // required double userattack = 22;
      case 22: {
        if (tag == 177) {
         parse_userattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &userattack_)));
          set_has_userattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_hp_c;
        break;
      }

      // required double hp_c = 23;
      case 23: {
        if (tag == 185) {
         parse_hp_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hp_c_)));
          set_has_hp_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_f_s_w;
        break;
      }

      // required double f_s_w = 24;
      case 24: {
        if (tag == 193) {
         parse_f_s_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_s_w_)));
          set_has_f_s_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_f_s_e;
        break;
      }

      // required double f_s_e = 25;
      case 25: {
        if (tag == 201) {
         parse_f_s_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_s_e_)));
          set_has_f_s_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_f_w;
        break;
      }

      // required double f_w = 26;
      case 26: {
        if (tag == 209) {
         parse_f_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_w_)));
          set_has_f_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_f_e;
        break;
      }

      // required double f_e = 27;
      case 27: {
        if (tag == 217) {
         parse_f_e:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_e_)));
          set_has_f_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_r_a;
        break;
      }

      // required double r_a = 28;
      case 28: {
        if (tag == 225) {
         parse_r_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_a_)));
          set_has_r_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(233)) goto parse_r_b;
        break;
      }

      // required double r_b = 29;
      case 29: {
        if (tag == 233) {
         parse_r_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_b_)));
          set_has_r_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_r_c;
        break;
      }

      // required double r_c = 30;
      case 30: {
        if (tag == 241) {
         parse_r_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_c_)));
          set_has_r_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_randmin;
        break;
      }

      // required int32 randmin = 31;
      case 31: {
        if (tag == 248) {
         parse_randmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randmin_)));
          set_has_randmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_randmax;
        break;
      }

      // required int32 randmax = 32;
      case 32: {
        if (tag == 256) {
         parse_randmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randmax_)));
          set_has_randmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.DemoConstConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.DemoConstConfig)
  return false;
#undef DO_
}

void DemoConstConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.DemoConstConfig)
  // required int32 npcskill = 1;
  if (has_npcskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npcskill(), output);
  }

  // required int32 userskill = 2;
  if (has_userskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userskill(), output);
  }

  // required int32 skillmax = 3;
  if (has_skillmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillmax(), output);
  }

  // required int32 skillmin = 4;
  if (has_skillmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillmin(), output);
  }

  // required int32 skill_p_a = 5;
  if (has_skill_p_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_p_a(), output);
  }

  // required int32 skill_p_b = 6;
  if (has_skill_p_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skill_p_b(), output);
  }

  // required double skillrange = 7;
  if (has_skillrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->skillrange(), output);
  }

  // required int32 skill_a = 8;
  if (has_skill_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->skill_a(), output);
  }

  // required int32 skill_b = 9;
  if (has_skill_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->skill_b(), output);
  }

  // required double skill_a_c = 10;
  if (has_skill_a_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->skill_a_c(), output);
  }

  // required double skill_b_c = 11;
  if (has_skill_b_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->skill_b_c(), output);
  }

  // required double skill_c_c = 12;
  if (has_skill_c_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->skill_c_c(), output);
  }

  // required int32 skill_l = 13;
  if (has_skill_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->skill_l(), output);
  }

  // required int32 skill_h = 14;
  if (has_skill_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->skill_h(), output);
  }

  // required double form_s_w = 15;
  if (has_form_s_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->form_s_w(), output);
  }

  // required double form_s_e = 16;
  if (has_form_s_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->form_s_e(), output);
  }

  // required double form_s_l = 17;
  if (has_form_s_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->form_s_l(), output);
  }

  // required double form_w = 18;
  if (has_form_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->form_w(), output);
  }

  // required double form_e = 19;
  if (has_form_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->form_e(), output);
  }

  // required double form_l = 20;
  if (has_form_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->form_l(), output);
  }

  // required double npcattack = 21;
  if (has_npcattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->npcattack(), output);
  }

  // required double userattack = 22;
  if (has_userattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->userattack(), output);
  }

  // required double hp_c = 23;
  if (has_hp_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->hp_c(), output);
  }

  // required double f_s_w = 24;
  if (has_f_s_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->f_s_w(), output);
  }

  // required double f_s_e = 25;
  if (has_f_s_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->f_s_e(), output);
  }

  // required double f_w = 26;
  if (has_f_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->f_w(), output);
  }

  // required double f_e = 27;
  if (has_f_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->f_e(), output);
  }

  // required double r_a = 28;
  if (has_r_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->r_a(), output);
  }

  // required double r_b = 29;
  if (has_r_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->r_b(), output);
  }

  // required double r_c = 30;
  if (has_r_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->r_c(), output);
  }

  // required int32 randmin = 31;
  if (has_randmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->randmin(), output);
  }

  // required int32 randmax = 32;
  if (has_randmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->randmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.DemoConstConfig)
}

::google::protobuf::uint8* DemoConstConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.DemoConstConfig)
  // required int32 npcskill = 1;
  if (has_npcskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npcskill(), target);
  }

  // required int32 userskill = 2;
  if (has_userskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userskill(), target);
  }

  // required int32 skillmax = 3;
  if (has_skillmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillmax(), target);
  }

  // required int32 skillmin = 4;
  if (has_skillmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillmin(), target);
  }

  // required int32 skill_p_a = 5;
  if (has_skill_p_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_p_a(), target);
  }

  // required int32 skill_p_b = 6;
  if (has_skill_p_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skill_p_b(), target);
  }

  // required double skillrange = 7;
  if (has_skillrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->skillrange(), target);
  }

  // required int32 skill_a = 8;
  if (has_skill_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->skill_a(), target);
  }

  // required int32 skill_b = 9;
  if (has_skill_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->skill_b(), target);
  }

  // required double skill_a_c = 10;
  if (has_skill_a_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->skill_a_c(), target);
  }

  // required double skill_b_c = 11;
  if (has_skill_b_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->skill_b_c(), target);
  }

  // required double skill_c_c = 12;
  if (has_skill_c_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->skill_c_c(), target);
  }

  // required int32 skill_l = 13;
  if (has_skill_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->skill_l(), target);
  }

  // required int32 skill_h = 14;
  if (has_skill_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->skill_h(), target);
  }

  // required double form_s_w = 15;
  if (has_form_s_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->form_s_w(), target);
  }

  // required double form_s_e = 16;
  if (has_form_s_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->form_s_e(), target);
  }

  // required double form_s_l = 17;
  if (has_form_s_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->form_s_l(), target);
  }

  // required double form_w = 18;
  if (has_form_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->form_w(), target);
  }

  // required double form_e = 19;
  if (has_form_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->form_e(), target);
  }

  // required double form_l = 20;
  if (has_form_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->form_l(), target);
  }

  // required double npcattack = 21;
  if (has_npcattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->npcattack(), target);
  }

  // required double userattack = 22;
  if (has_userattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->userattack(), target);
  }

  // required double hp_c = 23;
  if (has_hp_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->hp_c(), target);
  }

  // required double f_s_w = 24;
  if (has_f_s_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->f_s_w(), target);
  }

  // required double f_s_e = 25;
  if (has_f_s_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->f_s_e(), target);
  }

  // required double f_w = 26;
  if (has_f_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->f_w(), target);
  }

  // required double f_e = 27;
  if (has_f_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->f_e(), target);
  }

  // required double r_a = 28;
  if (has_r_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->r_a(), target);
  }

  // required double r_b = 29;
  if (has_r_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->r_b(), target);
  }

  // required double r_c = 30;
  if (has_r_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->r_c(), target);
  }

  // required int32 randmin = 31;
  if (has_randmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->randmin(), target);
  }

  // required int32 randmax = 32;
  if (has_randmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->randmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.DemoConstConfig)
  return target;
}

int DemoConstConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 npcskill = 1;
    if (has_npcskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcskill());
    }

    // required int32 userskill = 2;
    if (has_userskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userskill());
    }

    // required int32 skillmax = 3;
    if (has_skillmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillmax());
    }

    // required int32 skillmin = 4;
    if (has_skillmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillmin());
    }

    // required int32 skill_p_a = 5;
    if (has_skill_p_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_p_a());
    }

    // required int32 skill_p_b = 6;
    if (has_skill_p_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_p_b());
    }

    // required double skillrange = 7;
    if (has_skillrange()) {
      total_size += 1 + 8;
    }

    // required int32 skill_a = 8;
    if (has_skill_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_a());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 skill_b = 9;
    if (has_skill_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_b());
    }

    // required double skill_a_c = 10;
    if (has_skill_a_c()) {
      total_size += 1 + 8;
    }

    // required double skill_b_c = 11;
    if (has_skill_b_c()) {
      total_size += 1 + 8;
    }

    // required double skill_c_c = 12;
    if (has_skill_c_c()) {
      total_size += 1 + 8;
    }

    // required int32 skill_l = 13;
    if (has_skill_l()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_l());
    }

    // required int32 skill_h = 14;
    if (has_skill_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_h());
    }

    // required double form_s_w = 15;
    if (has_form_s_w()) {
      total_size += 1 + 8;
    }

    // required double form_s_e = 16;
    if (has_form_s_e()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double form_s_l = 17;
    if (has_form_s_l()) {
      total_size += 2 + 8;
    }

    // required double form_w = 18;
    if (has_form_w()) {
      total_size += 2 + 8;
    }

    // required double form_e = 19;
    if (has_form_e()) {
      total_size += 2 + 8;
    }

    // required double form_l = 20;
    if (has_form_l()) {
      total_size += 2 + 8;
    }

    // required double npcattack = 21;
    if (has_npcattack()) {
      total_size += 2 + 8;
    }

    // required double userattack = 22;
    if (has_userattack()) {
      total_size += 2 + 8;
    }

    // required double hp_c = 23;
    if (has_hp_c()) {
      total_size += 2 + 8;
    }

    // required double f_s_w = 24;
    if (has_f_s_w()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double f_s_e = 25;
    if (has_f_s_e()) {
      total_size += 2 + 8;
    }

    // required double f_w = 26;
    if (has_f_w()) {
      total_size += 2 + 8;
    }

    // required double f_e = 27;
    if (has_f_e()) {
      total_size += 2 + 8;
    }

    // required double r_a = 28;
    if (has_r_a()) {
      total_size += 2 + 8;
    }

    // required double r_b = 29;
    if (has_r_b()) {
      total_size += 2 + 8;
    }

    // required double r_c = 30;
    if (has_r_c()) {
      total_size += 2 + 8;
    }

    // required int32 randmin = 31;
    if (has_randmin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randmin());
    }

    // required int32 randmax = 32;
    if (has_randmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randmax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoConstConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DemoConstConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DemoConstConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DemoConstConfig::MergeFrom(const DemoConstConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcskill()) {
      set_npcskill(from.npcskill());
    }
    if (from.has_userskill()) {
      set_userskill(from.userskill());
    }
    if (from.has_skillmax()) {
      set_skillmax(from.skillmax());
    }
    if (from.has_skillmin()) {
      set_skillmin(from.skillmin());
    }
    if (from.has_skill_p_a()) {
      set_skill_p_a(from.skill_p_a());
    }
    if (from.has_skill_p_b()) {
      set_skill_p_b(from.skill_p_b());
    }
    if (from.has_skillrange()) {
      set_skillrange(from.skillrange());
    }
    if (from.has_skill_a()) {
      set_skill_a(from.skill_a());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skill_b()) {
      set_skill_b(from.skill_b());
    }
    if (from.has_skill_a_c()) {
      set_skill_a_c(from.skill_a_c());
    }
    if (from.has_skill_b_c()) {
      set_skill_b_c(from.skill_b_c());
    }
    if (from.has_skill_c_c()) {
      set_skill_c_c(from.skill_c_c());
    }
    if (from.has_skill_l()) {
      set_skill_l(from.skill_l());
    }
    if (from.has_skill_h()) {
      set_skill_h(from.skill_h());
    }
    if (from.has_form_s_w()) {
      set_form_s_w(from.form_s_w());
    }
    if (from.has_form_s_e()) {
      set_form_s_e(from.form_s_e());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_form_s_l()) {
      set_form_s_l(from.form_s_l());
    }
    if (from.has_form_w()) {
      set_form_w(from.form_w());
    }
    if (from.has_form_e()) {
      set_form_e(from.form_e());
    }
    if (from.has_form_l()) {
      set_form_l(from.form_l());
    }
    if (from.has_npcattack()) {
      set_npcattack(from.npcattack());
    }
    if (from.has_userattack()) {
      set_userattack(from.userattack());
    }
    if (from.has_hp_c()) {
      set_hp_c(from.hp_c());
    }
    if (from.has_f_s_w()) {
      set_f_s_w(from.f_s_w());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_f_s_e()) {
      set_f_s_e(from.f_s_e());
    }
    if (from.has_f_w()) {
      set_f_w(from.f_w());
    }
    if (from.has_f_e()) {
      set_f_e(from.f_e());
    }
    if (from.has_r_a()) {
      set_r_a(from.r_a());
    }
    if (from.has_r_b()) {
      set_r_b(from.r_b());
    }
    if (from.has_r_c()) {
      set_r_c(from.r_c());
    }
    if (from.has_randmin()) {
      set_randmin(from.randmin());
    }
    if (from.has_randmax()) {
      set_randmax(from.randmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DemoConstConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoConstConfig::CopyFrom(const DemoConstConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoConstConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;

  return true;
}

void DemoConstConfig::Swap(DemoConstConfig* other) {
  if (other != this) {
    std::swap(npcskill_, other->npcskill_);
    std::swap(userskill_, other->userskill_);
    std::swap(skillmax_, other->skillmax_);
    std::swap(skillmin_, other->skillmin_);
    std::swap(skill_p_a_, other->skill_p_a_);
    std::swap(skill_p_b_, other->skill_p_b_);
    std::swap(skillrange_, other->skillrange_);
    std::swap(skill_a_, other->skill_a_);
    std::swap(skill_b_, other->skill_b_);
    std::swap(skill_a_c_, other->skill_a_c_);
    std::swap(skill_b_c_, other->skill_b_c_);
    std::swap(skill_c_c_, other->skill_c_c_);
    std::swap(skill_l_, other->skill_l_);
    std::swap(skill_h_, other->skill_h_);
    std::swap(form_s_w_, other->form_s_w_);
    std::swap(form_s_e_, other->form_s_e_);
    std::swap(form_s_l_, other->form_s_l_);
    std::swap(form_w_, other->form_w_);
    std::swap(form_e_, other->form_e_);
    std::swap(form_l_, other->form_l_);
    std::swap(npcattack_, other->npcattack_);
    std::swap(userattack_, other->userattack_);
    std::swap(hp_c_, other->hp_c_);
    std::swap(f_s_w_, other->f_s_w_);
    std::swap(f_s_e_, other->f_s_e_);
    std::swap(f_w_, other->f_w_);
    std::swap(f_e_, other->f_e_);
    std::swap(r_a_, other->r_a_);
    std::swap(r_b_, other->r_b_);
    std::swap(r_c_, other->r_c_);
    std::swap(randmin_, other->randmin_);
    std::swap(randmax_, other->randmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DemoConstConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoConstConfig_descriptor_;
  metadata.reflection = DemoConstConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DemoNPCTime::kDayFieldNumber;
const int DemoNPCTime::kNpcidFieldNumber;
#endif  // !_MSC_VER

DemoNPCTime::DemoNPCTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.DemoNPCTime)
}

void DemoNPCTime::InitAsDefaultInstance() {
}

DemoNPCTime::DemoNPCTime(const DemoNPCTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.DemoNPCTime)
}

void DemoNPCTime::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DemoNPCTime::~DemoNPCTime() {
  // @@protoc_insertion_point(destructor:Demo.DemoNPCTime)
  SharedDtor();
}

void DemoNPCTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DemoNPCTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoNPCTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoNPCTime_descriptor_;
}

const DemoNPCTime& DemoNPCTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

DemoNPCTime* DemoNPCTime::default_instance_ = NULL;

DemoNPCTime* DemoNPCTime::New() const {
  return new DemoNPCTime;
}

void DemoNPCTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DemoNPCTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(day_, npcid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DemoNPCTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.DemoNPCTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_npcid;
        break;
      }

      // required uint32 npcid = 2;
      case 2: {
        if (tag == 16) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.DemoNPCTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.DemoNPCTime)
  return false;
#undef DO_
}

void DemoNPCTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.DemoNPCTime)
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // required uint32 npcid = 2;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.DemoNPCTime)
}

::google::protobuf::uint8* DemoNPCTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.DemoNPCTime)
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // required uint32 npcid = 2;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.DemoNPCTime)
  return target;
}

int DemoNPCTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 npcid = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoNPCTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DemoNPCTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DemoNPCTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DemoNPCTime::MergeFrom(const DemoNPCTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DemoNPCTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoNPCTime::CopyFrom(const DemoNPCTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoNPCTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DemoNPCTime::Swap(DemoNPCTime* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DemoNPCTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoNPCTime_descriptor_;
  metadata.reflection = DemoNPCTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DemoCityG::kCidFieldNumber;
const int DemoCityG::kGidFieldNumber;
const int DemoCityG::kScaleFieldNumber;
#endif  // !_MSC_VER

DemoCityG::DemoCityG()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.DemoCityG)
}

void DemoCityG::InitAsDefaultInstance() {
}

DemoCityG::DemoCityG(const DemoCityG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.DemoCityG)
}

void DemoCityG::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0u;
  gid_ = 0u;
  scale_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DemoCityG::~DemoCityG() {
  // @@protoc_insertion_point(destructor:Demo.DemoCityG)
  SharedDtor();
}

void DemoCityG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DemoCityG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoCityG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoCityG_descriptor_;
}

const DemoCityG& DemoCityG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

DemoCityG* DemoCityG::default_instance_ = NULL;

DemoCityG* DemoCityG::New() const {
  return new DemoCityG;
}

void DemoCityG::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DemoCityG*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cid_, scale_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DemoCityG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.DemoCityG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gid;
        break;
      }

      // required uint32 gid = 2;
      case 2: {
        if (tag == 16) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_scale;
        break;
      }

      // required uint32 scale = 3;
      case 3: {
        if (tag == 24) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.DemoCityG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.DemoCityG)
  return false;
#undef DO_
}

void DemoCityG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.DemoCityG)
  // required uint32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cid(), output);
  }

  // required uint32 gid = 2;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gid(), output);
  }

  // required uint32 scale = 3;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.DemoCityG)
}

::google::protobuf::uint8* DemoCityG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.DemoCityG)
  // required uint32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cid(), target);
  }

  // required uint32 gid = 2;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gid(), target);
  }

  // required uint32 scale = 3;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.DemoCityG)
  return target;
}

int DemoCityG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cid());
    }

    // required uint32 gid = 2;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gid());
    }

    // required uint32 scale = 3;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoCityG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DemoCityG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DemoCityG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DemoCityG::MergeFrom(const DemoCityG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DemoCityG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoCityG::CopyFrom(const DemoCityG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoCityG::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DemoCityG::Swap(DemoCityG* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(gid_, other->gid_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DemoCityG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoCityG_descriptor_;
  metadata.reflection = DemoCityG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DemoReward::kVCFieldNumber;
const int DemoReward::kBCWFieldNumber;
const int DemoReward::kBCOFieldNumber;
const int DemoReward::kC1FieldNumber;
const int DemoReward::kC2FieldNumber;
const int DemoReward::kC1CFieldNumber;
const int DemoReward::kC2CFieldNumber;
const int DemoReward::kC3CFieldNumber;
const int DemoReward::kIFieldNumber;
const int DemoReward::kICFieldNumber;
const int DemoReward::kF1FieldNumber;
const int DemoReward::kF2FieldNumber;
const int DemoReward::kF3FieldNumber;
const int DemoReward::kFbFieldNumber;
const int DemoReward::kHexpFieldNumber;
const int DemoReward::kCoinFieldNumber;
#endif  // !_MSC_VER

DemoReward::DemoReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.DemoReward)
}

void DemoReward::InitAsDefaultInstance() {
}

DemoReward::DemoReward(const DemoReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.DemoReward)
}

void DemoReward::SharedCtor() {
  _cached_size_ = 0;
  b_c_w_ = 0;
  b_c_o_ = 0;
  c_1_ = 0;
  c_2_ = 0;
  c_1_c_ = 0;
  c_2_c_ = 0;
  c_3_c_ = 0;
  i_ = 0u;
  i_c_ = 0;
  f_1_ = 0;
  f_2_ = 0;
  f_3_ = 0;
  fb_ = 0;
  hexp_ = 0;
  coin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DemoReward::~DemoReward() {
  // @@protoc_insertion_point(destructor:Demo.DemoReward)
  SharedDtor();
}

void DemoReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DemoReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoReward_descriptor_;
}

const DemoReward& DemoReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

DemoReward* DemoReward::default_instance_ = NULL;

DemoReward* DemoReward::New() const {
  return new DemoReward;
}

void DemoReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DemoReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(b_c_w_, c_3_c_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(i_c_, i_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  v_c_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DemoReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.DemoReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double v_c = 1;
      case 1: {
        if (tag == 9) {
         parse_v_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_v_c())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_v_c())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(9)) goto parse_v_c;
        if (input->ExpectTag(17)) goto parse_b_c_w;
        break;
      }

      // required double b_c_w = 2;
      case 2: {
        if (tag == 17) {
         parse_b_c_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_c_w_)));
          set_has_b_c_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_b_c_o;
        break;
      }

      // required double b_c_o = 3;
      case 3: {
        if (tag == 25) {
         parse_b_c_o:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_c_o_)));
          set_has_b_c_o();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_c_1;
        break;
      }

      // required double c_1 = 4;
      case 4: {
        if (tag == 33) {
         parse_c_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_1_)));
          set_has_c_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_c_2;
        break;
      }

      // required double c_2 = 5;
      case 5: {
        if (tag == 41) {
         parse_c_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_2_)));
          set_has_c_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_c_1_c;
        break;
      }

      // required double c_1_c = 6;
      case 6: {
        if (tag == 49) {
         parse_c_1_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_1_c_)));
          set_has_c_1_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_c_2_c;
        break;
      }

      // required double c_2_c = 7;
      case 7: {
        if (tag == 57) {
         parse_c_2_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_2_c_)));
          set_has_c_2_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_c_3_c;
        break;
      }

      // required double c_3_c = 8;
      case 8: {
        if (tag == 65) {
         parse_c_3_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_3_c_)));
          set_has_c_3_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_i;
        break;
      }

      // required uint32 i = 9;
      case 9: {
        if (tag == 72) {
         parse_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_i_c;
        break;
      }

      // required double i_c = 10;
      case 10: {
        if (tag == 81) {
         parse_i_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &i_c_)));
          set_has_i_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_f_1;
        break;
      }

      // required double f_1 = 11;
      case 11: {
        if (tag == 89) {
         parse_f_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_1_)));
          set_has_f_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_f_2;
        break;
      }

      // required double f_2 = 12;
      case 12: {
        if (tag == 97) {
         parse_f_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_2_)));
          set_has_f_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_f_3;
        break;
      }

      // required double f_3 = 13;
      case 13: {
        if (tag == 105) {
         parse_f_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &f_3_)));
          set_has_f_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_fb;
        break;
      }

      // required double fb = 14;
      case 14: {
        if (tag == 113) {
         parse_fb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fb_)));
          set_has_fb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_hexp;
        break;
      }

      // required double hexp = 15;
      case 15: {
        if (tag == 121) {
         parse_hexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hexp_)));
          set_has_hexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_coin;
        break;
      }

      // required double coin = 16;
      case 16: {
        if (tag == 129) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.DemoReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.DemoReward)
  return false;
#undef DO_
}

void DemoReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.DemoReward)
  // repeated double v_c = 1;
  for (int i = 0; i < this->v_c_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->v_c(i), output);
  }

  // required double b_c_w = 2;
  if (has_b_c_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->b_c_w(), output);
  }

  // required double b_c_o = 3;
  if (has_b_c_o()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->b_c_o(), output);
  }

  // required double c_1 = 4;
  if (has_c_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c_1(), output);
  }

  // required double c_2 = 5;
  if (has_c_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c_2(), output);
  }

  // required double c_1_c = 6;
  if (has_c_1_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->c_1_c(), output);
  }

  // required double c_2_c = 7;
  if (has_c_2_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->c_2_c(), output);
  }

  // required double c_3_c = 8;
  if (has_c_3_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->c_3_c(), output);
  }

  // required uint32 i = 9;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->i(), output);
  }

  // required double i_c = 10;
  if (has_i_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->i_c(), output);
  }

  // required double f_1 = 11;
  if (has_f_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->f_1(), output);
  }

  // required double f_2 = 12;
  if (has_f_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->f_2(), output);
  }

  // required double f_3 = 13;
  if (has_f_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->f_3(), output);
  }

  // required double fb = 14;
  if (has_fb()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->fb(), output);
  }

  // required double hexp = 15;
  if (has_hexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->hexp(), output);
  }

  // required double coin = 16;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.DemoReward)
}

::google::protobuf::uint8* DemoReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.DemoReward)
  // repeated double v_c = 1;
  for (int i = 0; i < this->v_c_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->v_c(i), target);
  }

  // required double b_c_w = 2;
  if (has_b_c_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->b_c_w(), target);
  }

  // required double b_c_o = 3;
  if (has_b_c_o()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->b_c_o(), target);
  }

  // required double c_1 = 4;
  if (has_c_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c_1(), target);
  }

  // required double c_2 = 5;
  if (has_c_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c_2(), target);
  }

  // required double c_1_c = 6;
  if (has_c_1_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->c_1_c(), target);
  }

  // required double c_2_c = 7;
  if (has_c_2_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->c_2_c(), target);
  }

  // required double c_3_c = 8;
  if (has_c_3_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->c_3_c(), target);
  }

  // required uint32 i = 9;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->i(), target);
  }

  // required double i_c = 10;
  if (has_i_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->i_c(), target);
  }

  // required double f_1 = 11;
  if (has_f_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->f_1(), target);
  }

  // required double f_2 = 12;
  if (has_f_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->f_2(), target);
  }

  // required double f_3 = 13;
  if (has_f_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->f_3(), target);
  }

  // required double fb = 14;
  if (has_fb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->fb(), target);
  }

  // required double hexp = 15;
  if (has_hexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->hexp(), target);
  }

  // required double coin = 16;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.DemoReward)
  return target;
}

int DemoReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required double b_c_w = 2;
    if (has_b_c_w()) {
      total_size += 1 + 8;
    }

    // required double b_c_o = 3;
    if (has_b_c_o()) {
      total_size += 1 + 8;
    }

    // required double c_1 = 4;
    if (has_c_1()) {
      total_size += 1 + 8;
    }

    // required double c_2 = 5;
    if (has_c_2()) {
      total_size += 1 + 8;
    }

    // required double c_1_c = 6;
    if (has_c_1_c()) {
      total_size += 1 + 8;
    }

    // required double c_2_c = 7;
    if (has_c_2_c()) {
      total_size += 1 + 8;
    }

    // required double c_3_c = 8;
    if (has_c_3_c()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 i = 9;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->i());
    }

    // required double i_c = 10;
    if (has_i_c()) {
      total_size += 1 + 8;
    }

    // required double f_1 = 11;
    if (has_f_1()) {
      total_size += 1 + 8;
    }

    // required double f_2 = 12;
    if (has_f_2()) {
      total_size += 1 + 8;
    }

    // required double f_3 = 13;
    if (has_f_3()) {
      total_size += 1 + 8;
    }

    // required double fb = 14;
    if (has_fb()) {
      total_size += 1 + 8;
    }

    // required double hexp = 15;
    if (has_hexp()) {
      total_size += 1 + 8;
    }

    // required double coin = 16;
    if (has_coin()) {
      total_size += 2 + 8;
    }

  }
  // repeated double v_c = 1;
  {
    int data_size = 0;
    data_size = 8 * this->v_c_size();
    total_size += 1 * this->v_c_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DemoReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DemoReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DemoReward::MergeFrom(const DemoReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  v_c_.MergeFrom(from.v_c_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_b_c_w()) {
      set_b_c_w(from.b_c_w());
    }
    if (from.has_b_c_o()) {
      set_b_c_o(from.b_c_o());
    }
    if (from.has_c_1()) {
      set_c_1(from.c_1());
    }
    if (from.has_c_2()) {
      set_c_2(from.c_2());
    }
    if (from.has_c_1_c()) {
      set_c_1_c(from.c_1_c());
    }
    if (from.has_c_2_c()) {
      set_c_2_c(from.c_2_c());
    }
    if (from.has_c_3_c()) {
      set_c_3_c(from.c_3_c());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_i_c()) {
      set_i_c(from.i_c());
    }
    if (from.has_f_1()) {
      set_f_1(from.f_1());
    }
    if (from.has_f_2()) {
      set_f_2(from.f_2());
    }
    if (from.has_f_3()) {
      set_f_3(from.f_3());
    }
    if (from.has_fb()) {
      set_fb(from.fb());
    }
    if (from.has_hexp()) {
      set_hexp(from.hexp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DemoReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoReward::CopyFrom(const DemoReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000fffe) != 0x0000fffe) return false;

  return true;
}

void DemoReward::Swap(DemoReward* other) {
  if (other != this) {
    v_c_.Swap(&other->v_c_);
    std::swap(b_c_w_, other->b_c_w_);
    std::swap(b_c_o_, other->b_c_o_);
    std::swap(c_1_, other->c_1_);
    std::swap(c_2_, other->c_2_);
    std::swap(c_1_c_, other->c_1_c_);
    std::swap(c_2_c_, other->c_2_c_);
    std::swap(c_3_c_, other->c_3_c_);
    std::swap(i_, other->i_);
    std::swap(i_c_, other->i_c_);
    std::swap(f_1_, other->f_1_);
    std::swap(f_2_, other->f_2_);
    std::swap(f_3_, other->f_3_);
    std::swap(fb_, other->fb_);
    std::swap(hexp_, other->hexp_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DemoReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoReward_descriptor_;
  metadata.reflection = DemoReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DemoNPC::kNpcChangeFieldNumber;
const int DemoNPC::kNpcMaxFieldNumber;
const int DemoNPC::kNpcMFieldNumber;
const int DemoNPC::kNpcExtraFieldNumber;
const int DemoNPC::kNpcExtraSFieldNumber;
const int DemoNPC::kNpcExtraMFieldNumber;
#endif  // !_MSC_VER

DemoNPC::DemoNPC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.DemoNPC)
}

void DemoNPC::InitAsDefaultInstance() {
}

DemoNPC::DemoNPC(const DemoNPC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.DemoNPC)
}

void DemoNPC::SharedCtor() {
  _cached_size_ = 0;
  npc_change_ = 0u;
  npc_max_ = 0u;
  npc_m_ = 0u;
  npc_extra_ = 0u;
  npc_extra_s_ = 0u;
  npc_extra_m_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DemoNPC::~DemoNPC() {
  // @@protoc_insertion_point(destructor:Demo.DemoNPC)
  SharedDtor();
}

void DemoNPC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DemoNPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemoNPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemoNPC_descriptor_;
}

const DemoNPC& DemoNPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

DemoNPC* DemoNPC::default_instance_ = NULL;

DemoNPC* DemoNPC::New() const {
  return new DemoNPC;
}

void DemoNPC::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DemoNPC*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(npc_change_, npc_extra_m_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DemoNPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.DemoNPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 npc_change = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_change_)));
          set_has_npc_change();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_npc_max;
        break;
      }

      // required uint32 npc_max = 2;
      case 2: {
        if (tag == 16) {
         parse_npc_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_max_)));
          set_has_npc_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npc_m;
        break;
      }

      // required uint32 npc_m = 3;
      case 3: {
        if (tag == 24) {
         parse_npc_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_m_)));
          set_has_npc_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npc_extra;
        break;
      }

      // required uint32 npc_extra = 4;
      case 4: {
        if (tag == 32) {
         parse_npc_extra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_extra_)));
          set_has_npc_extra();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_npc_extra_s;
        break;
      }

      // required uint32 npc_extra_s = 5;
      case 5: {
        if (tag == 40) {
         parse_npc_extra_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_extra_s_)));
          set_has_npc_extra_s();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_npc_extra_m;
        break;
      }

      // required uint32 npc_extra_m = 6;
      case 6: {
        if (tag == 48) {
         parse_npc_extra_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_extra_m_)));
          set_has_npc_extra_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.DemoNPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.DemoNPC)
  return false;
#undef DO_
}

void DemoNPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.DemoNPC)
  // required uint32 npc_change = 1;
  if (has_npc_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npc_change(), output);
  }

  // required uint32 npc_max = 2;
  if (has_npc_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->npc_max(), output);
  }

  // required uint32 npc_m = 3;
  if (has_npc_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npc_m(), output);
  }

  // required uint32 npc_extra = 4;
  if (has_npc_extra()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npc_extra(), output);
  }

  // required uint32 npc_extra_s = 5;
  if (has_npc_extra_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->npc_extra_s(), output);
  }

  // required uint32 npc_extra_m = 6;
  if (has_npc_extra_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->npc_extra_m(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.DemoNPC)
}

::google::protobuf::uint8* DemoNPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.DemoNPC)
  // required uint32 npc_change = 1;
  if (has_npc_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npc_change(), target);
  }

  // required uint32 npc_max = 2;
  if (has_npc_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->npc_max(), target);
  }

  // required uint32 npc_m = 3;
  if (has_npc_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npc_m(), target);
  }

  // required uint32 npc_extra = 4;
  if (has_npc_extra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npc_extra(), target);
  }

  // required uint32 npc_extra_s = 5;
  if (has_npc_extra_s()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->npc_extra_s(), target);
  }

  // required uint32 npc_extra_m = 6;
  if (has_npc_extra_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->npc_extra_m(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.DemoNPC)
  return target;
}

int DemoNPC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 npc_change = 1;
    if (has_npc_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_change());
    }

    // required uint32 npc_max = 2;
    if (has_npc_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_max());
    }

    // required uint32 npc_m = 3;
    if (has_npc_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_m());
    }

    // required uint32 npc_extra = 4;
    if (has_npc_extra()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_extra());
    }

    // required uint32 npc_extra_s = 5;
    if (has_npc_extra_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_extra_s());
    }

    // required uint32 npc_extra_m = 6;
    if (has_npc_extra_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npc_extra_m());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemoNPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DemoNPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DemoNPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DemoNPC::MergeFrom(const DemoNPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npc_change()) {
      set_npc_change(from.npc_change());
    }
    if (from.has_npc_max()) {
      set_npc_max(from.npc_max());
    }
    if (from.has_npc_m()) {
      set_npc_m(from.npc_m());
    }
    if (from.has_npc_extra()) {
      set_npc_extra(from.npc_extra());
    }
    if (from.has_npc_extra_s()) {
      set_npc_extra_s(from.npc_extra_s());
    }
    if (from.has_npc_extra_m()) {
      set_npc_extra_m(from.npc_extra_m());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DemoNPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemoNPC::CopyFrom(const DemoNPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemoNPC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DemoNPC::Swap(DemoNPC* other) {
  if (other != this) {
    std::swap(npc_change_, other->npc_change_);
    std::swap(npc_max_, other->npc_max_);
    std::swap(npc_m_, other->npc_m_);
    std::swap(npc_extra_, other->npc_extra_);
    std::swap(npc_extra_s_, other->npc_extra_s_);
    std::swap(npc_extra_m_, other->npc_extra_m_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DemoNPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemoNPC_descriptor_;
  metadata.reflection = DemoNPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRewardDay::kDayFieldNumber;
const int BattleRewardDay::kCFieldNumber;
#endif  // !_MSC_VER

BattleRewardDay::BattleRewardDay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.BattleRewardDay)
}

void BattleRewardDay::InitAsDefaultInstance() {
}

BattleRewardDay::BattleRewardDay(const BattleRewardDay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.BattleRewardDay)
}

void BattleRewardDay::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  c_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRewardDay::~BattleRewardDay() {
  // @@protoc_insertion_point(destructor:Demo.BattleRewardDay)
  SharedDtor();
}

void BattleRewardDay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleRewardDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleRewardDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleRewardDay_descriptor_;
}

const BattleRewardDay& BattleRewardDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

BattleRewardDay* BattleRewardDay::default_instance_ = NULL;

BattleRewardDay* BattleRewardDay::New() const {
  return new BattleRewardDay;
}

void BattleRewardDay::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleRewardDay*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(day_, c_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleRewardDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.BattleRewardDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_c;
        break;
      }

      // required uint32 c = 2;
      case 2: {
        if (tag == 16) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.BattleRewardDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.BattleRewardDay)
  return false;
#undef DO_
}

void BattleRewardDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.BattleRewardDay)
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // required uint32 c = 2;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.BattleRewardDay)
}

::google::protobuf::uint8* BattleRewardDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.BattleRewardDay)
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // required uint32 c = 2;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.BattleRewardDay)
  return target;
}

int BattleRewardDay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 c = 2;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRewardDay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleRewardDay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleRewardDay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleRewardDay::MergeFrom(const BattleRewardDay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleRewardDay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleRewardDay::CopyFrom(const BattleRewardDay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRewardDay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BattleRewardDay::Swap(BattleRewardDay* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleRewardDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleRewardDay_descriptor_;
  metadata.reflection = BattleRewardDay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleReward::kIdFieldNumber;
const int BattleReward::kRFieldNumber;
const int BattleReward::kCFieldNumber;
const int BattleReward::kCuFieldNumber;
const int BattleReward::kCountFieldNumber;
#endif  // !_MSC_VER

BattleReward::BattleReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.BattleReward)
}

void BattleReward::InitAsDefaultInstance() {
}

BattleReward::BattleReward(const BattleReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.BattleReward)
}

void BattleReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  r_ = 0u;
  c_ = 0u;
  cu_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleReward::~BattleReward() {
  // @@protoc_insertion_point(destructor:Demo.BattleReward)
  SharedDtor();
}

void BattleReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleReward_descriptor_;
}

const BattleReward& BattleReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

BattleReward* BattleReward::default_instance_ = NULL;

BattleReward* BattleReward::New() const {
  return new BattleReward;
}

void BattleReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, cu_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.BattleReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_r;
        break;
      }

      // required uint32 r = 2;
      case 2: {
        if (tag == 16) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_c;
        break;
      }

      // required uint32 c = 3;
      case 3: {
        if (tag == 24) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cu;
        break;
      }

      // required uint32 cu = 4;
      case 4: {
        if (tag == 32) {
         parse_cu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cu_)));
          set_has_cu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_count;
        break;
      }

      // repeated .Demo.BattleRewardDay count = 5;
      case 5: {
        if (tag == 42) {
         parse_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_count()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_count;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.BattleReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.BattleReward)
  return false;
#undef DO_
}

void BattleReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.BattleReward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 r = 2;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->r(), output);
  }

  // required uint32 c = 3;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->c(), output);
  }

  // required uint32 cu = 4;
  if (has_cu()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cu(), output);
  }

  // repeated .Demo.BattleRewardDay count = 5;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.BattleReward)
}

::google::protobuf::uint8* BattleReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.BattleReward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 r = 2;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->r(), target);
  }

  // required uint32 c = 3;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->c(), target);
  }

  // required uint32 cu = 4;
  if (has_cu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cu(), target);
  }

  // repeated .Demo.BattleRewardDay count = 5;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.BattleReward)
  return target;
}

int BattleReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 r = 2;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // required uint32 c = 3;
    if (has_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->c());
    }

    // required uint32 cu = 4;
    if (has_cu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cu());
    }

  }
  // repeated .Demo.BattleRewardDay count = 5;
  total_size += 1 * this->count_size();
  for (int i = 0; i < this->count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleReward::MergeFrom(const BattleReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  count_.MergeFrom(from.count_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_cu()) {
      set_cu(from.cu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleReward::CopyFrom(const BattleReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->count())) return false;
  return true;
}

void BattleReward::Swap(BattleReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(r_, other->r_);
    std::swap(c_, other->c_);
    std::swap(cu_, other->cu_);
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleReward_descriptor_;
  metadata.reflection = BattleReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityNPCDay::kDayFieldNumber;
const int CityNPCDay::kNpcFieldNumber;
#endif  // !_MSC_VER

CityNPCDay::CityNPCDay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.CityNPCDay)
}

void CityNPCDay::InitAsDefaultInstance() {
}

CityNPCDay::CityNPCDay(const CityNPCDay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.CityNPCDay)
}

void CityNPCDay::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityNPCDay::~CityNPCDay() {
  // @@protoc_insertion_point(destructor:Demo.CityNPCDay)
  SharedDtor();
}

void CityNPCDay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CityNPCDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityNPCDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityNPCDay_descriptor_;
}

const CityNPCDay& CityNPCDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

CityNPCDay* CityNPCDay::default_instance_ = NULL;

CityNPCDay* CityNPCDay::New() const {
  return new CityNPCDay;
}

void CityNPCDay::Clear() {
  day_ = 0u;
  npc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityNPCDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.CityNPCDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_npc;
        break;
      }

      // repeated uint32 npc = 2;
      case 2: {
        if (tag == 16) {
         parse_npc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_npc())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_npc())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_npc;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.CityNPCDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.CityNPCDay)
  return false;
#undef DO_
}

void CityNPCDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.CityNPCDay)
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // repeated uint32 npc = 2;
  for (int i = 0; i < this->npc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->npc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.CityNPCDay)
}

::google::protobuf::uint8* CityNPCDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.CityNPCDay)
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // repeated uint32 npc = 2;
  for (int i = 0; i < this->npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->npc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.CityNPCDay)
  return target;
}

int CityNPCDay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  // repeated uint32 npc = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->npc_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->npc(i));
    }
    total_size += 1 * this->npc_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityNPCDay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityNPCDay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityNPCDay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityNPCDay::MergeFrom(const CityNPCDay& from) {
  GOOGLE_CHECK_NE(&from, this);
  npc_.MergeFrom(from.npc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityNPCDay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityNPCDay::CopyFrom(const CityNPCDay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityNPCDay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CityNPCDay::Swap(CityNPCDay* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    npc_.Swap(&other->npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityNPCDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityNPCDay_descriptor_;
  metadata.reflection = CityNPCDay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityReward::kIdFieldNumber;
const int CityReward::kRFieldNumber;
const int CityReward::kCFieldNumber;
const int CityReward::kNpcFieldNumber;
#endif  // !_MSC_VER

CityReward::CityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.CityReward)
}

void CityReward::InitAsDefaultInstance() {
}

CityReward::CityReward(const CityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.CityReward)
}

void CityReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityReward::~CityReward() {
  // @@protoc_insertion_point(destructor:Demo.CityReward)
  SharedDtor();
}

void CityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityReward_descriptor_;
}

const CityReward& CityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

CityReward* CityReward::default_instance_ = NULL;

CityReward* CityReward::New() const {
  return new CityReward;
}

void CityReward::Clear() {
  id_ = 0u;
  r_.Clear();
  c_.Clear();
  npc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.CityReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_r;
        break;
      }

      // repeated uint32 r = 2;
      case 2: {
        if (tag == 16) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_r())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_r())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_r;
        if (input->ExpectTag(24)) goto parse_c;
        break;
      }

      // repeated uint32 c = 3;
      case 3: {
        if (tag == 24) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_c())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_c())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_c;
        if (input->ExpectTag(34)) goto parse_npc;
        break;
      }

      // repeated .Demo.CityNPCDay npc = 4;
      case 4: {
        if (tag == 34) {
         parse_npc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_npc;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.CityReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.CityReward)
  return false;
#undef DO_
}

void CityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.CityReward)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated uint32 r = 2;
  for (int i = 0; i < this->r_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->r(i), output);
  }

  // repeated uint32 c = 3;
  for (int i = 0; i < this->c_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->c(i), output);
  }

  // repeated .Demo.CityNPCDay npc = 4;
  for (int i = 0; i < this->npc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->npc(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.CityReward)
}

::google::protobuf::uint8* CityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.CityReward)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 r = 2;
  for (int i = 0; i < this->r_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->r(i), target);
  }

  // repeated uint32 c = 3;
  for (int i = 0; i < this->c_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->c(i), target);
  }

  // repeated .Demo.CityNPCDay npc = 4;
  for (int i = 0; i < this->npc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->npc(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.CityReward)
  return target;
}

int CityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated uint32 r = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->r_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->r(i));
    }
    total_size += 1 * this->r_size() + data_size;
  }

  // repeated uint32 c = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->c_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->c(i));
    }
    total_size += 1 * this->c_size() + data_size;
  }

  // repeated .Demo.CityNPCDay npc = 4;
  total_size += 1 * this->npc_size();
  for (int i = 0; i < this->npc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npc(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityReward::MergeFrom(const CityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  r_.MergeFrom(from.r_);
  c_.MergeFrom(from.c_);
  npc_.MergeFrom(from.npc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityReward::CopyFrom(const CityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->npc())) return false;
  return true;
}

void CityReward::Swap(CityReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    r_.Swap(&other->r_);
    c_.Swap(&other->c_);
    npc_.Swap(&other->npc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityReward_descriptor_;
  metadata.reflection = CityReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Demo::kTimeconfigFieldNumber;
const int Demo::kConstconfigFieldNumber;
const int Demo::kCityFieldNumber;
const int Demo::kNormalnpcFieldNumber;
const int Demo::kAttacknpcFieldNumber;
const int Demo::kDefendnpcFieldNumber;
const int Demo::kRewardFieldNumber;
const int Demo::kNpcFieldNumber;
const int Demo::kKillrewardFieldNumber;
const int Demo::kBattlerewardFieldNumber;
const int Demo::kCityrewardFieldNumber;
#endif  // !_MSC_VER

Demo::Demo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Demo.Demo)
}

void Demo::InitAsDefaultInstance() {
  timeconfig_ = const_cast< ::Demo::DemoTimeConfig*>(&::Demo::DemoTimeConfig::default_instance());
  constconfig_ = const_cast< ::Demo::DemoConstConfig*>(&::Demo::DemoConstConfig::default_instance());
  reward_ = const_cast< ::Demo::DemoReward*>(&::Demo::DemoReward::default_instance());
  npc_ = const_cast< ::Demo::DemoNPC*>(&::Demo::DemoNPC::default_instance());
}

Demo::Demo(const Demo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Demo.Demo)
}

void Demo::SharedCtor() {
  _cached_size_ = 0;
  timeconfig_ = NULL;
  constconfig_ = NULL;
  reward_ = NULL;
  npc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Demo::~Demo() {
  // @@protoc_insertion_point(destructor:Demo.Demo)
  SharedDtor();
}

void Demo::SharedDtor() {
  if (this != default_instance_) {
    delete timeconfig_;
    delete constconfig_;
    delete reward_;
    delete npc_;
  }
}

void Demo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Demo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Demo_descriptor_;
}

const Demo& Demo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Demo_2eproto();
  return *default_instance_;
}

Demo* Demo::default_instance_ = NULL;

Demo* Demo::New() const {
  return new Demo;
}

void Demo::Clear() {
  if (_has_bits_[0 / 32] & 195) {
    if (has_timeconfig()) {
      if (timeconfig_ != NULL) timeconfig_->::Demo::DemoTimeConfig::Clear();
    }
    if (has_constconfig()) {
      if (constconfig_ != NULL) constconfig_->::Demo::DemoConstConfig::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::Demo::DemoReward::Clear();
    }
    if (has_npc()) {
      if (npc_ != NULL) npc_->::Demo::DemoNPC::Clear();
    }
  }
  city_.Clear();
  normalnpc_.Clear();
  attacknpc_.Clear();
  defendnpc_.Clear();
  killreward_.Clear();
  battlereward_.Clear();
  cityreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Demo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Demo.Demo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Demo.DemoTimeConfig timeconfig = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_constconfig;
        break;
      }

      // required .Demo.DemoConstConfig constconfig = 2;
      case 2: {
        if (tag == 18) {
         parse_constconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_city;
        break;
      }

      // repeated .Demo.DemoCityG city = 3;
      case 3: {
        if (tag == 26) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_city()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_city;
        if (input->ExpectTag(34)) goto parse_normalnpc;
        break;
      }

      // repeated .Demo.DemoNPCTime normalnpc = 4;
      case 4: {
        if (tag == 34) {
         parse_normalnpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normalnpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_normalnpc;
        if (input->ExpectTag(42)) goto parse_attacknpc;
        break;
      }

      // repeated .Demo.DemoNPCTime attacknpc = 5;
      case 5: {
        if (tag == 42) {
         parse_attacknpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacknpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attacknpc;
        if (input->ExpectTag(50)) goto parse_defendnpc;
        break;
      }

      // repeated .Demo.DemoNPCTime defendnpc = 6;
      case 6: {
        if (tag == 50) {
         parse_defendnpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defendnpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_defendnpc;
        if (input->ExpectTag(58)) goto parse_reward;
        break;
      }

      // required .Demo.DemoReward reward = 7;
      case 7: {
        if (tag == 58) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_npc;
        break;
      }

      // required .Demo.DemoNPC npc = 8;
      case 8: {
        if (tag == 66) {
         parse_npc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_npc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_killreward;
        break;
      }

      // repeated uint32 killreward = 9;
      case 9: {
        if (tag == 72) {
         parse_killreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_killreward())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_killreward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_killreward;
        if (input->ExpectTag(82)) goto parse_battlereward;
        break;
      }

      // repeated .Demo.BattleReward battlereward = 10;
      case 10: {
        if (tag == 82) {
         parse_battlereward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlereward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_battlereward;
        if (input->ExpectTag(90)) goto parse_cityreward;
        break;
      }

      // repeated .Demo.CityReward cityreward = 11;
      case 11: {
        if (tag == 90) {
         parse_cityreward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cityreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cityreward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Demo.Demo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Demo.Demo)
  return false;
#undef DO_
}

void Demo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Demo.Demo)
  // required .Demo.DemoTimeConfig timeconfig = 1;
  if (has_timeconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timeconfig(), output);
  }

  // required .Demo.DemoConstConfig constconfig = 2;
  if (has_constconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->constconfig(), output);
  }

  // repeated .Demo.DemoCityG city = 3;
  for (int i = 0; i < this->city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->city(i), output);
  }

  // repeated .Demo.DemoNPCTime normalnpc = 4;
  for (int i = 0; i < this->normalnpc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->normalnpc(i), output);
  }

  // repeated .Demo.DemoNPCTime attacknpc = 5;
  for (int i = 0; i < this->attacknpc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attacknpc(i), output);
  }

  // repeated .Demo.DemoNPCTime defendnpc = 6;
  for (int i = 0; i < this->defendnpc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->defendnpc(i), output);
  }

  // required .Demo.DemoReward reward = 7;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->reward(), output);
  }

  // required .Demo.DemoNPC npc = 8;
  if (has_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->npc(), output);
  }

  // repeated uint32 killreward = 9;
  for (int i = 0; i < this->killreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->killreward(i), output);
  }

  // repeated .Demo.BattleReward battlereward = 10;
  for (int i = 0; i < this->battlereward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->battlereward(i), output);
  }

  // repeated .Demo.CityReward cityreward = 11;
  for (int i = 0; i < this->cityreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->cityreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Demo.Demo)
}

::google::protobuf::uint8* Demo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Demo.Demo)
  // required .Demo.DemoTimeConfig timeconfig = 1;
  if (has_timeconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timeconfig(), target);
  }

  // required .Demo.DemoConstConfig constconfig = 2;
  if (has_constconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->constconfig(), target);
  }

  // repeated .Demo.DemoCityG city = 3;
  for (int i = 0; i < this->city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->city(i), target);
  }

  // repeated .Demo.DemoNPCTime normalnpc = 4;
  for (int i = 0; i < this->normalnpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->normalnpc(i), target);
  }

  // repeated .Demo.DemoNPCTime attacknpc = 5;
  for (int i = 0; i < this->attacknpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attacknpc(i), target);
  }

  // repeated .Demo.DemoNPCTime defendnpc = 6;
  for (int i = 0; i < this->defendnpc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->defendnpc(i), target);
  }

  // required .Demo.DemoReward reward = 7;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->reward(), target);
  }

  // required .Demo.DemoNPC npc = 8;
  if (has_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->npc(), target);
  }

  // repeated uint32 killreward = 9;
  for (int i = 0; i < this->killreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->killreward(i), target);
  }

  // repeated .Demo.BattleReward battlereward = 10;
  for (int i = 0; i < this->battlereward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->battlereward(i), target);
  }

  // repeated .Demo.CityReward cityreward = 11;
  for (int i = 0; i < this->cityreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->cityreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Demo.Demo)
  return target;
}

int Demo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Demo.DemoTimeConfig timeconfig = 1;
    if (has_timeconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timeconfig());
    }

    // required .Demo.DemoConstConfig constconfig = 2;
    if (has_constconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->constconfig());
    }

    // required .Demo.DemoReward reward = 7;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // required .Demo.DemoNPC npc = 8;
    if (has_npc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->npc());
    }

  }
  // repeated .Demo.DemoCityG city = 3;
  total_size += 1 * this->city_size();
  for (int i = 0; i < this->city_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->city(i));
  }

  // repeated .Demo.DemoNPCTime normalnpc = 4;
  total_size += 1 * this->normalnpc_size();
  for (int i = 0; i < this->normalnpc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normalnpc(i));
  }

  // repeated .Demo.DemoNPCTime attacknpc = 5;
  total_size += 1 * this->attacknpc_size();
  for (int i = 0; i < this->attacknpc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacknpc(i));
  }

  // repeated .Demo.DemoNPCTime defendnpc = 6;
  total_size += 1 * this->defendnpc_size();
  for (int i = 0; i < this->defendnpc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defendnpc(i));
  }

  // repeated uint32 killreward = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->killreward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->killreward(i));
    }
    total_size += 1 * this->killreward_size() + data_size;
  }

  // repeated .Demo.BattleReward battlereward = 10;
  total_size += 1 * this->battlereward_size();
  for (int i = 0; i < this->battlereward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlereward(i));
  }

  // repeated .Demo.CityReward cityreward = 11;
  total_size += 1 * this->cityreward_size();
  for (int i = 0; i < this->cityreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cityreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Demo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Demo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Demo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Demo::MergeFrom(const Demo& from) {
  GOOGLE_CHECK_NE(&from, this);
  city_.MergeFrom(from.city_);
  normalnpc_.MergeFrom(from.normalnpc_);
  attacknpc_.MergeFrom(from.attacknpc_);
  defendnpc_.MergeFrom(from.defendnpc_);
  killreward_.MergeFrom(from.killreward_);
  battlereward_.MergeFrom(from.battlereward_);
  cityreward_.MergeFrom(from.cityreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeconfig()) {
      mutable_timeconfig()->::Demo::DemoTimeConfig::MergeFrom(from.timeconfig());
    }
    if (from.has_constconfig()) {
      mutable_constconfig()->::Demo::DemoConstConfig::MergeFrom(from.constconfig());
    }
    if (from.has_reward()) {
      mutable_reward()->::Demo::DemoReward::MergeFrom(from.reward());
    }
    if (from.has_npc()) {
      mutable_npc()->::Demo::DemoNPC::MergeFrom(from.npc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Demo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Demo::CopyFrom(const Demo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Demo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000c3) != 0x000000c3) return false;

  if (has_timeconfig()) {
    if (!this->timeconfig().IsInitialized()) return false;
  }
  if (has_constconfig()) {
    if (!this->constconfig().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->city())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->normalnpc())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attacknpc())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->defendnpc())) return false;
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  if (has_npc()) {
    if (!this->npc().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->battlereward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cityreward())) return false;
  return true;
}

void Demo::Swap(Demo* other) {
  if (other != this) {
    std::swap(timeconfig_, other->timeconfig_);
    std::swap(constconfig_, other->constconfig_);
    city_.Swap(&other->city_);
    normalnpc_.Swap(&other->normalnpc_);
    attacknpc_.Swap(&other->attacknpc_);
    defendnpc_.Swap(&other->defendnpc_);
    std::swap(reward_, other->reward_);
    std::swap(npc_, other->npc_);
    killreward_.Swap(&other->killreward_);
    battlereward_.Swap(&other->battlereward_);
    cityreward_.Swap(&other->cityreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Demo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Demo_descriptor_;
  metadata.reflection = Demo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Demo

// @@protoc_insertion_point(global_scope)
