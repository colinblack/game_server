// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModelTrialConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ModelTrialConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ModelTrialConfig {

namespace {

const ::google::protobuf::Descriptor* TrialGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrialGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelTrial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelTrial_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ModelTrialConfig_2eproto() {
  protobuf_AddDesc_ModelTrialConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ModelTrialConfig.proto");
  GOOGLE_CHECK(file != NULL);
  TrialGate_descriptor_ = file->message_type(0);
  static const int TrialGate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialGate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialGate, terrain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialGate, npcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialGate, first_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialGate, reward_),
  };
  TrialGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrialGate_descriptor_,
      TrialGate::default_instance_,
      TrialGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrialGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrialGate));
  ModelTrial_descriptor_ = file->message_type(1);
  static const int ModelTrial_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrial, maxtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrial, times_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrial, gates_),
  };
  ModelTrial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelTrial_descriptor_,
      ModelTrial::default_instance_,
      ModelTrial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelTrial));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ModelTrialConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrialGate_descriptor_, &TrialGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelTrial_descriptor_, &ModelTrial::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ModelTrialConfig_2eproto() {
  delete TrialGate::default_instance_;
  delete TrialGate_reflection_;
  delete ModelTrial::default_instance_;
  delete ModelTrial_reflection_;
}

void protobuf_AddDesc_ModelTrialConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ModelTrialConfig.proto\022\020ModelTrialConf"
    "ig\032\022RewardConfig.proto\"\210\001\n\tTrialGate\022\n\n\002"
    "id\030\001 \002(\r\022\017\n\007terrain\030\002 \002(\r\022\014\n\004npcs\030\003 \003(\r\022"
    "*\n\014first_reward\030\004 \003(\0132\024.RewardConfig.Rew"
    "ard\022$\n\006reward\030\005 \003(\0132\024.RewardConfig.Rewar"
    "d\"_\n\nModelTrial\022\020\n\010maxtimes\030\001 \002(\r\022\023\n\013tim"
    "es_price\030\002 \003(\r\022*\n\005gates\030\003 \003(\0132\033.ModelTri"
    "alConfig.TrialGate", 298);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ModelTrialConfig.proto", &protobuf_RegisterTypes);
  TrialGate::default_instance_ = new TrialGate();
  ModelTrial::default_instance_ = new ModelTrial();
  TrialGate::default_instance_->InitAsDefaultInstance();
  ModelTrial::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ModelTrialConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ModelTrialConfig_2eproto {
  StaticDescriptorInitializer_ModelTrialConfig_2eproto() {
    protobuf_AddDesc_ModelTrialConfig_2eproto();
  }
} static_descriptor_initializer_ModelTrialConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TrialGate::kIdFieldNumber;
const int TrialGate::kTerrainFieldNumber;
const int TrialGate::kNpcsFieldNumber;
const int TrialGate::kFirstRewardFieldNumber;
const int TrialGate::kRewardFieldNumber;
#endif  // !_MSC_VER

TrialGate::TrialGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ModelTrialConfig.TrialGate)
}

void TrialGate::InitAsDefaultInstance() {
}

TrialGate::TrialGate(const TrialGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ModelTrialConfig.TrialGate)
}

void TrialGate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  terrain_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrialGate::~TrialGate() {
  // @@protoc_insertion_point(destructor:ModelTrialConfig.TrialGate)
  SharedDtor();
}

void TrialGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrialGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrialGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrialGate_descriptor_;
}

const TrialGate& TrialGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ModelTrialConfig_2eproto();
  return *default_instance_;
}

TrialGate* TrialGate::default_instance_ = NULL;

TrialGate* TrialGate::New() const {
  return new TrialGate;
}

void TrialGate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrialGate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, terrain_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  npcs_.Clear();
  first_reward_.Clear();
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrialGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ModelTrialConfig.TrialGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_terrain;
        break;
      }

      // required uint32 terrain = 2;
      case 2: {
        if (tag == 16) {
         parse_terrain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terrain_)));
          set_has_terrain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcs;
        break;
      }

      // repeated uint32 npcs = 3;
      case 3: {
        if (tag == 24) {
         parse_npcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_npcs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_npcs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcs;
        if (input->ExpectTag(34)) goto parse_first_reward;
        break;
      }

      // repeated .RewardConfig.Reward first_reward = 4;
      case 4: {
        if (tag == 34) {
         parse_first_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_first_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_first_reward;
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // repeated .RewardConfig.Reward reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ModelTrialConfig.TrialGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ModelTrialConfig.TrialGate)
  return false;
#undef DO_
}

void TrialGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ModelTrialConfig.TrialGate)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 terrain = 2;
  if (has_terrain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->terrain(), output);
  }

  // repeated uint32 npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->npcs(i), output);
  }

  // repeated .RewardConfig.Reward first_reward = 4;
  for (int i = 0; i < this->first_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->first_reward(i), output);
  }

  // repeated .RewardConfig.Reward reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ModelTrialConfig.TrialGate)
}

::google::protobuf::uint8* TrialGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModelTrialConfig.TrialGate)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 terrain = 2;
  if (has_terrain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->terrain(), target);
  }

  // repeated uint32 npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->npcs(i), target);
  }

  // repeated .RewardConfig.Reward first_reward = 4;
  for (int i = 0; i < this->first_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->first_reward(i), target);
  }

  // repeated .RewardConfig.Reward reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModelTrialConfig.TrialGate)
  return target;
}

int TrialGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 terrain = 2;
    if (has_terrain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terrain());
    }

  }
  // repeated uint32 npcs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->npcs(i));
    }
    total_size += 1 * this->npcs_size() + data_size;
  }

  // repeated .RewardConfig.Reward first_reward = 4;
  total_size += 1 * this->first_reward_size();
  for (int i = 0; i < this->first_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->first_reward(i));
  }

  // repeated .RewardConfig.Reward reward = 5;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrialGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrialGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrialGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrialGate::MergeFrom(const TrialGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  first_reward_.MergeFrom(from.first_reward_);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_terrain()) {
      set_terrain(from.terrain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrialGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrialGate::CopyFrom(const TrialGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrialGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->first_reward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void TrialGate::Swap(TrialGate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(terrain_, other->terrain_);
    npcs_.Swap(&other->npcs_);
    first_reward_.Swap(&other->first_reward_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrialGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrialGate_descriptor_;
  metadata.reflection = TrialGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelTrial::kMaxtimesFieldNumber;
const int ModelTrial::kTimesPriceFieldNumber;
const int ModelTrial::kGatesFieldNumber;
#endif  // !_MSC_VER

ModelTrial::ModelTrial()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ModelTrialConfig.ModelTrial)
}

void ModelTrial::InitAsDefaultInstance() {
}

ModelTrial::ModelTrial(const ModelTrial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ModelTrialConfig.ModelTrial)
}

void ModelTrial::SharedCtor() {
  _cached_size_ = 0;
  maxtimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelTrial::~ModelTrial() {
  // @@protoc_insertion_point(destructor:ModelTrialConfig.ModelTrial)
  SharedDtor();
}

void ModelTrial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModelTrial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelTrial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelTrial_descriptor_;
}

const ModelTrial& ModelTrial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ModelTrialConfig_2eproto();
  return *default_instance_;
}

ModelTrial* ModelTrial::default_instance_ = NULL;

ModelTrial* ModelTrial::New() const {
  return new ModelTrial;
}

void ModelTrial::Clear() {
  maxtimes_ = 0u;
  times_price_.Clear();
  gates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelTrial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ModelTrialConfig.ModelTrial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maxtimes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtimes_)));
          set_has_maxtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times_price;
        break;
      }

      // repeated uint32 times_price = 2;
      case 2: {
        if (tag == 16) {
         parse_times_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_times_price())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_times_price())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_times_price;
        if (input->ExpectTag(26)) goto parse_gates;
        break;
      }

      // repeated .ModelTrialConfig.TrialGate gates = 3;
      case 3: {
        if (tag == 26) {
         parse_gates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ModelTrialConfig.ModelTrial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ModelTrialConfig.ModelTrial)
  return false;
#undef DO_
}

void ModelTrial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ModelTrialConfig.ModelTrial)
  // required uint32 maxtimes = 1;
  if (has_maxtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxtimes(), output);
  }

  // repeated uint32 times_price = 2;
  for (int i = 0; i < this->times_price_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->times_price(i), output);
  }

  // repeated .ModelTrialConfig.TrialGate gates = 3;
  for (int i = 0; i < this->gates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ModelTrialConfig.ModelTrial)
}

::google::protobuf::uint8* ModelTrial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModelTrialConfig.ModelTrial)
  // required uint32 maxtimes = 1;
  if (has_maxtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxtimes(), target);
  }

  // repeated uint32 times_price = 2;
  for (int i = 0; i < this->times_price_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->times_price(i), target);
  }

  // repeated .ModelTrialConfig.TrialGate gates = 3;
  for (int i = 0; i < this->gates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModelTrialConfig.ModelTrial)
  return target;
}

int ModelTrial::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maxtimes = 1;
    if (has_maxtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtimes());
    }

  }
  // repeated uint32 times_price = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->times_price_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->times_price(i));
    }
    total_size += 1 * this->times_price_size() + data_size;
  }

  // repeated .ModelTrialConfig.TrialGate gates = 3;
  total_size += 1 * this->gates_size();
  for (int i = 0; i < this->gates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelTrial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelTrial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelTrial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelTrial::MergeFrom(const ModelTrial& from) {
  GOOGLE_CHECK_NE(&from, this);
  times_price_.MergeFrom(from.times_price_);
  gates_.MergeFrom(from.gates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxtimes()) {
      set_maxtimes(from.maxtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelTrial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTrial::CopyFrom(const ModelTrial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTrial::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->gates())) return false;
  return true;
}

void ModelTrial::Swap(ModelTrial* other) {
  if (other != this) {
    std::swap(maxtimes_, other->maxtimes_);
    times_price_.Swap(&other->times_price_);
    gates_.Swap(&other->gates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelTrial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelTrial_descriptor_;
  metadata.reflection = ModelTrial_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ModelTrialConfig

// @@protoc_insertion_point(global_scope)
