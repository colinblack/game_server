// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OlEquipment.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OlEquipment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EquipmentConfig {

namespace {

const ::google::protobuf::Descriptor* Born_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Born_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equip_reflection_ = NULL;
const ::google::protobuf::Descriptor* SPProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SPProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NormalGiftBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NormalGiftBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckGiftBagItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckGiftBagItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuckGiftBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuckGiftBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeLimitProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeLimitProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OlEquipment_2eproto() {
  protobuf_AddDesc_OlEquipment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OlEquipment.proto");
  GOOGLE_CHECK(file != NULL);
  Born_descriptor_ = file->message_type(0);
  static const int Born_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Born, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Born, val_),
  };
  Born_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Born_descriptor_,
      Born::default_instance_,
      Born_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Born, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Born, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Born));
  Equip_descriptor_ = file->message_type(1);
  static const int Equip_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, postion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, born_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, character_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, limitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, price_),
  };
  Equip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equip_descriptor_,
      Equip::default_instance_,
      Equip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equip));
  SPProperty_descriptor_ = file->message_type(2);
  static const int SPProperty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPProperty, ch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPProperty, value_),
  };
  SPProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SPProperty_descriptor_,
      SPProperty::default_instance_,
      SPProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SPProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SPProperty));
  EquipExp_descriptor_ = file->message_type(3);
  static const int EquipExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExp, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExp, exp_),
  };
  EquipExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipExp_descriptor_,
      EquipExp::default_instance_,
      EquipExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipExp));
  NormalGiftBag_descriptor_ = file->message_type(4);
  static const int NormalGiftBag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGiftBag, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGiftBag, gifts_),
  };
  NormalGiftBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NormalGiftBag_descriptor_,
      NormalGiftBag::default_instance_,
      NormalGiftBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGiftBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NormalGiftBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NormalGiftBag));
  LuckGiftBagItem_descriptor_ = file->message_type(5);
  static const int LuckGiftBagItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBagItem, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBagItem, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBagItem, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBagItem, component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBagItem, prob_),
  };
  LuckGiftBagItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckGiftBagItem_descriptor_,
      LuckGiftBagItem::default_instance_,
      LuckGiftBagItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBagItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBagItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckGiftBagItem));
  LuckGiftBag_descriptor_ = file->message_type(6);
  static const int LuckGiftBag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBag, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBag, numbers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBag, gifts_),
  };
  LuckGiftBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuckGiftBag_descriptor_,
      LuckGiftBag::default_instance_,
      LuckGiftBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuckGiftBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuckGiftBag));
  TimeLimitProp_descriptor_ = file->message_type(7);
  static const int TimeLimitProp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitProp, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitProp, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitProp, valid_peroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitProp, value_),
  };
  TimeLimitProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeLimitProp_descriptor_,
      TimeLimitProp::default_instance_,
      TimeLimitProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimitProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeLimitProp));
  EquipList_descriptor_ = file->message_type(8);
  static const int EquipList_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, chmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, spprop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, equipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, normal_giftbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, luck_giftbag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, time_limit_prop_),
  };
  EquipList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipList_descriptor_,
      EquipList::default_instance_,
      EquipList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OlEquipment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Born_descriptor_, &Born::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equip_descriptor_, &Equip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SPProperty_descriptor_, &SPProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipExp_descriptor_, &EquipExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NormalGiftBag_descriptor_, &NormalGiftBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckGiftBagItem_descriptor_, &LuckGiftBagItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuckGiftBag_descriptor_, &LuckGiftBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeLimitProp_descriptor_, &TimeLimitProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipList_descriptor_, &EquipList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OlEquipment_2eproto() {
  delete Born::default_instance_;
  delete Born_reflection_;
  delete Equip::default_instance_;
  delete Equip_reflection_;
  delete SPProperty::default_instance_;
  delete SPProperty_reflection_;
  delete EquipExp::default_instance_;
  delete EquipExp_reflection_;
  delete NormalGiftBag::default_instance_;
  delete NormalGiftBag_reflection_;
  delete LuckGiftBagItem::default_instance_;
  delete LuckGiftBagItem_reflection_;
  delete LuckGiftBag::default_instance_;
  delete LuckGiftBag_reflection_;
  delete TimeLimitProp::default_instance_;
  delete TimeLimitProp_reflection_;
  delete EquipList::default_instance_;
  delete EquipList_reflection_;
}

void protobuf_AddDesc_OlEquipment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::VipGiftConfig::protobuf_AddDesc_VipGiftConfig_2eproto();
  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021OlEquipment.proto\022\017EquipmentConfig\032\023Vi"
    "pGiftConfig.proto\032\026CommonGiftConfig.prot"
    "o\032\022RewardConfig.proto\"!\n\004Born\022\014\n\004type\030\001 "
    "\002(\r\022\013\n\003val\030\002 \002(\r\"\233\001\n\005Equip\022\014\n\004eqid\030\001 \002(\r"
    "\022\014\n\004type\030\002 \002(\r\022\017\n\007postion\030\003 \002(\r\022#\n\004born\030"
    "\004 \003(\0132\025.EquipmentConfig.Born\022\014\n\004star\030\005 \002"
    "(\r\022\021\n\tcharacter\030\006 \002(\r\022\020\n\010limitnum\030\007 \002(\r\022"
    "\r\n\005price\030\010 \002(\r\"\'\n\nSPProperty\022\n\n\002ch\030\001 \002(\r"
    "\022\r\n\005value\030\002 \003(\r\"%\n\010EquipExp\022\014\n\004eqid\030\001 \002("
    "\r\022\013\n\003exp\030\002 \002(\r\"B\n\rNormalGiftBag\022\014\n\004eqid\030"
    "\001 \002(\r\022#\n\005gifts\030\002 \003(\0132\024.RewardConfig.Rewa"
    "rd\"\261\001\n\017LuckGiftBagItem\022*\n\006equips\030\001 \001(\0132\032"
    ".VipGiftConfig.EquipReward\022*\n\004base\030\002 \001(\013"
    "2\034.CommonGiftConfig.BaseReward\022\014\n\004hero\030\003"
    " \001(\r\022*\n\tcomponent\030\004 \001(\0132\027.RewardConfig.C"
    "omponent\022\014\n\004prob\030\005 \002(\r\"]\n\013LuckGiftBag\022\014\n"
    "\004eqid\030\001 \002(\r\022\017\n\007numbers\030\002 \002(\r\022/\n\005gifts\030\003 "
    "\003(\0132 .EquipmentConfig.LuckGiftBagItem\"U\n"
    "\rTimeLimitProp\022\014\n\004eqid\030\001 \002(\r\022\021\n\tattribut"
    "e\030\002 \002(\r\022\024\n\014valid_peroid\030\003 \002(\r\022\r\n\005value\030\004"
    " \002(\r\"\301\002\n\tEquipList\022&\n\006equips\030\001 \003(\0132\026.Equ"
    "ipmentConfig.Equip\022\r\n\005chmax\030\002 \002(\r\022+\n\006spP"
    "rop\030\003 \003(\0132\033.EquipmentConfig.SPProperty\022+"
    "\n\010equipexp\030\004 \003(\0132\031.EquipmentConfig.Equip"
    "Exp\0226\n\016normal_giftbag\030\005 \003(\0132\036.EquipmentC"
    "onfig.NormalGiftBag\0222\n\014luck_giftbag\030\006 \003("
    "\0132\034.EquipmentConfig.LuckGiftBag\0227\n\017time_"
    "limit_prop\030\007 \003(\0132\036.EquipmentConfig.TimeL"
    "imitProp", 1128);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OlEquipment.proto", &protobuf_RegisterTypes);
  Born::default_instance_ = new Born();
  Equip::default_instance_ = new Equip();
  SPProperty::default_instance_ = new SPProperty();
  EquipExp::default_instance_ = new EquipExp();
  NormalGiftBag::default_instance_ = new NormalGiftBag();
  LuckGiftBagItem::default_instance_ = new LuckGiftBagItem();
  LuckGiftBag::default_instance_ = new LuckGiftBag();
  TimeLimitProp::default_instance_ = new TimeLimitProp();
  EquipList::default_instance_ = new EquipList();
  Born::default_instance_->InitAsDefaultInstance();
  Equip::default_instance_->InitAsDefaultInstance();
  SPProperty::default_instance_->InitAsDefaultInstance();
  EquipExp::default_instance_->InitAsDefaultInstance();
  NormalGiftBag::default_instance_->InitAsDefaultInstance();
  LuckGiftBagItem::default_instance_->InitAsDefaultInstance();
  LuckGiftBag::default_instance_->InitAsDefaultInstance();
  TimeLimitProp::default_instance_->InitAsDefaultInstance();
  EquipList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OlEquipment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OlEquipment_2eproto {
  StaticDescriptorInitializer_OlEquipment_2eproto() {
    protobuf_AddDesc_OlEquipment_2eproto();
  }
} static_descriptor_initializer_OlEquipment_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Born::kTypeFieldNumber;
const int Born::kValFieldNumber;
#endif  // !_MSC_VER

Born::Born()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipmentConfig.Born)
}

void Born::InitAsDefaultInstance() {
}

Born::Born(const Born& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipmentConfig.Born)
}

void Born::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Born::~Born() {
  // @@protoc_insertion_point(destructor:EquipmentConfig.Born)
  SharedDtor();
}

void Born::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Born::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Born::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Born_descriptor_;
}

const Born& Born::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OlEquipment_2eproto();
  return *default_instance_;
}

Born* Born::default_instance_ = NULL;

Born* Born::New() const {
  return new Born;
}

void Born::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Born*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, val_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Born::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipmentConfig.Born)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // required uint32 val = 2;
      case 2: {
        if (tag == 16) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipmentConfig.Born)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipmentConfig.Born)
  return false;
#undef DO_
}

void Born::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipmentConfig.Born)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipmentConfig.Born)
}

::google::protobuf::uint8* Born::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipmentConfig.Born)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipmentConfig.Born)
  return target;
}

int Born::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Born::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Born* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Born*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Born::MergeFrom(const Born& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Born::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Born::CopyFrom(const Born& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Born::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Born::Swap(Born* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Born::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Born_descriptor_;
  metadata.reflection = Born_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Equip::kEqidFieldNumber;
const int Equip::kTypeFieldNumber;
const int Equip::kPostionFieldNumber;
const int Equip::kBornFieldNumber;
const int Equip::kStarFieldNumber;
const int Equip::kCharacterFieldNumber;
const int Equip::kLimitnumFieldNumber;
const int Equip::kPriceFieldNumber;
#endif  // !_MSC_VER

Equip::Equip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipmentConfig.Equip)
}

void Equip::InitAsDefaultInstance() {
}

Equip::Equip(const Equip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipmentConfig.Equip)
}

void Equip::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  type_ = 0u;
  postion_ = 0u;
  star_ = 0u;
  character_ = 0u;
  limitnum_ = 0u;
  price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equip::~Equip() {
  // @@protoc_insertion_point(destructor:EquipmentConfig.Equip)
  SharedDtor();
}

void Equip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Equip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equip_descriptor_;
}

const Equip& Equip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OlEquipment_2eproto();
  return *default_instance_;
}

Equip* Equip::default_instance_ = NULL;

Equip* Equip::New() const {
  return new Equip;
}

void Equip::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Equip*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(eqid_, type_);
    ZR_(postion_, price_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  born_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipmentConfig.Equip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_postion;
        break;
      }

      // required uint32 postion = 3;
      case 3: {
        if (tag == 24) {
         parse_postion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postion_)));
          set_has_postion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_born;
        break;
      }

      // repeated .EquipmentConfig.Born born = 4;
      case 4: {
        if (tag == 34) {
         parse_born:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_born()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_born;
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // required uint32 star = 5;
      case 5: {
        if (tag == 40) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_character;
        break;
      }

      // required uint32 character = 6;
      case 6: {
        if (tag == 48) {
         parse_character:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_)));
          set_has_character();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_limitnum;
        break;
      }

      // required uint32 limitnum = 7;
      case 7: {
        if (tag == 56) {
         parse_limitnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limitnum_)));
          set_has_limitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_price;
        break;
      }

      // required uint32 price = 8;
      case 8: {
        if (tag == 64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipmentConfig.Equip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipmentConfig.Equip)
  return false;
#undef DO_
}

void Equip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipmentConfig.Equip)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 postion = 3;
  if (has_postion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->postion(), output);
  }

  // repeated .EquipmentConfig.Born born = 4;
  for (int i = 0; i < this->born_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->born(i), output);
  }

  // required uint32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->star(), output);
  }

  // required uint32 character = 6;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->character(), output);
  }

  // required uint32 limitnum = 7;
  if (has_limitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->limitnum(), output);
  }

  // required uint32 price = 8;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipmentConfig.Equip)
}

::google::protobuf::uint8* Equip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipmentConfig.Equip)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 postion = 3;
  if (has_postion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->postion(), target);
  }

  // repeated .EquipmentConfig.Born born = 4;
  for (int i = 0; i < this->born_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->born(i), target);
  }

  // required uint32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->star(), target);
  }

  // required uint32 character = 6;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->character(), target);
  }

  // required uint32 limitnum = 7;
  if (has_limitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->limitnum(), target);
  }

  // required uint32 price = 8;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipmentConfig.Equip)
  return target;
}

int Equip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 postion = 3;
    if (has_postion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postion());
    }

    // required uint32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 character = 6;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->character());
    }

    // required uint32 limitnum = 7;
    if (has_limitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limitnum());
    }

    // required uint32 price = 8;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

  }
  // repeated .EquipmentConfig.Born born = 4;
  total_size += 1 * this->born_size();
  for (int i = 0; i < this->born_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->born(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equip::MergeFrom(const Equip& from) {
  GOOGLE_CHECK_NE(&from, this);
  born_.MergeFrom(from.born_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_postion()) {
      set_postion(from.postion());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_character()) {
      set_character(from.character());
    }
    if (from.has_limitnum()) {
      set_limitnum(from.limitnum());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equip::CopyFrom(const Equip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000f7) != 0x000000f7) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->born())) return false;
  return true;
}

void Equip::Swap(Equip* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(type_, other->type_);
    std::swap(postion_, other->postion_);
    born_.Swap(&other->born_);
    std::swap(star_, other->star_);
    std::swap(character_, other->character_);
    std::swap(limitnum_, other->limitnum_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equip_descriptor_;
  metadata.reflection = Equip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SPProperty::kChFieldNumber;
const int SPProperty::kValueFieldNumber;
#endif  // !_MSC_VER

SPProperty::SPProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipmentConfig.SPProperty)
}

void SPProperty::InitAsDefaultInstance() {
}

SPProperty::SPProperty(const SPProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipmentConfig.SPProperty)
}

void SPProperty::SharedCtor() {
  _cached_size_ = 0;
  ch_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SPProperty::~SPProperty() {
  // @@protoc_insertion_point(destructor:EquipmentConfig.SPProperty)
  SharedDtor();
}

void SPProperty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SPProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SPProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SPProperty_descriptor_;
}

const SPProperty& SPProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OlEquipment_2eproto();
  return *default_instance_;
}

SPProperty* SPProperty::default_instance_ = NULL;

SPProperty* SPProperty::New() const {
  return new SPProperty;
}

void SPProperty::Clear() {
  ch_ = 0u;
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SPProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipmentConfig.SPProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ch_)));
          set_has_ch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // repeated uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_value())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipmentConfig.SPProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipmentConfig.SPProperty)
  return false;
#undef DO_
}

void SPProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipmentConfig.SPProperty)
  // required uint32 ch = 1;
  if (has_ch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ch(), output);
  }

  // repeated uint32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipmentConfig.SPProperty)
}

::google::protobuf::uint8* SPProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipmentConfig.SPProperty)
  // required uint32 ch = 1;
  if (has_ch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ch(), target);
  }

  // repeated uint32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipmentConfig.SPProperty)
  return target;
}

int SPProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ch = 1;
    if (has_ch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ch());
    }

  }
  // repeated uint32 value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SPProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SPProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SPProperty::MergeFrom(const SPProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ch()) {
      set_ch(from.ch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SPProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SPProperty::CopyFrom(const SPProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SPProperty::Swap(SPProperty* other) {
  if (other != this) {
    std::swap(ch_, other->ch_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SPProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SPProperty_descriptor_;
  metadata.reflection = SPProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipExp::kEqidFieldNumber;
const int EquipExp::kExpFieldNumber;
#endif  // !_MSC_VER

EquipExp::EquipExp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipmentConfig.EquipExp)
}

void EquipExp::InitAsDefaultInstance() {
}

EquipExp::EquipExp(const EquipExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipmentConfig.EquipExp)
}

void EquipExp::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipExp::~EquipExp() {
  // @@protoc_insertion_point(destructor:EquipmentConfig.EquipExp)
  SharedDtor();
}

void EquipExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipExp_descriptor_;
}

const EquipExp& EquipExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OlEquipment_2eproto();
  return *default_instance_;
}

EquipExp* EquipExp::default_instance_ = NULL;

EquipExp* EquipExp::New() const {
  return new EquipExp;
}

void EquipExp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipExp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipmentConfig.EquipExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required uint32 exp = 2;
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipmentConfig.EquipExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipmentConfig.EquipExp)
  return false;
#undef DO_
}

void EquipExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipmentConfig.EquipExp)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipmentConfig.EquipExp)
}

::google::protobuf::uint8* EquipExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipmentConfig.EquipExp)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipmentConfig.EquipExp)
  return target;
}

int EquipExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipExp::MergeFrom(const EquipExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipExp::CopyFrom(const EquipExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipExp::Swap(EquipExp* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipExp_descriptor_;
  metadata.reflection = EquipExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NormalGiftBag::kEqidFieldNumber;
const int NormalGiftBag::kGiftsFieldNumber;
#endif  // !_MSC_VER

NormalGiftBag::NormalGiftBag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipmentConfig.NormalGiftBag)
}

void NormalGiftBag::InitAsDefaultInstance() {
}

NormalGiftBag::NormalGiftBag(const NormalGiftBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipmentConfig.NormalGiftBag)
}

void NormalGiftBag::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NormalGiftBag::~NormalGiftBag() {
  // @@protoc_insertion_point(destructor:EquipmentConfig.NormalGiftBag)
  SharedDtor();
}

void NormalGiftBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NormalGiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalGiftBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NormalGiftBag_descriptor_;
}

const NormalGiftBag& NormalGiftBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OlEquipment_2eproto();
  return *default_instance_;
}

NormalGiftBag* NormalGiftBag::default_instance_ = NULL;

NormalGiftBag* NormalGiftBag::New() const {
  return new NormalGiftBag;
}

void NormalGiftBag::Clear() {
  eqid_ = 0u;
  gifts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NormalGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipmentConfig.NormalGiftBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gifts;
        break;
      }

      // repeated .RewardConfig.Reward gifts = 2;
      case 2: {
        if (tag == 18) {
         parse_gifts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gifts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_gifts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipmentConfig.NormalGiftBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipmentConfig.NormalGiftBag)
  return false;
#undef DO_
}

void NormalGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipmentConfig.NormalGiftBag)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // repeated .RewardConfig.Reward gifts = 2;
  for (int i = 0; i < this->gifts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gifts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipmentConfig.NormalGiftBag)
}

::google::protobuf::uint8* NormalGiftBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipmentConfig.NormalGiftBag)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // repeated .RewardConfig.Reward gifts = 2;
  for (int i = 0; i < this->gifts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gifts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipmentConfig.NormalGiftBag)
  return target;
}

int NormalGiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

  }
  // repeated .RewardConfig.Reward gifts = 2;
  total_size += 1 * this->gifts_size();
  for (int i = 0; i < this->gifts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gifts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalGiftBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NormalGiftBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NormalGiftBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NormalGiftBag::MergeFrom(const NormalGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  gifts_.MergeFrom(from.gifts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NormalGiftBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalGiftBag::CopyFrom(const NormalGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalGiftBag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->gifts())) return false;
  return true;
}

void NormalGiftBag::Swap(NormalGiftBag* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    gifts_.Swap(&other->gifts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NormalGiftBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NormalGiftBag_descriptor_;
  metadata.reflection = NormalGiftBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckGiftBagItem::kEquipsFieldNumber;
const int LuckGiftBagItem::kBaseFieldNumber;
const int LuckGiftBagItem::kHeroFieldNumber;
const int LuckGiftBagItem::kComponentFieldNumber;
const int LuckGiftBagItem::kProbFieldNumber;
#endif  // !_MSC_VER

LuckGiftBagItem::LuckGiftBagItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipmentConfig.LuckGiftBagItem)
}

void LuckGiftBagItem::InitAsDefaultInstance() {
  equips_ = const_cast< ::VipGiftConfig::EquipReward*>(&::VipGiftConfig::EquipReward::default_instance());
  base_ = const_cast< ::CommonGiftConfig::BaseReward*>(&::CommonGiftConfig::BaseReward::default_instance());
  component_ = const_cast< ::RewardConfig::Component*>(&::RewardConfig::Component::default_instance());
}

LuckGiftBagItem::LuckGiftBagItem(const LuckGiftBagItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipmentConfig.LuckGiftBagItem)
}

void LuckGiftBagItem::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  hero_ = 0u;
  component_ = NULL;
  prob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckGiftBagItem::~LuckGiftBagItem() {
  // @@protoc_insertion_point(destructor:EquipmentConfig.LuckGiftBagItem)
  SharedDtor();
}

void LuckGiftBagItem::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
    delete component_;
  }
}

void LuckGiftBagItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckGiftBagItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckGiftBagItem_descriptor_;
}

const LuckGiftBagItem& LuckGiftBagItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OlEquipment_2eproto();
  return *default_instance_;
}

LuckGiftBagItem* LuckGiftBagItem::default_instance_ = NULL;

LuckGiftBagItem* LuckGiftBagItem::New() const {
  return new LuckGiftBagItem;
}

void LuckGiftBagItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LuckGiftBagItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(hero_, prob_);
    if (has_equips()) {
      if (equips_ != NULL) equips_->::VipGiftConfig::EquipReward::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
    }
    if (has_component()) {
      if (component_ != NULL) component_->::RewardConfig::Component::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckGiftBagItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipmentConfig.LuckGiftBagItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .VipGiftConfig.EquipReward equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .CommonGiftConfig.BaseReward base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero;
        break;
      }

      // optional uint32 hero = 3;
      case 3: {
        if (tag == 24) {
         parse_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_)));
          set_has_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_component;
        break;
      }

      // optional .RewardConfig.Component component = 4;
      case 4: {
        if (tag == 34) {
         parse_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prob;
        break;
      }

      // required uint32 prob = 5;
      case 5: {
        if (tag == 40) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipmentConfig.LuckGiftBagItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipmentConfig.LuckGiftBagItem)
  return false;
#undef DO_
}

void LuckGiftBagItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipmentConfig.LuckGiftBagItem)
  // optional .VipGiftConfig.EquipReward equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // optional .CommonGiftConfig.BaseReward base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // optional uint32 hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero(), output);
  }

  // optional .RewardConfig.Component component = 4;
  if (has_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->component(), output);
  }

  // required uint32 prob = 5;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipmentConfig.LuckGiftBagItem)
}

::google::protobuf::uint8* LuckGiftBagItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipmentConfig.LuckGiftBagItem)
  // optional .VipGiftConfig.EquipReward equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // optional .CommonGiftConfig.BaseReward base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // optional uint32 hero = 3;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero(), target);
  }

  // optional .RewardConfig.Component component = 4;
  if (has_component()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->component(), target);
  }

  // required uint32 prob = 5;
  if (has_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipmentConfig.LuckGiftBagItem)
  return target;
}

int LuckGiftBagItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .VipGiftConfig.EquipReward equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .CommonGiftConfig.BaseReward base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional uint32 hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero());
    }

    // optional .RewardConfig.Component component = 4;
    if (has_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->component());
    }

    // required uint32 prob = 5;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckGiftBagItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckGiftBagItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckGiftBagItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckGiftBagItem::MergeFrom(const LuckGiftBagItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::VipGiftConfig::EquipReward::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::CommonGiftConfig::BaseReward::MergeFrom(from.base());
    }
    if (from.has_hero()) {
      set_hero(from.hero());
    }
    if (from.has_component()) {
      mutable_component()->::RewardConfig::Component::MergeFrom(from.component());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckGiftBagItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckGiftBagItem::CopyFrom(const LuckGiftBagItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckGiftBagItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_component()) {
    if (!this->component().IsInitialized()) return false;
  }
  return true;
}

void LuckGiftBagItem::Swap(LuckGiftBagItem* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(base_, other->base_);
    std::swap(hero_, other->hero_);
    std::swap(component_, other->component_);
    std::swap(prob_, other->prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckGiftBagItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckGiftBagItem_descriptor_;
  metadata.reflection = LuckGiftBagItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuckGiftBag::kEqidFieldNumber;
const int LuckGiftBag::kNumbersFieldNumber;
const int LuckGiftBag::kGiftsFieldNumber;
#endif  // !_MSC_VER

LuckGiftBag::LuckGiftBag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipmentConfig.LuckGiftBag)
}

void LuckGiftBag::InitAsDefaultInstance() {
}

LuckGiftBag::LuckGiftBag(const LuckGiftBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipmentConfig.LuckGiftBag)
}

void LuckGiftBag::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  numbers_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuckGiftBag::~LuckGiftBag() {
  // @@protoc_insertion_point(destructor:EquipmentConfig.LuckGiftBag)
  SharedDtor();
}

void LuckGiftBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuckGiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuckGiftBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuckGiftBag_descriptor_;
}

const LuckGiftBag& LuckGiftBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OlEquipment_2eproto();
  return *default_instance_;
}

LuckGiftBag* LuckGiftBag::default_instance_ = NULL;

LuckGiftBag* LuckGiftBag::New() const {
  return new LuckGiftBag;
}

void LuckGiftBag::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LuckGiftBag*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, numbers_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  gifts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuckGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipmentConfig.LuckGiftBag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numbers;
        break;
      }

      // required uint32 numbers = 2;
      case 2: {
        if (tag == 16) {
         parse_numbers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numbers_)));
          set_has_numbers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gifts;
        break;
      }

      // repeated .EquipmentConfig.LuckGiftBagItem gifts = 3;
      case 3: {
        if (tag == 26) {
         parse_gifts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gifts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gifts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipmentConfig.LuckGiftBag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipmentConfig.LuckGiftBag)
  return false;
#undef DO_
}

void LuckGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipmentConfig.LuckGiftBag)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 numbers = 2;
  if (has_numbers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->numbers(), output);
  }

  // repeated .EquipmentConfig.LuckGiftBagItem gifts = 3;
  for (int i = 0; i < this->gifts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gifts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipmentConfig.LuckGiftBag)
}

::google::protobuf::uint8* LuckGiftBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipmentConfig.LuckGiftBag)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 numbers = 2;
  if (has_numbers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->numbers(), target);
  }

  // repeated .EquipmentConfig.LuckGiftBagItem gifts = 3;
  for (int i = 0; i < this->gifts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gifts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipmentConfig.LuckGiftBag)
  return target;
}

int LuckGiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 numbers = 2;
    if (has_numbers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numbers());
    }

  }
  // repeated .EquipmentConfig.LuckGiftBagItem gifts = 3;
  total_size += 1 * this->gifts_size();
  for (int i = 0; i < this->gifts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gifts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuckGiftBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuckGiftBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuckGiftBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuckGiftBag::MergeFrom(const LuckGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  gifts_.MergeFrom(from.gifts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_numbers()) {
      set_numbers(from.numbers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuckGiftBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuckGiftBag::CopyFrom(const LuckGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuckGiftBag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->gifts())) return false;
  return true;
}

void LuckGiftBag::Swap(LuckGiftBag* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(numbers_, other->numbers_);
    gifts_.Swap(&other->gifts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuckGiftBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuckGiftBag_descriptor_;
  metadata.reflection = LuckGiftBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLimitProp::kEqidFieldNumber;
const int TimeLimitProp::kAttributeFieldNumber;
const int TimeLimitProp::kValidPeroidFieldNumber;
const int TimeLimitProp::kValueFieldNumber;
#endif  // !_MSC_VER

TimeLimitProp::TimeLimitProp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipmentConfig.TimeLimitProp)
}

void TimeLimitProp::InitAsDefaultInstance() {
}

TimeLimitProp::TimeLimitProp(const TimeLimitProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipmentConfig.TimeLimitProp)
}

void TimeLimitProp::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  attribute_ = 0u;
  valid_peroid_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLimitProp::~TimeLimitProp() {
  // @@protoc_insertion_point(destructor:EquipmentConfig.TimeLimitProp)
  SharedDtor();
}

void TimeLimitProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeLimitProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeLimitProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeLimitProp_descriptor_;
}

const TimeLimitProp& TimeLimitProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OlEquipment_2eproto();
  return *default_instance_;
}

TimeLimitProp* TimeLimitProp::default_instance_ = NULL;

TimeLimitProp* TimeLimitProp::New() const {
  return new TimeLimitProp;
}

void TimeLimitProp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TimeLimitProp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eqid_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeLimitProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipmentConfig.TimeLimitProp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attribute;
        break;
      }

      // required uint32 attribute = 2;
      case 2: {
        if (tag == 16) {
         parse_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_)));
          set_has_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_valid_peroid;
        break;
      }

      // required uint32 valid_peroid = 3;
      case 3: {
        if (tag == 24) {
         parse_valid_peroid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_peroid_)));
          set_has_valid_peroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required uint32 value = 4;
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipmentConfig.TimeLimitProp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipmentConfig.TimeLimitProp)
  return false;
#undef DO_
}

void TimeLimitProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipmentConfig.TimeLimitProp)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // required uint32 attribute = 2;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute(), output);
  }

  // required uint32 valid_peroid = 3;
  if (has_valid_peroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->valid_peroid(), output);
  }

  // required uint32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipmentConfig.TimeLimitProp)
}

::google::protobuf::uint8* TimeLimitProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipmentConfig.TimeLimitProp)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // required uint32 attribute = 2;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute(), target);
  }

  // required uint32 valid_peroid = 3;
  if (has_valid_peroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->valid_peroid(), target);
  }

  // required uint32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipmentConfig.TimeLimitProp)
  return target;
}

int TimeLimitProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // required uint32 attribute = 2;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute());
    }

    // required uint32 valid_peroid = 3;
    if (has_valid_peroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_peroid());
    }

    // required uint32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLimitProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeLimitProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeLimitProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeLimitProp::MergeFrom(const TimeLimitProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
    if (from.has_valid_peroid()) {
      set_valid_peroid(from.valid_peroid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeLimitProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeLimitProp::CopyFrom(const TimeLimitProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLimitProp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TimeLimitProp::Swap(TimeLimitProp* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(attribute_, other->attribute_);
    std::swap(valid_peroid_, other->valid_peroid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeLimitProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeLimitProp_descriptor_;
  metadata.reflection = TimeLimitProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipList::kEquipsFieldNumber;
const int EquipList::kChmaxFieldNumber;
const int EquipList::kSpPropFieldNumber;
const int EquipList::kEquipexpFieldNumber;
const int EquipList::kNormalGiftbagFieldNumber;
const int EquipList::kLuckGiftbagFieldNumber;
const int EquipList::kTimeLimitPropFieldNumber;
#endif  // !_MSC_VER

EquipList::EquipList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EquipmentConfig.EquipList)
}

void EquipList::InitAsDefaultInstance() {
}

EquipList::EquipList(const EquipList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EquipmentConfig.EquipList)
}

void EquipList::SharedCtor() {
  _cached_size_ = 0;
  chmax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipList::~EquipList() {
  // @@protoc_insertion_point(destructor:EquipmentConfig.EquipList)
  SharedDtor();
}

void EquipList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipList_descriptor_;
}

const EquipList& EquipList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OlEquipment_2eproto();
  return *default_instance_;
}

EquipList* EquipList::default_instance_ = NULL;

EquipList* EquipList::New() const {
  return new EquipList;
}

void EquipList::Clear() {
  chmax_ = 0u;
  equips_.Clear();
  spprop_.Clear();
  equipexp_.Clear();
  normal_giftbag_.Clear();
  luck_giftbag_.Clear();
  time_limit_prop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EquipmentConfig.EquipList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .EquipmentConfig.Equip equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectTag(16)) goto parse_chmax;
        break;
      }

      // required uint32 chmax = 2;
      case 2: {
        if (tag == 16) {
         parse_chmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chmax_)));
          set_has_chmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spProp;
        break;
      }

      // repeated .EquipmentConfig.SPProperty spProp = 3;
      case 3: {
        if (tag == 26) {
         parse_spProp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spprop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spProp;
        if (input->ExpectTag(34)) goto parse_equipexp;
        break;
      }

      // repeated .EquipmentConfig.EquipExp equipexp = 4;
      case 4: {
        if (tag == 34) {
         parse_equipexp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipexp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equipexp;
        if (input->ExpectTag(42)) goto parse_normal_giftbag;
        break;
      }

      // repeated .EquipmentConfig.NormalGiftBag normal_giftbag = 5;
      case 5: {
        if (tag == 42) {
         parse_normal_giftbag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normal_giftbag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_normal_giftbag;
        if (input->ExpectTag(50)) goto parse_luck_giftbag;
        break;
      }

      // repeated .EquipmentConfig.LuckGiftBag luck_giftbag = 6;
      case 6: {
        if (tag == 50) {
         parse_luck_giftbag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_luck_giftbag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_luck_giftbag;
        if (input->ExpectTag(58)) goto parse_time_limit_prop;
        break;
      }

      // repeated .EquipmentConfig.TimeLimitProp time_limit_prop = 7;
      case 7: {
        if (tag == 58) {
         parse_time_limit_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time_limit_prop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_time_limit_prop;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EquipmentConfig.EquipList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EquipmentConfig.EquipList)
  return false;
#undef DO_
}

void EquipList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EquipmentConfig.EquipList)
  // repeated .EquipmentConfig.Equip equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  // required uint32 chmax = 2;
  if (has_chmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chmax(), output);
  }

  // repeated .EquipmentConfig.SPProperty spProp = 3;
  for (int i = 0; i < this->spprop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spprop(i), output);
  }

  // repeated .EquipmentConfig.EquipExp equipexp = 4;
  for (int i = 0; i < this->equipexp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equipexp(i), output);
  }

  // repeated .EquipmentConfig.NormalGiftBag normal_giftbag = 5;
  for (int i = 0; i < this->normal_giftbag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->normal_giftbag(i), output);
  }

  // repeated .EquipmentConfig.LuckGiftBag luck_giftbag = 6;
  for (int i = 0; i < this->luck_giftbag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->luck_giftbag(i), output);
  }

  // repeated .EquipmentConfig.TimeLimitProp time_limit_prop = 7;
  for (int i = 0; i < this->time_limit_prop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->time_limit_prop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EquipmentConfig.EquipList)
}

::google::protobuf::uint8* EquipList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquipmentConfig.EquipList)
  // repeated .EquipmentConfig.Equip equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  // required uint32 chmax = 2;
  if (has_chmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chmax(), target);
  }

  // repeated .EquipmentConfig.SPProperty spProp = 3;
  for (int i = 0; i < this->spprop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spprop(i), target);
  }

  // repeated .EquipmentConfig.EquipExp equipexp = 4;
  for (int i = 0; i < this->equipexp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equipexp(i), target);
  }

  // repeated .EquipmentConfig.NormalGiftBag normal_giftbag = 5;
  for (int i = 0; i < this->normal_giftbag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->normal_giftbag(i), target);
  }

  // repeated .EquipmentConfig.LuckGiftBag luck_giftbag = 6;
  for (int i = 0; i < this->luck_giftbag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->luck_giftbag(i), target);
  }

  // repeated .EquipmentConfig.TimeLimitProp time_limit_prop = 7;
  for (int i = 0; i < this->time_limit_prop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->time_limit_prop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquipmentConfig.EquipList)
  return target;
}

int EquipList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 chmax = 2;
    if (has_chmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chmax());
    }

  }
  // repeated .EquipmentConfig.Equip equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .EquipmentConfig.SPProperty spProp = 3;
  total_size += 1 * this->spprop_size();
  for (int i = 0; i < this->spprop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spprop(i));
  }

  // repeated .EquipmentConfig.EquipExp equipexp = 4;
  total_size += 1 * this->equipexp_size();
  for (int i = 0; i < this->equipexp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipexp(i));
  }

  // repeated .EquipmentConfig.NormalGiftBag normal_giftbag = 5;
  total_size += 1 * this->normal_giftbag_size();
  for (int i = 0; i < this->normal_giftbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normal_giftbag(i));
  }

  // repeated .EquipmentConfig.LuckGiftBag luck_giftbag = 6;
  total_size += 1 * this->luck_giftbag_size();
  for (int i = 0; i < this->luck_giftbag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->luck_giftbag(i));
  }

  // repeated .EquipmentConfig.TimeLimitProp time_limit_prop = 7;
  total_size += 1 * this->time_limit_prop_size();
  for (int i = 0; i < this->time_limit_prop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time_limit_prop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipList::MergeFrom(const EquipList& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  spprop_.MergeFrom(from.spprop_);
  equipexp_.MergeFrom(from.equipexp_);
  normal_giftbag_.MergeFrom(from.normal_giftbag_);
  luck_giftbag_.MergeFrom(from.luck_giftbag_);
  time_limit_prop_.MergeFrom(from.time_limit_prop_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_chmax()) {
      set_chmax(from.chmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipList::CopyFrom(const EquipList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->equips())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->spprop())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipexp())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->normal_giftbag())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->luck_giftbag())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->time_limit_prop())) return false;
  return true;
}

void EquipList::Swap(EquipList* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(chmax_, other->chmax_);
    spprop_.Swap(&other->spprop_);
    equipexp_.Swap(&other->equipexp_);
    normal_giftbag_.Swap(&other->normal_giftbag_);
    luck_giftbag_.Swap(&other->luck_giftbag_);
    time_limit_prop_.Swap(&other->time_limit_prop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipList_descriptor_;
  metadata.reflection = EquipList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EquipmentConfig

// @@protoc_insertion_point(global_scope)
