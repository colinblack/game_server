// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MineConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MineConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MineConfig {

namespace {

const ::google::protobuf::Descriptor* Normal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Normal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Kingdom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Kingdom_reflection_ = NULL;
const ::google::protobuf::Descriptor* MineItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MineItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MineConfig_2eproto() {
  protobuf_AddDesc_MineConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MineConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Normal_descriptor_ = file->message_type(0);
  static const int Normal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Normal, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Normal, open_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Normal, donate_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Normal, donate_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Normal, harvest_),
  };
  Normal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Normal_descriptor_,
      Normal::default_instance_,
      Normal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Normal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Normal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Normal));
  Kingdom_descriptor_ = file->message_type(1);
  static const int Kingdom_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kingdom, open_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kingdom, donate_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kingdom, donate_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kingdom, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kingdom, harvest_),
  };
  Kingdom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Kingdom_descriptor_,
      Kingdom::default_instance_,
      Kingdom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kingdom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kingdom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Kingdom));
  MineItem_descriptor_ = file->message_type(2);
  static const int MineItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, open_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, donate_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, kingdom_),
  };
  MineItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MineItem_descriptor_,
      MineItem::default_instance_,
      MineItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MineItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MineItem));
  Mine_descriptor_ = file->message_type(3);
  static const int Mine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mine, mine_),
  };
  Mine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mine_descriptor_,
      Mine::default_instance_,
      Mine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MineConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Normal_descriptor_, &Normal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Kingdom_descriptor_, &Kingdom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MineItem_descriptor_, &MineItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mine_descriptor_, &Mine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MineConfig_2eproto() {
  delete Normal::default_instance_;
  delete Normal_reflection_;
  delete Kingdom::default_instance_;
  delete Kingdom_reflection_;
  delete MineItem::default_instance_;
  delete MineItem_reflection_;
  delete Mine::default_instance_;
  delete Mine_reflection_;
}

void protobuf_AddDesc_MineConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020MineConfig.proto\022\nMineConfig\"b\n\006Normal"
    "\022\013\n\003exp\030\001 \003(\r\022\021\n\topen_cost\030\002 \003(\r\022\022\n\ndona"
    "te_cnt\030\003 \003(\r\022\023\n\013donate_cost\030\004 \002(\r\022\017\n\007har"
    "vest\030\005 \003(\r\"f\n\007Kingdom\022\021\n\topen_cost\030\001 \002(\r"
    "\022\022\n\ndonate_cnt\030\002 \002(\r\022\023\n\013donate_cost\030\003 \002("
    "\r\022\016\n\006reward\030\004 \002(\r\022\017\n\007harvest\030\005 \003(\r\"z\n\010Mi"
    "neItem\022\020\n\010open_exp\030\001 \002(\r\022\022\n\ndonate_exp\030\002"
    " \002(\r\022\"\n\006normal\030\003 \002(\0132\022.MineConfig.Normal"
    "\022$\n\007kingdom\030\004 \002(\0132\023.MineConfig.Kingdom\"*"
    "\n\004Mine\022\"\n\004mine\030\001 \002(\0132\024.MineConfig.MineIt"
    "em", 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MineConfig.proto", &protobuf_RegisterTypes);
  Normal::default_instance_ = new Normal();
  Kingdom::default_instance_ = new Kingdom();
  MineItem::default_instance_ = new MineItem();
  Mine::default_instance_ = new Mine();
  Normal::default_instance_->InitAsDefaultInstance();
  Kingdom::default_instance_->InitAsDefaultInstance();
  MineItem::default_instance_->InitAsDefaultInstance();
  Mine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MineConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MineConfig_2eproto {
  StaticDescriptorInitializer_MineConfig_2eproto() {
    protobuf_AddDesc_MineConfig_2eproto();
  }
} static_descriptor_initializer_MineConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Normal::kExpFieldNumber;
const int Normal::kOpenCostFieldNumber;
const int Normal::kDonateCntFieldNumber;
const int Normal::kDonateCostFieldNumber;
const int Normal::kHarvestFieldNumber;
#endif  // !_MSC_VER

Normal::Normal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MineConfig.Normal)
}

void Normal::InitAsDefaultInstance() {
}

Normal::Normal(const Normal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MineConfig.Normal)
}

void Normal::SharedCtor() {
  _cached_size_ = 0;
  donate_cost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Normal::~Normal() {
  // @@protoc_insertion_point(destructor:MineConfig.Normal)
  SharedDtor();
}

void Normal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Normal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Normal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Normal_descriptor_;
}

const Normal& Normal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MineConfig_2eproto();
  return *default_instance_;
}

Normal* Normal::default_instance_ = NULL;

Normal* Normal::New() const {
  return new Normal;
}

void Normal::Clear() {
  donate_cost_ = 0u;
  exp_.Clear();
  open_cost_.Clear();
  donate_cnt_.Clear();
  harvest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Normal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MineConfig.Normal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 exp = 1;
      case 1: {
        if (tag == 8) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_exp())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_exp;
        if (input->ExpectTag(16)) goto parse_open_cost;
        break;
      }

      // repeated uint32 open_cost = 2;
      case 2: {
        if (tag == 16) {
         parse_open_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_open_cost())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_open_cost())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_open_cost;
        if (input->ExpectTag(24)) goto parse_donate_cnt;
        break;
      }

      // repeated uint32 donate_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_donate_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_donate_cnt())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_donate_cnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_donate_cnt;
        if (input->ExpectTag(32)) goto parse_donate_cost;
        break;
      }

      // required uint32 donate_cost = 4;
      case 4: {
        if (tag == 32) {
         parse_donate_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donate_cost_)));
          set_has_donate_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_harvest;
        break;
      }

      // repeated uint32 harvest = 5;
      case 5: {
        if (tag == 40) {
         parse_harvest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_harvest())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_harvest())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_harvest;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MineConfig.Normal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MineConfig.Normal)
  return false;
#undef DO_
}

void Normal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MineConfig.Normal)
  // repeated uint32 exp = 1;
  for (int i = 0; i < this->exp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->exp(i), output);
  }

  // repeated uint32 open_cost = 2;
  for (int i = 0; i < this->open_cost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->open_cost(i), output);
  }

  // repeated uint32 donate_cnt = 3;
  for (int i = 0; i < this->donate_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->donate_cnt(i), output);
  }

  // required uint32 donate_cost = 4;
  if (has_donate_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->donate_cost(), output);
  }

  // repeated uint32 harvest = 5;
  for (int i = 0; i < this->harvest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->harvest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MineConfig.Normal)
}

::google::protobuf::uint8* Normal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MineConfig.Normal)
  // repeated uint32 exp = 1;
  for (int i = 0; i < this->exp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->exp(i), target);
  }

  // repeated uint32 open_cost = 2;
  for (int i = 0; i < this->open_cost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->open_cost(i), target);
  }

  // repeated uint32 donate_cnt = 3;
  for (int i = 0; i < this->donate_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->donate_cnt(i), target);
  }

  // required uint32 donate_cost = 4;
  if (has_donate_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->donate_cost(), target);
  }

  // repeated uint32 harvest = 5;
  for (int i = 0; i < this->harvest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->harvest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MineConfig.Normal)
  return target;
}

int Normal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required uint32 donate_cost = 4;
    if (has_donate_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donate_cost());
    }

  }
  // repeated uint32 exp = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exp(i));
    }
    total_size += 1 * this->exp_size() + data_size;
  }

  // repeated uint32 open_cost = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_cost_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->open_cost(i));
    }
    total_size += 1 * this->open_cost_size() + data_size;
  }

  // repeated uint32 donate_cnt = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->donate_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->donate_cnt(i));
    }
    total_size += 1 * this->donate_cnt_size() + data_size;
  }

  // repeated uint32 harvest = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->harvest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->harvest(i));
    }
    total_size += 1 * this->harvest_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Normal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Normal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Normal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Normal::MergeFrom(const Normal& from) {
  GOOGLE_CHECK_NE(&from, this);
  exp_.MergeFrom(from.exp_);
  open_cost_.MergeFrom(from.open_cost_);
  donate_cnt_.MergeFrom(from.donate_cnt_);
  harvest_.MergeFrom(from.harvest_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_donate_cost()) {
      set_donate_cost(from.donate_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Normal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Normal::CopyFrom(const Normal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Normal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void Normal::Swap(Normal* other) {
  if (other != this) {
    exp_.Swap(&other->exp_);
    open_cost_.Swap(&other->open_cost_);
    donate_cnt_.Swap(&other->donate_cnt_);
    std::swap(donate_cost_, other->donate_cost_);
    harvest_.Swap(&other->harvest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Normal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Normal_descriptor_;
  metadata.reflection = Normal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Kingdom::kOpenCostFieldNumber;
const int Kingdom::kDonateCntFieldNumber;
const int Kingdom::kDonateCostFieldNumber;
const int Kingdom::kRewardFieldNumber;
const int Kingdom::kHarvestFieldNumber;
#endif  // !_MSC_VER

Kingdom::Kingdom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MineConfig.Kingdom)
}

void Kingdom::InitAsDefaultInstance() {
}

Kingdom::Kingdom(const Kingdom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MineConfig.Kingdom)
}

void Kingdom::SharedCtor() {
  _cached_size_ = 0;
  open_cost_ = 0u;
  donate_cnt_ = 0u;
  donate_cost_ = 0u;
  reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Kingdom::~Kingdom() {
  // @@protoc_insertion_point(destructor:MineConfig.Kingdom)
  SharedDtor();
}

void Kingdom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Kingdom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Kingdom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Kingdom_descriptor_;
}

const Kingdom& Kingdom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MineConfig_2eproto();
  return *default_instance_;
}

Kingdom* Kingdom::default_instance_ = NULL;

Kingdom* Kingdom::New() const {
  return new Kingdom;
}

void Kingdom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Kingdom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(open_cost_, reward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  harvest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Kingdom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MineConfig.Kingdom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 open_cost = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_cost_)));
          set_has_open_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_donate_cnt;
        break;
      }

      // required uint32 donate_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_donate_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donate_cnt_)));
          set_has_donate_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_donate_cost;
        break;
      }

      // required uint32 donate_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_donate_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donate_cost_)));
          set_has_donate_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // required uint32 reward = 4;
      case 4: {
        if (tag == 32) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_harvest;
        break;
      }

      // repeated uint32 harvest = 5;
      case 5: {
        if (tag == 40) {
         parse_harvest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_harvest())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_harvest())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_harvest;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MineConfig.Kingdom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MineConfig.Kingdom)
  return false;
#undef DO_
}

void Kingdom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MineConfig.Kingdom)
  // required uint32 open_cost = 1;
  if (has_open_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->open_cost(), output);
  }

  // required uint32 donate_cnt = 2;
  if (has_donate_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->donate_cnt(), output);
  }

  // required uint32 donate_cost = 3;
  if (has_donate_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->donate_cost(), output);
  }

  // required uint32 reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reward(), output);
  }

  // repeated uint32 harvest = 5;
  for (int i = 0; i < this->harvest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->harvest(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MineConfig.Kingdom)
}

::google::protobuf::uint8* Kingdom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MineConfig.Kingdom)
  // required uint32 open_cost = 1;
  if (has_open_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->open_cost(), target);
  }

  // required uint32 donate_cnt = 2;
  if (has_donate_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->donate_cnt(), target);
  }

  // required uint32 donate_cost = 3;
  if (has_donate_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->donate_cost(), target);
  }

  // required uint32 reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reward(), target);
  }

  // repeated uint32 harvest = 5;
  for (int i = 0; i < this->harvest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->harvest(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MineConfig.Kingdom)
  return target;
}

int Kingdom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 open_cost = 1;
    if (has_open_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_cost());
    }

    // required uint32 donate_cnt = 2;
    if (has_donate_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donate_cnt());
    }

    // required uint32 donate_cost = 3;
    if (has_donate_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donate_cost());
    }

    // required uint32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

  }
  // repeated uint32 harvest = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->harvest_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->harvest(i));
    }
    total_size += 1 * this->harvest_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Kingdom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Kingdom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Kingdom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Kingdom::MergeFrom(const Kingdom& from) {
  GOOGLE_CHECK_NE(&from, this);
  harvest_.MergeFrom(from.harvest_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_cost()) {
      set_open_cost(from.open_cost());
    }
    if (from.has_donate_cnt()) {
      set_donate_cnt(from.donate_cnt());
    }
    if (from.has_donate_cost()) {
      set_donate_cost(from.donate_cost());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Kingdom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kingdom::CopyFrom(const Kingdom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kingdom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Kingdom::Swap(Kingdom* other) {
  if (other != this) {
    std::swap(open_cost_, other->open_cost_);
    std::swap(donate_cnt_, other->donate_cnt_);
    std::swap(donate_cost_, other->donate_cost_);
    std::swap(reward_, other->reward_);
    harvest_.Swap(&other->harvest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Kingdom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Kingdom_descriptor_;
  metadata.reflection = Kingdom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MineItem::kOpenExpFieldNumber;
const int MineItem::kDonateExpFieldNumber;
const int MineItem::kNormalFieldNumber;
const int MineItem::kKingdomFieldNumber;
#endif  // !_MSC_VER

MineItem::MineItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MineConfig.MineItem)
}

void MineItem::InitAsDefaultInstance() {
  normal_ = const_cast< ::MineConfig::Normal*>(&::MineConfig::Normal::default_instance());
  kingdom_ = const_cast< ::MineConfig::Kingdom*>(&::MineConfig::Kingdom::default_instance());
}

MineItem::MineItem(const MineItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MineConfig.MineItem)
}

void MineItem::SharedCtor() {
  _cached_size_ = 0;
  open_exp_ = 0u;
  donate_exp_ = 0u;
  normal_ = NULL;
  kingdom_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MineItem::~MineItem() {
  // @@protoc_insertion_point(destructor:MineConfig.MineItem)
  SharedDtor();
}

void MineItem::SharedDtor() {
  if (this != default_instance_) {
    delete normal_;
    delete kingdom_;
  }
}

void MineItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MineItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MineItem_descriptor_;
}

const MineItem& MineItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MineConfig_2eproto();
  return *default_instance_;
}

MineItem* MineItem::default_instance_ = NULL;

MineItem* MineItem::New() const {
  return new MineItem;
}

void MineItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MineItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(open_exp_, donate_exp_);
    if (has_normal()) {
      if (normal_ != NULL) normal_->::MineConfig::Normal::Clear();
    }
    if (has_kingdom()) {
      if (kingdom_ != NULL) kingdom_->::MineConfig::Kingdom::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MineItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MineConfig.MineItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 open_exp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_exp_)));
          set_has_open_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_donate_exp;
        break;
      }

      // required uint32 donate_exp = 2;
      case 2: {
        if (tag == 16) {
         parse_donate_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donate_exp_)));
          set_has_donate_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_normal;
        break;
      }

      // required .MineConfig.Normal normal = 3;
      case 3: {
        if (tag == 26) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_kingdom;
        break;
      }

      // required .MineConfig.Kingdom kingdom = 4;
      case 4: {
        if (tag == 34) {
         parse_kingdom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kingdom()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MineConfig.MineItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MineConfig.MineItem)
  return false;
#undef DO_
}

void MineItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MineConfig.MineItem)
  // required uint32 open_exp = 1;
  if (has_open_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->open_exp(), output);
  }

  // required uint32 donate_exp = 2;
  if (has_donate_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->donate_exp(), output);
  }

  // required .MineConfig.Normal normal = 3;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->normal(), output);
  }

  // required .MineConfig.Kingdom kingdom = 4;
  if (has_kingdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->kingdom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MineConfig.MineItem)
}

::google::protobuf::uint8* MineItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MineConfig.MineItem)
  // required uint32 open_exp = 1;
  if (has_open_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->open_exp(), target);
  }

  // required uint32 donate_exp = 2;
  if (has_donate_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->donate_exp(), target);
  }

  // required .MineConfig.Normal normal = 3;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->normal(), target);
  }

  // required .MineConfig.Kingdom kingdom = 4;
  if (has_kingdom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->kingdom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MineConfig.MineItem)
  return target;
}

int MineItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 open_exp = 1;
    if (has_open_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_exp());
    }

    // required uint32 donate_exp = 2;
    if (has_donate_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donate_exp());
    }

    // required .MineConfig.Normal normal = 3;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal());
    }

    // required .MineConfig.Kingdom kingdom = 4;
    if (has_kingdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kingdom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MineItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MineItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MineItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MineItem::MergeFrom(const MineItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_exp()) {
      set_open_exp(from.open_exp());
    }
    if (from.has_donate_exp()) {
      set_donate_exp(from.donate_exp());
    }
    if (from.has_normal()) {
      mutable_normal()->::MineConfig::Normal::MergeFrom(from.normal());
    }
    if (from.has_kingdom()) {
      mutable_kingdom()->::MineConfig::Kingdom::MergeFrom(from.kingdom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MineItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MineItem::CopyFrom(const MineItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MineItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_normal()) {
    if (!this->normal().IsInitialized()) return false;
  }
  if (has_kingdom()) {
    if (!this->kingdom().IsInitialized()) return false;
  }
  return true;
}

void MineItem::Swap(MineItem* other) {
  if (other != this) {
    std::swap(open_exp_, other->open_exp_);
    std::swap(donate_exp_, other->donate_exp_);
    std::swap(normal_, other->normal_);
    std::swap(kingdom_, other->kingdom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MineItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MineItem_descriptor_;
  metadata.reflection = MineItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mine::kMineFieldNumber;
#endif  // !_MSC_VER

Mine::Mine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MineConfig.Mine)
}

void Mine::InitAsDefaultInstance() {
  mine_ = const_cast< ::MineConfig::MineItem*>(&::MineConfig::MineItem::default_instance());
}

Mine::Mine(const Mine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MineConfig.Mine)
}

void Mine::SharedCtor() {
  _cached_size_ = 0;
  mine_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mine::~Mine() {
  // @@protoc_insertion_point(destructor:MineConfig.Mine)
  SharedDtor();
}

void Mine::SharedDtor() {
  if (this != default_instance_) {
    delete mine_;
  }
}

void Mine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mine_descriptor_;
}

const Mine& Mine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MineConfig_2eproto();
  return *default_instance_;
}

Mine* Mine::default_instance_ = NULL;

Mine* Mine::New() const {
  return new Mine;
}

void Mine::Clear() {
  if (has_mine()) {
    if (mine_ != NULL) mine_->::MineConfig::MineItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MineConfig.Mine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MineConfig.MineItem mine = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MineConfig.Mine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MineConfig.Mine)
  return false;
#undef DO_
}

void Mine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MineConfig.Mine)
  // required .MineConfig.MineItem mine = 1;
  if (has_mine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MineConfig.Mine)
}

::google::protobuf::uint8* Mine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MineConfig.Mine)
  // required .MineConfig.MineItem mine = 1;
  if (has_mine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MineConfig.Mine)
  return target;
}

int Mine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MineConfig.MineItem mine = 1;
    if (has_mine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mine());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mine::MergeFrom(const Mine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mine()) {
      mutable_mine()->::MineConfig::MineItem::MergeFrom(from.mine());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mine::CopyFrom(const Mine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mine()) {
    if (!this->mine().IsInitialized()) return false;
  }
  return true;
}

void Mine::Swap(Mine* other) {
  if (other != this) {
    std::swap(mine_, other->mine_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mine_descriptor_;
  metadata.reflection = Mine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MineConfig

// @@protoc_insertion_point(global_scope)
