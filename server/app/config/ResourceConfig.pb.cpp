// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ResourceConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ResourceConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ResourceConfig {

namespace {

const ::google::protobuf::Descriptor* FlamenItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlamenItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ResourceConfig_2eproto() {
  protobuf_AddDesc_ResourceConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ResourceConfig.proto");
  GOOGLE_CHECK(file != NULL);
  FlamenItem_descriptor_ = file->message_type(0);
  static const int FlamenItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlamenItem, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlamenItem, free_prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlamenItem, buy_prob_),
  };
  FlamenItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlamenItem_descriptor_,
      FlamenItem::default_instance_,
      FlamenItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlamenItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlamenItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlamenItem));
  Resource_descriptor_ = file->message_type(1);
  static const int Resource_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, flamen_),
  };
  Resource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_descriptor_,
      Resource::default_instance_,
      Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ResourceConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlamenItem_descriptor_, &FlamenItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_descriptor_, &Resource::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ResourceConfig_2eproto() {
  delete FlamenItem::default_instance_;
  delete FlamenItem_reflection_;
  delete Resource::default_instance_;
  delete Resource_reflection_;
}

void protobuf_AddDesc_ResourceConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ResourceConfig.proto\022\016ResourceConfig\"C"
    "\n\nFlamenItem\022\020\n\010multiple\030\001 \002(\r\022\021\n\tfree_p"
    "rob\030\002 \002(\r\022\020\n\010buy_prob\030\003 \002(\r\"6\n\010Resource\022"
    "*\n\006flamen\030\001 \003(\0132\032.ResourceConfig.FlamenI"
    "tem", 163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ResourceConfig.proto", &protobuf_RegisterTypes);
  FlamenItem::default_instance_ = new FlamenItem();
  Resource::default_instance_ = new Resource();
  FlamenItem::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ResourceConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ResourceConfig_2eproto {
  StaticDescriptorInitializer_ResourceConfig_2eproto() {
    protobuf_AddDesc_ResourceConfig_2eproto();
  }
} static_descriptor_initializer_ResourceConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FlamenItem::kMultipleFieldNumber;
const int FlamenItem::kFreeProbFieldNumber;
const int FlamenItem::kBuyProbFieldNumber;
#endif  // !_MSC_VER

FlamenItem::FlamenItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResourceConfig.FlamenItem)
}

void FlamenItem::InitAsDefaultInstance() {
}

FlamenItem::FlamenItem(const FlamenItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ResourceConfig.FlamenItem)
}

void FlamenItem::SharedCtor() {
  _cached_size_ = 0;
  multiple_ = 0u;
  free_prob_ = 0u;
  buy_prob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlamenItem::~FlamenItem() {
  // @@protoc_insertion_point(destructor:ResourceConfig.FlamenItem)
  SharedDtor();
}

void FlamenItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlamenItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlamenItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlamenItem_descriptor_;
}

const FlamenItem& FlamenItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResourceConfig_2eproto();
  return *default_instance_;
}

FlamenItem* FlamenItem::default_instance_ = NULL;

FlamenItem* FlamenItem::New() const {
  return new FlamenItem;
}

void FlamenItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FlamenItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(multiple_, buy_prob_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlamenItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResourceConfig.FlamenItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 multiple = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_free_prob;
        break;
      }

      // required uint32 free_prob = 2;
      case 2: {
        if (tag == 16) {
         parse_free_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_prob_)));
          set_has_free_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buy_prob;
        break;
      }

      // required uint32 buy_prob = 3;
      case 3: {
        if (tag == 24) {
         parse_buy_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_prob_)));
          set_has_buy_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResourceConfig.FlamenItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResourceConfig.FlamenItem)
  return false;
#undef DO_
}

void FlamenItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResourceConfig.FlamenItem)
  // required uint32 multiple = 1;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->multiple(), output);
  }

  // required uint32 free_prob = 2;
  if (has_free_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->free_prob(), output);
  }

  // required uint32 buy_prob = 3;
  if (has_buy_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResourceConfig.FlamenItem)
}

::google::protobuf::uint8* FlamenItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResourceConfig.FlamenItem)
  // required uint32 multiple = 1;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->multiple(), target);
  }

  // required uint32 free_prob = 2;
  if (has_free_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->free_prob(), target);
  }

  // required uint32 buy_prob = 3;
  if (has_buy_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResourceConfig.FlamenItem)
  return target;
}

int FlamenItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 multiple = 1;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }

    // required uint32 free_prob = 2;
    if (has_free_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_prob());
    }

    // required uint32 buy_prob = 3;
    if (has_buy_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_prob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlamenItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlamenItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlamenItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlamenItem::MergeFrom(const FlamenItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_free_prob()) {
      set_free_prob(from.free_prob());
    }
    if (from.has_buy_prob()) {
      set_buy_prob(from.buy_prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlamenItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlamenItem::CopyFrom(const FlamenItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlamenItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FlamenItem::Swap(FlamenItem* other) {
  if (other != this) {
    std::swap(multiple_, other->multiple_);
    std::swap(free_prob_, other->free_prob_);
    std::swap(buy_prob_, other->buy_prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlamenItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlamenItem_descriptor_;
  metadata.reflection = FlamenItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Resource::kFlamenFieldNumber;
#endif  // !_MSC_VER

Resource::Resource()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResourceConfig.Resource)
}

void Resource::InitAsDefaultInstance() {
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ResourceConfig.Resource)
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:ResourceConfig.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ResourceConfig_2eproto();
  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New() const {
  return new Resource;
}

void Resource::Clear() {
  flamen_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResourceConfig.Resource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ResourceConfig.FlamenItem flamen = 1;
      case 1: {
        if (tag == 10) {
         parse_flamen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flamen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_flamen;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResourceConfig.Resource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResourceConfig.Resource)
  return false;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResourceConfig.Resource)
  // repeated .ResourceConfig.FlamenItem flamen = 1;
  for (int i = 0; i < this->flamen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flamen(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResourceConfig.Resource)
}

::google::protobuf::uint8* Resource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResourceConfig.Resource)
  // repeated .ResourceConfig.FlamenItem flamen = 1;
  for (int i = 0; i < this->flamen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flamen(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResourceConfig.Resource)
  return target;
}

int Resource::ByteSize() const {
  int total_size = 0;

  // repeated .ResourceConfig.FlamenItem flamen = 1;
  total_size += 1 * this->flamen_size();
  for (int i = 0; i < this->flamen_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flamen(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  flamen_.MergeFrom(from.flamen_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->flamen())) return false;
  return true;
}

void Resource::Swap(Resource* other) {
  if (other != this) {
    flamen_.Swap(&other->flamen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ResourceConfig

// @@protoc_insertion_point(global_scope)
