// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LittleChargeConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LittleChargeConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LittleChargeConfig {

namespace {

const ::google::protobuf::Descriptor* OpenPlatFormReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenPlatFormReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* LittleCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LittleCharge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LittleChargeConfig_2eproto() {
  protobuf_AddDesc_LittleChargeConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LittleChargeConfig.proto");
  GOOGLE_CHECK(file != NULL);
  OpenPlatFormReward_descriptor_ = file->message_type(0);
  static const int OpenPlatFormReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatFormReward, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatFormReward, reward_),
  };
  OpenPlatFormReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenPlatFormReward_descriptor_,
      OpenPlatFormReward::default_instance_,
      OpenPlatFormReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatFormReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatFormReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenPlatFormReward));
  LittleCharge_descriptor_ = file->message_type(1);
  static const int LittleCharge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleCharge, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleCharge, open_platform_),
  };
  LittleCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LittleCharge_descriptor_,
      LittleCharge::default_instance_,
      LittleCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LittleCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LittleCharge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LittleChargeConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenPlatFormReward_descriptor_, &OpenPlatFormReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LittleCharge_descriptor_, &LittleCharge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LittleChargeConfig_2eproto() {
  delete OpenPlatFormReward::default_instance_;
  delete OpenPlatFormReward_reflection_;
  delete LittleCharge::default_instance_;
  delete LittleCharge_reflection_;
}

void protobuf_AddDesc_LittleChargeConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RewardConfig::protobuf_AddDesc_RewardConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030LittleChargeConfig.proto\022\022LittleCharge"
    "Config\032\022RewardConfig.proto\"L\n\022OpenPlatFo"
    "rmReward\022\020\n\010startday\030\001 \002(\r\022$\n\006reward\030\002 \003"
    "(\0132\024.RewardConfig.Reward\"`\n\014LittleCharge"
    "\022\021\n\tcondition\030\001 \002(\r\022=\n\ropen_platform\030\002 \003"
    "(\0132&.LittleChargeConfig.OpenPlatFormRewa"
    "rd", 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LittleChargeConfig.proto", &protobuf_RegisterTypes);
  OpenPlatFormReward::default_instance_ = new OpenPlatFormReward();
  LittleCharge::default_instance_ = new LittleCharge();
  OpenPlatFormReward::default_instance_->InitAsDefaultInstance();
  LittleCharge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LittleChargeConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LittleChargeConfig_2eproto {
  StaticDescriptorInitializer_LittleChargeConfig_2eproto() {
    protobuf_AddDesc_LittleChargeConfig_2eproto();
  }
} static_descriptor_initializer_LittleChargeConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OpenPlatFormReward::kStartdayFieldNumber;
const int OpenPlatFormReward::kRewardFieldNumber;
#endif  // !_MSC_VER

OpenPlatFormReward::OpenPlatFormReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LittleChargeConfig.OpenPlatFormReward)
}

void OpenPlatFormReward::InitAsDefaultInstance() {
}

OpenPlatFormReward::OpenPlatFormReward(const OpenPlatFormReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LittleChargeConfig.OpenPlatFormReward)
}

void OpenPlatFormReward::SharedCtor() {
  _cached_size_ = 0;
  startday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenPlatFormReward::~OpenPlatFormReward() {
  // @@protoc_insertion_point(destructor:LittleChargeConfig.OpenPlatFormReward)
  SharedDtor();
}

void OpenPlatFormReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenPlatFormReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenPlatFormReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenPlatFormReward_descriptor_;
}

const OpenPlatFormReward& OpenPlatFormReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LittleChargeConfig_2eproto();
  return *default_instance_;
}

OpenPlatFormReward* OpenPlatFormReward::default_instance_ = NULL;

OpenPlatFormReward* OpenPlatFormReward::New() const {
  return new OpenPlatFormReward;
}

void OpenPlatFormReward::Clear() {
  startday_ = 0u;
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenPlatFormReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LittleChargeConfig.OpenPlatFormReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startday = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startday_)));
          set_has_startday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .RewardConfig.Reward reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LittleChargeConfig.OpenPlatFormReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LittleChargeConfig.OpenPlatFormReward)
  return false;
#undef DO_
}

void OpenPlatFormReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LittleChargeConfig.OpenPlatFormReward)
  // required uint32 startday = 1;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startday(), output);
  }

  // repeated .RewardConfig.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LittleChargeConfig.OpenPlatFormReward)
}

::google::protobuf::uint8* OpenPlatFormReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LittleChargeConfig.OpenPlatFormReward)
  // required uint32 startday = 1;
  if (has_startday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startday(), target);
  }

  // repeated .RewardConfig.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LittleChargeConfig.OpenPlatFormReward)
  return target;
}

int OpenPlatFormReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 startday = 1;
    if (has_startday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startday());
    }

  }
  // repeated .RewardConfig.Reward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenPlatFormReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenPlatFormReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenPlatFormReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenPlatFormReward::MergeFrom(const OpenPlatFormReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startday()) {
      set_startday(from.startday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenPlatFormReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPlatFormReward::CopyFrom(const OpenPlatFormReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPlatFormReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void OpenPlatFormReward::Swap(OpenPlatFormReward* other) {
  if (other != this) {
    std::swap(startday_, other->startday_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenPlatFormReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenPlatFormReward_descriptor_;
  metadata.reflection = OpenPlatFormReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LittleCharge::kConditionFieldNumber;
const int LittleCharge::kOpenPlatformFieldNumber;
#endif  // !_MSC_VER

LittleCharge::LittleCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LittleChargeConfig.LittleCharge)
}

void LittleCharge::InitAsDefaultInstance() {
}

LittleCharge::LittleCharge(const LittleCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LittleChargeConfig.LittleCharge)
}

void LittleCharge::SharedCtor() {
  _cached_size_ = 0;
  condition_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LittleCharge::~LittleCharge() {
  // @@protoc_insertion_point(destructor:LittleChargeConfig.LittleCharge)
  SharedDtor();
}

void LittleCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LittleCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LittleCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LittleCharge_descriptor_;
}

const LittleCharge& LittleCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LittleChargeConfig_2eproto();
  return *default_instance_;
}

LittleCharge* LittleCharge::default_instance_ = NULL;

LittleCharge* LittleCharge::New() const {
  return new LittleCharge;
}

void LittleCharge::Clear() {
  condition_ = 0u;
  open_platform_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LittleCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LittleChargeConfig.LittleCharge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 condition = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_platform;
        break;
      }

      // repeated .LittleChargeConfig.OpenPlatFormReward open_platform = 2;
      case 2: {
        if (tag == 18) {
         parse_open_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_platform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_platform;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LittleChargeConfig.LittleCharge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LittleChargeConfig.LittleCharge)
  return false;
#undef DO_
}

void LittleCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LittleChargeConfig.LittleCharge)
  // required uint32 condition = 1;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->condition(), output);
  }

  // repeated .LittleChargeConfig.OpenPlatFormReward open_platform = 2;
  for (int i = 0; i < this->open_platform_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->open_platform(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LittleChargeConfig.LittleCharge)
}

::google::protobuf::uint8* LittleCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LittleChargeConfig.LittleCharge)
  // required uint32 condition = 1;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->condition(), target);
  }

  // repeated .LittleChargeConfig.OpenPlatFormReward open_platform = 2;
  for (int i = 0; i < this->open_platform_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->open_platform(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LittleChargeConfig.LittleCharge)
  return target;
}

int LittleCharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 condition = 1;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition());
    }

  }
  // repeated .LittleChargeConfig.OpenPlatFormReward open_platform = 2;
  total_size += 1 * this->open_platform_size();
  for (int i = 0; i < this->open_platform_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->open_platform(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LittleCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LittleCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LittleCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LittleCharge::MergeFrom(const LittleCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_platform_.MergeFrom(from.open_platform_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition()) {
      set_condition(from.condition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LittleCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LittleCharge::CopyFrom(const LittleCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LittleCharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->open_platform())) return false;
  return true;
}

void LittleCharge::Swap(LittleCharge* other) {
  if (other != this) {
    std::swap(condition_, other->condition_);
    open_platform_.Swap(&other->open_platform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LittleCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LittleCharge_descriptor_;
  metadata.reflection = LittleCharge_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LittleChargeConfig

// @@protoc_insertion_point(global_scope)
