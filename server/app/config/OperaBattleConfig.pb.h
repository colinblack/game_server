// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OperaBattleConfig.proto

#ifndef PROTOBUF_OperaBattleConfig_2eproto__INCLUDED
#define PROTOBUF_OperaBattleConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "RewardConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace OperaBattleConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OperaBattleConfig_2eproto();
void protobuf_AssignDesc_OperaBattleConfig_2eproto();
void protobuf_ShutdownFile_OperaBattleConfig_2eproto();

class StarReward;
class DifficultyReward;
class BattleReward;
class BattleRewardAll;

// ===================================================================

class StarReward : public ::google::protobuf::Message {
 public:
  StarReward();
  virtual ~StarReward();

  StarReward(const StarReward& from);

  inline StarReward& operator=(const StarReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StarReward& default_instance();

  void Swap(StarReward* other);

  // implements Message ----------------------------------------------

  StarReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StarReward& from);
  void MergeFrom(const StarReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 star = 1;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 1;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 cash_cost = 2;
  inline bool has_cash_cost() const;
  inline void clear_cash_cost();
  static const int kCashCostFieldNumber = 2;
  inline ::google::protobuf::uint32 cash_cost() const;
  inline void set_cash_cost(::google::protobuf::uint32 value);

  // required uint32 time_left = 3;
  inline bool has_time_left() const;
  inline void clear_time_left();
  static const int kTimeLeftFieldNumber = 3;
  inline ::google::protobuf::uint32 time_left() const;
  inline void set_time_left(::google::protobuf::uint32 value);

  // repeated .RewardConfig.Reward reward = 4;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::RewardConfig::Reward& reward(int index) const;
  inline ::RewardConfig::Reward* mutable_reward(int index);
  inline ::RewardConfig::Reward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:OperaBattleConfig.StarReward)
 private:
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_cash_cost();
  inline void clear_has_cash_cost();
  inline void set_has_time_left();
  inline void clear_has_time_left();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 cash_cost_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward > reward_;
  ::google::protobuf::uint32 time_left_;
  friend void  protobuf_AddDesc_OperaBattleConfig_2eproto();
  friend void protobuf_AssignDesc_OperaBattleConfig_2eproto();
  friend void protobuf_ShutdownFile_OperaBattleConfig_2eproto();

  void InitAsDefaultInstance();
  static StarReward* default_instance_;
};
// -------------------------------------------------------------------

class DifficultyReward : public ::google::protobuf::Message {
 public:
  DifficultyReward();
  virtual ~DifficultyReward();

  DifficultyReward(const DifficultyReward& from);

  inline DifficultyReward& operator=(const DifficultyReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DifficultyReward& default_instance();

  void Swap(DifficultyReward* other);

  // implements Message ----------------------------------------------

  DifficultyReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DifficultyReward& from);
  void MergeFrom(const DifficultyReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required uint32 time_limit = 2;
  inline bool has_time_limit() const;
  inline void clear_time_limit();
  static const int kTimeLimitFieldNumber = 2;
  inline ::google::protobuf::uint32 time_limit() const;
  inline void set_time_limit(::google::protobuf::uint32 value);

  // required uint32 cost_food = 3;
  inline bool has_cost_food() const;
  inline void clear_cost_food();
  static const int kCostFoodFieldNumber = 3;
  inline ::google::protobuf::uint32 cost_food() const;
  inline void set_cost_food(::google::protobuf::uint32 value);

  // repeated .OperaBattleConfig.StarReward star_reward = 4;
  inline int star_reward_size() const;
  inline void clear_star_reward();
  static const int kStarRewardFieldNumber = 4;
  inline const ::OperaBattleConfig::StarReward& star_reward(int index) const;
  inline ::OperaBattleConfig::StarReward* mutable_star_reward(int index);
  inline ::OperaBattleConfig::StarReward* add_star_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::StarReward >&
      star_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::StarReward >*
      mutable_star_reward();

  // @@protoc_insertion_point(class_scope:OperaBattleConfig.DifficultyReward)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_time_limit();
  inline void clear_has_time_limit();
  inline void set_has_cost_food();
  inline void clear_has_cost_food();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 time_limit_;
  ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::StarReward > star_reward_;
  ::google::protobuf::uint32 cost_food_;
  friend void  protobuf_AddDesc_OperaBattleConfig_2eproto();
  friend void protobuf_AssignDesc_OperaBattleConfig_2eproto();
  friend void protobuf_ShutdownFile_OperaBattleConfig_2eproto();

  void InitAsDefaultInstance();
  static DifficultyReward* default_instance_;
};
// -------------------------------------------------------------------

class BattleReward : public ::google::protobuf::Message {
 public:
  BattleReward();
  virtual ~BattleReward();

  BattleReward(const BattleReward& from);

  inline BattleReward& operator=(const BattleReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleReward& default_instance();

  void Swap(BattleReward* other);

  // implements Message ----------------------------------------------

  BattleReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleReward& from);
  void MergeFrom(const BattleReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .OperaBattleConfig.DifficultyReward difficulty = 2;
  inline int difficulty_size() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 2;
  inline const ::OperaBattleConfig::DifficultyReward& difficulty(int index) const;
  inline ::OperaBattleConfig::DifficultyReward* mutable_difficulty(int index);
  inline ::OperaBattleConfig::DifficultyReward* add_difficulty();
  inline const ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::DifficultyReward >&
      difficulty() const;
  inline ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::DifficultyReward >*
      mutable_difficulty();

  // @@protoc_insertion_point(class_scope:OperaBattleConfig.BattleReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::DifficultyReward > difficulty_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_OperaBattleConfig_2eproto();
  friend void protobuf_AssignDesc_OperaBattleConfig_2eproto();
  friend void protobuf_ShutdownFile_OperaBattleConfig_2eproto();

  void InitAsDefaultInstance();
  static BattleReward* default_instance_;
};
// -------------------------------------------------------------------

class BattleRewardAll : public ::google::protobuf::Message {
 public:
  BattleRewardAll();
  virtual ~BattleRewardAll();

  BattleRewardAll(const BattleRewardAll& from);

  inline BattleRewardAll& operator=(const BattleRewardAll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleRewardAll& default_instance();

  void Swap(BattleRewardAll* other);

  // implements Message ----------------------------------------------

  BattleRewardAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleRewardAll& from);
  void MergeFrom(const BattleRewardAll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .OperaBattleConfig.BattleReward battle_rewards = 1;
  inline int battle_rewards_size() const;
  inline void clear_battle_rewards();
  static const int kBattleRewardsFieldNumber = 1;
  inline const ::OperaBattleConfig::BattleReward& battle_rewards(int index) const;
  inline ::OperaBattleConfig::BattleReward* mutable_battle_rewards(int index);
  inline ::OperaBattleConfig::BattleReward* add_battle_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::BattleReward >&
      battle_rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::BattleReward >*
      mutable_battle_rewards();

  // @@protoc_insertion_point(class_scope:OperaBattleConfig.BattleRewardAll)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::BattleReward > battle_rewards_;
  friend void  protobuf_AddDesc_OperaBattleConfig_2eproto();
  friend void protobuf_AssignDesc_OperaBattleConfig_2eproto();
  friend void protobuf_ShutdownFile_OperaBattleConfig_2eproto();

  void InitAsDefaultInstance();
  static BattleRewardAll* default_instance_;
};
// ===================================================================


// ===================================================================

// StarReward

// required uint32 star = 1;
inline bool StarReward::has_star() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StarReward::set_has_star() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StarReward::clear_has_star() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StarReward::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 StarReward::star() const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.StarReward.star)
  return star_;
}
inline void StarReward::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:OperaBattleConfig.StarReward.star)
}

// required uint32 cash_cost = 2;
inline bool StarReward::has_cash_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StarReward::set_has_cash_cost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StarReward::clear_has_cash_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StarReward::clear_cash_cost() {
  cash_cost_ = 0u;
  clear_has_cash_cost();
}
inline ::google::protobuf::uint32 StarReward::cash_cost() const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.StarReward.cash_cost)
  return cash_cost_;
}
inline void StarReward::set_cash_cost(::google::protobuf::uint32 value) {
  set_has_cash_cost();
  cash_cost_ = value;
  // @@protoc_insertion_point(field_set:OperaBattleConfig.StarReward.cash_cost)
}

// required uint32 time_left = 3;
inline bool StarReward::has_time_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StarReward::set_has_time_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StarReward::clear_has_time_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StarReward::clear_time_left() {
  time_left_ = 0u;
  clear_has_time_left();
}
inline ::google::protobuf::uint32 StarReward::time_left() const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.StarReward.time_left)
  return time_left_;
}
inline void StarReward::set_time_left(::google::protobuf::uint32 value) {
  set_has_time_left();
  time_left_ = value;
  // @@protoc_insertion_point(field_set:OperaBattleConfig.StarReward.time_left)
}

// repeated .RewardConfig.Reward reward = 4;
inline int StarReward::reward_size() const {
  return reward_.size();
}
inline void StarReward::clear_reward() {
  reward_.Clear();
}
inline const ::RewardConfig::Reward& StarReward::reward(int index) const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.StarReward.reward)
  return reward_.Get(index);
}
inline ::RewardConfig::Reward* StarReward::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:OperaBattleConfig.StarReward.reward)
  return reward_.Mutable(index);
}
inline ::RewardConfig::Reward* StarReward::add_reward() {
  // @@protoc_insertion_point(field_add:OperaBattleConfig.StarReward.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
StarReward::reward() const {
  // @@protoc_insertion_point(field_list:OperaBattleConfig.StarReward.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
StarReward::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:OperaBattleConfig.StarReward.reward)
  return &reward_;
}

// -------------------------------------------------------------------

// DifficultyReward

// required uint32 index = 1;
inline bool DifficultyReward::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DifficultyReward::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DifficultyReward::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DifficultyReward::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 DifficultyReward::index() const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.DifficultyReward.index)
  return index_;
}
inline void DifficultyReward::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:OperaBattleConfig.DifficultyReward.index)
}

// required uint32 time_limit = 2;
inline bool DifficultyReward::has_time_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DifficultyReward::set_has_time_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DifficultyReward::clear_has_time_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DifficultyReward::clear_time_limit() {
  time_limit_ = 0u;
  clear_has_time_limit();
}
inline ::google::protobuf::uint32 DifficultyReward::time_limit() const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.DifficultyReward.time_limit)
  return time_limit_;
}
inline void DifficultyReward::set_time_limit(::google::protobuf::uint32 value) {
  set_has_time_limit();
  time_limit_ = value;
  // @@protoc_insertion_point(field_set:OperaBattleConfig.DifficultyReward.time_limit)
}

// required uint32 cost_food = 3;
inline bool DifficultyReward::has_cost_food() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DifficultyReward::set_has_cost_food() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DifficultyReward::clear_has_cost_food() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DifficultyReward::clear_cost_food() {
  cost_food_ = 0u;
  clear_has_cost_food();
}
inline ::google::protobuf::uint32 DifficultyReward::cost_food() const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.DifficultyReward.cost_food)
  return cost_food_;
}
inline void DifficultyReward::set_cost_food(::google::protobuf::uint32 value) {
  set_has_cost_food();
  cost_food_ = value;
  // @@protoc_insertion_point(field_set:OperaBattleConfig.DifficultyReward.cost_food)
}

// repeated .OperaBattleConfig.StarReward star_reward = 4;
inline int DifficultyReward::star_reward_size() const {
  return star_reward_.size();
}
inline void DifficultyReward::clear_star_reward() {
  star_reward_.Clear();
}
inline const ::OperaBattleConfig::StarReward& DifficultyReward::star_reward(int index) const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.DifficultyReward.star_reward)
  return star_reward_.Get(index);
}
inline ::OperaBattleConfig::StarReward* DifficultyReward::mutable_star_reward(int index) {
  // @@protoc_insertion_point(field_mutable:OperaBattleConfig.DifficultyReward.star_reward)
  return star_reward_.Mutable(index);
}
inline ::OperaBattleConfig::StarReward* DifficultyReward::add_star_reward() {
  // @@protoc_insertion_point(field_add:OperaBattleConfig.DifficultyReward.star_reward)
  return star_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::StarReward >&
DifficultyReward::star_reward() const {
  // @@protoc_insertion_point(field_list:OperaBattleConfig.DifficultyReward.star_reward)
  return star_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::StarReward >*
DifficultyReward::mutable_star_reward() {
  // @@protoc_insertion_point(field_mutable_list:OperaBattleConfig.DifficultyReward.star_reward)
  return &star_reward_;
}

// -------------------------------------------------------------------

// BattleReward

// required uint32 id = 1;
inline bool BattleReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BattleReward::id() const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.BattleReward.id)
  return id_;
}
inline void BattleReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:OperaBattleConfig.BattleReward.id)
}

// repeated .OperaBattleConfig.DifficultyReward difficulty = 2;
inline int BattleReward::difficulty_size() const {
  return difficulty_.size();
}
inline void BattleReward::clear_difficulty() {
  difficulty_.Clear();
}
inline const ::OperaBattleConfig::DifficultyReward& BattleReward::difficulty(int index) const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.BattleReward.difficulty)
  return difficulty_.Get(index);
}
inline ::OperaBattleConfig::DifficultyReward* BattleReward::mutable_difficulty(int index) {
  // @@protoc_insertion_point(field_mutable:OperaBattleConfig.BattleReward.difficulty)
  return difficulty_.Mutable(index);
}
inline ::OperaBattleConfig::DifficultyReward* BattleReward::add_difficulty() {
  // @@protoc_insertion_point(field_add:OperaBattleConfig.BattleReward.difficulty)
  return difficulty_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::DifficultyReward >&
BattleReward::difficulty() const {
  // @@protoc_insertion_point(field_list:OperaBattleConfig.BattleReward.difficulty)
  return difficulty_;
}
inline ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::DifficultyReward >*
BattleReward::mutable_difficulty() {
  // @@protoc_insertion_point(field_mutable_list:OperaBattleConfig.BattleReward.difficulty)
  return &difficulty_;
}

// -------------------------------------------------------------------

// BattleRewardAll

// repeated .OperaBattleConfig.BattleReward battle_rewards = 1;
inline int BattleRewardAll::battle_rewards_size() const {
  return battle_rewards_.size();
}
inline void BattleRewardAll::clear_battle_rewards() {
  battle_rewards_.Clear();
}
inline const ::OperaBattleConfig::BattleReward& BattleRewardAll::battle_rewards(int index) const {
  // @@protoc_insertion_point(field_get:OperaBattleConfig.BattleRewardAll.battle_rewards)
  return battle_rewards_.Get(index);
}
inline ::OperaBattleConfig::BattleReward* BattleRewardAll::mutable_battle_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:OperaBattleConfig.BattleRewardAll.battle_rewards)
  return battle_rewards_.Mutable(index);
}
inline ::OperaBattleConfig::BattleReward* BattleRewardAll::add_battle_rewards() {
  // @@protoc_insertion_point(field_add:OperaBattleConfig.BattleRewardAll.battle_rewards)
  return battle_rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::BattleReward >&
BattleRewardAll::battle_rewards() const {
  // @@protoc_insertion_point(field_list:OperaBattleConfig.BattleRewardAll.battle_rewards)
  return battle_rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::OperaBattleConfig::BattleReward >*
BattleRewardAll::mutable_battle_rewards() {
  // @@protoc_insertion_point(field_mutable_list:OperaBattleConfig.BattleRewardAll.battle_rewards)
  return &battle_rewards_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OperaBattleConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OperaBattleConfig_2eproto__INCLUDED
