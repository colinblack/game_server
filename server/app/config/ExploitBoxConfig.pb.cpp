// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ExploitBoxConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ExploitBoxConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ExploitBoxConfig {

namespace {

const ::google::protobuf::Descriptor* ExploitRandomMul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExploitRandomMul_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExploitReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExploitReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExploitItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExploitItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExploitBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExploitBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* Exploit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Exploit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ExploitBoxConfig_2eproto() {
  protobuf_AddDesc_ExploitBoxConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ExploitBoxConfig.proto");
  GOOGLE_CHECK(file != NULL);
  ExploitRandomMul_descriptor_ = file->message_type(0);
  static const int ExploitRandomMul_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRandomMul, stage_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRandomMul, stage_5_),
  };
  ExploitRandomMul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExploitRandomMul_descriptor_,
      ExploitRandomMul::default_instance_,
      ExploitRandomMul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRandomMul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitRandomMul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExploitRandomMul));
  ExploitReward_descriptor_ = file->message_type(1);
  static const int ExploitReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitReward, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitReward, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitReward, is_mul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitReward, prob_),
  };
  ExploitReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExploitReward_descriptor_,
      ExploitReward::default_instance_,
      ExploitReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExploitReward));
  BaseRewardItem_descriptor_ = file->message_type(2);
  static const int BaseRewardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardItem, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardItem, prob_),
  };
  BaseRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseRewardItem_descriptor_,
      BaseRewardItem::default_instance_,
      BaseRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseRewardItem));
  ExploitItem_descriptor_ = file->message_type(3);
  static const int ExploitItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitItem, box_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitItem, exploit_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitItem, box_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitItem, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitItem, base_reward_),
  };
  ExploitItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExploitItem_descriptor_,
      ExploitItem::default_instance_,
      ExploitItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExploitItem));
  ExploitBox_descriptor_ = file->message_type(4);
  static const int ExploitBox_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitBox, prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitBox, random_mul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitBox, out_),
  };
  ExploitBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExploitBox_descriptor_,
      ExploitBox::default_instance_,
      ExploitBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExploitBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExploitBox));
  Exploit_descriptor_ = file->message_type(5);
  static const int Exploit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exploit, exploit_),
  };
  Exploit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Exploit_descriptor_,
      Exploit::default_instance_,
      Exploit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exploit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Exploit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Exploit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ExploitBoxConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExploitRandomMul_descriptor_, &ExploitRandomMul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExploitReward_descriptor_, &ExploitReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseRewardItem_descriptor_, &BaseRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExploitItem_descriptor_, &ExploitItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExploitBox_descriptor_, &ExploitBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Exploit_descriptor_, &Exploit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ExploitBoxConfig_2eproto() {
  delete ExploitRandomMul::default_instance_;
  delete ExploitRandomMul_reflection_;
  delete ExploitReward::default_instance_;
  delete ExploitReward_reflection_;
  delete BaseRewardItem::default_instance_;
  delete BaseRewardItem_reflection_;
  delete ExploitItem::default_instance_;
  delete ExploitItem_reflection_;
  delete ExploitBox::default_instance_;
  delete ExploitBox_reflection_;
  delete Exploit::default_instance_;
  delete Exploit_reflection_;
}

void protobuf_AddDesc_ExploitBoxConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::VipGiftConfig::protobuf_AddDesc_VipGiftConfig_2eproto();
  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ExploitBoxConfig.proto\022\020ExploitBoxConf"
    "ig\032\023VipGiftConfig.proto\032\026CommonGiftConfi"
    "g.proto\"4\n\020ExploitRandomMul\022\017\n\007stage_3\030\001"
    " \003(\r\022\017\n\007stage_5\030\002 \003(\r\"\205\001\n\rExploitReward\022"
    "*\n\006equips\030\001 \001(\0132\032.VipGiftConfig.EquipRew"
    "ard\022*\n\004base\030\002 \001(\0132\034.CommonGiftConfig.Bas"
    "eReward\022\016\n\006is_mul\030\003 \002(\010\022\014\n\004prob\030\004 \002(\r\"J\n"
    "\016BaseRewardItem\022*\n\004base\030\001 \002(\0132\034.CommonGi"
    "ftConfig.BaseReward\022\014\n\004prob\030\002 \002(\r\"\261\001\n\013Ex"
    "ploitItem\022\021\n\tbox_level\030\001 \002(\r\022\026\n\016exploit_"
    "amount\030\002 \003(\r\022\017\n\007box_cnt\030\003 \003(\r\022/\n\006reward\030"
    "\004 \003(\0132\037.ExploitBoxConfig.ExploitReward\0225"
    "\n\013base_reward\030\005 \003(\0132 .ExploitBoxConfig.B"
    "aseRewardItem\"~\n\nExploitBox\022\014\n\004prob\030\001 \003("
    "\r\0226\n\nrandom_mul\030\002 \002(\0132\".ExploitBoxConfig"
    ".ExploitRandomMul\022*\n\003out\030\003 \003(\0132\035.Exploit"
    "BoxConfig.ExploitItem\"8\n\007Exploit\022-\n\007expl"
    "oit\030\001 \002(\0132\034.ExploitBoxConfig.ExploitBox", 719);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ExploitBoxConfig.proto", &protobuf_RegisterTypes);
  ExploitRandomMul::default_instance_ = new ExploitRandomMul();
  ExploitReward::default_instance_ = new ExploitReward();
  BaseRewardItem::default_instance_ = new BaseRewardItem();
  ExploitItem::default_instance_ = new ExploitItem();
  ExploitBox::default_instance_ = new ExploitBox();
  Exploit::default_instance_ = new Exploit();
  ExploitRandomMul::default_instance_->InitAsDefaultInstance();
  ExploitReward::default_instance_->InitAsDefaultInstance();
  BaseRewardItem::default_instance_->InitAsDefaultInstance();
  ExploitItem::default_instance_->InitAsDefaultInstance();
  ExploitBox::default_instance_->InitAsDefaultInstance();
  Exploit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ExploitBoxConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ExploitBoxConfig_2eproto {
  StaticDescriptorInitializer_ExploitBoxConfig_2eproto() {
    protobuf_AddDesc_ExploitBoxConfig_2eproto();
  }
} static_descriptor_initializer_ExploitBoxConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ExploitRandomMul::kStage3FieldNumber;
const int ExploitRandomMul::kStage5FieldNumber;
#endif  // !_MSC_VER

ExploitRandomMul::ExploitRandomMul()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExploitBoxConfig.ExploitRandomMul)
}

void ExploitRandomMul::InitAsDefaultInstance() {
}

ExploitRandomMul::ExploitRandomMul(const ExploitRandomMul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExploitBoxConfig.ExploitRandomMul)
}

void ExploitRandomMul::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExploitRandomMul::~ExploitRandomMul() {
  // @@protoc_insertion_point(destructor:ExploitBoxConfig.ExploitRandomMul)
  SharedDtor();
}

void ExploitRandomMul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExploitRandomMul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploitRandomMul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploitRandomMul_descriptor_;
}

const ExploitRandomMul& ExploitRandomMul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExploitBoxConfig_2eproto();
  return *default_instance_;
}

ExploitRandomMul* ExploitRandomMul::default_instance_ = NULL;

ExploitRandomMul* ExploitRandomMul::New() const {
  return new ExploitRandomMul;
}

void ExploitRandomMul::Clear() {
  stage_3_.Clear();
  stage_5_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExploitRandomMul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExploitBoxConfig.ExploitRandomMul)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 stage_3 = 1;
      case 1: {
        if (tag == 8) {
         parse_stage_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_stage_3())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stage_3())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_stage_3;
        if (input->ExpectTag(16)) goto parse_stage_5;
        break;
      }

      // repeated uint32 stage_5 = 2;
      case 2: {
        if (tag == 16) {
         parse_stage_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_stage_5())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stage_5())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stage_5;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExploitBoxConfig.ExploitRandomMul)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExploitBoxConfig.ExploitRandomMul)
  return false;
#undef DO_
}

void ExploitRandomMul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExploitBoxConfig.ExploitRandomMul)
  // repeated uint32 stage_3 = 1;
  for (int i = 0; i < this->stage_3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->stage_3(i), output);
  }

  // repeated uint32 stage_5 = 2;
  for (int i = 0; i < this->stage_5_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->stage_5(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExploitBoxConfig.ExploitRandomMul)
}

::google::protobuf::uint8* ExploitRandomMul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExploitBoxConfig.ExploitRandomMul)
  // repeated uint32 stage_3 = 1;
  for (int i = 0; i < this->stage_3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->stage_3(i), target);
  }

  // repeated uint32 stage_5 = 2;
  for (int i = 0; i < this->stage_5_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->stage_5(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExploitBoxConfig.ExploitRandomMul)
  return target;
}

int ExploitRandomMul::ByteSize() const {
  int total_size = 0;

  // repeated uint32 stage_3 = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->stage_3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stage_3(i));
    }
    total_size += 1 * this->stage_3_size() + data_size;
  }

  // repeated uint32 stage_5 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stage_5_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stage_5(i));
    }
    total_size += 1 * this->stage_5_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploitRandomMul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExploitRandomMul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExploitRandomMul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExploitRandomMul::MergeFrom(const ExploitRandomMul& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_3_.MergeFrom(from.stage_3_);
  stage_5_.MergeFrom(from.stage_5_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExploitRandomMul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploitRandomMul::CopyFrom(const ExploitRandomMul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploitRandomMul::IsInitialized() const {

  return true;
}

void ExploitRandomMul::Swap(ExploitRandomMul* other) {
  if (other != this) {
    stage_3_.Swap(&other->stage_3_);
    stage_5_.Swap(&other->stage_5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExploitRandomMul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExploitRandomMul_descriptor_;
  metadata.reflection = ExploitRandomMul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExploitReward::kEquipsFieldNumber;
const int ExploitReward::kBaseFieldNumber;
const int ExploitReward::kIsMulFieldNumber;
const int ExploitReward::kProbFieldNumber;
#endif  // !_MSC_VER

ExploitReward::ExploitReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExploitBoxConfig.ExploitReward)
}

void ExploitReward::InitAsDefaultInstance() {
  equips_ = const_cast< ::VipGiftConfig::EquipReward*>(&::VipGiftConfig::EquipReward::default_instance());
  base_ = const_cast< ::CommonGiftConfig::BaseReward*>(&::CommonGiftConfig::BaseReward::default_instance());
}

ExploitReward::ExploitReward(const ExploitReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExploitBoxConfig.ExploitReward)
}

void ExploitReward::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  is_mul_ = false;
  prob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExploitReward::~ExploitReward() {
  // @@protoc_insertion_point(destructor:ExploitBoxConfig.ExploitReward)
  SharedDtor();
}

void ExploitReward::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
  }
}

void ExploitReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploitReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploitReward_descriptor_;
}

const ExploitReward& ExploitReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExploitBoxConfig_2eproto();
  return *default_instance_;
}

ExploitReward* ExploitReward::default_instance_ = NULL;

ExploitReward* ExploitReward::New() const {
  return new ExploitReward;
}

void ExploitReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExploitReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(is_mul_, prob_);
    if (has_equips()) {
      if (equips_ != NULL) equips_->::VipGiftConfig::EquipReward::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExploitReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExploitBoxConfig.ExploitReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .VipGiftConfig.EquipReward equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .CommonGiftConfig.BaseReward base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_mul;
        break;
      }

      // required bool is_mul = 3;
      case 3: {
        if (tag == 24) {
         parse_is_mul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_mul_)));
          set_has_is_mul();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_prob;
        break;
      }

      // required uint32 prob = 4;
      case 4: {
        if (tag == 32) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExploitBoxConfig.ExploitReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExploitBoxConfig.ExploitReward)
  return false;
#undef DO_
}

void ExploitReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExploitBoxConfig.ExploitReward)
  // optional .VipGiftConfig.EquipReward equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // optional .CommonGiftConfig.BaseReward base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // required bool is_mul = 3;
  if (has_is_mul()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_mul(), output);
  }

  // required uint32 prob = 4;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExploitBoxConfig.ExploitReward)
}

::google::protobuf::uint8* ExploitReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExploitBoxConfig.ExploitReward)
  // optional .VipGiftConfig.EquipReward equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // optional .CommonGiftConfig.BaseReward base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // required bool is_mul = 3;
  if (has_is_mul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_mul(), target);
  }

  // required uint32 prob = 4;
  if (has_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExploitBoxConfig.ExploitReward)
  return target;
}

int ExploitReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .VipGiftConfig.EquipReward equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .CommonGiftConfig.BaseReward base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required bool is_mul = 3;
    if (has_is_mul()) {
      total_size += 1 + 1;
    }

    // required uint32 prob = 4;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploitReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExploitReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExploitReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExploitReward::MergeFrom(const ExploitReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::VipGiftConfig::EquipReward::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::CommonGiftConfig::BaseReward::MergeFrom(from.base());
    }
    if (from.has_is_mul()) {
      set_is_mul(from.is_mul());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExploitReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploitReward::CopyFrom(const ExploitReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploitReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  return true;
}

void ExploitReward::Swap(ExploitReward* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(base_, other->base_);
    std::swap(is_mul_, other->is_mul_);
    std::swap(prob_, other->prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExploitReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExploitReward_descriptor_;
  metadata.reflection = ExploitReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseRewardItem::kBaseFieldNumber;
const int BaseRewardItem::kProbFieldNumber;
#endif  // !_MSC_VER

BaseRewardItem::BaseRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExploitBoxConfig.BaseRewardItem)
}

void BaseRewardItem::InitAsDefaultInstance() {
  base_ = const_cast< ::CommonGiftConfig::BaseReward*>(&::CommonGiftConfig::BaseReward::default_instance());
}

BaseRewardItem::BaseRewardItem(const BaseRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExploitBoxConfig.BaseRewardItem)
}

void BaseRewardItem::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  prob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseRewardItem::~BaseRewardItem() {
  // @@protoc_insertion_point(destructor:ExploitBoxConfig.BaseRewardItem)
  SharedDtor();
}

void BaseRewardItem::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void BaseRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseRewardItem_descriptor_;
}

const BaseRewardItem& BaseRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExploitBoxConfig_2eproto();
  return *default_instance_;
}

BaseRewardItem* BaseRewardItem::default_instance_ = NULL;

BaseRewardItem* BaseRewardItem::New() const {
  return new BaseRewardItem;
}

void BaseRewardItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_base()) {
      if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
    }
    prob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExploitBoxConfig.BaseRewardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommonGiftConfig.BaseReward base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prob;
        break;
      }

      // required uint32 prob = 2;
      case 2: {
        if (tag == 16) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExploitBoxConfig.BaseRewardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExploitBoxConfig.BaseRewardItem)
  return false;
#undef DO_
}

void BaseRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExploitBoxConfig.BaseRewardItem)
  // required .CommonGiftConfig.BaseReward base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // required uint32 prob = 2;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExploitBoxConfig.BaseRewardItem)
}

::google::protobuf::uint8* BaseRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExploitBoxConfig.BaseRewardItem)
  // required .CommonGiftConfig.BaseReward base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // required uint32 prob = 2;
  if (has_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExploitBoxConfig.BaseRewardItem)
  return target;
}

int BaseRewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CommonGiftConfig.BaseReward base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required uint32 prob = 2;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseRewardItem::MergeFrom(const BaseRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CommonGiftConfig::BaseReward::MergeFrom(from.base());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseRewardItem::CopyFrom(const BaseRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRewardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BaseRewardItem::Swap(BaseRewardItem* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(prob_, other->prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseRewardItem_descriptor_;
  metadata.reflection = BaseRewardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExploitItem::kBoxLevelFieldNumber;
const int ExploitItem::kExploitAmountFieldNumber;
const int ExploitItem::kBoxCntFieldNumber;
const int ExploitItem::kRewardFieldNumber;
const int ExploitItem::kBaseRewardFieldNumber;
#endif  // !_MSC_VER

ExploitItem::ExploitItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExploitBoxConfig.ExploitItem)
}

void ExploitItem::InitAsDefaultInstance() {
}

ExploitItem::ExploitItem(const ExploitItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExploitBoxConfig.ExploitItem)
}

void ExploitItem::SharedCtor() {
  _cached_size_ = 0;
  box_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExploitItem::~ExploitItem() {
  // @@protoc_insertion_point(destructor:ExploitBoxConfig.ExploitItem)
  SharedDtor();
}

void ExploitItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExploitItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploitItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploitItem_descriptor_;
}

const ExploitItem& ExploitItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExploitBoxConfig_2eproto();
  return *default_instance_;
}

ExploitItem* ExploitItem::default_instance_ = NULL;

ExploitItem* ExploitItem::New() const {
  return new ExploitItem;
}

void ExploitItem::Clear() {
  box_level_ = 0u;
  exploit_amount_.Clear();
  box_cnt_.Clear();
  reward_.Clear();
  base_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExploitItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExploitBoxConfig.ExploitItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 box_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &box_level_)));
          set_has_box_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exploit_amount;
        break;
      }

      // repeated uint32 exploit_amount = 2;
      case 2: {
        if (tag == 16) {
         parse_exploit_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_exploit_amount())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exploit_amount())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exploit_amount;
        if (input->ExpectTag(24)) goto parse_box_cnt;
        break;
      }

      // repeated uint32 box_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_box_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_box_cnt())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_box_cnt())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_box_cnt;
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // repeated .ExploitBoxConfig.ExploitReward reward = 4;
      case 4: {
        if (tag == 34) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        if (input->ExpectTag(42)) goto parse_base_reward;
        break;
      }

      // repeated .ExploitBoxConfig.BaseRewardItem base_reward = 5;
      case 5: {
        if (tag == 42) {
         parse_base_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_base_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExploitBoxConfig.ExploitItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExploitBoxConfig.ExploitItem)
  return false;
#undef DO_
}

void ExploitItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExploitBoxConfig.ExploitItem)
  // required uint32 box_level = 1;
  if (has_box_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->box_level(), output);
  }

  // repeated uint32 exploit_amount = 2;
  for (int i = 0; i < this->exploit_amount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->exploit_amount(i), output);
  }

  // repeated uint32 box_cnt = 3;
  for (int i = 0; i < this->box_cnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->box_cnt(i), output);
  }

  // repeated .ExploitBoxConfig.ExploitReward reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  // repeated .ExploitBoxConfig.BaseRewardItem base_reward = 5;
  for (int i = 0; i < this->base_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->base_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExploitBoxConfig.ExploitItem)
}

::google::protobuf::uint8* ExploitItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExploitBoxConfig.ExploitItem)
  // required uint32 box_level = 1;
  if (has_box_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->box_level(), target);
  }

  // repeated uint32 exploit_amount = 2;
  for (int i = 0; i < this->exploit_amount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->exploit_amount(i), target);
  }

  // repeated uint32 box_cnt = 3;
  for (int i = 0; i < this->box_cnt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->box_cnt(i), target);
  }

  // repeated .ExploitBoxConfig.ExploitReward reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  // repeated .ExploitBoxConfig.BaseRewardItem base_reward = 5;
  for (int i = 0; i < this->base_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->base_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExploitBoxConfig.ExploitItem)
  return target;
}

int ExploitItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 box_level = 1;
    if (has_box_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->box_level());
    }

  }
  // repeated uint32 exploit_amount = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exploit_amount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->exploit_amount(i));
    }
    total_size += 1 * this->exploit_amount_size() + data_size;
  }

  // repeated uint32 box_cnt = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->box_cnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->box_cnt(i));
    }
    total_size += 1 * this->box_cnt_size() + data_size;
  }

  // repeated .ExploitBoxConfig.ExploitReward reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .ExploitBoxConfig.BaseRewardItem base_reward = 5;
  total_size += 1 * this->base_reward_size();
  for (int i = 0; i < this->base_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploitItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExploitItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExploitItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExploitItem::MergeFrom(const ExploitItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  exploit_amount_.MergeFrom(from.exploit_amount_);
  box_cnt_.MergeFrom(from.box_cnt_);
  reward_.MergeFrom(from.reward_);
  base_reward_.MergeFrom(from.base_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_box_level()) {
      set_box_level(from.box_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExploitItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploitItem::CopyFrom(const ExploitItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploitItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->base_reward())) return false;
  return true;
}

void ExploitItem::Swap(ExploitItem* other) {
  if (other != this) {
    std::swap(box_level_, other->box_level_);
    exploit_amount_.Swap(&other->exploit_amount_);
    box_cnt_.Swap(&other->box_cnt_);
    reward_.Swap(&other->reward_);
    base_reward_.Swap(&other->base_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExploitItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExploitItem_descriptor_;
  metadata.reflection = ExploitItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExploitBox::kProbFieldNumber;
const int ExploitBox::kRandomMulFieldNumber;
const int ExploitBox::kOutFieldNumber;
#endif  // !_MSC_VER

ExploitBox::ExploitBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExploitBoxConfig.ExploitBox)
}

void ExploitBox::InitAsDefaultInstance() {
  random_mul_ = const_cast< ::ExploitBoxConfig::ExploitRandomMul*>(&::ExploitBoxConfig::ExploitRandomMul::default_instance());
}

ExploitBox::ExploitBox(const ExploitBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExploitBoxConfig.ExploitBox)
}

void ExploitBox::SharedCtor() {
  _cached_size_ = 0;
  random_mul_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExploitBox::~ExploitBox() {
  // @@protoc_insertion_point(destructor:ExploitBoxConfig.ExploitBox)
  SharedDtor();
}

void ExploitBox::SharedDtor() {
  if (this != default_instance_) {
    delete random_mul_;
  }
}

void ExploitBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExploitBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExploitBox_descriptor_;
}

const ExploitBox& ExploitBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExploitBoxConfig_2eproto();
  return *default_instance_;
}

ExploitBox* ExploitBox::default_instance_ = NULL;

ExploitBox* ExploitBox::New() const {
  return new ExploitBox;
}

void ExploitBox::Clear() {
  if (has_random_mul()) {
    if (random_mul_ != NULL) random_mul_->::ExploitBoxConfig::ExploitRandomMul::Clear();
  }
  prob_.Clear();
  out_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExploitBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExploitBoxConfig.ExploitBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 prob = 1;
      case 1: {
        if (tag == 8) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_prob())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_prob())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_prob;
        if (input->ExpectTag(18)) goto parse_random_mul;
        break;
      }

      // required .ExploitBoxConfig.ExploitRandomMul random_mul = 2;
      case 2: {
        if (tag == 18) {
         parse_random_mul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_random_mul()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_out;
        break;
      }

      // repeated .ExploitBoxConfig.ExploitItem out = 3;
      case 3: {
        if (tag == 26) {
         parse_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_out()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_out;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExploitBoxConfig.ExploitBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExploitBoxConfig.ExploitBox)
  return false;
#undef DO_
}

void ExploitBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExploitBoxConfig.ExploitBox)
  // repeated uint32 prob = 1;
  for (int i = 0; i < this->prob_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->prob(i), output);
  }

  // required .ExploitBoxConfig.ExploitRandomMul random_mul = 2;
  if (has_random_mul()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->random_mul(), output);
  }

  // repeated .ExploitBoxConfig.ExploitItem out = 3;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->out(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExploitBoxConfig.ExploitBox)
}

::google::protobuf::uint8* ExploitBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExploitBoxConfig.ExploitBox)
  // repeated uint32 prob = 1;
  for (int i = 0; i < this->prob_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->prob(i), target);
  }

  // required .ExploitBoxConfig.ExploitRandomMul random_mul = 2;
  if (has_random_mul()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->random_mul(), target);
  }

  // repeated .ExploitBoxConfig.ExploitItem out = 3;
  for (int i = 0; i < this->out_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->out(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExploitBoxConfig.ExploitBox)
  return target;
}

int ExploitBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ExploitBoxConfig.ExploitRandomMul random_mul = 2;
    if (has_random_mul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->random_mul());
    }

  }
  // repeated uint32 prob = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->prob_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->prob(i));
    }
    total_size += 1 * this->prob_size() + data_size;
  }

  // repeated .ExploitBoxConfig.ExploitItem out = 3;
  total_size += 1 * this->out_size();
  for (int i = 0; i < this->out_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->out(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExploitBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExploitBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExploitBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExploitBox::MergeFrom(const ExploitBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  prob_.MergeFrom(from.prob_);
  out_.MergeFrom(from.out_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_random_mul()) {
      mutable_random_mul()->::ExploitBoxConfig::ExploitRandomMul::MergeFrom(from.random_mul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExploitBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExploitBox::CopyFrom(const ExploitBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExploitBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->out())) return false;
  return true;
}

void ExploitBox::Swap(ExploitBox* other) {
  if (other != this) {
    prob_.Swap(&other->prob_);
    std::swap(random_mul_, other->random_mul_);
    out_.Swap(&other->out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExploitBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExploitBox_descriptor_;
  metadata.reflection = ExploitBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Exploit::kExploitFieldNumber;
#endif  // !_MSC_VER

Exploit::Exploit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExploitBoxConfig.Exploit)
}

void Exploit::InitAsDefaultInstance() {
  exploit_ = const_cast< ::ExploitBoxConfig::ExploitBox*>(&::ExploitBoxConfig::ExploitBox::default_instance());
}

Exploit::Exploit(const Exploit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ExploitBoxConfig.Exploit)
}

void Exploit::SharedCtor() {
  _cached_size_ = 0;
  exploit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Exploit::~Exploit() {
  // @@protoc_insertion_point(destructor:ExploitBoxConfig.Exploit)
  SharedDtor();
}

void Exploit::SharedDtor() {
  if (this != default_instance_) {
    delete exploit_;
  }
}

void Exploit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Exploit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Exploit_descriptor_;
}

const Exploit& Exploit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ExploitBoxConfig_2eproto();
  return *default_instance_;
}

Exploit* Exploit::default_instance_ = NULL;

Exploit* Exploit::New() const {
  return new Exploit;
}

void Exploit::Clear() {
  if (has_exploit()) {
    if (exploit_ != NULL) exploit_->::ExploitBoxConfig::ExploitBox::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Exploit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ExploitBoxConfig.Exploit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ExploitBoxConfig.ExploitBox exploit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exploit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExploitBoxConfig.Exploit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExploitBoxConfig.Exploit)
  return false;
#undef DO_
}

void Exploit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExploitBoxConfig.Exploit)
  // required .ExploitBoxConfig.ExploitBox exploit = 1;
  if (has_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exploit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ExploitBoxConfig.Exploit)
}

::google::protobuf::uint8* Exploit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExploitBoxConfig.Exploit)
  // required .ExploitBoxConfig.ExploitBox exploit = 1;
  if (has_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exploit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExploitBoxConfig.Exploit)
  return target;
}

int Exploit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ExploitBoxConfig.ExploitBox exploit = 1;
    if (has_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exploit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Exploit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Exploit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Exploit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Exploit::MergeFrom(const Exploit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exploit()) {
      mutable_exploit()->::ExploitBoxConfig::ExploitBox::MergeFrom(from.exploit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Exploit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exploit::CopyFrom(const Exploit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exploit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_exploit()) {
    if (!this->exploit().IsInitialized()) return false;
  }
  return true;
}

void Exploit::Swap(Exploit* other) {
  if (other != this) {
    std::swap(exploit_, other->exploit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Exploit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Exploit_descriptor_;
  metadata.reflection = Exploit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ExploitBoxConfig

// @@protoc_insertion_point(global_scope)
