// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FogGateConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FogGateConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FogGateConfig {

namespace {

const ::google::protobuf::Descriptor* FogGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FogGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* FogGates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FogGates_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FogGateConfig_2eproto() {
  protobuf_AddDesc_FogGateConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FogGateConfig.proto");
  GOOGLE_CHECK(file != NULL);
  FogGate_descriptor_ = file->message_type(0);
  static const int FogGate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGate, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGate, terrain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGate, npcs_),
  };
  FogGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FogGate_descriptor_,
      FogGate::default_instance_,
      FogGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FogGate));
  FogGates_descriptor_ = file->message_type(1);
  static const int FogGates_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGates, foggates_),
  };
  FogGates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FogGates_descriptor_,
      FogGates::default_instance_,
      FogGates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FogGates));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FogGateConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FogGate_descriptor_, &FogGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FogGates_descriptor_, &FogGates::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FogGateConfig_2eproto() {
  delete FogGate::default_instance_;
  delete FogGate_reflection_;
  delete FogGates::default_instance_;
  delete FogGates_reflection_;
}

void protobuf_AddDesc_FogGateConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023FogGateConfig.proto\022\rFogGateConfig\"8\n\007"
    "FogGate\022\016\n\006gateid\030\001 \002(\r\022\017\n\007terrain\030\002 \002(\r"
    "\022\014\n\004npcs\030\003 \003(\r\"4\n\010FogGates\022(\n\010foggates\030\001"
    " \003(\0132\026.FogGateConfig.FogGate", 148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FogGateConfig.proto", &protobuf_RegisterTypes);
  FogGate::default_instance_ = new FogGate();
  FogGates::default_instance_ = new FogGates();
  FogGate::default_instance_->InitAsDefaultInstance();
  FogGates::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FogGateConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FogGateConfig_2eproto {
  StaticDescriptorInitializer_FogGateConfig_2eproto() {
    protobuf_AddDesc_FogGateConfig_2eproto();
  }
} static_descriptor_initializer_FogGateConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FogGate::kGateidFieldNumber;
const int FogGate::kTerrainFieldNumber;
const int FogGate::kNpcsFieldNumber;
#endif  // !_MSC_VER

FogGate::FogGate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FogGateConfig.FogGate)
}

void FogGate::InitAsDefaultInstance() {
}

FogGate::FogGate(const FogGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FogGateConfig.FogGate)
}

void FogGate::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  terrain_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FogGate::~FogGate() {
  // @@protoc_insertion_point(destructor:FogGateConfig.FogGate)
  SharedDtor();
}

void FogGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FogGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FogGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FogGate_descriptor_;
}

const FogGate& FogGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FogGateConfig_2eproto();
  return *default_instance_;
}

FogGate* FogGate::default_instance_ = NULL;

FogGate* FogGate::New() const {
  return new FogGate;
}

void FogGate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FogGate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gateid_, terrain_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  npcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FogGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FogGateConfig.FogGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_terrain;
        break;
      }

      // required uint32 terrain = 2;
      case 2: {
        if (tag == 16) {
         parse_terrain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terrain_)));
          set_has_terrain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcs;
        break;
      }

      // repeated uint32 npcs = 3;
      case 3: {
        if (tag == 24) {
         parse_npcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_npcs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_npcs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FogGateConfig.FogGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FogGateConfig.FogGate)
  return false;
#undef DO_
}

void FogGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FogGateConfig.FogGate)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 terrain = 2;
  if (has_terrain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->terrain(), output);
  }

  // repeated uint32 npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->npcs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FogGateConfig.FogGate)
}

::google::protobuf::uint8* FogGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FogGateConfig.FogGate)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 terrain = 2;
  if (has_terrain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->terrain(), target);
  }

  // repeated uint32 npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->npcs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FogGateConfig.FogGate)
  return target;
}

int FogGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 terrain = 2;
    if (has_terrain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terrain());
    }

  }
  // repeated uint32 npcs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->npcs(i));
    }
    total_size += 1 * this->npcs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FogGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FogGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FogGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FogGate::MergeFrom(const FogGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_terrain()) {
      set_terrain(from.terrain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FogGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FogGate::CopyFrom(const FogGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FogGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FogGate::Swap(FogGate* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(terrain_, other->terrain_);
    npcs_.Swap(&other->npcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FogGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FogGate_descriptor_;
  metadata.reflection = FogGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FogGates::kFoggatesFieldNumber;
#endif  // !_MSC_VER

FogGates::FogGates()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FogGateConfig.FogGates)
}

void FogGates::InitAsDefaultInstance() {
}

FogGates::FogGates(const FogGates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FogGateConfig.FogGates)
}

void FogGates::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FogGates::~FogGates() {
  // @@protoc_insertion_point(destructor:FogGateConfig.FogGates)
  SharedDtor();
}

void FogGates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FogGates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FogGates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FogGates_descriptor_;
}

const FogGates& FogGates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FogGateConfig_2eproto();
  return *default_instance_;
}

FogGates* FogGates::default_instance_ = NULL;

FogGates* FogGates::New() const {
  return new FogGates;
}

void FogGates::Clear() {
  foggates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FogGates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FogGateConfig.FogGates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FogGateConfig.FogGate foggates = 1;
      case 1: {
        if (tag == 10) {
         parse_foggates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_foggates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_foggates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FogGateConfig.FogGates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FogGateConfig.FogGates)
  return false;
#undef DO_
}

void FogGates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FogGateConfig.FogGates)
  // repeated .FogGateConfig.FogGate foggates = 1;
  for (int i = 0; i < this->foggates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->foggates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FogGateConfig.FogGates)
}

::google::protobuf::uint8* FogGates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FogGateConfig.FogGates)
  // repeated .FogGateConfig.FogGate foggates = 1;
  for (int i = 0; i < this->foggates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->foggates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FogGateConfig.FogGates)
  return target;
}

int FogGates::ByteSize() const {
  int total_size = 0;

  // repeated .FogGateConfig.FogGate foggates = 1;
  total_size += 1 * this->foggates_size();
  for (int i = 0; i < this->foggates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->foggates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FogGates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FogGates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FogGates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FogGates::MergeFrom(const FogGates& from) {
  GOOGLE_CHECK_NE(&from, this);
  foggates_.MergeFrom(from.foggates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FogGates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FogGates::CopyFrom(const FogGates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FogGates::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->foggates())) return false;
  return true;
}

void FogGates::Swap(FogGates* other) {
  if (other != this) {
    foggates_.Swap(&other->foggates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FogGates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FogGates_descriptor_;
  metadata.reflection = FogGates_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FogGateConfig

// @@protoc_insertion_point(global_scope)
