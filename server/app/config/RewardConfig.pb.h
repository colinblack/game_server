// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RewardConfig.proto

#ifndef PROTOBUF_RewardConfig_2eproto__INCLUDED
#define PROTOBUF_RewardConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "VipGiftConfig.pb.h"
#include "CommonGiftConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace RewardConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RewardConfig_2eproto();
void protobuf_AssignDesc_RewardConfig_2eproto();
void protobuf_ShutdownFile_RewardConfig_2eproto();

class Component;
class Reward;
class CountryTaskBaseItem;
class CountryTaskItem;
class CountryTask;
class FirstRechargeReward;
class FirstRecharge;
class IntegralReward;
class IntegralTime;
class PkFieldReward;
class PkField;
class DayReward;
class CumulationLogin;
class CumulationLoginReward;

// ===================================================================

class Component : public ::google::protobuf::Message {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Component& default_instance();

  void Swap(Component* other);

  // implements Message ----------------------------------------------

  Component* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 slave1 = 4;
  inline bool has_slave1() const;
  inline void clear_slave1();
  static const int kSlave1FieldNumber = 4;
  inline ::google::protobuf::uint32 slave1() const;
  inline void set_slave1(::google::protobuf::uint32 value);

  // optional uint32 slave2 = 5;
  inline bool has_slave2() const;
  inline void clear_slave2();
  static const int kSlave2FieldNumber = 5;
  inline ::google::protobuf::uint32 slave2() const;
  inline void set_slave2(::google::protobuf::uint32 value);

  // optional uint32 slave3 = 6;
  inline bool has_slave3() const;
  inline void clear_slave3();
  static const int kSlave3FieldNumber = 6;
  inline ::google::protobuf::uint32 slave3() const;
  inline void set_slave3(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RewardConfig.Component)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_slave1();
  inline void clear_has_slave1();
  inline void set_has_slave2();
  inline void clear_has_slave2();
  inline void set_has_slave3();
  inline void clear_has_slave3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 slave1_;
  ::google::protobuf::uint32 slave2_;
  ::google::protobuf::uint32 slave3_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static Component* default_instance_;
};
// -------------------------------------------------------------------

class Reward : public ::google::protobuf::Message {
 public:
  Reward();
  virtual ~Reward();

  Reward(const Reward& from);

  inline Reward& operator=(const Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reward& default_instance();

  void Swap(Reward* other);

  // implements Message ----------------------------------------------

  Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reward& from);
  void MergeFrom(const Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .VipGiftConfig.EquipReward equips = 1;
  inline bool has_equips() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 1;
  inline const ::VipGiftConfig::EquipReward& equips() const;
  inline ::VipGiftConfig::EquipReward* mutable_equips();
  inline ::VipGiftConfig::EquipReward* release_equips();
  inline void set_allocated_equips(::VipGiftConfig::EquipReward* equips);

  // optional .CommonGiftConfig.BaseReward base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::CommonGiftConfig::BaseReward& base() const;
  inline ::CommonGiftConfig::BaseReward* mutable_base();
  inline ::CommonGiftConfig::BaseReward* release_base();
  inline void set_allocated_base(::CommonGiftConfig::BaseReward* base);

  // optional uint32 hero = 3;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 3;
  inline ::google::protobuf::uint32 hero() const;
  inline void set_hero(::google::protobuf::uint32 value);

  // optional .RewardConfig.Component component = 4;
  inline bool has_component() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 4;
  inline const ::RewardConfig::Component& component() const;
  inline ::RewardConfig::Component* mutable_component();
  inline ::RewardConfig::Component* release_component();
  inline void set_allocated_component(::RewardConfig::Component* component);

  // @@protoc_insertion_point(class_scope:RewardConfig.Reward)
 private:
  inline void set_has_equips();
  inline void clear_has_equips();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_component();
  inline void clear_has_component();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::VipGiftConfig::EquipReward* equips_;
  ::CommonGiftConfig::BaseReward* base_;
  ::RewardConfig::Component* component_;
  ::google::protobuf::uint32 hero_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static Reward* default_instance_;
};
// -------------------------------------------------------------------

class CountryTaskBaseItem : public ::google::protobuf::Message {
 public:
  CountryTaskBaseItem();
  virtual ~CountryTaskBaseItem();

  CountryTaskBaseItem(const CountryTaskBaseItem& from);

  inline CountryTaskBaseItem& operator=(const CountryTaskBaseItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryTaskBaseItem& default_instance();

  void Swap(CountryTaskBaseItem* other);

  // implements Message ----------------------------------------------

  CountryTaskBaseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryTaskBaseItem& from);
  void MergeFrom(const CountryTaskBaseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // required .CommonGiftConfig.BaseReward base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::CommonGiftConfig::BaseReward& base() const;
  inline ::CommonGiftConfig::BaseReward* mutable_base();
  inline ::CommonGiftConfig::BaseReward* release_base();
  inline void set_allocated_base(::CommonGiftConfig::BaseReward* base);

  // repeated uint32 kills = 3;
  inline int kills_size() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 3;
  inline ::google::protobuf::uint32 kills(int index) const;
  inline void set_kills(int index, ::google::protobuf::uint32 value);
  inline void add_kills(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      kills() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_kills();

  // @@protoc_insertion_point(class_scope:RewardConfig.CountryTaskBaseItem)
 private:
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonGiftConfig::BaseReward* base_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > kills_;
  ::google::protobuf::uint32 day_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static CountryTaskBaseItem* default_instance_;
};
// -------------------------------------------------------------------

class CountryTaskItem : public ::google::protobuf::Message {
 public:
  CountryTaskItem();
  virtual ~CountryTaskItem();

  CountryTaskItem(const CountryTaskItem& from);

  inline CountryTaskItem& operator=(const CountryTaskItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryTaskItem& default_instance();

  void Swap(CountryTaskItem* other);

  // implements Message ----------------------------------------------

  CountryTaskItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryTaskItem& from);
  void MergeFrom(const CountryTaskItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RewardConfig.Reward reward_1 = 1;
  inline int reward_1_size() const;
  inline void clear_reward_1();
  static const int kReward1FieldNumber = 1;
  inline const ::RewardConfig::Reward& reward_1(int index) const;
  inline ::RewardConfig::Reward* mutable_reward_1(int index);
  inline ::RewardConfig::Reward* add_reward_1();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
      reward_1() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
      mutable_reward_1();

  // repeated .RewardConfig.Reward reward_2 = 2;
  inline int reward_2_size() const;
  inline void clear_reward_2();
  static const int kReward2FieldNumber = 2;
  inline const ::RewardConfig::Reward& reward_2(int index) const;
  inline ::RewardConfig::Reward* mutable_reward_2(int index);
  inline ::RewardConfig::Reward* add_reward_2();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
      reward_2() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
      mutable_reward_2();

  // repeated .RewardConfig.Reward reward_3 = 3;
  inline int reward_3_size() const;
  inline void clear_reward_3();
  static const int kReward3FieldNumber = 3;
  inline const ::RewardConfig::Reward& reward_3(int index) const;
  inline ::RewardConfig::Reward* mutable_reward_3(int index);
  inline ::RewardConfig::Reward* add_reward_3();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
      reward_3() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
      mutable_reward_3();

  // repeated float base_factor = 4;
  inline int base_factor_size() const;
  inline void clear_base_factor();
  static const int kBaseFactorFieldNumber = 4;
  inline float base_factor(int index) const;
  inline void set_base_factor(int index, float value);
  inline void add_base_factor(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      base_factor() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_base_factor();

  // repeated float expand_factor = 5;
  inline int expand_factor_size() const;
  inline void clear_expand_factor();
  static const int kExpandFactorFieldNumber = 5;
  inline float expand_factor(int index) const;
  inline void set_expand_factor(int index, float value);
  inline void add_expand_factor(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      expand_factor() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_expand_factor();

  // repeated .RewardConfig.CountryTaskBaseItem base_reward = 6;
  inline int base_reward_size() const;
  inline void clear_base_reward();
  static const int kBaseRewardFieldNumber = 6;
  inline const ::RewardConfig::CountryTaskBaseItem& base_reward(int index) const;
  inline ::RewardConfig::CountryTaskBaseItem* mutable_base_reward(int index);
  inline ::RewardConfig::CountryTaskBaseItem* add_base_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::CountryTaskBaseItem >&
      base_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::CountryTaskBaseItem >*
      mutable_base_reward();

  // repeated uint32 tech_coefficient = 7;
  inline int tech_coefficient_size() const;
  inline void clear_tech_coefficient();
  static const int kTechCoefficientFieldNumber = 7;
  inline ::google::protobuf::uint32 tech_coefficient(int index) const;
  inline void set_tech_coefficient(int index, ::google::protobuf::uint32 value);
  inline void add_tech_coefficient(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tech_coefficient() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tech_coefficient();

  // @@protoc_insertion_point(class_scope:RewardConfig.CountryTaskItem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward > reward_1_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward > reward_2_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward > reward_3_;
  ::google::protobuf::RepeatedField< float > base_factor_;
  ::google::protobuf::RepeatedField< float > expand_factor_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::CountryTaskBaseItem > base_reward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tech_coefficient_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static CountryTaskItem* default_instance_;
};
// -------------------------------------------------------------------

class CountryTask : public ::google::protobuf::Message {
 public:
  CountryTask();
  virtual ~CountryTask();

  CountryTask(const CountryTask& from);

  inline CountryTask& operator=(const CountryTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryTask& default_instance();

  void Swap(CountryTask* other);

  // implements Message ----------------------------------------------

  CountryTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryTask& from);
  void MergeFrom(const CountryTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RewardConfig.CountryTaskItem country_task = 1;
  inline bool has_country_task() const;
  inline void clear_country_task();
  static const int kCountryTaskFieldNumber = 1;
  inline const ::RewardConfig::CountryTaskItem& country_task() const;
  inline ::RewardConfig::CountryTaskItem* mutable_country_task();
  inline ::RewardConfig::CountryTaskItem* release_country_task();
  inline void set_allocated_country_task(::RewardConfig::CountryTaskItem* country_task);

  // @@protoc_insertion_point(class_scope:RewardConfig.CountryTask)
 private:
  inline void set_has_country_task();
  inline void clear_has_country_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::CountryTaskItem* country_task_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static CountryTask* default_instance_;
};
// -------------------------------------------------------------------

class FirstRechargeReward : public ::google::protobuf::Message {
 public:
  FirstRechargeReward();
  virtual ~FirstRechargeReward();

  FirstRechargeReward(const FirstRechargeReward& from);

  inline FirstRechargeReward& operator=(const FirstRechargeReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstRechargeReward& default_instance();

  void Swap(FirstRechargeReward* other);

  // implements Message ----------------------------------------------

  FirstRechargeReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FirstRechargeReward& from);
  void MergeFrom(const FirstRechargeReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RewardConfig.Reward reward = 1;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::RewardConfig::Reward& reward(int index) const;
  inline ::RewardConfig::Reward* mutable_reward(int index);
  inline ::RewardConfig::Reward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:RewardConfig.FirstRechargeReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward > reward_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static FirstRechargeReward* default_instance_;
};
// -------------------------------------------------------------------

class FirstRecharge : public ::google::protobuf::Message {
 public:
  FirstRecharge();
  virtual ~FirstRecharge();

  FirstRecharge(const FirstRecharge& from);

  inline FirstRecharge& operator=(const FirstRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstRecharge& default_instance();

  void Swap(FirstRecharge* other);

  // implements Message ----------------------------------------------

  FirstRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FirstRecharge& from);
  void MergeFrom(const FirstRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RewardConfig.FirstRechargeReward first_recharge = 1;
  inline bool has_first_recharge() const;
  inline void clear_first_recharge();
  static const int kFirstRechargeFieldNumber = 1;
  inline const ::RewardConfig::FirstRechargeReward& first_recharge() const;
  inline ::RewardConfig::FirstRechargeReward* mutable_first_recharge();
  inline ::RewardConfig::FirstRechargeReward* release_first_recharge();
  inline void set_allocated_first_recharge(::RewardConfig::FirstRechargeReward* first_recharge);

  // @@protoc_insertion_point(class_scope:RewardConfig.FirstRecharge)
 private:
  inline void set_has_first_recharge();
  inline void clear_has_first_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::FirstRechargeReward* first_recharge_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static FirstRecharge* default_instance_;
};
// -------------------------------------------------------------------

class IntegralReward : public ::google::protobuf::Message {
 public:
  IntegralReward();
  virtual ~IntegralReward();

  IntegralReward(const IntegralReward& from);

  inline IntegralReward& operator=(const IntegralReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegralReward& default_instance();

  void Swap(IntegralReward* other);

  // implements Message ----------------------------------------------

  IntegralReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntegralReward& from);
  void MergeFrom(const IntegralReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CommonGiftConfig.BaseReward base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::CommonGiftConfig::BaseReward& base() const;
  inline ::CommonGiftConfig::BaseReward* mutable_base();
  inline ::CommonGiftConfig::BaseReward* release_base();
  inline void set_allocated_base(::CommonGiftConfig::BaseReward* base);

  // required uint32 prob = 2;
  inline bool has_prob() const;
  inline void clear_prob();
  static const int kProbFieldNumber = 2;
  inline ::google::protobuf::uint32 prob() const;
  inline void set_prob(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RewardConfig.IntegralReward)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_prob();
  inline void clear_has_prob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::CommonGiftConfig::BaseReward* base_;
  ::google::protobuf::uint32 prob_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static IntegralReward* default_instance_;
};
// -------------------------------------------------------------------

class IntegralTime : public ::google::protobuf::Message {
 public:
  IntegralTime();
  virtual ~IntegralTime();

  IntegralTime(const IntegralTime& from);

  inline IntegralTime& operator=(const IntegralTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegralTime& default_instance();

  void Swap(IntegralTime* other);

  // implements Message ----------------------------------------------

  IntegralTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntegralTime& from);
  void MergeFrom(const IntegralTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RewardConfig.IntegralReward integral_time = 1;
  inline int integral_time_size() const;
  inline void clear_integral_time();
  static const int kIntegralTimeFieldNumber = 1;
  inline const ::RewardConfig::IntegralReward& integral_time(int index) const;
  inline ::RewardConfig::IntegralReward* mutable_integral_time(int index);
  inline ::RewardConfig::IntegralReward* add_integral_time();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::IntegralReward >&
      integral_time() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::IntegralReward >*
      mutable_integral_time();

  // @@protoc_insertion_point(class_scope:RewardConfig.IntegralTime)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::IntegralReward > integral_time_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static IntegralTime* default_instance_;
};
// -------------------------------------------------------------------

class PkFieldReward : public ::google::protobuf::Message {
 public:
  PkFieldReward();
  virtual ~PkFieldReward();

  PkFieldReward(const PkFieldReward& from);

  inline PkFieldReward& operator=(const PkFieldReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkFieldReward& default_instance();

  void Swap(PkFieldReward* other);

  // implements Message ----------------------------------------------

  PkFieldReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkFieldReward& from);
  void MergeFrom(const PkFieldReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rank_start = 1;
  inline bool has_rank_start() const;
  inline void clear_rank_start();
  static const int kRankStartFieldNumber = 1;
  inline ::google::protobuf::uint32 rank_start() const;
  inline void set_rank_start(::google::protobuf::uint32 value);

  // optional uint32 rank_end = 2;
  inline bool has_rank_end() const;
  inline void clear_rank_end();
  static const int kRankEndFieldNumber = 2;
  inline ::google::protobuf::uint32 rank_end() const;
  inline void set_rank_end(::google::protobuf::uint32 value);

  // required .CommonGiftConfig.BaseReward base = 3;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 3;
  inline const ::CommonGiftConfig::BaseReward& base() const;
  inline ::CommonGiftConfig::BaseReward* mutable_base();
  inline ::CommonGiftConfig::BaseReward* release_base();
  inline void set_allocated_base(::CommonGiftConfig::BaseReward* base);

  // @@protoc_insertion_point(class_scope:RewardConfig.PkFieldReward)
 private:
  inline void set_has_rank_start();
  inline void clear_has_rank_start();
  inline void set_has_rank_end();
  inline void clear_has_rank_end();
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rank_start_;
  ::google::protobuf::uint32 rank_end_;
  ::CommonGiftConfig::BaseReward* base_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static PkFieldReward* default_instance_;
};
// -------------------------------------------------------------------

class PkField : public ::google::protobuf::Message {
 public:
  PkField();
  virtual ~PkField();

  PkField(const PkField& from);

  inline PkField& operator=(const PkField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PkField& default_instance();

  void Swap(PkField* other);

  // implements Message ----------------------------------------------

  PkField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PkField& from);
  void MergeFrom(const PkField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RewardConfig.PkFieldReward pk_field = 1;
  inline int pk_field_size() const;
  inline void clear_pk_field();
  static const int kPkFieldFieldNumber = 1;
  inline const ::RewardConfig::PkFieldReward& pk_field(int index) const;
  inline ::RewardConfig::PkFieldReward* mutable_pk_field(int index);
  inline ::RewardConfig::PkFieldReward* add_pk_field();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::PkFieldReward >&
      pk_field() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::PkFieldReward >*
      mutable_pk_field();

  // @@protoc_insertion_point(class_scope:RewardConfig.PkField)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::PkFieldReward > pk_field_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static PkField* default_instance_;
};
// -------------------------------------------------------------------

class DayReward : public ::google::protobuf::Message {
 public:
  DayReward();
  virtual ~DayReward();

  DayReward(const DayReward& from);

  inline DayReward& operator=(const DayReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DayReward& default_instance();

  void Swap(DayReward* other);

  // implements Message ----------------------------------------------

  DayReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DayReward& from);
  void MergeFrom(const DayReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // repeated .RewardConfig.Reward reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::RewardConfig::Reward& reward(int index) const;
  inline ::RewardConfig::Reward* mutable_reward(int index);
  inline ::RewardConfig::Reward* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:RewardConfig.DayReward)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward > reward_;
  ::google::protobuf::uint32 day_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static DayReward* default_instance_;
};
// -------------------------------------------------------------------

class CumulationLogin : public ::google::protobuf::Message {
 public:
  CumulationLogin();
  virtual ~CumulationLogin();

  CumulationLogin(const CumulationLogin& from);

  inline CumulationLogin& operator=(const CumulationLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CumulationLogin& default_instance();

  void Swap(CumulationLogin* other);

  // implements Message ----------------------------------------------

  CumulationLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CumulationLogin& from);
  void MergeFrom(const CumulationLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RewardConfig.DayReward dayrewards = 1;
  inline int dayrewards_size() const;
  inline void clear_dayrewards();
  static const int kDayrewardsFieldNumber = 1;
  inline const ::RewardConfig::DayReward& dayrewards(int index) const;
  inline ::RewardConfig::DayReward* mutable_dayrewards(int index);
  inline ::RewardConfig::DayReward* add_dayrewards();
  inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::DayReward >&
      dayrewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::DayReward >*
      mutable_dayrewards();

  // @@protoc_insertion_point(class_scope:RewardConfig.CumulationLogin)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RewardConfig::DayReward > dayrewards_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static CumulationLogin* default_instance_;
};
// -------------------------------------------------------------------

class CumulationLoginReward : public ::google::protobuf::Message {
 public:
  CumulationLoginReward();
  virtual ~CumulationLoginReward();

  CumulationLoginReward(const CumulationLoginReward& from);

  inline CumulationLoginReward& operator=(const CumulationLoginReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CumulationLoginReward& default_instance();

  void Swap(CumulationLoginReward* other);

  // implements Message ----------------------------------------------

  CumulationLoginReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CumulationLoginReward& from);
  void MergeFrom(const CumulationLoginReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RewardConfig.CumulationLogin cumulation_login = 1;
  inline bool has_cumulation_login() const;
  inline void clear_cumulation_login();
  static const int kCumulationLoginFieldNumber = 1;
  inline const ::RewardConfig::CumulationLogin& cumulation_login() const;
  inline ::RewardConfig::CumulationLogin* mutable_cumulation_login();
  inline ::RewardConfig::CumulationLogin* release_cumulation_login();
  inline void set_allocated_cumulation_login(::RewardConfig::CumulationLogin* cumulation_login);

  // @@protoc_insertion_point(class_scope:RewardConfig.CumulationLoginReward)
 private:
  inline void set_has_cumulation_login();
  inline void clear_has_cumulation_login();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RewardConfig::CumulationLogin* cumulation_login_;
  friend void  protobuf_AddDesc_RewardConfig_2eproto();
  friend void protobuf_AssignDesc_RewardConfig_2eproto();
  friend void protobuf_ShutdownFile_RewardConfig_2eproto();

  void InitAsDefaultInstance();
  static CumulationLoginReward* default_instance_;
};
// ===================================================================


// ===================================================================

// Component

// required uint32 id = 1;
inline bool Component::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Component::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Component::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Component::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Component::id() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Component.id)
  return id_;
}
inline void Component::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.Component.id)
}

// required uint32 level = 2;
inline bool Component::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Component::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Component::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Component::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Component::level() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Component.level)
  return level_;
}
inline void Component::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.Component.level)
}

// required uint32 exp = 3;
inline bool Component::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Component::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Component::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Component::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 Component::exp() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Component.exp)
  return exp_;
}
inline void Component::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.Component.exp)
}

// optional uint32 slave1 = 4;
inline bool Component::has_slave1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Component::set_has_slave1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Component::clear_has_slave1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Component::clear_slave1() {
  slave1_ = 0u;
  clear_has_slave1();
}
inline ::google::protobuf::uint32 Component::slave1() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Component.slave1)
  return slave1_;
}
inline void Component::set_slave1(::google::protobuf::uint32 value) {
  set_has_slave1();
  slave1_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.Component.slave1)
}

// optional uint32 slave2 = 5;
inline bool Component::has_slave2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Component::set_has_slave2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Component::clear_has_slave2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Component::clear_slave2() {
  slave2_ = 0u;
  clear_has_slave2();
}
inline ::google::protobuf::uint32 Component::slave2() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Component.slave2)
  return slave2_;
}
inline void Component::set_slave2(::google::protobuf::uint32 value) {
  set_has_slave2();
  slave2_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.Component.slave2)
}

// optional uint32 slave3 = 6;
inline bool Component::has_slave3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Component::set_has_slave3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Component::clear_has_slave3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Component::clear_slave3() {
  slave3_ = 0u;
  clear_has_slave3();
}
inline ::google::protobuf::uint32 Component::slave3() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Component.slave3)
  return slave3_;
}
inline void Component::set_slave3(::google::protobuf::uint32 value) {
  set_has_slave3();
  slave3_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.Component.slave3)
}

// -------------------------------------------------------------------

// Reward

// optional .VipGiftConfig.EquipReward equips = 1;
inline bool Reward::has_equips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reward::set_has_equips() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reward::clear_has_equips() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reward::clear_equips() {
  if (equips_ != NULL) equips_->::VipGiftConfig::EquipReward::Clear();
  clear_has_equips();
}
inline const ::VipGiftConfig::EquipReward& Reward::equips() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Reward.equips)
  return equips_ != NULL ? *equips_ : *default_instance_->equips_;
}
inline ::VipGiftConfig::EquipReward* Reward::mutable_equips() {
  set_has_equips();
  if (equips_ == NULL) equips_ = new ::VipGiftConfig::EquipReward;
  // @@protoc_insertion_point(field_mutable:RewardConfig.Reward.equips)
  return equips_;
}
inline ::VipGiftConfig::EquipReward* Reward::release_equips() {
  clear_has_equips();
  ::VipGiftConfig::EquipReward* temp = equips_;
  equips_ = NULL;
  return temp;
}
inline void Reward::set_allocated_equips(::VipGiftConfig::EquipReward* equips) {
  delete equips_;
  equips_ = equips;
  if (equips) {
    set_has_equips();
  } else {
    clear_has_equips();
  }
  // @@protoc_insertion_point(field_set_allocated:RewardConfig.Reward.equips)
}

// optional .CommonGiftConfig.BaseReward base = 2;
inline bool Reward::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reward::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reward::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reward::clear_base() {
  if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
  clear_has_base();
}
inline const ::CommonGiftConfig::BaseReward& Reward::base() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Reward.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CommonGiftConfig::BaseReward* Reward::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::CommonGiftConfig::BaseReward;
  // @@protoc_insertion_point(field_mutable:RewardConfig.Reward.base)
  return base_;
}
inline ::CommonGiftConfig::BaseReward* Reward::release_base() {
  clear_has_base();
  ::CommonGiftConfig::BaseReward* temp = base_;
  base_ = NULL;
  return temp;
}
inline void Reward::set_allocated_base(::CommonGiftConfig::BaseReward* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:RewardConfig.Reward.base)
}

// optional uint32 hero = 3;
inline bool Reward::has_hero() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Reward::set_has_hero() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Reward::clear_has_hero() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Reward::clear_hero() {
  hero_ = 0u;
  clear_has_hero();
}
inline ::google::protobuf::uint32 Reward::hero() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Reward.hero)
  return hero_;
}
inline void Reward::set_hero(::google::protobuf::uint32 value) {
  set_has_hero();
  hero_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.Reward.hero)
}

// optional .RewardConfig.Component component = 4;
inline bool Reward::has_component() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Reward::set_has_component() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Reward::clear_has_component() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Reward::clear_component() {
  if (component_ != NULL) component_->::RewardConfig::Component::Clear();
  clear_has_component();
}
inline const ::RewardConfig::Component& Reward::component() const {
  // @@protoc_insertion_point(field_get:RewardConfig.Reward.component)
  return component_ != NULL ? *component_ : *default_instance_->component_;
}
inline ::RewardConfig::Component* Reward::mutable_component() {
  set_has_component();
  if (component_ == NULL) component_ = new ::RewardConfig::Component;
  // @@protoc_insertion_point(field_mutable:RewardConfig.Reward.component)
  return component_;
}
inline ::RewardConfig::Component* Reward::release_component() {
  clear_has_component();
  ::RewardConfig::Component* temp = component_;
  component_ = NULL;
  return temp;
}
inline void Reward::set_allocated_component(::RewardConfig::Component* component) {
  delete component_;
  component_ = component;
  if (component) {
    set_has_component();
  } else {
    clear_has_component();
  }
  // @@protoc_insertion_point(field_set_allocated:RewardConfig.Reward.component)
}

// -------------------------------------------------------------------

// CountryTaskBaseItem

// required uint32 day = 1;
inline bool CountryTaskBaseItem::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryTaskBaseItem::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryTaskBaseItem::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryTaskBaseItem::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 CountryTaskBaseItem::day() const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskBaseItem.day)
  return day_;
}
inline void CountryTaskBaseItem::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.CountryTaskBaseItem.day)
}

// required .CommonGiftConfig.BaseReward base = 2;
inline bool CountryTaskBaseItem::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryTaskBaseItem::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryTaskBaseItem::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryTaskBaseItem::clear_base() {
  if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
  clear_has_base();
}
inline const ::CommonGiftConfig::BaseReward& CountryTaskBaseItem::base() const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskBaseItem.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CommonGiftConfig::BaseReward* CountryTaskBaseItem::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::CommonGiftConfig::BaseReward;
  // @@protoc_insertion_point(field_mutable:RewardConfig.CountryTaskBaseItem.base)
  return base_;
}
inline ::CommonGiftConfig::BaseReward* CountryTaskBaseItem::release_base() {
  clear_has_base();
  ::CommonGiftConfig::BaseReward* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CountryTaskBaseItem::set_allocated_base(::CommonGiftConfig::BaseReward* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:RewardConfig.CountryTaskBaseItem.base)
}

// repeated uint32 kills = 3;
inline int CountryTaskBaseItem::kills_size() const {
  return kills_.size();
}
inline void CountryTaskBaseItem::clear_kills() {
  kills_.Clear();
}
inline ::google::protobuf::uint32 CountryTaskBaseItem::kills(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskBaseItem.kills)
  return kills_.Get(index);
}
inline void CountryTaskBaseItem::set_kills(int index, ::google::protobuf::uint32 value) {
  kills_.Set(index, value);
  // @@protoc_insertion_point(field_set:RewardConfig.CountryTaskBaseItem.kills)
}
inline void CountryTaskBaseItem::add_kills(::google::protobuf::uint32 value) {
  kills_.Add(value);
  // @@protoc_insertion_point(field_add:RewardConfig.CountryTaskBaseItem.kills)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CountryTaskBaseItem::kills() const {
  // @@protoc_insertion_point(field_list:RewardConfig.CountryTaskBaseItem.kills)
  return kills_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CountryTaskBaseItem::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.CountryTaskBaseItem.kills)
  return &kills_;
}

// -------------------------------------------------------------------

// CountryTaskItem

// repeated .RewardConfig.Reward reward_1 = 1;
inline int CountryTaskItem::reward_1_size() const {
  return reward_1_.size();
}
inline void CountryTaskItem::clear_reward_1() {
  reward_1_.Clear();
}
inline const ::RewardConfig::Reward& CountryTaskItem::reward_1(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskItem.reward_1)
  return reward_1_.Get(index);
}
inline ::RewardConfig::Reward* CountryTaskItem::mutable_reward_1(int index) {
  // @@protoc_insertion_point(field_mutable:RewardConfig.CountryTaskItem.reward_1)
  return reward_1_.Mutable(index);
}
inline ::RewardConfig::Reward* CountryTaskItem::add_reward_1() {
  // @@protoc_insertion_point(field_add:RewardConfig.CountryTaskItem.reward_1)
  return reward_1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
CountryTaskItem::reward_1() const {
  // @@protoc_insertion_point(field_list:RewardConfig.CountryTaskItem.reward_1)
  return reward_1_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
CountryTaskItem::mutable_reward_1() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.CountryTaskItem.reward_1)
  return &reward_1_;
}

// repeated .RewardConfig.Reward reward_2 = 2;
inline int CountryTaskItem::reward_2_size() const {
  return reward_2_.size();
}
inline void CountryTaskItem::clear_reward_2() {
  reward_2_.Clear();
}
inline const ::RewardConfig::Reward& CountryTaskItem::reward_2(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskItem.reward_2)
  return reward_2_.Get(index);
}
inline ::RewardConfig::Reward* CountryTaskItem::mutable_reward_2(int index) {
  // @@protoc_insertion_point(field_mutable:RewardConfig.CountryTaskItem.reward_2)
  return reward_2_.Mutable(index);
}
inline ::RewardConfig::Reward* CountryTaskItem::add_reward_2() {
  // @@protoc_insertion_point(field_add:RewardConfig.CountryTaskItem.reward_2)
  return reward_2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
CountryTaskItem::reward_2() const {
  // @@protoc_insertion_point(field_list:RewardConfig.CountryTaskItem.reward_2)
  return reward_2_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
CountryTaskItem::mutable_reward_2() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.CountryTaskItem.reward_2)
  return &reward_2_;
}

// repeated .RewardConfig.Reward reward_3 = 3;
inline int CountryTaskItem::reward_3_size() const {
  return reward_3_.size();
}
inline void CountryTaskItem::clear_reward_3() {
  reward_3_.Clear();
}
inline const ::RewardConfig::Reward& CountryTaskItem::reward_3(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskItem.reward_3)
  return reward_3_.Get(index);
}
inline ::RewardConfig::Reward* CountryTaskItem::mutable_reward_3(int index) {
  // @@protoc_insertion_point(field_mutable:RewardConfig.CountryTaskItem.reward_3)
  return reward_3_.Mutable(index);
}
inline ::RewardConfig::Reward* CountryTaskItem::add_reward_3() {
  // @@protoc_insertion_point(field_add:RewardConfig.CountryTaskItem.reward_3)
  return reward_3_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
CountryTaskItem::reward_3() const {
  // @@protoc_insertion_point(field_list:RewardConfig.CountryTaskItem.reward_3)
  return reward_3_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
CountryTaskItem::mutable_reward_3() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.CountryTaskItem.reward_3)
  return &reward_3_;
}

// repeated float base_factor = 4;
inline int CountryTaskItem::base_factor_size() const {
  return base_factor_.size();
}
inline void CountryTaskItem::clear_base_factor() {
  base_factor_.Clear();
}
inline float CountryTaskItem::base_factor(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskItem.base_factor)
  return base_factor_.Get(index);
}
inline void CountryTaskItem::set_base_factor(int index, float value) {
  base_factor_.Set(index, value);
  // @@protoc_insertion_point(field_set:RewardConfig.CountryTaskItem.base_factor)
}
inline void CountryTaskItem::add_base_factor(float value) {
  base_factor_.Add(value);
  // @@protoc_insertion_point(field_add:RewardConfig.CountryTaskItem.base_factor)
}
inline const ::google::protobuf::RepeatedField< float >&
CountryTaskItem::base_factor() const {
  // @@protoc_insertion_point(field_list:RewardConfig.CountryTaskItem.base_factor)
  return base_factor_;
}
inline ::google::protobuf::RepeatedField< float >*
CountryTaskItem::mutable_base_factor() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.CountryTaskItem.base_factor)
  return &base_factor_;
}

// repeated float expand_factor = 5;
inline int CountryTaskItem::expand_factor_size() const {
  return expand_factor_.size();
}
inline void CountryTaskItem::clear_expand_factor() {
  expand_factor_.Clear();
}
inline float CountryTaskItem::expand_factor(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskItem.expand_factor)
  return expand_factor_.Get(index);
}
inline void CountryTaskItem::set_expand_factor(int index, float value) {
  expand_factor_.Set(index, value);
  // @@protoc_insertion_point(field_set:RewardConfig.CountryTaskItem.expand_factor)
}
inline void CountryTaskItem::add_expand_factor(float value) {
  expand_factor_.Add(value);
  // @@protoc_insertion_point(field_add:RewardConfig.CountryTaskItem.expand_factor)
}
inline const ::google::protobuf::RepeatedField< float >&
CountryTaskItem::expand_factor() const {
  // @@protoc_insertion_point(field_list:RewardConfig.CountryTaskItem.expand_factor)
  return expand_factor_;
}
inline ::google::protobuf::RepeatedField< float >*
CountryTaskItem::mutable_expand_factor() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.CountryTaskItem.expand_factor)
  return &expand_factor_;
}

// repeated .RewardConfig.CountryTaskBaseItem base_reward = 6;
inline int CountryTaskItem::base_reward_size() const {
  return base_reward_.size();
}
inline void CountryTaskItem::clear_base_reward() {
  base_reward_.Clear();
}
inline const ::RewardConfig::CountryTaskBaseItem& CountryTaskItem::base_reward(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskItem.base_reward)
  return base_reward_.Get(index);
}
inline ::RewardConfig::CountryTaskBaseItem* CountryTaskItem::mutable_base_reward(int index) {
  // @@protoc_insertion_point(field_mutable:RewardConfig.CountryTaskItem.base_reward)
  return base_reward_.Mutable(index);
}
inline ::RewardConfig::CountryTaskBaseItem* CountryTaskItem::add_base_reward() {
  // @@protoc_insertion_point(field_add:RewardConfig.CountryTaskItem.base_reward)
  return base_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::CountryTaskBaseItem >&
CountryTaskItem::base_reward() const {
  // @@protoc_insertion_point(field_list:RewardConfig.CountryTaskItem.base_reward)
  return base_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::CountryTaskBaseItem >*
CountryTaskItem::mutable_base_reward() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.CountryTaskItem.base_reward)
  return &base_reward_;
}

// repeated uint32 tech_coefficient = 7;
inline int CountryTaskItem::tech_coefficient_size() const {
  return tech_coefficient_.size();
}
inline void CountryTaskItem::clear_tech_coefficient() {
  tech_coefficient_.Clear();
}
inline ::google::protobuf::uint32 CountryTaskItem::tech_coefficient(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTaskItem.tech_coefficient)
  return tech_coefficient_.Get(index);
}
inline void CountryTaskItem::set_tech_coefficient(int index, ::google::protobuf::uint32 value) {
  tech_coefficient_.Set(index, value);
  // @@protoc_insertion_point(field_set:RewardConfig.CountryTaskItem.tech_coefficient)
}
inline void CountryTaskItem::add_tech_coefficient(::google::protobuf::uint32 value) {
  tech_coefficient_.Add(value);
  // @@protoc_insertion_point(field_add:RewardConfig.CountryTaskItem.tech_coefficient)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CountryTaskItem::tech_coefficient() const {
  // @@protoc_insertion_point(field_list:RewardConfig.CountryTaskItem.tech_coefficient)
  return tech_coefficient_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CountryTaskItem::mutable_tech_coefficient() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.CountryTaskItem.tech_coefficient)
  return &tech_coefficient_;
}

// -------------------------------------------------------------------

// CountryTask

// required .RewardConfig.CountryTaskItem country_task = 1;
inline bool CountryTask::has_country_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryTask::set_has_country_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryTask::clear_has_country_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryTask::clear_country_task() {
  if (country_task_ != NULL) country_task_->::RewardConfig::CountryTaskItem::Clear();
  clear_has_country_task();
}
inline const ::RewardConfig::CountryTaskItem& CountryTask::country_task() const {
  // @@protoc_insertion_point(field_get:RewardConfig.CountryTask.country_task)
  return country_task_ != NULL ? *country_task_ : *default_instance_->country_task_;
}
inline ::RewardConfig::CountryTaskItem* CountryTask::mutable_country_task() {
  set_has_country_task();
  if (country_task_ == NULL) country_task_ = new ::RewardConfig::CountryTaskItem;
  // @@protoc_insertion_point(field_mutable:RewardConfig.CountryTask.country_task)
  return country_task_;
}
inline ::RewardConfig::CountryTaskItem* CountryTask::release_country_task() {
  clear_has_country_task();
  ::RewardConfig::CountryTaskItem* temp = country_task_;
  country_task_ = NULL;
  return temp;
}
inline void CountryTask::set_allocated_country_task(::RewardConfig::CountryTaskItem* country_task) {
  delete country_task_;
  country_task_ = country_task;
  if (country_task) {
    set_has_country_task();
  } else {
    clear_has_country_task();
  }
  // @@protoc_insertion_point(field_set_allocated:RewardConfig.CountryTask.country_task)
}

// -------------------------------------------------------------------

// FirstRechargeReward

// repeated .RewardConfig.Reward reward = 1;
inline int FirstRechargeReward::reward_size() const {
  return reward_.size();
}
inline void FirstRechargeReward::clear_reward() {
  reward_.Clear();
}
inline const ::RewardConfig::Reward& FirstRechargeReward::reward(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.FirstRechargeReward.reward)
  return reward_.Get(index);
}
inline ::RewardConfig::Reward* FirstRechargeReward::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:RewardConfig.FirstRechargeReward.reward)
  return reward_.Mutable(index);
}
inline ::RewardConfig::Reward* FirstRechargeReward::add_reward() {
  // @@protoc_insertion_point(field_add:RewardConfig.FirstRechargeReward.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
FirstRechargeReward::reward() const {
  // @@protoc_insertion_point(field_list:RewardConfig.FirstRechargeReward.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
FirstRechargeReward::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.FirstRechargeReward.reward)
  return &reward_;
}

// -------------------------------------------------------------------

// FirstRecharge

// required .RewardConfig.FirstRechargeReward first_recharge = 1;
inline bool FirstRecharge::has_first_recharge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FirstRecharge::set_has_first_recharge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FirstRecharge::clear_has_first_recharge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FirstRecharge::clear_first_recharge() {
  if (first_recharge_ != NULL) first_recharge_->::RewardConfig::FirstRechargeReward::Clear();
  clear_has_first_recharge();
}
inline const ::RewardConfig::FirstRechargeReward& FirstRecharge::first_recharge() const {
  // @@protoc_insertion_point(field_get:RewardConfig.FirstRecharge.first_recharge)
  return first_recharge_ != NULL ? *first_recharge_ : *default_instance_->first_recharge_;
}
inline ::RewardConfig::FirstRechargeReward* FirstRecharge::mutable_first_recharge() {
  set_has_first_recharge();
  if (first_recharge_ == NULL) first_recharge_ = new ::RewardConfig::FirstRechargeReward;
  // @@protoc_insertion_point(field_mutable:RewardConfig.FirstRecharge.first_recharge)
  return first_recharge_;
}
inline ::RewardConfig::FirstRechargeReward* FirstRecharge::release_first_recharge() {
  clear_has_first_recharge();
  ::RewardConfig::FirstRechargeReward* temp = first_recharge_;
  first_recharge_ = NULL;
  return temp;
}
inline void FirstRecharge::set_allocated_first_recharge(::RewardConfig::FirstRechargeReward* first_recharge) {
  delete first_recharge_;
  first_recharge_ = first_recharge;
  if (first_recharge) {
    set_has_first_recharge();
  } else {
    clear_has_first_recharge();
  }
  // @@protoc_insertion_point(field_set_allocated:RewardConfig.FirstRecharge.first_recharge)
}

// -------------------------------------------------------------------

// IntegralReward

// required .CommonGiftConfig.BaseReward base = 1;
inline bool IntegralReward::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IntegralReward::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IntegralReward::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IntegralReward::clear_base() {
  if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
  clear_has_base();
}
inline const ::CommonGiftConfig::BaseReward& IntegralReward::base() const {
  // @@protoc_insertion_point(field_get:RewardConfig.IntegralReward.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CommonGiftConfig::BaseReward* IntegralReward::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::CommonGiftConfig::BaseReward;
  // @@protoc_insertion_point(field_mutable:RewardConfig.IntegralReward.base)
  return base_;
}
inline ::CommonGiftConfig::BaseReward* IntegralReward::release_base() {
  clear_has_base();
  ::CommonGiftConfig::BaseReward* temp = base_;
  base_ = NULL;
  return temp;
}
inline void IntegralReward::set_allocated_base(::CommonGiftConfig::BaseReward* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:RewardConfig.IntegralReward.base)
}

// required uint32 prob = 2;
inline bool IntegralReward::has_prob() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntegralReward::set_has_prob() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntegralReward::clear_has_prob() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntegralReward::clear_prob() {
  prob_ = 0u;
  clear_has_prob();
}
inline ::google::protobuf::uint32 IntegralReward::prob() const {
  // @@protoc_insertion_point(field_get:RewardConfig.IntegralReward.prob)
  return prob_;
}
inline void IntegralReward::set_prob(::google::protobuf::uint32 value) {
  set_has_prob();
  prob_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.IntegralReward.prob)
}

// -------------------------------------------------------------------

// IntegralTime

// repeated .RewardConfig.IntegralReward integral_time = 1;
inline int IntegralTime::integral_time_size() const {
  return integral_time_.size();
}
inline void IntegralTime::clear_integral_time() {
  integral_time_.Clear();
}
inline const ::RewardConfig::IntegralReward& IntegralTime::integral_time(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.IntegralTime.integral_time)
  return integral_time_.Get(index);
}
inline ::RewardConfig::IntegralReward* IntegralTime::mutable_integral_time(int index) {
  // @@protoc_insertion_point(field_mutable:RewardConfig.IntegralTime.integral_time)
  return integral_time_.Mutable(index);
}
inline ::RewardConfig::IntegralReward* IntegralTime::add_integral_time() {
  // @@protoc_insertion_point(field_add:RewardConfig.IntegralTime.integral_time)
  return integral_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::IntegralReward >&
IntegralTime::integral_time() const {
  // @@protoc_insertion_point(field_list:RewardConfig.IntegralTime.integral_time)
  return integral_time_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::IntegralReward >*
IntegralTime::mutable_integral_time() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.IntegralTime.integral_time)
  return &integral_time_;
}

// -------------------------------------------------------------------

// PkFieldReward

// required uint32 rank_start = 1;
inline bool PkFieldReward::has_rank_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PkFieldReward::set_has_rank_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PkFieldReward::clear_has_rank_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PkFieldReward::clear_rank_start() {
  rank_start_ = 0u;
  clear_has_rank_start();
}
inline ::google::protobuf::uint32 PkFieldReward::rank_start() const {
  // @@protoc_insertion_point(field_get:RewardConfig.PkFieldReward.rank_start)
  return rank_start_;
}
inline void PkFieldReward::set_rank_start(::google::protobuf::uint32 value) {
  set_has_rank_start();
  rank_start_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.PkFieldReward.rank_start)
}

// optional uint32 rank_end = 2;
inline bool PkFieldReward::has_rank_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PkFieldReward::set_has_rank_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PkFieldReward::clear_has_rank_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PkFieldReward::clear_rank_end() {
  rank_end_ = 0u;
  clear_has_rank_end();
}
inline ::google::protobuf::uint32 PkFieldReward::rank_end() const {
  // @@protoc_insertion_point(field_get:RewardConfig.PkFieldReward.rank_end)
  return rank_end_;
}
inline void PkFieldReward::set_rank_end(::google::protobuf::uint32 value) {
  set_has_rank_end();
  rank_end_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.PkFieldReward.rank_end)
}

// required .CommonGiftConfig.BaseReward base = 3;
inline bool PkFieldReward::has_base() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PkFieldReward::set_has_base() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PkFieldReward::clear_has_base() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PkFieldReward::clear_base() {
  if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
  clear_has_base();
}
inline const ::CommonGiftConfig::BaseReward& PkFieldReward::base() const {
  // @@protoc_insertion_point(field_get:RewardConfig.PkFieldReward.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CommonGiftConfig::BaseReward* PkFieldReward::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::CommonGiftConfig::BaseReward;
  // @@protoc_insertion_point(field_mutable:RewardConfig.PkFieldReward.base)
  return base_;
}
inline ::CommonGiftConfig::BaseReward* PkFieldReward::release_base() {
  clear_has_base();
  ::CommonGiftConfig::BaseReward* temp = base_;
  base_ = NULL;
  return temp;
}
inline void PkFieldReward::set_allocated_base(::CommonGiftConfig::BaseReward* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:RewardConfig.PkFieldReward.base)
}

// -------------------------------------------------------------------

// PkField

// repeated .RewardConfig.PkFieldReward pk_field = 1;
inline int PkField::pk_field_size() const {
  return pk_field_.size();
}
inline void PkField::clear_pk_field() {
  pk_field_.Clear();
}
inline const ::RewardConfig::PkFieldReward& PkField::pk_field(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.PkField.pk_field)
  return pk_field_.Get(index);
}
inline ::RewardConfig::PkFieldReward* PkField::mutable_pk_field(int index) {
  // @@protoc_insertion_point(field_mutable:RewardConfig.PkField.pk_field)
  return pk_field_.Mutable(index);
}
inline ::RewardConfig::PkFieldReward* PkField::add_pk_field() {
  // @@protoc_insertion_point(field_add:RewardConfig.PkField.pk_field)
  return pk_field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::PkFieldReward >&
PkField::pk_field() const {
  // @@protoc_insertion_point(field_list:RewardConfig.PkField.pk_field)
  return pk_field_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::PkFieldReward >*
PkField::mutable_pk_field() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.PkField.pk_field)
  return &pk_field_;
}

// -------------------------------------------------------------------

// DayReward

// required uint32 day = 1;
inline bool DayReward::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DayReward::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DayReward::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DayReward::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 DayReward::day() const {
  // @@protoc_insertion_point(field_get:RewardConfig.DayReward.day)
  return day_;
}
inline void DayReward::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:RewardConfig.DayReward.day)
}

// repeated .RewardConfig.Reward reward = 2;
inline int DayReward::reward_size() const {
  return reward_.size();
}
inline void DayReward::clear_reward() {
  reward_.Clear();
}
inline const ::RewardConfig::Reward& DayReward::reward(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.DayReward.reward)
  return reward_.Get(index);
}
inline ::RewardConfig::Reward* DayReward::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:RewardConfig.DayReward.reward)
  return reward_.Mutable(index);
}
inline ::RewardConfig::Reward* DayReward::add_reward() {
  // @@protoc_insertion_point(field_add:RewardConfig.DayReward.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >&
DayReward::reward() const {
  // @@protoc_insertion_point(field_list:RewardConfig.DayReward.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::Reward >*
DayReward::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.DayReward.reward)
  return &reward_;
}

// -------------------------------------------------------------------

// CumulationLogin

// repeated .RewardConfig.DayReward dayrewards = 1;
inline int CumulationLogin::dayrewards_size() const {
  return dayrewards_.size();
}
inline void CumulationLogin::clear_dayrewards() {
  dayrewards_.Clear();
}
inline const ::RewardConfig::DayReward& CumulationLogin::dayrewards(int index) const {
  // @@protoc_insertion_point(field_get:RewardConfig.CumulationLogin.dayrewards)
  return dayrewards_.Get(index);
}
inline ::RewardConfig::DayReward* CumulationLogin::mutable_dayrewards(int index) {
  // @@protoc_insertion_point(field_mutable:RewardConfig.CumulationLogin.dayrewards)
  return dayrewards_.Mutable(index);
}
inline ::RewardConfig::DayReward* CumulationLogin::add_dayrewards() {
  // @@protoc_insertion_point(field_add:RewardConfig.CumulationLogin.dayrewards)
  return dayrewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RewardConfig::DayReward >&
CumulationLogin::dayrewards() const {
  // @@protoc_insertion_point(field_list:RewardConfig.CumulationLogin.dayrewards)
  return dayrewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::RewardConfig::DayReward >*
CumulationLogin::mutable_dayrewards() {
  // @@protoc_insertion_point(field_mutable_list:RewardConfig.CumulationLogin.dayrewards)
  return &dayrewards_;
}

// -------------------------------------------------------------------

// CumulationLoginReward

// required .RewardConfig.CumulationLogin cumulation_login = 1;
inline bool CumulationLoginReward::has_cumulation_login() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CumulationLoginReward::set_has_cumulation_login() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CumulationLoginReward::clear_has_cumulation_login() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CumulationLoginReward::clear_cumulation_login() {
  if (cumulation_login_ != NULL) cumulation_login_->::RewardConfig::CumulationLogin::Clear();
  clear_has_cumulation_login();
}
inline const ::RewardConfig::CumulationLogin& CumulationLoginReward::cumulation_login() const {
  // @@protoc_insertion_point(field_get:RewardConfig.CumulationLoginReward.cumulation_login)
  return cumulation_login_ != NULL ? *cumulation_login_ : *default_instance_->cumulation_login_;
}
inline ::RewardConfig::CumulationLogin* CumulationLoginReward::mutable_cumulation_login() {
  set_has_cumulation_login();
  if (cumulation_login_ == NULL) cumulation_login_ = new ::RewardConfig::CumulationLogin;
  // @@protoc_insertion_point(field_mutable:RewardConfig.CumulationLoginReward.cumulation_login)
  return cumulation_login_;
}
inline ::RewardConfig::CumulationLogin* CumulationLoginReward::release_cumulation_login() {
  clear_has_cumulation_login();
  ::RewardConfig::CumulationLogin* temp = cumulation_login_;
  cumulation_login_ = NULL;
  return temp;
}
inline void CumulationLoginReward::set_allocated_cumulation_login(::RewardConfig::CumulationLogin* cumulation_login) {
  delete cumulation_login_;
  cumulation_login_ = cumulation_login;
  if (cumulation_login) {
    set_has_cumulation_login();
  } else {
    clear_has_cumulation_login();
  }
  // @@protoc_insertion_point(field_set_allocated:RewardConfig.CumulationLoginReward.cumulation_login)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RewardConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RewardConfig_2eproto__INCLUDED
