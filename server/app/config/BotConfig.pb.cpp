// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BotConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BotConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BotConfig {

namespace {

const ::google::protobuf::Descriptor* BotEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* BotHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* BotWeapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotWeapon_reflection_ = NULL;
const ::google::protobuf::Descriptor* BotPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BotAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* BotName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotName_reflection_ = NULL;
const ::google::protobuf::Descriptor* BotConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BotConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BotConfig_2eproto() {
  protobuf_AddDesc_BotConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BotConfig.proto");
  GOOGLE_CHECK(file != NULL);
  BotEquipment_descriptor_ = file->message_type(0);
  static const int BotEquipment_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, eqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, born1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, born2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, subt1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, sublv1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, subt2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, sublv2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, subt3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, sublv3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, subt4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, sublv4_),
  };
  BotEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BotEquipment_descriptor_,
      BotEquipment::default_instance_,
      BotEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BotEquipment));
  BotHero_descriptor_ = file->message_type(1);
  static const int BotHero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotHero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotHero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotHero, equip_),
  };
  BotHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BotHero_descriptor_,
      BotHero::default_instance_,
      BotHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BotHero));
  BotWeapon_descriptor_ = file->message_type(2);
  static const int BotWeapon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotWeapon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotWeapon, level_),
  };
  BotWeapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BotWeapon_descriptor_,
      BotWeapon::default_instance_,
      BotWeapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotWeapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotWeapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BotWeapon));
  BotPlayer_descriptor_ = file->message_type(3);
  static const int BotPlayer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotPlayer, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotPlayer, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotPlayer, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotPlayer, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotPlayer, science_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotPlayer, weapon_),
  };
  BotPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BotPlayer_descriptor_,
      BotPlayer::default_instance_,
      BotPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BotPlayer));
  BotAccount_descriptor_ = file->message_type(4);
  static const int BotAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotAccount, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotAccount, player_),
  };
  BotAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BotAccount_descriptor_,
      BotAccount::default_instance_,
      BotAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BotAccount));
  BotName_descriptor_ = file->message_type(5);
  static const int BotName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotName, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotName, kingdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotName, name_),
  };
  BotName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BotName_descriptor_,
      BotName::default_instance_,
      BotName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BotName));
  BotConfig_descriptor_ = file->message_type(6);
  static const int BotConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotConfig, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotConfig, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotConfig, chat_),
  };
  BotConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BotConfig_descriptor_,
      BotConfig::default_instance_,
      BotConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BotConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BotConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BotConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BotEquipment_descriptor_, &BotEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BotHero_descriptor_, &BotHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BotWeapon_descriptor_, &BotWeapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BotPlayer_descriptor_, &BotPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BotAccount_descriptor_, &BotAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BotName_descriptor_, &BotName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BotConfig_descriptor_, &BotConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BotConfig_2eproto() {
  delete BotEquipment::default_instance_;
  delete BotEquipment_reflection_;
  delete BotHero::default_instance_;
  delete BotHero_reflection_;
  delete BotWeapon::default_instance_;
  delete BotWeapon_reflection_;
  delete BotPlayer::default_instance_;
  delete BotPlayer_reflection_;
  delete BotAccount::default_instance_;
  delete BotAccount_reflection_;
  delete BotName::default_instance_;
  delete BotName_reflection_;
  delete BotConfig::default_instance_;
  delete BotConfig_reflection_;
}

void protobuf_AddDesc_BotConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017BotConfig.proto\022\tBotConfig\"\304\001\n\014BotEqui"
    "pment\022\014\n\004eqid\030\001 \002(\r\022\014\n\004star\030\002 \001(\r\022\r\n\005bor"
    "n1\030\003 \001(\r\022\r\n\005born2\030\004 \001(\r\022\r\n\005subt1\030\005 \001(\r\022\016"
    "\n\006sublv1\030\006 \001(\r\022\r\n\005subt2\030\007 \001(\r\022\016\n\006sublv2\030"
    "\010 \001(\r\022\r\n\005subt3\030\t \001(\r\022\016\n\006sublv3\030\n \001(\r\022\r\n\005"
    "subt4\030\013 \001(\r\022\016\n\006sublv4\030\014 \001(\r\"P\n\007BotHero\022\016"
    "\n\006heroid\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022&\n\005equip\030\003"
    " \003(\0132\027.BotConfig.BotEquipment\"&\n\tBotWeap"
    "on\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"\222\001\n\tBotPla"
    "yer\022\013\n\003day\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\020\n\010viple"
    "vel\030\003 \002(\r\022 \n\004hero\030\004 \003(\0132\022.BotConfig.BotH"
    "ero\022\017\n\007science\030\005 \003(\r\022$\n\006weapon\030\006 \003(\0132\024.B"
    "otConfig.BotWeapon\">\n\nBotAccount\022\n\n\002id\030\001"
    " \002(\r\022$\n\006player\030\002 \003(\0132\024.BotConfig.BotPlay"
    "er\"4\n\007BotName\022\n\n\002id\030\001 \002(\r\022\017\n\007kingdom\030\002 \002"
    "(\r\022\014\n\004name\030\003 \003(\014\"p\n\tBotConfig\022\013\n\003fig\030\001 \002"
    "(\t\022 \n\004name\030\002 \003(\0132\022.BotConfig.BotName\022&\n\007"
    "account\030\003 \003(\0132\025.BotConfig.BotAccount\022\014\n\004"
    "chat\030\004 \003(\014", 730);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BotConfig.proto", &protobuf_RegisterTypes);
  BotEquipment::default_instance_ = new BotEquipment();
  BotHero::default_instance_ = new BotHero();
  BotWeapon::default_instance_ = new BotWeapon();
  BotPlayer::default_instance_ = new BotPlayer();
  BotAccount::default_instance_ = new BotAccount();
  BotName::default_instance_ = new BotName();
  BotConfig::default_instance_ = new BotConfig();
  BotEquipment::default_instance_->InitAsDefaultInstance();
  BotHero::default_instance_->InitAsDefaultInstance();
  BotWeapon::default_instance_->InitAsDefaultInstance();
  BotPlayer::default_instance_->InitAsDefaultInstance();
  BotAccount::default_instance_->InitAsDefaultInstance();
  BotName::default_instance_->InitAsDefaultInstance();
  BotConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BotConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BotConfig_2eproto {
  StaticDescriptorInitializer_BotConfig_2eproto() {
    protobuf_AddDesc_BotConfig_2eproto();
  }
} static_descriptor_initializer_BotConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BotEquipment::kEqidFieldNumber;
const int BotEquipment::kStarFieldNumber;
const int BotEquipment::kBorn1FieldNumber;
const int BotEquipment::kBorn2FieldNumber;
const int BotEquipment::kSubt1FieldNumber;
const int BotEquipment::kSublv1FieldNumber;
const int BotEquipment::kSubt2FieldNumber;
const int BotEquipment::kSublv2FieldNumber;
const int BotEquipment::kSubt3FieldNumber;
const int BotEquipment::kSublv3FieldNumber;
const int BotEquipment::kSubt4FieldNumber;
const int BotEquipment::kSublv4FieldNumber;
#endif  // !_MSC_VER

BotEquipment::BotEquipment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotConfig.BotEquipment)
}

void BotEquipment::InitAsDefaultInstance() {
}

BotEquipment::BotEquipment(const BotEquipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotConfig.BotEquipment)
}

void BotEquipment::SharedCtor() {
  _cached_size_ = 0;
  eqid_ = 0u;
  star_ = 0u;
  born1_ = 0u;
  born2_ = 0u;
  subt1_ = 0u;
  sublv1_ = 0u;
  subt2_ = 0u;
  sublv2_ = 0u;
  subt3_ = 0u;
  sublv3_ = 0u;
  subt4_ = 0u;
  sublv4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BotEquipment::~BotEquipment() {
  // @@protoc_insertion_point(destructor:BotConfig.BotEquipment)
  SharedDtor();
}

void BotEquipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BotEquipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotEquipment_descriptor_;
}

const BotEquipment& BotEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotConfig_2eproto();
  return *default_instance_;
}

BotEquipment* BotEquipment::default_instance_ = NULL;

BotEquipment* BotEquipment::New() const {
  return new BotEquipment;
}

void BotEquipment::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BotEquipment*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(eqid_, sublv2_);
  }
  ZR_(subt3_, sublv4_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BotEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotConfig.BotEquipment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 eqid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eqid_)));
          set_has_eqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_born1;
        break;
      }

      // optional uint32 born1 = 3;
      case 3: {
        if (tag == 24) {
         parse_born1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born1_)));
          set_has_born1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_born2;
        break;
      }

      // optional uint32 born2 = 4;
      case 4: {
        if (tag == 32) {
         parse_born2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born2_)));
          set_has_born2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_subt1;
        break;
      }

      // optional uint32 subt1 = 5;
      case 5: {
        if (tag == 40) {
         parse_subt1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subt1_)));
          set_has_subt1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sublv1;
        break;
      }

      // optional uint32 sublv1 = 6;
      case 6: {
        if (tag == 48) {
         parse_sublv1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sublv1_)));
          set_has_sublv1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_subt2;
        break;
      }

      // optional uint32 subt2 = 7;
      case 7: {
        if (tag == 56) {
         parse_subt2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subt2_)));
          set_has_subt2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sublv2;
        break;
      }

      // optional uint32 sublv2 = 8;
      case 8: {
        if (tag == 64) {
         parse_sublv2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sublv2_)));
          set_has_sublv2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_subt3;
        break;
      }

      // optional uint32 subt3 = 9;
      case 9: {
        if (tag == 72) {
         parse_subt3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subt3_)));
          set_has_subt3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sublv3;
        break;
      }

      // optional uint32 sublv3 = 10;
      case 10: {
        if (tag == 80) {
         parse_sublv3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sublv3_)));
          set_has_sublv3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_subt4;
        break;
      }

      // optional uint32 subt4 = 11;
      case 11: {
        if (tag == 88) {
         parse_subt4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subt4_)));
          set_has_subt4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sublv4;
        break;
      }

      // optional uint32 sublv4 = 12;
      case 12: {
        if (tag == 96) {
         parse_sublv4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sublv4_)));
          set_has_sublv4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotConfig.BotEquipment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotConfig.BotEquipment)
  return false;
#undef DO_
}

void BotEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotConfig.BotEquipment)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eqid(), output);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // optional uint32 born1 = 3;
  if (has_born1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->born1(), output);
  }

  // optional uint32 born2 = 4;
  if (has_born2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->born2(), output);
  }

  // optional uint32 subt1 = 5;
  if (has_subt1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subt1(), output);
  }

  // optional uint32 sublv1 = 6;
  if (has_sublv1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sublv1(), output);
  }

  // optional uint32 subt2 = 7;
  if (has_subt2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->subt2(), output);
  }

  // optional uint32 sublv2 = 8;
  if (has_sublv2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sublv2(), output);
  }

  // optional uint32 subt3 = 9;
  if (has_subt3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->subt3(), output);
  }

  // optional uint32 sublv3 = 10;
  if (has_sublv3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sublv3(), output);
  }

  // optional uint32 subt4 = 11;
  if (has_subt4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->subt4(), output);
  }

  // optional uint32 sublv4 = 12;
  if (has_sublv4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sublv4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BotConfig.BotEquipment)
}

::google::protobuf::uint8* BotEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotConfig.BotEquipment)
  // required uint32 eqid = 1;
  if (has_eqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eqid(), target);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // optional uint32 born1 = 3;
  if (has_born1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->born1(), target);
  }

  // optional uint32 born2 = 4;
  if (has_born2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->born2(), target);
  }

  // optional uint32 subt1 = 5;
  if (has_subt1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subt1(), target);
  }

  // optional uint32 sublv1 = 6;
  if (has_sublv1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sublv1(), target);
  }

  // optional uint32 subt2 = 7;
  if (has_subt2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->subt2(), target);
  }

  // optional uint32 sublv2 = 8;
  if (has_sublv2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sublv2(), target);
  }

  // optional uint32 subt3 = 9;
  if (has_subt3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->subt3(), target);
  }

  // optional uint32 sublv3 = 10;
  if (has_sublv3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sublv3(), target);
  }

  // optional uint32 subt4 = 11;
  if (has_subt4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->subt4(), target);
  }

  // optional uint32 sublv4 = 12;
  if (has_sublv4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sublv4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BotConfig.BotEquipment)
  return target;
}

int BotEquipment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 eqid = 1;
    if (has_eqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eqid());
    }

    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 born1 = 3;
    if (has_born1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born1());
    }

    // optional uint32 born2 = 4;
    if (has_born2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born2());
    }

    // optional uint32 subt1 = 5;
    if (has_subt1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subt1());
    }

    // optional uint32 sublv1 = 6;
    if (has_sublv1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sublv1());
    }

    // optional uint32 subt2 = 7;
    if (has_subt2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subt2());
    }

    // optional uint32 sublv2 = 8;
    if (has_sublv2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sublv2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 subt3 = 9;
    if (has_subt3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subt3());
    }

    // optional uint32 sublv3 = 10;
    if (has_sublv3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sublv3());
    }

    // optional uint32 subt4 = 11;
    if (has_subt4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subt4());
    }

    // optional uint32 sublv4 = 12;
    if (has_sublv4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sublv4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BotEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BotEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BotEquipment::MergeFrom(const BotEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eqid()) {
      set_eqid(from.eqid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_born1()) {
      set_born1(from.born1());
    }
    if (from.has_born2()) {
      set_born2(from.born2());
    }
    if (from.has_subt1()) {
      set_subt1(from.subt1());
    }
    if (from.has_sublv1()) {
      set_sublv1(from.sublv1());
    }
    if (from.has_subt2()) {
      set_subt2(from.subt2());
    }
    if (from.has_sublv2()) {
      set_sublv2(from.sublv2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subt3()) {
      set_subt3(from.subt3());
    }
    if (from.has_sublv3()) {
      set_sublv3(from.sublv3());
    }
    if (from.has_subt4()) {
      set_subt4(from.subt4());
    }
    if (from.has_sublv4()) {
      set_sublv4(from.sublv4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BotEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotEquipment::CopyFrom(const BotEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotEquipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BotEquipment::Swap(BotEquipment* other) {
  if (other != this) {
    std::swap(eqid_, other->eqid_);
    std::swap(star_, other->star_);
    std::swap(born1_, other->born1_);
    std::swap(born2_, other->born2_);
    std::swap(subt1_, other->subt1_);
    std::swap(sublv1_, other->sublv1_);
    std::swap(subt2_, other->subt2_);
    std::swap(sublv2_, other->sublv2_);
    std::swap(subt3_, other->subt3_);
    std::swap(sublv3_, other->sublv3_);
    std::swap(subt4_, other->subt4_);
    std::swap(sublv4_, other->sublv4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BotEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotEquipment_descriptor_;
  metadata.reflection = BotEquipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BotHero::kHeroidFieldNumber;
const int BotHero::kLevelFieldNumber;
const int BotHero::kEquipFieldNumber;
#endif  // !_MSC_VER

BotHero::BotHero()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotConfig.BotHero)
}

void BotHero::InitAsDefaultInstance() {
}

BotHero::BotHero(const BotHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotConfig.BotHero)
}

void BotHero::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BotHero::~BotHero() {
  // @@protoc_insertion_point(destructor:BotConfig.BotHero)
  SharedDtor();
}

void BotHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BotHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotHero_descriptor_;
}

const BotHero& BotHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotConfig_2eproto();
  return *default_instance_;
}

BotHero* BotHero::default_instance_ = NULL;

BotHero* BotHero::New() const {
  return new BotHero;
}

void BotHero::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BotHero*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(heroid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BotHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotConfig.BotHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        break;
      }

      // repeated .BotConfig.BotEquipment equip = 3;
      case 3: {
        if (tag == 26) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equip;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotConfig.BotHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotConfig.BotHero)
  return false;
#undef DO_
}

void BotHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotConfig.BotHero)
  // required uint32 heroid = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // repeated .BotConfig.BotEquipment equip = 3;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BotConfig.BotHero)
}

::google::protobuf::uint8* BotHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotConfig.BotHero)
  // required uint32 heroid = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // repeated .BotConfig.BotEquipment equip = 3;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BotConfig.BotHero)
  return target;
}

int BotHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroid = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated .BotConfig.BotEquipment equip = 3;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BotHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BotHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BotHero::MergeFrom(const BotHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BotHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotHero::CopyFrom(const BotHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->equip())) return false;
  return true;
}

void BotHero::Swap(BotHero* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(level_, other->level_);
    equip_.Swap(&other->equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BotHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotHero_descriptor_;
  metadata.reflection = BotHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BotWeapon::kIdFieldNumber;
const int BotWeapon::kLevelFieldNumber;
#endif  // !_MSC_VER

BotWeapon::BotWeapon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotConfig.BotWeapon)
}

void BotWeapon::InitAsDefaultInstance() {
}

BotWeapon::BotWeapon(const BotWeapon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotConfig.BotWeapon)
}

void BotWeapon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BotWeapon::~BotWeapon() {
  // @@protoc_insertion_point(destructor:BotConfig.BotWeapon)
  SharedDtor();
}

void BotWeapon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BotWeapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotWeapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotWeapon_descriptor_;
}

const BotWeapon& BotWeapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotConfig_2eproto();
  return *default_instance_;
}

BotWeapon* BotWeapon::default_instance_ = NULL;

BotWeapon* BotWeapon::New() const {
  return new BotWeapon;
}

void BotWeapon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BotWeapon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BotWeapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotConfig.BotWeapon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotConfig.BotWeapon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotConfig.BotWeapon)
  return false;
#undef DO_
}

void BotWeapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotConfig.BotWeapon)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BotConfig.BotWeapon)
}

::google::protobuf::uint8* BotWeapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotConfig.BotWeapon)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BotConfig.BotWeapon)
  return target;
}

int BotWeapon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotWeapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BotWeapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BotWeapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BotWeapon::MergeFrom(const BotWeapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BotWeapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotWeapon::CopyFrom(const BotWeapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotWeapon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BotWeapon::Swap(BotWeapon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BotWeapon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotWeapon_descriptor_;
  metadata.reflection = BotWeapon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BotPlayer::kDayFieldNumber;
const int BotPlayer::kLevelFieldNumber;
const int BotPlayer::kViplevelFieldNumber;
const int BotPlayer::kHeroFieldNumber;
const int BotPlayer::kScienceFieldNumber;
const int BotPlayer::kWeaponFieldNumber;
#endif  // !_MSC_VER

BotPlayer::BotPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotConfig.BotPlayer)
}

void BotPlayer::InitAsDefaultInstance() {
}

BotPlayer::BotPlayer(const BotPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotConfig.BotPlayer)
}

void BotPlayer::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  level_ = 0u;
  viplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BotPlayer::~BotPlayer() {
  // @@protoc_insertion_point(destructor:BotConfig.BotPlayer)
  SharedDtor();
}

void BotPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BotPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotPlayer_descriptor_;
}

const BotPlayer& BotPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotConfig_2eproto();
  return *default_instance_;
}

BotPlayer* BotPlayer::default_instance_ = NULL;

BotPlayer* BotPlayer::New() const {
  return new BotPlayer;
}

void BotPlayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BotPlayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(day_, level_);
    viplevel_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hero_.Clear();
  science_.Clear();
  weapon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BotPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotConfig.BotPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_viplevel;
        break;
      }

      // required uint32 viplevel = 3;
      case 3: {
        if (tag == 24) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hero;
        break;
      }

      // repeated .BotConfig.BotHero hero = 4;
      case 4: {
        if (tag == 34) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hero;
        if (input->ExpectTag(40)) goto parse_science;
        break;
      }

      // repeated uint32 science = 5;
      case 5: {
        if (tag == 40) {
         parse_science:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_science())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_science())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_science;
        if (input->ExpectTag(50)) goto parse_weapon;
        break;
      }

      // repeated .BotConfig.BotWeapon weapon = 6;
      case 6: {
        if (tag == 50) {
         parse_weapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_weapon;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotConfig.BotPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotConfig.BotPlayer)
  return false;
#undef DO_
}

void BotPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotConfig.BotPlayer)
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 viplevel = 3;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->viplevel(), output);
  }

  // repeated .BotConfig.BotHero hero = 4;
  for (int i = 0; i < this->hero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hero(i), output);
  }

  // repeated uint32 science = 5;
  for (int i = 0; i < this->science_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->science(i), output);
  }

  // repeated .BotConfig.BotWeapon weapon = 6;
  for (int i = 0; i < this->weapon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->weapon(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BotConfig.BotPlayer)
}

::google::protobuf::uint8* BotPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotConfig.BotPlayer)
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 viplevel = 3;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->viplevel(), target);
  }

  // repeated .BotConfig.BotHero hero = 4;
  for (int i = 0; i < this->hero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hero(i), target);
  }

  // repeated uint32 science = 5;
  for (int i = 0; i < this->science_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->science(i), target);
  }

  // repeated .BotConfig.BotWeapon weapon = 6;
  for (int i = 0; i < this->weapon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->weapon(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BotConfig.BotPlayer)
  return target;
}

int BotPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 viplevel = 3;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

  }
  // repeated .BotConfig.BotHero hero = 4;
  total_size += 1 * this->hero_size();
  for (int i = 0; i < this->hero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero(i));
  }

  // repeated uint32 science = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->science_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->science(i));
    }
    total_size += 1 * this->science_size() + data_size;
  }

  // repeated .BotConfig.BotWeapon weapon = 6;
  total_size += 1 * this->weapon_size();
  for (int i = 0; i < this->weapon_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weapon(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BotPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BotPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BotPlayer::MergeFrom(const BotPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_.MergeFrom(from.hero_);
  science_.MergeFrom(from.science_);
  weapon_.MergeFrom(from.weapon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BotPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotPlayer::CopyFrom(const BotPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hero())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->weapon())) return false;
  return true;
}

void BotPlayer::Swap(BotPlayer* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    hero_.Swap(&other->hero_);
    science_.Swap(&other->science_);
    weapon_.Swap(&other->weapon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BotPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotPlayer_descriptor_;
  metadata.reflection = BotPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BotAccount::kIdFieldNumber;
const int BotAccount::kPlayerFieldNumber;
#endif  // !_MSC_VER

BotAccount::BotAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotConfig.BotAccount)
}

void BotAccount::InitAsDefaultInstance() {
}

BotAccount::BotAccount(const BotAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotConfig.BotAccount)
}

void BotAccount::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BotAccount::~BotAccount() {
  // @@protoc_insertion_point(destructor:BotConfig.BotAccount)
  SharedDtor();
}

void BotAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BotAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotAccount_descriptor_;
}

const BotAccount& BotAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotConfig_2eproto();
  return *default_instance_;
}

BotAccount* BotAccount::default_instance_ = NULL;

BotAccount* BotAccount::New() const {
  return new BotAccount;
}

void BotAccount::Clear() {
  id_ = 0u;
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BotAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotConfig.BotAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // repeated .BotConfig.BotPlayer player = 2;
      case 2: {
        if (tag == 18) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotConfig.BotAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotConfig.BotAccount)
  return false;
#undef DO_
}

void BotAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotConfig.BotAccount)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .BotConfig.BotPlayer player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BotConfig.BotAccount)
}

::google::protobuf::uint8* BotAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotConfig.BotAccount)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .BotConfig.BotPlayer player = 2;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BotConfig.BotAccount)
  return target;
}

int BotAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .BotConfig.BotPlayer player = 2;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BotAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BotAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BotAccount::MergeFrom(const BotAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BotAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotAccount::CopyFrom(const BotAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->player())) return false;
  return true;
}

void BotAccount::Swap(BotAccount* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    player_.Swap(&other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BotAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotAccount_descriptor_;
  metadata.reflection = BotAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BotName::kIdFieldNumber;
const int BotName::kKingdomFieldNumber;
const int BotName::kNameFieldNumber;
#endif  // !_MSC_VER

BotName::BotName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotConfig.BotName)
}

void BotName::InitAsDefaultInstance() {
}

BotName::BotName(const BotName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotConfig.BotName)
}

void BotName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  kingdom_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BotName::~BotName() {
  // @@protoc_insertion_point(destructor:BotConfig.BotName)
  SharedDtor();
}

void BotName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BotName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotName_descriptor_;
}

const BotName& BotName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotConfig_2eproto();
  return *default_instance_;
}

BotName* BotName::default_instance_ = NULL;

BotName* BotName::New() const {
  return new BotName;
}

void BotName::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BotName*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, kingdom_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BotName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotConfig.BotName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kingdom;
        break;
      }

      // required uint32 kingdom = 2;
      case 2: {
        if (tag == 16) {
         parse_kingdom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kingdom_)));
          set_has_kingdom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // repeated bytes name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotConfig.BotName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotConfig.BotName)
  return false;
#undef DO_
}

void BotName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotConfig.BotName)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 kingdom = 2;
  if (has_kingdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kingdom(), output);
  }

  // repeated bytes name = 3;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BotConfig.BotName)
}

::google::protobuf::uint8* BotName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotConfig.BotName)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 kingdom = 2;
  if (has_kingdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kingdom(), target);
  }

  // repeated bytes name = 3;
  for (int i = 0; i < this->name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BotConfig.BotName)
  return target;
}

int BotName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 kingdom = 2;
    if (has_kingdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kingdom());
    }

  }
  // repeated bytes name = 3;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BotName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BotName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BotName::MergeFrom(const BotName& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kingdom()) {
      set_kingdom(from.kingdom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BotName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotName::CopyFrom(const BotName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BotName::Swap(BotName* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(kingdom_, other->kingdom_);
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BotName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotName_descriptor_;
  metadata.reflection = BotName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BotConfig::kFigFieldNumber;
const int BotConfig::kNameFieldNumber;
const int BotConfig::kAccountFieldNumber;
const int BotConfig::kChatFieldNumber;
#endif  // !_MSC_VER

BotConfig::BotConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BotConfig.BotConfig)
}

void BotConfig::InitAsDefaultInstance() {
}

BotConfig::BotConfig(const BotConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BotConfig.BotConfig)
}

void BotConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BotConfig::~BotConfig() {
  // @@protoc_insertion_point(destructor:BotConfig.BotConfig)
  SharedDtor();
}

void BotConfig::SharedDtor() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (this != default_instance_) {
  }
}

void BotConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BotConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BotConfig_descriptor_;
}

const BotConfig& BotConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BotConfig_2eproto();
  return *default_instance_;
}

BotConfig* BotConfig::default_instance_ = NULL;

BotConfig* BotConfig::New() const {
  return new BotConfig;
}

void BotConfig::Clear() {
  if (has_fig()) {
    if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fig_->clear();
    }
  }
  name_.Clear();
  account_.Clear();
  chat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BotConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BotConfig.BotConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fig = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fig().data(), this->fig().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fig");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // repeated .BotConfig.BotName name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // repeated .BotConfig.BotAccount account = 3;
      case 3: {
        if (tag == 26) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account;
        if (input->ExpectTag(34)) goto parse_chat;
        break;
      }

      // repeated bytes chat = 4;
      case 4: {
        if (tag == 34) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chat;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BotConfig.BotConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BotConfig.BotConfig)
  return false;
#undef DO_
}

void BotConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BotConfig.BotConfig)
  // required string fig = 1;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fig");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fig(), output);
  }

  // repeated .BotConfig.BotName name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->name(i), output);
  }

  // repeated .BotConfig.BotAccount account = 3;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account(i), output);
  }

  // repeated bytes chat = 4;
  for (int i = 0; i < this->chat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->chat(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BotConfig.BotConfig)
}

::google::protobuf::uint8* BotConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BotConfig.BotConfig)
  // required string fig = 1;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fig().data(), this->fig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fig");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fig(), target);
  }

  // repeated .BotConfig.BotName name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->name(i), target);
  }

  // repeated .BotConfig.BotAccount account = 3;
  for (int i = 0; i < this->account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account(i), target);
  }

  // repeated bytes chat = 4;
  for (int i = 0; i < this->chat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->chat(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BotConfig.BotConfig)
  return target;
}

int BotConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fig = 1;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fig());
    }

  }
  // repeated .BotConfig.BotName name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->name(i));
  }

  // repeated .BotConfig.BotAccount account = 3;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account(i));
  }

  // repeated bytes chat = 4;
  total_size += 1 * this->chat_size();
  for (int i = 0; i < this->chat_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->chat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BotConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BotConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BotConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BotConfig::MergeFrom(const BotConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  account_.MergeFrom(from.account_);
  chat_.MergeFrom(from.chat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fig()) {
      set_fig(from.fig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BotConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotConfig::CopyFrom(const BotConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->name())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->account())) return false;
  return true;
}

void BotConfig::Swap(BotConfig* other) {
  if (other != this) {
    std::swap(fig_, other->fig_);
    name_.Swap(&other->name_);
    account_.Swap(&other->account_);
    chat_.Swap(&other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BotConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BotConfig_descriptor_;
  metadata.reflection = BotConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BotConfig

// @@protoc_insertion_point(global_scope)
