// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ActivityConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ActivityConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ActivityConfig {

namespace {

const ::google::protobuf::Descriptor* PassActivityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassActivityItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashBackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashBackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltActivityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltActivityItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGoldItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGoldItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TouchGold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TouchGold_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscountItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscountItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscountGood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscountGood_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscountPage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscountPage_reflection_ = NULL;
const ::google::protobuf::Descriptor* HugeDiscount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HugeDiscount_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ActivityConfig_2eproto() {
  protobuf_AddDesc_ActivityConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ActivityConfig.proto");
  GOOGLE_CHECK(file != NULL);
  PassActivityItem_descriptor_ = file->message_type(0);
  static const int PassActivityItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityItem, pass_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityItem, reward_),
  };
  PassActivityItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassActivityItem_descriptor_,
      PassActivityItem::default_instance_,
      PassActivityItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivityItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassActivityItem));
  PassActivity_descriptor_ = file->message_type(1);
  static const int PassActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivity, pass_activity_),
  };
  PassActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassActivity_descriptor_,
      PassActivity::default_instance_,
      PassActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassActivity));
  CashBackItem_descriptor_ = file->message_type(2);
  static const int CashBackItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackItem, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackItem, back_),
  };
  CashBackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashBackItem_descriptor_,
      CashBackItem::default_instance_,
      CashBackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashBackItem));
  CashBack_descriptor_ = file->message_type(3);
  static const int CashBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBack, cash_back_),
  };
  CashBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashBack_descriptor_,
      CashBack::default_instance_,
      CashBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashBack));
  SmeltActivityItem_descriptor_ = file->message_type(4);
  static const int SmeltActivityItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltActivityItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltActivityItem, smelt_total_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltActivityItem, limit_reward_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltActivityItem, reward_),
  };
  SmeltActivityItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltActivityItem_descriptor_,
      SmeltActivityItem::default_instance_,
      SmeltActivityItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltActivityItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltActivityItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltActivityItem));
  SmeltActivity_descriptor_ = file->message_type(5);
  static const int SmeltActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltActivity, smelt_activity_),
  };
  SmeltActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltActivity_descriptor_,
      SmeltActivity::default_instance_,
      SmeltActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltActivity));
  TouchGoldOut_descriptor_ = file->message_type(6);
  static const int TouchGoldOut_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldOut, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldOut, prob_),
  };
  TouchGoldOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldOut_descriptor_,
      TouchGoldOut::default_instance_,
      TouchGoldOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldOut));
  TouchGoldItem_descriptor_ = file->message_type(7);
  static const int TouchGoldItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldItem, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldItem, open_next_prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldItem, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldItem, unlock_),
  };
  TouchGoldItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGoldItem_descriptor_,
      TouchGoldItem::default_instance_,
      TouchGoldItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGoldItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGoldItem));
  TouchGold_descriptor_ = file->message_type(8);
  static const int TouchGold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGold, touch_gold_),
  };
  TouchGold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TouchGold_descriptor_,
      TouchGold::default_instance_,
      TouchGold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TouchGold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TouchGold));
  HugeDiscountItem_descriptor_ = file->message_type(9);
  static const int HugeDiscountItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, limit_cnt_),
  };
  HugeDiscountItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscountItem_descriptor_,
      HugeDiscountItem::default_instance_,
      HugeDiscountItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscountItem));
  HugeDiscountGood_descriptor_ = file->message_type(10);
  static const int HugeDiscountGood_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountGood, open_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountGood, items_),
  };
  HugeDiscountGood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscountGood_descriptor_,
      HugeDiscountGood::default_instance_,
      HugeDiscountGood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountGood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountGood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscountGood));
  HugeDiscountPage_descriptor_ = file->message_type(11);
  static const int HugeDiscountPage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountPage, page_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountPage, cash_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountPage, goods_),
  };
  HugeDiscountPage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscountPage_descriptor_,
      HugeDiscountPage::default_instance_,
      HugeDiscountPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscountPage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscountPage));
  HugeDiscount_descriptor_ = file->message_type(12);
  static const int HugeDiscount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscount, huge_discount_),
  };
  HugeDiscount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HugeDiscount_descriptor_,
      HugeDiscount::default_instance_,
      HugeDiscount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HugeDiscount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HugeDiscount));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ActivityConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassActivityItem_descriptor_, &PassActivityItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassActivity_descriptor_, &PassActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashBackItem_descriptor_, &CashBackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashBack_descriptor_, &CashBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltActivityItem_descriptor_, &SmeltActivityItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltActivity_descriptor_, &SmeltActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldOut_descriptor_, &TouchGoldOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGoldItem_descriptor_, &TouchGoldItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TouchGold_descriptor_, &TouchGold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscountItem_descriptor_, &HugeDiscountItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscountGood_descriptor_, &HugeDiscountGood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscountPage_descriptor_, &HugeDiscountPage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HugeDiscount_descriptor_, &HugeDiscount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ActivityConfig_2eproto() {
  delete PassActivityItem::default_instance_;
  delete PassActivityItem_reflection_;
  delete PassActivity::default_instance_;
  delete PassActivity_reflection_;
  delete CashBackItem::default_instance_;
  delete CashBackItem_reflection_;
  delete CashBack::default_instance_;
  delete CashBack_reflection_;
  delete SmeltActivityItem::default_instance_;
  delete SmeltActivityItem_reflection_;
  delete SmeltActivity::default_instance_;
  delete SmeltActivity_reflection_;
  delete TouchGoldOut::default_instance_;
  delete TouchGoldOut_reflection_;
  delete TouchGoldItem::default_instance_;
  delete TouchGoldItem_reflection_;
  delete TouchGold::default_instance_;
  delete TouchGold_reflection_;
  delete HugeDiscountItem::default_instance_;
  delete HugeDiscountItem_reflection_;
  delete HugeDiscountGood::default_instance_;
  delete HugeDiscountGood_reflection_;
  delete HugeDiscountPage::default_instance_;
  delete HugeDiscountPage_reflection_;
  delete HugeDiscount::default_instance_;
  delete HugeDiscount_reflection_;
}

void protobuf_AddDesc_ActivityConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ActivityConfig.proto\022\016ActivityConfig\"\?"
    "\n\020PassActivityItem\022\n\n\002id\030\001 \002(\r\022\017\n\007pass_i"
    "d\030\002 \002(\r\022\016\n\006reward\030\003 \002(\r\"G\n\014PassActivity\022"
    "7\n\rpass_activity\030\001 \003(\0132 .ActivityConfig."
    "PassActivityItem\"7\n\014CashBackItem\022\n\n\002id\030\001"
    " \002(\r\022\r\n\005total\030\002 \002(\r\022\014\n\004back\030\003 \002(\r\";\n\010Cas"
    "hBack\022/\n\tcash_back\030\001 \003(\0132\034.ActivityConfi"
    "g.CashBackItem\"b\n\021SmeltActivityItem\022\n\n\002i"
    "d\030\001 \002(\r\022\027\n\017smelt_total_cnt\030\002 \002(\r\022\030\n\020limi"
    "t_reward_cnt\030\003 \002(\r\022\016\n\006reward\030\004 \002(\r\"J\n\rSm"
    "eltActivity\0229\n\016smelt_activity\030\001 \003(\0132!.Ac"
    "tivityConfig.SmeltActivityItem\"+\n\014TouchG"
    "oldOut\022\r\n\005value\030\001 \002(\r\022\014\n\004prob\030\002 \002(\r\"|\n\rT"
    "ouchGoldItem\022\n\n\002id\030\001 \002(\r\022\014\n\004cost\030\002 \002(\r\022\026"
    "\n\016open_next_prob\030\003 \002(\r\022)\n\003out\030\004 \003(\0132\034.Ac"
    "tivityConfig.TouchGoldOut\022\016\n\006unlock\030\005 \001("
    "\r\">\n\tTouchGold\0221\n\ntouch_gold\030\001 \003(\0132\035.Act"
    "ivityConfig.TouchGoldItem\"R\n\020HugeDiscoun"
    "tItem\022\n\n\002id\030\001 \002(\r\022\020\n\010equip_id\030\002 \002(\r\022\r\n\005p"
    "rice\030\003 \002(\r\022\021\n\tlimit_cnt\030\004 \002(\r\"U\n\020HugeDis"
    "countGood\022\020\n\010open_day\030\001 \002(\r\022/\n\005items\030\002 \003"
    "(\0132 .ActivityConfig.HugeDiscountItem\"j\n\020"
    "HugeDiscountPage\022\017\n\007page_id\030\001 \002(\r\022\024\n\014cas"
    "h_account\030\002 \002(\r\022/\n\005goods\030\003 \003(\0132 .Activit"
    "yConfig.HugeDiscountGood\"G\n\014HugeDiscount"
    "\0227\n\rhuge_discount\030\001 \003(\0132 .ActivityConfig"
    ".HugeDiscountPage", 1057);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ActivityConfig.proto", &protobuf_RegisterTypes);
  PassActivityItem::default_instance_ = new PassActivityItem();
  PassActivity::default_instance_ = new PassActivity();
  CashBackItem::default_instance_ = new CashBackItem();
  CashBack::default_instance_ = new CashBack();
  SmeltActivityItem::default_instance_ = new SmeltActivityItem();
  SmeltActivity::default_instance_ = new SmeltActivity();
  TouchGoldOut::default_instance_ = new TouchGoldOut();
  TouchGoldItem::default_instance_ = new TouchGoldItem();
  TouchGold::default_instance_ = new TouchGold();
  HugeDiscountItem::default_instance_ = new HugeDiscountItem();
  HugeDiscountGood::default_instance_ = new HugeDiscountGood();
  HugeDiscountPage::default_instance_ = new HugeDiscountPage();
  HugeDiscount::default_instance_ = new HugeDiscount();
  PassActivityItem::default_instance_->InitAsDefaultInstance();
  PassActivity::default_instance_->InitAsDefaultInstance();
  CashBackItem::default_instance_->InitAsDefaultInstance();
  CashBack::default_instance_->InitAsDefaultInstance();
  SmeltActivityItem::default_instance_->InitAsDefaultInstance();
  SmeltActivity::default_instance_->InitAsDefaultInstance();
  TouchGoldOut::default_instance_->InitAsDefaultInstance();
  TouchGoldItem::default_instance_->InitAsDefaultInstance();
  TouchGold::default_instance_->InitAsDefaultInstance();
  HugeDiscountItem::default_instance_->InitAsDefaultInstance();
  HugeDiscountGood::default_instance_->InitAsDefaultInstance();
  HugeDiscountPage::default_instance_->InitAsDefaultInstance();
  HugeDiscount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ActivityConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ActivityConfig_2eproto {
  StaticDescriptorInitializer_ActivityConfig_2eproto() {
    protobuf_AddDesc_ActivityConfig_2eproto();
  }
} static_descriptor_initializer_ActivityConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PassActivityItem::kIdFieldNumber;
const int PassActivityItem::kPassIdFieldNumber;
const int PassActivityItem::kRewardFieldNumber;
#endif  // !_MSC_VER

PassActivityItem::PassActivityItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.PassActivityItem)
}

void PassActivityItem::InitAsDefaultInstance() {
}

PassActivityItem::PassActivityItem(const PassActivityItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.PassActivityItem)
}

void PassActivityItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pass_id_ = 0u;
  reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassActivityItem::~PassActivityItem() {
  // @@protoc_insertion_point(destructor:ActivityConfig.PassActivityItem)
  SharedDtor();
}

void PassActivityItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassActivityItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassActivityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassActivityItem_descriptor_;
}

const PassActivityItem& PassActivityItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

PassActivityItem* PassActivityItem::default_instance_ = NULL;

PassActivityItem* PassActivityItem::New() const {
  return new PassActivityItem;
}

void PassActivityItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PassActivityItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, reward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassActivityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.PassActivityItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pass_id;
        break;
      }

      // required uint32 pass_id = 2;
      case 2: {
        if (tag == 16) {
         parse_pass_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_id_)));
          set_has_pass_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // required uint32 reward = 3;
      case 3: {
        if (tag == 24) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.PassActivityItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.PassActivityItem)
  return false;
#undef DO_
}

void PassActivityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.PassActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 pass_id = 2;
  if (has_pass_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pass_id(), output);
  }

  // required uint32 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.PassActivityItem)
}

::google::protobuf::uint8* PassActivityItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.PassActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 pass_id = 2;
  if (has_pass_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pass_id(), target);
  }

  // required uint32 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.PassActivityItem)
  return target;
}

int PassActivityItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 pass_id = 2;
    if (has_pass_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pass_id());
    }

    // required uint32 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassActivityItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassActivityItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassActivityItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassActivityItem::MergeFrom(const PassActivityItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pass_id()) {
      set_pass_id(from.pass_id());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassActivityItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassActivityItem::CopyFrom(const PassActivityItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassActivityItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PassActivityItem::Swap(PassActivityItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pass_id_, other->pass_id_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassActivityItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassActivityItem_descriptor_;
  metadata.reflection = PassActivityItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassActivity::kPassActivityFieldNumber;
#endif  // !_MSC_VER

PassActivity::PassActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.PassActivity)
}

void PassActivity::InitAsDefaultInstance() {
}

PassActivity::PassActivity(const PassActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.PassActivity)
}

void PassActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassActivity::~PassActivity() {
  // @@protoc_insertion_point(destructor:ActivityConfig.PassActivity)
  SharedDtor();
}

void PassActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassActivity_descriptor_;
}

const PassActivity& PassActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

PassActivity* PassActivity::default_instance_ = NULL;

PassActivity* PassActivity::New() const {
  return new PassActivity;
}

void PassActivity::Clear() {
  pass_activity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.PassActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityConfig.PassActivityItem pass_activity = 1;
      case 1: {
        if (tag == 10) {
         parse_pass_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pass_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pass_activity;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.PassActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.PassActivity)
  return false;
#undef DO_
}

void PassActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.PassActivity)
  // repeated .ActivityConfig.PassActivityItem pass_activity = 1;
  for (int i = 0; i < this->pass_activity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pass_activity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.PassActivity)
}

::google::protobuf::uint8* PassActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.PassActivity)
  // repeated .ActivityConfig.PassActivityItem pass_activity = 1;
  for (int i = 0; i < this->pass_activity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pass_activity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.PassActivity)
  return target;
}

int PassActivity::ByteSize() const {
  int total_size = 0;

  // repeated .ActivityConfig.PassActivityItem pass_activity = 1;
  total_size += 1 * this->pass_activity_size();
  for (int i = 0; i < this->pass_activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pass_activity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassActivity::MergeFrom(const PassActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_activity_.MergeFrom(from.pass_activity_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassActivity::CopyFrom(const PassActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassActivity::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pass_activity())) return false;
  return true;
}

void PassActivity::Swap(PassActivity* other) {
  if (other != this) {
    pass_activity_.Swap(&other->pass_activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassActivity_descriptor_;
  metadata.reflection = PassActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CashBackItem::kIdFieldNumber;
const int CashBackItem::kTotalFieldNumber;
const int CashBackItem::kBackFieldNumber;
#endif  // !_MSC_VER

CashBackItem::CashBackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.CashBackItem)
}

void CashBackItem::InitAsDefaultInstance() {
}

CashBackItem::CashBackItem(const CashBackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.CashBackItem)
}

void CashBackItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  total_ = 0u;
  back_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashBackItem::~CashBackItem() {
  // @@protoc_insertion_point(destructor:ActivityConfig.CashBackItem)
  SharedDtor();
}

void CashBackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CashBackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashBackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashBackItem_descriptor_;
}

const CashBackItem& CashBackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

CashBackItem* CashBackItem::default_instance_ = NULL;

CashBackItem* CashBackItem::New() const {
  return new CashBackItem;
}

void CashBackItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CashBackItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, back_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashBackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.CashBackItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // required uint32 total = 2;
      case 2: {
        if (tag == 16) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_back;
        break;
      }

      // required uint32 back = 3;
      case 3: {
        if (tag == 24) {
         parse_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_)));
          set_has_back();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.CashBackItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.CashBackItem)
  return false;
#undef DO_
}

void CashBackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.CashBackItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total(), output);
  }

  // required uint32 back = 3;
  if (has_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->back(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.CashBackItem)
}

::google::protobuf::uint8* CashBackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.CashBackItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total(), target);
  }

  // required uint32 back = 3;
  if (has_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->back(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.CashBackItem)
  return target;
}

int CashBackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // required uint32 back = 3;
    if (has_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashBackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashBackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashBackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashBackItem::MergeFrom(const CashBackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_back()) {
      set_back(from.back());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashBackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashBackItem::CopyFrom(const CashBackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashBackItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CashBackItem::Swap(CashBackItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(total_, other->total_);
    std::swap(back_, other->back_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashBackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashBackItem_descriptor_;
  metadata.reflection = CashBackItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CashBack::kCashBackFieldNumber;
#endif  // !_MSC_VER

CashBack::CashBack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.CashBack)
}

void CashBack::InitAsDefaultInstance() {
}

CashBack::CashBack(const CashBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.CashBack)
}

void CashBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashBack::~CashBack() {
  // @@protoc_insertion_point(destructor:ActivityConfig.CashBack)
  SharedDtor();
}

void CashBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CashBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashBack_descriptor_;
}

const CashBack& CashBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

CashBack* CashBack::default_instance_ = NULL;

CashBack* CashBack::New() const {
  return new CashBack;
}

void CashBack::Clear() {
  cash_back_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.CashBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityConfig.CashBackItem cash_back = 1;
      case 1: {
        if (tag == 10) {
         parse_cash_back:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cash_back()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cash_back;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.CashBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.CashBack)
  return false;
#undef DO_
}

void CashBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.CashBack)
  // repeated .ActivityConfig.CashBackItem cash_back = 1;
  for (int i = 0; i < this->cash_back_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cash_back(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.CashBack)
}

::google::protobuf::uint8* CashBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.CashBack)
  // repeated .ActivityConfig.CashBackItem cash_back = 1;
  for (int i = 0; i < this->cash_back_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cash_back(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.CashBack)
  return target;
}

int CashBack::ByteSize() const {
  int total_size = 0;

  // repeated .ActivityConfig.CashBackItem cash_back = 1;
  total_size += 1 * this->cash_back_size();
  for (int i = 0; i < this->cash_back_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cash_back(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashBack::MergeFrom(const CashBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  cash_back_.MergeFrom(from.cash_back_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashBack::CopyFrom(const CashBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashBack::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->cash_back())) return false;
  return true;
}

void CashBack::Swap(CashBack* other) {
  if (other != this) {
    cash_back_.Swap(&other->cash_back_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashBack_descriptor_;
  metadata.reflection = CashBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltActivityItem::kIdFieldNumber;
const int SmeltActivityItem::kSmeltTotalCntFieldNumber;
const int SmeltActivityItem::kLimitRewardCntFieldNumber;
const int SmeltActivityItem::kRewardFieldNumber;
#endif  // !_MSC_VER

SmeltActivityItem::SmeltActivityItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.SmeltActivityItem)
}

void SmeltActivityItem::InitAsDefaultInstance() {
}

SmeltActivityItem::SmeltActivityItem(const SmeltActivityItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.SmeltActivityItem)
}

void SmeltActivityItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  smelt_total_cnt_ = 0u;
  limit_reward_cnt_ = 0u;
  reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltActivityItem::~SmeltActivityItem() {
  // @@protoc_insertion_point(destructor:ActivityConfig.SmeltActivityItem)
  SharedDtor();
}

void SmeltActivityItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmeltActivityItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltActivityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltActivityItem_descriptor_;
}

const SmeltActivityItem& SmeltActivityItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

SmeltActivityItem* SmeltActivityItem::default_instance_ = NULL;

SmeltActivityItem* SmeltActivityItem::New() const {
  return new SmeltActivityItem;
}

void SmeltActivityItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SmeltActivityItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, reward_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltActivityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.SmeltActivityItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_smelt_total_cnt;
        break;
      }

      // required uint32 smelt_total_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_smelt_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smelt_total_cnt_)));
          set_has_smelt_total_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit_reward_cnt;
        break;
      }

      // required uint32 limit_reward_cnt = 3;
      case 3: {
        if (tag == 24) {
         parse_limit_reward_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_reward_cnt_)));
          set_has_limit_reward_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // required uint32 reward = 4;
      case 4: {
        if (tag == 32) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.SmeltActivityItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.SmeltActivityItem)
  return false;
#undef DO_
}

void SmeltActivityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.SmeltActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 smelt_total_cnt = 2;
  if (has_smelt_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->smelt_total_cnt(), output);
  }

  // required uint32 limit_reward_cnt = 3;
  if (has_limit_reward_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit_reward_cnt(), output);
  }

  // required uint32 reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.SmeltActivityItem)
}

::google::protobuf::uint8* SmeltActivityItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.SmeltActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 smelt_total_cnt = 2;
  if (has_smelt_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->smelt_total_cnt(), target);
  }

  // required uint32 limit_reward_cnt = 3;
  if (has_limit_reward_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit_reward_cnt(), target);
  }

  // required uint32 reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.SmeltActivityItem)
  return target;
}

int SmeltActivityItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 smelt_total_cnt = 2;
    if (has_smelt_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->smelt_total_cnt());
    }

    // required uint32 limit_reward_cnt = 3;
    if (has_limit_reward_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_reward_cnt());
    }

    // required uint32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltActivityItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltActivityItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltActivityItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltActivityItem::MergeFrom(const SmeltActivityItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_smelt_total_cnt()) {
      set_smelt_total_cnt(from.smelt_total_cnt());
    }
    if (from.has_limit_reward_cnt()) {
      set_limit_reward_cnt(from.limit_reward_cnt());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltActivityItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltActivityItem::CopyFrom(const SmeltActivityItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltActivityItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SmeltActivityItem::Swap(SmeltActivityItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(smelt_total_cnt_, other->smelt_total_cnt_);
    std::swap(limit_reward_cnt_, other->limit_reward_cnt_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltActivityItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltActivityItem_descriptor_;
  metadata.reflection = SmeltActivityItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltActivity::kSmeltActivityFieldNumber;
#endif  // !_MSC_VER

SmeltActivity::SmeltActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.SmeltActivity)
}

void SmeltActivity::InitAsDefaultInstance() {
}

SmeltActivity::SmeltActivity(const SmeltActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.SmeltActivity)
}

void SmeltActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltActivity::~SmeltActivity() {
  // @@protoc_insertion_point(destructor:ActivityConfig.SmeltActivity)
  SharedDtor();
}

void SmeltActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmeltActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltActivity_descriptor_;
}

const SmeltActivity& SmeltActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

SmeltActivity* SmeltActivity::default_instance_ = NULL;

SmeltActivity* SmeltActivity::New() const {
  return new SmeltActivity;
}

void SmeltActivity::Clear() {
  smelt_activity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.SmeltActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityConfig.SmeltActivityItem smelt_activity = 1;
      case 1: {
        if (tag == 10) {
         parse_smelt_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_smelt_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_smelt_activity;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.SmeltActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.SmeltActivity)
  return false;
#undef DO_
}

void SmeltActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.SmeltActivity)
  // repeated .ActivityConfig.SmeltActivityItem smelt_activity = 1;
  for (int i = 0; i < this->smelt_activity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->smelt_activity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.SmeltActivity)
}

::google::protobuf::uint8* SmeltActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.SmeltActivity)
  // repeated .ActivityConfig.SmeltActivityItem smelt_activity = 1;
  for (int i = 0; i < this->smelt_activity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->smelt_activity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.SmeltActivity)
  return target;
}

int SmeltActivity::ByteSize() const {
  int total_size = 0;

  // repeated .ActivityConfig.SmeltActivityItem smelt_activity = 1;
  total_size += 1 * this->smelt_activity_size();
  for (int i = 0; i < this->smelt_activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->smelt_activity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltActivity::MergeFrom(const SmeltActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  smelt_activity_.MergeFrom(from.smelt_activity_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltActivity::CopyFrom(const SmeltActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltActivity::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->smelt_activity())) return false;
  return true;
}

void SmeltActivity::Swap(SmeltActivity* other) {
  if (other != this) {
    smelt_activity_.Swap(&other->smelt_activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltActivity_descriptor_;
  metadata.reflection = SmeltActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TouchGoldOut::kValueFieldNumber;
const int TouchGoldOut::kProbFieldNumber;
#endif  // !_MSC_VER

TouchGoldOut::TouchGoldOut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.TouchGoldOut)
}

void TouchGoldOut::InitAsDefaultInstance() {
}

TouchGoldOut::TouchGoldOut(const TouchGoldOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.TouchGoldOut)
}

void TouchGoldOut::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  prob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldOut::~TouchGoldOut() {
  // @@protoc_insertion_point(destructor:ActivityConfig.TouchGoldOut)
  SharedDtor();
}

void TouchGoldOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldOut_descriptor_;
}

const TouchGoldOut& TouchGoldOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

TouchGoldOut* TouchGoldOut::default_instance_ = NULL;

TouchGoldOut* TouchGoldOut::New() const {
  return new TouchGoldOut;
}

void TouchGoldOut::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TouchGoldOut*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(value_, prob_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.TouchGoldOut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prob;
        break;
      }

      // required uint32 prob = 2;
      case 2: {
        if (tag == 16) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.TouchGoldOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.TouchGoldOut)
  return false;
#undef DO_
}

void TouchGoldOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.TouchGoldOut)
  // required uint32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // required uint32 prob = 2;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.TouchGoldOut)
}

::google::protobuf::uint8* TouchGoldOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.TouchGoldOut)
  // required uint32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // required uint32 prob = 2;
  if (has_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.TouchGoldOut)
  return target;
}

int TouchGoldOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 prob = 2;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldOut::MergeFrom(const TouchGoldOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldOut::CopyFrom(const TouchGoldOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TouchGoldOut::Swap(TouchGoldOut* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(prob_, other->prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldOut_descriptor_;
  metadata.reflection = TouchGoldOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TouchGoldItem::kIdFieldNumber;
const int TouchGoldItem::kCostFieldNumber;
const int TouchGoldItem::kOpenNextProbFieldNumber;
const int TouchGoldItem::kOutFieldNumber;
const int TouchGoldItem::kUnlockFieldNumber;
#endif  // !_MSC_VER

TouchGoldItem::TouchGoldItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.TouchGoldItem)
}

void TouchGoldItem::InitAsDefaultInstance() {
}

TouchGoldItem::TouchGoldItem(const TouchGoldItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.TouchGoldItem)
}

void TouchGoldItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cost_ = 0u;
  open_next_prob_ = 0u;
  unlock_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGoldItem::~TouchGoldItem() {
  // @@protoc_insertion_point(destructor:ActivityConfig.TouchGoldItem)
  SharedDtor();
}

void TouchGoldItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGoldItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGoldItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGoldItem_descriptor_;
}

const TouchGoldItem& TouchGoldItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

TouchGoldItem* TouchGoldItem::default_instance_ = NULL;

TouchGoldItem* TouchGoldItem::New() const {
  return new TouchGoldItem;
}

void TouchGoldItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TouchGoldItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, cost_);
  ZR_(open_next_prob_, unlock_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  out_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGoldItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.TouchGoldItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // required uint32 cost = 2;
      case 2: {
        if (tag == 16) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open_next_prob;
        break;
      }

      // required uint32 open_next_prob = 3;
      case 3: {
        if (tag == 24) {
         parse_open_next_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_next_prob_)));
          set_has_open_next_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_out;
        break;
      }

      // repeated .ActivityConfig.TouchGoldOut out = 4;
      case 4: {
        if (tag == 34) {
         parse_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_out()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_out;
        if (input->ExpectTag(40)) goto parse_unlock;
        break;
      }

      // optional uint32 unlock = 5;
      case 5: {
        if (tag == 40) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.TouchGoldItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.TouchGoldItem)
  return false;
#undef DO_
}

void TouchGoldItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.TouchGoldItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost(), output);
  }

  // required uint32 open_next_prob = 3;
  if (has_open_next_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->open_next_prob(), output);
  }

  // repeated .ActivityConfig.TouchGoldOut out = 4;
  for (int i = 0; i < this->out_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->out(i), output);
  }

  // optional uint32 unlock = 5;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.TouchGoldItem)
}

::google::protobuf::uint8* TouchGoldItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.TouchGoldItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost(), target);
  }

  // required uint32 open_next_prob = 3;
  if (has_open_next_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->open_next_prob(), target);
  }

  // repeated .ActivityConfig.TouchGoldOut out = 4;
  for (int i = 0; i < this->out_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->out(i), target);
  }

  // optional uint32 unlock = 5;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.TouchGoldItem)
  return target;
}

int TouchGoldItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // required uint32 open_next_prob = 3;
    if (has_open_next_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_next_prob());
    }

    // optional uint32 unlock = 5;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock());
    }

  }
  // repeated .ActivityConfig.TouchGoldOut out = 4;
  total_size += 1 * this->out_size();
  for (int i = 0; i < this->out_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->out(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGoldItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGoldItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGoldItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGoldItem::MergeFrom(const TouchGoldItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  out_.MergeFrom(from.out_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_open_next_prob()) {
      set_open_next_prob(from.open_next_prob());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGoldItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGoldItem::CopyFrom(const TouchGoldItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGoldItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->out())) return false;
  return true;
}

void TouchGoldItem::Swap(TouchGoldItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cost_, other->cost_);
    std::swap(open_next_prob_, other->open_next_prob_);
    out_.Swap(&other->out_);
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGoldItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGoldItem_descriptor_;
  metadata.reflection = TouchGoldItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TouchGold::kTouchGoldFieldNumber;
#endif  // !_MSC_VER

TouchGold::TouchGold()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.TouchGold)
}

void TouchGold::InitAsDefaultInstance() {
}

TouchGold::TouchGold(const TouchGold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.TouchGold)
}

void TouchGold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchGold::~TouchGold() {
  // @@protoc_insertion_point(destructor:ActivityConfig.TouchGold)
  SharedDtor();
}

void TouchGold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TouchGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TouchGold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TouchGold_descriptor_;
}

const TouchGold& TouchGold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

TouchGold* TouchGold::default_instance_ = NULL;

TouchGold* TouchGold::New() const {
  return new TouchGold;
}

void TouchGold::Clear() {
  touch_gold_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TouchGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.TouchGold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityConfig.TouchGoldItem touch_gold = 1;
      case 1: {
        if (tag == 10) {
         parse_touch_gold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_touch_gold()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_touch_gold;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.TouchGold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.TouchGold)
  return false;
#undef DO_
}

void TouchGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.TouchGold)
  // repeated .ActivityConfig.TouchGoldItem touch_gold = 1;
  for (int i = 0; i < this->touch_gold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->touch_gold(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.TouchGold)
}

::google::protobuf::uint8* TouchGold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.TouchGold)
  // repeated .ActivityConfig.TouchGoldItem touch_gold = 1;
  for (int i = 0; i < this->touch_gold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->touch_gold(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.TouchGold)
  return target;
}

int TouchGold::ByteSize() const {
  int total_size = 0;

  // repeated .ActivityConfig.TouchGoldItem touch_gold = 1;
  total_size += 1 * this->touch_gold_size();
  for (int i = 0; i < this->touch_gold_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->touch_gold(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchGold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TouchGold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TouchGold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TouchGold::MergeFrom(const TouchGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  touch_gold_.MergeFrom(from.touch_gold_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TouchGold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TouchGold::CopyFrom(const TouchGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchGold::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->touch_gold())) return false;
  return true;
}

void TouchGold::Swap(TouchGold* other) {
  if (other != this) {
    touch_gold_.Swap(&other->touch_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TouchGold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TouchGold_descriptor_;
  metadata.reflection = TouchGold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDiscountItem::kIdFieldNumber;
const int HugeDiscountItem::kEquipIdFieldNumber;
const int HugeDiscountItem::kPriceFieldNumber;
const int HugeDiscountItem::kLimitCntFieldNumber;
#endif  // !_MSC_VER

HugeDiscountItem::HugeDiscountItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.HugeDiscountItem)
}

void HugeDiscountItem::InitAsDefaultInstance() {
}

HugeDiscountItem::HugeDiscountItem(const HugeDiscountItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.HugeDiscountItem)
}

void HugeDiscountItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  equip_id_ = 0u;
  price_ = 0u;
  limit_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscountItem::~HugeDiscountItem() {
  // @@protoc_insertion_point(destructor:ActivityConfig.HugeDiscountItem)
  SharedDtor();
}

void HugeDiscountItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HugeDiscountItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscountItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscountItem_descriptor_;
}

const HugeDiscountItem& HugeDiscountItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

HugeDiscountItem* HugeDiscountItem::default_instance_ = NULL;

HugeDiscountItem* HugeDiscountItem::New() const {
  return new HugeDiscountItem;
}

void HugeDiscountItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HugeDiscountItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, limit_cnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscountItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.HugeDiscountItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equip_id;
        break;
      }

      // required uint32 equip_id = 2;
      case 2: {
        if (tag == 16) {
         parse_equip_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // required uint32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limit_cnt;
        break;
      }

      // required uint32 limit_cnt = 4;
      case 4: {
        if (tag == 32) {
         parse_limit_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_cnt_)));
          set_has_limit_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.HugeDiscountItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.HugeDiscountItem)
  return false;
#undef DO_
}

void HugeDiscountItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.HugeDiscountItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 equip_id = 2;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equip_id(), output);
  }

  // required uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }

  // required uint32 limit_cnt = 4;
  if (has_limit_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.HugeDiscountItem)
}

::google::protobuf::uint8* HugeDiscountItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.HugeDiscountItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 equip_id = 2;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equip_id(), target);
  }

  // required uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }

  // required uint32 limit_cnt = 4;
  if (has_limit_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.HugeDiscountItem)
  return target;
}

int HugeDiscountItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 equip_id = 2;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equip_id());
    }

    // required uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required uint32 limit_cnt = 4;
    if (has_limit_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscountItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscountItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscountItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscountItem::MergeFrom(const HugeDiscountItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_limit_cnt()) {
      set_limit_cnt(from.limit_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscountItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscountItem::CopyFrom(const HugeDiscountItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscountItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void HugeDiscountItem::Swap(HugeDiscountItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(equip_id_, other->equip_id_);
    std::swap(price_, other->price_);
    std::swap(limit_cnt_, other->limit_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscountItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscountItem_descriptor_;
  metadata.reflection = HugeDiscountItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDiscountGood::kOpenDayFieldNumber;
const int HugeDiscountGood::kItemsFieldNumber;
#endif  // !_MSC_VER

HugeDiscountGood::HugeDiscountGood()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.HugeDiscountGood)
}

void HugeDiscountGood::InitAsDefaultInstance() {
}

HugeDiscountGood::HugeDiscountGood(const HugeDiscountGood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.HugeDiscountGood)
}

void HugeDiscountGood::SharedCtor() {
  _cached_size_ = 0;
  open_day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscountGood::~HugeDiscountGood() {
  // @@protoc_insertion_point(destructor:ActivityConfig.HugeDiscountGood)
  SharedDtor();
}

void HugeDiscountGood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HugeDiscountGood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscountGood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscountGood_descriptor_;
}

const HugeDiscountGood& HugeDiscountGood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

HugeDiscountGood* HugeDiscountGood::default_instance_ = NULL;

HugeDiscountGood* HugeDiscountGood::New() const {
  return new HugeDiscountGood;
}

void HugeDiscountGood::Clear() {
  open_day_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscountGood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.HugeDiscountGood)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 open_day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_day_)));
          set_has_open_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .ActivityConfig.HugeDiscountItem items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.HugeDiscountGood)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.HugeDiscountGood)
  return false;
#undef DO_
}

void HugeDiscountGood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.HugeDiscountGood)
  // required uint32 open_day = 1;
  if (has_open_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->open_day(), output);
  }

  // repeated .ActivityConfig.HugeDiscountItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.HugeDiscountGood)
}

::google::protobuf::uint8* HugeDiscountGood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.HugeDiscountGood)
  // required uint32 open_day = 1;
  if (has_open_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->open_day(), target);
  }

  // repeated .ActivityConfig.HugeDiscountItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.HugeDiscountGood)
  return target;
}

int HugeDiscountGood::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 open_day = 1;
    if (has_open_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_day());
    }

  }
  // repeated .ActivityConfig.HugeDiscountItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscountGood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscountGood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscountGood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscountGood::MergeFrom(const HugeDiscountGood& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open_day()) {
      set_open_day(from.open_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscountGood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscountGood::CopyFrom(const HugeDiscountGood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscountGood::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void HugeDiscountGood::Swap(HugeDiscountGood* other) {
  if (other != this) {
    std::swap(open_day_, other->open_day_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscountGood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscountGood_descriptor_;
  metadata.reflection = HugeDiscountGood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDiscountPage::kPageIdFieldNumber;
const int HugeDiscountPage::kCashAccountFieldNumber;
const int HugeDiscountPage::kGoodsFieldNumber;
#endif  // !_MSC_VER

HugeDiscountPage::HugeDiscountPage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.HugeDiscountPage)
}

void HugeDiscountPage::InitAsDefaultInstance() {
}

HugeDiscountPage::HugeDiscountPage(const HugeDiscountPage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.HugeDiscountPage)
}

void HugeDiscountPage::SharedCtor() {
  _cached_size_ = 0;
  page_id_ = 0u;
  cash_account_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscountPage::~HugeDiscountPage() {
  // @@protoc_insertion_point(destructor:ActivityConfig.HugeDiscountPage)
  SharedDtor();
}

void HugeDiscountPage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HugeDiscountPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscountPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscountPage_descriptor_;
}

const HugeDiscountPage& HugeDiscountPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

HugeDiscountPage* HugeDiscountPage::default_instance_ = NULL;

HugeDiscountPage* HugeDiscountPage::New() const {
  return new HugeDiscountPage;
}

void HugeDiscountPage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HugeDiscountPage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(page_id_, cash_account_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscountPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.HugeDiscountPage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_id_)));
          set_has_page_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash_account;
        break;
      }

      // required uint32 cash_account = 2;
      case 2: {
        if (tag == 16) {
         parse_cash_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_account_)));
          set_has_cash_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        break;
      }

      // repeated .ActivityConfig.HugeDiscountGood goods = 3;
      case 3: {
        if (tag == 26) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_goods;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.HugeDiscountPage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.HugeDiscountPage)
  return false;
#undef DO_
}

void HugeDiscountPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.HugeDiscountPage)
  // required uint32 page_id = 1;
  if (has_page_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page_id(), output);
  }

  // required uint32 cash_account = 2;
  if (has_cash_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash_account(), output);
  }

  // repeated .ActivityConfig.HugeDiscountGood goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.HugeDiscountPage)
}

::google::protobuf::uint8* HugeDiscountPage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.HugeDiscountPage)
  // required uint32 page_id = 1;
  if (has_page_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page_id(), target);
  }

  // required uint32 cash_account = 2;
  if (has_cash_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash_account(), target);
  }

  // repeated .ActivityConfig.HugeDiscountGood goods = 3;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.HugeDiscountPage)
  return target;
}

int HugeDiscountPage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 page_id = 1;
    if (has_page_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page_id());
    }

    // required uint32 cash_account = 2;
    if (has_cash_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash_account());
    }

  }
  // repeated .ActivityConfig.HugeDiscountGood goods = 3;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscountPage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscountPage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscountPage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscountPage::MergeFrom(const HugeDiscountPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_id()) {
      set_page_id(from.page_id());
    }
    if (from.has_cash_account()) {
      set_cash_account(from.cash_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscountPage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscountPage::CopyFrom(const HugeDiscountPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscountPage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->goods())) return false;
  return true;
}

void HugeDiscountPage::Swap(HugeDiscountPage* other) {
  if (other != this) {
    std::swap(page_id_, other->page_id_);
    std::swap(cash_account_, other->cash_account_);
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscountPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscountPage_descriptor_;
  metadata.reflection = HugeDiscountPage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HugeDiscount::kHugeDiscountFieldNumber;
#endif  // !_MSC_VER

HugeDiscount::HugeDiscount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ActivityConfig.HugeDiscount)
}

void HugeDiscount::InitAsDefaultInstance() {
}

HugeDiscount::HugeDiscount(const HugeDiscount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ActivityConfig.HugeDiscount)
}

void HugeDiscount::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HugeDiscount::~HugeDiscount() {
  // @@protoc_insertion_point(destructor:ActivityConfig.HugeDiscount)
  SharedDtor();
}

void HugeDiscount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HugeDiscount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HugeDiscount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HugeDiscount_descriptor_;
}

const HugeDiscount& HugeDiscount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ActivityConfig_2eproto();
  return *default_instance_;
}

HugeDiscount* HugeDiscount::default_instance_ = NULL;

HugeDiscount* HugeDiscount::New() const {
  return new HugeDiscount;
}

void HugeDiscount::Clear() {
  huge_discount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HugeDiscount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ActivityConfig.HugeDiscount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivityConfig.HugeDiscountPage huge_discount = 1;
      case 1: {
        if (tag == 10) {
         parse_huge_discount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_huge_discount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_huge_discount;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ActivityConfig.HugeDiscount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ActivityConfig.HugeDiscount)
  return false;
#undef DO_
}

void HugeDiscount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ActivityConfig.HugeDiscount)
  // repeated .ActivityConfig.HugeDiscountPage huge_discount = 1;
  for (int i = 0; i < this->huge_discount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->huge_discount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ActivityConfig.HugeDiscount)
}

::google::protobuf::uint8* HugeDiscount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ActivityConfig.HugeDiscount)
  // repeated .ActivityConfig.HugeDiscountPage huge_discount = 1;
  for (int i = 0; i < this->huge_discount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->huge_discount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ActivityConfig.HugeDiscount)
  return target;
}

int HugeDiscount::ByteSize() const {
  int total_size = 0;

  // repeated .ActivityConfig.HugeDiscountPage huge_discount = 1;
  total_size += 1 * this->huge_discount_size();
  for (int i = 0; i < this->huge_discount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->huge_discount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HugeDiscount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HugeDiscount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HugeDiscount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HugeDiscount::MergeFrom(const HugeDiscount& from) {
  GOOGLE_CHECK_NE(&from, this);
  huge_discount_.MergeFrom(from.huge_discount_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HugeDiscount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HugeDiscount::CopyFrom(const HugeDiscount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HugeDiscount::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->huge_discount())) return false;
  return true;
}

void HugeDiscount::Swap(HugeDiscount* other) {
  if (other != this) {
    huge_discount_.Swap(&other->huge_discount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HugeDiscount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HugeDiscount_descriptor_;
  metadata.reflection = HugeDiscount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActivityConfig

// @@protoc_insertion_point(global_scope)
