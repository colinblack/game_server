// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RewardConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RewardConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RewardConfig {

namespace {

const ::google::protobuf::Descriptor* Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryTaskBaseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryTaskBaseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryTaskItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryTaskItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* FirstRechargeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstRechargeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* FirstRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* PkFieldReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PkFieldReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* PkField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PkField_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CumulationLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CumulationLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CumulationLoginReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CumulationLoginReward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RewardConfig_2eproto() {
  protobuf_AddDesc_RewardConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RewardConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Component_descriptor_ = file->message_type(0);
  static const int Component_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, slave1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, slave2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, slave3_),
  };
  Component_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Component_descriptor_,
      Component::default_instance_,
      Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Component));
  Reward_descriptor_ = file->message_type(1);
  static const int Reward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, component_),
  };
  Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reward_descriptor_,
      Reward::default_instance_,
      Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reward));
  CountryTaskBaseItem_descriptor_ = file->message_type(2);
  static const int CountryTaskBaseItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskBaseItem, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskBaseItem, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskBaseItem, kills_),
  };
  CountryTaskBaseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryTaskBaseItem_descriptor_,
      CountryTaskBaseItem::default_instance_,
      CountryTaskBaseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskBaseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskBaseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryTaskBaseItem));
  CountryTaskItem_descriptor_ = file->message_type(3);
  static const int CountryTaskItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskItem, reward_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskItem, reward_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskItem, reward_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskItem, base_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskItem, expand_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskItem, base_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskItem, tech_coefficient_),
  };
  CountryTaskItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryTaskItem_descriptor_,
      CountryTaskItem::default_instance_,
      CountryTaskItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTaskItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryTaskItem));
  CountryTask_descriptor_ = file->message_type(4);
  static const int CountryTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTask, country_task_),
  };
  CountryTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryTask_descriptor_,
      CountryTask::default_instance_,
      CountryTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryTask));
  FirstRechargeReward_descriptor_ = file->message_type(5);
  static const int FirstRechargeReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeReward, reward_),
  };
  FirstRechargeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstRechargeReward_descriptor_,
      FirstRechargeReward::default_instance_,
      FirstRechargeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRechargeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstRechargeReward));
  FirstRecharge_descriptor_ = file->message_type(6);
  static const int FirstRecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, first_recharge_),
  };
  FirstRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstRecharge_descriptor_,
      FirstRecharge::default_instance_,
      FirstRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstRecharge));
  IntegralReward_descriptor_ = file->message_type(7);
  static const int IntegralReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, prob_),
  };
  IntegralReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralReward_descriptor_,
      IntegralReward::default_instance_,
      IntegralReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralReward));
  IntegralTime_descriptor_ = file->message_type(8);
  static const int IntegralTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTime, integral_time_),
  };
  IntegralTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralTime_descriptor_,
      IntegralTime::default_instance_,
      IntegralTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralTime));
  PkFieldReward_descriptor_ = file->message_type(9);
  static const int PkFieldReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldReward, rank_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldReward, rank_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldReward, base_),
  };
  PkFieldReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PkFieldReward_descriptor_,
      PkFieldReward::default_instance_,
      PkFieldReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PkFieldReward));
  PkField_descriptor_ = file->message_type(10);
  static const int PkField_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkField, pk_field_),
  };
  PkField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PkField_descriptor_,
      PkField::default_instance_,
      PkField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PkField));
  DayReward_descriptor_ = file->message_type(11);
  static const int DayReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayReward, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayReward, reward_),
  };
  DayReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayReward_descriptor_,
      DayReward::default_instance_,
      DayReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayReward));
  CumulationLogin_descriptor_ = file->message_type(12);
  static const int CumulationLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationLogin, dayrewards_),
  };
  CumulationLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CumulationLogin_descriptor_,
      CumulationLogin::default_instance_,
      CumulationLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CumulationLogin));
  CumulationLoginReward_descriptor_ = file->message_type(13);
  static const int CumulationLoginReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationLoginReward, cumulation_login_),
  };
  CumulationLoginReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CumulationLoginReward_descriptor_,
      CumulationLoginReward::default_instance_,
      CumulationLoginReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationLoginReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationLoginReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CumulationLoginReward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RewardConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Component_descriptor_, &Component::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reward_descriptor_, &Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryTaskBaseItem_descriptor_, &CountryTaskBaseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryTaskItem_descriptor_, &CountryTaskItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryTask_descriptor_, &CountryTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstRechargeReward_descriptor_, &FirstRechargeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstRecharge_descriptor_, &FirstRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralReward_descriptor_, &IntegralReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralTime_descriptor_, &IntegralTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PkFieldReward_descriptor_, &PkFieldReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PkField_descriptor_, &PkField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayReward_descriptor_, &DayReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CumulationLogin_descriptor_, &CumulationLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CumulationLoginReward_descriptor_, &CumulationLoginReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RewardConfig_2eproto() {
  delete Component::default_instance_;
  delete Component_reflection_;
  delete Reward::default_instance_;
  delete Reward_reflection_;
  delete CountryTaskBaseItem::default_instance_;
  delete CountryTaskBaseItem_reflection_;
  delete CountryTaskItem::default_instance_;
  delete CountryTaskItem_reflection_;
  delete CountryTask::default_instance_;
  delete CountryTask_reflection_;
  delete FirstRechargeReward::default_instance_;
  delete FirstRechargeReward_reflection_;
  delete FirstRecharge::default_instance_;
  delete FirstRecharge_reflection_;
  delete IntegralReward::default_instance_;
  delete IntegralReward_reflection_;
  delete IntegralTime::default_instance_;
  delete IntegralTime_reflection_;
  delete PkFieldReward::default_instance_;
  delete PkFieldReward_reflection_;
  delete PkField::default_instance_;
  delete PkField_reflection_;
  delete DayReward::default_instance_;
  delete DayReward_reflection_;
  delete CumulationLogin::default_instance_;
  delete CumulationLogin_reflection_;
  delete CumulationLoginReward::default_instance_;
  delete CumulationLoginReward_reflection_;
}

void protobuf_AddDesc_RewardConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::VipGiftConfig::protobuf_AddDesc_VipGiftConfig_2eproto();
  ::CommonGiftConfig::protobuf_AddDesc_CommonGiftConfig_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RewardConfig.proto\022\014RewardConfig\032\023VipG"
    "iftConfig.proto\032\026CommonGiftConfig.proto\""
    "c\n\tComponent\022\n\n\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022"
    "\013\n\003exp\030\003 \002(\r\022\016\n\006slave1\030\004 \001(\r\022\016\n\006slave2\030\005"
    " \001(\r\022\016\n\006slave3\030\006 \001(\r\"\232\001\n\006Reward\022*\n\006equip"
    "s\030\001 \001(\0132\032.VipGiftConfig.EquipReward\022*\n\004b"
    "ase\030\002 \001(\0132\034.CommonGiftConfig.BaseReward\022"
    "\014\n\004hero\030\003 \001(\r\022*\n\tcomponent\030\004 \001(\0132\027.Rewar"
    "dConfig.Component\"]\n\023CountryTaskBaseItem"
    "\022\013\n\003day\030\001 \002(\r\022*\n\004base\030\002 \002(\0132\034.CommonGift"
    "Config.BaseReward\022\r\n\005kills\030\003 \003(\r\"\207\002\n\017Cou"
    "ntryTaskItem\022&\n\010reward_1\030\001 \003(\0132\024.RewardC"
    "onfig.Reward\022&\n\010reward_2\030\002 \003(\0132\024.RewardC"
    "onfig.Reward\022&\n\010reward_3\030\003 \003(\0132\024.RewardC"
    "onfig.Reward\022\023\n\013base_factor\030\004 \003(\002\022\025\n\rexp"
    "and_factor\030\005 \003(\002\0226\n\013base_reward\030\006 \003(\0132!."
    "RewardConfig.CountryTaskBaseItem\022\030\n\020tech"
    "_coefficient\030\007 \003(\r\"B\n\013CountryTask\0223\n\014cou"
    "ntry_task\030\001 \002(\0132\035.RewardConfig.CountryTa"
    "skItem\";\n\023FirstRechargeReward\022$\n\006reward\030"
    "\001 \003(\0132\024.RewardConfig.Reward\"J\n\rFirstRech"
    "arge\0229\n\016first_recharge\030\001 \002(\0132!.RewardCon"
    "fig.FirstRechargeReward\"J\n\016IntegralRewar"
    "d\022*\n\004base\030\001 \002(\0132\034.CommonGiftConfig.BaseR"
    "eward\022\014\n\004prob\030\002 \002(\r\"C\n\014IntegralTime\0223\n\ri"
    "ntegral_time\030\001 \003(\0132\034.RewardConfig.Integr"
    "alReward\"a\n\rPkFieldReward\022\022\n\nrank_start\030"
    "\001 \002(\r\022\020\n\010rank_end\030\002 \001(\r\022*\n\004base\030\003 \002(\0132\034."
    "CommonGiftConfig.BaseReward\"8\n\007PkField\022-"
    "\n\010pk_field\030\001 \003(\0132\033.RewardConfig.PkFieldR"
    "eward\">\n\tDayReward\022\013\n\003day\030\001 \002(\r\022$\n\006rewar"
    "d\030\002 \003(\0132\024.RewardConfig.Reward\">\n\017Cumulat"
    "ionLogin\022+\n\ndayrewards\030\001 \003(\0132\027.RewardCon"
    "fig.DayReward\"P\n\025CumulationLoginReward\0227"
    "\n\020cumulation_login\030\001 \002(\0132\035.RewardConfig."
    "CumulationLogin", 1415);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RewardConfig.proto", &protobuf_RegisterTypes);
  Component::default_instance_ = new Component();
  Reward::default_instance_ = new Reward();
  CountryTaskBaseItem::default_instance_ = new CountryTaskBaseItem();
  CountryTaskItem::default_instance_ = new CountryTaskItem();
  CountryTask::default_instance_ = new CountryTask();
  FirstRechargeReward::default_instance_ = new FirstRechargeReward();
  FirstRecharge::default_instance_ = new FirstRecharge();
  IntegralReward::default_instance_ = new IntegralReward();
  IntegralTime::default_instance_ = new IntegralTime();
  PkFieldReward::default_instance_ = new PkFieldReward();
  PkField::default_instance_ = new PkField();
  DayReward::default_instance_ = new DayReward();
  CumulationLogin::default_instance_ = new CumulationLogin();
  CumulationLoginReward::default_instance_ = new CumulationLoginReward();
  Component::default_instance_->InitAsDefaultInstance();
  Reward::default_instance_->InitAsDefaultInstance();
  CountryTaskBaseItem::default_instance_->InitAsDefaultInstance();
  CountryTaskItem::default_instance_->InitAsDefaultInstance();
  CountryTask::default_instance_->InitAsDefaultInstance();
  FirstRechargeReward::default_instance_->InitAsDefaultInstance();
  FirstRecharge::default_instance_->InitAsDefaultInstance();
  IntegralReward::default_instance_->InitAsDefaultInstance();
  IntegralTime::default_instance_->InitAsDefaultInstance();
  PkFieldReward::default_instance_->InitAsDefaultInstance();
  PkField::default_instance_->InitAsDefaultInstance();
  DayReward::default_instance_->InitAsDefaultInstance();
  CumulationLogin::default_instance_->InitAsDefaultInstance();
  CumulationLoginReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RewardConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RewardConfig_2eproto {
  StaticDescriptorInitializer_RewardConfig_2eproto() {
    protobuf_AddDesc_RewardConfig_2eproto();
  }
} static_descriptor_initializer_RewardConfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Component::kIdFieldNumber;
const int Component::kLevelFieldNumber;
const int Component::kExpFieldNumber;
const int Component::kSlave1FieldNumber;
const int Component::kSlave2FieldNumber;
const int Component::kSlave3FieldNumber;
#endif  // !_MSC_VER

Component::Component()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.Component)
}

void Component::InitAsDefaultInstance() {
}

Component::Component(const Component& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.Component)
}

void Component::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  slave1_ = 0u;
  slave2_ = 0u;
  slave3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:RewardConfig.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_descriptor_;
}

const Component& Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

Component* Component::default_instance_ = NULL;

Component* Component::New() const {
  return new Component;
}

void Component::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Component*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, slave3_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.Component)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required uint32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_slave1;
        break;
      }

      // optional uint32 slave1 = 4;
      case 4: {
        if (tag == 32) {
         parse_slave1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slave1_)));
          set_has_slave1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_slave2;
        break;
      }

      // optional uint32 slave2 = 5;
      case 5: {
        if (tag == 40) {
         parse_slave2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slave2_)));
          set_has_slave2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_slave3;
        break;
      }

      // optional uint32 slave3 = 6;
      case 6: {
        if (tag == 48) {
         parse_slave3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slave3_)));
          set_has_slave3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.Component)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.Component)
  return false;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.Component)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 slave1 = 4;
  if (has_slave1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slave1(), output);
  }

  // optional uint32 slave2 = 5;
  if (has_slave2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->slave2(), output);
  }

  // optional uint32 slave3 = 6;
  if (has_slave3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->slave3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.Component)
}

::google::protobuf::uint8* Component::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.Component)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 slave1 = 4;
  if (has_slave1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slave1(), target);
  }

  // optional uint32 slave2 = 5;
  if (has_slave2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->slave2(), target);
  }

  // optional uint32 slave3 = 6;
  if (has_slave3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->slave3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.Component)
  return target;
}

int Component::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 slave1 = 4;
    if (has_slave1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slave1());
    }

    // optional uint32 slave2 = 5;
    if (has_slave2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slave2());
    }

    // optional uint32 slave3 = 6;
    if (has_slave3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slave3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Component* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Component*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_slave1()) {
      set_slave1(from.slave1());
    }
    if (from.has_slave2()) {
      set_slave2(from.slave2());
    }
    if (from.has_slave3()) {
      set_slave3(from.slave3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Component::Swap(Component* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(slave1_, other->slave1_);
    std::swap(slave2_, other->slave2_);
    std::swap(slave3_, other->slave3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_descriptor_;
  metadata.reflection = Component_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reward::kEquipsFieldNumber;
const int Reward::kBaseFieldNumber;
const int Reward::kHeroFieldNumber;
const int Reward::kComponentFieldNumber;
#endif  // !_MSC_VER

Reward::Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.Reward)
}

void Reward::InitAsDefaultInstance() {
  equips_ = const_cast< ::VipGiftConfig::EquipReward*>(&::VipGiftConfig::EquipReward::default_instance());
  base_ = const_cast< ::CommonGiftConfig::BaseReward*>(&::CommonGiftConfig::BaseReward::default_instance());
  component_ = const_cast< ::RewardConfig::Component*>(&::RewardConfig::Component::default_instance());
}

Reward::Reward(const Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.Reward)
}

void Reward::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  hero_ = 0u;
  component_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reward::~Reward() {
  // @@protoc_insertion_point(destructor:RewardConfig.Reward)
  SharedDtor();
}

void Reward::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
    delete component_;
  }
}

void Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reward_descriptor_;
}

const Reward& Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

Reward* Reward::default_instance_ = NULL;

Reward* Reward::New() const {
  return new Reward;
}

void Reward::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_equips()) {
      if (equips_ != NULL) equips_->::VipGiftConfig::EquipReward::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
    }
    hero_ = 0u;
    if (has_component()) {
      if (component_ != NULL) component_->::RewardConfig::Component::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.Reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .VipGiftConfig.EquipReward equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .CommonGiftConfig.BaseReward base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero;
        break;
      }

      // optional uint32 hero = 3;
      case 3: {
        if (tag == 24) {
         parse_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_)));
          set_has_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_component;
        break;
      }

      // optional .RewardConfig.Component component = 4;
      case 4: {
        if (tag == 34) {
         parse_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_component()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.Reward)
  return false;
#undef DO_
}

void Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.Reward)
  // optional .VipGiftConfig.EquipReward equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // optional .CommonGiftConfig.BaseReward base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // optional uint32 hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero(), output);
  }

  // optional .RewardConfig.Component component = 4;
  if (has_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->component(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.Reward)
}

::google::protobuf::uint8* Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.Reward)
  // optional .VipGiftConfig.EquipReward equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // optional .CommonGiftConfig.BaseReward base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // optional uint32 hero = 3;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero(), target);
  }

  // optional .RewardConfig.Component component = 4;
  if (has_component()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->component(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.Reward)
  return target;
}

int Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .VipGiftConfig.EquipReward equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .CommonGiftConfig.BaseReward base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional uint32 hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero());
    }

    // optional .RewardConfig.Component component = 4;
    if (has_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->component());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reward::MergeFrom(const Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::VipGiftConfig::EquipReward::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::CommonGiftConfig::BaseReward::MergeFrom(from.base());
    }
    if (from.has_hero()) {
      set_hero(from.hero());
    }
    if (from.has_component()) {
      mutable_component()->::RewardConfig::Component::MergeFrom(from.component());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reward::CopyFrom(const Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_component()) {
    if (!this->component().IsInitialized()) return false;
  }
  return true;
}

void Reward::Swap(Reward* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(base_, other->base_);
    std::swap(hero_, other->hero_);
    std::swap(component_, other->component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reward_descriptor_;
  metadata.reflection = Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryTaskBaseItem::kDayFieldNumber;
const int CountryTaskBaseItem::kBaseFieldNumber;
const int CountryTaskBaseItem::kKillsFieldNumber;
#endif  // !_MSC_VER

CountryTaskBaseItem::CountryTaskBaseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.CountryTaskBaseItem)
}

void CountryTaskBaseItem::InitAsDefaultInstance() {
  base_ = const_cast< ::CommonGiftConfig::BaseReward*>(&::CommonGiftConfig::BaseReward::default_instance());
}

CountryTaskBaseItem::CountryTaskBaseItem(const CountryTaskBaseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.CountryTaskBaseItem)
}

void CountryTaskBaseItem::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryTaskBaseItem::~CountryTaskBaseItem() {
  // @@protoc_insertion_point(destructor:RewardConfig.CountryTaskBaseItem)
  SharedDtor();
}

void CountryTaskBaseItem::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void CountryTaskBaseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryTaskBaseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryTaskBaseItem_descriptor_;
}

const CountryTaskBaseItem& CountryTaskBaseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

CountryTaskBaseItem* CountryTaskBaseItem::default_instance_ = NULL;

CountryTaskBaseItem* CountryTaskBaseItem::New() const {
  return new CountryTaskBaseItem;
}

void CountryTaskBaseItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    day_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
    }
  }
  kills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryTaskBaseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.CountryTaskBaseItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // required .CommonGiftConfig.BaseReward base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kills;
        break;
      }

      // repeated uint32 kills = 3;
      case 3: {
        if (tag == 24) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_kills())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_kills())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kills;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.CountryTaskBaseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.CountryTaskBaseItem)
  return false;
#undef DO_
}

void CountryTaskBaseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.CountryTaskBaseItem)
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // required .CommonGiftConfig.BaseReward base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // repeated uint32 kills = 3;
  for (int i = 0; i < this->kills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->kills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.CountryTaskBaseItem)
}

::google::protobuf::uint8* CountryTaskBaseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.CountryTaskBaseItem)
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // required .CommonGiftConfig.BaseReward base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // repeated uint32 kills = 3;
  for (int i = 0; i < this->kills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->kills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.CountryTaskBaseItem)
  return target;
}

int CountryTaskBaseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required .CommonGiftConfig.BaseReward base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  // repeated uint32 kills = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->kills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->kills(i));
    }
    total_size += 1 * this->kills_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryTaskBaseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryTaskBaseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryTaskBaseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryTaskBaseItem::MergeFrom(const CountryTaskBaseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  kills_.MergeFrom(from.kills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_base()) {
      mutable_base()->::CommonGiftConfig::BaseReward::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryTaskBaseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryTaskBaseItem::CopyFrom(const CountryTaskBaseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryTaskBaseItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CountryTaskBaseItem::Swap(CountryTaskBaseItem* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(base_, other->base_);
    kills_.Swap(&other->kills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryTaskBaseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryTaskBaseItem_descriptor_;
  metadata.reflection = CountryTaskBaseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryTaskItem::kReward1FieldNumber;
const int CountryTaskItem::kReward2FieldNumber;
const int CountryTaskItem::kReward3FieldNumber;
const int CountryTaskItem::kBaseFactorFieldNumber;
const int CountryTaskItem::kExpandFactorFieldNumber;
const int CountryTaskItem::kBaseRewardFieldNumber;
const int CountryTaskItem::kTechCoefficientFieldNumber;
#endif  // !_MSC_VER

CountryTaskItem::CountryTaskItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.CountryTaskItem)
}

void CountryTaskItem::InitAsDefaultInstance() {
}

CountryTaskItem::CountryTaskItem(const CountryTaskItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.CountryTaskItem)
}

void CountryTaskItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryTaskItem::~CountryTaskItem() {
  // @@protoc_insertion_point(destructor:RewardConfig.CountryTaskItem)
  SharedDtor();
}

void CountryTaskItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryTaskItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryTaskItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryTaskItem_descriptor_;
}

const CountryTaskItem& CountryTaskItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

CountryTaskItem* CountryTaskItem::default_instance_ = NULL;

CountryTaskItem* CountryTaskItem::New() const {
  return new CountryTaskItem;
}

void CountryTaskItem::Clear() {
  reward_1_.Clear();
  reward_2_.Clear();
  reward_3_.Clear();
  base_factor_.Clear();
  expand_factor_.Clear();
  base_reward_.Clear();
  tech_coefficient_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryTaskItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.CountryTaskItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardConfig.Reward reward_1 = 1;
      case 1: {
        if (tag == 10) {
         parse_reward_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_reward_1;
        if (input->ExpectTag(18)) goto parse_reward_2;
        break;
      }

      // repeated .RewardConfig.Reward reward_2 = 2;
      case 2: {
        if (tag == 18) {
         parse_reward_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward_2;
        if (input->ExpectTag(26)) goto parse_reward_3;
        break;
      }

      // repeated .RewardConfig.Reward reward_3 = 3;
      case 3: {
        if (tag == 26) {
         parse_reward_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward_3;
        if (input->ExpectTag(37)) goto parse_base_factor;
        break;
      }

      // repeated float base_factor = 4;
      case 4: {
        if (tag == 37) {
         parse_base_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_base_factor())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_base_factor())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_base_factor;
        if (input->ExpectTag(45)) goto parse_expand_factor;
        break;
      }

      // repeated float expand_factor = 5;
      case 5: {
        if (tag == 45) {
         parse_expand_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_expand_factor())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_expand_factor())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_expand_factor;
        if (input->ExpectTag(50)) goto parse_base_reward;
        break;
      }

      // repeated .RewardConfig.CountryTaskBaseItem base_reward = 6;
      case 6: {
        if (tag == 50) {
         parse_base_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_base_reward;
        if (input->ExpectTag(56)) goto parse_tech_coefficient;
        break;
      }

      // repeated uint32 tech_coefficient = 7;
      case 7: {
        if (tag == 56) {
         parse_tech_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_tech_coefficient())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tech_coefficient())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tech_coefficient;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.CountryTaskItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.CountryTaskItem)
  return false;
#undef DO_
}

void CountryTaskItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.CountryTaskItem)
  // repeated .RewardConfig.Reward reward_1 = 1;
  for (int i = 0; i < this->reward_1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward_1(i), output);
  }

  // repeated .RewardConfig.Reward reward_2 = 2;
  for (int i = 0; i < this->reward_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward_2(i), output);
  }

  // repeated .RewardConfig.Reward reward_3 = 3;
  for (int i = 0; i < this->reward_3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward_3(i), output);
  }

  // repeated float base_factor = 4;
  for (int i = 0; i < this->base_factor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->base_factor(i), output);
  }

  // repeated float expand_factor = 5;
  for (int i = 0; i < this->expand_factor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->expand_factor(i), output);
  }

  // repeated .RewardConfig.CountryTaskBaseItem base_reward = 6;
  for (int i = 0; i < this->base_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->base_reward(i), output);
  }

  // repeated uint32 tech_coefficient = 7;
  for (int i = 0; i < this->tech_coefficient_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->tech_coefficient(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.CountryTaskItem)
}

::google::protobuf::uint8* CountryTaskItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.CountryTaskItem)
  // repeated .RewardConfig.Reward reward_1 = 1;
  for (int i = 0; i < this->reward_1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward_1(i), target);
  }

  // repeated .RewardConfig.Reward reward_2 = 2;
  for (int i = 0; i < this->reward_2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward_2(i), target);
  }

  // repeated .RewardConfig.Reward reward_3 = 3;
  for (int i = 0; i < this->reward_3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward_3(i), target);
  }

  // repeated float base_factor = 4;
  for (int i = 0; i < this->base_factor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->base_factor(i), target);
  }

  // repeated float expand_factor = 5;
  for (int i = 0; i < this->expand_factor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->expand_factor(i), target);
  }

  // repeated .RewardConfig.CountryTaskBaseItem base_reward = 6;
  for (int i = 0; i < this->base_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->base_reward(i), target);
  }

  // repeated uint32 tech_coefficient = 7;
  for (int i = 0; i < this->tech_coefficient_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->tech_coefficient(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.CountryTaskItem)
  return target;
}

int CountryTaskItem::ByteSize() const {
  int total_size = 0;

  // repeated .RewardConfig.Reward reward_1 = 1;
  total_size += 1 * this->reward_1_size();
  for (int i = 0; i < this->reward_1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_1(i));
  }

  // repeated .RewardConfig.Reward reward_2 = 2;
  total_size += 1 * this->reward_2_size();
  for (int i = 0; i < this->reward_2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_2(i));
  }

  // repeated .RewardConfig.Reward reward_3 = 3;
  total_size += 1 * this->reward_3_size();
  for (int i = 0; i < this->reward_3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_3(i));
  }

  // repeated float base_factor = 4;
  {
    int data_size = 0;
    data_size = 4 * this->base_factor_size();
    total_size += 1 * this->base_factor_size() + data_size;
  }

  // repeated float expand_factor = 5;
  {
    int data_size = 0;
    data_size = 4 * this->expand_factor_size();
    total_size += 1 * this->expand_factor_size() + data_size;
  }

  // repeated .RewardConfig.CountryTaskBaseItem base_reward = 6;
  total_size += 1 * this->base_reward_size();
  for (int i = 0; i < this->base_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base_reward(i));
  }

  // repeated uint32 tech_coefficient = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->tech_coefficient_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tech_coefficient(i));
    }
    total_size += 1 * this->tech_coefficient_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryTaskItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryTaskItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryTaskItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryTaskItem::MergeFrom(const CountryTaskItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_1_.MergeFrom(from.reward_1_);
  reward_2_.MergeFrom(from.reward_2_);
  reward_3_.MergeFrom(from.reward_3_);
  base_factor_.MergeFrom(from.base_factor_);
  expand_factor_.MergeFrom(from.expand_factor_);
  base_reward_.MergeFrom(from.base_reward_);
  tech_coefficient_.MergeFrom(from.tech_coefficient_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryTaskItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryTaskItem::CopyFrom(const CountryTaskItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryTaskItem::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->reward_1())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward_2())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->reward_3())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->base_reward())) return false;
  return true;
}

void CountryTaskItem::Swap(CountryTaskItem* other) {
  if (other != this) {
    reward_1_.Swap(&other->reward_1_);
    reward_2_.Swap(&other->reward_2_);
    reward_3_.Swap(&other->reward_3_);
    base_factor_.Swap(&other->base_factor_);
    expand_factor_.Swap(&other->expand_factor_);
    base_reward_.Swap(&other->base_reward_);
    tech_coefficient_.Swap(&other->tech_coefficient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryTaskItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryTaskItem_descriptor_;
  metadata.reflection = CountryTaskItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryTask::kCountryTaskFieldNumber;
#endif  // !_MSC_VER

CountryTask::CountryTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.CountryTask)
}

void CountryTask::InitAsDefaultInstance() {
  country_task_ = const_cast< ::RewardConfig::CountryTaskItem*>(&::RewardConfig::CountryTaskItem::default_instance());
}

CountryTask::CountryTask(const CountryTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.CountryTask)
}

void CountryTask::SharedCtor() {
  _cached_size_ = 0;
  country_task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryTask::~CountryTask() {
  // @@protoc_insertion_point(destructor:RewardConfig.CountryTask)
  SharedDtor();
}

void CountryTask::SharedDtor() {
  if (this != default_instance_) {
    delete country_task_;
  }
}

void CountryTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryTask_descriptor_;
}

const CountryTask& CountryTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

CountryTask* CountryTask::default_instance_ = NULL;

CountryTask* CountryTask::New() const {
  return new CountryTask;
}

void CountryTask::Clear() {
  if (has_country_task()) {
    if (country_task_ != NULL) country_task_->::RewardConfig::CountryTaskItem::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.CountryTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RewardConfig.CountryTaskItem country_task = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_country_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.CountryTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.CountryTask)
  return false;
#undef DO_
}

void CountryTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.CountryTask)
  // required .RewardConfig.CountryTaskItem country_task = 1;
  if (has_country_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->country_task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.CountryTask)
}

::google::protobuf::uint8* CountryTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.CountryTask)
  // required .RewardConfig.CountryTaskItem country_task = 1;
  if (has_country_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->country_task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.CountryTask)
  return target;
}

int CountryTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RewardConfig.CountryTaskItem country_task = 1;
    if (has_country_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->country_task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryTask::MergeFrom(const CountryTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country_task()) {
      mutable_country_task()->::RewardConfig::CountryTaskItem::MergeFrom(from.country_task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryTask::CopyFrom(const CountryTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_country_task()) {
    if (!this->country_task().IsInitialized()) return false;
  }
  return true;
}

void CountryTask::Swap(CountryTask* other) {
  if (other != this) {
    std::swap(country_task_, other->country_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryTask_descriptor_;
  metadata.reflection = CountryTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FirstRechargeReward::kRewardFieldNumber;
#endif  // !_MSC_VER

FirstRechargeReward::FirstRechargeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.FirstRechargeReward)
}

void FirstRechargeReward::InitAsDefaultInstance() {
}

FirstRechargeReward::FirstRechargeReward(const FirstRechargeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.FirstRechargeReward)
}

void FirstRechargeReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstRechargeReward::~FirstRechargeReward() {
  // @@protoc_insertion_point(destructor:RewardConfig.FirstRechargeReward)
  SharedDtor();
}

void FirstRechargeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FirstRechargeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstRechargeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstRechargeReward_descriptor_;
}

const FirstRechargeReward& FirstRechargeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

FirstRechargeReward* FirstRechargeReward::default_instance_ = NULL;

FirstRechargeReward* FirstRechargeReward::New() const {
  return new FirstRechargeReward;
}

void FirstRechargeReward::Clear() {
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstRechargeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.FirstRechargeReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardConfig.Reward reward = 1;
      case 1: {
        if (tag == 10) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.FirstRechargeReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.FirstRechargeReward)
  return false;
#undef DO_
}

void FirstRechargeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.FirstRechargeReward)
  // repeated .RewardConfig.Reward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.FirstRechargeReward)
}

::google::protobuf::uint8* FirstRechargeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.FirstRechargeReward)
  // repeated .RewardConfig.Reward reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.FirstRechargeReward)
  return target;
}

int FirstRechargeReward::ByteSize() const {
  int total_size = 0;

  // repeated .RewardConfig.Reward reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstRechargeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstRechargeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstRechargeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstRechargeReward::MergeFrom(const FirstRechargeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstRechargeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstRechargeReward::CopyFrom(const FirstRechargeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstRechargeReward::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void FirstRechargeReward::Swap(FirstRechargeReward* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstRechargeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstRechargeReward_descriptor_;
  metadata.reflection = FirstRechargeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FirstRecharge::kFirstRechargeFieldNumber;
#endif  // !_MSC_VER

FirstRecharge::FirstRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.FirstRecharge)
}

void FirstRecharge::InitAsDefaultInstance() {
  first_recharge_ = const_cast< ::RewardConfig::FirstRechargeReward*>(&::RewardConfig::FirstRechargeReward::default_instance());
}

FirstRecharge::FirstRecharge(const FirstRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.FirstRecharge)
}

void FirstRecharge::SharedCtor() {
  _cached_size_ = 0;
  first_recharge_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstRecharge::~FirstRecharge() {
  // @@protoc_insertion_point(destructor:RewardConfig.FirstRecharge)
  SharedDtor();
}

void FirstRecharge::SharedDtor() {
  if (this != default_instance_) {
    delete first_recharge_;
  }
}

void FirstRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstRecharge_descriptor_;
}

const FirstRecharge& FirstRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

FirstRecharge* FirstRecharge::default_instance_ = NULL;

FirstRecharge* FirstRecharge::New() const {
  return new FirstRecharge;
}

void FirstRecharge::Clear() {
  if (has_first_recharge()) {
    if (first_recharge_ != NULL) first_recharge_->::RewardConfig::FirstRechargeReward::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.FirstRecharge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RewardConfig.FirstRechargeReward first_recharge = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_recharge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.FirstRecharge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.FirstRecharge)
  return false;
#undef DO_
}

void FirstRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.FirstRecharge)
  // required .RewardConfig.FirstRechargeReward first_recharge = 1;
  if (has_first_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->first_recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.FirstRecharge)
}

::google::protobuf::uint8* FirstRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.FirstRecharge)
  // required .RewardConfig.FirstRechargeReward first_recharge = 1;
  if (has_first_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->first_recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.FirstRecharge)
  return target;
}

int FirstRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RewardConfig.FirstRechargeReward first_recharge = 1;
    if (has_first_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_recharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstRecharge::MergeFrom(const FirstRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_recharge()) {
      mutable_first_recharge()->::RewardConfig::FirstRechargeReward::MergeFrom(from.first_recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstRecharge::CopyFrom(const FirstRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_first_recharge()) {
    if (!this->first_recharge().IsInitialized()) return false;
  }
  return true;
}

void FirstRecharge::Swap(FirstRecharge* other) {
  if (other != this) {
    std::swap(first_recharge_, other->first_recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstRecharge_descriptor_;
  metadata.reflection = FirstRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralReward::kBaseFieldNumber;
const int IntegralReward::kProbFieldNumber;
#endif  // !_MSC_VER

IntegralReward::IntegralReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.IntegralReward)
}

void IntegralReward::InitAsDefaultInstance() {
  base_ = const_cast< ::CommonGiftConfig::BaseReward*>(&::CommonGiftConfig::BaseReward::default_instance());
}

IntegralReward::IntegralReward(const IntegralReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.IntegralReward)
}

void IntegralReward::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  prob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralReward::~IntegralReward() {
  // @@protoc_insertion_point(destructor:RewardConfig.IntegralReward)
  SharedDtor();
}

void IntegralReward::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void IntegralReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralReward_descriptor_;
}

const IntegralReward& IntegralReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

IntegralReward* IntegralReward::default_instance_ = NULL;

IntegralReward* IntegralReward::New() const {
  return new IntegralReward;
}

void IntegralReward::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_base()) {
      if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
    }
    prob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.IntegralReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CommonGiftConfig.BaseReward base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prob;
        break;
      }

      // required uint32 prob = 2;
      case 2: {
        if (tag == 16) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.IntegralReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.IntegralReward)
  return false;
#undef DO_
}

void IntegralReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.IntegralReward)
  // required .CommonGiftConfig.BaseReward base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // required uint32 prob = 2;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.IntegralReward)
}

::google::protobuf::uint8* IntegralReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.IntegralReward)
  // required .CommonGiftConfig.BaseReward base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // required uint32 prob = 2;
  if (has_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.IntegralReward)
  return target;
}

int IntegralReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CommonGiftConfig.BaseReward base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required uint32 prob = 2;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralReward::MergeFrom(const IntegralReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::CommonGiftConfig::BaseReward::MergeFrom(from.base());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralReward::CopyFrom(const IntegralReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IntegralReward::Swap(IntegralReward* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(prob_, other->prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralReward_descriptor_;
  metadata.reflection = IntegralReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralTime::kIntegralTimeFieldNumber;
#endif  // !_MSC_VER

IntegralTime::IntegralTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.IntegralTime)
}

void IntegralTime::InitAsDefaultInstance() {
}

IntegralTime::IntegralTime(const IntegralTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.IntegralTime)
}

void IntegralTime::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralTime::~IntegralTime() {
  // @@protoc_insertion_point(destructor:RewardConfig.IntegralTime)
  SharedDtor();
}

void IntegralTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegralTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralTime_descriptor_;
}

const IntegralTime& IntegralTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

IntegralTime* IntegralTime::default_instance_ = NULL;

IntegralTime* IntegralTime::New() const {
  return new IntegralTime;
}

void IntegralTime::Clear() {
  integral_time_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.IntegralTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardConfig.IntegralReward integral_time = 1;
      case 1: {
        if (tag == 10) {
         parse_integral_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_integral_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_integral_time;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.IntegralTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.IntegralTime)
  return false;
#undef DO_
}

void IntegralTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.IntegralTime)
  // repeated .RewardConfig.IntegralReward integral_time = 1;
  for (int i = 0; i < this->integral_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->integral_time(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.IntegralTime)
}

::google::protobuf::uint8* IntegralTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.IntegralTime)
  // repeated .RewardConfig.IntegralReward integral_time = 1;
  for (int i = 0; i < this->integral_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->integral_time(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.IntegralTime)
  return target;
}

int IntegralTime::ByteSize() const {
  int total_size = 0;

  // repeated .RewardConfig.IntegralReward integral_time = 1;
  total_size += 1 * this->integral_time_size();
  for (int i = 0; i < this->integral_time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->integral_time(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralTime::MergeFrom(const IntegralTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  integral_time_.MergeFrom(from.integral_time_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralTime::CopyFrom(const IntegralTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralTime::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->integral_time())) return false;
  return true;
}

void IntegralTime::Swap(IntegralTime* other) {
  if (other != this) {
    integral_time_.Swap(&other->integral_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralTime_descriptor_;
  metadata.reflection = IntegralTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PkFieldReward::kRankStartFieldNumber;
const int PkFieldReward::kRankEndFieldNumber;
const int PkFieldReward::kBaseFieldNumber;
#endif  // !_MSC_VER

PkFieldReward::PkFieldReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.PkFieldReward)
}

void PkFieldReward::InitAsDefaultInstance() {
  base_ = const_cast< ::CommonGiftConfig::BaseReward*>(&::CommonGiftConfig::BaseReward::default_instance());
}

PkFieldReward::PkFieldReward(const PkFieldReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.PkFieldReward)
}

void PkFieldReward::SharedCtor() {
  _cached_size_ = 0;
  rank_start_ = 0u;
  rank_end_ = 0u;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PkFieldReward::~PkFieldReward() {
  // @@protoc_insertion_point(destructor:RewardConfig.PkFieldReward)
  SharedDtor();
}

void PkFieldReward::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void PkFieldReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PkFieldReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkFieldReward_descriptor_;
}

const PkFieldReward& PkFieldReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

PkFieldReward* PkFieldReward::default_instance_ = NULL;

PkFieldReward* PkFieldReward::New() const {
  return new PkFieldReward;
}

void PkFieldReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PkFieldReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_start_, rank_end_);
    if (has_base()) {
      if (base_ != NULL) base_->::CommonGiftConfig::BaseReward::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PkFieldReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.PkFieldReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank_start = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_start_)));
          set_has_rank_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank_end;
        break;
      }

      // optional uint32 rank_end = 2;
      case 2: {
        if (tag == 16) {
         parse_rank_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_end_)));
          set_has_rank_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_base;
        break;
      }

      // required .CommonGiftConfig.BaseReward base = 3;
      case 3: {
        if (tag == 26) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.PkFieldReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.PkFieldReward)
  return false;
#undef DO_
}

void PkFieldReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.PkFieldReward)
  // required uint32 rank_start = 1;
  if (has_rank_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank_start(), output);
  }

  // optional uint32 rank_end = 2;
  if (has_rank_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank_end(), output);
  }

  // required .CommonGiftConfig.BaseReward base = 3;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.PkFieldReward)
}

::google::protobuf::uint8* PkFieldReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.PkFieldReward)
  // required uint32 rank_start = 1;
  if (has_rank_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank_start(), target);
  }

  // optional uint32 rank_end = 2;
  if (has_rank_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank_end(), target);
  }

  // required .CommonGiftConfig.BaseReward base = 3;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.PkFieldReward)
  return target;
}

int PkFieldReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank_start = 1;
    if (has_rank_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_start());
    }

    // optional uint32 rank_end = 2;
    if (has_rank_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_end());
    }

    // required .CommonGiftConfig.BaseReward base = 3;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PkFieldReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PkFieldReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PkFieldReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PkFieldReward::MergeFrom(const PkFieldReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_start()) {
      set_rank_start(from.rank_start());
    }
    if (from.has_rank_end()) {
      set_rank_end(from.rank_end());
    }
    if (from.has_base()) {
      mutable_base()->::CommonGiftConfig::BaseReward::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PkFieldReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkFieldReward::CopyFrom(const PkFieldReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkFieldReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void PkFieldReward::Swap(PkFieldReward* other) {
  if (other != this) {
    std::swap(rank_start_, other->rank_start_);
    std::swap(rank_end_, other->rank_end_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PkFieldReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PkFieldReward_descriptor_;
  metadata.reflection = PkFieldReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PkField::kPkFieldFieldNumber;
#endif  // !_MSC_VER

PkField::PkField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.PkField)
}

void PkField::InitAsDefaultInstance() {
}

PkField::PkField(const PkField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.PkField)
}

void PkField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PkField::~PkField() {
  // @@protoc_insertion_point(destructor:RewardConfig.PkField)
  SharedDtor();
}

void PkField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PkField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PkField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkField_descriptor_;
}

const PkField& PkField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

PkField* PkField::default_instance_ = NULL;

PkField* PkField::New() const {
  return new PkField;
}

void PkField::Clear() {
  pk_field_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PkField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.PkField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardConfig.PkFieldReward pk_field = 1;
      case 1: {
        if (tag == 10) {
         parse_pk_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pk_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pk_field;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.PkField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.PkField)
  return false;
#undef DO_
}

void PkField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.PkField)
  // repeated .RewardConfig.PkFieldReward pk_field = 1;
  for (int i = 0; i < this->pk_field_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pk_field(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.PkField)
}

::google::protobuf::uint8* PkField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.PkField)
  // repeated .RewardConfig.PkFieldReward pk_field = 1;
  for (int i = 0; i < this->pk_field_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pk_field(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.PkField)
  return target;
}

int PkField::ByteSize() const {
  int total_size = 0;

  // repeated .RewardConfig.PkFieldReward pk_field = 1;
  total_size += 1 * this->pk_field_size();
  for (int i = 0; i < this->pk_field_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pk_field(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PkField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PkField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PkField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PkField::MergeFrom(const PkField& from) {
  GOOGLE_CHECK_NE(&from, this);
  pk_field_.MergeFrom(from.pk_field_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PkField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkField::CopyFrom(const PkField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkField::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pk_field())) return false;
  return true;
}

void PkField::Swap(PkField* other) {
  if (other != this) {
    pk_field_.Swap(&other->pk_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PkField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PkField_descriptor_;
  metadata.reflection = PkField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayReward::kDayFieldNumber;
const int DayReward::kRewardFieldNumber;
#endif  // !_MSC_VER

DayReward::DayReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.DayReward)
}

void DayReward::InitAsDefaultInstance() {
}

DayReward::DayReward(const DayReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.DayReward)
}

void DayReward::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayReward::~DayReward() {
  // @@protoc_insertion_point(destructor:RewardConfig.DayReward)
  SharedDtor();
}

void DayReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayReward_descriptor_;
}

const DayReward& DayReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

DayReward* DayReward::default_instance_ = NULL;

DayReward* DayReward::New() const {
  return new DayReward;
}

void DayReward::Clear() {
  day_ = 0u;
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.DayReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .RewardConfig.Reward reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.DayReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.DayReward)
  return false;
#undef DO_
}

void DayReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.DayReward)
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // repeated .RewardConfig.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.DayReward)
}

::google::protobuf::uint8* DayReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.DayReward)
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // repeated .RewardConfig.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.DayReward)
  return target;
}

int DayReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  // repeated .RewardConfig.Reward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayReward::MergeFrom(const DayReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayReward::CopyFrom(const DayReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void DayReward::Swap(DayReward* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayReward_descriptor_;
  metadata.reflection = DayReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CumulationLogin::kDayrewardsFieldNumber;
#endif  // !_MSC_VER

CumulationLogin::CumulationLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.CumulationLogin)
}

void CumulationLogin::InitAsDefaultInstance() {
}

CumulationLogin::CumulationLogin(const CumulationLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.CumulationLogin)
}

void CumulationLogin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CumulationLogin::~CumulationLogin() {
  // @@protoc_insertion_point(destructor:RewardConfig.CumulationLogin)
  SharedDtor();
}

void CumulationLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CumulationLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CumulationLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CumulationLogin_descriptor_;
}

const CumulationLogin& CumulationLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

CumulationLogin* CumulationLogin::default_instance_ = NULL;

CumulationLogin* CumulationLogin::New() const {
  return new CumulationLogin;
}

void CumulationLogin::Clear() {
  dayrewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CumulationLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.CumulationLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RewardConfig.DayReward dayrewards = 1;
      case 1: {
        if (tag == 10) {
         parse_dayrewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dayrewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dayrewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.CumulationLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.CumulationLogin)
  return false;
#undef DO_
}

void CumulationLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.CumulationLogin)
  // repeated .RewardConfig.DayReward dayrewards = 1;
  for (int i = 0; i < this->dayrewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dayrewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.CumulationLogin)
}

::google::protobuf::uint8* CumulationLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.CumulationLogin)
  // repeated .RewardConfig.DayReward dayrewards = 1;
  for (int i = 0; i < this->dayrewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dayrewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.CumulationLogin)
  return target;
}

int CumulationLogin::ByteSize() const {
  int total_size = 0;

  // repeated .RewardConfig.DayReward dayrewards = 1;
  total_size += 1 * this->dayrewards_size();
  for (int i = 0; i < this->dayrewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dayrewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CumulationLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CumulationLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CumulationLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CumulationLogin::MergeFrom(const CumulationLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  dayrewards_.MergeFrom(from.dayrewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CumulationLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CumulationLogin::CopyFrom(const CumulationLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CumulationLogin::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->dayrewards())) return false;
  return true;
}

void CumulationLogin::Swap(CumulationLogin* other) {
  if (other != this) {
    dayrewards_.Swap(&other->dayrewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CumulationLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CumulationLogin_descriptor_;
  metadata.reflection = CumulationLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CumulationLoginReward::kCumulationLoginFieldNumber;
#endif  // !_MSC_VER

CumulationLoginReward::CumulationLoginReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RewardConfig.CumulationLoginReward)
}

void CumulationLoginReward::InitAsDefaultInstance() {
  cumulation_login_ = const_cast< ::RewardConfig::CumulationLogin*>(&::RewardConfig::CumulationLogin::default_instance());
}

CumulationLoginReward::CumulationLoginReward(const CumulationLoginReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RewardConfig.CumulationLoginReward)
}

void CumulationLoginReward::SharedCtor() {
  _cached_size_ = 0;
  cumulation_login_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CumulationLoginReward::~CumulationLoginReward() {
  // @@protoc_insertion_point(destructor:RewardConfig.CumulationLoginReward)
  SharedDtor();
}

void CumulationLoginReward::SharedDtor() {
  if (this != default_instance_) {
    delete cumulation_login_;
  }
}

void CumulationLoginReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CumulationLoginReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CumulationLoginReward_descriptor_;
}

const CumulationLoginReward& CumulationLoginReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardConfig_2eproto();
  return *default_instance_;
}

CumulationLoginReward* CumulationLoginReward::default_instance_ = NULL;

CumulationLoginReward* CumulationLoginReward::New() const {
  return new CumulationLoginReward;
}

void CumulationLoginReward::Clear() {
  if (has_cumulation_login()) {
    if (cumulation_login_ != NULL) cumulation_login_->::RewardConfig::CumulationLogin::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CumulationLoginReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RewardConfig.CumulationLoginReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RewardConfig.CumulationLogin cumulation_login = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cumulation_login()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RewardConfig.CumulationLoginReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RewardConfig.CumulationLoginReward)
  return false;
#undef DO_
}

void CumulationLoginReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RewardConfig.CumulationLoginReward)
  // required .RewardConfig.CumulationLogin cumulation_login = 1;
  if (has_cumulation_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cumulation_login(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RewardConfig.CumulationLoginReward)
}

::google::protobuf::uint8* CumulationLoginReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RewardConfig.CumulationLoginReward)
  // required .RewardConfig.CumulationLogin cumulation_login = 1;
  if (has_cumulation_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cumulation_login(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RewardConfig.CumulationLoginReward)
  return target;
}

int CumulationLoginReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RewardConfig.CumulationLogin cumulation_login = 1;
    if (has_cumulation_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cumulation_login());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CumulationLoginReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CumulationLoginReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CumulationLoginReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CumulationLoginReward::MergeFrom(const CumulationLoginReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cumulation_login()) {
      mutable_cumulation_login()->::RewardConfig::CumulationLogin::MergeFrom(from.cumulation_login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CumulationLoginReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CumulationLoginReward::CopyFrom(const CumulationLoginReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CumulationLoginReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cumulation_login()) {
    if (!this->cumulation_login().IsInitialized()) return false;
  }
  return true;
}

void CumulationLoginReward::Swap(CumulationLoginReward* other) {
  if (other != this) {
    std::swap(cumulation_login_, other->cumulation_login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CumulationLoginReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CumulationLoginReward_descriptor_;
  metadata.reflection = CumulationLoginReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RewardConfig

// @@protoc_insertion_point(global_scope)
