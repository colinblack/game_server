// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoAttackHarbor.proto

#ifndef PROTOBUF_ProtoAttackHarbor_2eproto__INCLUDED
#define PROTOBUF_ProtoAttackHarbor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoAttackHarbor {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoAttackHarbor_2eproto();
void protobuf_AssignDesc_ProtoAttackHarbor_2eproto();
void protobuf_ShutdownFile_ProtoAttackHarbor_2eproto();

class CountryRankCPP;
class CountryRankCPPAll;
class OpenAttackWindowReq;
class OpenAttackWindowResp;
class RecieveCountryRewardReq;
class RecieveCountryRewardResp;

// ===================================================================

class CountryRankCPP : public ::google::protobuf::Message {
 public:
  CountryRankCPP();
  virtual ~CountryRankCPP();

  CountryRankCPP(const CountryRankCPP& from);

  inline CountryRankCPP& operator=(const CountryRankCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryRankCPP& default_instance();

  void Swap(CountryRankCPP* other);

  // implements Message ----------------------------------------------

  CountryRankCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryRankCPP& from);
  void MergeFrom(const CountryRankCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 kingdom = 1;
  inline bool has_kingdom() const;
  inline void clear_kingdom();
  static const int kKingdomFieldNumber = 1;
  inline ::google::protobuf::uint32 kingdom() const;
  inline void set_kingdom(::google::protobuf::uint32 value);

  // required uint32 wreckage = 2;
  inline bool has_wreckage() const;
  inline void clear_wreckage();
  static const int kWreckageFieldNumber = 2;
  inline ::google::protobuf::uint32 wreckage() const;
  inline void set_wreckage(::google::protobuf::uint32 value);

  // required uint32 trump_uid = 3;
  inline bool has_trump_uid() const;
  inline void clear_trump_uid();
  static const int kTrumpUidFieldNumber = 3;
  inline ::google::protobuf::uint32 trump_uid() const;
  inline void set_trump_uid(::google::protobuf::uint32 value);

  // required bytes trump_name = 4;
  inline bool has_trump_name() const;
  inline void clear_trump_name();
  static const int kTrumpNameFieldNumber = 4;
  inline const ::std::string& trump_name() const;
  inline void set_trump_name(const ::std::string& value);
  inline void set_trump_name(const char* value);
  inline void set_trump_name(const void* value, size_t size);
  inline ::std::string* mutable_trump_name();
  inline ::std::string* release_trump_name();
  inline void set_allocated_trump_name(::std::string* trump_name);

  // required uint32 trump_wreckage = 5;
  inline bool has_trump_wreckage() const;
  inline void clear_trump_wreckage();
  static const int kTrumpWreckageFieldNumber = 5;
  inline ::google::protobuf::uint32 trump_wreckage() const;
  inline void set_trump_wreckage(::google::protobuf::uint32 value);

  // required uint32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoAttackHarbor.CountryRankCPP)
 private:
  inline void set_has_kingdom();
  inline void clear_has_kingdom();
  inline void set_has_wreckage();
  inline void clear_has_wreckage();
  inline void set_has_trump_uid();
  inline void clear_has_trump_uid();
  inline void set_has_trump_name();
  inline void clear_has_trump_name();
  inline void set_has_trump_wreckage();
  inline void clear_has_trump_wreckage();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 kingdom_;
  ::google::protobuf::uint32 wreckage_;
  ::std::string* trump_name_;
  ::google::protobuf::uint32 trump_uid_;
  ::google::protobuf::uint32 trump_wreckage_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_AssignDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_ShutdownFile_ProtoAttackHarbor_2eproto();

  void InitAsDefaultInstance();
  static CountryRankCPP* default_instance_;
};
// -------------------------------------------------------------------

class CountryRankCPPAll : public ::google::protobuf::Message {
 public:
  CountryRankCPPAll();
  virtual ~CountryRankCPPAll();

  CountryRankCPPAll(const CountryRankCPPAll& from);

  inline CountryRankCPPAll& operator=(const CountryRankCPPAll& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryRankCPPAll& default_instance();

  void Swap(CountryRankCPPAll* other);

  // implements Message ----------------------------------------------

  CountryRankCPPAll* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryRankCPPAll& from);
  void MergeFrom(const CountryRankCPPAll& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoAttackHarbor.CountryRankCPP countryrank = 1;
  inline int countryrank_size() const;
  inline void clear_countryrank();
  static const int kCountryrankFieldNumber = 1;
  inline const ::ProtoAttackHarbor::CountryRankCPP& countryrank(int index) const;
  inline ::ProtoAttackHarbor::CountryRankCPP* mutable_countryrank(int index);
  inline ::ProtoAttackHarbor::CountryRankCPP* add_countryrank();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoAttackHarbor::CountryRankCPP >&
      countryrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoAttackHarbor::CountryRankCPP >*
      mutable_countryrank();

  // @@protoc_insertion_point(class_scope:ProtoAttackHarbor.CountryRankCPPAll)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoAttackHarbor::CountryRankCPP > countryrank_;
  friend void  protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_AssignDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_ShutdownFile_ProtoAttackHarbor_2eproto();

  void InitAsDefaultInstance();
  static CountryRankCPPAll* default_instance_;
};
// -------------------------------------------------------------------

class OpenAttackWindowReq : public ::google::protobuf::Message {
 public:
  OpenAttackWindowReq();
  virtual ~OpenAttackWindowReq();

  OpenAttackWindowReq(const OpenAttackWindowReq& from);

  inline OpenAttackWindowReq& operator=(const OpenAttackWindowReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenAttackWindowReq& default_instance();

  void Swap(OpenAttackWindowReq* other);

  // implements Message ----------------------------------------------

  OpenAttackWindowReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenAttackWindowReq& from);
  void MergeFrom(const OpenAttackWindowReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoAttackHarbor.OpenAttackWindowReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_AssignDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_ShutdownFile_ProtoAttackHarbor_2eproto();

  void InitAsDefaultInstance();
  static OpenAttackWindowReq* default_instance_;
};
// -------------------------------------------------------------------

class OpenAttackWindowResp : public ::google::protobuf::Message {
 public:
  OpenAttackWindowResp();
  virtual ~OpenAttackWindowResp();

  OpenAttackWindowResp(const OpenAttackWindowResp& from);

  inline OpenAttackWindowResp& operator=(const OpenAttackWindowResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenAttackWindowResp& default_instance();

  void Swap(OpenAttackWindowResp* other);

  // implements Message ----------------------------------------------

  OpenAttackWindowResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenAttackWindowResp& from);
  void MergeFrom(const OpenAttackWindowResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoAttackHarbor.CountryRankCPPAll countryranks = 1;
  inline bool has_countryranks() const;
  inline void clear_countryranks();
  static const int kCountryranksFieldNumber = 1;
  inline const ::ProtoAttackHarbor::CountryRankCPPAll& countryranks() const;
  inline ::ProtoAttackHarbor::CountryRankCPPAll* mutable_countryranks();
  inline ::ProtoAttackHarbor::CountryRankCPPAll* release_countryranks();
  inline void set_allocated_countryranks(::ProtoAttackHarbor::CountryRankCPPAll* countryranks);

  // required uint32 reward_status = 2;
  inline bool has_reward_status() const;
  inline void clear_reward_status();
  static const int kRewardStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 reward_status() const;
  inline void set_reward_status(::google::protobuf::uint32 value);

  // required uint32 wreckage = 3;
  inline bool has_wreckage() const;
  inline void clear_wreckage();
  static const int kWreckageFieldNumber = 3;
  inline ::google::protobuf::uint32 wreckage() const;
  inline void set_wreckage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoAttackHarbor.OpenAttackWindowResp)
 private:
  inline void set_has_countryranks();
  inline void clear_has_countryranks();
  inline void set_has_reward_status();
  inline void clear_has_reward_status();
  inline void set_has_wreckage();
  inline void clear_has_wreckage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoAttackHarbor::CountryRankCPPAll* countryranks_;
  ::google::protobuf::uint32 reward_status_;
  ::google::protobuf::uint32 wreckage_;
  friend void  protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_AssignDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_ShutdownFile_ProtoAttackHarbor_2eproto();

  void InitAsDefaultInstance();
  static OpenAttackWindowResp* default_instance_;
};
// -------------------------------------------------------------------

class RecieveCountryRewardReq : public ::google::protobuf::Message {
 public:
  RecieveCountryRewardReq();
  virtual ~RecieveCountryRewardReq();

  RecieveCountryRewardReq(const RecieveCountryRewardReq& from);

  inline RecieveCountryRewardReq& operator=(const RecieveCountryRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecieveCountryRewardReq& default_instance();

  void Swap(RecieveCountryRewardReq* other);

  // implements Message ----------------------------------------------

  RecieveCountryRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecieveCountryRewardReq& from);
  void MergeFrom(const RecieveCountryRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoAttackHarbor.RecieveCountryRewardReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_AssignDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_ShutdownFile_ProtoAttackHarbor_2eproto();

  void InitAsDefaultInstance();
  static RecieveCountryRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class RecieveCountryRewardResp : public ::google::protobuf::Message {
 public:
  RecieveCountryRewardResp();
  virtual ~RecieveCountryRewardResp();

  RecieveCountryRewardResp(const RecieveCountryRewardResp& from);

  inline RecieveCountryRewardResp& operator=(const RecieveCountryRewardResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecieveCountryRewardResp& default_instance();

  void Swap(RecieveCountryRewardResp* other);

  // implements Message ----------------------------------------------

  RecieveCountryRewardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecieveCountryRewardResp& from);
  void MergeFrom(const RecieveCountryRewardResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .User.RewardBagInfo reward = 1;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  inline const ::User::RewardBagInfo& reward() const;
  inline ::User::RewardBagInfo* mutable_reward();
  inline ::User::RewardBagInfo* release_reward();
  inline void set_allocated_reward(::User::RewardBagInfo* reward);

  // required uint32 reward_status = 2;
  inline bool has_reward_status() const;
  inline void clear_reward_status();
  static const int kRewardStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 reward_status() const;
  inline void set_reward_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoAttackHarbor.RecieveCountryRewardResp)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_reward_status();
  inline void clear_has_reward_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::User::RewardBagInfo* reward_;
  ::google::protobuf::uint32 reward_status_;
  friend void  protobuf_AddDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_AssignDesc_ProtoAttackHarbor_2eproto();
  friend void protobuf_ShutdownFile_ProtoAttackHarbor_2eproto();

  void InitAsDefaultInstance();
  static RecieveCountryRewardResp* default_instance_;
};
// ===================================================================


// ===================================================================

// CountryRankCPP

// required uint32 kingdom = 1;
inline bool CountryRankCPP::has_kingdom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryRankCPP::set_has_kingdom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryRankCPP::clear_has_kingdom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryRankCPP::clear_kingdom() {
  kingdom_ = 0u;
  clear_has_kingdom();
}
inline ::google::protobuf::uint32 CountryRankCPP::kingdom() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.CountryRankCPP.kingdom)
  return kingdom_;
}
inline void CountryRankCPP::set_kingdom(::google::protobuf::uint32 value) {
  set_has_kingdom();
  kingdom_ = value;
  // @@protoc_insertion_point(field_set:ProtoAttackHarbor.CountryRankCPP.kingdom)
}

// required uint32 wreckage = 2;
inline bool CountryRankCPP::has_wreckage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryRankCPP::set_has_wreckage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryRankCPP::clear_has_wreckage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryRankCPP::clear_wreckage() {
  wreckage_ = 0u;
  clear_has_wreckage();
}
inline ::google::protobuf::uint32 CountryRankCPP::wreckage() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.CountryRankCPP.wreckage)
  return wreckage_;
}
inline void CountryRankCPP::set_wreckage(::google::protobuf::uint32 value) {
  set_has_wreckage();
  wreckage_ = value;
  // @@protoc_insertion_point(field_set:ProtoAttackHarbor.CountryRankCPP.wreckage)
}

// required uint32 trump_uid = 3;
inline bool CountryRankCPP::has_trump_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryRankCPP::set_has_trump_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryRankCPP::clear_has_trump_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryRankCPP::clear_trump_uid() {
  trump_uid_ = 0u;
  clear_has_trump_uid();
}
inline ::google::protobuf::uint32 CountryRankCPP::trump_uid() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.CountryRankCPP.trump_uid)
  return trump_uid_;
}
inline void CountryRankCPP::set_trump_uid(::google::protobuf::uint32 value) {
  set_has_trump_uid();
  trump_uid_ = value;
  // @@protoc_insertion_point(field_set:ProtoAttackHarbor.CountryRankCPP.trump_uid)
}

// required bytes trump_name = 4;
inline bool CountryRankCPP::has_trump_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountryRankCPP::set_has_trump_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountryRankCPP::clear_has_trump_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountryRankCPP::clear_trump_name() {
  if (trump_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trump_name_->clear();
  }
  clear_has_trump_name();
}
inline const ::std::string& CountryRankCPP::trump_name() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.CountryRankCPP.trump_name)
  return *trump_name_;
}
inline void CountryRankCPP::set_trump_name(const ::std::string& value) {
  set_has_trump_name();
  if (trump_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trump_name_ = new ::std::string;
  }
  trump_name_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoAttackHarbor.CountryRankCPP.trump_name)
}
inline void CountryRankCPP::set_trump_name(const char* value) {
  set_has_trump_name();
  if (trump_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trump_name_ = new ::std::string;
  }
  trump_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoAttackHarbor.CountryRankCPP.trump_name)
}
inline void CountryRankCPP::set_trump_name(const void* value, size_t size) {
  set_has_trump_name();
  if (trump_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trump_name_ = new ::std::string;
  }
  trump_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoAttackHarbor.CountryRankCPP.trump_name)
}
inline ::std::string* CountryRankCPP::mutable_trump_name() {
  set_has_trump_name();
  if (trump_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trump_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoAttackHarbor.CountryRankCPP.trump_name)
  return trump_name_;
}
inline ::std::string* CountryRankCPP::release_trump_name() {
  clear_has_trump_name();
  if (trump_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = trump_name_;
    trump_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CountryRankCPP::set_allocated_trump_name(::std::string* trump_name) {
  if (trump_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trump_name_;
  }
  if (trump_name) {
    set_has_trump_name();
    trump_name_ = trump_name;
  } else {
    clear_has_trump_name();
    trump_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoAttackHarbor.CountryRankCPP.trump_name)
}

// required uint32 trump_wreckage = 5;
inline bool CountryRankCPP::has_trump_wreckage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CountryRankCPP::set_has_trump_wreckage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CountryRankCPP::clear_has_trump_wreckage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CountryRankCPP::clear_trump_wreckage() {
  trump_wreckage_ = 0u;
  clear_has_trump_wreckage();
}
inline ::google::protobuf::uint32 CountryRankCPP::trump_wreckage() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.CountryRankCPP.trump_wreckage)
  return trump_wreckage_;
}
inline void CountryRankCPP::set_trump_wreckage(::google::protobuf::uint32 value) {
  set_has_trump_wreckage();
  trump_wreckage_ = value;
  // @@protoc_insertion_point(field_set:ProtoAttackHarbor.CountryRankCPP.trump_wreckage)
}

// required uint32 rank = 6;
inline bool CountryRankCPP::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CountryRankCPP::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CountryRankCPP::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CountryRankCPP::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 CountryRankCPP::rank() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.CountryRankCPP.rank)
  return rank_;
}
inline void CountryRankCPP::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:ProtoAttackHarbor.CountryRankCPP.rank)
}

// -------------------------------------------------------------------

// CountryRankCPPAll

// repeated .ProtoAttackHarbor.CountryRankCPP countryrank = 1;
inline int CountryRankCPPAll::countryrank_size() const {
  return countryrank_.size();
}
inline void CountryRankCPPAll::clear_countryrank() {
  countryrank_.Clear();
}
inline const ::ProtoAttackHarbor::CountryRankCPP& CountryRankCPPAll::countryrank(int index) const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.CountryRankCPPAll.countryrank)
  return countryrank_.Get(index);
}
inline ::ProtoAttackHarbor::CountryRankCPP* CountryRankCPPAll::mutable_countryrank(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoAttackHarbor.CountryRankCPPAll.countryrank)
  return countryrank_.Mutable(index);
}
inline ::ProtoAttackHarbor::CountryRankCPP* CountryRankCPPAll::add_countryrank() {
  // @@protoc_insertion_point(field_add:ProtoAttackHarbor.CountryRankCPPAll.countryrank)
  return countryrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoAttackHarbor::CountryRankCPP >&
CountryRankCPPAll::countryrank() const {
  // @@protoc_insertion_point(field_list:ProtoAttackHarbor.CountryRankCPPAll.countryrank)
  return countryrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoAttackHarbor::CountryRankCPP >*
CountryRankCPPAll::mutable_countryrank() {
  // @@protoc_insertion_point(field_mutable_list:ProtoAttackHarbor.CountryRankCPPAll.countryrank)
  return &countryrank_;
}

// -------------------------------------------------------------------

// OpenAttackWindowReq

// -------------------------------------------------------------------

// OpenAttackWindowResp

// required .ProtoAttackHarbor.CountryRankCPPAll countryranks = 1;
inline bool OpenAttackWindowResp::has_countryranks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenAttackWindowResp::set_has_countryranks() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenAttackWindowResp::clear_has_countryranks() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenAttackWindowResp::clear_countryranks() {
  if (countryranks_ != NULL) countryranks_->::ProtoAttackHarbor::CountryRankCPPAll::Clear();
  clear_has_countryranks();
}
inline const ::ProtoAttackHarbor::CountryRankCPPAll& OpenAttackWindowResp::countryranks() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.OpenAttackWindowResp.countryranks)
  return countryranks_ != NULL ? *countryranks_ : *default_instance_->countryranks_;
}
inline ::ProtoAttackHarbor::CountryRankCPPAll* OpenAttackWindowResp::mutable_countryranks() {
  set_has_countryranks();
  if (countryranks_ == NULL) countryranks_ = new ::ProtoAttackHarbor::CountryRankCPPAll;
  // @@protoc_insertion_point(field_mutable:ProtoAttackHarbor.OpenAttackWindowResp.countryranks)
  return countryranks_;
}
inline ::ProtoAttackHarbor::CountryRankCPPAll* OpenAttackWindowResp::release_countryranks() {
  clear_has_countryranks();
  ::ProtoAttackHarbor::CountryRankCPPAll* temp = countryranks_;
  countryranks_ = NULL;
  return temp;
}
inline void OpenAttackWindowResp::set_allocated_countryranks(::ProtoAttackHarbor::CountryRankCPPAll* countryranks) {
  delete countryranks_;
  countryranks_ = countryranks;
  if (countryranks) {
    set_has_countryranks();
  } else {
    clear_has_countryranks();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoAttackHarbor.OpenAttackWindowResp.countryranks)
}

// required uint32 reward_status = 2;
inline bool OpenAttackWindowResp::has_reward_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenAttackWindowResp::set_has_reward_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenAttackWindowResp::clear_has_reward_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenAttackWindowResp::clear_reward_status() {
  reward_status_ = 0u;
  clear_has_reward_status();
}
inline ::google::protobuf::uint32 OpenAttackWindowResp::reward_status() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.OpenAttackWindowResp.reward_status)
  return reward_status_;
}
inline void OpenAttackWindowResp::set_reward_status(::google::protobuf::uint32 value) {
  set_has_reward_status();
  reward_status_ = value;
  // @@protoc_insertion_point(field_set:ProtoAttackHarbor.OpenAttackWindowResp.reward_status)
}

// required uint32 wreckage = 3;
inline bool OpenAttackWindowResp::has_wreckage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenAttackWindowResp::set_has_wreckage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenAttackWindowResp::clear_has_wreckage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenAttackWindowResp::clear_wreckage() {
  wreckage_ = 0u;
  clear_has_wreckage();
}
inline ::google::protobuf::uint32 OpenAttackWindowResp::wreckage() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.OpenAttackWindowResp.wreckage)
  return wreckage_;
}
inline void OpenAttackWindowResp::set_wreckage(::google::protobuf::uint32 value) {
  set_has_wreckage();
  wreckage_ = value;
  // @@protoc_insertion_point(field_set:ProtoAttackHarbor.OpenAttackWindowResp.wreckage)
}

// -------------------------------------------------------------------

// RecieveCountryRewardReq

// -------------------------------------------------------------------

// RecieveCountryRewardResp

// required .User.RewardBagInfo reward = 1;
inline bool RecieveCountryRewardResp::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecieveCountryRewardResp::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecieveCountryRewardResp::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecieveCountryRewardResp::clear_reward() {
  if (reward_ != NULL) reward_->::User::RewardBagInfo::Clear();
  clear_has_reward();
}
inline const ::User::RewardBagInfo& RecieveCountryRewardResp::reward() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.RecieveCountryRewardResp.reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::User::RewardBagInfo* RecieveCountryRewardResp::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::User::RewardBagInfo;
  // @@protoc_insertion_point(field_mutable:ProtoAttackHarbor.RecieveCountryRewardResp.reward)
  return reward_;
}
inline ::User::RewardBagInfo* RecieveCountryRewardResp::release_reward() {
  clear_has_reward();
  ::User::RewardBagInfo* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void RecieveCountryRewardResp::set_allocated_reward(::User::RewardBagInfo* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoAttackHarbor.RecieveCountryRewardResp.reward)
}

// required uint32 reward_status = 2;
inline bool RecieveCountryRewardResp::has_reward_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecieveCountryRewardResp::set_has_reward_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecieveCountryRewardResp::clear_has_reward_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecieveCountryRewardResp::clear_reward_status() {
  reward_status_ = 0u;
  clear_has_reward_status();
}
inline ::google::protobuf::uint32 RecieveCountryRewardResp::reward_status() const {
  // @@protoc_insertion_point(field_get:ProtoAttackHarbor.RecieveCountryRewardResp.reward_status)
  return reward_status_;
}
inline void RecieveCountryRewardResp::set_reward_status(::google::protobuf::uint32 value) {
  set_has_reward_status();
  reward_status_ = value;
  // @@protoc_insertion_point(field_set:ProtoAttackHarbor.RecieveCountryRewardResp.reward_status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoAttackHarbor

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoAttackHarbor_2eproto__INCLUDED
