// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoCumulation.proto

#ifndef PROTOBUF_ProtoCumulation_2eproto__INCLUDED
#define PROTOBUF_ProtoCumulation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DataCommon.pb.h"
#include "ProtoHero.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoCumulation {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoCumulation_2eproto();
void protobuf_AssignDesc_ProtoCumulation_2eproto();
void protobuf_ShutdownFile_ProtoCumulation_2eproto();

class CumulationCPP;
class CumulationRewardReq;
class CumulationRewardResp;

// ===================================================================

class CumulationCPP : public ::google::protobuf::Message {
 public:
  CumulationCPP();
  virtual ~CumulationCPP();

  CumulationCPP(const CumulationCPP& from);

  inline CumulationCPP& operator=(const CumulationCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CumulationCPP& default_instance();

  void Swap(CumulationCPP* other);

  // implements Message ----------------------------------------------

  CumulationCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CumulationCPP& from);
  void MergeFrom(const CumulationCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoCumulation.CumulationCPP)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_ProtoCumulation_2eproto();
  friend void protobuf_AssignDesc_ProtoCumulation_2eproto();
  friend void protobuf_ShutdownFile_ProtoCumulation_2eproto();

  void InitAsDefaultInstance();
  static CumulationCPP* default_instance_;
};
// -------------------------------------------------------------------

class CumulationRewardReq : public ::google::protobuf::Message {
 public:
  CumulationRewardReq();
  virtual ~CumulationRewardReq();

  CumulationRewardReq(const CumulationRewardReq& from);

  inline CumulationRewardReq& operator=(const CumulationRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CumulationRewardReq& default_instance();

  void Swap(CumulationRewardReq* other);

  // implements Message ----------------------------------------------

  CumulationRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CumulationRewardReq& from);
  void MergeFrom(const CumulationRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rindex = 1;
  inline bool has_rindex() const;
  inline void clear_rindex();
  static const int kRindexFieldNumber = 1;
  inline ::google::protobuf::uint32 rindex() const;
  inline void set_rindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoCumulation.CumulationRewardReq)
 private:
  inline void set_has_rindex();
  inline void clear_has_rindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rindex_;
  friend void  protobuf_AddDesc_ProtoCumulation_2eproto();
  friend void protobuf_AssignDesc_ProtoCumulation_2eproto();
  friend void protobuf_ShutdownFile_ProtoCumulation_2eproto();

  void InitAsDefaultInstance();
  static CumulationRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class CumulationRewardResp : public ::google::protobuf::Message {
 public:
  CumulationRewardResp();
  virtual ~CumulationRewardResp();

  CumulationRewardResp(const CumulationRewardResp& from);

  inline CumulationRewardResp& operator=(const CumulationRewardResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CumulationRewardResp& default_instance();

  void Swap(CumulationRewardResp* other);

  // implements Message ----------------------------------------------

  CumulationRewardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CumulationRewardResp& from);
  void MergeFrom(const CumulationRewardResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataCommon.EquipmentAllCPP equips = 1;
  inline bool has_equips() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 1;
  inline const ::DataCommon::EquipmentAllCPP& equips() const;
  inline ::DataCommon::EquipmentAllCPP* mutable_equips();
  inline ::DataCommon::EquipmentAllCPP* release_equips();
  inline void set_allocated_equips(::DataCommon::EquipmentAllCPP* equips);

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::DataCommon::CommonBaseRewardCPP& base() const;
  inline ::DataCommon::CommonBaseRewardCPP* mutable_base();
  inline ::DataCommon::CommonBaseRewardCPP* release_base();
  inline void set_allocated_base(::DataCommon::CommonBaseRewardCPP* base);

  // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
  inline bool has_hero() const;
  inline void clear_hero();
  static const int kHeroFieldNumber = 3;
  inline const ::ProtoHero::HeroBaseInfoCPP& hero() const;
  inline ::ProtoHero::HeroBaseInfoCPP* mutable_hero();
  inline ::ProtoHero::HeroBaseInfoCPP* release_hero();
  inline void set_allocated_hero(::ProtoHero::HeroBaseInfoCPP* hero);

  // required uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoCumulation.CumulationRewardResp)
 private:
  inline void set_has_equips();
  inline void clear_has_equips();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_hero();
  inline void clear_has_hero();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DataCommon::EquipmentAllCPP* equips_;
  ::DataCommon::CommonBaseRewardCPP* base_;
  ::ProtoHero::HeroBaseInfoCPP* hero_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_ProtoCumulation_2eproto();
  friend void protobuf_AssignDesc_ProtoCumulation_2eproto();
  friend void protobuf_ShutdownFile_ProtoCumulation_2eproto();

  void InitAsDefaultInstance();
  static CumulationRewardResp* default_instance_;
};
// ===================================================================


// ===================================================================

// CumulationCPP

// required uint32 status = 1;
inline bool CumulationCPP::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CumulationCPP::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CumulationCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CumulationCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CumulationCPP::status() const {
  // @@protoc_insertion_point(field_get:ProtoCumulation.CumulationCPP.status)
  return status_;
}
inline void CumulationCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ProtoCumulation.CumulationCPP.status)
}

// -------------------------------------------------------------------

// CumulationRewardReq

// required uint32 rindex = 1;
inline bool CumulationRewardReq::has_rindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CumulationRewardReq::set_has_rindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CumulationRewardReq::clear_has_rindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CumulationRewardReq::clear_rindex() {
  rindex_ = 0u;
  clear_has_rindex();
}
inline ::google::protobuf::uint32 CumulationRewardReq::rindex() const {
  // @@protoc_insertion_point(field_get:ProtoCumulation.CumulationRewardReq.rindex)
  return rindex_;
}
inline void CumulationRewardReq::set_rindex(::google::protobuf::uint32 value) {
  set_has_rindex();
  rindex_ = value;
  // @@protoc_insertion_point(field_set:ProtoCumulation.CumulationRewardReq.rindex)
}

// -------------------------------------------------------------------

// CumulationRewardResp

// optional .DataCommon.EquipmentAllCPP equips = 1;
inline bool CumulationRewardResp::has_equips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CumulationRewardResp::set_has_equips() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CumulationRewardResp::clear_has_equips() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CumulationRewardResp::clear_equips() {
  if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
  clear_has_equips();
}
inline const ::DataCommon::EquipmentAllCPP& CumulationRewardResp::equips() const {
  // @@protoc_insertion_point(field_get:ProtoCumulation.CumulationRewardResp.equips)
  return equips_ != NULL ? *equips_ : *default_instance_->equips_;
}
inline ::DataCommon::EquipmentAllCPP* CumulationRewardResp::mutable_equips() {
  set_has_equips();
  if (equips_ == NULL) equips_ = new ::DataCommon::EquipmentAllCPP;
  // @@protoc_insertion_point(field_mutable:ProtoCumulation.CumulationRewardResp.equips)
  return equips_;
}
inline ::DataCommon::EquipmentAllCPP* CumulationRewardResp::release_equips() {
  clear_has_equips();
  ::DataCommon::EquipmentAllCPP* temp = equips_;
  equips_ = NULL;
  return temp;
}
inline void CumulationRewardResp::set_allocated_equips(::DataCommon::EquipmentAllCPP* equips) {
  delete equips_;
  equips_ = equips;
  if (equips) {
    set_has_equips();
  } else {
    clear_has_equips();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoCumulation.CumulationRewardResp.equips)
}

// optional .DataCommon.CommonBaseRewardCPP base = 2;
inline bool CumulationRewardResp::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CumulationRewardResp::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CumulationRewardResp::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CumulationRewardResp::clear_base() {
  if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
  clear_has_base();
}
inline const ::DataCommon::CommonBaseRewardCPP& CumulationRewardResp::base() const {
  // @@protoc_insertion_point(field_get:ProtoCumulation.CumulationRewardResp.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::DataCommon::CommonBaseRewardCPP* CumulationRewardResp::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::DataCommon::CommonBaseRewardCPP;
  // @@protoc_insertion_point(field_mutable:ProtoCumulation.CumulationRewardResp.base)
  return base_;
}
inline ::DataCommon::CommonBaseRewardCPP* CumulationRewardResp::release_base() {
  clear_has_base();
  ::DataCommon::CommonBaseRewardCPP* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CumulationRewardResp::set_allocated_base(::DataCommon::CommonBaseRewardCPP* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoCumulation.CumulationRewardResp.base)
}

// optional .ProtoHero.HeroBaseInfoCPP hero = 3;
inline bool CumulationRewardResp::has_hero() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CumulationRewardResp::set_has_hero() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CumulationRewardResp::clear_has_hero() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CumulationRewardResp::clear_hero() {
  if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
  clear_has_hero();
}
inline const ::ProtoHero::HeroBaseInfoCPP& CumulationRewardResp::hero() const {
  // @@protoc_insertion_point(field_get:ProtoCumulation.CumulationRewardResp.hero)
  return hero_ != NULL ? *hero_ : *default_instance_->hero_;
}
inline ::ProtoHero::HeroBaseInfoCPP* CumulationRewardResp::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) hero_ = new ::ProtoHero::HeroBaseInfoCPP;
  // @@protoc_insertion_point(field_mutable:ProtoCumulation.CumulationRewardResp.hero)
  return hero_;
}
inline ::ProtoHero::HeroBaseInfoCPP* CumulationRewardResp::release_hero() {
  clear_has_hero();
  ::ProtoHero::HeroBaseInfoCPP* temp = hero_;
  hero_ = NULL;
  return temp;
}
inline void CumulationRewardResp::set_allocated_hero(::ProtoHero::HeroBaseInfoCPP* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoCumulation.CumulationRewardResp.hero)
}

// required uint32 status = 4;
inline bool CumulationRewardResp::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CumulationRewardResp::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CumulationRewardResp::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CumulationRewardResp::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CumulationRewardResp::status() const {
  // @@protoc_insertion_point(field_get:ProtoCumulation.CumulationRewardResp.status)
  return status_;
}
inline void CumulationRewardResp::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ProtoCumulation.CumulationRewardResp.status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCumulation

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoCumulation_2eproto__INCLUDED
