// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataConfig.proto

#ifndef PROTOBUF_DataConfig_2eproto__INCLUDED
#define PROTOBUF_DataConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DataConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DataConfig_2eproto();
void protobuf_AssignDesc_DataConfig_2eproto();
void protobuf_ShutdownFile_DataConfig_2eproto();

class BaseRewardConfigCPP;
class EquipRewardConfigCPP;
class RewardConfigCPP;

// ===================================================================

class BaseRewardConfigCPP : public ::google::protobuf::Message {
 public:
  BaseRewardConfigCPP();
  virtual ~BaseRewardConfigCPP();

  BaseRewardConfigCPP(const BaseRewardConfigCPP& from);

  inline BaseRewardConfigCPP& operator=(const BaseRewardConfigCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseRewardConfigCPP& default_instance();

  void Swap(BaseRewardConfigCPP* other);

  // implements Message ----------------------------------------------

  BaseRewardConfigCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseRewardConfigCPP& from);
  void MergeFrom(const BaseRewardConfigCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 coin = 1;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 1;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // optional uint32 wood = 2;
  inline bool has_wood() const;
  inline void clear_wood();
  static const int kWoodFieldNumber = 2;
  inline ::google::protobuf::uint32 wood() const;
  inline void set_wood(::google::protobuf::uint32 value);

  // optional uint32 food = 3;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 3;
  inline ::google::protobuf::uint32 food() const;
  inline void set_food(::google::protobuf::uint32 value);

  // optional uint32 iron = 4;
  inline bool has_iron() const;
  inline void clear_iron();
  static const int kIronFieldNumber = 4;
  inline ::google::protobuf::uint32 iron() const;
  inline void set_iron(::google::protobuf::uint32 value);

  // optional uint32 hammer = 5;
  inline bool has_hammer() const;
  inline void clear_hammer();
  static const int kHammerFieldNumber = 5;
  inline ::google::protobuf::uint32 hammer() const;
  inline void set_hammer(::google::protobuf::uint32 value);

  // optional uint32 order = 6;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 6;
  inline ::google::protobuf::uint32 order() const;
  inline void set_order(::google::protobuf::uint32 value);

  // optional uint32 exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 cash = 8;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 8;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);

  // optional uint32 refresh = 9;
  inline bool has_refresh() const;
  inline void clear_refresh();
  static const int kRefreshFieldNumber = 9;
  inline ::google::protobuf::uint32 refresh() const;
  inline void set_refresh(::google::protobuf::uint32 value);

  // optional uint32 arefresh = 10;
  inline bool has_arefresh() const;
  inline void clear_arefresh();
  static const int kArefreshFieldNumber = 10;
  inline ::google::protobuf::uint32 arefresh() const;
  inline void set_arefresh(::google::protobuf::uint32 value);

  // optional uint32 sacrifice = 11;
  inline bool has_sacrifice() const;
  inline void clear_sacrifice();
  static const int kSacrificeFieldNumber = 11;
  inline ::google::protobuf::uint32 sacrifice() const;
  inline void set_sacrifice(::google::protobuf::uint32 value);

  // optional uint32 market = 12;
  inline bool has_market() const;
  inline void clear_market();
  static const int kMarketFieldNumber = 12;
  inline ::google::protobuf::uint32 market() const;
  inline void set_market(::google::protobuf::uint32 value);

  // optional uint32 shadow = 13;
  inline bool has_shadow() const;
  inline void clear_shadow();
  static const int kShadowFieldNumber = 13;
  inline ::google::protobuf::uint32 shadow() const;
  inline void set_shadow(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DataConfig.BaseRewardConfigCPP)
 private:
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_wood();
  inline void clear_has_wood();
  inline void set_has_food();
  inline void clear_has_food();
  inline void set_has_iron();
  inline void clear_has_iron();
  inline void set_has_hammer();
  inline void clear_has_hammer();
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_refresh();
  inline void clear_has_refresh();
  inline void set_has_arefresh();
  inline void clear_has_arefresh();
  inline void set_has_sacrifice();
  inline void clear_has_sacrifice();
  inline void set_has_market();
  inline void clear_has_market();
  inline void set_has_shadow();
  inline void clear_has_shadow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 wood_;
  ::google::protobuf::uint32 food_;
  ::google::protobuf::uint32 iron_;
  ::google::protobuf::uint32 hammer_;
  ::google::protobuf::uint32 order_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint32 refresh_;
  ::google::protobuf::uint32 arefresh_;
  ::google::protobuf::uint32 sacrifice_;
  ::google::protobuf::uint32 market_;
  ::google::protobuf::uint32 shadow_;
  friend void  protobuf_AddDesc_DataConfig_2eproto();
  friend void protobuf_AssignDesc_DataConfig_2eproto();
  friend void protobuf_ShutdownFile_DataConfig_2eproto();

  void InitAsDefaultInstance();
  static BaseRewardConfigCPP* default_instance_;
};
// -------------------------------------------------------------------

class EquipRewardConfigCPP : public ::google::protobuf::Message {
 public:
  EquipRewardConfigCPP();
  virtual ~EquipRewardConfigCPP();

  EquipRewardConfigCPP(const EquipRewardConfigCPP& from);

  inline EquipRewardConfigCPP& operator=(const EquipRewardConfigCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipRewardConfigCPP& default_instance();

  void Swap(EquipRewardConfigCPP* other);

  // implements Message ----------------------------------------------

  EquipRewardConfigCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipRewardConfigCPP& from);
  void MergeFrom(const EquipRewardConfigCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 eqid = 1;
  inline bool has_eqid() const;
  inline void clear_eqid();
  static const int kEqidFieldNumber = 1;
  inline ::google::protobuf::uint32 eqid() const;
  inline void set_eqid(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DataConfig.EquipRewardConfigCPP)
 private:
  inline void set_has_eqid();
  inline void clear_has_eqid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eqid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_DataConfig_2eproto();
  friend void protobuf_AssignDesc_DataConfig_2eproto();
  friend void protobuf_ShutdownFile_DataConfig_2eproto();

  void InitAsDefaultInstance();
  static EquipRewardConfigCPP* default_instance_;
};
// -------------------------------------------------------------------

class RewardConfigCPP : public ::google::protobuf::Message {
 public:
  RewardConfigCPP();
  virtual ~RewardConfigCPP();

  RewardConfigCPP(const RewardConfigCPP& from);

  inline RewardConfigCPP& operator=(const RewardConfigCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardConfigCPP& default_instance();

  void Swap(RewardConfigCPP* other);

  // implements Message ----------------------------------------------

  RewardConfigCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardConfigCPP& from);
  void MergeFrom(const RewardConfigCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .DataConfig.EquipRewardConfigCPP equips = 1;
  inline bool has_equips() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 1;
  inline const ::DataConfig::EquipRewardConfigCPP& equips() const;
  inline ::DataConfig::EquipRewardConfigCPP* mutable_equips();
  inline ::DataConfig::EquipRewardConfigCPP* release_equips();
  inline void set_allocated_equips(::DataConfig::EquipRewardConfigCPP* equips);

  // optional .DataConfig.BaseRewardConfigCPP base = 2;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 2;
  inline const ::DataConfig::BaseRewardConfigCPP& base() const;
  inline ::DataConfig::BaseRewardConfigCPP* mutable_base();
  inline ::DataConfig::BaseRewardConfigCPP* release_base();
  inline void set_allocated_base(::DataConfig::BaseRewardConfigCPP* base);

  // @@protoc_insertion_point(class_scope:DataConfig.RewardConfigCPP)
 private:
  inline void set_has_equips();
  inline void clear_has_equips();
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DataConfig::EquipRewardConfigCPP* equips_;
  ::DataConfig::BaseRewardConfigCPP* base_;
  friend void  protobuf_AddDesc_DataConfig_2eproto();
  friend void protobuf_AssignDesc_DataConfig_2eproto();
  friend void protobuf_ShutdownFile_DataConfig_2eproto();

  void InitAsDefaultInstance();
  static RewardConfigCPP* default_instance_;
};
// ===================================================================


// ===================================================================

// BaseRewardConfigCPP

// optional uint32 coin = 1;
inline bool BaseRewardConfigCPP::has_coin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseRewardConfigCPP::set_has_coin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseRewardConfigCPP::clear_has_coin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseRewardConfigCPP::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::coin() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.coin)
  return coin_;
}
inline void BaseRewardConfigCPP::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.coin)
}

// optional uint32 wood = 2;
inline bool BaseRewardConfigCPP::has_wood() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseRewardConfigCPP::set_has_wood() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseRewardConfigCPP::clear_has_wood() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseRewardConfigCPP::clear_wood() {
  wood_ = 0u;
  clear_has_wood();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::wood() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.wood)
  return wood_;
}
inline void BaseRewardConfigCPP::set_wood(::google::protobuf::uint32 value) {
  set_has_wood();
  wood_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.wood)
}

// optional uint32 food = 3;
inline bool BaseRewardConfigCPP::has_food() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseRewardConfigCPP::set_has_food() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseRewardConfigCPP::clear_has_food() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseRewardConfigCPP::clear_food() {
  food_ = 0u;
  clear_has_food();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::food() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.food)
  return food_;
}
inline void BaseRewardConfigCPP::set_food(::google::protobuf::uint32 value) {
  set_has_food();
  food_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.food)
}

// optional uint32 iron = 4;
inline bool BaseRewardConfigCPP::has_iron() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseRewardConfigCPP::set_has_iron() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseRewardConfigCPP::clear_has_iron() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseRewardConfigCPP::clear_iron() {
  iron_ = 0u;
  clear_has_iron();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::iron() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.iron)
  return iron_;
}
inline void BaseRewardConfigCPP::set_iron(::google::protobuf::uint32 value) {
  set_has_iron();
  iron_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.iron)
}

// optional uint32 hammer = 5;
inline bool BaseRewardConfigCPP::has_hammer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseRewardConfigCPP::set_has_hammer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseRewardConfigCPP::clear_has_hammer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseRewardConfigCPP::clear_hammer() {
  hammer_ = 0u;
  clear_has_hammer();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::hammer() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.hammer)
  return hammer_;
}
inline void BaseRewardConfigCPP::set_hammer(::google::protobuf::uint32 value) {
  set_has_hammer();
  hammer_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.hammer)
}

// optional uint32 order = 6;
inline bool BaseRewardConfigCPP::has_order() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseRewardConfigCPP::set_has_order() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseRewardConfigCPP::clear_has_order() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseRewardConfigCPP::clear_order() {
  order_ = 0u;
  clear_has_order();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::order() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.order)
  return order_;
}
inline void BaseRewardConfigCPP::set_order(::google::protobuf::uint32 value) {
  set_has_order();
  order_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.order)
}

// optional uint32 exp = 7;
inline bool BaseRewardConfigCPP::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BaseRewardConfigCPP::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BaseRewardConfigCPP::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BaseRewardConfigCPP::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::exp() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.exp)
  return exp_;
}
inline void BaseRewardConfigCPP::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.exp)
}

// optional uint32 cash = 8;
inline bool BaseRewardConfigCPP::has_cash() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BaseRewardConfigCPP::set_has_cash() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BaseRewardConfigCPP::clear_has_cash() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BaseRewardConfigCPP::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::cash() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.cash)
  return cash_;
}
inline void BaseRewardConfigCPP::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.cash)
}

// optional uint32 refresh = 9;
inline bool BaseRewardConfigCPP::has_refresh() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BaseRewardConfigCPP::set_has_refresh() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BaseRewardConfigCPP::clear_has_refresh() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BaseRewardConfigCPP::clear_refresh() {
  refresh_ = 0u;
  clear_has_refresh();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::refresh() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.refresh)
  return refresh_;
}
inline void BaseRewardConfigCPP::set_refresh(::google::protobuf::uint32 value) {
  set_has_refresh();
  refresh_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.refresh)
}

// optional uint32 arefresh = 10;
inline bool BaseRewardConfigCPP::has_arefresh() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BaseRewardConfigCPP::set_has_arefresh() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BaseRewardConfigCPP::clear_has_arefresh() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BaseRewardConfigCPP::clear_arefresh() {
  arefresh_ = 0u;
  clear_has_arefresh();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::arefresh() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.arefresh)
  return arefresh_;
}
inline void BaseRewardConfigCPP::set_arefresh(::google::protobuf::uint32 value) {
  set_has_arefresh();
  arefresh_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.arefresh)
}

// optional uint32 sacrifice = 11;
inline bool BaseRewardConfigCPP::has_sacrifice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BaseRewardConfigCPP::set_has_sacrifice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BaseRewardConfigCPP::clear_has_sacrifice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BaseRewardConfigCPP::clear_sacrifice() {
  sacrifice_ = 0u;
  clear_has_sacrifice();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::sacrifice() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.sacrifice)
  return sacrifice_;
}
inline void BaseRewardConfigCPP::set_sacrifice(::google::protobuf::uint32 value) {
  set_has_sacrifice();
  sacrifice_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.sacrifice)
}

// optional uint32 market = 12;
inline bool BaseRewardConfigCPP::has_market() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BaseRewardConfigCPP::set_has_market() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BaseRewardConfigCPP::clear_has_market() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BaseRewardConfigCPP::clear_market() {
  market_ = 0u;
  clear_has_market();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::market() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.market)
  return market_;
}
inline void BaseRewardConfigCPP::set_market(::google::protobuf::uint32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.market)
}

// optional uint32 shadow = 13;
inline bool BaseRewardConfigCPP::has_shadow() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BaseRewardConfigCPP::set_has_shadow() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BaseRewardConfigCPP::clear_has_shadow() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BaseRewardConfigCPP::clear_shadow() {
  shadow_ = 0u;
  clear_has_shadow();
}
inline ::google::protobuf::uint32 BaseRewardConfigCPP::shadow() const {
  // @@protoc_insertion_point(field_get:DataConfig.BaseRewardConfigCPP.shadow)
  return shadow_;
}
inline void BaseRewardConfigCPP::set_shadow(::google::protobuf::uint32 value) {
  set_has_shadow();
  shadow_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.BaseRewardConfigCPP.shadow)
}

// -------------------------------------------------------------------

// EquipRewardConfigCPP

// required uint32 eqid = 1;
inline bool EquipRewardConfigCPP::has_eqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipRewardConfigCPP::set_has_eqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipRewardConfigCPP::clear_has_eqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipRewardConfigCPP::clear_eqid() {
  eqid_ = 0u;
  clear_has_eqid();
}
inline ::google::protobuf::uint32 EquipRewardConfigCPP::eqid() const {
  // @@protoc_insertion_point(field_get:DataConfig.EquipRewardConfigCPP.eqid)
  return eqid_;
}
inline void EquipRewardConfigCPP::set_eqid(::google::protobuf::uint32 value) {
  set_has_eqid();
  eqid_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.EquipRewardConfigCPP.eqid)
}

// required uint32 count = 2;
inline bool EquipRewardConfigCPP::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipRewardConfigCPP::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipRewardConfigCPP::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipRewardConfigCPP::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 EquipRewardConfigCPP::count() const {
  // @@protoc_insertion_point(field_get:DataConfig.EquipRewardConfigCPP.count)
  return count_;
}
inline void EquipRewardConfigCPP::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:DataConfig.EquipRewardConfigCPP.count)
}

// -------------------------------------------------------------------

// RewardConfigCPP

// optional .DataConfig.EquipRewardConfigCPP equips = 1;
inline bool RewardConfigCPP::has_equips() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardConfigCPP::set_has_equips() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardConfigCPP::clear_has_equips() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardConfigCPP::clear_equips() {
  if (equips_ != NULL) equips_->::DataConfig::EquipRewardConfigCPP::Clear();
  clear_has_equips();
}
inline const ::DataConfig::EquipRewardConfigCPP& RewardConfigCPP::equips() const {
  // @@protoc_insertion_point(field_get:DataConfig.RewardConfigCPP.equips)
  return equips_ != NULL ? *equips_ : *default_instance_->equips_;
}
inline ::DataConfig::EquipRewardConfigCPP* RewardConfigCPP::mutable_equips() {
  set_has_equips();
  if (equips_ == NULL) equips_ = new ::DataConfig::EquipRewardConfigCPP;
  // @@protoc_insertion_point(field_mutable:DataConfig.RewardConfigCPP.equips)
  return equips_;
}
inline ::DataConfig::EquipRewardConfigCPP* RewardConfigCPP::release_equips() {
  clear_has_equips();
  ::DataConfig::EquipRewardConfigCPP* temp = equips_;
  equips_ = NULL;
  return temp;
}
inline void RewardConfigCPP::set_allocated_equips(::DataConfig::EquipRewardConfigCPP* equips) {
  delete equips_;
  equips_ = equips;
  if (equips) {
    set_has_equips();
  } else {
    clear_has_equips();
  }
  // @@protoc_insertion_point(field_set_allocated:DataConfig.RewardConfigCPP.equips)
}

// optional .DataConfig.BaseRewardConfigCPP base = 2;
inline bool RewardConfigCPP::has_base() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardConfigCPP::set_has_base() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardConfigCPP::clear_has_base() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardConfigCPP::clear_base() {
  if (base_ != NULL) base_->::DataConfig::BaseRewardConfigCPP::Clear();
  clear_has_base();
}
inline const ::DataConfig::BaseRewardConfigCPP& RewardConfigCPP::base() const {
  // @@protoc_insertion_point(field_get:DataConfig.RewardConfigCPP.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::DataConfig::BaseRewardConfigCPP* RewardConfigCPP::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::DataConfig::BaseRewardConfigCPP;
  // @@protoc_insertion_point(field_mutable:DataConfig.RewardConfigCPP.base)
  return base_;
}
inline ::DataConfig::BaseRewardConfigCPP* RewardConfigCPP::release_base() {
  clear_has_base();
  ::DataConfig::BaseRewardConfigCPP* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RewardConfigCPP::set_allocated_base(::DataConfig::BaseRewardConfigCPP* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:DataConfig.RewardConfigCPP.base)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DataConfig

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DataConfig_2eproto__INCLUDED
