// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoScience.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoScience.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoScience {

namespace {

const ::google::protobuf::Descriptor* ScienceItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScienceItemCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScienceCapitalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScienceCapitalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScienceCapitalResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScienceCapitalResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScienceSpeedCdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScienceSpeedCdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScienceSpeedCdResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScienceSpeedCdResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoScience_2eproto() {
  protobuf_AddDesc_ProtoScience_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoScience.proto");
  GOOGLE_CHECK(file != NULL);
  ScienceItemCPP_descriptor_ = file->message_type(0);
  static const int ScienceItemCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItemCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItemCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItemCPP, value_),
  };
  ScienceItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScienceItemCPP_descriptor_,
      ScienceItemCPP::default_instance_,
      ScienceItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScienceItemCPP));
  ScienceCapitalReq_descriptor_ = file->message_type(1);
  static const int ScienceCapitalReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalReq, id_),
  };
  ScienceCapitalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScienceCapitalReq_descriptor_,
      ScienceCapitalReq::default_instance_,
      ScienceCapitalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScienceCapitalReq));
  ScienceCapitalResp_descriptor_ = file->message_type(2);
  static const int ScienceCapitalResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalResp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalResp, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalResp, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalResp, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalResp, iron_),
  };
  ScienceCapitalResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScienceCapitalResp_descriptor_,
      ScienceCapitalResp::default_instance_,
      ScienceCapitalResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceCapitalResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScienceCapitalResp));
  ScienceSpeedCdReq_descriptor_ = file->message_type(3);
  static const int ScienceSpeedCdReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceSpeedCdReq, id_),
  };
  ScienceSpeedCdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScienceSpeedCdReq_descriptor_,
      ScienceSpeedCdReq::default_instance_,
      ScienceSpeedCdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceSpeedCdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceSpeedCdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScienceSpeedCdReq));
  ScienceSpeedCdResp_descriptor_ = file->message_type(4);
  static const int ScienceSpeedCdResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceSpeedCdResp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceSpeedCdResp, cash_),
  };
  ScienceSpeedCdResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScienceSpeedCdResp_descriptor_,
      ScienceSpeedCdResp::default_instance_,
      ScienceSpeedCdResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceSpeedCdResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScienceSpeedCdResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScienceSpeedCdResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoScience_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScienceItemCPP_descriptor_, &ScienceItemCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScienceCapitalReq_descriptor_, &ScienceCapitalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScienceCapitalResp_descriptor_, &ScienceCapitalResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScienceSpeedCdReq_descriptor_, &ScienceSpeedCdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScienceSpeedCdResp_descriptor_, &ScienceSpeedCdResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoScience_2eproto() {
  delete ScienceItemCPP::default_instance_;
  delete ScienceItemCPP_reflection_;
  delete ScienceCapitalReq::default_instance_;
  delete ScienceCapitalReq_reflection_;
  delete ScienceCapitalResp::default_instance_;
  delete ScienceCapitalResp_reflection_;
  delete ScienceSpeedCdReq::default_instance_;
  delete ScienceSpeedCdReq_reflection_;
  delete ScienceSpeedCdResp::default_instance_;
  delete ScienceSpeedCdResp_reflection_;
}

void protobuf_AddDesc_ProtoScience_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoScience.proto\022\014ProtoScience\";\n\016Sc"
    "ienceItemCPP\022\n\n\002id\030\001 \002(\r\022\016\n\006status\030\002 \002(\r"
    "\022\r\n\005value\030\003 \002(\r\"\037\n\021ScienceCapitalReq\022\n\n\002"
    "id\030\001 \002(\r\"x\n\022ScienceCapitalResp\022*\n\004item\030\001"
    " \002(\0132\034.ProtoScience.ScienceItemCPP\022\014\n\004co"
    "in\030\002 \002(\r\022\014\n\004wood\030\003 \002(\r\022\014\n\004food\030\004 \002(\r\022\014\n\004"
    "iron\030\005 \002(\r\"\037\n\021ScienceSpeedCdReq\022\n\n\002id\030\001 "
    "\002(\r\"N\n\022ScienceSpeedCdResp\022*\n\004item\030\001 \002(\0132"
    "\034.ProtoScience.ScienceItemCPP\022\014\n\004cash\030\002 "
    "\002(\r", 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoScience.proto", &protobuf_RegisterTypes);
  ScienceItemCPP::default_instance_ = new ScienceItemCPP();
  ScienceCapitalReq::default_instance_ = new ScienceCapitalReq();
  ScienceCapitalResp::default_instance_ = new ScienceCapitalResp();
  ScienceSpeedCdReq::default_instance_ = new ScienceSpeedCdReq();
  ScienceSpeedCdResp::default_instance_ = new ScienceSpeedCdResp();
  ScienceItemCPP::default_instance_->InitAsDefaultInstance();
  ScienceCapitalReq::default_instance_->InitAsDefaultInstance();
  ScienceCapitalResp::default_instance_->InitAsDefaultInstance();
  ScienceSpeedCdReq::default_instance_->InitAsDefaultInstance();
  ScienceSpeedCdResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoScience_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoScience_2eproto {
  StaticDescriptorInitializer_ProtoScience_2eproto() {
    protobuf_AddDesc_ProtoScience_2eproto();
  }
} static_descriptor_initializer_ProtoScience_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ScienceItemCPP::kIdFieldNumber;
const int ScienceItemCPP::kStatusFieldNumber;
const int ScienceItemCPP::kValueFieldNumber;
#endif  // !_MSC_VER

ScienceItemCPP::ScienceItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoScience.ScienceItemCPP)
}

void ScienceItemCPP::InitAsDefaultInstance() {
}

ScienceItemCPP::ScienceItemCPP(const ScienceItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoScience.ScienceItemCPP)
}

void ScienceItemCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScienceItemCPP::~ScienceItemCPP() {
  // @@protoc_insertion_point(destructor:ProtoScience.ScienceItemCPP)
  SharedDtor();
}

void ScienceItemCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScienceItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScienceItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScienceItemCPP_descriptor_;
}

const ScienceItemCPP& ScienceItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScience_2eproto();
  return *default_instance_;
}

ScienceItemCPP* ScienceItemCPP::default_instance_ = NULL;

ScienceItemCPP* ScienceItemCPP::New() const {
  return new ScienceItemCPP;
}

void ScienceItemCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScienceItemCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScienceItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoScience.ScienceItemCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint32 value = 3;
      case 3: {
        if (tag == 24) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoScience.ScienceItemCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoScience.ScienceItemCPP)
  return false;
#undef DO_
}

void ScienceItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoScience.ScienceItemCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoScience.ScienceItemCPP)
}

::google::protobuf::uint8* ScienceItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoScience.ScienceItemCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoScience.ScienceItemCPP)
  return target;
}

int ScienceItemCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScienceItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScienceItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScienceItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScienceItemCPP::MergeFrom(const ScienceItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScienceItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScienceItemCPP::CopyFrom(const ScienceItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScienceItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ScienceItemCPP::Swap(ScienceItemCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScienceItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScienceItemCPP_descriptor_;
  metadata.reflection = ScienceItemCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScienceCapitalReq::kIdFieldNumber;
#endif  // !_MSC_VER

ScienceCapitalReq::ScienceCapitalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoScience.ScienceCapitalReq)
}

void ScienceCapitalReq::InitAsDefaultInstance() {
}

ScienceCapitalReq::ScienceCapitalReq(const ScienceCapitalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoScience.ScienceCapitalReq)
}

void ScienceCapitalReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScienceCapitalReq::~ScienceCapitalReq() {
  // @@protoc_insertion_point(destructor:ProtoScience.ScienceCapitalReq)
  SharedDtor();
}

void ScienceCapitalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScienceCapitalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScienceCapitalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScienceCapitalReq_descriptor_;
}

const ScienceCapitalReq& ScienceCapitalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScience_2eproto();
  return *default_instance_;
}

ScienceCapitalReq* ScienceCapitalReq::default_instance_ = NULL;

ScienceCapitalReq* ScienceCapitalReq::New() const {
  return new ScienceCapitalReq;
}

void ScienceCapitalReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScienceCapitalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoScience.ScienceCapitalReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoScience.ScienceCapitalReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoScience.ScienceCapitalReq)
  return false;
#undef DO_
}

void ScienceCapitalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoScience.ScienceCapitalReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoScience.ScienceCapitalReq)
}

::google::protobuf::uint8* ScienceCapitalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoScience.ScienceCapitalReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoScience.ScienceCapitalReq)
  return target;
}

int ScienceCapitalReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScienceCapitalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScienceCapitalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScienceCapitalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScienceCapitalReq::MergeFrom(const ScienceCapitalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScienceCapitalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScienceCapitalReq::CopyFrom(const ScienceCapitalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScienceCapitalReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ScienceCapitalReq::Swap(ScienceCapitalReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScienceCapitalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScienceCapitalReq_descriptor_;
  metadata.reflection = ScienceCapitalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScienceCapitalResp::kItemFieldNumber;
const int ScienceCapitalResp::kCoinFieldNumber;
const int ScienceCapitalResp::kWoodFieldNumber;
const int ScienceCapitalResp::kFoodFieldNumber;
const int ScienceCapitalResp::kIronFieldNumber;
#endif  // !_MSC_VER

ScienceCapitalResp::ScienceCapitalResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoScience.ScienceCapitalResp)
}

void ScienceCapitalResp::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoScience::ScienceItemCPP*>(&::ProtoScience::ScienceItemCPP::default_instance());
}

ScienceCapitalResp::ScienceCapitalResp(const ScienceCapitalResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoScience.ScienceCapitalResp)
}

void ScienceCapitalResp::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  coin_ = 0u;
  wood_ = 0u;
  food_ = 0u;
  iron_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScienceCapitalResp::~ScienceCapitalResp() {
  // @@protoc_insertion_point(destructor:ProtoScience.ScienceCapitalResp)
  SharedDtor();
}

void ScienceCapitalResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ScienceCapitalResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScienceCapitalResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScienceCapitalResp_descriptor_;
}

const ScienceCapitalResp& ScienceCapitalResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScience_2eproto();
  return *default_instance_;
}

ScienceCapitalResp* ScienceCapitalResp::default_instance_ = NULL;

ScienceCapitalResp* ScienceCapitalResp::New() const {
  return new ScienceCapitalResp;
}

void ScienceCapitalResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ScienceCapitalResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(coin_, iron_);
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoScience::ScienceItemCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScienceCapitalResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoScience.ScienceCapitalResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoScience.ScienceItemCPP item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // required uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wood;
        break;
      }

      // required uint32 wood = 3;
      case 3: {
        if (tag == 24) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_food;
        break;
      }

      // required uint32 food = 4;
      case 4: {
        if (tag == 32) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_iron;
        break;
      }

      // required uint32 iron = 5;
      case 5: {
        if (tag == 40) {
         parse_iron:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iron_)));
          set_has_iron();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoScience.ScienceCapitalResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoScience.ScienceCapitalResp)
  return false;
#undef DO_
}

void ScienceCapitalResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoScience.ScienceCapitalResp)
  // required .ProtoScience.ScienceItemCPP item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  // required uint32 wood = 3;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wood(), output);
  }

  // required uint32 food = 4;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->food(), output);
  }

  // required uint32 iron = 5;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->iron(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoScience.ScienceCapitalResp)
}

::google::protobuf::uint8* ScienceCapitalResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoScience.ScienceCapitalResp)
  // required .ProtoScience.ScienceItemCPP item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  // required uint32 wood = 3;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wood(), target);
  }

  // required uint32 food = 4;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->food(), target);
  }

  // required uint32 iron = 5;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->iron(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoScience.ScienceCapitalResp)
  return target;
}

int ScienceCapitalResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoScience.ScienceItemCPP item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 wood = 3;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // required uint32 food = 4;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // required uint32 iron = 5;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iron());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScienceCapitalResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScienceCapitalResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScienceCapitalResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScienceCapitalResp::MergeFrom(const ScienceCapitalResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ProtoScience::ScienceItemCPP::MergeFrom(from.item());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_iron()) {
      set_iron(from.iron());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScienceCapitalResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScienceCapitalResp::CopyFrom(const ScienceCapitalResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScienceCapitalResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ScienceCapitalResp::Swap(ScienceCapitalResp* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScienceCapitalResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScienceCapitalResp_descriptor_;
  metadata.reflection = ScienceCapitalResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScienceSpeedCdReq::kIdFieldNumber;
#endif  // !_MSC_VER

ScienceSpeedCdReq::ScienceSpeedCdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoScience.ScienceSpeedCdReq)
}

void ScienceSpeedCdReq::InitAsDefaultInstance() {
}

ScienceSpeedCdReq::ScienceSpeedCdReq(const ScienceSpeedCdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoScience.ScienceSpeedCdReq)
}

void ScienceSpeedCdReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScienceSpeedCdReq::~ScienceSpeedCdReq() {
  // @@protoc_insertion_point(destructor:ProtoScience.ScienceSpeedCdReq)
  SharedDtor();
}

void ScienceSpeedCdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScienceSpeedCdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScienceSpeedCdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScienceSpeedCdReq_descriptor_;
}

const ScienceSpeedCdReq& ScienceSpeedCdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScience_2eproto();
  return *default_instance_;
}

ScienceSpeedCdReq* ScienceSpeedCdReq::default_instance_ = NULL;

ScienceSpeedCdReq* ScienceSpeedCdReq::New() const {
  return new ScienceSpeedCdReq;
}

void ScienceSpeedCdReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScienceSpeedCdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoScience.ScienceSpeedCdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoScience.ScienceSpeedCdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoScience.ScienceSpeedCdReq)
  return false;
#undef DO_
}

void ScienceSpeedCdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoScience.ScienceSpeedCdReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoScience.ScienceSpeedCdReq)
}

::google::protobuf::uint8* ScienceSpeedCdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoScience.ScienceSpeedCdReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoScience.ScienceSpeedCdReq)
  return target;
}

int ScienceSpeedCdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScienceSpeedCdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScienceSpeedCdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScienceSpeedCdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScienceSpeedCdReq::MergeFrom(const ScienceSpeedCdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScienceSpeedCdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScienceSpeedCdReq::CopyFrom(const ScienceSpeedCdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScienceSpeedCdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ScienceSpeedCdReq::Swap(ScienceSpeedCdReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScienceSpeedCdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScienceSpeedCdReq_descriptor_;
  metadata.reflection = ScienceSpeedCdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScienceSpeedCdResp::kItemFieldNumber;
const int ScienceSpeedCdResp::kCashFieldNumber;
#endif  // !_MSC_VER

ScienceSpeedCdResp::ScienceSpeedCdResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoScience.ScienceSpeedCdResp)
}

void ScienceSpeedCdResp::InitAsDefaultInstance() {
  item_ = const_cast< ::ProtoScience::ScienceItemCPP*>(&::ProtoScience::ScienceItemCPP::default_instance());
}

ScienceSpeedCdResp::ScienceSpeedCdResp(const ScienceSpeedCdResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoScience.ScienceSpeedCdResp)
}

void ScienceSpeedCdResp::SharedCtor() {
  _cached_size_ = 0;
  item_ = NULL;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScienceSpeedCdResp::~ScienceSpeedCdResp() {
  // @@protoc_insertion_point(destructor:ProtoScience.ScienceSpeedCdResp)
  SharedDtor();
}

void ScienceSpeedCdResp::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ScienceSpeedCdResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScienceSpeedCdResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScienceSpeedCdResp_descriptor_;
}

const ScienceSpeedCdResp& ScienceSpeedCdResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoScience_2eproto();
  return *default_instance_;
}

ScienceSpeedCdResp* ScienceSpeedCdResp::default_instance_ = NULL;

ScienceSpeedCdResp* ScienceSpeedCdResp::New() const {
  return new ScienceSpeedCdResp;
}

void ScienceSpeedCdResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_item()) {
      if (item_ != NULL) item_->::ProtoScience::ScienceItemCPP::Clear();
    }
    cash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScienceSpeedCdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoScience.ScienceSpeedCdResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoScience.ScienceItemCPP item = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required uint32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoScience.ScienceSpeedCdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoScience.ScienceSpeedCdResp)
  return false;
#undef DO_
}

void ScienceSpeedCdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoScience.ScienceSpeedCdResp)
  // required .ProtoScience.ScienceItemCPP item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(), output);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoScience.ScienceSpeedCdResp)
}

::google::protobuf::uint8* ScienceSpeedCdResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoScience.ScienceSpeedCdResp)
  // required .ProtoScience.ScienceItemCPP item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(), target);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoScience.ScienceSpeedCdResp)
  return target;
}

int ScienceSpeedCdResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoScience.ScienceItemCPP item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // required uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScienceSpeedCdResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScienceSpeedCdResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScienceSpeedCdResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScienceSpeedCdResp::MergeFrom(const ScienceSpeedCdResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      mutable_item()->::ProtoScience::ScienceItemCPP::MergeFrom(from.item());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScienceSpeedCdResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScienceSpeedCdResp::CopyFrom(const ScienceSpeedCdResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScienceSpeedCdResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ScienceSpeedCdResp::Swap(ScienceSpeedCdResp* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScienceSpeedCdResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScienceSpeedCdResp_descriptor_;
  metadata.reflection = ScienceSpeedCdResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoScience

// @@protoc_insertion_point(global_scope)
