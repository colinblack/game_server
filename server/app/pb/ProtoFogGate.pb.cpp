// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoFogGate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoFogGate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoFogGate {

namespace {

const ::google::protobuf::Descriptor* FogGateCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FogGateCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FogGateCPPAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FogGateCPPAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartFogGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartFogGateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushFogGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushFogGateReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoFogGate_2eproto() {
  protobuf_AddDesc_ProtoFogGate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoFogGate.proto");
  GOOGLE_CHECK(file != NULL);
  FogGateCPP_descriptor_ = file->message_type(0);
  static const int FogGateCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGateCPP, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGateCPP, leftnpc_),
  };
  FogGateCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FogGateCPP_descriptor_,
      FogGateCPP::default_instance_,
      FogGateCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGateCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGateCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FogGateCPP));
  FogGateCPPAll_descriptor_ = file->message_type(1);
  static const int FogGateCPPAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGateCPPAll, foggates_),
  };
  FogGateCPPAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FogGateCPPAll_descriptor_,
      FogGateCPPAll::default_instance_,
      FogGateCPPAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGateCPPAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FogGateCPPAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FogGateCPPAll));
  StartFogGateReq_descriptor_ = file->message_type(2);
  static const int StartFogGateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFogGateReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFogGateReq, heros_),
  };
  StartFogGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartFogGateReq_descriptor_,
      StartFogGateReq::default_instance_,
      StartFogGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFogGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFogGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartFogGateReq));
  PushFogGateReq_descriptor_ = file->message_type(3);
  static const int PushFogGateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFogGateReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFogGateReq, leftnpc_),
  };
  PushFogGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushFogGateReq_descriptor_,
      PushFogGateReq::default_instance_,
      PushFogGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFogGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushFogGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushFogGateReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoFogGate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FogGateCPP_descriptor_, &FogGateCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FogGateCPPAll_descriptor_, &FogGateCPPAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartFogGateReq_descriptor_, &StartFogGateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushFogGateReq_descriptor_, &PushFogGateReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoFogGate_2eproto() {
  delete FogGateCPP::default_instance_;
  delete FogGateCPP_reflection_;
  delete FogGateCPPAll::default_instance_;
  delete FogGateCPPAll_reflection_;
  delete StartFogGateReq::default_instance_;
  delete StartFogGateReq_reflection_;
  delete PushFogGateReq::default_instance_;
  delete PushFogGateReq_reflection_;
}

void protobuf_AddDesc_ProtoFogGate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoFogGate.proto\022\014ProtoFogGate\"-\n\nFo"
    "gGateCPP\022\016\n\006gateid\030\001 \002(\r\022\017\n\007leftnpc\030\002 \002("
    "\r\";\n\rFogGateCPPAll\022*\n\010foggates\030\001 \003(\0132\030.P"
    "rotoFogGate.FogGateCPP\"0\n\017StartFogGateRe"
    "q\022\016\n\006gateid\030\001 \002(\r\022\r\n\005heros\030\002 \003(\r\"1\n\016Push"
    "FogGateReq\022\016\n\006gateid\030\001 \002(\r\022\017\n\007leftnpc\030\002 "
    "\002(\r", 243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoFogGate.proto", &protobuf_RegisterTypes);
  FogGateCPP::default_instance_ = new FogGateCPP();
  FogGateCPPAll::default_instance_ = new FogGateCPPAll();
  StartFogGateReq::default_instance_ = new StartFogGateReq();
  PushFogGateReq::default_instance_ = new PushFogGateReq();
  FogGateCPP::default_instance_->InitAsDefaultInstance();
  FogGateCPPAll::default_instance_->InitAsDefaultInstance();
  StartFogGateReq::default_instance_->InitAsDefaultInstance();
  PushFogGateReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoFogGate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoFogGate_2eproto {
  StaticDescriptorInitializer_ProtoFogGate_2eproto() {
    protobuf_AddDesc_ProtoFogGate_2eproto();
  }
} static_descriptor_initializer_ProtoFogGate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FogGateCPP::kGateidFieldNumber;
const int FogGateCPP::kLeftnpcFieldNumber;
#endif  // !_MSC_VER

FogGateCPP::FogGateCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFogGate.FogGateCPP)
}

void FogGateCPP::InitAsDefaultInstance() {
}

FogGateCPP::FogGateCPP(const FogGateCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFogGate.FogGateCPP)
}

void FogGateCPP::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  leftnpc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FogGateCPP::~FogGateCPP() {
  // @@protoc_insertion_point(destructor:ProtoFogGate.FogGateCPP)
  SharedDtor();
}

void FogGateCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FogGateCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FogGateCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FogGateCPP_descriptor_;
}

const FogGateCPP& FogGateCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFogGate_2eproto();
  return *default_instance_;
}

FogGateCPP* FogGateCPP::default_instance_ = NULL;

FogGateCPP* FogGateCPP::New() const {
  return new FogGateCPP;
}

void FogGateCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FogGateCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gateid_, leftnpc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FogGateCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFogGate.FogGateCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leftnpc;
        break;
      }

      // required uint32 leftnpc = 2;
      case 2: {
        if (tag == 16) {
         parse_leftnpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftnpc_)));
          set_has_leftnpc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFogGate.FogGateCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFogGate.FogGateCPP)
  return false;
#undef DO_
}

void FogGateCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFogGate.FogGateCPP)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 leftnpc = 2;
  if (has_leftnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leftnpc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFogGate.FogGateCPP)
}

::google::protobuf::uint8* FogGateCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFogGate.FogGateCPP)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 leftnpc = 2;
  if (has_leftnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leftnpc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFogGate.FogGateCPP)
  return target;
}

int FogGateCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 leftnpc = 2;
    if (has_leftnpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftnpc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FogGateCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FogGateCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FogGateCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FogGateCPP::MergeFrom(const FogGateCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_leftnpc()) {
      set_leftnpc(from.leftnpc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FogGateCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FogGateCPP::CopyFrom(const FogGateCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FogGateCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FogGateCPP::Swap(FogGateCPP* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(leftnpc_, other->leftnpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FogGateCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FogGateCPP_descriptor_;
  metadata.reflection = FogGateCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FogGateCPPAll::kFoggatesFieldNumber;
#endif  // !_MSC_VER

FogGateCPPAll::FogGateCPPAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFogGate.FogGateCPPAll)
}

void FogGateCPPAll::InitAsDefaultInstance() {
}

FogGateCPPAll::FogGateCPPAll(const FogGateCPPAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFogGate.FogGateCPPAll)
}

void FogGateCPPAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FogGateCPPAll::~FogGateCPPAll() {
  // @@protoc_insertion_point(destructor:ProtoFogGate.FogGateCPPAll)
  SharedDtor();
}

void FogGateCPPAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FogGateCPPAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FogGateCPPAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FogGateCPPAll_descriptor_;
}

const FogGateCPPAll& FogGateCPPAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFogGate_2eproto();
  return *default_instance_;
}

FogGateCPPAll* FogGateCPPAll::default_instance_ = NULL;

FogGateCPPAll* FogGateCPPAll::New() const {
  return new FogGateCPPAll;
}

void FogGateCPPAll::Clear() {
  foggates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FogGateCPPAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFogGate.FogGateCPPAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoFogGate.FogGateCPP foggates = 1;
      case 1: {
        if (tag == 10) {
         parse_foggates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_foggates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_foggates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFogGate.FogGateCPPAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFogGate.FogGateCPPAll)
  return false;
#undef DO_
}

void FogGateCPPAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFogGate.FogGateCPPAll)
  // repeated .ProtoFogGate.FogGateCPP foggates = 1;
  for (int i = 0; i < this->foggates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->foggates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFogGate.FogGateCPPAll)
}

::google::protobuf::uint8* FogGateCPPAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFogGate.FogGateCPPAll)
  // repeated .ProtoFogGate.FogGateCPP foggates = 1;
  for (int i = 0; i < this->foggates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->foggates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFogGate.FogGateCPPAll)
  return target;
}

int FogGateCPPAll::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoFogGate.FogGateCPP foggates = 1;
  total_size += 1 * this->foggates_size();
  for (int i = 0; i < this->foggates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->foggates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FogGateCPPAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FogGateCPPAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FogGateCPPAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FogGateCPPAll::MergeFrom(const FogGateCPPAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  foggates_.MergeFrom(from.foggates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FogGateCPPAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FogGateCPPAll::CopyFrom(const FogGateCPPAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FogGateCPPAll::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->foggates())) return false;
  return true;
}

void FogGateCPPAll::Swap(FogGateCPPAll* other) {
  if (other != this) {
    foggates_.Swap(&other->foggates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FogGateCPPAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FogGateCPPAll_descriptor_;
  metadata.reflection = FogGateCPPAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartFogGateReq::kGateidFieldNumber;
const int StartFogGateReq::kHerosFieldNumber;
#endif  // !_MSC_VER

StartFogGateReq::StartFogGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFogGate.StartFogGateReq)
}

void StartFogGateReq::InitAsDefaultInstance() {
}

StartFogGateReq::StartFogGateReq(const StartFogGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFogGate.StartFogGateReq)
}

void StartFogGateReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartFogGateReq::~StartFogGateReq() {
  // @@protoc_insertion_point(destructor:ProtoFogGate.StartFogGateReq)
  SharedDtor();
}

void StartFogGateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartFogGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartFogGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartFogGateReq_descriptor_;
}

const StartFogGateReq& StartFogGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFogGate_2eproto();
  return *default_instance_;
}

StartFogGateReq* StartFogGateReq::default_instance_ = NULL;

StartFogGateReq* StartFogGateReq::New() const {
  return new StartFogGateReq;
}

void StartFogGateReq::Clear() {
  gateid_ = 0u;
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartFogGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFogGate.StartFogGateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heros;
        break;
      }

      // repeated uint32 heros = 2;
      case 2: {
        if (tag == 16) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_heros())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_heros;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFogGate.StartFogGateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFogGate.StartFogGateReq)
  return false;
#undef DO_
}

void StartFogGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFogGate.StartFogGateReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // repeated uint32 heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFogGate.StartFogGateReq)
}

::google::protobuf::uint8* StartFogGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFogGate.StartFogGateReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // repeated uint32 heros = 2;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFogGate.StartFogGateReq)
  return target;
}

int StartFogGateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

  }
  // repeated uint32 heros = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartFogGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartFogGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartFogGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartFogGateReq::MergeFrom(const StartFogGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartFogGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartFogGateReq::CopyFrom(const StartFogGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartFogGateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartFogGateReq::Swap(StartFogGateReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartFogGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartFogGateReq_descriptor_;
  metadata.reflection = StartFogGateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushFogGateReq::kGateidFieldNumber;
const int PushFogGateReq::kLeftnpcFieldNumber;
#endif  // !_MSC_VER

PushFogGateReq::PushFogGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFogGate.PushFogGateReq)
}

void PushFogGateReq::InitAsDefaultInstance() {
}

PushFogGateReq::PushFogGateReq(const PushFogGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFogGate.PushFogGateReq)
}

void PushFogGateReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  leftnpc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushFogGateReq::~PushFogGateReq() {
  // @@protoc_insertion_point(destructor:ProtoFogGate.PushFogGateReq)
  SharedDtor();
}

void PushFogGateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PushFogGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushFogGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushFogGateReq_descriptor_;
}

const PushFogGateReq& PushFogGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoFogGate_2eproto();
  return *default_instance_;
}

PushFogGateReq* PushFogGateReq::default_instance_ = NULL;

PushFogGateReq* PushFogGateReq::New() const {
  return new PushFogGateReq;
}

void PushFogGateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushFogGateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gateid_, leftnpc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushFogGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFogGate.PushFogGateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leftnpc;
        break;
      }

      // required uint32 leftnpc = 2;
      case 2: {
        if (tag == 16) {
         parse_leftnpc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftnpc_)));
          set_has_leftnpc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFogGate.PushFogGateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFogGate.PushFogGateReq)
  return false;
#undef DO_
}

void PushFogGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFogGate.PushFogGateReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 leftnpc = 2;
  if (has_leftnpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leftnpc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFogGate.PushFogGateReq)
}

::google::protobuf::uint8* PushFogGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFogGate.PushFogGateReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 leftnpc = 2;
  if (has_leftnpc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leftnpc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFogGate.PushFogGateReq)
  return target;
}

int PushFogGateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 leftnpc = 2;
    if (has_leftnpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftnpc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushFogGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushFogGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushFogGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushFogGateReq::MergeFrom(const PushFogGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_leftnpc()) {
      set_leftnpc(from.leftnpc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushFogGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushFogGateReq::CopyFrom(const PushFogGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushFogGateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PushFogGateReq::Swap(PushFogGateReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(leftnpc_, other->leftnpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushFogGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushFogGateReq_descriptor_;
  metadata.reflection = PushFogGateReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoFogGate

// @@protoc_insertion_point(global_scope)
