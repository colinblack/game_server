// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoMine.proto

#ifndef PROTOBUF_ProtoMine_2eproto__INCLUDED
#define PROTOBUF_ProtoMine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DataCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoMine {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoMine_2eproto();
void protobuf_AssignDesc_ProtoMine_2eproto();
void protobuf_ShutdownFile_ProtoMine_2eproto();

class MineItem;
class MineRecord;
class MineInfoReq;
class MineInfoResp;
class MineNormalOpenReq;
class MineKingdomOpenReq;
class MineOpenResp;
class DonateNormalReq;
class DonateKingdomReq;
class DonateResp;
class MineKingdomRewardReq;
class MineKingdomRewardResp;
class MineKingdomMinerRewardReq;
class MineKingdomMinerRewardResp;
class MineRecordReq;
class MineRecordResp;
class SyncUserBaseInfo;

// ===================================================================

class MineItem : public ::google::protobuf::Message {
 public:
  MineItem();
  virtual ~MineItem();

  MineItem(const MineItem& from);

  inline MineItem& operator=(const MineItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineItem& default_instance();

  void Swap(MineItem* other);

  // implements Message ----------------------------------------------

  MineItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineItem& from);
  void MergeFrom(const MineItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 donate_cnt = 3;
  inline bool has_donate_cnt() const;
  inline void clear_donate_cnt();
  static const int kDonateCntFieldNumber = 3;
  inline ::google::protobuf::uint32 donate_cnt() const;
  inline void set_donate_cnt(::google::protobuf::uint32 value);

  // required bool is_donate = 4;
  inline bool has_is_donate() const;
  inline void clear_is_donate();
  static const int kIsDonateFieldNumber = 4;
  inline bool is_donate() const;
  inline void set_is_donate(bool value);

  // required bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ProtoMine.MineItem)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_donate_cnt();
  inline void clear_has_donate_cnt();
  inline void set_has_is_donate();
  inline void clear_has_is_donate();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 donate_cnt_;
  bool is_donate_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineItem* default_instance_;
};
// -------------------------------------------------------------------

class MineRecord : public ::google::protobuf::Message {
 public:
  MineRecord();
  virtual ~MineRecord();

  MineRecord(const MineRecord& from);

  inline MineRecord& operator=(const MineRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineRecord& default_instance();

  void Swap(MineRecord* other);

  // implements Message ----------------------------------------------

  MineRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineRecord& from);
  void MergeFrom(const MineRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes operate = 1;
  inline bool has_operate() const;
  inline void clear_operate();
  static const int kOperateFieldNumber = 1;
  inline const ::std::string& operate() const;
  inline void set_operate(const ::std::string& value);
  inline void set_operate(const char* value);
  inline void set_operate(const void* value, size_t size);
  inline ::std::string* mutable_operate();
  inline ::std::string* release_operate();
  inline void set_allocated_operate(::std::string* operate);

  // required bytes target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const void* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // required uint32 op = 3;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 3;
  inline ::google::protobuf::uint32 op() const;
  inline void set_op(::google::protobuf::uint32 value);

  // required uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated uint32 params = 5;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline ::google::protobuf::uint32 params(int index) const;
  inline void set_params(int index, ::google::protobuf::uint32 value);
  inline void add_params(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_params();

  // required uint32 ts = 6;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 6;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoMine.MineRecord)
 private:
  inline void set_has_operate();
  inline void clear_has_operate();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* operate_;
  ::std::string* target_;
  ::google::protobuf::uint32 op_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > params_;
  ::google::protobuf::uint32 ts_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineRecord* default_instance_;
};
// -------------------------------------------------------------------

class MineInfoReq : public ::google::protobuf::Message {
 public:
  MineInfoReq();
  virtual ~MineInfoReq();

  MineInfoReq(const MineInfoReq& from);

  inline MineInfoReq& operator=(const MineInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineInfoReq& default_instance();

  void Swap(MineInfoReq* other);

  // implements Message ----------------------------------------------

  MineInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineInfoReq& from);
  void MergeFrom(const MineInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMine.MineInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class MineInfoResp : public ::google::protobuf::Message {
 public:
  MineInfoResp();
  virtual ~MineInfoResp();

  MineInfoResp(const MineInfoResp& from);

  inline MineInfoResp& operator=(const MineInfoResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineInfoResp& default_instance();

  void Swap(MineInfoResp* other);

  // implements Message ----------------------------------------------

  MineInfoResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineInfoResp& from);
  void MergeFrom(const MineInfoResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mine_exp = 1;
  inline bool has_mine_exp() const;
  inline void clear_mine_exp();
  static const int kMineExpFieldNumber = 1;
  inline ::google::protobuf::uint32 mine_exp() const;
  inline void set_mine_exp(::google::protobuf::uint32 value);

  // required uint32 mine_level = 2;
  inline bool has_mine_level() const;
  inline void clear_mine_level();
  static const int kMineLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 mine_level() const;
  inline void set_mine_level(::google::protobuf::uint32 value);

  // required .ProtoMine.MineItem kingdom_mine = 3;
  inline bool has_kingdom_mine() const;
  inline void clear_kingdom_mine();
  static const int kKingdomMineFieldNumber = 3;
  inline const ::ProtoMine::MineItem& kingdom_mine() const;
  inline ::ProtoMine::MineItem* mutable_kingdom_mine();
  inline ::ProtoMine::MineItem* release_kingdom_mine();
  inline void set_allocated_kingdom_mine(::ProtoMine::MineItem* kingdom_mine);

  // repeated .ProtoMine.MineItem normal_mine = 4;
  inline int normal_mine_size() const;
  inline void clear_normal_mine();
  static const int kNormalMineFieldNumber = 4;
  inline const ::ProtoMine::MineItem& normal_mine(int index) const;
  inline ::ProtoMine::MineItem* mutable_normal_mine(int index);
  inline ::ProtoMine::MineItem* add_normal_mine();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineItem >&
      normal_mine() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineItem >*
      mutable_normal_mine();

  // required uint32 mine_normal_ts = 5;
  inline bool has_mine_normal_ts() const;
  inline void clear_mine_normal_ts();
  static const int kMineNormalTsFieldNumber = 5;
  inline ::google::protobuf::uint32 mine_normal_ts() const;
  inline void set_mine_normal_ts(::google::protobuf::uint32 value);

  // required uint32 mine_reward_ts = 6;
  inline bool has_mine_reward_ts() const;
  inline void clear_mine_reward_ts();
  static const int kMineRewardTsFieldNumber = 6;
  inline ::google::protobuf::uint32 mine_reward_ts() const;
  inline void set_mine_reward_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoMine.MineInfoResp)
 private:
  inline void set_has_mine_exp();
  inline void clear_has_mine_exp();
  inline void set_has_mine_level();
  inline void clear_has_mine_level();
  inline void set_has_kingdom_mine();
  inline void clear_has_kingdom_mine();
  inline void set_has_mine_normal_ts();
  inline void clear_has_mine_normal_ts();
  inline void set_has_mine_reward_ts();
  inline void clear_has_mine_reward_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mine_exp_;
  ::google::protobuf::uint32 mine_level_;
  ::ProtoMine::MineItem* kingdom_mine_;
  ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineItem > normal_mine_;
  ::google::protobuf::uint32 mine_normal_ts_;
  ::google::protobuf::uint32 mine_reward_ts_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineInfoResp* default_instance_;
};
// -------------------------------------------------------------------

class MineNormalOpenReq : public ::google::protobuf::Message {
 public:
  MineNormalOpenReq();
  virtual ~MineNormalOpenReq();

  MineNormalOpenReq(const MineNormalOpenReq& from);

  inline MineNormalOpenReq& operator=(const MineNormalOpenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineNormalOpenReq& default_instance();

  void Swap(MineNormalOpenReq* other);

  // implements Message ----------------------------------------------

  MineNormalOpenReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineNormalOpenReq& from);
  void MergeFrom(const MineNormalOpenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoMine.MineNormalOpenReq)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineNormalOpenReq* default_instance_;
};
// -------------------------------------------------------------------

class MineKingdomOpenReq : public ::google::protobuf::Message {
 public:
  MineKingdomOpenReq();
  virtual ~MineKingdomOpenReq();

  MineKingdomOpenReq(const MineKingdomOpenReq& from);

  inline MineKingdomOpenReq& operator=(const MineKingdomOpenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineKingdomOpenReq& default_instance();

  void Swap(MineKingdomOpenReq* other);

  // implements Message ----------------------------------------------

  MineKingdomOpenReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineKingdomOpenReq& from);
  void MergeFrom(const MineKingdomOpenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMine.MineKingdomOpenReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineKingdomOpenReq* default_instance_;
};
// -------------------------------------------------------------------

class MineOpenResp : public ::google::protobuf::Message {
 public:
  MineOpenResp();
  virtual ~MineOpenResp();

  MineOpenResp(const MineOpenResp& from);

  inline MineOpenResp& operator=(const MineOpenResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineOpenResp& default_instance();

  void Swap(MineOpenResp* other);

  // implements Message ----------------------------------------------

  MineOpenResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineOpenResp& from);
  void MergeFrom(const MineOpenResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoMine.MineItem mine = 1;
  inline bool has_mine() const;
  inline void clear_mine();
  static const int kMineFieldNumber = 1;
  inline const ::ProtoMine::MineItem& mine() const;
  inline ::ProtoMine::MineItem* mutable_mine();
  inline ::ProtoMine::MineItem* release_mine();
  inline void set_allocated_mine(::ProtoMine::MineItem* mine);

  // required .DataCommon.UserResourceCPP assets = 2;
  inline bool has_assets() const;
  inline void clear_assets();
  static const int kAssetsFieldNumber = 2;
  inline const ::DataCommon::UserResourceCPP& assets() const;
  inline ::DataCommon::UserResourceCPP* mutable_assets();
  inline ::DataCommon::UserResourceCPP* release_assets();
  inline void set_allocated_assets(::DataCommon::UserResourceCPP* assets);

  // required uint32 mine_exp = 3;
  inline bool has_mine_exp() const;
  inline void clear_mine_exp();
  static const int kMineExpFieldNumber = 3;
  inline ::google::protobuf::uint32 mine_exp() const;
  inline void set_mine_exp(::google::protobuf::uint32 value);

  // required uint32 mine_level = 4;
  inline bool has_mine_level() const;
  inline void clear_mine_level();
  static const int kMineLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 mine_level() const;
  inline void set_mine_level(::google::protobuf::uint32 value);

  // optional uint32 mine_normal_ts = 5;
  inline bool has_mine_normal_ts() const;
  inline void clear_mine_normal_ts();
  static const int kMineNormalTsFieldNumber = 5;
  inline ::google::protobuf::uint32 mine_normal_ts() const;
  inline void set_mine_normal_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoMine.MineOpenResp)
 private:
  inline void set_has_mine();
  inline void clear_has_mine();
  inline void set_has_assets();
  inline void clear_has_assets();
  inline void set_has_mine_exp();
  inline void clear_has_mine_exp();
  inline void set_has_mine_level();
  inline void clear_has_mine_level();
  inline void set_has_mine_normal_ts();
  inline void clear_has_mine_normal_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoMine::MineItem* mine_;
  ::DataCommon::UserResourceCPP* assets_;
  ::google::protobuf::uint32 mine_exp_;
  ::google::protobuf::uint32 mine_level_;
  ::google::protobuf::uint32 mine_normal_ts_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineOpenResp* default_instance_;
};
// -------------------------------------------------------------------

class DonateNormalReq : public ::google::protobuf::Message {
 public:
  DonateNormalReq();
  virtual ~DonateNormalReq();

  DonateNormalReq(const DonateNormalReq& from);

  inline DonateNormalReq& operator=(const DonateNormalReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DonateNormalReq& default_instance();

  void Swap(DonateNormalReq* other);

  // implements Message ----------------------------------------------

  DonateNormalReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DonateNormalReq& from);
  void MergeFrom(const DonateNormalReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoMine.DonateNormalReq)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static DonateNormalReq* default_instance_;
};
// -------------------------------------------------------------------

class DonateKingdomReq : public ::google::protobuf::Message {
 public:
  DonateKingdomReq();
  virtual ~DonateKingdomReq();

  DonateKingdomReq(const DonateKingdomReq& from);

  inline DonateKingdomReq& operator=(const DonateKingdomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DonateKingdomReq& default_instance();

  void Swap(DonateKingdomReq* other);

  // implements Message ----------------------------------------------

  DonateKingdomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DonateKingdomReq& from);
  void MergeFrom(const DonateKingdomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMine.DonateKingdomReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static DonateKingdomReq* default_instance_;
};
// -------------------------------------------------------------------

class DonateResp : public ::google::protobuf::Message {
 public:
  DonateResp();
  virtual ~DonateResp();

  DonateResp(const DonateResp& from);

  inline DonateResp& operator=(const DonateResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DonateResp& default_instance();

  void Swap(DonateResp* other);

  // implements Message ----------------------------------------------

  DonateResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DonateResp& from);
  void MergeFrom(const DonateResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoMine.MineItem mine = 1;
  inline bool has_mine() const;
  inline void clear_mine();
  static const int kMineFieldNumber = 1;
  inline const ::ProtoMine::MineItem& mine() const;
  inline ::ProtoMine::MineItem* mutable_mine();
  inline ::ProtoMine::MineItem* release_mine();
  inline void set_allocated_mine(::ProtoMine::MineItem* mine);

  // required .DataCommon.UserResourceCPP assets = 2;
  inline bool has_assets() const;
  inline void clear_assets();
  static const int kAssetsFieldNumber = 2;
  inline const ::DataCommon::UserResourceCPP& assets() const;
  inline ::DataCommon::UserResourceCPP* mutable_assets();
  inline ::DataCommon::UserResourceCPP* release_assets();
  inline void set_allocated_assets(::DataCommon::UserResourceCPP* assets);

  // required uint32 mine_exp = 3;
  inline bool has_mine_exp() const;
  inline void clear_mine_exp();
  static const int kMineExpFieldNumber = 3;
  inline ::google::protobuf::uint32 mine_exp() const;
  inline void set_mine_exp(::google::protobuf::uint32 value);

  // required uint32 mine_level = 4;
  inline bool has_mine_level() const;
  inline void clear_mine_level();
  static const int kMineLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 mine_level() const;
  inline void set_mine_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoMine.DonateResp)
 private:
  inline void set_has_mine();
  inline void clear_has_mine();
  inline void set_has_assets();
  inline void clear_has_assets();
  inline void set_has_mine_exp();
  inline void clear_has_mine_exp();
  inline void set_has_mine_level();
  inline void clear_has_mine_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoMine::MineItem* mine_;
  ::DataCommon::UserResourceCPP* assets_;
  ::google::protobuf::uint32 mine_exp_;
  ::google::protobuf::uint32 mine_level_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static DonateResp* default_instance_;
};
// -------------------------------------------------------------------

class MineKingdomRewardReq : public ::google::protobuf::Message {
 public:
  MineKingdomRewardReq();
  virtual ~MineKingdomRewardReq();

  MineKingdomRewardReq(const MineKingdomRewardReq& from);

  inline MineKingdomRewardReq& operator=(const MineKingdomRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineKingdomRewardReq& default_instance();

  void Swap(MineKingdomRewardReq* other);

  // implements Message ----------------------------------------------

  MineKingdomRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineKingdomRewardReq& from);
  void MergeFrom(const MineKingdomRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMine.MineKingdomRewardReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineKingdomRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class MineKingdomRewardResp : public ::google::protobuf::Message {
 public:
  MineKingdomRewardResp();
  virtual ~MineKingdomRewardResp();

  MineKingdomRewardResp(const MineKingdomRewardResp& from);

  inline MineKingdomRewardResp& operator=(const MineKingdomRewardResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineKingdomRewardResp& default_instance();

  void Swap(MineKingdomRewardResp* other);

  // implements Message ----------------------------------------------

  MineKingdomRewardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineKingdomRewardResp& from);
  void MergeFrom(const MineKingdomRewardResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 op_ts = 1;
  inline bool has_op_ts() const;
  inline void clear_op_ts();
  static const int kOpTsFieldNumber = 1;
  inline ::google::protobuf::uint32 op_ts() const;
  inline void set_op_ts(::google::protobuf::uint32 value);

  // required .DataCommon.UserResourceCPP assets = 2;
  inline bool has_assets() const;
  inline void clear_assets();
  static const int kAssetsFieldNumber = 2;
  inline const ::DataCommon::UserResourceCPP& assets() const;
  inline ::DataCommon::UserResourceCPP* mutable_assets();
  inline ::DataCommon::UserResourceCPP* release_assets();
  inline void set_allocated_assets(::DataCommon::UserResourceCPP* assets);

  // @@protoc_insertion_point(class_scope:ProtoMine.MineKingdomRewardResp)
 private:
  inline void set_has_op_ts();
  inline void clear_has_op_ts();
  inline void set_has_assets();
  inline void clear_has_assets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DataCommon::UserResourceCPP* assets_;
  ::google::protobuf::uint32 op_ts_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineKingdomRewardResp* default_instance_;
};
// -------------------------------------------------------------------

class MineKingdomMinerRewardReq : public ::google::protobuf::Message {
 public:
  MineKingdomMinerRewardReq();
  virtual ~MineKingdomMinerRewardReq();

  MineKingdomMinerRewardReq(const MineKingdomMinerRewardReq& from);

  inline MineKingdomMinerRewardReq& operator=(const MineKingdomMinerRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineKingdomMinerRewardReq& default_instance();

  void Swap(MineKingdomMinerRewardReq* other);

  // implements Message ----------------------------------------------

  MineKingdomMinerRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineKingdomMinerRewardReq& from);
  void MergeFrom(const MineKingdomMinerRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMine.MineKingdomMinerRewardReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineKingdomMinerRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class MineKingdomMinerRewardResp : public ::google::protobuf::Message {
 public:
  MineKingdomMinerRewardResp();
  virtual ~MineKingdomMinerRewardResp();

  MineKingdomMinerRewardResp(const MineKingdomMinerRewardResp& from);

  inline MineKingdomMinerRewardResp& operator=(const MineKingdomMinerRewardResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineKingdomMinerRewardResp& default_instance();

  void Swap(MineKingdomMinerRewardResp* other);

  // implements Message ----------------------------------------------

  MineKingdomMinerRewardResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineKingdomMinerRewardResp& from);
  void MergeFrom(const MineKingdomMinerRewardResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 op_ts = 1;
  inline bool has_op_ts() const;
  inline void clear_op_ts();
  static const int kOpTsFieldNumber = 1;
  inline ::google::protobuf::uint32 op_ts() const;
  inline void set_op_ts(::google::protobuf::uint32 value);

  // required .DataCommon.RewardItemCPP exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline const ::DataCommon::RewardItemCPP& exp() const;
  inline ::DataCommon::RewardItemCPP* mutable_exp();
  inline ::DataCommon::RewardItemCPP* release_exp();
  inline void set_allocated_exp(::DataCommon::RewardItemCPP* exp);

  // @@protoc_insertion_point(class_scope:ProtoMine.MineKingdomMinerRewardResp)
 private:
  inline void set_has_op_ts();
  inline void clear_has_op_ts();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DataCommon::RewardItemCPP* exp_;
  ::google::protobuf::uint32 op_ts_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineKingdomMinerRewardResp* default_instance_;
};
// -------------------------------------------------------------------

class MineRecordReq : public ::google::protobuf::Message {
 public:
  MineRecordReq();
  virtual ~MineRecordReq();

  MineRecordReq(const MineRecordReq& from);

  inline MineRecordReq& operator=(const MineRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineRecordReq& default_instance();

  void Swap(MineRecordReq* other);

  // implements Message ----------------------------------------------

  MineRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineRecordReq& from);
  void MergeFrom(const MineRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProtoMine.MineRecordReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineRecordReq* default_instance_;
};
// -------------------------------------------------------------------

class MineRecordResp : public ::google::protobuf::Message {
 public:
  MineRecordResp();
  virtual ~MineRecordResp();

  MineRecordResp(const MineRecordResp& from);

  inline MineRecordResp& operator=(const MineRecordResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MineRecordResp& default_instance();

  void Swap(MineRecordResp* other);

  // implements Message ----------------------------------------------

  MineRecordResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MineRecordResp& from);
  void MergeFrom(const MineRecordResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoMine.MineRecord records = 1;
  inline int records_size() const;
  inline void clear_records();
  static const int kRecordsFieldNumber = 1;
  inline const ::ProtoMine::MineRecord& records(int index) const;
  inline ::ProtoMine::MineRecord* mutable_records(int index);
  inline ::ProtoMine::MineRecord* add_records();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineRecord >&
      records() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineRecord >*
      mutable_records();

  // @@protoc_insertion_point(class_scope:ProtoMine.MineRecordResp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineRecord > records_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static MineRecordResp* default_instance_;
};
// -------------------------------------------------------------------

class SyncUserBaseInfo : public ::google::protobuf::Message {
 public:
  SyncUserBaseInfo();
  virtual ~SyncUserBaseInfo();

  SyncUserBaseInfo(const SyncUserBaseInfo& from);

  inline SyncUserBaseInfo& operator=(const SyncUserBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncUserBaseInfo& default_instance();

  void Swap(SyncUserBaseInfo* other);

  // implements Message ----------------------------------------------

  SyncUserBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncUserBaseInfo& from);
  void MergeFrom(const SyncUserBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .DataCommon.CommonBaseRewardCPP info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::DataCommon::CommonBaseRewardCPP& info() const;
  inline ::DataCommon::CommonBaseRewardCPP* mutable_info();
  inline ::DataCommon::CommonBaseRewardCPP* release_info();
  inline void set_allocated_info(::DataCommon::CommonBaseRewardCPP* info);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoMine.SyncUserBaseInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::DataCommon::CommonBaseRewardCPP* info_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_ProtoMine_2eproto();
  friend void protobuf_AssignDesc_ProtoMine_2eproto();
  friend void protobuf_ShutdownFile_ProtoMine_2eproto();

  void InitAsDefaultInstance();
  static SyncUserBaseInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// MineItem

// required uint32 uid = 1;
inline bool MineItem::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MineItem::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MineItem::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MineItem::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 MineItem::uid() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineItem.uid)
  return uid_;
}
inline void MineItem::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineItem.uid)
}

// required uint32 level = 2;
inline bool MineItem::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MineItem::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MineItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MineItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 MineItem::level() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineItem.level)
  return level_;
}
inline void MineItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineItem.level)
}

// required uint32 donate_cnt = 3;
inline bool MineItem::has_donate_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MineItem::set_has_donate_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MineItem::clear_has_donate_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MineItem::clear_donate_cnt() {
  donate_cnt_ = 0u;
  clear_has_donate_cnt();
}
inline ::google::protobuf::uint32 MineItem::donate_cnt() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineItem.donate_cnt)
  return donate_cnt_;
}
inline void MineItem::set_donate_cnt(::google::protobuf::uint32 value) {
  set_has_donate_cnt();
  donate_cnt_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineItem.donate_cnt)
}

// required bool is_donate = 4;
inline bool MineItem::has_is_donate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MineItem::set_has_is_donate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MineItem::clear_has_is_donate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MineItem::clear_is_donate() {
  is_donate_ = false;
  clear_has_is_donate();
}
inline bool MineItem::is_donate() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineItem.is_donate)
  return is_donate_;
}
inline void MineItem::set_is_donate(bool value) {
  set_has_is_donate();
  is_donate_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineItem.is_donate)
}

// required bytes name = 5;
inline bool MineItem::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MineItem::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MineItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MineItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MineItem::name() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineItem.name)
  return *name_;
}
inline void MineItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoMine.MineItem.name)
}
inline void MineItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoMine.MineItem.name)
}
inline void MineItem::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoMine.MineItem.name)
}
inline ::std::string* MineItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineItem.name)
  return name_;
}
inline ::std::string* MineItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MineItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.MineItem.name)
}

// -------------------------------------------------------------------

// MineRecord

// required bytes operate = 1;
inline bool MineRecord::has_operate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MineRecord::set_has_operate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MineRecord::clear_has_operate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MineRecord::clear_operate() {
  if (operate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operate_->clear();
  }
  clear_has_operate();
}
inline const ::std::string& MineRecord::operate() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineRecord.operate)
  return *operate_;
}
inline void MineRecord::set_operate(const ::std::string& value) {
  set_has_operate();
  if (operate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operate_ = new ::std::string;
  }
  operate_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoMine.MineRecord.operate)
}
inline void MineRecord::set_operate(const char* value) {
  set_has_operate();
  if (operate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operate_ = new ::std::string;
  }
  operate_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoMine.MineRecord.operate)
}
inline void MineRecord::set_operate(const void* value, size_t size) {
  set_has_operate();
  if (operate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operate_ = new ::std::string;
  }
  operate_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoMine.MineRecord.operate)
}
inline ::std::string* MineRecord::mutable_operate() {
  set_has_operate();
  if (operate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    operate_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineRecord.operate)
  return operate_;
}
inline ::std::string* MineRecord::release_operate() {
  clear_has_operate();
  if (operate_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = operate_;
    operate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MineRecord::set_allocated_operate(::std::string* operate) {
  if (operate_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete operate_;
  }
  if (operate) {
    set_has_operate();
    operate_ = operate;
  } else {
    clear_has_operate();
    operate_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.MineRecord.operate)
}

// required bytes target = 2;
inline bool MineRecord::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MineRecord::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MineRecord::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MineRecord::clear_target() {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& MineRecord::target() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineRecord.target)
  return *target_;
}
inline void MineRecord::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoMine.MineRecord.target)
}
inline void MineRecord::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoMine.MineRecord.target)
}
inline void MineRecord::set_target(const void* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoMine.MineRecord.target)
}
inline ::std::string* MineRecord::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineRecord.target)
  return target_;
}
inline ::std::string* MineRecord::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MineRecord::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.MineRecord.target)
}

// required uint32 op = 3;
inline bool MineRecord::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MineRecord::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MineRecord::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MineRecord::clear_op() {
  op_ = 0u;
  clear_has_op();
}
inline ::google::protobuf::uint32 MineRecord::op() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineRecord.op)
  return op_;
}
inline void MineRecord::set_op(::google::protobuf::uint32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineRecord.op)
}

// required uint32 type = 4;
inline bool MineRecord::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MineRecord::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MineRecord::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MineRecord::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 MineRecord::type() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineRecord.type)
  return type_;
}
inline void MineRecord::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineRecord.type)
}

// repeated uint32 params = 5;
inline int MineRecord::params_size() const {
  return params_.size();
}
inline void MineRecord::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::uint32 MineRecord::params(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineRecord.params)
  return params_.Get(index);
}
inline void MineRecord::set_params(int index, ::google::protobuf::uint32 value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoMine.MineRecord.params)
}
inline void MineRecord::add_params(::google::protobuf::uint32 value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoMine.MineRecord.params)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MineRecord::params() const {
  // @@protoc_insertion_point(field_list:ProtoMine.MineRecord.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MineRecord::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMine.MineRecord.params)
  return &params_;
}

// required uint32 ts = 6;
inline bool MineRecord::has_ts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MineRecord::set_has_ts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MineRecord::clear_has_ts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MineRecord::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 MineRecord::ts() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineRecord.ts)
  return ts_;
}
inline void MineRecord::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineRecord.ts)
}

// -------------------------------------------------------------------

// MineInfoReq

// -------------------------------------------------------------------

// MineInfoResp

// required uint32 mine_exp = 1;
inline bool MineInfoResp::has_mine_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MineInfoResp::set_has_mine_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MineInfoResp::clear_has_mine_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MineInfoResp::clear_mine_exp() {
  mine_exp_ = 0u;
  clear_has_mine_exp();
}
inline ::google::protobuf::uint32 MineInfoResp::mine_exp() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineInfoResp.mine_exp)
  return mine_exp_;
}
inline void MineInfoResp::set_mine_exp(::google::protobuf::uint32 value) {
  set_has_mine_exp();
  mine_exp_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineInfoResp.mine_exp)
}

// required uint32 mine_level = 2;
inline bool MineInfoResp::has_mine_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MineInfoResp::set_has_mine_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MineInfoResp::clear_has_mine_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MineInfoResp::clear_mine_level() {
  mine_level_ = 0u;
  clear_has_mine_level();
}
inline ::google::protobuf::uint32 MineInfoResp::mine_level() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineInfoResp.mine_level)
  return mine_level_;
}
inline void MineInfoResp::set_mine_level(::google::protobuf::uint32 value) {
  set_has_mine_level();
  mine_level_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineInfoResp.mine_level)
}

// required .ProtoMine.MineItem kingdom_mine = 3;
inline bool MineInfoResp::has_kingdom_mine() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MineInfoResp::set_has_kingdom_mine() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MineInfoResp::clear_has_kingdom_mine() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MineInfoResp::clear_kingdom_mine() {
  if (kingdom_mine_ != NULL) kingdom_mine_->::ProtoMine::MineItem::Clear();
  clear_has_kingdom_mine();
}
inline const ::ProtoMine::MineItem& MineInfoResp::kingdom_mine() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineInfoResp.kingdom_mine)
  return kingdom_mine_ != NULL ? *kingdom_mine_ : *default_instance_->kingdom_mine_;
}
inline ::ProtoMine::MineItem* MineInfoResp::mutable_kingdom_mine() {
  set_has_kingdom_mine();
  if (kingdom_mine_ == NULL) kingdom_mine_ = new ::ProtoMine::MineItem;
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineInfoResp.kingdom_mine)
  return kingdom_mine_;
}
inline ::ProtoMine::MineItem* MineInfoResp::release_kingdom_mine() {
  clear_has_kingdom_mine();
  ::ProtoMine::MineItem* temp = kingdom_mine_;
  kingdom_mine_ = NULL;
  return temp;
}
inline void MineInfoResp::set_allocated_kingdom_mine(::ProtoMine::MineItem* kingdom_mine) {
  delete kingdom_mine_;
  kingdom_mine_ = kingdom_mine;
  if (kingdom_mine) {
    set_has_kingdom_mine();
  } else {
    clear_has_kingdom_mine();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.MineInfoResp.kingdom_mine)
}

// repeated .ProtoMine.MineItem normal_mine = 4;
inline int MineInfoResp::normal_mine_size() const {
  return normal_mine_.size();
}
inline void MineInfoResp::clear_normal_mine() {
  normal_mine_.Clear();
}
inline const ::ProtoMine::MineItem& MineInfoResp::normal_mine(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineInfoResp.normal_mine)
  return normal_mine_.Get(index);
}
inline ::ProtoMine::MineItem* MineInfoResp::mutable_normal_mine(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineInfoResp.normal_mine)
  return normal_mine_.Mutable(index);
}
inline ::ProtoMine::MineItem* MineInfoResp::add_normal_mine() {
  // @@protoc_insertion_point(field_add:ProtoMine.MineInfoResp.normal_mine)
  return normal_mine_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineItem >&
MineInfoResp::normal_mine() const {
  // @@protoc_insertion_point(field_list:ProtoMine.MineInfoResp.normal_mine)
  return normal_mine_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineItem >*
MineInfoResp::mutable_normal_mine() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMine.MineInfoResp.normal_mine)
  return &normal_mine_;
}

// required uint32 mine_normal_ts = 5;
inline bool MineInfoResp::has_mine_normal_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MineInfoResp::set_has_mine_normal_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MineInfoResp::clear_has_mine_normal_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MineInfoResp::clear_mine_normal_ts() {
  mine_normal_ts_ = 0u;
  clear_has_mine_normal_ts();
}
inline ::google::protobuf::uint32 MineInfoResp::mine_normal_ts() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineInfoResp.mine_normal_ts)
  return mine_normal_ts_;
}
inline void MineInfoResp::set_mine_normal_ts(::google::protobuf::uint32 value) {
  set_has_mine_normal_ts();
  mine_normal_ts_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineInfoResp.mine_normal_ts)
}

// required uint32 mine_reward_ts = 6;
inline bool MineInfoResp::has_mine_reward_ts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MineInfoResp::set_has_mine_reward_ts() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MineInfoResp::clear_has_mine_reward_ts() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MineInfoResp::clear_mine_reward_ts() {
  mine_reward_ts_ = 0u;
  clear_has_mine_reward_ts();
}
inline ::google::protobuf::uint32 MineInfoResp::mine_reward_ts() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineInfoResp.mine_reward_ts)
  return mine_reward_ts_;
}
inline void MineInfoResp::set_mine_reward_ts(::google::protobuf::uint32 value) {
  set_has_mine_reward_ts();
  mine_reward_ts_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineInfoResp.mine_reward_ts)
}

// -------------------------------------------------------------------

// MineNormalOpenReq

// required uint32 index = 1;
inline bool MineNormalOpenReq::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MineNormalOpenReq::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MineNormalOpenReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MineNormalOpenReq::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 MineNormalOpenReq::index() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineNormalOpenReq.index)
  return index_;
}
inline void MineNormalOpenReq::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineNormalOpenReq.index)
}

// -------------------------------------------------------------------

// MineKingdomOpenReq

// -------------------------------------------------------------------

// MineOpenResp

// required .ProtoMine.MineItem mine = 1;
inline bool MineOpenResp::has_mine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MineOpenResp::set_has_mine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MineOpenResp::clear_has_mine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MineOpenResp::clear_mine() {
  if (mine_ != NULL) mine_->::ProtoMine::MineItem::Clear();
  clear_has_mine();
}
inline const ::ProtoMine::MineItem& MineOpenResp::mine() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineOpenResp.mine)
  return mine_ != NULL ? *mine_ : *default_instance_->mine_;
}
inline ::ProtoMine::MineItem* MineOpenResp::mutable_mine() {
  set_has_mine();
  if (mine_ == NULL) mine_ = new ::ProtoMine::MineItem;
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineOpenResp.mine)
  return mine_;
}
inline ::ProtoMine::MineItem* MineOpenResp::release_mine() {
  clear_has_mine();
  ::ProtoMine::MineItem* temp = mine_;
  mine_ = NULL;
  return temp;
}
inline void MineOpenResp::set_allocated_mine(::ProtoMine::MineItem* mine) {
  delete mine_;
  mine_ = mine;
  if (mine) {
    set_has_mine();
  } else {
    clear_has_mine();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.MineOpenResp.mine)
}

// required .DataCommon.UserResourceCPP assets = 2;
inline bool MineOpenResp::has_assets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MineOpenResp::set_has_assets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MineOpenResp::clear_has_assets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MineOpenResp::clear_assets() {
  if (assets_ != NULL) assets_->::DataCommon::UserResourceCPP::Clear();
  clear_has_assets();
}
inline const ::DataCommon::UserResourceCPP& MineOpenResp::assets() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineOpenResp.assets)
  return assets_ != NULL ? *assets_ : *default_instance_->assets_;
}
inline ::DataCommon::UserResourceCPP* MineOpenResp::mutable_assets() {
  set_has_assets();
  if (assets_ == NULL) assets_ = new ::DataCommon::UserResourceCPP;
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineOpenResp.assets)
  return assets_;
}
inline ::DataCommon::UserResourceCPP* MineOpenResp::release_assets() {
  clear_has_assets();
  ::DataCommon::UserResourceCPP* temp = assets_;
  assets_ = NULL;
  return temp;
}
inline void MineOpenResp::set_allocated_assets(::DataCommon::UserResourceCPP* assets) {
  delete assets_;
  assets_ = assets;
  if (assets) {
    set_has_assets();
  } else {
    clear_has_assets();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.MineOpenResp.assets)
}

// required uint32 mine_exp = 3;
inline bool MineOpenResp::has_mine_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MineOpenResp::set_has_mine_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MineOpenResp::clear_has_mine_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MineOpenResp::clear_mine_exp() {
  mine_exp_ = 0u;
  clear_has_mine_exp();
}
inline ::google::protobuf::uint32 MineOpenResp::mine_exp() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineOpenResp.mine_exp)
  return mine_exp_;
}
inline void MineOpenResp::set_mine_exp(::google::protobuf::uint32 value) {
  set_has_mine_exp();
  mine_exp_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineOpenResp.mine_exp)
}

// required uint32 mine_level = 4;
inline bool MineOpenResp::has_mine_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MineOpenResp::set_has_mine_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MineOpenResp::clear_has_mine_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MineOpenResp::clear_mine_level() {
  mine_level_ = 0u;
  clear_has_mine_level();
}
inline ::google::protobuf::uint32 MineOpenResp::mine_level() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineOpenResp.mine_level)
  return mine_level_;
}
inline void MineOpenResp::set_mine_level(::google::protobuf::uint32 value) {
  set_has_mine_level();
  mine_level_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineOpenResp.mine_level)
}

// optional uint32 mine_normal_ts = 5;
inline bool MineOpenResp::has_mine_normal_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MineOpenResp::set_has_mine_normal_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MineOpenResp::clear_has_mine_normal_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MineOpenResp::clear_mine_normal_ts() {
  mine_normal_ts_ = 0u;
  clear_has_mine_normal_ts();
}
inline ::google::protobuf::uint32 MineOpenResp::mine_normal_ts() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineOpenResp.mine_normal_ts)
  return mine_normal_ts_;
}
inline void MineOpenResp::set_mine_normal_ts(::google::protobuf::uint32 value) {
  set_has_mine_normal_ts();
  mine_normal_ts_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineOpenResp.mine_normal_ts)
}

// -------------------------------------------------------------------

// DonateNormalReq

// required uint32 index = 1;
inline bool DonateNormalReq::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DonateNormalReq::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DonateNormalReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DonateNormalReq::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 DonateNormalReq::index() const {
  // @@protoc_insertion_point(field_get:ProtoMine.DonateNormalReq.index)
  return index_;
}
inline void DonateNormalReq::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.DonateNormalReq.index)
}

// -------------------------------------------------------------------

// DonateKingdomReq

// -------------------------------------------------------------------

// DonateResp

// required .ProtoMine.MineItem mine = 1;
inline bool DonateResp::has_mine() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DonateResp::set_has_mine() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DonateResp::clear_has_mine() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DonateResp::clear_mine() {
  if (mine_ != NULL) mine_->::ProtoMine::MineItem::Clear();
  clear_has_mine();
}
inline const ::ProtoMine::MineItem& DonateResp::mine() const {
  // @@protoc_insertion_point(field_get:ProtoMine.DonateResp.mine)
  return mine_ != NULL ? *mine_ : *default_instance_->mine_;
}
inline ::ProtoMine::MineItem* DonateResp::mutable_mine() {
  set_has_mine();
  if (mine_ == NULL) mine_ = new ::ProtoMine::MineItem;
  // @@protoc_insertion_point(field_mutable:ProtoMine.DonateResp.mine)
  return mine_;
}
inline ::ProtoMine::MineItem* DonateResp::release_mine() {
  clear_has_mine();
  ::ProtoMine::MineItem* temp = mine_;
  mine_ = NULL;
  return temp;
}
inline void DonateResp::set_allocated_mine(::ProtoMine::MineItem* mine) {
  delete mine_;
  mine_ = mine;
  if (mine) {
    set_has_mine();
  } else {
    clear_has_mine();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.DonateResp.mine)
}

// required .DataCommon.UserResourceCPP assets = 2;
inline bool DonateResp::has_assets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DonateResp::set_has_assets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DonateResp::clear_has_assets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DonateResp::clear_assets() {
  if (assets_ != NULL) assets_->::DataCommon::UserResourceCPP::Clear();
  clear_has_assets();
}
inline const ::DataCommon::UserResourceCPP& DonateResp::assets() const {
  // @@protoc_insertion_point(field_get:ProtoMine.DonateResp.assets)
  return assets_ != NULL ? *assets_ : *default_instance_->assets_;
}
inline ::DataCommon::UserResourceCPP* DonateResp::mutable_assets() {
  set_has_assets();
  if (assets_ == NULL) assets_ = new ::DataCommon::UserResourceCPP;
  // @@protoc_insertion_point(field_mutable:ProtoMine.DonateResp.assets)
  return assets_;
}
inline ::DataCommon::UserResourceCPP* DonateResp::release_assets() {
  clear_has_assets();
  ::DataCommon::UserResourceCPP* temp = assets_;
  assets_ = NULL;
  return temp;
}
inline void DonateResp::set_allocated_assets(::DataCommon::UserResourceCPP* assets) {
  delete assets_;
  assets_ = assets;
  if (assets) {
    set_has_assets();
  } else {
    clear_has_assets();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.DonateResp.assets)
}

// required uint32 mine_exp = 3;
inline bool DonateResp::has_mine_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DonateResp::set_has_mine_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DonateResp::clear_has_mine_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DonateResp::clear_mine_exp() {
  mine_exp_ = 0u;
  clear_has_mine_exp();
}
inline ::google::protobuf::uint32 DonateResp::mine_exp() const {
  // @@protoc_insertion_point(field_get:ProtoMine.DonateResp.mine_exp)
  return mine_exp_;
}
inline void DonateResp::set_mine_exp(::google::protobuf::uint32 value) {
  set_has_mine_exp();
  mine_exp_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.DonateResp.mine_exp)
}

// required uint32 mine_level = 4;
inline bool DonateResp::has_mine_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DonateResp::set_has_mine_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DonateResp::clear_has_mine_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DonateResp::clear_mine_level() {
  mine_level_ = 0u;
  clear_has_mine_level();
}
inline ::google::protobuf::uint32 DonateResp::mine_level() const {
  // @@protoc_insertion_point(field_get:ProtoMine.DonateResp.mine_level)
  return mine_level_;
}
inline void DonateResp::set_mine_level(::google::protobuf::uint32 value) {
  set_has_mine_level();
  mine_level_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.DonateResp.mine_level)
}

// -------------------------------------------------------------------

// MineKingdomRewardReq

// -------------------------------------------------------------------

// MineKingdomRewardResp

// required uint32 op_ts = 1;
inline bool MineKingdomRewardResp::has_op_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MineKingdomRewardResp::set_has_op_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MineKingdomRewardResp::clear_has_op_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MineKingdomRewardResp::clear_op_ts() {
  op_ts_ = 0u;
  clear_has_op_ts();
}
inline ::google::protobuf::uint32 MineKingdomRewardResp::op_ts() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineKingdomRewardResp.op_ts)
  return op_ts_;
}
inline void MineKingdomRewardResp::set_op_ts(::google::protobuf::uint32 value) {
  set_has_op_ts();
  op_ts_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineKingdomRewardResp.op_ts)
}

// required .DataCommon.UserResourceCPP assets = 2;
inline bool MineKingdomRewardResp::has_assets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MineKingdomRewardResp::set_has_assets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MineKingdomRewardResp::clear_has_assets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MineKingdomRewardResp::clear_assets() {
  if (assets_ != NULL) assets_->::DataCommon::UserResourceCPP::Clear();
  clear_has_assets();
}
inline const ::DataCommon::UserResourceCPP& MineKingdomRewardResp::assets() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineKingdomRewardResp.assets)
  return assets_ != NULL ? *assets_ : *default_instance_->assets_;
}
inline ::DataCommon::UserResourceCPP* MineKingdomRewardResp::mutable_assets() {
  set_has_assets();
  if (assets_ == NULL) assets_ = new ::DataCommon::UserResourceCPP;
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineKingdomRewardResp.assets)
  return assets_;
}
inline ::DataCommon::UserResourceCPP* MineKingdomRewardResp::release_assets() {
  clear_has_assets();
  ::DataCommon::UserResourceCPP* temp = assets_;
  assets_ = NULL;
  return temp;
}
inline void MineKingdomRewardResp::set_allocated_assets(::DataCommon::UserResourceCPP* assets) {
  delete assets_;
  assets_ = assets;
  if (assets) {
    set_has_assets();
  } else {
    clear_has_assets();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.MineKingdomRewardResp.assets)
}

// -------------------------------------------------------------------

// MineKingdomMinerRewardReq

// -------------------------------------------------------------------

// MineKingdomMinerRewardResp

// required uint32 op_ts = 1;
inline bool MineKingdomMinerRewardResp::has_op_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MineKingdomMinerRewardResp::set_has_op_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MineKingdomMinerRewardResp::clear_has_op_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MineKingdomMinerRewardResp::clear_op_ts() {
  op_ts_ = 0u;
  clear_has_op_ts();
}
inline ::google::protobuf::uint32 MineKingdomMinerRewardResp::op_ts() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineKingdomMinerRewardResp.op_ts)
  return op_ts_;
}
inline void MineKingdomMinerRewardResp::set_op_ts(::google::protobuf::uint32 value) {
  set_has_op_ts();
  op_ts_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.MineKingdomMinerRewardResp.op_ts)
}

// required .DataCommon.RewardItemCPP exp = 2;
inline bool MineKingdomMinerRewardResp::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MineKingdomMinerRewardResp::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MineKingdomMinerRewardResp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MineKingdomMinerRewardResp::clear_exp() {
  if (exp_ != NULL) exp_->::DataCommon::RewardItemCPP::Clear();
  clear_has_exp();
}
inline const ::DataCommon::RewardItemCPP& MineKingdomMinerRewardResp::exp() const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineKingdomMinerRewardResp.exp)
  return exp_ != NULL ? *exp_ : *default_instance_->exp_;
}
inline ::DataCommon::RewardItemCPP* MineKingdomMinerRewardResp::mutable_exp() {
  set_has_exp();
  if (exp_ == NULL) exp_ = new ::DataCommon::RewardItemCPP;
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineKingdomMinerRewardResp.exp)
  return exp_;
}
inline ::DataCommon::RewardItemCPP* MineKingdomMinerRewardResp::release_exp() {
  clear_has_exp();
  ::DataCommon::RewardItemCPP* temp = exp_;
  exp_ = NULL;
  return temp;
}
inline void MineKingdomMinerRewardResp::set_allocated_exp(::DataCommon::RewardItemCPP* exp) {
  delete exp_;
  exp_ = exp;
  if (exp) {
    set_has_exp();
  } else {
    clear_has_exp();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.MineKingdomMinerRewardResp.exp)
}

// -------------------------------------------------------------------

// MineRecordReq

// -------------------------------------------------------------------

// MineRecordResp

// repeated .ProtoMine.MineRecord records = 1;
inline int MineRecordResp::records_size() const {
  return records_.size();
}
inline void MineRecordResp::clear_records() {
  records_.Clear();
}
inline const ::ProtoMine::MineRecord& MineRecordResp::records(int index) const {
  // @@protoc_insertion_point(field_get:ProtoMine.MineRecordResp.records)
  return records_.Get(index);
}
inline ::ProtoMine::MineRecord* MineRecordResp::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoMine.MineRecordResp.records)
  return records_.Mutable(index);
}
inline ::ProtoMine::MineRecord* MineRecordResp::add_records() {
  // @@protoc_insertion_point(field_add:ProtoMine.MineRecordResp.records)
  return records_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineRecord >&
MineRecordResp::records() const {
  // @@protoc_insertion_point(field_list:ProtoMine.MineRecordResp.records)
  return records_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoMine::MineRecord >*
MineRecordResp::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:ProtoMine.MineRecordResp.records)
  return &records_;
}

// -------------------------------------------------------------------

// SyncUserBaseInfo

// required .DataCommon.CommonBaseRewardCPP info = 1;
inline bool SyncUserBaseInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncUserBaseInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncUserBaseInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncUserBaseInfo::clear_info() {
  if (info_ != NULL) info_->::DataCommon::CommonBaseRewardCPP::Clear();
  clear_has_info();
}
inline const ::DataCommon::CommonBaseRewardCPP& SyncUserBaseInfo::info() const {
  // @@protoc_insertion_point(field_get:ProtoMine.SyncUserBaseInfo.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::DataCommon::CommonBaseRewardCPP* SyncUserBaseInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::DataCommon::CommonBaseRewardCPP;
  // @@protoc_insertion_point(field_mutable:ProtoMine.SyncUserBaseInfo.info)
  return info_;
}
inline ::DataCommon::CommonBaseRewardCPP* SyncUserBaseInfo::release_info() {
  clear_has_info();
  ::DataCommon::CommonBaseRewardCPP* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SyncUserBaseInfo::set_allocated_info(::DataCommon::CommonBaseRewardCPP* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoMine.SyncUserBaseInfo.info)
}

// required uint32 level = 2;
inline bool SyncUserBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncUserBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncUserBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncUserBaseInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 SyncUserBaseInfo::level() const {
  // @@protoc_insertion_point(field_get:ProtoMine.SyncUserBaseInfo.level)
  return level_;
}
inline void SyncUserBaseInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:ProtoMine.SyncUserBaseInfo.level)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoMine

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoMine_2eproto__INCLUDED
