// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoPkField.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoPkField.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoPkField {

namespace {

const ::google::protobuf::Descriptor* PkUserItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PkUserItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PkFieldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PkFieldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PkFieldResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PkFieldResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterPkFieldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterPkFieldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterPkFieldResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterPkFieldResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartPkReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartPkReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshRivalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshRivalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshRivalResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshRivalResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PkRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PkRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PkRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PkRewardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoPkField_2eproto() {
  protobuf_AddDesc_ProtoPkField_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoPkField.proto");
  GOOGLE_CHECK(file != NULL);
  PkUserItem_descriptor_ = file->message_type(0);
  static const int PkUserItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkUserItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkUserItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkUserItem, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkUserItem, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkUserItem, head_),
  };
  PkUserItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PkUserItem_descriptor_,
      PkUserItem::default_instance_,
      PkUserItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkUserItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkUserItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PkUserItem));
  PkFieldReq_descriptor_ = file->message_type(1);
  static const int PkFieldReq_offsets_[1] = {
  };
  PkFieldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PkFieldReq_descriptor_,
      PkFieldReq::default_instance_,
      PkFieldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PkFieldReq));
  PkFieldResp_descriptor_ = file->message_type(2);
  static const int PkFieldResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldResp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldResp, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldResp, winners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldResp, defier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldResp, reward_rank_),
  };
  PkFieldResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PkFieldResp_descriptor_,
      PkFieldResp::default_instance_,
      PkFieldResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkFieldResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PkFieldResp));
  EnterPkFieldReq_descriptor_ = file->message_type(3);
  static const int EnterPkFieldReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPkFieldReq, rank_),
  };
  EnterPkFieldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterPkFieldReq_descriptor_,
      EnterPkFieldReq::default_instance_,
      EnterPkFieldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPkFieldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPkFieldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterPkFieldReq));
  EnterPkFieldResp_descriptor_ = file->message_type(4);
  static const int EnterPkFieldResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPkFieldResp, hero_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPkFieldResp, hero_lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPkFieldResp, hero_troops_),
  };
  EnterPkFieldResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterPkFieldResp_descriptor_,
      EnterPkFieldResp::default_instance_,
      EnterPkFieldResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPkFieldResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPkFieldResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterPkFieldResp));
  StartPkReq_descriptor_ = file->message_type(5);
  static const int StartPkReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPkReq, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPkReq, hero_ids_),
  };
  StartPkReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartPkReq_descriptor_,
      StartPkReq::default_instance_,
      StartPkReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPkReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPkReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartPkReq));
  RefreshRivalReq_descriptor_ = file->message_type(6);
  static const int RefreshRivalReq_offsets_[1] = {
  };
  RefreshRivalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshRivalReq_descriptor_,
      RefreshRivalReq::default_instance_,
      RefreshRivalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshRivalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshRivalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshRivalReq));
  RefreshRivalResp_descriptor_ = file->message_type(7);
  static const int RefreshRivalResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshRivalResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshRivalResp, rival_),
  };
  RefreshRivalResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshRivalResp_descriptor_,
      RefreshRivalResp::default_instance_,
      RefreshRivalResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshRivalResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshRivalResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshRivalResp));
  PkRewardReq_descriptor_ = file->message_type(8);
  static const int PkRewardReq_offsets_[1] = {
  };
  PkRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PkRewardReq_descriptor_,
      PkRewardReq::default_instance_,
      PkRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PkRewardReq));
  PkRewardResp_descriptor_ = file->message_type(9);
  static const int PkRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkRewardResp, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkRewardResp, ladder_ts_),
  };
  PkRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PkRewardResp_descriptor_,
      PkRewardResp::default_instance_,
      PkRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PkRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PkRewardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoPkField_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PkUserItem_descriptor_, &PkUserItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PkFieldReq_descriptor_, &PkFieldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PkFieldResp_descriptor_, &PkFieldResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterPkFieldReq_descriptor_, &EnterPkFieldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterPkFieldResp_descriptor_, &EnterPkFieldResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartPkReq_descriptor_, &StartPkReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshRivalReq_descriptor_, &RefreshRivalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshRivalResp_descriptor_, &RefreshRivalResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PkRewardReq_descriptor_, &PkRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PkRewardResp_descriptor_, &PkRewardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoPkField_2eproto() {
  delete PkUserItem::default_instance_;
  delete PkUserItem_reflection_;
  delete PkFieldReq::default_instance_;
  delete PkFieldReq_reflection_;
  delete PkFieldResp::default_instance_;
  delete PkFieldResp_reflection_;
  delete EnterPkFieldReq::default_instance_;
  delete EnterPkFieldReq_reflection_;
  delete EnterPkFieldResp::default_instance_;
  delete EnterPkFieldResp_reflection_;
  delete StartPkReq::default_instance_;
  delete StartPkReq_reflection_;
  delete RefreshRivalReq::default_instance_;
  delete RefreshRivalReq_reflection_;
  delete RefreshRivalResp::default_instance_;
  delete RefreshRivalResp_reflection_;
  delete PkRewardReq::default_instance_;
  delete PkRewardReq_reflection_;
  delete PkRewardResp::default_instance_;
  delete PkRewardResp_reflection_;
}

void protobuf_AddDesc_ProtoPkField_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoPkField.proto\022\014ProtoPkField\032\020Data"
    "Common.proto\"P\n\nPkUserItem\022\013\n\003uid\030\001 \002(\r\022"
    "\014\n\004name\030\002 \002(\014\022\013\n\003lvl\030\003 \002(\r\022\014\n\004rank\030\004 \002(\r"
    "\022\014\n\004head\030\005 \002(\014\"\014\n\nPkFieldReq\"\230\001\n\013PkField"
    "Resp\022\014\n\004rank\030\001 \002(\005\022\021\n\tchallenge\030\002 \002(\r\022)\n"
    "\007winners\030\003 \003(\0132\030.ProtoPkField.PkUserItem"
    "\022(\n\006defier\030\004 \003(\0132\030.ProtoPkField.PkUserIt"
    "em\022\023\n\013reward_rank\030\005 \002(\005\"\037\n\017EnterPkFieldR"
    "eq\022\014\n\004rank\030\001 \002(\005\"K\n\020EnterPkFieldResp\022\020\n\010"
    "hero_ids\030\001 \003(\r\022\020\n\010hero_lvl\030\002 \003(\r\022\023\n\013hero"
    "_troops\030\003 \003(\r\",\n\nStartPkReq\022\014\n\004rank\030\001 \002("
    "\005\022\020\n\010hero_ids\030\002 \003(\r\"\021\n\017RefreshRivalReq\"I"
    "\n\020RefreshRivalResp\022\014\n\004cash\030\001 \002(\r\022\'\n\005riva"
    "l\030\002 \003(\0132\030.ProtoPkField.PkUserItem\"\r\n\013PkR"
    "ewardReq\"P\n\014PkRewardResp\022-\n\004base\030\001 \002(\0132\037"
    ".DataCommon.CommonBaseRewardCPP\022\021\n\tladde"
    "r_ts\030\002 \002(\r", 650);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoPkField.proto", &protobuf_RegisterTypes);
  PkUserItem::default_instance_ = new PkUserItem();
  PkFieldReq::default_instance_ = new PkFieldReq();
  PkFieldResp::default_instance_ = new PkFieldResp();
  EnterPkFieldReq::default_instance_ = new EnterPkFieldReq();
  EnterPkFieldResp::default_instance_ = new EnterPkFieldResp();
  StartPkReq::default_instance_ = new StartPkReq();
  RefreshRivalReq::default_instance_ = new RefreshRivalReq();
  RefreshRivalResp::default_instance_ = new RefreshRivalResp();
  PkRewardReq::default_instance_ = new PkRewardReq();
  PkRewardResp::default_instance_ = new PkRewardResp();
  PkUserItem::default_instance_->InitAsDefaultInstance();
  PkFieldReq::default_instance_->InitAsDefaultInstance();
  PkFieldResp::default_instance_->InitAsDefaultInstance();
  EnterPkFieldReq::default_instance_->InitAsDefaultInstance();
  EnterPkFieldResp::default_instance_->InitAsDefaultInstance();
  StartPkReq::default_instance_->InitAsDefaultInstance();
  RefreshRivalReq::default_instance_->InitAsDefaultInstance();
  RefreshRivalResp::default_instance_->InitAsDefaultInstance();
  PkRewardReq::default_instance_->InitAsDefaultInstance();
  PkRewardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoPkField_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoPkField_2eproto {
  StaticDescriptorInitializer_ProtoPkField_2eproto() {
    protobuf_AddDesc_ProtoPkField_2eproto();
  }
} static_descriptor_initializer_ProtoPkField_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PkUserItem::kUidFieldNumber;
const int PkUserItem::kNameFieldNumber;
const int PkUserItem::kLvlFieldNumber;
const int PkUserItem::kRankFieldNumber;
const int PkUserItem::kHeadFieldNumber;
#endif  // !_MSC_VER

PkUserItem::PkUserItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.PkUserItem)
}

void PkUserItem::InitAsDefaultInstance() {
}

PkUserItem::PkUserItem(const PkUserItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.PkUserItem)
}

void PkUserItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lvl_ = 0u;
  rank_ = 0u;
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PkUserItem::~PkUserItem() {
  // @@protoc_insertion_point(destructor:ProtoPkField.PkUserItem)
  SharedDtor();
}

void PkUserItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void PkUserItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PkUserItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkUserItem_descriptor_;
}

const PkUserItem& PkUserItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

PkUserItem* PkUserItem::default_instance_ = NULL;

PkUserItem* PkUserItem::New() const {
  return new PkUserItem;
}

void PkUserItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PkUserItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, lvl_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    rank_ = 0u;
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        head_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PkUserItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.PkUserItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lvl;
        break;
      }

      // required uint32 lvl = 3;
      case 3: {
        if (tag == 24) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // required uint32 rank = 4;
      case 4: {
        if (tag == 32) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_head;
        break;
      }

      // required bytes head = 5;
      case 5: {
        if (tag == 42) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.PkUserItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.PkUserItem)
  return false;
#undef DO_
}

void PkUserItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.PkUserItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 lvl = 3;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lvl(), output);
  }

  // required uint32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

  // required bytes head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.PkUserItem)
}

::google::protobuf::uint8* PkUserItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.PkUserItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required uint32 lvl = 3;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lvl(), target);
  }

  // required uint32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank(), target);
  }

  // required bytes head = 5;
  if (has_head()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.PkUserItem)
  return target;
}

int PkUserItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 lvl = 3;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // required uint32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required bytes head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PkUserItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PkUserItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PkUserItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PkUserItem::MergeFrom(const PkUserItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PkUserItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkUserItem::CopyFrom(const PkUserItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkUserItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PkUserItem::Swap(PkUserItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(lvl_, other->lvl_);
    std::swap(rank_, other->rank_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PkUserItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PkUserItem_descriptor_;
  metadata.reflection = PkUserItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PkFieldReq::PkFieldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.PkFieldReq)
}

void PkFieldReq::InitAsDefaultInstance() {
}

PkFieldReq::PkFieldReq(const PkFieldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.PkFieldReq)
}

void PkFieldReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PkFieldReq::~PkFieldReq() {
  // @@protoc_insertion_point(destructor:ProtoPkField.PkFieldReq)
  SharedDtor();
}

void PkFieldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PkFieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PkFieldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkFieldReq_descriptor_;
}

const PkFieldReq& PkFieldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

PkFieldReq* PkFieldReq::default_instance_ = NULL;

PkFieldReq* PkFieldReq::New() const {
  return new PkFieldReq;
}

void PkFieldReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PkFieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.PkFieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.PkFieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.PkFieldReq)
  return false;
#undef DO_
}

void PkFieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.PkFieldReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.PkFieldReq)
}

::google::protobuf::uint8* PkFieldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.PkFieldReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.PkFieldReq)
  return target;
}

int PkFieldReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PkFieldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PkFieldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PkFieldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PkFieldReq::MergeFrom(const PkFieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PkFieldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkFieldReq::CopyFrom(const PkFieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkFieldReq::IsInitialized() const {

  return true;
}

void PkFieldReq::Swap(PkFieldReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PkFieldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PkFieldReq_descriptor_;
  metadata.reflection = PkFieldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PkFieldResp::kRankFieldNumber;
const int PkFieldResp::kChallengeFieldNumber;
const int PkFieldResp::kWinnersFieldNumber;
const int PkFieldResp::kDefierFieldNumber;
const int PkFieldResp::kRewardRankFieldNumber;
#endif  // !_MSC_VER

PkFieldResp::PkFieldResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.PkFieldResp)
}

void PkFieldResp::InitAsDefaultInstance() {
}

PkFieldResp::PkFieldResp(const PkFieldResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.PkFieldResp)
}

void PkFieldResp::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  challenge_ = 0u;
  reward_rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PkFieldResp::~PkFieldResp() {
  // @@protoc_insertion_point(destructor:ProtoPkField.PkFieldResp)
  SharedDtor();
}

void PkFieldResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PkFieldResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PkFieldResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkFieldResp_descriptor_;
}

const PkFieldResp& PkFieldResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

PkFieldResp* PkFieldResp::default_instance_ = NULL;

PkFieldResp* PkFieldResp::New() const {
  return new PkFieldResp;
}

void PkFieldResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PkFieldResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(rank_, challenge_);
    reward_rank_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  winners_.Clear();
  defier_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PkFieldResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.PkFieldResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_challenge;
        break;
      }

      // required uint32 challenge = 2;
      case 2: {
        if (tag == 16) {
         parse_challenge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_)));
          set_has_challenge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_winners;
        break;
      }

      // repeated .ProtoPkField.PkUserItem winners = 3;
      case 3: {
        if (tag == 26) {
         parse_winners:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_winners()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_winners;
        if (input->ExpectTag(34)) goto parse_defier;
        break;
      }

      // repeated .ProtoPkField.PkUserItem defier = 4;
      case 4: {
        if (tag == 34) {
         parse_defier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_defier;
        if (input->ExpectTag(40)) goto parse_reward_rank;
        break;
      }

      // required int32 reward_rank = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_rank_)));
          set_has_reward_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.PkFieldResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.PkFieldResp)
  return false;
#undef DO_
}

void PkFieldResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.PkFieldResp)
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // required uint32 challenge = 2;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenge(), output);
  }

  // repeated .ProtoPkField.PkUserItem winners = 3;
  for (int i = 0; i < this->winners_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->winners(i), output);
  }

  // repeated .ProtoPkField.PkUserItem defier = 4;
  for (int i = 0; i < this->defier_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->defier(i), output);
  }

  // required int32 reward_rank = 5;
  if (has_reward_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.PkFieldResp)
}

::google::protobuf::uint8* PkFieldResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.PkFieldResp)
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // required uint32 challenge = 2;
  if (has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenge(), target);
  }

  // repeated .ProtoPkField.PkUserItem winners = 3;
  for (int i = 0; i < this->winners_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->winners(i), target);
  }

  // repeated .ProtoPkField.PkUserItem defier = 4;
  for (int i = 0; i < this->defier_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->defier(i), target);
  }

  // required int32 reward_rank = 5;
  if (has_reward_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.PkFieldResp)
  return target;
}

int PkFieldResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required uint32 challenge = 2;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge());
    }

    // required int32 reward_rank = 5;
    if (has_reward_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_rank());
    }

  }
  // repeated .ProtoPkField.PkUserItem winners = 3;
  total_size += 1 * this->winners_size();
  for (int i = 0; i < this->winners_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->winners(i));
  }

  // repeated .ProtoPkField.PkUserItem defier = 4;
  total_size += 1 * this->defier_size();
  for (int i = 0; i < this->defier_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defier(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PkFieldResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PkFieldResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PkFieldResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PkFieldResp::MergeFrom(const PkFieldResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  winners_.MergeFrom(from.winners_);
  defier_.MergeFrom(from.defier_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_reward_rank()) {
      set_reward_rank(from.reward_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PkFieldResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkFieldResp::CopyFrom(const PkFieldResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkFieldResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->winners())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->defier())) return false;
  return true;
}

void PkFieldResp::Swap(PkFieldResp* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(challenge_, other->challenge_);
    winners_.Swap(&other->winners_);
    defier_.Swap(&other->defier_);
    std::swap(reward_rank_, other->reward_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PkFieldResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PkFieldResp_descriptor_;
  metadata.reflection = PkFieldResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterPkFieldReq::kRankFieldNumber;
#endif  // !_MSC_VER

EnterPkFieldReq::EnterPkFieldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.EnterPkFieldReq)
}

void EnterPkFieldReq::InitAsDefaultInstance() {
}

EnterPkFieldReq::EnterPkFieldReq(const EnterPkFieldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.EnterPkFieldReq)
}

void EnterPkFieldReq::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterPkFieldReq::~EnterPkFieldReq() {
  // @@protoc_insertion_point(destructor:ProtoPkField.EnterPkFieldReq)
  SharedDtor();
}

void EnterPkFieldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterPkFieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterPkFieldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterPkFieldReq_descriptor_;
}

const EnterPkFieldReq& EnterPkFieldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

EnterPkFieldReq* EnterPkFieldReq::default_instance_ = NULL;

EnterPkFieldReq* EnterPkFieldReq::New() const {
  return new EnterPkFieldReq;
}

void EnterPkFieldReq::Clear() {
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterPkFieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.EnterPkFieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.EnterPkFieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.EnterPkFieldReq)
  return false;
#undef DO_
}

void EnterPkFieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.EnterPkFieldReq)
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.EnterPkFieldReq)
}

::google::protobuf::uint8* EnterPkFieldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.EnterPkFieldReq)
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.EnterPkFieldReq)
  return target;
}

int EnterPkFieldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterPkFieldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterPkFieldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterPkFieldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterPkFieldReq::MergeFrom(const EnterPkFieldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterPkFieldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterPkFieldReq::CopyFrom(const EnterPkFieldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterPkFieldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnterPkFieldReq::Swap(EnterPkFieldReq* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterPkFieldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterPkFieldReq_descriptor_;
  metadata.reflection = EnterPkFieldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterPkFieldResp::kHeroIdsFieldNumber;
const int EnterPkFieldResp::kHeroLvlFieldNumber;
const int EnterPkFieldResp::kHeroTroopsFieldNumber;
#endif  // !_MSC_VER

EnterPkFieldResp::EnterPkFieldResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.EnterPkFieldResp)
}

void EnterPkFieldResp::InitAsDefaultInstance() {
}

EnterPkFieldResp::EnterPkFieldResp(const EnterPkFieldResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.EnterPkFieldResp)
}

void EnterPkFieldResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterPkFieldResp::~EnterPkFieldResp() {
  // @@protoc_insertion_point(destructor:ProtoPkField.EnterPkFieldResp)
  SharedDtor();
}

void EnterPkFieldResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterPkFieldResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterPkFieldResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterPkFieldResp_descriptor_;
}

const EnterPkFieldResp& EnterPkFieldResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

EnterPkFieldResp* EnterPkFieldResp::default_instance_ = NULL;

EnterPkFieldResp* EnterPkFieldResp::New() const {
  return new EnterPkFieldResp;
}

void EnterPkFieldResp::Clear() {
  hero_ids_.Clear();
  hero_lvl_.Clear();
  hero_troops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterPkFieldResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.EnterPkFieldResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 hero_ids = 1;
      case 1: {
        if (tag == 8) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_hero_ids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_hero_ids;
        if (input->ExpectTag(16)) goto parse_hero_lvl;
        break;
      }

      // repeated uint32 hero_lvl = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hero_lvl())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_lvl())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_lvl;
        if (input->ExpectTag(24)) goto parse_hero_troops;
        break;
      }

      // repeated uint32 hero_troops = 3;
      case 3: {
        if (tag == 24) {
         parse_hero_troops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hero_troops())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_troops())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hero_troops;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.EnterPkFieldResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.EnterPkFieldResp)
  return false;
#undef DO_
}

void EnterPkFieldResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.EnterPkFieldResp)
  // repeated uint32 hero_ids = 1;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->hero_ids(i), output);
  }

  // repeated uint32 hero_lvl = 2;
  for (int i = 0; i < this->hero_lvl_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hero_lvl(i), output);
  }

  // repeated uint32 hero_troops = 3;
  for (int i = 0; i < this->hero_troops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hero_troops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.EnterPkFieldResp)
}

::google::protobuf::uint8* EnterPkFieldResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.EnterPkFieldResp)
  // repeated uint32 hero_ids = 1;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->hero_ids(i), target);
  }

  // repeated uint32 hero_lvl = 2;
  for (int i = 0; i < this->hero_lvl_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hero_lvl(i), target);
  }

  // repeated uint32 hero_troops = 3;
  for (int i = 0; i < this->hero_troops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hero_troops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.EnterPkFieldResp)
  return target;
}

int EnterPkFieldResp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 hero_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  // repeated uint32 hero_lvl = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_lvl_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_lvl(i));
    }
    total_size += 1 * this->hero_lvl_size() + data_size;
  }

  // repeated uint32 hero_troops = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_troops_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_troops(i));
    }
    total_size += 1 * this->hero_troops_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterPkFieldResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterPkFieldResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterPkFieldResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterPkFieldResp::MergeFrom(const EnterPkFieldResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  hero_lvl_.MergeFrom(from.hero_lvl_);
  hero_troops_.MergeFrom(from.hero_troops_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterPkFieldResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterPkFieldResp::CopyFrom(const EnterPkFieldResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterPkFieldResp::IsInitialized() const {

  return true;
}

void EnterPkFieldResp::Swap(EnterPkFieldResp* other) {
  if (other != this) {
    hero_ids_.Swap(&other->hero_ids_);
    hero_lvl_.Swap(&other->hero_lvl_);
    hero_troops_.Swap(&other->hero_troops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterPkFieldResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterPkFieldResp_descriptor_;
  metadata.reflection = EnterPkFieldResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartPkReq::kRankFieldNumber;
const int StartPkReq::kHeroIdsFieldNumber;
#endif  // !_MSC_VER

StartPkReq::StartPkReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.StartPkReq)
}

void StartPkReq::InitAsDefaultInstance() {
}

StartPkReq::StartPkReq(const StartPkReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.StartPkReq)
}

void StartPkReq::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartPkReq::~StartPkReq() {
  // @@protoc_insertion_point(destructor:ProtoPkField.StartPkReq)
  SharedDtor();
}

void StartPkReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartPkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartPkReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartPkReq_descriptor_;
}

const StartPkReq& StartPkReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

StartPkReq* StartPkReq::default_instance_ = NULL;

StartPkReq* StartPkReq::New() const {
  return new StartPkReq;
}

void StartPkReq::Clear() {
  rank_ = 0;
  hero_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartPkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.StartPkReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_ids;
        break;
      }

      // repeated uint32 hero_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hero_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_hero_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.StartPkReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.StartPkReq)
  return false;
#undef DO_
}

void StartPkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.StartPkReq)
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // repeated uint32 hero_ids = 2;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hero_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.StartPkReq)
}

::google::protobuf::uint8* StartPkReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.StartPkReq)
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // repeated uint32 hero_ids = 2;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hero_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.StartPkReq)
  return target;
}

int StartPkReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  // repeated uint32 hero_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartPkReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartPkReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartPkReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartPkReq::MergeFrom(const StartPkReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartPkReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPkReq::CopyFrom(const StartPkReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPkReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartPkReq::Swap(StartPkReq* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    hero_ids_.Swap(&other->hero_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartPkReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartPkReq_descriptor_;
  metadata.reflection = StartPkReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RefreshRivalReq::RefreshRivalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.RefreshRivalReq)
}

void RefreshRivalReq::InitAsDefaultInstance() {
}

RefreshRivalReq::RefreshRivalReq(const RefreshRivalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.RefreshRivalReq)
}

void RefreshRivalReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshRivalReq::~RefreshRivalReq() {
  // @@protoc_insertion_point(destructor:ProtoPkField.RefreshRivalReq)
  SharedDtor();
}

void RefreshRivalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshRivalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshRivalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshRivalReq_descriptor_;
}

const RefreshRivalReq& RefreshRivalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

RefreshRivalReq* RefreshRivalReq::default_instance_ = NULL;

RefreshRivalReq* RefreshRivalReq::New() const {
  return new RefreshRivalReq;
}

void RefreshRivalReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshRivalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.RefreshRivalReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.RefreshRivalReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.RefreshRivalReq)
  return false;
#undef DO_
}

void RefreshRivalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.RefreshRivalReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.RefreshRivalReq)
}

::google::protobuf::uint8* RefreshRivalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.RefreshRivalReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.RefreshRivalReq)
  return target;
}

int RefreshRivalReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshRivalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshRivalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshRivalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshRivalReq::MergeFrom(const RefreshRivalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshRivalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshRivalReq::CopyFrom(const RefreshRivalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshRivalReq::IsInitialized() const {

  return true;
}

void RefreshRivalReq::Swap(RefreshRivalReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshRivalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshRivalReq_descriptor_;
  metadata.reflection = RefreshRivalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshRivalResp::kCashFieldNumber;
const int RefreshRivalResp::kRivalFieldNumber;
#endif  // !_MSC_VER

RefreshRivalResp::RefreshRivalResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.RefreshRivalResp)
}

void RefreshRivalResp::InitAsDefaultInstance() {
}

RefreshRivalResp::RefreshRivalResp(const RefreshRivalResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.RefreshRivalResp)
}

void RefreshRivalResp::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshRivalResp::~RefreshRivalResp() {
  // @@protoc_insertion_point(destructor:ProtoPkField.RefreshRivalResp)
  SharedDtor();
}

void RefreshRivalResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshRivalResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshRivalResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshRivalResp_descriptor_;
}

const RefreshRivalResp& RefreshRivalResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

RefreshRivalResp* RefreshRivalResp::default_instance_ = NULL;

RefreshRivalResp* RefreshRivalResp::New() const {
  return new RefreshRivalResp;
}

void RefreshRivalResp::Clear() {
  cash_ = 0u;
  rival_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshRivalResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.RefreshRivalResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rival;
        break;
      }

      // repeated .ProtoPkField.PkUserItem rival = 2;
      case 2: {
        if (tag == 18) {
         parse_rival:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rival()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rival;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.RefreshRivalResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.RefreshRivalResp)
  return false;
#undef DO_
}

void RefreshRivalResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.RefreshRivalResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // repeated .ProtoPkField.PkUserItem rival = 2;
  for (int i = 0; i < this->rival_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rival(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.RefreshRivalResp)
}

::google::protobuf::uint8* RefreshRivalResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.RefreshRivalResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // repeated .ProtoPkField.PkUserItem rival = 2;
  for (int i = 0; i < this->rival_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rival(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.RefreshRivalResp)
  return target;
}

int RefreshRivalResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  // repeated .ProtoPkField.PkUserItem rival = 2;
  total_size += 1 * this->rival_size();
  for (int i = 0; i < this->rival_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rival(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshRivalResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshRivalResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshRivalResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshRivalResp::MergeFrom(const RefreshRivalResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rival_.MergeFrom(from.rival_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshRivalResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshRivalResp::CopyFrom(const RefreshRivalResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshRivalResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rival())) return false;
  return true;
}

void RefreshRivalResp::Swap(RefreshRivalResp* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    rival_.Swap(&other->rival_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshRivalResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshRivalResp_descriptor_;
  metadata.reflection = RefreshRivalResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PkRewardReq::PkRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.PkRewardReq)
}

void PkRewardReq::InitAsDefaultInstance() {
}

PkRewardReq::PkRewardReq(const PkRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.PkRewardReq)
}

void PkRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PkRewardReq::~PkRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoPkField.PkRewardReq)
  SharedDtor();
}

void PkRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PkRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PkRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkRewardReq_descriptor_;
}

const PkRewardReq& PkRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

PkRewardReq* PkRewardReq::default_instance_ = NULL;

PkRewardReq* PkRewardReq::New() const {
  return new PkRewardReq;
}

void PkRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PkRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.PkRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.PkRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.PkRewardReq)
  return false;
#undef DO_
}

void PkRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.PkRewardReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.PkRewardReq)
}

::google::protobuf::uint8* PkRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.PkRewardReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.PkRewardReq)
  return target;
}

int PkRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PkRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PkRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PkRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PkRewardReq::MergeFrom(const PkRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PkRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkRewardReq::CopyFrom(const PkRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkRewardReq::IsInitialized() const {

  return true;
}

void PkRewardReq::Swap(PkRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PkRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PkRewardReq_descriptor_;
  metadata.reflection = PkRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PkRewardResp::kBaseFieldNumber;
const int PkRewardResp::kLadderTsFieldNumber;
#endif  // !_MSC_VER

PkRewardResp::PkRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoPkField.PkRewardResp)
}

void PkRewardResp::InitAsDefaultInstance() {
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

PkRewardResp::PkRewardResp(const PkRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoPkField.PkRewardResp)
}

void PkRewardResp::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ladder_ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PkRewardResp::~PkRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoPkField.PkRewardResp)
  SharedDtor();
}

void PkRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void PkRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PkRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PkRewardResp_descriptor_;
}

const PkRewardResp& PkRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoPkField_2eproto();
  return *default_instance_;
}

PkRewardResp* PkRewardResp::default_instance_ = NULL;

PkRewardResp* PkRewardResp::New() const {
  return new PkRewardResp;
}

void PkRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
    ladder_ts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PkRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoPkField.PkRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonBaseRewardCPP base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ladder_ts;
        break;
      }

      // required uint32 ladder_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ladder_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ladder_ts_)));
          set_has_ladder_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoPkField.PkRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoPkField.PkRewardResp)
  return false;
#undef DO_
}

void PkRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoPkField.PkRewardResp)
  // required .DataCommon.CommonBaseRewardCPP base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // required uint32 ladder_ts = 2;
  if (has_ladder_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ladder_ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoPkField.PkRewardResp)
}

::google::protobuf::uint8* PkRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoPkField.PkRewardResp)
  // required .DataCommon.CommonBaseRewardCPP base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // required uint32 ladder_ts = 2;
  if (has_ladder_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ladder_ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoPkField.PkRewardResp)
  return target;
}

int PkRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonBaseRewardCPP base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required uint32 ladder_ts = 2;
    if (has_ladder_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ladder_ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PkRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PkRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PkRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PkRewardResp::MergeFrom(const PkRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
    if (from.has_ladder_ts()) {
      set_ladder_ts(from.ladder_ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PkRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkRewardResp::CopyFrom(const PkRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void PkRewardResp::Swap(PkRewardResp* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ladder_ts_, other->ladder_ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PkRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PkRewardResp_descriptor_;
  metadata.reflection = PkRewardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoPkField

// @@protoc_insertion_point(global_scope)
