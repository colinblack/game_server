// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoOperaBattle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoOperaBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoOperaBattle {

namespace {

const ::google::protobuf::Descriptor* OperaBattleCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperaBattleCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperaBattleCPPAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperaBattleCPPAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryRecordCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryRecordCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryBattleRecordCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryBattleRecordCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryOperaBattleRecordCPPAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryOperaBattleRecordCPPAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenOperaBattleWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenOperaBattleWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenOperaBattleWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenOperaBattleWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartOperaBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartOperaBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartOperaBattleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartOperaBattleResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndOperaBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndOperaBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndOperaBattleResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndOperaBattleResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveStarRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveStarRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveStarRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveStarRewardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoOperaBattle_2eproto() {
  protobuf_AddDesc_ProtoOperaBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoOperaBattle.proto");
  GOOGLE_CHECK(file != NULL);
  OperaBattleCPP_descriptor_ = file->message_type(0);
  static const int OperaBattleCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperaBattleCPP, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperaBattleCPP, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperaBattleCPP, star_),
  };
  OperaBattleCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperaBattleCPP_descriptor_,
      OperaBattleCPP::default_instance_,
      OperaBattleCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperaBattleCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperaBattleCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperaBattleCPP));
  OperaBattleCPPAll_descriptor_ = file->message_type(1);
  static const int OperaBattleCPPAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperaBattleCPPAll, operabattles_),
  };
  OperaBattleCPPAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperaBattleCPPAll_descriptor_,
      OperaBattleCPPAll::default_instance_,
      OperaBattleCPPAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperaBattleCPPAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperaBattleCPPAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperaBattleCPPAll));
  MemoryRecordCPP_descriptor_ = file->message_type(2);
  static const int MemoryRecordCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRecordCPP, kingdom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRecordCPP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRecordCPP, left_time_),
  };
  MemoryRecordCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoryRecordCPP_descriptor_,
      MemoryRecordCPP::default_instance_,
      MemoryRecordCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRecordCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRecordCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoryRecordCPP));
  MemoryBattleRecordCPP_descriptor_ = file->message_type(3);
  static const int MemoryBattleRecordCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryBattleRecordCPP, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryBattleRecordCPP, diff_record_),
  };
  MemoryBattleRecordCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoryBattleRecordCPP_descriptor_,
      MemoryBattleRecordCPP::default_instance_,
      MemoryBattleRecordCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryBattleRecordCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryBattleRecordCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoryBattleRecordCPP));
  MemoryOperaBattleRecordCPPAll_descriptor_ = file->message_type(4);
  static const int MemoryOperaBattleRecordCPPAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryOperaBattleRecordCPPAll, battle_record_),
  };
  MemoryOperaBattleRecordCPPAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoryOperaBattleRecordCPPAll_descriptor_,
      MemoryOperaBattleRecordCPPAll::default_instance_,
      MemoryOperaBattleRecordCPPAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryOperaBattleRecordCPPAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryOperaBattleRecordCPPAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoryOperaBattleRecordCPPAll));
  OpenOperaBattleWindowReq_descriptor_ = file->message_type(5);
  static const int OpenOperaBattleWindowReq_offsets_[1] = {
  };
  OpenOperaBattleWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenOperaBattleWindowReq_descriptor_,
      OpenOperaBattleWindowReq::default_instance_,
      OpenOperaBattleWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOperaBattleWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOperaBattleWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenOperaBattleWindowReq));
  OpenOperaBattleWindowResp_descriptor_ = file->message_type(6);
  static const int OpenOperaBattleWindowResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOperaBattleWindowResp, operabattles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOperaBattleWindowResp, records_),
  };
  OpenOperaBattleWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenOperaBattleWindowResp_descriptor_,
      OpenOperaBattleWindowResp::default_instance_,
      OpenOperaBattleWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOperaBattleWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenOperaBattleWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenOperaBattleWindowResp));
  StartOperaBattleReq_descriptor_ = file->message_type(7);
  static const int StartOperaBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOperaBattleReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOperaBattleReq, difficulty_),
  };
  StartOperaBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartOperaBattleReq_descriptor_,
      StartOperaBattleReq::default_instance_,
      StartOperaBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOperaBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOperaBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartOperaBattleReq));
  StartOperaBattleResp_descriptor_ = file->message_type(8);
  static const int StartOperaBattleResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOperaBattleResp, food_),
  };
  StartOperaBattleResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartOperaBattleResp_descriptor_,
      StartOperaBattleResp::default_instance_,
      StartOperaBattleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOperaBattleResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartOperaBattleResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartOperaBattleResp));
  EndOperaBattleReq_descriptor_ = file->message_type(9);
  static const int EndOperaBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleReq, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleReq, left_time_),
  };
  EndOperaBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndOperaBattleReq_descriptor_,
      EndOperaBattleReq::default_instance_,
      EndOperaBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndOperaBattleReq));
  EndOperaBattleResp_descriptor_ = file->message_type(10);
  static const int EndOperaBattleResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleResp, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleResp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleResp, difficulty_),
  };
  EndOperaBattleResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndOperaBattleResp_descriptor_,
      EndOperaBattleResp::default_instance_,
      EndOperaBattleResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndOperaBattleResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndOperaBattleResp));
  ReceiveStarRewardReq_descriptor_ = file->message_type(11);
  static const int ReceiveStarRewardReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardReq, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardReq, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardReq, battle_star_),
  };
  ReceiveStarRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveStarRewardReq_descriptor_,
      ReceiveStarRewardReq::default_instance_,
      ReceiveStarRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveStarRewardReq));
  ReceiveStarRewardResp_descriptor_ = file->message_type(12);
  static const int ReceiveStarRewardResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardResp, operabattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardResp, reward_),
  };
  ReceiveStarRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveStarRewardResp_descriptor_,
      ReceiveStarRewardResp::default_instance_,
      ReceiveStarRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveStarRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveStarRewardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoOperaBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperaBattleCPP_descriptor_, &OperaBattleCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperaBattleCPPAll_descriptor_, &OperaBattleCPPAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoryRecordCPP_descriptor_, &MemoryRecordCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoryBattleRecordCPP_descriptor_, &MemoryBattleRecordCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoryOperaBattleRecordCPPAll_descriptor_, &MemoryOperaBattleRecordCPPAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenOperaBattleWindowReq_descriptor_, &OpenOperaBattleWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenOperaBattleWindowResp_descriptor_, &OpenOperaBattleWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartOperaBattleReq_descriptor_, &StartOperaBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartOperaBattleResp_descriptor_, &StartOperaBattleResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndOperaBattleReq_descriptor_, &EndOperaBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndOperaBattleResp_descriptor_, &EndOperaBattleResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveStarRewardReq_descriptor_, &ReceiveStarRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveStarRewardResp_descriptor_, &ReceiveStarRewardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoOperaBattle_2eproto() {
  delete OperaBattleCPP::default_instance_;
  delete OperaBattleCPP_reflection_;
  delete OperaBattleCPPAll::default_instance_;
  delete OperaBattleCPPAll_reflection_;
  delete MemoryRecordCPP::default_instance_;
  delete MemoryRecordCPP_reflection_;
  delete MemoryBattleRecordCPP::default_instance_;
  delete MemoryBattleRecordCPP_reflection_;
  delete MemoryOperaBattleRecordCPPAll::default_instance_;
  delete MemoryOperaBattleRecordCPPAll_reflection_;
  delete OpenOperaBattleWindowReq::default_instance_;
  delete OpenOperaBattleWindowReq_reflection_;
  delete OpenOperaBattleWindowResp::default_instance_;
  delete OpenOperaBattleWindowResp_reflection_;
  delete StartOperaBattleReq::default_instance_;
  delete StartOperaBattleReq_reflection_;
  delete StartOperaBattleResp::default_instance_;
  delete StartOperaBattleResp_reflection_;
  delete EndOperaBattleReq::default_instance_;
  delete EndOperaBattleReq_reflection_;
  delete EndOperaBattleResp::default_instance_;
  delete EndOperaBattleResp_reflection_;
  delete ReceiveStarRewardReq::default_instance_;
  delete ReceiveStarRewardReq_reflection_;
  delete ReceiveStarRewardResp::default_instance_;
  delete ReceiveStarRewardResp_reflection_;
}

void protobuf_AddDesc_ProtoOperaBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::User::protobuf_AddDesc_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoOperaBattle.proto\022\020ProtoOperaBatt"
    "le\032\nUser.proto\"B\n\016OperaBattleCPP\022\016\n\006gate"
    "id\030\001 \002(\r\022\022\n\ndifficulty\030\002 \002(\r\022\014\n\004star\030\003 \002"
    "(\r\"K\n\021OperaBattleCPPAll\0226\n\014operabattles\030"
    "\001 \003(\0132 .ProtoOperaBattle.OperaBattleCPP\""
    "C\n\017MemoryRecordCPP\022\017\n\007kingdom\030\001 \002(\r\022\014\n\004n"
    "ame\030\002 \002(\014\022\021\n\tleft_time\030\003 \002(\r\"_\n\025MemoryBa"
    "ttleRecordCPP\022\016\n\006gateid\030\001 \002(\r\0226\n\013diff_re"
    "cord\030\002 \003(\0132!.ProtoOperaBattle.MemoryReco"
    "rdCPP\"_\n\035MemoryOperaBattleRecordCPPAll\022>"
    "\n\rbattle_record\030\001 \003(\0132\'.ProtoOperaBattle"
    ".MemoryBattleRecordCPP\"\032\n\030OpenOperaBattl"
    "eWindowReq\"\230\001\n\031OpenOperaBattleWindowResp"
    "\0229\n\014operabattles\030\001 \002(\0132#.ProtoOperaBattl"
    "e.OperaBattleCPPAll\022@\n\007records\030\002 \002(\0132/.P"
    "rotoOperaBattle.MemoryOperaBattleRecordC"
    "PPAll\"9\n\023StartOperaBattleReq\022\016\n\006gateid\030\001"
    " \002(\r\022\022\n\ndifficulty\030\002 \002(\r\"$\n\024StartOperaBa"
    "ttleResp\022\014\n\004food\030\001 \002(\r\"J\n\021EndOperaBattle"
    "Req\022\016\n\006gateid\030\001 \002(\r\022\022\n\ndifficulty\030\002 \002(\r\022"
    "\021\n\tleft_time\030\003 \002(\r\"k\n\022EndOperaBattleResp"
    "\0221\n\006record\030\001 \001(\0132!.ProtoOperaBattle.Memo"
    "ryRecordCPP\022\016\n\006gateid\030\002 \001(\r\022\022\n\ndifficult"
    "y\030\003 \001(\r\"]\n\024ReceiveStarRewardReq\022\016\n\006gatei"
    "d\030\001 \002(\r\022\022\n\ndifficulty\030\002 \002(\r\022\014\n\004star\030\003 \002("
    "\r\022\023\n\013battle_star\030\004 \002(\r\"\201\001\n\025ReceiveStarRe"
    "wardResp\022\014\n\004cash\030\001 \002(\r\0225\n\013operabattle\030\002 "
    "\002(\0132 .ProtoOperaBattle.OperaBattleCPP\022#\n"
    "\006reward\030\003 \002(\0132\023.User.RewardBagInfo", 1154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoOperaBattle.proto", &protobuf_RegisterTypes);
  OperaBattleCPP::default_instance_ = new OperaBattleCPP();
  OperaBattleCPPAll::default_instance_ = new OperaBattleCPPAll();
  MemoryRecordCPP::default_instance_ = new MemoryRecordCPP();
  MemoryBattleRecordCPP::default_instance_ = new MemoryBattleRecordCPP();
  MemoryOperaBattleRecordCPPAll::default_instance_ = new MemoryOperaBattleRecordCPPAll();
  OpenOperaBattleWindowReq::default_instance_ = new OpenOperaBattleWindowReq();
  OpenOperaBattleWindowResp::default_instance_ = new OpenOperaBattleWindowResp();
  StartOperaBattleReq::default_instance_ = new StartOperaBattleReq();
  StartOperaBattleResp::default_instance_ = new StartOperaBattleResp();
  EndOperaBattleReq::default_instance_ = new EndOperaBattleReq();
  EndOperaBattleResp::default_instance_ = new EndOperaBattleResp();
  ReceiveStarRewardReq::default_instance_ = new ReceiveStarRewardReq();
  ReceiveStarRewardResp::default_instance_ = new ReceiveStarRewardResp();
  OperaBattleCPP::default_instance_->InitAsDefaultInstance();
  OperaBattleCPPAll::default_instance_->InitAsDefaultInstance();
  MemoryRecordCPP::default_instance_->InitAsDefaultInstance();
  MemoryBattleRecordCPP::default_instance_->InitAsDefaultInstance();
  MemoryOperaBattleRecordCPPAll::default_instance_->InitAsDefaultInstance();
  OpenOperaBattleWindowReq::default_instance_->InitAsDefaultInstance();
  OpenOperaBattleWindowResp::default_instance_->InitAsDefaultInstance();
  StartOperaBattleReq::default_instance_->InitAsDefaultInstance();
  StartOperaBattleResp::default_instance_->InitAsDefaultInstance();
  EndOperaBattleReq::default_instance_->InitAsDefaultInstance();
  EndOperaBattleResp::default_instance_->InitAsDefaultInstance();
  ReceiveStarRewardReq::default_instance_->InitAsDefaultInstance();
  ReceiveStarRewardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoOperaBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoOperaBattle_2eproto {
  StaticDescriptorInitializer_ProtoOperaBattle_2eproto() {
    protobuf_AddDesc_ProtoOperaBattle_2eproto();
  }
} static_descriptor_initializer_ProtoOperaBattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OperaBattleCPP::kGateidFieldNumber;
const int OperaBattleCPP::kDifficultyFieldNumber;
const int OperaBattleCPP::kStarFieldNumber;
#endif  // !_MSC_VER

OperaBattleCPP::OperaBattleCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.OperaBattleCPP)
}

void OperaBattleCPP::InitAsDefaultInstance() {
}

OperaBattleCPP::OperaBattleCPP(const OperaBattleCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.OperaBattleCPP)
}

void OperaBattleCPP::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  difficulty_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperaBattleCPP::~OperaBattleCPP() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.OperaBattleCPP)
  SharedDtor();
}

void OperaBattleCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperaBattleCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperaBattleCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperaBattleCPP_descriptor_;
}

const OperaBattleCPP& OperaBattleCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

OperaBattleCPP* OperaBattleCPP::default_instance_ = NULL;

OperaBattleCPP* OperaBattleCPP::New() const {
  return new OperaBattleCPP;
}

void OperaBattleCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OperaBattleCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gateid_, star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperaBattleCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.OperaBattleCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_difficulty;
        break;
      }

      // required uint32 difficulty = 2;
      case 2: {
        if (tag == 16) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // required uint32 star = 3;
      case 3: {
        if (tag == 24) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.OperaBattleCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.OperaBattleCPP)
  return false;
#undef DO_
}

void OperaBattleCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.OperaBattleCPP)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 difficulty = 2;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficulty(), output);
  }

  // required uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.OperaBattleCPP)
}

::google::protobuf::uint8* OperaBattleCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.OperaBattleCPP)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 difficulty = 2;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->difficulty(), target);
  }

  // required uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.OperaBattleCPP)
  return target;
}

int OperaBattleCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 difficulty = 2;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // required uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperaBattleCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperaBattleCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperaBattleCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperaBattleCPP::MergeFrom(const OperaBattleCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperaBattleCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperaBattleCPP::CopyFrom(const OperaBattleCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperaBattleCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OperaBattleCPP::Swap(OperaBattleCPP* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperaBattleCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperaBattleCPP_descriptor_;
  metadata.reflection = OperaBattleCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperaBattleCPPAll::kOperabattlesFieldNumber;
#endif  // !_MSC_VER

OperaBattleCPPAll::OperaBattleCPPAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.OperaBattleCPPAll)
}

void OperaBattleCPPAll::InitAsDefaultInstance() {
}

OperaBattleCPPAll::OperaBattleCPPAll(const OperaBattleCPPAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.OperaBattleCPPAll)
}

void OperaBattleCPPAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperaBattleCPPAll::~OperaBattleCPPAll() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.OperaBattleCPPAll)
  SharedDtor();
}

void OperaBattleCPPAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OperaBattleCPPAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperaBattleCPPAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperaBattleCPPAll_descriptor_;
}

const OperaBattleCPPAll& OperaBattleCPPAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

OperaBattleCPPAll* OperaBattleCPPAll::default_instance_ = NULL;

OperaBattleCPPAll* OperaBattleCPPAll::New() const {
  return new OperaBattleCPPAll;
}

void OperaBattleCPPAll::Clear() {
  operabattles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperaBattleCPPAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.OperaBattleCPPAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoOperaBattle.OperaBattleCPP operabattles = 1;
      case 1: {
        if (tag == 10) {
         parse_operabattles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operabattles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_operabattles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.OperaBattleCPPAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.OperaBattleCPPAll)
  return false;
#undef DO_
}

void OperaBattleCPPAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.OperaBattleCPPAll)
  // repeated .ProtoOperaBattle.OperaBattleCPP operabattles = 1;
  for (int i = 0; i < this->operabattles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operabattles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.OperaBattleCPPAll)
}

::google::protobuf::uint8* OperaBattleCPPAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.OperaBattleCPPAll)
  // repeated .ProtoOperaBattle.OperaBattleCPP operabattles = 1;
  for (int i = 0; i < this->operabattles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operabattles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.OperaBattleCPPAll)
  return target;
}

int OperaBattleCPPAll::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoOperaBattle.OperaBattleCPP operabattles = 1;
  total_size += 1 * this->operabattles_size();
  for (int i = 0; i < this->operabattles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operabattles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperaBattleCPPAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperaBattleCPPAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperaBattleCPPAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperaBattleCPPAll::MergeFrom(const OperaBattleCPPAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  operabattles_.MergeFrom(from.operabattles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperaBattleCPPAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperaBattleCPPAll::CopyFrom(const OperaBattleCPPAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperaBattleCPPAll::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->operabattles())) return false;
  return true;
}

void OperaBattleCPPAll::Swap(OperaBattleCPPAll* other) {
  if (other != this) {
    operabattles_.Swap(&other->operabattles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperaBattleCPPAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperaBattleCPPAll_descriptor_;
  metadata.reflection = OperaBattleCPPAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemoryRecordCPP::kKingdomFieldNumber;
const int MemoryRecordCPP::kNameFieldNumber;
const int MemoryRecordCPP::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

MemoryRecordCPP::MemoryRecordCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.MemoryRecordCPP)
}

void MemoryRecordCPP::InitAsDefaultInstance() {
}

MemoryRecordCPP::MemoryRecordCPP(const MemoryRecordCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.MemoryRecordCPP)
}

void MemoryRecordCPP::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kingdom_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryRecordCPP::~MemoryRecordCPP() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.MemoryRecordCPP)
  SharedDtor();
}

void MemoryRecordCPP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MemoryRecordCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryRecordCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryRecordCPP_descriptor_;
}

const MemoryRecordCPP& MemoryRecordCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

MemoryRecordCPP* MemoryRecordCPP::default_instance_ = NULL;

MemoryRecordCPP* MemoryRecordCPP::New() const {
  return new MemoryRecordCPP;
}

void MemoryRecordCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemoryRecordCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(kingdom_, left_time_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoryRecordCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.MemoryRecordCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 kingdom = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kingdom_)));
          set_has_kingdom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }

      // required uint32 left_time = 3;
      case 3: {
        if (tag == 24) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.MemoryRecordCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.MemoryRecordCPP)
  return false;
#undef DO_
}

void MemoryRecordCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.MemoryRecordCPP)
  // required uint32 kingdom = 1;
  if (has_kingdom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kingdom(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // required uint32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.MemoryRecordCPP)
}

::google::protobuf::uint8* MemoryRecordCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.MemoryRecordCPP)
  // required uint32 kingdom = 1;
  if (has_kingdom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kingdom(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // required uint32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.MemoryRecordCPP)
  return target;
}

int MemoryRecordCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 kingdom = 1;
    if (has_kingdom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kingdom());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryRecordCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoryRecordCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoryRecordCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryRecordCPP::MergeFrom(const MemoryRecordCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kingdom()) {
      set_kingdom(from.kingdom());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoryRecordCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryRecordCPP::CopyFrom(const MemoryRecordCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryRecordCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MemoryRecordCPP::Swap(MemoryRecordCPP* other) {
  if (other != this) {
    std::swap(kingdom_, other->kingdom_);
    std::swap(name_, other->name_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoryRecordCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryRecordCPP_descriptor_;
  metadata.reflection = MemoryRecordCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemoryBattleRecordCPP::kGateidFieldNumber;
const int MemoryBattleRecordCPP::kDiffRecordFieldNumber;
#endif  // !_MSC_VER

MemoryBattleRecordCPP::MemoryBattleRecordCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.MemoryBattleRecordCPP)
}

void MemoryBattleRecordCPP::InitAsDefaultInstance() {
}

MemoryBattleRecordCPP::MemoryBattleRecordCPP(const MemoryBattleRecordCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.MemoryBattleRecordCPP)
}

void MemoryBattleRecordCPP::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryBattleRecordCPP::~MemoryBattleRecordCPP() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.MemoryBattleRecordCPP)
  SharedDtor();
}

void MemoryBattleRecordCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemoryBattleRecordCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryBattleRecordCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryBattleRecordCPP_descriptor_;
}

const MemoryBattleRecordCPP& MemoryBattleRecordCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

MemoryBattleRecordCPP* MemoryBattleRecordCPP::default_instance_ = NULL;

MemoryBattleRecordCPP* MemoryBattleRecordCPP::New() const {
  return new MemoryBattleRecordCPP;
}

void MemoryBattleRecordCPP::Clear() {
  gateid_ = 0u;
  diff_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoryBattleRecordCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.MemoryBattleRecordCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_diff_record;
        break;
      }

      // repeated .ProtoOperaBattle.MemoryRecordCPP diff_record = 2;
      case 2: {
        if (tag == 18) {
         parse_diff_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diff_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_diff_record;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.MemoryBattleRecordCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.MemoryBattleRecordCPP)
  return false;
#undef DO_
}

void MemoryBattleRecordCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.MemoryBattleRecordCPP)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // repeated .ProtoOperaBattle.MemoryRecordCPP diff_record = 2;
  for (int i = 0; i < this->diff_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->diff_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.MemoryBattleRecordCPP)
}

::google::protobuf::uint8* MemoryBattleRecordCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.MemoryBattleRecordCPP)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // repeated .ProtoOperaBattle.MemoryRecordCPP diff_record = 2;
  for (int i = 0; i < this->diff_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->diff_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.MemoryBattleRecordCPP)
  return target;
}

int MemoryBattleRecordCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

  }
  // repeated .ProtoOperaBattle.MemoryRecordCPP diff_record = 2;
  total_size += 1 * this->diff_record_size();
  for (int i = 0; i < this->diff_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diff_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryBattleRecordCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoryBattleRecordCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoryBattleRecordCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryBattleRecordCPP::MergeFrom(const MemoryBattleRecordCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  diff_record_.MergeFrom(from.diff_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoryBattleRecordCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryBattleRecordCPP::CopyFrom(const MemoryBattleRecordCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryBattleRecordCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->diff_record())) return false;
  return true;
}

void MemoryBattleRecordCPP::Swap(MemoryBattleRecordCPP* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    diff_record_.Swap(&other->diff_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoryBattleRecordCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryBattleRecordCPP_descriptor_;
  metadata.reflection = MemoryBattleRecordCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemoryOperaBattleRecordCPPAll::kBattleRecordFieldNumber;
#endif  // !_MSC_VER

MemoryOperaBattleRecordCPPAll::MemoryOperaBattleRecordCPPAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
}

void MemoryOperaBattleRecordCPPAll::InitAsDefaultInstance() {
}

MemoryOperaBattleRecordCPPAll::MemoryOperaBattleRecordCPPAll(const MemoryOperaBattleRecordCPPAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
}

void MemoryOperaBattleRecordCPPAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryOperaBattleRecordCPPAll::~MemoryOperaBattleRecordCPPAll() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
  SharedDtor();
}

void MemoryOperaBattleRecordCPPAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemoryOperaBattleRecordCPPAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryOperaBattleRecordCPPAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryOperaBattleRecordCPPAll_descriptor_;
}

const MemoryOperaBattleRecordCPPAll& MemoryOperaBattleRecordCPPAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

MemoryOperaBattleRecordCPPAll* MemoryOperaBattleRecordCPPAll::default_instance_ = NULL;

MemoryOperaBattleRecordCPPAll* MemoryOperaBattleRecordCPPAll::New() const {
  return new MemoryOperaBattleRecordCPPAll;
}

void MemoryOperaBattleRecordCPPAll::Clear() {
  battle_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoryOperaBattleRecordCPPAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoOperaBattle.MemoryBattleRecordCPP battle_record = 1;
      case 1: {
        if (tag == 10) {
         parse_battle_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_battle_record;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
  return false;
#undef DO_
}

void MemoryOperaBattleRecordCPPAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
  // repeated .ProtoOperaBattle.MemoryBattleRecordCPP battle_record = 1;
  for (int i = 0; i < this->battle_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
}

::google::protobuf::uint8* MemoryOperaBattleRecordCPPAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
  // repeated .ProtoOperaBattle.MemoryBattleRecordCPP battle_record = 1;
  for (int i = 0; i < this->battle_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.MemoryOperaBattleRecordCPPAll)
  return target;
}

int MemoryOperaBattleRecordCPPAll::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoOperaBattle.MemoryBattleRecordCPP battle_record = 1;
  total_size += 1 * this->battle_record_size();
  for (int i = 0; i < this->battle_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryOperaBattleRecordCPPAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoryOperaBattleRecordCPPAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoryOperaBattleRecordCPPAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryOperaBattleRecordCPPAll::MergeFrom(const MemoryOperaBattleRecordCPPAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_record_.MergeFrom(from.battle_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoryOperaBattleRecordCPPAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryOperaBattleRecordCPPAll::CopyFrom(const MemoryOperaBattleRecordCPPAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryOperaBattleRecordCPPAll::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->battle_record())) return false;
  return true;
}

void MemoryOperaBattleRecordCPPAll::Swap(MemoryOperaBattleRecordCPPAll* other) {
  if (other != this) {
    battle_record_.Swap(&other->battle_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoryOperaBattleRecordCPPAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryOperaBattleRecordCPPAll_descriptor_;
  metadata.reflection = MemoryOperaBattleRecordCPPAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenOperaBattleWindowReq::OpenOperaBattleWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.OpenOperaBattleWindowReq)
}

void OpenOperaBattleWindowReq::InitAsDefaultInstance() {
}

OpenOperaBattleWindowReq::OpenOperaBattleWindowReq(const OpenOperaBattleWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.OpenOperaBattleWindowReq)
}

void OpenOperaBattleWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenOperaBattleWindowReq::~OpenOperaBattleWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.OpenOperaBattleWindowReq)
  SharedDtor();
}

void OpenOperaBattleWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenOperaBattleWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenOperaBattleWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenOperaBattleWindowReq_descriptor_;
}

const OpenOperaBattleWindowReq& OpenOperaBattleWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

OpenOperaBattleWindowReq* OpenOperaBattleWindowReq::default_instance_ = NULL;

OpenOperaBattleWindowReq* OpenOperaBattleWindowReq::New() const {
  return new OpenOperaBattleWindowReq;
}

void OpenOperaBattleWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenOperaBattleWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.OpenOperaBattleWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.OpenOperaBattleWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.OpenOperaBattleWindowReq)
  return false;
#undef DO_
}

void OpenOperaBattleWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.OpenOperaBattleWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.OpenOperaBattleWindowReq)
}

::google::protobuf::uint8* OpenOperaBattleWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.OpenOperaBattleWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.OpenOperaBattleWindowReq)
  return target;
}

int OpenOperaBattleWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenOperaBattleWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenOperaBattleWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenOperaBattleWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenOperaBattleWindowReq::MergeFrom(const OpenOperaBattleWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenOperaBattleWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOperaBattleWindowReq::CopyFrom(const OpenOperaBattleWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOperaBattleWindowReq::IsInitialized() const {

  return true;
}

void OpenOperaBattleWindowReq::Swap(OpenOperaBattleWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenOperaBattleWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenOperaBattleWindowReq_descriptor_;
  metadata.reflection = OpenOperaBattleWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenOperaBattleWindowResp::kOperabattlesFieldNumber;
const int OpenOperaBattleWindowResp::kRecordsFieldNumber;
#endif  // !_MSC_VER

OpenOperaBattleWindowResp::OpenOperaBattleWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.OpenOperaBattleWindowResp)
}

void OpenOperaBattleWindowResp::InitAsDefaultInstance() {
  operabattles_ = const_cast< ::ProtoOperaBattle::OperaBattleCPPAll*>(&::ProtoOperaBattle::OperaBattleCPPAll::default_instance());
  records_ = const_cast< ::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll*>(&::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll::default_instance());
}

OpenOperaBattleWindowResp::OpenOperaBattleWindowResp(const OpenOperaBattleWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.OpenOperaBattleWindowResp)
}

void OpenOperaBattleWindowResp::SharedCtor() {
  _cached_size_ = 0;
  operabattles_ = NULL;
  records_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenOperaBattleWindowResp::~OpenOperaBattleWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.OpenOperaBattleWindowResp)
  SharedDtor();
}

void OpenOperaBattleWindowResp::SharedDtor() {
  if (this != default_instance_) {
    delete operabattles_;
    delete records_;
  }
}

void OpenOperaBattleWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenOperaBattleWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenOperaBattleWindowResp_descriptor_;
}

const OpenOperaBattleWindowResp& OpenOperaBattleWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

OpenOperaBattleWindowResp* OpenOperaBattleWindowResp::default_instance_ = NULL;

OpenOperaBattleWindowResp* OpenOperaBattleWindowResp::New() const {
  return new OpenOperaBattleWindowResp;
}

void OpenOperaBattleWindowResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_operabattles()) {
      if (operabattles_ != NULL) operabattles_->::ProtoOperaBattle::OperaBattleCPPAll::Clear();
    }
    if (has_records()) {
      if (records_ != NULL) records_->::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenOperaBattleWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.OpenOperaBattleWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoOperaBattle.OperaBattleCPPAll operabattles = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operabattles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_records;
        break;
      }

      // required .ProtoOperaBattle.MemoryOperaBattleRecordCPPAll records = 2;
      case 2: {
        if (tag == 18) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.OpenOperaBattleWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.OpenOperaBattleWindowResp)
  return false;
#undef DO_
}

void OpenOperaBattleWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.OpenOperaBattleWindowResp)
  // required .ProtoOperaBattle.OperaBattleCPPAll operabattles = 1;
  if (has_operabattles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operabattles(), output);
  }

  // required .ProtoOperaBattle.MemoryOperaBattleRecordCPPAll records = 2;
  if (has_records()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->records(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.OpenOperaBattleWindowResp)
}

::google::protobuf::uint8* OpenOperaBattleWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.OpenOperaBattleWindowResp)
  // required .ProtoOperaBattle.OperaBattleCPPAll operabattles = 1;
  if (has_operabattles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operabattles(), target);
  }

  // required .ProtoOperaBattle.MemoryOperaBattleRecordCPPAll records = 2;
  if (has_records()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->records(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.OpenOperaBattleWindowResp)
  return target;
}

int OpenOperaBattleWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoOperaBattle.OperaBattleCPPAll operabattles = 1;
    if (has_operabattles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operabattles());
    }

    // required .ProtoOperaBattle.MemoryOperaBattleRecordCPPAll records = 2;
    if (has_records()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenOperaBattleWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenOperaBattleWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenOperaBattleWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenOperaBattleWindowResp::MergeFrom(const OpenOperaBattleWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operabattles()) {
      mutable_operabattles()->::ProtoOperaBattle::OperaBattleCPPAll::MergeFrom(from.operabattles());
    }
    if (from.has_records()) {
      mutable_records()->::ProtoOperaBattle::MemoryOperaBattleRecordCPPAll::MergeFrom(from.records());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenOperaBattleWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOperaBattleWindowResp::CopyFrom(const OpenOperaBattleWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOperaBattleWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_operabattles()) {
    if (!this->operabattles().IsInitialized()) return false;
  }
  if (has_records()) {
    if (!this->records().IsInitialized()) return false;
  }
  return true;
}

void OpenOperaBattleWindowResp::Swap(OpenOperaBattleWindowResp* other) {
  if (other != this) {
    std::swap(operabattles_, other->operabattles_);
    std::swap(records_, other->records_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenOperaBattleWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenOperaBattleWindowResp_descriptor_;
  metadata.reflection = OpenOperaBattleWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartOperaBattleReq::kGateidFieldNumber;
const int StartOperaBattleReq::kDifficultyFieldNumber;
#endif  // !_MSC_VER

StartOperaBattleReq::StartOperaBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.StartOperaBattleReq)
}

void StartOperaBattleReq::InitAsDefaultInstance() {
}

StartOperaBattleReq::StartOperaBattleReq(const StartOperaBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.StartOperaBattleReq)
}

void StartOperaBattleReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  difficulty_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartOperaBattleReq::~StartOperaBattleReq() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.StartOperaBattleReq)
  SharedDtor();
}

void StartOperaBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartOperaBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartOperaBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartOperaBattleReq_descriptor_;
}

const StartOperaBattleReq& StartOperaBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

StartOperaBattleReq* StartOperaBattleReq::default_instance_ = NULL;

StartOperaBattleReq* StartOperaBattleReq::New() const {
  return new StartOperaBattleReq;
}

void StartOperaBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartOperaBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gateid_, difficulty_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartOperaBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.StartOperaBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_difficulty;
        break;
      }

      // required uint32 difficulty = 2;
      case 2: {
        if (tag == 16) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.StartOperaBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.StartOperaBattleReq)
  return false;
#undef DO_
}

void StartOperaBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.StartOperaBattleReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 difficulty = 2;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficulty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.StartOperaBattleReq)
}

::google::protobuf::uint8* StartOperaBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.StartOperaBattleReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 difficulty = 2;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->difficulty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.StartOperaBattleReq)
  return target;
}

int StartOperaBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 difficulty = 2;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartOperaBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartOperaBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartOperaBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartOperaBattleReq::MergeFrom(const StartOperaBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartOperaBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartOperaBattleReq::CopyFrom(const StartOperaBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartOperaBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StartOperaBattleReq::Swap(StartOperaBattleReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartOperaBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartOperaBattleReq_descriptor_;
  metadata.reflection = StartOperaBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartOperaBattleResp::kFoodFieldNumber;
#endif  // !_MSC_VER

StartOperaBattleResp::StartOperaBattleResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.StartOperaBattleResp)
}

void StartOperaBattleResp::InitAsDefaultInstance() {
}

StartOperaBattleResp::StartOperaBattleResp(const StartOperaBattleResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.StartOperaBattleResp)
}

void StartOperaBattleResp::SharedCtor() {
  _cached_size_ = 0;
  food_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartOperaBattleResp::~StartOperaBattleResp() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.StartOperaBattleResp)
  SharedDtor();
}

void StartOperaBattleResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartOperaBattleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartOperaBattleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartOperaBattleResp_descriptor_;
}

const StartOperaBattleResp& StartOperaBattleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

StartOperaBattleResp* StartOperaBattleResp::default_instance_ = NULL;

StartOperaBattleResp* StartOperaBattleResp::New() const {
  return new StartOperaBattleResp;
}

void StartOperaBattleResp::Clear() {
  food_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartOperaBattleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.StartOperaBattleResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 food = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.StartOperaBattleResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.StartOperaBattleResp)
  return false;
#undef DO_
}

void StartOperaBattleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.StartOperaBattleResp)
  // required uint32 food = 1;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->food(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.StartOperaBattleResp)
}

::google::protobuf::uint8* StartOperaBattleResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.StartOperaBattleResp)
  // required uint32 food = 1;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->food(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.StartOperaBattleResp)
  return target;
}

int StartOperaBattleResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 food = 1;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartOperaBattleResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartOperaBattleResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartOperaBattleResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartOperaBattleResp::MergeFrom(const StartOperaBattleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_food()) {
      set_food(from.food());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartOperaBattleResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartOperaBattleResp::CopyFrom(const StartOperaBattleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartOperaBattleResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartOperaBattleResp::Swap(StartOperaBattleResp* other) {
  if (other != this) {
    std::swap(food_, other->food_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartOperaBattleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartOperaBattleResp_descriptor_;
  metadata.reflection = StartOperaBattleResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndOperaBattleReq::kGateidFieldNumber;
const int EndOperaBattleReq::kDifficultyFieldNumber;
const int EndOperaBattleReq::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

EndOperaBattleReq::EndOperaBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.EndOperaBattleReq)
}

void EndOperaBattleReq::InitAsDefaultInstance() {
}

EndOperaBattleReq::EndOperaBattleReq(const EndOperaBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.EndOperaBattleReq)
}

void EndOperaBattleReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  difficulty_ = 0u;
  left_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndOperaBattleReq::~EndOperaBattleReq() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.EndOperaBattleReq)
  SharedDtor();
}

void EndOperaBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndOperaBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndOperaBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndOperaBattleReq_descriptor_;
}

const EndOperaBattleReq& EndOperaBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

EndOperaBattleReq* EndOperaBattleReq::default_instance_ = NULL;

EndOperaBattleReq* EndOperaBattleReq::New() const {
  return new EndOperaBattleReq;
}

void EndOperaBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EndOperaBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gateid_, left_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndOperaBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.EndOperaBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_difficulty;
        break;
      }

      // required uint32 difficulty = 2;
      case 2: {
        if (tag == 16) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }

      // required uint32 left_time = 3;
      case 3: {
        if (tag == 24) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.EndOperaBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.EndOperaBattleReq)
  return false;
#undef DO_
}

void EndOperaBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.EndOperaBattleReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 difficulty = 2;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficulty(), output);
  }

  // required uint32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.EndOperaBattleReq)
}

::google::protobuf::uint8* EndOperaBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.EndOperaBattleReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 difficulty = 2;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->difficulty(), target);
  }

  // required uint32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.EndOperaBattleReq)
  return target;
}

int EndOperaBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 difficulty = 2;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // required uint32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndOperaBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndOperaBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndOperaBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndOperaBattleReq::MergeFrom(const EndOperaBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndOperaBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndOperaBattleReq::CopyFrom(const EndOperaBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOperaBattleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EndOperaBattleReq::Swap(EndOperaBattleReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndOperaBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndOperaBattleReq_descriptor_;
  metadata.reflection = EndOperaBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndOperaBattleResp::kRecordFieldNumber;
const int EndOperaBattleResp::kGateidFieldNumber;
const int EndOperaBattleResp::kDifficultyFieldNumber;
#endif  // !_MSC_VER

EndOperaBattleResp::EndOperaBattleResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.EndOperaBattleResp)
}

void EndOperaBattleResp::InitAsDefaultInstance() {
  record_ = const_cast< ::ProtoOperaBattle::MemoryRecordCPP*>(&::ProtoOperaBattle::MemoryRecordCPP::default_instance());
}

EndOperaBattleResp::EndOperaBattleResp(const EndOperaBattleResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.EndOperaBattleResp)
}

void EndOperaBattleResp::SharedCtor() {
  _cached_size_ = 0;
  record_ = NULL;
  gateid_ = 0u;
  difficulty_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndOperaBattleResp::~EndOperaBattleResp() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.EndOperaBattleResp)
  SharedDtor();
}

void EndOperaBattleResp::SharedDtor() {
  if (this != default_instance_) {
    delete record_;
  }
}

void EndOperaBattleResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndOperaBattleResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndOperaBattleResp_descriptor_;
}

const EndOperaBattleResp& EndOperaBattleResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

EndOperaBattleResp* EndOperaBattleResp::default_instance_ = NULL;

EndOperaBattleResp* EndOperaBattleResp::New() const {
  return new EndOperaBattleResp;
}

void EndOperaBattleResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EndOperaBattleResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gateid_, difficulty_);
    if (has_record()) {
      if (record_ != NULL) record_->::ProtoOperaBattle::MemoryRecordCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndOperaBattleResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.EndOperaBattleResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoOperaBattle.MemoryRecordCPP record = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // optional uint32 gateid = 2;
      case 2: {
        if (tag == 16) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty;
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (tag == 24) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.EndOperaBattleResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.EndOperaBattleResp)
  return false;
#undef DO_
}

void EndOperaBattleResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.EndOperaBattleResp)
  // optional .ProtoOperaBattle.MemoryRecordCPP record = 1;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(), output);
  }

  // optional uint32 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }

  // optional uint32 difficulty = 3;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.EndOperaBattleResp)
}

::google::protobuf::uint8* EndOperaBattleResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.EndOperaBattleResp)
  // optional .ProtoOperaBattle.MemoryRecordCPP record = 1;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(), target);
  }

  // optional uint32 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }

  // optional uint32 difficulty = 3;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.EndOperaBattleResp)
  return target;
}

int EndOperaBattleResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ProtoOperaBattle.MemoryRecordCPP record = 1;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // optional uint32 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional uint32 difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndOperaBattleResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndOperaBattleResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndOperaBattleResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndOperaBattleResp::MergeFrom(const EndOperaBattleResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_record()) {
      mutable_record()->::ProtoOperaBattle::MemoryRecordCPP::MergeFrom(from.record());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndOperaBattleResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndOperaBattleResp::CopyFrom(const EndOperaBattleResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndOperaBattleResp::IsInitialized() const {

  if (has_record()) {
    if (!this->record().IsInitialized()) return false;
  }
  return true;
}

void EndOperaBattleResp::Swap(EndOperaBattleResp* other) {
  if (other != this) {
    std::swap(record_, other->record_);
    std::swap(gateid_, other->gateid_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndOperaBattleResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndOperaBattleResp_descriptor_;
  metadata.reflection = EndOperaBattleResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveStarRewardReq::kGateidFieldNumber;
const int ReceiveStarRewardReq::kDifficultyFieldNumber;
const int ReceiveStarRewardReq::kStarFieldNumber;
const int ReceiveStarRewardReq::kBattleStarFieldNumber;
#endif  // !_MSC_VER

ReceiveStarRewardReq::ReceiveStarRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.ReceiveStarRewardReq)
}

void ReceiveStarRewardReq::InitAsDefaultInstance() {
}

ReceiveStarRewardReq::ReceiveStarRewardReq(const ReceiveStarRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.ReceiveStarRewardReq)
}

void ReceiveStarRewardReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  difficulty_ = 0u;
  star_ = 0u;
  battle_star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveStarRewardReq::~ReceiveStarRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.ReceiveStarRewardReq)
  SharedDtor();
}

void ReceiveStarRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiveStarRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveStarRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveStarRewardReq_descriptor_;
}

const ReceiveStarRewardReq& ReceiveStarRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

ReceiveStarRewardReq* ReceiveStarRewardReq::default_instance_ = NULL;

ReceiveStarRewardReq* ReceiveStarRewardReq::New() const {
  return new ReceiveStarRewardReq;
}

void ReceiveStarRewardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReceiveStarRewardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(gateid_, battle_star_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveStarRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.ReceiveStarRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_difficulty;
        break;
      }

      // required uint32 difficulty = 2;
      case 2: {
        if (tag == 16) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // required uint32 star = 3;
      case 3: {
        if (tag == 24) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_battle_star;
        break;
      }

      // required uint32 battle_star = 4;
      case 4: {
        if (tag == 32) {
         parse_battle_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_star_)));
          set_has_battle_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.ReceiveStarRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.ReceiveStarRewardReq)
  return false;
#undef DO_
}

void ReceiveStarRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.ReceiveStarRewardReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 difficulty = 2;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->difficulty(), output);
  }

  // required uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // required uint32 battle_star = 4;
  if (has_battle_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battle_star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.ReceiveStarRewardReq)
}

::google::protobuf::uint8* ReceiveStarRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.ReceiveStarRewardReq)
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 difficulty = 2;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->difficulty(), target);
  }

  // required uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  // required uint32 battle_star = 4;
  if (has_battle_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->battle_star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.ReceiveStarRewardReq)
  return target;
}

int ReceiveStarRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 difficulty = 2;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // required uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 battle_star = 4;
    if (has_battle_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveStarRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveStarRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveStarRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveStarRewardReq::MergeFrom(const ReceiveStarRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_battle_star()) {
      set_battle_star(from.battle_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveStarRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveStarRewardReq::CopyFrom(const ReceiveStarRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveStarRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ReceiveStarRewardReq::Swap(ReceiveStarRewardReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(star_, other->star_);
    std::swap(battle_star_, other->battle_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveStarRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveStarRewardReq_descriptor_;
  metadata.reflection = ReceiveStarRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveStarRewardResp::kCashFieldNumber;
const int ReceiveStarRewardResp::kOperabattleFieldNumber;
const int ReceiveStarRewardResp::kRewardFieldNumber;
#endif  // !_MSC_VER

ReceiveStarRewardResp::ReceiveStarRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoOperaBattle.ReceiveStarRewardResp)
}

void ReceiveStarRewardResp::InitAsDefaultInstance() {
  operabattle_ = const_cast< ::ProtoOperaBattle::OperaBattleCPP*>(&::ProtoOperaBattle::OperaBattleCPP::default_instance());
  reward_ = const_cast< ::User::RewardBagInfo*>(&::User::RewardBagInfo::default_instance());
}

ReceiveStarRewardResp::ReceiveStarRewardResp(const ReceiveStarRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoOperaBattle.ReceiveStarRewardResp)
}

void ReceiveStarRewardResp::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  operabattle_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveStarRewardResp::~ReceiveStarRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoOperaBattle.ReceiveStarRewardResp)
  SharedDtor();
}

void ReceiveStarRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete operabattle_;
    delete reward_;
  }
}

void ReceiveStarRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveStarRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveStarRewardResp_descriptor_;
}

const ReceiveStarRewardResp& ReceiveStarRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoOperaBattle_2eproto();
  return *default_instance_;
}

ReceiveStarRewardResp* ReceiveStarRewardResp::default_instance_ = NULL;

ReceiveStarRewardResp* ReceiveStarRewardResp::New() const {
  return new ReceiveStarRewardResp;
}

void ReceiveStarRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cash_ = 0u;
    if (has_operabattle()) {
      if (operabattle_ != NULL) operabattle_->::ProtoOperaBattle::OperaBattleCPP::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::User::RewardBagInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveStarRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoOperaBattle.ReceiveStarRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_operabattle;
        break;
      }

      // required .ProtoOperaBattle.OperaBattleCPP operabattle = 2;
      case 2: {
        if (tag == 18) {
         parse_operabattle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operabattle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required .User.RewardBagInfo reward = 3;
      case 3: {
        if (tag == 26) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoOperaBattle.ReceiveStarRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoOperaBattle.ReceiveStarRewardResp)
  return false;
#undef DO_
}

void ReceiveStarRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoOperaBattle.ReceiveStarRewardResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // required .ProtoOperaBattle.OperaBattleCPP operabattle = 2;
  if (has_operabattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->operabattle(), output);
  }

  // required .User.RewardBagInfo reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoOperaBattle.ReceiveStarRewardResp)
}

::google::protobuf::uint8* ReceiveStarRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoOperaBattle.ReceiveStarRewardResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // required .ProtoOperaBattle.OperaBattleCPP operabattle = 2;
  if (has_operabattle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->operabattle(), target);
  }

  // required .User.RewardBagInfo reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoOperaBattle.ReceiveStarRewardResp)
  return target;
}

int ReceiveStarRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required .ProtoOperaBattle.OperaBattleCPP operabattle = 2;
    if (has_operabattle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operabattle());
    }

    // required .User.RewardBagInfo reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveStarRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveStarRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveStarRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveStarRewardResp::MergeFrom(const ReceiveStarRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_operabattle()) {
      mutable_operabattle()->::ProtoOperaBattle::OperaBattleCPP::MergeFrom(from.operabattle());
    }
    if (from.has_reward()) {
      mutable_reward()->::User::RewardBagInfo::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveStarRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveStarRewardResp::CopyFrom(const ReceiveStarRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveStarRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_operabattle()) {
    if (!this->operabattle().IsInitialized()) return false;
  }
  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  return true;
}

void ReceiveStarRewardResp::Swap(ReceiveStarRewardResp* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(operabattle_, other->operabattle_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveStarRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveStarRewardResp_descriptor_;
  metadata.reflection = ReceiveStarRewardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoOperaBattle

// @@protoc_insertion_point(global_scope)
