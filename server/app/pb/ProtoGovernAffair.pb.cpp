// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoGovernAffair.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoGovernAffair.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoGovernAffair {

namespace {

const ::google::protobuf::Descriptor* AffairItemCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AffairItemCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenAffairWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenAffairWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenAffairWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenAffairWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAffairRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAffairRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAffairRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAffairRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoyalExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoyalExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoyalExchangeResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoyalExchangeResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoGovernAffair_2eproto() {
  protobuf_AddDesc_ProtoGovernAffair_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoGovernAffair.proto");
  GOOGLE_CHECK(file != NULL);
  AffairItemCPP_descriptor_ = file->message_type(0);
  static const int AffairItemCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemCPP, mission_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemCPP, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemCPP, loyal_),
  };
  AffairItemCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AffairItemCPP_descriptor_,
      AffairItemCPP::default_instance_,
      AffairItemCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AffairItemCPP));
  OpenAffairWindowReq_descriptor_ = file->message_type(1);
  static const int OpenAffairWindowReq_offsets_[1] = {
  };
  OpenAffairWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenAffairWindowReq_descriptor_,
      OpenAffairWindowReq::default_instance_,
      OpenAffairWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAffairWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAffairWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenAffairWindowReq));
  OpenAffairWindowResp_descriptor_ = file->message_type(2);
  static const int OpenAffairWindowResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAffairWindowResp, affair_),
  };
  OpenAffairWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenAffairWindowResp_descriptor_,
      OpenAffairWindowResp::default_instance_,
      OpenAffairWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAffairWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenAffairWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenAffairWindowResp));
  GetAffairRewardReq_descriptor_ = file->message_type(3);
  static const int GetAffairRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardReq, index_),
  };
  GetAffairRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAffairRewardReq_descriptor_,
      GetAffairRewardReq::default_instance_,
      GetAffairRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAffairRewardReq));
  GetAffairRewardResp_descriptor_ = file->message_type(4);
  static const int GetAffairRewardResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardResp, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardResp, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardResp, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardResp, affair_),
  };
  GetAffairRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAffairRewardResp_descriptor_,
      GetAffairRewardResp::default_instance_,
      GetAffairRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAffairRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAffairRewardResp));
  LoyalExchangeReq_descriptor_ = file->message_type(5);
  static const int LoyalExchangeReq_offsets_[1] = {
  };
  LoyalExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoyalExchangeReq_descriptor_,
      LoyalExchangeReq::default_instance_,
      LoyalExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoyalExchangeReq));
  LoyalExchangeResp_descriptor_ = file->message_type(6);
  static const int LoyalExchangeResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalExchangeResp, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalExchangeResp, wood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalExchangeResp, food_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalExchangeResp, iron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalExchangeResp, loyal_),
  };
  LoyalExchangeResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoyalExchangeResp_descriptor_,
      LoyalExchangeResp::default_instance_,
      LoyalExchangeResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalExchangeResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoyalExchangeResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoyalExchangeResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoGovernAffair_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AffairItemCPP_descriptor_, &AffairItemCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenAffairWindowReq_descriptor_, &OpenAffairWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenAffairWindowResp_descriptor_, &OpenAffairWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAffairRewardReq_descriptor_, &GetAffairRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAffairRewardResp_descriptor_, &GetAffairRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoyalExchangeReq_descriptor_, &LoyalExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoyalExchangeResp_descriptor_, &LoyalExchangeResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoGovernAffair_2eproto() {
  delete AffairItemCPP::default_instance_;
  delete AffairItemCPP_reflection_;
  delete OpenAffairWindowReq::default_instance_;
  delete OpenAffairWindowReq_reflection_;
  delete OpenAffairWindowResp::default_instance_;
  delete OpenAffairWindowResp_reflection_;
  delete GetAffairRewardReq::default_instance_;
  delete GetAffairRewardReq_reflection_;
  delete GetAffairRewardResp::default_instance_;
  delete GetAffairRewardResp_reflection_;
  delete LoyalExchangeReq::default_instance_;
  delete LoyalExchangeReq_reflection_;
  delete LoyalExchangeResp::default_instance_;
  delete LoyalExchangeResp_reflection_;
}

void protobuf_AddDesc_ProtoGovernAffair_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ProtoGovernAffair.proto\022\021ProtoGovernAf"
    "fair\032\020DataCommon.proto\"H\n\rAffairItemCPP\022"
    "\024\n\014mission_time\030\001 \002(\r\022\022\n\nmission_id\030\002 \002("
    "\r\022\r\n\005loyal\030\003 \002(\r\"\025\n\023OpenAffairWindowReq\""
    "H\n\024OpenAffairWindowResp\0220\n\006affair\030\001 \002(\0132"
    " .ProtoGovernAffair.AffairItemCPP\"#\n\022Get"
    "AffairRewardReq\022\r\n\005index\030\001 \002(\r\"\177\n\023GetAff"
    "airRewardResp\022\014\n\004coin\030\001 \002(\r\022\014\n\004wood\030\002 \002("
    "\r\022\014\n\004food\030\003 \002(\r\022\014\n\004cash\030\005 \002(\r\0220\n\006affair\030"
    "\006 \002(\0132 .ProtoGovernAffair.AffairItemCPP\""
    "\022\n\020LoyalExchangeReq\"\306\001\n\021LoyalExchangeRes"
    "p\022\'\n\004coin\030\001 \002(\0132\031.DataCommon.RewardItemC"
    "PP\022\'\n\004wood\030\002 \002(\0132\031.DataCommon.RewardItem"
    "CPP\022\'\n\004food\030\003 \002(\0132\031.DataCommon.RewardIte"
    "mCPP\022\'\n\004iron\030\004 \002(\0132\031.DataCommon.RewardIt"
    "emCPP\022\r\n\005loyal\030\005 \002(\r", 620);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoGovernAffair.proto", &protobuf_RegisterTypes);
  AffairItemCPP::default_instance_ = new AffairItemCPP();
  OpenAffairWindowReq::default_instance_ = new OpenAffairWindowReq();
  OpenAffairWindowResp::default_instance_ = new OpenAffairWindowResp();
  GetAffairRewardReq::default_instance_ = new GetAffairRewardReq();
  GetAffairRewardResp::default_instance_ = new GetAffairRewardResp();
  LoyalExchangeReq::default_instance_ = new LoyalExchangeReq();
  LoyalExchangeResp::default_instance_ = new LoyalExchangeResp();
  AffairItemCPP::default_instance_->InitAsDefaultInstance();
  OpenAffairWindowReq::default_instance_->InitAsDefaultInstance();
  OpenAffairWindowResp::default_instance_->InitAsDefaultInstance();
  GetAffairRewardReq::default_instance_->InitAsDefaultInstance();
  GetAffairRewardResp::default_instance_->InitAsDefaultInstance();
  LoyalExchangeReq::default_instance_->InitAsDefaultInstance();
  LoyalExchangeResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoGovernAffair_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoGovernAffair_2eproto {
  StaticDescriptorInitializer_ProtoGovernAffair_2eproto() {
    protobuf_AddDesc_ProtoGovernAffair_2eproto();
  }
} static_descriptor_initializer_ProtoGovernAffair_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AffairItemCPP::kMissionTimeFieldNumber;
const int AffairItemCPP::kMissionIdFieldNumber;
const int AffairItemCPP::kLoyalFieldNumber;
#endif  // !_MSC_VER

AffairItemCPP::AffairItemCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGovernAffair.AffairItemCPP)
}

void AffairItemCPP::InitAsDefaultInstance() {
}

AffairItemCPP::AffairItemCPP(const AffairItemCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGovernAffair.AffairItemCPP)
}

void AffairItemCPP::SharedCtor() {
  _cached_size_ = 0;
  mission_time_ = 0u;
  mission_id_ = 0u;
  loyal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AffairItemCPP::~AffairItemCPP() {
  // @@protoc_insertion_point(destructor:ProtoGovernAffair.AffairItemCPP)
  SharedDtor();
}

void AffairItemCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AffairItemCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AffairItemCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AffairItemCPP_descriptor_;
}

const AffairItemCPP& AffairItemCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGovernAffair_2eproto();
  return *default_instance_;
}

AffairItemCPP* AffairItemCPP::default_instance_ = NULL;

AffairItemCPP* AffairItemCPP::New() const {
  return new AffairItemCPP;
}

void AffairItemCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AffairItemCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mission_time_, loyal_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AffairItemCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGovernAffair.AffairItemCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mission_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_time_)));
          set_has_mission_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mission_id;
        break;
      }

      // required uint32 mission_id = 2;
      case 2: {
        if (tag == 16) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_loyal;
        break;
      }

      // required uint32 loyal = 3;
      case 3: {
        if (tag == 24) {
         parse_loyal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loyal_)));
          set_has_loyal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGovernAffair.AffairItemCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGovernAffair.AffairItemCPP)
  return false;
#undef DO_
}

void AffairItemCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGovernAffair.AffairItemCPP)
  // required uint32 mission_time = 1;
  if (has_mission_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mission_time(), output);
  }

  // required uint32 mission_id = 2;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mission_id(), output);
  }

  // required uint32 loyal = 3;
  if (has_loyal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loyal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGovernAffair.AffairItemCPP)
}

::google::protobuf::uint8* AffairItemCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGovernAffair.AffairItemCPP)
  // required uint32 mission_time = 1;
  if (has_mission_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mission_time(), target);
  }

  // required uint32 mission_id = 2;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mission_id(), target);
  }

  // required uint32 loyal = 3;
  if (has_loyal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loyal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGovernAffair.AffairItemCPP)
  return target;
}

int AffairItemCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mission_time = 1;
    if (has_mission_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_time());
    }

    // required uint32 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_id());
    }

    // required uint32 loyal = 3;
    if (has_loyal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loyal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AffairItemCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AffairItemCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AffairItemCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AffairItemCPP::MergeFrom(const AffairItemCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_time()) {
      set_mission_time(from.mission_time());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_loyal()) {
      set_loyal(from.loyal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AffairItemCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffairItemCPP::CopyFrom(const AffairItemCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffairItemCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AffairItemCPP::Swap(AffairItemCPP* other) {
  if (other != this) {
    std::swap(mission_time_, other->mission_time_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(loyal_, other->loyal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AffairItemCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AffairItemCPP_descriptor_;
  metadata.reflection = AffairItemCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenAffairWindowReq::OpenAffairWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGovernAffair.OpenAffairWindowReq)
}

void OpenAffairWindowReq::InitAsDefaultInstance() {
}

OpenAffairWindowReq::OpenAffairWindowReq(const OpenAffairWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGovernAffair.OpenAffairWindowReq)
}

void OpenAffairWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAffairWindowReq::~OpenAffairWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoGovernAffair.OpenAffairWindowReq)
  SharedDtor();
}

void OpenAffairWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenAffairWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenAffairWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenAffairWindowReq_descriptor_;
}

const OpenAffairWindowReq& OpenAffairWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGovernAffair_2eproto();
  return *default_instance_;
}

OpenAffairWindowReq* OpenAffairWindowReq::default_instance_ = NULL;

OpenAffairWindowReq* OpenAffairWindowReq::New() const {
  return new OpenAffairWindowReq;
}

void OpenAffairWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenAffairWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGovernAffair.OpenAffairWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGovernAffair.OpenAffairWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGovernAffair.OpenAffairWindowReq)
  return false;
#undef DO_
}

void OpenAffairWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGovernAffair.OpenAffairWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGovernAffair.OpenAffairWindowReq)
}

::google::protobuf::uint8* OpenAffairWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGovernAffair.OpenAffairWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGovernAffair.OpenAffairWindowReq)
  return target;
}

int OpenAffairWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAffairWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenAffairWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenAffairWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenAffairWindowReq::MergeFrom(const OpenAffairWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenAffairWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenAffairWindowReq::CopyFrom(const OpenAffairWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAffairWindowReq::IsInitialized() const {

  return true;
}

void OpenAffairWindowReq::Swap(OpenAffairWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenAffairWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenAffairWindowReq_descriptor_;
  metadata.reflection = OpenAffairWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenAffairWindowResp::kAffairFieldNumber;
#endif  // !_MSC_VER

OpenAffairWindowResp::OpenAffairWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGovernAffair.OpenAffairWindowResp)
}

void OpenAffairWindowResp::InitAsDefaultInstance() {
  affair_ = const_cast< ::ProtoGovernAffair::AffairItemCPP*>(&::ProtoGovernAffair::AffairItemCPP::default_instance());
}

OpenAffairWindowResp::OpenAffairWindowResp(const OpenAffairWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGovernAffair.OpenAffairWindowResp)
}

void OpenAffairWindowResp::SharedCtor() {
  _cached_size_ = 0;
  affair_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenAffairWindowResp::~OpenAffairWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoGovernAffair.OpenAffairWindowResp)
  SharedDtor();
}

void OpenAffairWindowResp::SharedDtor() {
  if (this != default_instance_) {
    delete affair_;
  }
}

void OpenAffairWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenAffairWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenAffairWindowResp_descriptor_;
}

const OpenAffairWindowResp& OpenAffairWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGovernAffair_2eproto();
  return *default_instance_;
}

OpenAffairWindowResp* OpenAffairWindowResp::default_instance_ = NULL;

OpenAffairWindowResp* OpenAffairWindowResp::New() const {
  return new OpenAffairWindowResp;
}

void OpenAffairWindowResp::Clear() {
  if (has_affair()) {
    if (affair_ != NULL) affair_->::ProtoGovernAffair::AffairItemCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenAffairWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGovernAffair.OpenAffairWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoGovernAffair.AffairItemCPP affair = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_affair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGovernAffair.OpenAffairWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGovernAffair.OpenAffairWindowResp)
  return false;
#undef DO_
}

void OpenAffairWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGovernAffair.OpenAffairWindowResp)
  // required .ProtoGovernAffair.AffairItemCPP affair = 1;
  if (has_affair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->affair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGovernAffair.OpenAffairWindowResp)
}

::google::protobuf::uint8* OpenAffairWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGovernAffair.OpenAffairWindowResp)
  // required .ProtoGovernAffair.AffairItemCPP affair = 1;
  if (has_affair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->affair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGovernAffair.OpenAffairWindowResp)
  return target;
}

int OpenAffairWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoGovernAffair.AffairItemCPP affair = 1;
    if (has_affair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->affair());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenAffairWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenAffairWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenAffairWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenAffairWindowResp::MergeFrom(const OpenAffairWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_affair()) {
      mutable_affair()->::ProtoGovernAffair::AffairItemCPP::MergeFrom(from.affair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenAffairWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenAffairWindowResp::CopyFrom(const OpenAffairWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenAffairWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_affair()) {
    if (!this->affair().IsInitialized()) return false;
  }
  return true;
}

void OpenAffairWindowResp::Swap(OpenAffairWindowResp* other) {
  if (other != this) {
    std::swap(affair_, other->affair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenAffairWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenAffairWindowResp_descriptor_;
  metadata.reflection = OpenAffairWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAffairRewardReq::kIndexFieldNumber;
#endif  // !_MSC_VER

GetAffairRewardReq::GetAffairRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGovernAffair.GetAffairRewardReq)
}

void GetAffairRewardReq::InitAsDefaultInstance() {
}

GetAffairRewardReq::GetAffairRewardReq(const GetAffairRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGovernAffair.GetAffairRewardReq)
}

void GetAffairRewardReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAffairRewardReq::~GetAffairRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoGovernAffair.GetAffairRewardReq)
  SharedDtor();
}

void GetAffairRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAffairRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAffairRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAffairRewardReq_descriptor_;
}

const GetAffairRewardReq& GetAffairRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGovernAffair_2eproto();
  return *default_instance_;
}

GetAffairRewardReq* GetAffairRewardReq::default_instance_ = NULL;

GetAffairRewardReq* GetAffairRewardReq::New() const {
  return new GetAffairRewardReq;
}

void GetAffairRewardReq::Clear() {
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAffairRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGovernAffair.GetAffairRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGovernAffair.GetAffairRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGovernAffair.GetAffairRewardReq)
  return false;
#undef DO_
}

void GetAffairRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGovernAffair.GetAffairRewardReq)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGovernAffair.GetAffairRewardReq)
}

::google::protobuf::uint8* GetAffairRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGovernAffair.GetAffairRewardReq)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGovernAffair.GetAffairRewardReq)
  return target;
}

int GetAffairRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAffairRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAffairRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAffairRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAffairRewardReq::MergeFrom(const GetAffairRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAffairRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAffairRewardReq::CopyFrom(const GetAffairRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAffairRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAffairRewardReq::Swap(GetAffairRewardReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAffairRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAffairRewardReq_descriptor_;
  metadata.reflection = GetAffairRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAffairRewardResp::kCoinFieldNumber;
const int GetAffairRewardResp::kWoodFieldNumber;
const int GetAffairRewardResp::kFoodFieldNumber;
const int GetAffairRewardResp::kCashFieldNumber;
const int GetAffairRewardResp::kAffairFieldNumber;
#endif  // !_MSC_VER

GetAffairRewardResp::GetAffairRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGovernAffair.GetAffairRewardResp)
}

void GetAffairRewardResp::InitAsDefaultInstance() {
  affair_ = const_cast< ::ProtoGovernAffair::AffairItemCPP*>(&::ProtoGovernAffair::AffairItemCPP::default_instance());
}

GetAffairRewardResp::GetAffairRewardResp(const GetAffairRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGovernAffair.GetAffairRewardResp)
}

void GetAffairRewardResp::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  wood_ = 0u;
  food_ = 0u;
  cash_ = 0u;
  affair_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAffairRewardResp::~GetAffairRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoGovernAffair.GetAffairRewardResp)
  SharedDtor();
}

void GetAffairRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete affair_;
  }
}

void GetAffairRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAffairRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAffairRewardResp_descriptor_;
}

const GetAffairRewardResp& GetAffairRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGovernAffair_2eproto();
  return *default_instance_;
}

GetAffairRewardResp* GetAffairRewardResp::default_instance_ = NULL;

GetAffairRewardResp* GetAffairRewardResp::New() const {
  return new GetAffairRewardResp;
}

void GetAffairRewardResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetAffairRewardResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(coin_, cash_);
    if (has_affair()) {
      if (affair_ != NULL) affair_->::ProtoGovernAffair::AffairItemCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAffairRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGovernAffair.GetAffairRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_wood;
        break;
      }

      // required uint32 wood = 2;
      case 2: {
        if (tag == 16) {
         parse_wood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wood_)));
          set_has_wood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_food;
        break;
      }

      // required uint32 food = 3;
      case 3: {
        if (tag == 24) {
         parse_food:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_)));
          set_has_food();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cash;
        break;
      }

      // required uint32 cash = 5;
      case 5: {
        if (tag == 40) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_affair;
        break;
      }

      // required .ProtoGovernAffair.AffairItemCPP affair = 6;
      case 6: {
        if (tag == 50) {
         parse_affair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_affair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGovernAffair.GetAffairRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGovernAffair.GetAffairRewardResp)
  return false;
#undef DO_
}

void GetAffairRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGovernAffair.GetAffairRewardResp)
  // required uint32 coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // required uint32 wood = 2;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wood(), output);
  }

  // required uint32 food = 3;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->food(), output);
  }

  // required uint32 cash = 5;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cash(), output);
  }

  // required .ProtoGovernAffair.AffairItemCPP affair = 6;
  if (has_affair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->affair(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGovernAffair.GetAffairRewardResp)
}

::google::protobuf::uint8* GetAffairRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGovernAffair.GetAffairRewardResp)
  // required uint32 coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coin(), target);
  }

  // required uint32 wood = 2;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wood(), target);
  }

  // required uint32 food = 3;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->food(), target);
  }

  // required uint32 cash = 5;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cash(), target);
  }

  // required .ProtoGovernAffair.AffairItemCPP affair = 6;
  if (has_affair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->affair(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGovernAffair.GetAffairRewardResp)
  return target;
}

int GetAffairRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 wood = 2;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wood());
    }

    // required uint32 food = 3;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food());
    }

    // required uint32 cash = 5;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required .ProtoGovernAffair.AffairItemCPP affair = 6;
    if (has_affair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->affair());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAffairRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAffairRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAffairRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAffairRewardResp::MergeFrom(const GetAffairRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_wood()) {
      set_wood(from.wood());
    }
    if (from.has_food()) {
      set_food(from.food());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_affair()) {
      mutable_affair()->::ProtoGovernAffair::AffairItemCPP::MergeFrom(from.affair());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAffairRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAffairRewardResp::CopyFrom(const GetAffairRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAffairRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_affair()) {
    if (!this->affair().IsInitialized()) return false;
  }
  return true;
}

void GetAffairRewardResp::Swap(GetAffairRewardResp* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(cash_, other->cash_);
    std::swap(affair_, other->affair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAffairRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAffairRewardResp_descriptor_;
  metadata.reflection = GetAffairRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoyalExchangeReq::LoyalExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGovernAffair.LoyalExchangeReq)
}

void LoyalExchangeReq::InitAsDefaultInstance() {
}

LoyalExchangeReq::LoyalExchangeReq(const LoyalExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGovernAffair.LoyalExchangeReq)
}

void LoyalExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoyalExchangeReq::~LoyalExchangeReq() {
  // @@protoc_insertion_point(destructor:ProtoGovernAffair.LoyalExchangeReq)
  SharedDtor();
}

void LoyalExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoyalExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoyalExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoyalExchangeReq_descriptor_;
}

const LoyalExchangeReq& LoyalExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGovernAffair_2eproto();
  return *default_instance_;
}

LoyalExchangeReq* LoyalExchangeReq::default_instance_ = NULL;

LoyalExchangeReq* LoyalExchangeReq::New() const {
  return new LoyalExchangeReq;
}

void LoyalExchangeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoyalExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGovernAffair.LoyalExchangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGovernAffair.LoyalExchangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGovernAffair.LoyalExchangeReq)
  return false;
#undef DO_
}

void LoyalExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGovernAffair.LoyalExchangeReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGovernAffair.LoyalExchangeReq)
}

::google::protobuf::uint8* LoyalExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGovernAffair.LoyalExchangeReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGovernAffair.LoyalExchangeReq)
  return target;
}

int LoyalExchangeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoyalExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoyalExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoyalExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoyalExchangeReq::MergeFrom(const LoyalExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoyalExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoyalExchangeReq::CopyFrom(const LoyalExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoyalExchangeReq::IsInitialized() const {

  return true;
}

void LoyalExchangeReq::Swap(LoyalExchangeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoyalExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoyalExchangeReq_descriptor_;
  metadata.reflection = LoyalExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoyalExchangeResp::kCoinFieldNumber;
const int LoyalExchangeResp::kWoodFieldNumber;
const int LoyalExchangeResp::kFoodFieldNumber;
const int LoyalExchangeResp::kIronFieldNumber;
const int LoyalExchangeResp::kLoyalFieldNumber;
#endif  // !_MSC_VER

LoyalExchangeResp::LoyalExchangeResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoGovernAffair.LoyalExchangeResp)
}

void LoyalExchangeResp::InitAsDefaultInstance() {
  coin_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  wood_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  food_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
  iron_ = const_cast< ::DataCommon::RewardItemCPP*>(&::DataCommon::RewardItemCPP::default_instance());
}

LoyalExchangeResp::LoyalExchangeResp(const LoyalExchangeResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoGovernAffair.LoyalExchangeResp)
}

void LoyalExchangeResp::SharedCtor() {
  _cached_size_ = 0;
  coin_ = NULL;
  wood_ = NULL;
  food_ = NULL;
  iron_ = NULL;
  loyal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoyalExchangeResp::~LoyalExchangeResp() {
  // @@protoc_insertion_point(destructor:ProtoGovernAffair.LoyalExchangeResp)
  SharedDtor();
}

void LoyalExchangeResp::SharedDtor() {
  if (this != default_instance_) {
    delete coin_;
    delete wood_;
    delete food_;
    delete iron_;
  }
}

void LoyalExchangeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoyalExchangeResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoyalExchangeResp_descriptor_;
}

const LoyalExchangeResp& LoyalExchangeResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoGovernAffair_2eproto();
  return *default_instance_;
}

LoyalExchangeResp* LoyalExchangeResp::default_instance_ = NULL;

LoyalExchangeResp* LoyalExchangeResp::New() const {
  return new LoyalExchangeResp;
}

void LoyalExchangeResp::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_coin()) {
      if (coin_ != NULL) coin_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_wood()) {
      if (wood_ != NULL) wood_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_food()) {
      if (food_ != NULL) food_->::DataCommon::RewardItemCPP::Clear();
    }
    if (has_iron()) {
      if (iron_ != NULL) iron_->::DataCommon::RewardItemCPP::Clear();
    }
    loyal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoyalExchangeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoGovernAffair.LoyalExchangeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.RewardItemCPP coin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wood;
        break;
      }

      // required .DataCommon.RewardItemCPP wood = 2;
      case 2: {
        if (tag == 18) {
         parse_wood:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wood()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_food;
        break;
      }

      // required .DataCommon.RewardItemCPP food = 3;
      case 3: {
        if (tag == 26) {
         parse_food:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_iron;
        break;
      }

      // required .DataCommon.RewardItemCPP iron = 4;
      case 4: {
        if (tag == 34) {
         parse_iron:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iron()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_loyal;
        break;
      }

      // required uint32 loyal = 5;
      case 5: {
        if (tag == 40) {
         parse_loyal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loyal_)));
          set_has_loyal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoGovernAffair.LoyalExchangeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoGovernAffair.LoyalExchangeResp)
  return false;
#undef DO_
}

void LoyalExchangeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoGovernAffair.LoyalExchangeResp)
  // required .DataCommon.RewardItemCPP coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coin(), output);
  }

  // required .DataCommon.RewardItemCPP wood = 2;
  if (has_wood()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wood(), output);
  }

  // required .DataCommon.RewardItemCPP food = 3;
  if (has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->food(), output);
  }

  // required .DataCommon.RewardItemCPP iron = 4;
  if (has_iron()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->iron(), output);
  }

  // required uint32 loyal = 5;
  if (has_loyal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->loyal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoGovernAffair.LoyalExchangeResp)
}

::google::protobuf::uint8* LoyalExchangeResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoGovernAffair.LoyalExchangeResp)
  // required .DataCommon.RewardItemCPP coin = 1;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coin(), target);
  }

  // required .DataCommon.RewardItemCPP wood = 2;
  if (has_wood()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wood(), target);
  }

  // required .DataCommon.RewardItemCPP food = 3;
  if (has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->food(), target);
  }

  // required .DataCommon.RewardItemCPP iron = 4;
  if (has_iron()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->iron(), target);
  }

  // required uint32 loyal = 5;
  if (has_loyal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->loyal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoGovernAffair.LoyalExchangeResp)
  return target;
}

int LoyalExchangeResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.RewardItemCPP coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coin());
    }

    // required .DataCommon.RewardItemCPP wood = 2;
    if (has_wood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wood());
    }

    // required .DataCommon.RewardItemCPP food = 3;
    if (has_food()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->food());
    }

    // required .DataCommon.RewardItemCPP iron = 4;
    if (has_iron()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iron());
    }

    // required uint32 loyal = 5;
    if (has_loyal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loyal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoyalExchangeResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoyalExchangeResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoyalExchangeResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoyalExchangeResp::MergeFrom(const LoyalExchangeResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      mutable_coin()->::DataCommon::RewardItemCPP::MergeFrom(from.coin());
    }
    if (from.has_wood()) {
      mutable_wood()->::DataCommon::RewardItemCPP::MergeFrom(from.wood());
    }
    if (from.has_food()) {
      mutable_food()->::DataCommon::RewardItemCPP::MergeFrom(from.food());
    }
    if (from.has_iron()) {
      mutable_iron()->::DataCommon::RewardItemCPP::MergeFrom(from.iron());
    }
    if (from.has_loyal()) {
      set_loyal(from.loyal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoyalExchangeResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoyalExchangeResp::CopyFrom(const LoyalExchangeResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoyalExchangeResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_coin()) {
    if (!this->coin().IsInitialized()) return false;
  }
  if (has_wood()) {
    if (!this->wood().IsInitialized()) return false;
  }
  if (has_food()) {
    if (!this->food().IsInitialized()) return false;
  }
  if (has_iron()) {
    if (!this->iron().IsInitialized()) return false;
  }
  return true;
}

void LoyalExchangeResp::Swap(LoyalExchangeResp* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(wood_, other->wood_);
    std::swap(food_, other->food_);
    std::swap(iron_, other->iron_);
    std::swap(loyal_, other->loyal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoyalExchangeResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoyalExchangeResp_descriptor_;
  metadata.reflection = LoyalExchangeResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoGovernAffair

// @@protoc_insertion_point(global_scope)
