// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoNPCActivity.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoNPCActivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoNPCActivity {

namespace {

const ::google::protobuf::Descriptor* OpenPlatformAffairConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenPlatformAffairConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AffairItemConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AffairItemConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AffairConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AffairConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveValueConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveValueConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenPlatformRewardConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenPlatformRewardConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityAffairConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityAffairConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCActivityConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCActivityConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCActivitySingleConfigCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCActivitySingleConfigCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* NPCActivityCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NPCActivityCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialNPCCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialNPCCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenNPCActivityWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenNPCActivityWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenNPCActivityWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenNPCActivityWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetActiveAffairRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetActiveAffairRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinalRewardCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinalRewardCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetActiveAffairRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetActiveAffairRewardResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetActiveValueRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetActiveValueRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetActiveValueRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetActiveValueRewardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoNPCActivity_2eproto() {
  protobuf_AddDesc_ProtoNPCActivity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoNPCActivity.proto");
  GOOGLE_CHECK(file != NULL);
  OpenPlatformAffairConfigCPP_descriptor_ = file->message_type(0);
  static const int OpenPlatformAffairConfigCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformAffairConfigCPP, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformAffairConfigCPP, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformAffairConfigCPP, active_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformAffairConfigCPP, paycash_),
  };
  OpenPlatformAffairConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenPlatformAffairConfigCPP_descriptor_,
      OpenPlatformAffairConfigCPP::default_instance_,
      OpenPlatformAffairConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformAffairConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformAffairConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenPlatformAffairConfigCPP));
  AffairItemConfigCPP_descriptor_ = file->message_type(1);
  static const int AffairItemConfigCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemConfigCPP, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemConfigCPP, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemConfigCPP, open_platform_affair_),
  };
  AffairItemConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AffairItemConfigCPP_descriptor_,
      AffairItemConfigCPP::default_instance_,
      AffairItemConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairItemConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AffairItemConfigCPP));
  AffairConfigCPP_descriptor_ = file->message_type(2);
  static const int AffairConfigCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairConfigCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairConfigCPP, items_),
  };
  AffairConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AffairConfigCPP_descriptor_,
      AffairConfigCPP::default_instance_,
      AffairConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffairConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AffairConfigCPP));
  ActiveValueConfigCPP_descriptor_ = file->message_type(3);
  static const int ActiveValueConfigCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveValueConfigCPP, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveValueConfigCPP, reward_),
  };
  ActiveValueConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveValueConfigCPP_descriptor_,
      ActiveValueConfigCPP::default_instance_,
      ActiveValueConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveValueConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveValueConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveValueConfigCPP));
  OpenPlatformRewardConfigCPP_descriptor_ = file->message_type(4);
  static const int OpenPlatformRewardConfigCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformRewardConfigCPP, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformRewardConfigCPP, active_value_reward_),
  };
  OpenPlatformRewardConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenPlatformRewardConfigCPP_descriptor_,
      OpenPlatformRewardConfigCPP::default_instance_,
      OpenPlatformRewardConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformRewardConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenPlatformRewardConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenPlatformRewardConfigCPP));
  ActivityAffairConfigCPP_descriptor_ = file->message_type(5);
  static const int ActivityAffairConfigCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityAffairConfigCPP, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityAffairConfigCPP, affairs_),
  };
  ActivityAffairConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityAffairConfigCPP_descriptor_,
      ActivityAffairConfigCPP::default_instance_,
      ActivityAffairConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityAffairConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityAffairConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityAffairConfigCPP));
  NPCActivityConfigCPP_descriptor_ = file->message_type(6);
  static const int NPCActivityConfigCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityConfigCPP, activity_affairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityConfigCPP, open_platform_reward_),
  };
  NPCActivityConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCActivityConfigCPP_descriptor_,
      NPCActivityConfigCPP::default_instance_,
      NPCActivityConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCActivityConfigCPP));
  NPCActivitySingleConfigCPP_descriptor_ = file->message_type(7);
  static const int NPCActivitySingleConfigCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivitySingleConfigCPP, activevalueconfig_),
  };
  NPCActivitySingleConfigCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCActivitySingleConfigCPP_descriptor_,
      NPCActivitySingleConfigCPP::default_instance_,
      NPCActivitySingleConfigCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivitySingleConfigCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivitySingleConfigCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCActivitySingleConfigCPP));
  NPCActivityCPP_descriptor_ = file->message_type(8);
  static const int NPCActivityCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityCPP, active_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityCPP, material_),
  };
  NPCActivityCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NPCActivityCPP_descriptor_,
      NPCActivityCPP::default_instance_,
      NPCActivityCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NPCActivityCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NPCActivityCPP));
  SpecialNPCCPP_descriptor_ = file->message_type(9);
  static const int SpecialNPCCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialNPCCPP, kindom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialNPCCPP, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialNPCCPP, nextts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialNPCCPP, npcid_),
  };
  SpecialNPCCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialNPCCPP_descriptor_,
      SpecialNPCCPP::default_instance_,
      SpecialNPCCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialNPCCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialNPCCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialNPCCPP));
  OpenNPCActivityWindowReq_descriptor_ = file->message_type(10);
  static const int OpenNPCActivityWindowReq_offsets_[1] = {
  };
  OpenNPCActivityWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenNPCActivityWindowReq_descriptor_,
      OpenNPCActivityWindowReq::default_instance_,
      OpenNPCActivityWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenNPCActivityWindowReq));
  OpenNPCActivityWindowResp_descriptor_ = file->message_type(11);
  static const int OpenNPCActivityWindowResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowResp, activityitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowResp, npcinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowResp, activityconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowResp, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowResp, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowResp, day_),
  };
  OpenNPCActivityWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenNPCActivityWindowResp_descriptor_,
      OpenNPCActivityWindowResp::default_instance_,
      OpenNPCActivityWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenNPCActivityWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenNPCActivityWindowResp));
  GetActiveAffairRewardReq_descriptor_ = file->message_type(12);
  static const int GetActiveAffairRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveAffairRewardReq, type_),
  };
  GetActiveAffairRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetActiveAffairRewardReq_descriptor_,
      GetActiveAffairRewardReq::default_instance_,
      GetActiveAffairRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveAffairRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveAffairRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetActiveAffairRewardReq));
  FinalRewardCPP_descriptor_ = file->message_type(13);
  static const int FinalRewardCPP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRewardCPP, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRewardCPP, base_),
  };
  FinalRewardCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinalRewardCPP_descriptor_,
      FinalRewardCPP::default_instance_,
      FinalRewardCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRewardCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalRewardCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinalRewardCPP));
  GetActiveAffairRewardResp_descriptor_ = file->message_type(14);
  static const int GetActiveAffairRewardResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveAffairRewardResp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveAffairRewardResp, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveAffairRewardResp, cash_),
  };
  GetActiveAffairRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetActiveAffairRewardResp_descriptor_,
      GetActiveAffairRewardResp::default_instance_,
      GetActiveAffairRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveAffairRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveAffairRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetActiveAffairRewardResp));
  GetActiveValueRewardReq_descriptor_ = file->message_type(15);
  static const int GetActiveValueRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveValueRewardReq, index_),
  };
  GetActiveValueRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetActiveValueRewardReq_descriptor_,
      GetActiveValueRewardReq::default_instance_,
      GetActiveValueRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveValueRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveValueRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetActiveValueRewardReq));
  GetActiveValueRewardResp_descriptor_ = file->message_type(16);
  static const int GetActiveValueRewardResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveValueRewardResp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveValueRewardResp, activity_),
  };
  GetActiveValueRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetActiveValueRewardResp_descriptor_,
      GetActiveValueRewardResp::default_instance_,
      GetActiveValueRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveValueRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetActiveValueRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetActiveValueRewardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoNPCActivity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenPlatformAffairConfigCPP_descriptor_, &OpenPlatformAffairConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AffairItemConfigCPP_descriptor_, &AffairItemConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AffairConfigCPP_descriptor_, &AffairConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveValueConfigCPP_descriptor_, &ActiveValueConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenPlatformRewardConfigCPP_descriptor_, &OpenPlatformRewardConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityAffairConfigCPP_descriptor_, &ActivityAffairConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCActivityConfigCPP_descriptor_, &NPCActivityConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCActivitySingleConfigCPP_descriptor_, &NPCActivitySingleConfigCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NPCActivityCPP_descriptor_, &NPCActivityCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialNPCCPP_descriptor_, &SpecialNPCCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenNPCActivityWindowReq_descriptor_, &OpenNPCActivityWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenNPCActivityWindowResp_descriptor_, &OpenNPCActivityWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetActiveAffairRewardReq_descriptor_, &GetActiveAffairRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinalRewardCPP_descriptor_, &FinalRewardCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetActiveAffairRewardResp_descriptor_, &GetActiveAffairRewardResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetActiveValueRewardReq_descriptor_, &GetActiveValueRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetActiveValueRewardResp_descriptor_, &GetActiveValueRewardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoNPCActivity_2eproto() {
  delete OpenPlatformAffairConfigCPP::default_instance_;
  delete OpenPlatformAffairConfigCPP_reflection_;
  delete AffairItemConfigCPP::default_instance_;
  delete AffairItemConfigCPP_reflection_;
  delete AffairConfigCPP::default_instance_;
  delete AffairConfigCPP_reflection_;
  delete ActiveValueConfigCPP::default_instance_;
  delete ActiveValueConfigCPP_reflection_;
  delete OpenPlatformRewardConfigCPP::default_instance_;
  delete OpenPlatformRewardConfigCPP_reflection_;
  delete ActivityAffairConfigCPP::default_instance_;
  delete ActivityAffairConfigCPP_reflection_;
  delete NPCActivityConfigCPP::default_instance_;
  delete NPCActivityConfigCPP_reflection_;
  delete NPCActivitySingleConfigCPP::default_instance_;
  delete NPCActivitySingleConfigCPP_reflection_;
  delete NPCActivityCPP::default_instance_;
  delete NPCActivityCPP_reflection_;
  delete SpecialNPCCPP::default_instance_;
  delete SpecialNPCCPP_reflection_;
  delete OpenNPCActivityWindowReq::default_instance_;
  delete OpenNPCActivityWindowReq_reflection_;
  delete OpenNPCActivityWindowResp::default_instance_;
  delete OpenNPCActivityWindowResp_reflection_;
  delete GetActiveAffairRewardReq::default_instance_;
  delete GetActiveAffairRewardReq_reflection_;
  delete FinalRewardCPP::default_instance_;
  delete FinalRewardCPP_reflection_;
  delete GetActiveAffairRewardResp::default_instance_;
  delete GetActiveAffairRewardResp_reflection_;
  delete GetActiveValueRewardReq::default_instance_;
  delete GetActiveValueRewardReq_reflection_;
  delete GetActiveValueRewardResp::default_instance_;
  delete GetActiveValueRewardResp_reflection_;
}

void protobuf_AddDesc_ProtoNPCActivity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataConfig::protobuf_AddDesc_DataConfig_2eproto();
  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::User::protobuf_AddDesc_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoNPCActivity.proto\022\020ProtoNPCActivi"
    "ty\032\020DataConfig.proto\032\020DataCommon.proto\032\n"
    "User.proto\"\203\001\n\033OpenPlatformAffairConfigC"
    "PP\022\020\n\010startday\030\001 \002(\r\022+\n\006reward\030\002 \003(\0132\033.D"
    "ataConfig.RewardConfigCPP\022\024\n\014active_valu"
    "e\030\003 \002(\r\022\017\n\007paycash\030\004 \001(\r\"\200\001\n\023AffairItemC"
    "onfigCPP\022\r\n\005props\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022K"
    "\n\024open_platform_affair\030\003 \003(\0132-.ProtoNPCA"
    "ctivity.OpenPlatformAffairConfigCPP\"S\n\017A"
    "ffairConfigCPP\022\n\n\002id\030\001 \002(\r\0224\n\005items\030\002 \003("
    "\0132%.ProtoNPCActivity.AffairItemConfigCPP"
    "\"R\n\024ActiveValueConfigCPP\022\r\n\005value\030\001 \002(\r\022"
    "+\n\006reward\030\002 \003(\0132\033.DataConfig.RewardConfi"
    "gCPP\"t\n\033OpenPlatformRewardConfigCPP\022\020\n\010s"
    "tartday\030\001 \002(\r\022C\n\023active_value_reward\030\002 \003"
    "(\0132&.ProtoNPCActivity.ActiveValueConfigC"
    "PP\"Z\n\027ActivityAffairConfigCPP\022\013\n\003day\030\001 \002"
    "(\r\0222\n\007affairs\030\002 \003(\0132!.ProtoNPCActivity.A"
    "ffairConfigCPP\"\250\001\n\024NPCActivityConfigCPP\022"
    "C\n\020activity_affairs\030\001 \003(\0132).ProtoNPCActi"
    "vity.ActivityAffairConfigCPP\022K\n\024open_pla"
    "tform_reward\030\002 \003(\0132-.ProtoNPCActivity.Op"
    "enPlatformRewardConfigCPP\"_\n\032NPCActivity"
    "SingleConfigCPP\022A\n\021activevalueconfig\030\001 \003"
    "(\0132&.ProtoNPCActivity.ActiveValueConfigC"
    "PP\"T\n\016NPCActivityCPP\022\n\n\002id\030\001 \002(\r\022\024\n\014acti"
    "ve_value\030\002 \002(\r\022\016\n\006status\030\003 \002(\r\022\020\n\010materi"
    "al\030\004 \003(\r\"L\n\rSpecialNPCCPP\022\016\n\006kindom\030\001 \002("
    "\r\022\014\n\004city\030\002 \002(\r\022\016\n\006nextts\030\003 \002(\r\022\r\n\005npcid"
    "\030\004 \002(\r\"\032\n\030OpenNPCActivityWindowReq\"\220\002\n\031O"
    "penNPCActivityWindowResp\022(\n\014activityitem"
    "\030\001 \001(\0132\022.User.ActivityItem\0220\n\007npcinfo\030\002 "
    "\003(\0132\037.ProtoNPCActivity.SpecialNPCCPP\022D\n\016"
    "activityconfig\030\003 \001(\0132,.ProtoNPCActivity."
    "NPCActivitySingleConfigCPP\0222\n\010activity\030\004"
    " \001(\0132 .ProtoNPCActivity.NPCActivityCPP\022\020"
    "\n\010multiple\030\005 \001(\r\022\013\n\003day\030\006 \001(\r\"(\n\030GetActi"
    "veAffairRewardReq\022\014\n\004type\030\001 \002(\r\"l\n\016Final"
    "RewardCPP\022+\n\006equips\030\001 \001(\0132\033.DataCommon.E"
    "quipmentAllCPP\022-\n\004base\030\002 \001(\0132\037.DataCommo"
    "n.CommonBaseRewardCPP\"\217\001\n\031GetActiveAffai"
    "rRewardResp\0220\n\006reward\030\001 \002(\0132 .ProtoNPCAc"
    "tivity.FinalRewardCPP\0222\n\010activity\030\002 \002(\0132"
    " .ProtoNPCActivity.NPCActivityCPP\022\014\n\004cas"
    "h\030\003 \002(\r\"(\n\027GetActiveValueRewardReq\022\r\n\005in"
    "dex\030\001 \002(\r\"\200\001\n\030GetActiveValueRewardResp\0220"
    "\n\006reward\030\001 \002(\0132 .ProtoNPCActivity.FinalR"
    "ewardCPP\0222\n\010activity\030\002 \002(\0132 .ProtoNPCAct"
    "ivity.NPCActivityCPP", 1940);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoNPCActivity.proto", &protobuf_RegisterTypes);
  OpenPlatformAffairConfigCPP::default_instance_ = new OpenPlatformAffairConfigCPP();
  AffairItemConfigCPP::default_instance_ = new AffairItemConfigCPP();
  AffairConfigCPP::default_instance_ = new AffairConfigCPP();
  ActiveValueConfigCPP::default_instance_ = new ActiveValueConfigCPP();
  OpenPlatformRewardConfigCPP::default_instance_ = new OpenPlatformRewardConfigCPP();
  ActivityAffairConfigCPP::default_instance_ = new ActivityAffairConfigCPP();
  NPCActivityConfigCPP::default_instance_ = new NPCActivityConfigCPP();
  NPCActivitySingleConfigCPP::default_instance_ = new NPCActivitySingleConfigCPP();
  NPCActivityCPP::default_instance_ = new NPCActivityCPP();
  SpecialNPCCPP::default_instance_ = new SpecialNPCCPP();
  OpenNPCActivityWindowReq::default_instance_ = new OpenNPCActivityWindowReq();
  OpenNPCActivityWindowResp::default_instance_ = new OpenNPCActivityWindowResp();
  GetActiveAffairRewardReq::default_instance_ = new GetActiveAffairRewardReq();
  FinalRewardCPP::default_instance_ = new FinalRewardCPP();
  GetActiveAffairRewardResp::default_instance_ = new GetActiveAffairRewardResp();
  GetActiveValueRewardReq::default_instance_ = new GetActiveValueRewardReq();
  GetActiveValueRewardResp::default_instance_ = new GetActiveValueRewardResp();
  OpenPlatformAffairConfigCPP::default_instance_->InitAsDefaultInstance();
  AffairItemConfigCPP::default_instance_->InitAsDefaultInstance();
  AffairConfigCPP::default_instance_->InitAsDefaultInstance();
  ActiveValueConfigCPP::default_instance_->InitAsDefaultInstance();
  OpenPlatformRewardConfigCPP::default_instance_->InitAsDefaultInstance();
  ActivityAffairConfigCPP::default_instance_->InitAsDefaultInstance();
  NPCActivityConfigCPP::default_instance_->InitAsDefaultInstance();
  NPCActivitySingleConfigCPP::default_instance_->InitAsDefaultInstance();
  NPCActivityCPP::default_instance_->InitAsDefaultInstance();
  SpecialNPCCPP::default_instance_->InitAsDefaultInstance();
  OpenNPCActivityWindowReq::default_instance_->InitAsDefaultInstance();
  OpenNPCActivityWindowResp::default_instance_->InitAsDefaultInstance();
  GetActiveAffairRewardReq::default_instance_->InitAsDefaultInstance();
  FinalRewardCPP::default_instance_->InitAsDefaultInstance();
  GetActiveAffairRewardResp::default_instance_->InitAsDefaultInstance();
  GetActiveValueRewardReq::default_instance_->InitAsDefaultInstance();
  GetActiveValueRewardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoNPCActivity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoNPCActivity_2eproto {
  StaticDescriptorInitializer_ProtoNPCActivity_2eproto() {
    protobuf_AddDesc_ProtoNPCActivity_2eproto();
  }
} static_descriptor_initializer_ProtoNPCActivity_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OpenPlatformAffairConfigCPP::kStartdayFieldNumber;
const int OpenPlatformAffairConfigCPP::kRewardFieldNumber;
const int OpenPlatformAffairConfigCPP::kActiveValueFieldNumber;
const int OpenPlatformAffairConfigCPP::kPaycashFieldNumber;
#endif  // !_MSC_VER

OpenPlatformAffairConfigCPP::OpenPlatformAffairConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
}

void OpenPlatformAffairConfigCPP::InitAsDefaultInstance() {
}

OpenPlatformAffairConfigCPP::OpenPlatformAffairConfigCPP(const OpenPlatformAffairConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
}

void OpenPlatformAffairConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  startday_ = 0u;
  active_value_ = 0u;
  paycash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenPlatformAffairConfigCPP::~OpenPlatformAffairConfigCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
  SharedDtor();
}

void OpenPlatformAffairConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenPlatformAffairConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenPlatformAffairConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenPlatformAffairConfigCPP_descriptor_;
}

const OpenPlatformAffairConfigCPP& OpenPlatformAffairConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

OpenPlatformAffairConfigCPP* OpenPlatformAffairConfigCPP::default_instance_ = NULL;

OpenPlatformAffairConfigCPP* OpenPlatformAffairConfigCPP::New() const {
  return new OpenPlatformAffairConfigCPP;
}

void OpenPlatformAffairConfigCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenPlatformAffairConfigCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(startday_, paycash_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenPlatformAffairConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startday = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startday_)));
          set_has_startday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .DataConfig.RewardConfigCPP reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(24)) goto parse_active_value;
        break;
      }

      // required uint32 active_value = 3;
      case 3: {
        if (tag == 24) {
         parse_active_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_value_)));
          set_has_active_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_paycash;
        break;
      }

      // optional uint32 paycash = 4;
      case 4: {
        if (tag == 32) {
         parse_paycash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paycash_)));
          set_has_paycash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
  return false;
#undef DO_
}

void OpenPlatformAffairConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
  // required uint32 startday = 1;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startday(), output);
  }

  // repeated .DataConfig.RewardConfigCPP reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  // required uint32 active_value = 3;
  if (has_active_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->active_value(), output);
  }

  // optional uint32 paycash = 4;
  if (has_paycash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->paycash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
}

::google::protobuf::uint8* OpenPlatformAffairConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
  // required uint32 startday = 1;
  if (has_startday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startday(), target);
  }

  // repeated .DataConfig.RewardConfigCPP reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  // required uint32 active_value = 3;
  if (has_active_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->active_value(), target);
  }

  // optional uint32 paycash = 4;
  if (has_paycash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->paycash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.OpenPlatformAffairConfigCPP)
  return target;
}

int OpenPlatformAffairConfigCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 startday = 1;
    if (has_startday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startday());
    }

    // required uint32 active_value = 3;
    if (has_active_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_value());
    }

    // optional uint32 paycash = 4;
    if (has_paycash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paycash());
    }

  }
  // repeated .DataConfig.RewardConfigCPP reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenPlatformAffairConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenPlatformAffairConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenPlatformAffairConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenPlatformAffairConfigCPP::MergeFrom(const OpenPlatformAffairConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startday()) {
      set_startday(from.startday());
    }
    if (from.has_active_value()) {
      set_active_value(from.active_value());
    }
    if (from.has_paycash()) {
      set_paycash(from.paycash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenPlatformAffairConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPlatformAffairConfigCPP::CopyFrom(const OpenPlatformAffairConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPlatformAffairConfigCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void OpenPlatformAffairConfigCPP::Swap(OpenPlatformAffairConfigCPP* other) {
  if (other != this) {
    std::swap(startday_, other->startday_);
    reward_.Swap(&other->reward_);
    std::swap(active_value_, other->active_value_);
    std::swap(paycash_, other->paycash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenPlatformAffairConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenPlatformAffairConfigCPP_descriptor_;
  metadata.reflection = OpenPlatformAffairConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AffairItemConfigCPP::kPropsFieldNumber;
const int AffairItemConfigCPP::kCountFieldNumber;
const int AffairItemConfigCPP::kOpenPlatformAffairFieldNumber;
#endif  // !_MSC_VER

AffairItemConfigCPP::AffairItemConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.AffairItemConfigCPP)
}

void AffairItemConfigCPP::InitAsDefaultInstance() {
}

AffairItemConfigCPP::AffairItemConfigCPP(const AffairItemConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.AffairItemConfigCPP)
}

void AffairItemConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  props_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AffairItemConfigCPP::~AffairItemConfigCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.AffairItemConfigCPP)
  SharedDtor();
}

void AffairItemConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AffairItemConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AffairItemConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AffairItemConfigCPP_descriptor_;
}

const AffairItemConfigCPP& AffairItemConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

AffairItemConfigCPP* AffairItemConfigCPP::default_instance_ = NULL;

AffairItemConfigCPP* AffairItemConfigCPP::New() const {
  return new AffairItemConfigCPP;
}

void AffairItemConfigCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AffairItemConfigCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(props_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  open_platform_affair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AffairItemConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.AffairItemConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 props = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &props_)));
          set_has_props();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_open_platform_affair;
        break;
      }

      // repeated .ProtoNPCActivity.OpenPlatformAffairConfigCPP open_platform_affair = 3;
      case 3: {
        if (tag == 26) {
         parse_open_platform_affair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_platform_affair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_open_platform_affair;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.AffairItemConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.AffairItemConfigCPP)
  return false;
#undef DO_
}

void AffairItemConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.AffairItemConfigCPP)
  // optional uint32 props = 1;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->props(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // repeated .ProtoNPCActivity.OpenPlatformAffairConfigCPP open_platform_affair = 3;
  for (int i = 0; i < this->open_platform_affair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->open_platform_affair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.AffairItemConfigCPP)
}

::google::protobuf::uint8* AffairItemConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.AffairItemConfigCPP)
  // optional uint32 props = 1;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->props(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // repeated .ProtoNPCActivity.OpenPlatformAffairConfigCPP open_platform_affair = 3;
  for (int i = 0; i < this->open_platform_affair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->open_platform_affair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.AffairItemConfigCPP)
  return target;
}

int AffairItemConfigCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 props = 1;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->props());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  // repeated .ProtoNPCActivity.OpenPlatformAffairConfigCPP open_platform_affair = 3;
  total_size += 1 * this->open_platform_affair_size();
  for (int i = 0; i < this->open_platform_affair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->open_platform_affair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AffairItemConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AffairItemConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AffairItemConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AffairItemConfigCPP::MergeFrom(const AffairItemConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  open_platform_affair_.MergeFrom(from.open_platform_affair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_props()) {
      set_props(from.props());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AffairItemConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffairItemConfigCPP::CopyFrom(const AffairItemConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffairItemConfigCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->open_platform_affair())) return false;
  return true;
}

void AffairItemConfigCPP::Swap(AffairItemConfigCPP* other) {
  if (other != this) {
    std::swap(props_, other->props_);
    std::swap(count_, other->count_);
    open_platform_affair_.Swap(&other->open_platform_affair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AffairItemConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AffairItemConfigCPP_descriptor_;
  metadata.reflection = AffairItemConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AffairConfigCPP::kIdFieldNumber;
const int AffairConfigCPP::kItemsFieldNumber;
#endif  // !_MSC_VER

AffairConfigCPP::AffairConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.AffairConfigCPP)
}

void AffairConfigCPP::InitAsDefaultInstance() {
}

AffairConfigCPP::AffairConfigCPP(const AffairConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.AffairConfigCPP)
}

void AffairConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AffairConfigCPP::~AffairConfigCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.AffairConfigCPP)
  SharedDtor();
}

void AffairConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AffairConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AffairConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AffairConfigCPP_descriptor_;
}

const AffairConfigCPP& AffairConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

AffairConfigCPP* AffairConfigCPP::default_instance_ = NULL;

AffairConfigCPP* AffairConfigCPP::New() const {
  return new AffairConfigCPP;
}

void AffairConfigCPP::Clear() {
  id_ = 0u;
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AffairConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.AffairConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .ProtoNPCActivity.AffairItemConfigCPP items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.AffairConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.AffairConfigCPP)
  return false;
#undef DO_
}

void AffairConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.AffairConfigCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .ProtoNPCActivity.AffairItemConfigCPP items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.AffairConfigCPP)
}

::google::protobuf::uint8* AffairConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.AffairConfigCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .ProtoNPCActivity.AffairItemConfigCPP items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.AffairConfigCPP)
  return target;
}

int AffairConfigCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .ProtoNPCActivity.AffairItemConfigCPP items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AffairConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AffairConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AffairConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AffairConfigCPP::MergeFrom(const AffairConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AffairConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffairConfigCPP::CopyFrom(const AffairConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffairConfigCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void AffairConfigCPP::Swap(AffairConfigCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AffairConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AffairConfigCPP_descriptor_;
  metadata.reflection = AffairConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActiveValueConfigCPP::kValueFieldNumber;
const int ActiveValueConfigCPP::kRewardFieldNumber;
#endif  // !_MSC_VER

ActiveValueConfigCPP::ActiveValueConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.ActiveValueConfigCPP)
}

void ActiveValueConfigCPP::InitAsDefaultInstance() {
}

ActiveValueConfigCPP::ActiveValueConfigCPP(const ActiveValueConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.ActiveValueConfigCPP)
}

void ActiveValueConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveValueConfigCPP::~ActiveValueConfigCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.ActiveValueConfigCPP)
  SharedDtor();
}

void ActiveValueConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActiveValueConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveValueConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveValueConfigCPP_descriptor_;
}

const ActiveValueConfigCPP& ActiveValueConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

ActiveValueConfigCPP* ActiveValueConfigCPP::default_instance_ = NULL;

ActiveValueConfigCPP* ActiveValueConfigCPP::New() const {
  return new ActiveValueConfigCPP;
}

void ActiveValueConfigCPP::Clear() {
  value_ = 0u;
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveValueConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.ActiveValueConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .DataConfig.RewardConfigCPP reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.ActiveValueConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.ActiveValueConfigCPP)
  return false;
#undef DO_
}

void ActiveValueConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.ActiveValueConfigCPP)
  // required uint32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // repeated .DataConfig.RewardConfigCPP reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.ActiveValueConfigCPP)
}

::google::protobuf::uint8* ActiveValueConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.ActiveValueConfigCPP)
  // required uint32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // repeated .DataConfig.RewardConfigCPP reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.ActiveValueConfigCPP)
  return target;
}

int ActiveValueConfigCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  // repeated .DataConfig.RewardConfigCPP reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveValueConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveValueConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveValueConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveValueConfigCPP::MergeFrom(const ActiveValueConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveValueConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveValueConfigCPP::CopyFrom(const ActiveValueConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveValueConfigCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->reward())) return false;
  return true;
}

void ActiveValueConfigCPP::Swap(ActiveValueConfigCPP* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveValueConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveValueConfigCPP_descriptor_;
  metadata.reflection = ActiveValueConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenPlatformRewardConfigCPP::kStartdayFieldNumber;
const int OpenPlatformRewardConfigCPP::kActiveValueRewardFieldNumber;
#endif  // !_MSC_VER

OpenPlatformRewardConfigCPP::OpenPlatformRewardConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
}

void OpenPlatformRewardConfigCPP::InitAsDefaultInstance() {
}

OpenPlatformRewardConfigCPP::OpenPlatformRewardConfigCPP(const OpenPlatformRewardConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
}

void OpenPlatformRewardConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  startday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenPlatformRewardConfigCPP::~OpenPlatformRewardConfigCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
  SharedDtor();
}

void OpenPlatformRewardConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenPlatformRewardConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenPlatformRewardConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenPlatformRewardConfigCPP_descriptor_;
}

const OpenPlatformRewardConfigCPP& OpenPlatformRewardConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

OpenPlatformRewardConfigCPP* OpenPlatformRewardConfigCPP::default_instance_ = NULL;

OpenPlatformRewardConfigCPP* OpenPlatformRewardConfigCPP::New() const {
  return new OpenPlatformRewardConfigCPP;
}

void OpenPlatformRewardConfigCPP::Clear() {
  startday_ = 0u;
  active_value_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenPlatformRewardConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 startday = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startday_)));
          set_has_startday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_active_value_reward;
        break;
      }

      // repeated .ProtoNPCActivity.ActiveValueConfigCPP active_value_reward = 2;
      case 2: {
        if (tag == 18) {
         parse_active_value_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active_value_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_active_value_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
  return false;
#undef DO_
}

void OpenPlatformRewardConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
  // required uint32 startday = 1;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startday(), output);
  }

  // repeated .ProtoNPCActivity.ActiveValueConfigCPP active_value_reward = 2;
  for (int i = 0; i < this->active_value_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->active_value_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
}

::google::protobuf::uint8* OpenPlatformRewardConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
  // required uint32 startday = 1;
  if (has_startday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startday(), target);
  }

  // repeated .ProtoNPCActivity.ActiveValueConfigCPP active_value_reward = 2;
  for (int i = 0; i < this->active_value_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->active_value_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.OpenPlatformRewardConfigCPP)
  return target;
}

int OpenPlatformRewardConfigCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 startday = 1;
    if (has_startday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startday());
    }

  }
  // repeated .ProtoNPCActivity.ActiveValueConfigCPP active_value_reward = 2;
  total_size += 1 * this->active_value_reward_size();
  for (int i = 0; i < this->active_value_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active_value_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenPlatformRewardConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenPlatformRewardConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenPlatformRewardConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenPlatformRewardConfigCPP::MergeFrom(const OpenPlatformRewardConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  active_value_reward_.MergeFrom(from.active_value_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startday()) {
      set_startday(from.startday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenPlatformRewardConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenPlatformRewardConfigCPP::CopyFrom(const OpenPlatformRewardConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenPlatformRewardConfigCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->active_value_reward())) return false;
  return true;
}

void OpenPlatformRewardConfigCPP::Swap(OpenPlatformRewardConfigCPP* other) {
  if (other != this) {
    std::swap(startday_, other->startday_);
    active_value_reward_.Swap(&other->active_value_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenPlatformRewardConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenPlatformRewardConfigCPP_descriptor_;
  metadata.reflection = OpenPlatformRewardConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityAffairConfigCPP::kDayFieldNumber;
const int ActivityAffairConfigCPP::kAffairsFieldNumber;
#endif  // !_MSC_VER

ActivityAffairConfigCPP::ActivityAffairConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.ActivityAffairConfigCPP)
}

void ActivityAffairConfigCPP::InitAsDefaultInstance() {
}

ActivityAffairConfigCPP::ActivityAffairConfigCPP(const ActivityAffairConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.ActivityAffairConfigCPP)
}

void ActivityAffairConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityAffairConfigCPP::~ActivityAffairConfigCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.ActivityAffairConfigCPP)
  SharedDtor();
}

void ActivityAffairConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityAffairConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityAffairConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityAffairConfigCPP_descriptor_;
}

const ActivityAffairConfigCPP& ActivityAffairConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

ActivityAffairConfigCPP* ActivityAffairConfigCPP::default_instance_ = NULL;

ActivityAffairConfigCPP* ActivityAffairConfigCPP::New() const {
  return new ActivityAffairConfigCPP;
}

void ActivityAffairConfigCPP::Clear() {
  day_ = 0u;
  affairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityAffairConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.ActivityAffairConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_affairs;
        break;
      }

      // repeated .ProtoNPCActivity.AffairConfigCPP affairs = 2;
      case 2: {
        if (tag == 18) {
         parse_affairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_affairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_affairs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.ActivityAffairConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.ActivityAffairConfigCPP)
  return false;
#undef DO_
}

void ActivityAffairConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.ActivityAffairConfigCPP)
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // repeated .ProtoNPCActivity.AffairConfigCPP affairs = 2;
  for (int i = 0; i < this->affairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->affairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.ActivityAffairConfigCPP)
}

::google::protobuf::uint8* ActivityAffairConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.ActivityAffairConfigCPP)
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // repeated .ProtoNPCActivity.AffairConfigCPP affairs = 2;
  for (int i = 0; i < this->affairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->affairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.ActivityAffairConfigCPP)
  return target;
}

int ActivityAffairConfigCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  // repeated .ProtoNPCActivity.AffairConfigCPP affairs = 2;
  total_size += 1 * this->affairs_size();
  for (int i = 0; i < this->affairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->affairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityAffairConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityAffairConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityAffairConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityAffairConfigCPP::MergeFrom(const ActivityAffairConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  affairs_.MergeFrom(from.affairs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityAffairConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityAffairConfigCPP::CopyFrom(const ActivityAffairConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityAffairConfigCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->affairs())) return false;
  return true;
}

void ActivityAffairConfigCPP::Swap(ActivityAffairConfigCPP* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    affairs_.Swap(&other->affairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityAffairConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityAffairConfigCPP_descriptor_;
  metadata.reflection = ActivityAffairConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCActivityConfigCPP::kActivityAffairsFieldNumber;
const int NPCActivityConfigCPP::kOpenPlatformRewardFieldNumber;
#endif  // !_MSC_VER

NPCActivityConfigCPP::NPCActivityConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.NPCActivityConfigCPP)
}

void NPCActivityConfigCPP::InitAsDefaultInstance() {
}

NPCActivityConfigCPP::NPCActivityConfigCPP(const NPCActivityConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.NPCActivityConfigCPP)
}

void NPCActivityConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCActivityConfigCPP::~NPCActivityConfigCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.NPCActivityConfigCPP)
  SharedDtor();
}

void NPCActivityConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCActivityConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCActivityConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCActivityConfigCPP_descriptor_;
}

const NPCActivityConfigCPP& NPCActivityConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

NPCActivityConfigCPP* NPCActivityConfigCPP::default_instance_ = NULL;

NPCActivityConfigCPP* NPCActivityConfigCPP::New() const {
  return new NPCActivityConfigCPP;
}

void NPCActivityConfigCPP::Clear() {
  activity_affairs_.Clear();
  open_platform_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCActivityConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.NPCActivityConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoNPCActivity.ActivityAffairConfigCPP activity_affairs = 1;
      case 1: {
        if (tag == 10) {
         parse_activity_affairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity_affairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_activity_affairs;
        if (input->ExpectTag(18)) goto parse_open_platform_reward;
        break;
      }

      // repeated .ProtoNPCActivity.OpenPlatformRewardConfigCPP open_platform_reward = 2;
      case 2: {
        if (tag == 18) {
         parse_open_platform_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_platform_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_open_platform_reward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.NPCActivityConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.NPCActivityConfigCPP)
  return false;
#undef DO_
}

void NPCActivityConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.NPCActivityConfigCPP)
  // repeated .ProtoNPCActivity.ActivityAffairConfigCPP activity_affairs = 1;
  for (int i = 0; i < this->activity_affairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activity_affairs(i), output);
  }

  // repeated .ProtoNPCActivity.OpenPlatformRewardConfigCPP open_platform_reward = 2;
  for (int i = 0; i < this->open_platform_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->open_platform_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.NPCActivityConfigCPP)
}

::google::protobuf::uint8* NPCActivityConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.NPCActivityConfigCPP)
  // repeated .ProtoNPCActivity.ActivityAffairConfigCPP activity_affairs = 1;
  for (int i = 0; i < this->activity_affairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activity_affairs(i), target);
  }

  // repeated .ProtoNPCActivity.OpenPlatformRewardConfigCPP open_platform_reward = 2;
  for (int i = 0; i < this->open_platform_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->open_platform_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.NPCActivityConfigCPP)
  return target;
}

int NPCActivityConfigCPP::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoNPCActivity.ActivityAffairConfigCPP activity_affairs = 1;
  total_size += 1 * this->activity_affairs_size();
  for (int i = 0; i < this->activity_affairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity_affairs(i));
  }

  // repeated .ProtoNPCActivity.OpenPlatformRewardConfigCPP open_platform_reward = 2;
  total_size += 1 * this->open_platform_reward_size();
  for (int i = 0; i < this->open_platform_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->open_platform_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCActivityConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCActivityConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCActivityConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCActivityConfigCPP::MergeFrom(const NPCActivityConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_affairs_.MergeFrom(from.activity_affairs_);
  open_platform_reward_.MergeFrom(from.open_platform_reward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCActivityConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCActivityConfigCPP::CopyFrom(const NPCActivityConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCActivityConfigCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->activity_affairs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->open_platform_reward())) return false;
  return true;
}

void NPCActivityConfigCPP::Swap(NPCActivityConfigCPP* other) {
  if (other != this) {
    activity_affairs_.Swap(&other->activity_affairs_);
    open_platform_reward_.Swap(&other->open_platform_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCActivityConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCActivityConfigCPP_descriptor_;
  metadata.reflection = NPCActivityConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCActivitySingleConfigCPP::kActivevalueconfigFieldNumber;
#endif  // !_MSC_VER

NPCActivitySingleConfigCPP::NPCActivitySingleConfigCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.NPCActivitySingleConfigCPP)
}

void NPCActivitySingleConfigCPP::InitAsDefaultInstance() {
}

NPCActivitySingleConfigCPP::NPCActivitySingleConfigCPP(const NPCActivitySingleConfigCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.NPCActivitySingleConfigCPP)
}

void NPCActivitySingleConfigCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCActivitySingleConfigCPP::~NPCActivitySingleConfigCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.NPCActivitySingleConfigCPP)
  SharedDtor();
}

void NPCActivitySingleConfigCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCActivitySingleConfigCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCActivitySingleConfigCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCActivitySingleConfigCPP_descriptor_;
}

const NPCActivitySingleConfigCPP& NPCActivitySingleConfigCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

NPCActivitySingleConfigCPP* NPCActivitySingleConfigCPP::default_instance_ = NULL;

NPCActivitySingleConfigCPP* NPCActivitySingleConfigCPP::New() const {
  return new NPCActivitySingleConfigCPP;
}

void NPCActivitySingleConfigCPP::Clear() {
  activevalueconfig_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCActivitySingleConfigCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.NPCActivitySingleConfigCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoNPCActivity.ActiveValueConfigCPP activevalueconfig = 1;
      case 1: {
        if (tag == 10) {
         parse_activevalueconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activevalueconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_activevalueconfig;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.NPCActivitySingleConfigCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.NPCActivitySingleConfigCPP)
  return false;
#undef DO_
}

void NPCActivitySingleConfigCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.NPCActivitySingleConfigCPP)
  // repeated .ProtoNPCActivity.ActiveValueConfigCPP activevalueconfig = 1;
  for (int i = 0; i < this->activevalueconfig_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activevalueconfig(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.NPCActivitySingleConfigCPP)
}

::google::protobuf::uint8* NPCActivitySingleConfigCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.NPCActivitySingleConfigCPP)
  // repeated .ProtoNPCActivity.ActiveValueConfigCPP activevalueconfig = 1;
  for (int i = 0; i < this->activevalueconfig_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activevalueconfig(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.NPCActivitySingleConfigCPP)
  return target;
}

int NPCActivitySingleConfigCPP::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoNPCActivity.ActiveValueConfigCPP activevalueconfig = 1;
  total_size += 1 * this->activevalueconfig_size();
  for (int i = 0; i < this->activevalueconfig_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activevalueconfig(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCActivitySingleConfigCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCActivitySingleConfigCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCActivitySingleConfigCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCActivitySingleConfigCPP::MergeFrom(const NPCActivitySingleConfigCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  activevalueconfig_.MergeFrom(from.activevalueconfig_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCActivitySingleConfigCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCActivitySingleConfigCPP::CopyFrom(const NPCActivitySingleConfigCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCActivitySingleConfigCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->activevalueconfig())) return false;
  return true;
}

void NPCActivitySingleConfigCPP::Swap(NPCActivitySingleConfigCPP* other) {
  if (other != this) {
    activevalueconfig_.Swap(&other->activevalueconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCActivitySingleConfigCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCActivitySingleConfigCPP_descriptor_;
  metadata.reflection = NPCActivitySingleConfigCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NPCActivityCPP::kIdFieldNumber;
const int NPCActivityCPP::kActiveValueFieldNumber;
const int NPCActivityCPP::kStatusFieldNumber;
const int NPCActivityCPP::kMaterialFieldNumber;
#endif  // !_MSC_VER

NPCActivityCPP::NPCActivityCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.NPCActivityCPP)
}

void NPCActivityCPP::InitAsDefaultInstance() {
}

NPCActivityCPP::NPCActivityCPP(const NPCActivityCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.NPCActivityCPP)
}

void NPCActivityCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  active_value_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCActivityCPP::~NPCActivityCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.NPCActivityCPP)
  SharedDtor();
}

void NPCActivityCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NPCActivityCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NPCActivityCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NPCActivityCPP_descriptor_;
}

const NPCActivityCPP& NPCActivityCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

NPCActivityCPP* NPCActivityCPP::default_instance_ = NULL;

NPCActivityCPP* NPCActivityCPP::New() const {
  return new NPCActivityCPP;
}

void NPCActivityCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NPCActivityCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(id_, active_value_);
    status_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  material_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NPCActivityCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.NPCActivityCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_active_value;
        break;
      }

      // required uint32 active_value = 2;
      case 2: {
        if (tag == 16) {
         parse_active_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_value_)));
          set_has_active_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_material;
        break;
      }

      // repeated uint32 material = 4;
      case 4: {
        if (tag == 32) {
         parse_material:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_material())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_material())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_material;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.NPCActivityCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.NPCActivityCPP)
  return false;
#undef DO_
}

void NPCActivityCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.NPCActivityCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 active_value = 2;
  if (has_active_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_value(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // repeated uint32 material = 4;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->material(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.NPCActivityCPP)
}

::google::protobuf::uint8* NPCActivityCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.NPCActivityCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 active_value = 2;
  if (has_active_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_value(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // repeated uint32 material = 4;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->material(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.NPCActivityCPP)
  return target;
}

int NPCActivityCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 active_value = 2;
    if (has_active_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_value());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  // repeated uint32 material = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->material_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->material(i));
    }
    total_size += 1 * this->material_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCActivityCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NPCActivityCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NPCActivityCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NPCActivityCPP::MergeFrom(const NPCActivityCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  material_.MergeFrom(from.material_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_active_value()) {
      set_active_value(from.active_value());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NPCActivityCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPCActivityCPP::CopyFrom(const NPCActivityCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCActivityCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NPCActivityCPP::Swap(NPCActivityCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(active_value_, other->active_value_);
    std::swap(status_, other->status_);
    material_.Swap(&other->material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NPCActivityCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NPCActivityCPP_descriptor_;
  metadata.reflection = NPCActivityCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialNPCCPP::kKindomFieldNumber;
const int SpecialNPCCPP::kCityFieldNumber;
const int SpecialNPCCPP::kNexttsFieldNumber;
const int SpecialNPCCPP::kNpcidFieldNumber;
#endif  // !_MSC_VER

SpecialNPCCPP::SpecialNPCCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.SpecialNPCCPP)
}

void SpecialNPCCPP::InitAsDefaultInstance() {
}

SpecialNPCCPP::SpecialNPCCPP(const SpecialNPCCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.SpecialNPCCPP)
}

void SpecialNPCCPP::SharedCtor() {
  _cached_size_ = 0;
  kindom_ = 0u;
  city_ = 0u;
  nextts_ = 0u;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialNPCCPP::~SpecialNPCCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.SpecialNPCCPP)
  SharedDtor();
}

void SpecialNPCCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialNPCCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialNPCCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialNPCCPP_descriptor_;
}

const SpecialNPCCPP& SpecialNPCCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

SpecialNPCCPP* SpecialNPCCPP::default_instance_ = NULL;

SpecialNPCCPP* SpecialNPCCPP::New() const {
  return new SpecialNPCCPP;
}

void SpecialNPCCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecialNPCCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kindom_, npcid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialNPCCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.SpecialNPCCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 kindom = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kindom_)));
          set_has_kindom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_city;
        break;
      }

      // required uint32 city = 2;
      case 2: {
        if (tag == 16) {
         parse_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_)));
          set_has_city();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nextts;
        break;
      }

      // required uint32 nextts = 3;
      case 3: {
        if (tag == 24) {
         parse_nextts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextts_)));
          set_has_nextts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // required uint32 npcid = 4;
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.SpecialNPCCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.SpecialNPCCPP)
  return false;
#undef DO_
}

void SpecialNPCCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.SpecialNPCCPP)
  // required uint32 kindom = 1;
  if (has_kindom()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kindom(), output);
  }

  // required uint32 city = 2;
  if (has_city()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city(), output);
  }

  // required uint32 nextts = 3;
  if (has_nextts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nextts(), output);
  }

  // required uint32 npcid = 4;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.SpecialNPCCPP)
}

::google::protobuf::uint8* SpecialNPCCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.SpecialNPCCPP)
  // required uint32 kindom = 1;
  if (has_kindom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kindom(), target);
  }

  // required uint32 city = 2;
  if (has_city()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city(), target);
  }

  // required uint32 nextts = 3;
  if (has_nextts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nextts(), target);
  }

  // required uint32 npcid = 4;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.SpecialNPCCPP)
  return target;
}

int SpecialNPCCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 kindom = 1;
    if (has_kindom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kindom());
    }

    // required uint32 city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city());
    }

    // required uint32 nextts = 3;
    if (has_nextts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextts());
    }

    // required uint32 npcid = 4;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialNPCCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialNPCCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialNPCCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialNPCCPP::MergeFrom(const SpecialNPCCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kindom()) {
      set_kindom(from.kindom());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_nextts()) {
      set_nextts(from.nextts());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialNPCCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialNPCCPP::CopyFrom(const SpecialNPCCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialNPCCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SpecialNPCCPP::Swap(SpecialNPCCPP* other) {
  if (other != this) {
    std::swap(kindom_, other->kindom_);
    std::swap(city_, other->city_);
    std::swap(nextts_, other->nextts_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialNPCCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialNPCCPP_descriptor_;
  metadata.reflection = SpecialNPCCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenNPCActivityWindowReq::OpenNPCActivityWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.OpenNPCActivityWindowReq)
}

void OpenNPCActivityWindowReq::InitAsDefaultInstance() {
}

OpenNPCActivityWindowReq::OpenNPCActivityWindowReq(const OpenNPCActivityWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.OpenNPCActivityWindowReq)
}

void OpenNPCActivityWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenNPCActivityWindowReq::~OpenNPCActivityWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.OpenNPCActivityWindowReq)
  SharedDtor();
}

void OpenNPCActivityWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenNPCActivityWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenNPCActivityWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenNPCActivityWindowReq_descriptor_;
}

const OpenNPCActivityWindowReq& OpenNPCActivityWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

OpenNPCActivityWindowReq* OpenNPCActivityWindowReq::default_instance_ = NULL;

OpenNPCActivityWindowReq* OpenNPCActivityWindowReq::New() const {
  return new OpenNPCActivityWindowReq;
}

void OpenNPCActivityWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenNPCActivityWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.OpenNPCActivityWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.OpenNPCActivityWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.OpenNPCActivityWindowReq)
  return false;
#undef DO_
}

void OpenNPCActivityWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.OpenNPCActivityWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.OpenNPCActivityWindowReq)
}

::google::protobuf::uint8* OpenNPCActivityWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.OpenNPCActivityWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.OpenNPCActivityWindowReq)
  return target;
}

int OpenNPCActivityWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenNPCActivityWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenNPCActivityWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenNPCActivityWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenNPCActivityWindowReq::MergeFrom(const OpenNPCActivityWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenNPCActivityWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenNPCActivityWindowReq::CopyFrom(const OpenNPCActivityWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenNPCActivityWindowReq::IsInitialized() const {

  return true;
}

void OpenNPCActivityWindowReq::Swap(OpenNPCActivityWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenNPCActivityWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenNPCActivityWindowReq_descriptor_;
  metadata.reflection = OpenNPCActivityWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenNPCActivityWindowResp::kActivityitemFieldNumber;
const int OpenNPCActivityWindowResp::kNpcinfoFieldNumber;
const int OpenNPCActivityWindowResp::kActivityconfigFieldNumber;
const int OpenNPCActivityWindowResp::kActivityFieldNumber;
const int OpenNPCActivityWindowResp::kMultipleFieldNumber;
const int OpenNPCActivityWindowResp::kDayFieldNumber;
#endif  // !_MSC_VER

OpenNPCActivityWindowResp::OpenNPCActivityWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.OpenNPCActivityWindowResp)
}

void OpenNPCActivityWindowResp::InitAsDefaultInstance() {
  activityitem_ = const_cast< ::User::ActivityItem*>(&::User::ActivityItem::default_instance());
  activityconfig_ = const_cast< ::ProtoNPCActivity::NPCActivitySingleConfigCPP*>(&::ProtoNPCActivity::NPCActivitySingleConfigCPP::default_instance());
  activity_ = const_cast< ::ProtoNPCActivity::NPCActivityCPP*>(&::ProtoNPCActivity::NPCActivityCPP::default_instance());
}

OpenNPCActivityWindowResp::OpenNPCActivityWindowResp(const OpenNPCActivityWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.OpenNPCActivityWindowResp)
}

void OpenNPCActivityWindowResp::SharedCtor() {
  _cached_size_ = 0;
  activityitem_ = NULL;
  activityconfig_ = NULL;
  activity_ = NULL;
  multiple_ = 0u;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenNPCActivityWindowResp::~OpenNPCActivityWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.OpenNPCActivityWindowResp)
  SharedDtor();
}

void OpenNPCActivityWindowResp::SharedDtor() {
  if (this != default_instance_) {
    delete activityitem_;
    delete activityconfig_;
    delete activity_;
  }
}

void OpenNPCActivityWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenNPCActivityWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenNPCActivityWindowResp_descriptor_;
}

const OpenNPCActivityWindowResp& OpenNPCActivityWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

OpenNPCActivityWindowResp* OpenNPCActivityWindowResp::default_instance_ = NULL;

OpenNPCActivityWindowResp* OpenNPCActivityWindowResp::New() const {
  return new OpenNPCActivityWindowResp;
}

void OpenNPCActivityWindowResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenNPCActivityWindowResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(multiple_, day_);
    if (has_activityitem()) {
      if (activityitem_ != NULL) activityitem_->::User::ActivityItem::Clear();
    }
    if (has_activityconfig()) {
      if (activityconfig_ != NULL) activityconfig_->::ProtoNPCActivity::NPCActivitySingleConfigCPP::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::ProtoNPCActivity::NPCActivityCPP::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  npcinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenNPCActivityWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.OpenNPCActivityWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .User.ActivityItem activityitem = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activityitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_npcinfo;
        break;
      }

      // repeated .ProtoNPCActivity.SpecialNPCCPP npcinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_npcinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_npcinfo;
        if (input->ExpectTag(26)) goto parse_activityconfig;
        break;
      }

      // optional .ProtoNPCActivity.NPCActivitySingleConfigCPP activityconfig = 3;
      case 3: {
        if (tag == 26) {
         parse_activityconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activityconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_activity;
        break;
      }

      // optional .ProtoNPCActivity.NPCActivityCPP activity = 4;
      case 4: {
        if (tag == 34) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_multiple;
        break;
      }

      // optional uint32 multiple = 5;
      case 5: {
        if (tag == 40) {
         parse_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_day;
        break;
      }

      // optional uint32 day = 6;
      case 6: {
        if (tag == 48) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.OpenNPCActivityWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.OpenNPCActivityWindowResp)
  return false;
#undef DO_
}

void OpenNPCActivityWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.OpenNPCActivityWindowResp)
  // optional .User.ActivityItem activityitem = 1;
  if (has_activityitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activityitem(), output);
  }

  // repeated .ProtoNPCActivity.SpecialNPCCPP npcinfo = 2;
  for (int i = 0; i < this->npcinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->npcinfo(i), output);
  }

  // optional .ProtoNPCActivity.NPCActivitySingleConfigCPP activityconfig = 3;
  if (has_activityconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->activityconfig(), output);
  }

  // optional .ProtoNPCActivity.NPCActivityCPP activity = 4;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->activity(), output);
  }

  // optional uint32 multiple = 5;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->multiple(), output);
  }

  // optional uint32 day = 6;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.OpenNPCActivityWindowResp)
}

::google::protobuf::uint8* OpenNPCActivityWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.OpenNPCActivityWindowResp)
  // optional .User.ActivityItem activityitem = 1;
  if (has_activityitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activityitem(), target);
  }

  // repeated .ProtoNPCActivity.SpecialNPCCPP npcinfo = 2;
  for (int i = 0; i < this->npcinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->npcinfo(i), target);
  }

  // optional .ProtoNPCActivity.NPCActivitySingleConfigCPP activityconfig = 3;
  if (has_activityconfig()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->activityconfig(), target);
  }

  // optional .ProtoNPCActivity.NPCActivityCPP activity = 4;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->activity(), target);
  }

  // optional uint32 multiple = 5;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->multiple(), target);
  }

  // optional uint32 day = 6;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.OpenNPCActivityWindowResp)
  return target;
}

int OpenNPCActivityWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .User.ActivityItem activityitem = 1;
    if (has_activityitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activityitem());
    }

    // optional .ProtoNPCActivity.NPCActivitySingleConfigCPP activityconfig = 3;
    if (has_activityconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activityconfig());
    }

    // optional .ProtoNPCActivity.NPCActivityCPP activity = 4;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

    // optional uint32 multiple = 5;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->multiple());
    }

    // optional uint32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  // repeated .ProtoNPCActivity.SpecialNPCCPP npcinfo = 2;
  total_size += 1 * this->npcinfo_size();
  for (int i = 0; i < this->npcinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenNPCActivityWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenNPCActivityWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenNPCActivityWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenNPCActivityWindowResp::MergeFrom(const OpenNPCActivityWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcinfo_.MergeFrom(from.npcinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityitem()) {
      mutable_activityitem()->::User::ActivityItem::MergeFrom(from.activityitem());
    }
    if (from.has_activityconfig()) {
      mutable_activityconfig()->::ProtoNPCActivity::NPCActivitySingleConfigCPP::MergeFrom(from.activityconfig());
    }
    if (from.has_activity()) {
      mutable_activity()->::ProtoNPCActivity::NPCActivityCPP::MergeFrom(from.activity());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenNPCActivityWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenNPCActivityWindowResp::CopyFrom(const OpenNPCActivityWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenNPCActivityWindowResp::IsInitialized() const {

  if (has_activityitem()) {
    if (!this->activityitem().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->npcinfo())) return false;
  if (has_activityconfig()) {
    if (!this->activityconfig().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  return true;
}

void OpenNPCActivityWindowResp::Swap(OpenNPCActivityWindowResp* other) {
  if (other != this) {
    std::swap(activityitem_, other->activityitem_);
    npcinfo_.Swap(&other->npcinfo_);
    std::swap(activityconfig_, other->activityconfig_);
    std::swap(activity_, other->activity_);
    std::swap(multiple_, other->multiple_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenNPCActivityWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenNPCActivityWindowResp_descriptor_;
  metadata.reflection = OpenNPCActivityWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetActiveAffairRewardReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GetActiveAffairRewardReq::GetActiveAffairRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.GetActiveAffairRewardReq)
}

void GetActiveAffairRewardReq::InitAsDefaultInstance() {
}

GetActiveAffairRewardReq::GetActiveAffairRewardReq(const GetActiveAffairRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.GetActiveAffairRewardReq)
}

void GetActiveAffairRewardReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetActiveAffairRewardReq::~GetActiveAffairRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.GetActiveAffairRewardReq)
  SharedDtor();
}

void GetActiveAffairRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetActiveAffairRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActiveAffairRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetActiveAffairRewardReq_descriptor_;
}

const GetActiveAffairRewardReq& GetActiveAffairRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

GetActiveAffairRewardReq* GetActiveAffairRewardReq::default_instance_ = NULL;

GetActiveAffairRewardReq* GetActiveAffairRewardReq::New() const {
  return new GetActiveAffairRewardReq;
}

void GetActiveAffairRewardReq::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetActiveAffairRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.GetActiveAffairRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.GetActiveAffairRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.GetActiveAffairRewardReq)
  return false;
#undef DO_
}

void GetActiveAffairRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.GetActiveAffairRewardReq)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.GetActiveAffairRewardReq)
}

::google::protobuf::uint8* GetActiveAffairRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.GetActiveAffairRewardReq)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.GetActiveAffairRewardReq)
  return target;
}

int GetActiveAffairRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActiveAffairRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetActiveAffairRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetActiveAffairRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetActiveAffairRewardReq::MergeFrom(const GetActiveAffairRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetActiveAffairRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActiveAffairRewardReq::CopyFrom(const GetActiveAffairRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActiveAffairRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetActiveAffairRewardReq::Swap(GetActiveAffairRewardReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetActiveAffairRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetActiveAffairRewardReq_descriptor_;
  metadata.reflection = GetActiveAffairRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinalRewardCPP::kEquipsFieldNumber;
const int FinalRewardCPP::kBaseFieldNumber;
#endif  // !_MSC_VER

FinalRewardCPP::FinalRewardCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.FinalRewardCPP)
}

void FinalRewardCPP::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
}

FinalRewardCPP::FinalRewardCPP(const FinalRewardCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.FinalRewardCPP)
}

void FinalRewardCPP::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinalRewardCPP::~FinalRewardCPP() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.FinalRewardCPP)
  SharedDtor();
}

void FinalRewardCPP::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
  }
}

void FinalRewardCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinalRewardCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalRewardCPP_descriptor_;
}

const FinalRewardCPP& FinalRewardCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

FinalRewardCPP* FinalRewardCPP::default_instance_ = NULL;

FinalRewardCPP* FinalRewardCPP::New() const {
  return new FinalRewardCPP;
}

void FinalRewardCPP::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinalRewardCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.FinalRewardCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.EquipmentAllCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .DataCommon.CommonBaseRewardCPP base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.FinalRewardCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.FinalRewardCPP)
  return false;
#undef DO_
}

void FinalRewardCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.FinalRewardCPP)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.FinalRewardCPP)
}

::google::protobuf::uint8* FinalRewardCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.FinalRewardCPP)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.FinalRewardCPP)
  return target;
}

int FinalRewardCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.EquipmentAllCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .DataCommon.CommonBaseRewardCPP base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinalRewardCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinalRewardCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinalRewardCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinalRewardCPP::MergeFrom(const FinalRewardCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinalRewardCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalRewardCPP::CopyFrom(const FinalRewardCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalRewardCPP::IsInitialized() const {

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void FinalRewardCPP::Swap(FinalRewardCPP* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinalRewardCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinalRewardCPP_descriptor_;
  metadata.reflection = FinalRewardCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetActiveAffairRewardResp::kRewardFieldNumber;
const int GetActiveAffairRewardResp::kActivityFieldNumber;
const int GetActiveAffairRewardResp::kCashFieldNumber;
#endif  // !_MSC_VER

GetActiveAffairRewardResp::GetActiveAffairRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.GetActiveAffairRewardResp)
}

void GetActiveAffairRewardResp::InitAsDefaultInstance() {
  reward_ = const_cast< ::ProtoNPCActivity::FinalRewardCPP*>(&::ProtoNPCActivity::FinalRewardCPP::default_instance());
  activity_ = const_cast< ::ProtoNPCActivity::NPCActivityCPP*>(&::ProtoNPCActivity::NPCActivityCPP::default_instance());
}

GetActiveAffairRewardResp::GetActiveAffairRewardResp(const GetActiveAffairRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.GetActiveAffairRewardResp)
}

void GetActiveAffairRewardResp::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  activity_ = NULL;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetActiveAffairRewardResp::~GetActiveAffairRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.GetActiveAffairRewardResp)
  SharedDtor();
}

void GetActiveAffairRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
    delete activity_;
  }
}

void GetActiveAffairRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActiveAffairRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetActiveAffairRewardResp_descriptor_;
}

const GetActiveAffairRewardResp& GetActiveAffairRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

GetActiveAffairRewardResp* GetActiveAffairRewardResp::default_instance_ = NULL;

GetActiveAffairRewardResp* GetActiveAffairRewardResp::New() const {
  return new GetActiveAffairRewardResp;
}

void GetActiveAffairRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::ProtoNPCActivity::FinalRewardCPP::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::ProtoNPCActivity::NPCActivityCPP::Clear();
    }
    cash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetActiveAffairRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.GetActiveAffairRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNPCActivity.FinalRewardCPP reward = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_activity;
        break;
      }

      // required .ProtoNPCActivity.NPCActivityCPP activity = 2;
      case 2: {
        if (tag == 18) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cash;
        break;
      }

      // required uint32 cash = 3;
      case 3: {
        if (tag == 24) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.GetActiveAffairRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.GetActiveAffairRewardResp)
  return false;
#undef DO_
}

void GetActiveAffairRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.GetActiveAffairRewardResp)
  // required .ProtoNPCActivity.FinalRewardCPP reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  // required .ProtoNPCActivity.NPCActivityCPP activity = 2;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activity(), output);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.GetActiveAffairRewardResp)
}

::google::protobuf::uint8* GetActiveAffairRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.GetActiveAffairRewardResp)
  // required .ProtoNPCActivity.FinalRewardCPP reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  // required .ProtoNPCActivity.NPCActivityCPP activity = 2;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activity(), target);
  }

  // required uint32 cash = 3;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.GetActiveAffairRewardResp)
  return target;
}

int GetActiveAffairRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNPCActivity.FinalRewardCPP reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // required .ProtoNPCActivity.NPCActivityCPP activity = 2;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

    // required uint32 cash = 3;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActiveAffairRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetActiveAffairRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetActiveAffairRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetActiveAffairRewardResp::MergeFrom(const GetActiveAffairRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::ProtoNPCActivity::FinalRewardCPP::MergeFrom(from.reward());
    }
    if (from.has_activity()) {
      mutable_activity()->::ProtoNPCActivity::NPCActivityCPP::MergeFrom(from.activity());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetActiveAffairRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActiveAffairRewardResp::CopyFrom(const GetActiveAffairRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActiveAffairRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  return true;
}

void GetActiveAffairRewardResp::Swap(GetActiveAffairRewardResp* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(activity_, other->activity_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetActiveAffairRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetActiveAffairRewardResp_descriptor_;
  metadata.reflection = GetActiveAffairRewardResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetActiveValueRewardReq::kIndexFieldNumber;
#endif  // !_MSC_VER

GetActiveValueRewardReq::GetActiveValueRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.GetActiveValueRewardReq)
}

void GetActiveValueRewardReq::InitAsDefaultInstance() {
}

GetActiveValueRewardReq::GetActiveValueRewardReq(const GetActiveValueRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.GetActiveValueRewardReq)
}

void GetActiveValueRewardReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetActiveValueRewardReq::~GetActiveValueRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.GetActiveValueRewardReq)
  SharedDtor();
}

void GetActiveValueRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetActiveValueRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActiveValueRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetActiveValueRewardReq_descriptor_;
}

const GetActiveValueRewardReq& GetActiveValueRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

GetActiveValueRewardReq* GetActiveValueRewardReq::default_instance_ = NULL;

GetActiveValueRewardReq* GetActiveValueRewardReq::New() const {
  return new GetActiveValueRewardReq;
}

void GetActiveValueRewardReq::Clear() {
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetActiveValueRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.GetActiveValueRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.GetActiveValueRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.GetActiveValueRewardReq)
  return false;
#undef DO_
}

void GetActiveValueRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.GetActiveValueRewardReq)
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.GetActiveValueRewardReq)
}

::google::protobuf::uint8* GetActiveValueRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.GetActiveValueRewardReq)
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.GetActiveValueRewardReq)
  return target;
}

int GetActiveValueRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActiveValueRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetActiveValueRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetActiveValueRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetActiveValueRewardReq::MergeFrom(const GetActiveValueRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetActiveValueRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActiveValueRewardReq::CopyFrom(const GetActiveValueRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActiveValueRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetActiveValueRewardReq::Swap(GetActiveValueRewardReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetActiveValueRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetActiveValueRewardReq_descriptor_;
  metadata.reflection = GetActiveValueRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetActiveValueRewardResp::kRewardFieldNumber;
const int GetActiveValueRewardResp::kActivityFieldNumber;
#endif  // !_MSC_VER

GetActiveValueRewardResp::GetActiveValueRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoNPCActivity.GetActiveValueRewardResp)
}

void GetActiveValueRewardResp::InitAsDefaultInstance() {
  reward_ = const_cast< ::ProtoNPCActivity::FinalRewardCPP*>(&::ProtoNPCActivity::FinalRewardCPP::default_instance());
  activity_ = const_cast< ::ProtoNPCActivity::NPCActivityCPP*>(&::ProtoNPCActivity::NPCActivityCPP::default_instance());
}

GetActiveValueRewardResp::GetActiveValueRewardResp(const GetActiveValueRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoNPCActivity.GetActiveValueRewardResp)
}

void GetActiveValueRewardResp::SharedCtor() {
  _cached_size_ = 0;
  reward_ = NULL;
  activity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetActiveValueRewardResp::~GetActiveValueRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoNPCActivity.GetActiveValueRewardResp)
  SharedDtor();
}

void GetActiveValueRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
    delete activity_;
  }
}

void GetActiveValueRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetActiveValueRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetActiveValueRewardResp_descriptor_;
}

const GetActiveValueRewardResp& GetActiveValueRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoNPCActivity_2eproto();
  return *default_instance_;
}

GetActiveValueRewardResp* GetActiveValueRewardResp::default_instance_ = NULL;

GetActiveValueRewardResp* GetActiveValueRewardResp::New() const {
  return new GetActiveValueRewardResp;
}

void GetActiveValueRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::ProtoNPCActivity::FinalRewardCPP::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::ProtoNPCActivity::NPCActivityCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetActiveValueRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoNPCActivity.GetActiveValueRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoNPCActivity.FinalRewardCPP reward = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_activity;
        break;
      }

      // required .ProtoNPCActivity.NPCActivityCPP activity = 2;
      case 2: {
        if (tag == 18) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoNPCActivity.GetActiveValueRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoNPCActivity.GetActiveValueRewardResp)
  return false;
#undef DO_
}

void GetActiveValueRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoNPCActivity.GetActiveValueRewardResp)
  // required .ProtoNPCActivity.FinalRewardCPP reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(), output);
  }

  // required .ProtoNPCActivity.NPCActivityCPP activity = 2;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->activity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoNPCActivity.GetActiveValueRewardResp)
}

::google::protobuf::uint8* GetActiveValueRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoNPCActivity.GetActiveValueRewardResp)
  // required .ProtoNPCActivity.FinalRewardCPP reward = 1;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(), target);
  }

  // required .ProtoNPCActivity.NPCActivityCPP activity = 2;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoNPCActivity.GetActiveValueRewardResp)
  return target;
}

int GetActiveValueRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoNPCActivity.FinalRewardCPP reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // required .ProtoNPCActivity.NPCActivityCPP activity = 2;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetActiveValueRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetActiveValueRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetActiveValueRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetActiveValueRewardResp::MergeFrom(const GetActiveValueRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::ProtoNPCActivity::FinalRewardCPP::MergeFrom(from.reward());
    }
    if (from.has_activity()) {
      mutable_activity()->::ProtoNPCActivity::NPCActivityCPP::MergeFrom(from.activity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetActiveValueRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetActiveValueRewardResp::CopyFrom(const GetActiveValueRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetActiveValueRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  return true;
}

void GetActiveValueRewardResp::Swap(GetActiveValueRewardResp* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(activity_, other->activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetActiveValueRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetActiveValueRewardResp_descriptor_;
  metadata.reflection = GetActiveValueRewardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoNPCActivity

// @@protoc_insertion_point(global_scope)
