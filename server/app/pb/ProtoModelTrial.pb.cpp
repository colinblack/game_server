// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoModelTrial.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoModelTrial.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoModelTrial {

namespace {

const ::google::protobuf::Descriptor* ModelTrialCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelTrialCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenModelWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenModelWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenModelWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenModelWindowResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyFightTimesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyFightTimesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyFightTimesResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyFightTimesResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartTrialGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartTrialGateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartTrialGateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartTrialGateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushTrialRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushTrialRewardReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoModelTrial_2eproto() {
  protobuf_AddDesc_ProtoModelTrial_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoModelTrial.proto");
  GOOGLE_CHECK(file != NULL);
  ModelTrialCPP_descriptor_ = file->message_type(0);
  static const int ModelTrialCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrialCPP, curpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrialCPP, fight_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrialCPP, buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrialCPP, resetts_),
  };
  ModelTrialCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelTrialCPP_descriptor_,
      ModelTrialCPP::default_instance_,
      ModelTrialCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrialCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelTrialCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelTrialCPP));
  OpenModelWindowReq_descriptor_ = file->message_type(1);
  static const int OpenModelWindowReq_offsets_[1] = {
  };
  OpenModelWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenModelWindowReq_descriptor_,
      OpenModelWindowReq::default_instance_,
      OpenModelWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenModelWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenModelWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenModelWindowReq));
  OpenModelWindowResp_descriptor_ = file->message_type(2);
  static const int OpenModelWindowResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenModelWindowResp, modeltrial_),
  };
  OpenModelWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenModelWindowResp_descriptor_,
      OpenModelWindowResp::default_instance_,
      OpenModelWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenModelWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenModelWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenModelWindowResp));
  BuyFightTimesReq_descriptor_ = file->message_type(3);
  static const int BuyFightTimesReq_offsets_[1] = {
  };
  BuyFightTimesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyFightTimesReq_descriptor_,
      BuyFightTimesReq::default_instance_,
      BuyFightTimesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFightTimesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFightTimesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyFightTimesReq));
  BuyFightTimesResp_descriptor_ = file->message_type(4);
  static const int BuyFightTimesResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFightTimesResp, modeltrial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFightTimesResp, cash_),
  };
  BuyFightTimesResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyFightTimesResp_descriptor_,
      BuyFightTimesResp::default_instance_,
      BuyFightTimesResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFightTimesResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyFightTimesResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyFightTimesResp));
  StartTrialGateReq_descriptor_ = file->message_type(5);
  static const int StartTrialGateReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTrialGateReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTrialGateReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTrialGateReq, heros_),
  };
  StartTrialGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartTrialGateReq_descriptor_,
      StartTrialGateReq::default_instance_,
      StartTrialGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTrialGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTrialGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartTrialGateReq));
  StartTrialGateResp_descriptor_ = file->message_type(6);
  static const int StartTrialGateResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTrialGateResp, modeltrial_),
  };
  StartTrialGateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartTrialGateResp_descriptor_,
      StartTrialGateResp::default_instance_,
      StartTrialGateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTrialGateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartTrialGateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartTrialGateResp));
  PushTrialRewardReq_descriptor_ = file->message_type(7);
  static const int PushTrialRewardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushTrialRewardReq, isfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushTrialRewardReq, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushTrialRewardReq, modeltrial_),
  };
  PushTrialRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushTrialRewardReq_descriptor_,
      PushTrialRewardReq::default_instance_,
      PushTrialRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushTrialRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushTrialRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushTrialRewardReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoModelTrial_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelTrialCPP_descriptor_, &ModelTrialCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenModelWindowReq_descriptor_, &OpenModelWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenModelWindowResp_descriptor_, &OpenModelWindowResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyFightTimesReq_descriptor_, &BuyFightTimesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyFightTimesResp_descriptor_, &BuyFightTimesResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartTrialGateReq_descriptor_, &StartTrialGateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartTrialGateResp_descriptor_, &StartTrialGateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushTrialRewardReq_descriptor_, &PushTrialRewardReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoModelTrial_2eproto() {
  delete ModelTrialCPP::default_instance_;
  delete ModelTrialCPP_reflection_;
  delete OpenModelWindowReq::default_instance_;
  delete OpenModelWindowReq_reflection_;
  delete OpenModelWindowResp::default_instance_;
  delete OpenModelWindowResp_reflection_;
  delete BuyFightTimesReq::default_instance_;
  delete BuyFightTimesReq_reflection_;
  delete BuyFightTimesResp::default_instance_;
  delete BuyFightTimesResp_reflection_;
  delete StartTrialGateReq::default_instance_;
  delete StartTrialGateReq_reflection_;
  delete StartTrialGateResp::default_instance_;
  delete StartTrialGateResp_reflection_;
  delete PushTrialRewardReq::default_instance_;
  delete PushTrialRewardReq_reflection_;
}

void protobuf_AddDesc_ProtoModelTrial_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::User::protobuf_AddDesc_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ProtoModelTrial.proto\022\017ProtoModelTrial"
    "\032\nUser.proto\"X\n\rModelTrialCPP\022\016\n\006curpos\030"
    "\001 \002(\r\022\023\n\013fight_times\030\002 \002(\r\022\021\n\tbuy_times\030"
    "\003 \002(\r\022\017\n\007resetts\030\004 \002(\r\"\024\n\022OpenModelWindo"
    "wReq\"I\n\023OpenModelWindowResp\0222\n\nmodeltria"
    "l\030\001 \002(\0132\036.ProtoModelTrial.ModelTrialCPP\""
    "\022\n\020BuyFightTimesReq\"U\n\021BuyFightTimesResp"
    "\0222\n\nmodeltrial\030\001 \002(\0132\036.ProtoModelTrial.M"
    "odelTrialCPP\022\014\n\004cash\030\002 \002(\r\"\?\n\021StartTrial"
    "GateReq\022\013\n\003pos\030\001 \002(\r\022\016\n\006gateid\030\002 \002(\r\022\r\n\005"
    "heros\030\003 \003(\r\"H\n\022StartTrialGateResp\0222\n\nmod"
    "eltrial\030\001 \002(\0132\036.ProtoModelTrial.ModelTri"
    "alCPP\"~\n\022PushTrialRewardReq\022\017\n\007isfirst\030\001"
    " \002(\010\022#\n\006reward\030\002 \002(\0132\023.User.RewardBagInf"
    "o\0222\n\nmodeltrial\030\003 \001(\0132\036.ProtoModelTrial."
    "ModelTrialCPP", 613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoModelTrial.proto", &protobuf_RegisterTypes);
  ModelTrialCPP::default_instance_ = new ModelTrialCPP();
  OpenModelWindowReq::default_instance_ = new OpenModelWindowReq();
  OpenModelWindowResp::default_instance_ = new OpenModelWindowResp();
  BuyFightTimesReq::default_instance_ = new BuyFightTimesReq();
  BuyFightTimesResp::default_instance_ = new BuyFightTimesResp();
  StartTrialGateReq::default_instance_ = new StartTrialGateReq();
  StartTrialGateResp::default_instance_ = new StartTrialGateResp();
  PushTrialRewardReq::default_instance_ = new PushTrialRewardReq();
  ModelTrialCPP::default_instance_->InitAsDefaultInstance();
  OpenModelWindowReq::default_instance_->InitAsDefaultInstance();
  OpenModelWindowResp::default_instance_->InitAsDefaultInstance();
  BuyFightTimesReq::default_instance_->InitAsDefaultInstance();
  BuyFightTimesResp::default_instance_->InitAsDefaultInstance();
  StartTrialGateReq::default_instance_->InitAsDefaultInstance();
  StartTrialGateResp::default_instance_->InitAsDefaultInstance();
  PushTrialRewardReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoModelTrial_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoModelTrial_2eproto {
  StaticDescriptorInitializer_ProtoModelTrial_2eproto() {
    protobuf_AddDesc_ProtoModelTrial_2eproto();
  }
} static_descriptor_initializer_ProtoModelTrial_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ModelTrialCPP::kCurposFieldNumber;
const int ModelTrialCPP::kFightTimesFieldNumber;
const int ModelTrialCPP::kBuyTimesFieldNumber;
const int ModelTrialCPP::kResettsFieldNumber;
#endif  // !_MSC_VER

ModelTrialCPP::ModelTrialCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoModelTrial.ModelTrialCPP)
}

void ModelTrialCPP::InitAsDefaultInstance() {
}

ModelTrialCPP::ModelTrialCPP(const ModelTrialCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoModelTrial.ModelTrialCPP)
}

void ModelTrialCPP::SharedCtor() {
  _cached_size_ = 0;
  curpos_ = 0u;
  fight_times_ = 0u;
  buy_times_ = 0u;
  resetts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelTrialCPP::~ModelTrialCPP() {
  // @@protoc_insertion_point(destructor:ProtoModelTrial.ModelTrialCPP)
  SharedDtor();
}

void ModelTrialCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModelTrialCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelTrialCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelTrialCPP_descriptor_;
}

const ModelTrialCPP& ModelTrialCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoModelTrial_2eproto();
  return *default_instance_;
}

ModelTrialCPP* ModelTrialCPP::default_instance_ = NULL;

ModelTrialCPP* ModelTrialCPP::New() const {
  return new ModelTrialCPP;
}

void ModelTrialCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ModelTrialCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curpos_, resetts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelTrialCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoModelTrial.ModelTrialCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 curpos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpos_)));
          set_has_curpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fight_times;
        break;
      }

      // required uint32 fight_times = 2;
      case 2: {
        if (tag == 16) {
         parse_fight_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_times_)));
          set_has_fight_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_buy_times;
        break;
      }

      // required uint32 buy_times = 3;
      case 3: {
        if (tag == 24) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resetts;
        break;
      }

      // required uint32 resetts = 4;
      case 4: {
        if (tag == 32) {
         parse_resetts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetts_)));
          set_has_resetts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoModelTrial.ModelTrialCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoModelTrial.ModelTrialCPP)
  return false;
#undef DO_
}

void ModelTrialCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoModelTrial.ModelTrialCPP)
  // required uint32 curpos = 1;
  if (has_curpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curpos(), output);
  }

  // required uint32 fight_times = 2;
  if (has_fight_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fight_times(), output);
  }

  // required uint32 buy_times = 3;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_times(), output);
  }

  // required uint32 resetts = 4;
  if (has_resetts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resetts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoModelTrial.ModelTrialCPP)
}

::google::protobuf::uint8* ModelTrialCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoModelTrial.ModelTrialCPP)
  // required uint32 curpos = 1;
  if (has_curpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curpos(), target);
  }

  // required uint32 fight_times = 2;
  if (has_fight_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fight_times(), target);
  }

  // required uint32 buy_times = 3;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_times(), target);
  }

  // required uint32 resetts = 4;
  if (has_resetts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resetts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoModelTrial.ModelTrialCPP)
  return target;
}

int ModelTrialCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 curpos = 1;
    if (has_curpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpos());
    }

    // required uint32 fight_times = 2;
    if (has_fight_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_times());
    }

    // required uint32 buy_times = 3;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_times());
    }

    // required uint32 resetts = 4;
    if (has_resetts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelTrialCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelTrialCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelTrialCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelTrialCPP::MergeFrom(const ModelTrialCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curpos()) {
      set_curpos(from.curpos());
    }
    if (from.has_fight_times()) {
      set_fight_times(from.fight_times());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
    if (from.has_resetts()) {
      set_resetts(from.resetts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelTrialCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelTrialCPP::CopyFrom(const ModelTrialCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelTrialCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ModelTrialCPP::Swap(ModelTrialCPP* other) {
  if (other != this) {
    std::swap(curpos_, other->curpos_);
    std::swap(fight_times_, other->fight_times_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(resetts_, other->resetts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelTrialCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelTrialCPP_descriptor_;
  metadata.reflection = ModelTrialCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenModelWindowReq::OpenModelWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoModelTrial.OpenModelWindowReq)
}

void OpenModelWindowReq::InitAsDefaultInstance() {
}

OpenModelWindowReq::OpenModelWindowReq(const OpenModelWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoModelTrial.OpenModelWindowReq)
}

void OpenModelWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenModelWindowReq::~OpenModelWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoModelTrial.OpenModelWindowReq)
  SharedDtor();
}

void OpenModelWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenModelWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenModelWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenModelWindowReq_descriptor_;
}

const OpenModelWindowReq& OpenModelWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoModelTrial_2eproto();
  return *default_instance_;
}

OpenModelWindowReq* OpenModelWindowReq::default_instance_ = NULL;

OpenModelWindowReq* OpenModelWindowReq::New() const {
  return new OpenModelWindowReq;
}

void OpenModelWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenModelWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoModelTrial.OpenModelWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoModelTrial.OpenModelWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoModelTrial.OpenModelWindowReq)
  return false;
#undef DO_
}

void OpenModelWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoModelTrial.OpenModelWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoModelTrial.OpenModelWindowReq)
}

::google::protobuf::uint8* OpenModelWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoModelTrial.OpenModelWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoModelTrial.OpenModelWindowReq)
  return target;
}

int OpenModelWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenModelWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenModelWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenModelWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenModelWindowReq::MergeFrom(const OpenModelWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenModelWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenModelWindowReq::CopyFrom(const OpenModelWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenModelWindowReq::IsInitialized() const {

  return true;
}

void OpenModelWindowReq::Swap(OpenModelWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenModelWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenModelWindowReq_descriptor_;
  metadata.reflection = OpenModelWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenModelWindowResp::kModeltrialFieldNumber;
#endif  // !_MSC_VER

OpenModelWindowResp::OpenModelWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoModelTrial.OpenModelWindowResp)
}

void OpenModelWindowResp::InitAsDefaultInstance() {
  modeltrial_ = const_cast< ::ProtoModelTrial::ModelTrialCPP*>(&::ProtoModelTrial::ModelTrialCPP::default_instance());
}

OpenModelWindowResp::OpenModelWindowResp(const OpenModelWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoModelTrial.OpenModelWindowResp)
}

void OpenModelWindowResp::SharedCtor() {
  _cached_size_ = 0;
  modeltrial_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenModelWindowResp::~OpenModelWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoModelTrial.OpenModelWindowResp)
  SharedDtor();
}

void OpenModelWindowResp::SharedDtor() {
  if (this != default_instance_) {
    delete modeltrial_;
  }
}

void OpenModelWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenModelWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenModelWindowResp_descriptor_;
}

const OpenModelWindowResp& OpenModelWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoModelTrial_2eproto();
  return *default_instance_;
}

OpenModelWindowResp* OpenModelWindowResp::default_instance_ = NULL;

OpenModelWindowResp* OpenModelWindowResp::New() const {
  return new OpenModelWindowResp;
}

void OpenModelWindowResp::Clear() {
  if (has_modeltrial()) {
    if (modeltrial_ != NULL) modeltrial_->::ProtoModelTrial::ModelTrialCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenModelWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoModelTrial.OpenModelWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modeltrial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoModelTrial.OpenModelWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoModelTrial.OpenModelWindowResp)
  return false;
#undef DO_
}

void OpenModelWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoModelTrial.OpenModelWindowResp)
  // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
  if (has_modeltrial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modeltrial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoModelTrial.OpenModelWindowResp)
}

::google::protobuf::uint8* OpenModelWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoModelTrial.OpenModelWindowResp)
  // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
  if (has_modeltrial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->modeltrial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoModelTrial.OpenModelWindowResp)
  return target;
}

int OpenModelWindowResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
    if (has_modeltrial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modeltrial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenModelWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenModelWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenModelWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenModelWindowResp::MergeFrom(const OpenModelWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modeltrial()) {
      mutable_modeltrial()->::ProtoModelTrial::ModelTrialCPP::MergeFrom(from.modeltrial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenModelWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenModelWindowResp::CopyFrom(const OpenModelWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenModelWindowResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_modeltrial()) {
    if (!this->modeltrial().IsInitialized()) return false;
  }
  return true;
}

void OpenModelWindowResp::Swap(OpenModelWindowResp* other) {
  if (other != this) {
    std::swap(modeltrial_, other->modeltrial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenModelWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenModelWindowResp_descriptor_;
  metadata.reflection = OpenModelWindowResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BuyFightTimesReq::BuyFightTimesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoModelTrial.BuyFightTimesReq)
}

void BuyFightTimesReq::InitAsDefaultInstance() {
}

BuyFightTimesReq::BuyFightTimesReq(const BuyFightTimesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoModelTrial.BuyFightTimesReq)
}

void BuyFightTimesReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyFightTimesReq::~BuyFightTimesReq() {
  // @@protoc_insertion_point(destructor:ProtoModelTrial.BuyFightTimesReq)
  SharedDtor();
}

void BuyFightTimesReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyFightTimesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyFightTimesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyFightTimesReq_descriptor_;
}

const BuyFightTimesReq& BuyFightTimesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoModelTrial_2eproto();
  return *default_instance_;
}

BuyFightTimesReq* BuyFightTimesReq::default_instance_ = NULL;

BuyFightTimesReq* BuyFightTimesReq::New() const {
  return new BuyFightTimesReq;
}

void BuyFightTimesReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyFightTimesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoModelTrial.BuyFightTimesReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoModelTrial.BuyFightTimesReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoModelTrial.BuyFightTimesReq)
  return false;
#undef DO_
}

void BuyFightTimesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoModelTrial.BuyFightTimesReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoModelTrial.BuyFightTimesReq)
}

::google::protobuf::uint8* BuyFightTimesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoModelTrial.BuyFightTimesReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoModelTrial.BuyFightTimesReq)
  return target;
}

int BuyFightTimesReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyFightTimesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyFightTimesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyFightTimesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyFightTimesReq::MergeFrom(const BuyFightTimesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyFightTimesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyFightTimesReq::CopyFrom(const BuyFightTimesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyFightTimesReq::IsInitialized() const {

  return true;
}

void BuyFightTimesReq::Swap(BuyFightTimesReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyFightTimesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyFightTimesReq_descriptor_;
  metadata.reflection = BuyFightTimesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyFightTimesResp::kModeltrialFieldNumber;
const int BuyFightTimesResp::kCashFieldNumber;
#endif  // !_MSC_VER

BuyFightTimesResp::BuyFightTimesResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoModelTrial.BuyFightTimesResp)
}

void BuyFightTimesResp::InitAsDefaultInstance() {
  modeltrial_ = const_cast< ::ProtoModelTrial::ModelTrialCPP*>(&::ProtoModelTrial::ModelTrialCPP::default_instance());
}

BuyFightTimesResp::BuyFightTimesResp(const BuyFightTimesResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoModelTrial.BuyFightTimesResp)
}

void BuyFightTimesResp::SharedCtor() {
  _cached_size_ = 0;
  modeltrial_ = NULL;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyFightTimesResp::~BuyFightTimesResp() {
  // @@protoc_insertion_point(destructor:ProtoModelTrial.BuyFightTimesResp)
  SharedDtor();
}

void BuyFightTimesResp::SharedDtor() {
  if (this != default_instance_) {
    delete modeltrial_;
  }
}

void BuyFightTimesResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyFightTimesResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyFightTimesResp_descriptor_;
}

const BuyFightTimesResp& BuyFightTimesResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoModelTrial_2eproto();
  return *default_instance_;
}

BuyFightTimesResp* BuyFightTimesResp::default_instance_ = NULL;

BuyFightTimesResp* BuyFightTimesResp::New() const {
  return new BuyFightTimesResp;
}

void BuyFightTimesResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_modeltrial()) {
      if (modeltrial_ != NULL) modeltrial_->::ProtoModelTrial::ModelTrialCPP::Clear();
    }
    cash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyFightTimesResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoModelTrial.BuyFightTimesResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modeltrial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required uint32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoModelTrial.BuyFightTimesResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoModelTrial.BuyFightTimesResp)
  return false;
#undef DO_
}

void BuyFightTimesResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoModelTrial.BuyFightTimesResp)
  // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
  if (has_modeltrial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modeltrial(), output);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoModelTrial.BuyFightTimesResp)
}

::google::protobuf::uint8* BuyFightTimesResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoModelTrial.BuyFightTimesResp)
  // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
  if (has_modeltrial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->modeltrial(), target);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoModelTrial.BuyFightTimesResp)
  return target;
}

int BuyFightTimesResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
    if (has_modeltrial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modeltrial());
    }

    // required uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyFightTimesResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyFightTimesResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyFightTimesResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyFightTimesResp::MergeFrom(const BuyFightTimesResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modeltrial()) {
      mutable_modeltrial()->::ProtoModelTrial::ModelTrialCPP::MergeFrom(from.modeltrial());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyFightTimesResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyFightTimesResp::CopyFrom(const BuyFightTimesResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyFightTimesResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_modeltrial()) {
    if (!this->modeltrial().IsInitialized()) return false;
  }
  return true;
}

void BuyFightTimesResp::Swap(BuyFightTimesResp* other) {
  if (other != this) {
    std::swap(modeltrial_, other->modeltrial_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyFightTimesResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyFightTimesResp_descriptor_;
  metadata.reflection = BuyFightTimesResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartTrialGateReq::kPosFieldNumber;
const int StartTrialGateReq::kGateidFieldNumber;
const int StartTrialGateReq::kHerosFieldNumber;
#endif  // !_MSC_VER

StartTrialGateReq::StartTrialGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoModelTrial.StartTrialGateReq)
}

void StartTrialGateReq::InitAsDefaultInstance() {
}

StartTrialGateReq::StartTrialGateReq(const StartTrialGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoModelTrial.StartTrialGateReq)
}

void StartTrialGateReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  gateid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartTrialGateReq::~StartTrialGateReq() {
  // @@protoc_insertion_point(destructor:ProtoModelTrial.StartTrialGateReq)
  SharedDtor();
}

void StartTrialGateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartTrialGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTrialGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartTrialGateReq_descriptor_;
}

const StartTrialGateReq& StartTrialGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoModelTrial_2eproto();
  return *default_instance_;
}

StartTrialGateReq* StartTrialGateReq::default_instance_ = NULL;

StartTrialGateReq* StartTrialGateReq::New() const {
  return new StartTrialGateReq;
}

void StartTrialGateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartTrialGateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, gateid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartTrialGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoModelTrial.StartTrialGateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 2;
      case 2: {
        if (tag == 16) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_heros;
        break;
      }

      // repeated uint32 heros = 3;
      case 3: {
        if (tag == 24) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_heros())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heros())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_heros;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoModelTrial.StartTrialGateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoModelTrial.StartTrialGateReq)
  return false;
#undef DO_
}

void StartTrialGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoModelTrial.StartTrialGateReq)
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }

  // repeated uint32 heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoModelTrial.StartTrialGateReq)
}

::google::protobuf::uint8* StartTrialGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoModelTrial.StartTrialGateReq)
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }

  // repeated uint32 heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoModelTrial.StartTrialGateReq)
  return target;
}

int StartTrialGateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

  }
  // repeated uint32 heros = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartTrialGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartTrialGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartTrialGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartTrialGateReq::MergeFrom(const StartTrialGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartTrialGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartTrialGateReq::CopyFrom(const StartTrialGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTrialGateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StartTrialGateReq::Swap(StartTrialGateReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(gateid_, other->gateid_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartTrialGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartTrialGateReq_descriptor_;
  metadata.reflection = StartTrialGateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartTrialGateResp::kModeltrialFieldNumber;
#endif  // !_MSC_VER

StartTrialGateResp::StartTrialGateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoModelTrial.StartTrialGateResp)
}

void StartTrialGateResp::InitAsDefaultInstance() {
  modeltrial_ = const_cast< ::ProtoModelTrial::ModelTrialCPP*>(&::ProtoModelTrial::ModelTrialCPP::default_instance());
}

StartTrialGateResp::StartTrialGateResp(const StartTrialGateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoModelTrial.StartTrialGateResp)
}

void StartTrialGateResp::SharedCtor() {
  _cached_size_ = 0;
  modeltrial_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartTrialGateResp::~StartTrialGateResp() {
  // @@protoc_insertion_point(destructor:ProtoModelTrial.StartTrialGateResp)
  SharedDtor();
}

void StartTrialGateResp::SharedDtor() {
  if (this != default_instance_) {
    delete modeltrial_;
  }
}

void StartTrialGateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartTrialGateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartTrialGateResp_descriptor_;
}

const StartTrialGateResp& StartTrialGateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoModelTrial_2eproto();
  return *default_instance_;
}

StartTrialGateResp* StartTrialGateResp::default_instance_ = NULL;

StartTrialGateResp* StartTrialGateResp::New() const {
  return new StartTrialGateResp;
}

void StartTrialGateResp::Clear() {
  if (has_modeltrial()) {
    if (modeltrial_ != NULL) modeltrial_->::ProtoModelTrial::ModelTrialCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartTrialGateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoModelTrial.StartTrialGateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modeltrial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoModelTrial.StartTrialGateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoModelTrial.StartTrialGateResp)
  return false;
#undef DO_
}

void StartTrialGateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoModelTrial.StartTrialGateResp)
  // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
  if (has_modeltrial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modeltrial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoModelTrial.StartTrialGateResp)
}

::google::protobuf::uint8* StartTrialGateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoModelTrial.StartTrialGateResp)
  // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
  if (has_modeltrial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->modeltrial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoModelTrial.StartTrialGateResp)
  return target;
}

int StartTrialGateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoModelTrial.ModelTrialCPP modeltrial = 1;
    if (has_modeltrial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modeltrial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartTrialGateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartTrialGateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartTrialGateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartTrialGateResp::MergeFrom(const StartTrialGateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modeltrial()) {
      mutable_modeltrial()->::ProtoModelTrial::ModelTrialCPP::MergeFrom(from.modeltrial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartTrialGateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartTrialGateResp::CopyFrom(const StartTrialGateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartTrialGateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_modeltrial()) {
    if (!this->modeltrial().IsInitialized()) return false;
  }
  return true;
}

void StartTrialGateResp::Swap(StartTrialGateResp* other) {
  if (other != this) {
    std::swap(modeltrial_, other->modeltrial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartTrialGateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartTrialGateResp_descriptor_;
  metadata.reflection = StartTrialGateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushTrialRewardReq::kIsfirstFieldNumber;
const int PushTrialRewardReq::kRewardFieldNumber;
const int PushTrialRewardReq::kModeltrialFieldNumber;
#endif  // !_MSC_VER

PushTrialRewardReq::PushTrialRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoModelTrial.PushTrialRewardReq)
}

void PushTrialRewardReq::InitAsDefaultInstance() {
  reward_ = const_cast< ::User::RewardBagInfo*>(&::User::RewardBagInfo::default_instance());
  modeltrial_ = const_cast< ::ProtoModelTrial::ModelTrialCPP*>(&::ProtoModelTrial::ModelTrialCPP::default_instance());
}

PushTrialRewardReq::PushTrialRewardReq(const PushTrialRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoModelTrial.PushTrialRewardReq)
}

void PushTrialRewardReq::SharedCtor() {
  _cached_size_ = 0;
  isfirst_ = false;
  reward_ = NULL;
  modeltrial_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushTrialRewardReq::~PushTrialRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoModelTrial.PushTrialRewardReq)
  SharedDtor();
}

void PushTrialRewardReq::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
    delete modeltrial_;
  }
}

void PushTrialRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushTrialRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushTrialRewardReq_descriptor_;
}

const PushTrialRewardReq& PushTrialRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoModelTrial_2eproto();
  return *default_instance_;
}

PushTrialRewardReq* PushTrialRewardReq::default_instance_ = NULL;

PushTrialRewardReq* PushTrialRewardReq::New() const {
  return new PushTrialRewardReq;
}

void PushTrialRewardReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    isfirst_ = false;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::User::RewardBagInfo::Clear();
    }
    if (has_modeltrial()) {
      if (modeltrial_ != NULL) modeltrial_->::ProtoModelTrial::ModelTrialCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushTrialRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoModelTrial.PushTrialRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isfirst = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required .User.RewardBagInfo reward = 2;
      case 2: {
        if (tag == 18) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_modeltrial;
        break;
      }

      // optional .ProtoModelTrial.ModelTrialCPP modeltrial = 3;
      case 3: {
        if (tag == 26) {
         parse_modeltrial:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modeltrial()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoModelTrial.PushTrialRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoModelTrial.PushTrialRewardReq)
  return false;
#undef DO_
}

void PushTrialRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoModelTrial.PushTrialRewardReq)
  // required bool isfirst = 1;
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfirst(), output);
  }

  // required .User.RewardBagInfo reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }

  // optional .ProtoModelTrial.ModelTrialCPP modeltrial = 3;
  if (has_modeltrial()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->modeltrial(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoModelTrial.PushTrialRewardReq)
}

::google::protobuf::uint8* PushTrialRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoModelTrial.PushTrialRewardReq)
  // required bool isfirst = 1;
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfirst(), target);
  }

  // required .User.RewardBagInfo reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }

  // optional .ProtoModelTrial.ModelTrialCPP modeltrial = 3;
  if (has_modeltrial()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->modeltrial(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoModelTrial.PushTrialRewardReq)
  return target;
}

int PushTrialRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isfirst = 1;
    if (has_isfirst()) {
      total_size += 1 + 1;
    }

    // required .User.RewardBagInfo reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // optional .ProtoModelTrial.ModelTrialCPP modeltrial = 3;
    if (has_modeltrial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modeltrial());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushTrialRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushTrialRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushTrialRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushTrialRewardReq::MergeFrom(const PushTrialRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
    if (from.has_reward()) {
      mutable_reward()->::User::RewardBagInfo::MergeFrom(from.reward());
    }
    if (from.has_modeltrial()) {
      mutable_modeltrial()->::ProtoModelTrial::ModelTrialCPP::MergeFrom(from.modeltrial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushTrialRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushTrialRewardReq::CopyFrom(const PushTrialRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushTrialRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_reward()) {
    if (!this->reward().IsInitialized()) return false;
  }
  if (has_modeltrial()) {
    if (!this->modeltrial().IsInitialized()) return false;
  }
  return true;
}

void PushTrialRewardReq::Swap(PushTrialRewardReq* other) {
  if (other != this) {
    std::swap(isfirst_, other->isfirst_);
    std::swap(reward_, other->reward_);
    std::swap(modeltrial_, other->modeltrial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushTrialRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushTrialRewardReq_descriptor_;
  metadata.reflection = PushTrialRewardReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoModelTrial

// @@protoc_insertion_point(global_scope)
