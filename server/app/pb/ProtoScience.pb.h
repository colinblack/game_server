// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoScience.proto

#ifndef PROTOBUF_ProtoScience_2eproto__INCLUDED
#define PROTOBUF_ProtoScience_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtoScience {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoScience_2eproto();
void protobuf_AssignDesc_ProtoScience_2eproto();
void protobuf_ShutdownFile_ProtoScience_2eproto();

class ScienceItemCPP;
class ScienceCapitalReq;
class ScienceCapitalResp;
class ScienceSpeedCdReq;
class ScienceSpeedCdResp;

// ===================================================================

class ScienceItemCPP : public ::google::protobuf::Message {
 public:
  ScienceItemCPP();
  virtual ~ScienceItemCPP();

  ScienceItemCPP(const ScienceItemCPP& from);

  inline ScienceItemCPP& operator=(const ScienceItemCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScienceItemCPP& default_instance();

  void Swap(ScienceItemCPP* other);

  // implements Message ----------------------------------------------

  ScienceItemCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScienceItemCPP& from);
  void MergeFrom(const ScienceItemCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoScience.ScienceItemCPP)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 value_;
  friend void  protobuf_AddDesc_ProtoScience_2eproto();
  friend void protobuf_AssignDesc_ProtoScience_2eproto();
  friend void protobuf_ShutdownFile_ProtoScience_2eproto();

  void InitAsDefaultInstance();
  static ScienceItemCPP* default_instance_;
};
// -------------------------------------------------------------------

class ScienceCapitalReq : public ::google::protobuf::Message {
 public:
  ScienceCapitalReq();
  virtual ~ScienceCapitalReq();

  ScienceCapitalReq(const ScienceCapitalReq& from);

  inline ScienceCapitalReq& operator=(const ScienceCapitalReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScienceCapitalReq& default_instance();

  void Swap(ScienceCapitalReq* other);

  // implements Message ----------------------------------------------

  ScienceCapitalReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScienceCapitalReq& from);
  void MergeFrom(const ScienceCapitalReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoScience.ScienceCapitalReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_ProtoScience_2eproto();
  friend void protobuf_AssignDesc_ProtoScience_2eproto();
  friend void protobuf_ShutdownFile_ProtoScience_2eproto();

  void InitAsDefaultInstance();
  static ScienceCapitalReq* default_instance_;
};
// -------------------------------------------------------------------

class ScienceCapitalResp : public ::google::protobuf::Message {
 public:
  ScienceCapitalResp();
  virtual ~ScienceCapitalResp();

  ScienceCapitalResp(const ScienceCapitalResp& from);

  inline ScienceCapitalResp& operator=(const ScienceCapitalResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScienceCapitalResp& default_instance();

  void Swap(ScienceCapitalResp* other);

  // implements Message ----------------------------------------------

  ScienceCapitalResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScienceCapitalResp& from);
  void MergeFrom(const ScienceCapitalResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoScience.ScienceItemCPP item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::ProtoScience::ScienceItemCPP& item() const;
  inline ::ProtoScience::ScienceItemCPP* mutable_item();
  inline ::ProtoScience::ScienceItemCPP* release_item();
  inline void set_allocated_item(::ProtoScience::ScienceItemCPP* item);

  // required uint32 coin = 2;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 2;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // required uint32 wood = 3;
  inline bool has_wood() const;
  inline void clear_wood();
  static const int kWoodFieldNumber = 3;
  inline ::google::protobuf::uint32 wood() const;
  inline void set_wood(::google::protobuf::uint32 value);

  // required uint32 food = 4;
  inline bool has_food() const;
  inline void clear_food();
  static const int kFoodFieldNumber = 4;
  inline ::google::protobuf::uint32 food() const;
  inline void set_food(::google::protobuf::uint32 value);

  // required uint32 iron = 5;
  inline bool has_iron() const;
  inline void clear_iron();
  static const int kIronFieldNumber = 5;
  inline ::google::protobuf::uint32 iron() const;
  inline void set_iron(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoScience.ScienceCapitalResp)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_wood();
  inline void clear_has_wood();
  inline void set_has_food();
  inline void clear_has_food();
  inline void set_has_iron();
  inline void clear_has_iron();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoScience::ScienceItemCPP* item_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 wood_;
  ::google::protobuf::uint32 food_;
  ::google::protobuf::uint32 iron_;
  friend void  protobuf_AddDesc_ProtoScience_2eproto();
  friend void protobuf_AssignDesc_ProtoScience_2eproto();
  friend void protobuf_ShutdownFile_ProtoScience_2eproto();

  void InitAsDefaultInstance();
  static ScienceCapitalResp* default_instance_;
};
// -------------------------------------------------------------------

class ScienceSpeedCdReq : public ::google::protobuf::Message {
 public:
  ScienceSpeedCdReq();
  virtual ~ScienceSpeedCdReq();

  ScienceSpeedCdReq(const ScienceSpeedCdReq& from);

  inline ScienceSpeedCdReq& operator=(const ScienceSpeedCdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScienceSpeedCdReq& default_instance();

  void Swap(ScienceSpeedCdReq* other);

  // implements Message ----------------------------------------------

  ScienceSpeedCdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScienceSpeedCdReq& from);
  void MergeFrom(const ScienceSpeedCdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoScience.ScienceSpeedCdReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_ProtoScience_2eproto();
  friend void protobuf_AssignDesc_ProtoScience_2eproto();
  friend void protobuf_ShutdownFile_ProtoScience_2eproto();

  void InitAsDefaultInstance();
  static ScienceSpeedCdReq* default_instance_;
};
// -------------------------------------------------------------------

class ScienceSpeedCdResp : public ::google::protobuf::Message {
 public:
  ScienceSpeedCdResp();
  virtual ~ScienceSpeedCdResp();

  ScienceSpeedCdResp(const ScienceSpeedCdResp& from);

  inline ScienceSpeedCdResp& operator=(const ScienceSpeedCdResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScienceSpeedCdResp& default_instance();

  void Swap(ScienceSpeedCdResp* other);

  // implements Message ----------------------------------------------

  ScienceSpeedCdResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScienceSpeedCdResp& from);
  void MergeFrom(const ScienceSpeedCdResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoScience.ScienceItemCPP item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::ProtoScience::ScienceItemCPP& item() const;
  inline ::ProtoScience::ScienceItemCPP* mutable_item();
  inline ::ProtoScience::ScienceItemCPP* release_item();
  inline void set_allocated_item(::ProtoScience::ScienceItemCPP* item);

  // required uint32 cash = 2;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 2;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoScience.ScienceSpeedCdResp)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_cash();
  inline void clear_has_cash();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoScience::ScienceItemCPP* item_;
  ::google::protobuf::uint32 cash_;
  friend void  protobuf_AddDesc_ProtoScience_2eproto();
  friend void protobuf_AssignDesc_ProtoScience_2eproto();
  friend void protobuf_ShutdownFile_ProtoScience_2eproto();

  void InitAsDefaultInstance();
  static ScienceSpeedCdResp* default_instance_;
};
// ===================================================================


// ===================================================================

// ScienceItemCPP

// required uint32 id = 1;
inline bool ScienceItemCPP::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScienceItemCPP::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScienceItemCPP::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScienceItemCPP::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ScienceItemCPP::id() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceItemCPP.id)
  return id_;
}
inline void ScienceItemCPP::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceItemCPP.id)
}

// required uint32 status = 2;
inline bool ScienceItemCPP::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScienceItemCPP::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScienceItemCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScienceItemCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 ScienceItemCPP::status() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceItemCPP.status)
  return status_;
}
inline void ScienceItemCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceItemCPP.status)
}

// required uint32 value = 3;
inline bool ScienceItemCPP::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScienceItemCPP::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScienceItemCPP::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScienceItemCPP::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 ScienceItemCPP::value() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceItemCPP.value)
  return value_;
}
inline void ScienceItemCPP::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceItemCPP.value)
}

// -------------------------------------------------------------------

// ScienceCapitalReq

// required uint32 id = 1;
inline bool ScienceCapitalReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScienceCapitalReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScienceCapitalReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScienceCapitalReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ScienceCapitalReq::id() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceCapitalReq.id)
  return id_;
}
inline void ScienceCapitalReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceCapitalReq.id)
}

// -------------------------------------------------------------------

// ScienceCapitalResp

// required .ProtoScience.ScienceItemCPP item = 1;
inline bool ScienceCapitalResp::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScienceCapitalResp::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScienceCapitalResp::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScienceCapitalResp::clear_item() {
  if (item_ != NULL) item_->::ProtoScience::ScienceItemCPP::Clear();
  clear_has_item();
}
inline const ::ProtoScience::ScienceItemCPP& ScienceCapitalResp::item() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceCapitalResp.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::ProtoScience::ScienceItemCPP* ScienceCapitalResp::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::ProtoScience::ScienceItemCPP;
  // @@protoc_insertion_point(field_mutable:ProtoScience.ScienceCapitalResp.item)
  return item_;
}
inline ::ProtoScience::ScienceItemCPP* ScienceCapitalResp::release_item() {
  clear_has_item();
  ::ProtoScience::ScienceItemCPP* temp = item_;
  item_ = NULL;
  return temp;
}
inline void ScienceCapitalResp::set_allocated_item(::ProtoScience::ScienceItemCPP* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoScience.ScienceCapitalResp.item)
}

// required uint32 coin = 2;
inline bool ScienceCapitalResp::has_coin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScienceCapitalResp::set_has_coin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScienceCapitalResp::clear_has_coin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScienceCapitalResp::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 ScienceCapitalResp::coin() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceCapitalResp.coin)
  return coin_;
}
inline void ScienceCapitalResp::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceCapitalResp.coin)
}

// required uint32 wood = 3;
inline bool ScienceCapitalResp::has_wood() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScienceCapitalResp::set_has_wood() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScienceCapitalResp::clear_has_wood() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScienceCapitalResp::clear_wood() {
  wood_ = 0u;
  clear_has_wood();
}
inline ::google::protobuf::uint32 ScienceCapitalResp::wood() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceCapitalResp.wood)
  return wood_;
}
inline void ScienceCapitalResp::set_wood(::google::protobuf::uint32 value) {
  set_has_wood();
  wood_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceCapitalResp.wood)
}

// required uint32 food = 4;
inline bool ScienceCapitalResp::has_food() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScienceCapitalResp::set_has_food() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScienceCapitalResp::clear_has_food() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScienceCapitalResp::clear_food() {
  food_ = 0u;
  clear_has_food();
}
inline ::google::protobuf::uint32 ScienceCapitalResp::food() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceCapitalResp.food)
  return food_;
}
inline void ScienceCapitalResp::set_food(::google::protobuf::uint32 value) {
  set_has_food();
  food_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceCapitalResp.food)
}

// required uint32 iron = 5;
inline bool ScienceCapitalResp::has_iron() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScienceCapitalResp::set_has_iron() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScienceCapitalResp::clear_has_iron() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScienceCapitalResp::clear_iron() {
  iron_ = 0u;
  clear_has_iron();
}
inline ::google::protobuf::uint32 ScienceCapitalResp::iron() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceCapitalResp.iron)
  return iron_;
}
inline void ScienceCapitalResp::set_iron(::google::protobuf::uint32 value) {
  set_has_iron();
  iron_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceCapitalResp.iron)
}

// -------------------------------------------------------------------

// ScienceSpeedCdReq

// required uint32 id = 1;
inline bool ScienceSpeedCdReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScienceSpeedCdReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScienceSpeedCdReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScienceSpeedCdReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ScienceSpeedCdReq::id() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceSpeedCdReq.id)
  return id_;
}
inline void ScienceSpeedCdReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceSpeedCdReq.id)
}

// -------------------------------------------------------------------

// ScienceSpeedCdResp

// required .ProtoScience.ScienceItemCPP item = 1;
inline bool ScienceSpeedCdResp::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScienceSpeedCdResp::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScienceSpeedCdResp::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScienceSpeedCdResp::clear_item() {
  if (item_ != NULL) item_->::ProtoScience::ScienceItemCPP::Clear();
  clear_has_item();
}
inline const ::ProtoScience::ScienceItemCPP& ScienceSpeedCdResp::item() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceSpeedCdResp.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::ProtoScience::ScienceItemCPP* ScienceSpeedCdResp::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::ProtoScience::ScienceItemCPP;
  // @@protoc_insertion_point(field_mutable:ProtoScience.ScienceSpeedCdResp.item)
  return item_;
}
inline ::ProtoScience::ScienceItemCPP* ScienceSpeedCdResp::release_item() {
  clear_has_item();
  ::ProtoScience::ScienceItemCPP* temp = item_;
  item_ = NULL;
  return temp;
}
inline void ScienceSpeedCdResp::set_allocated_item(::ProtoScience::ScienceItemCPP* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoScience.ScienceSpeedCdResp.item)
}

// required uint32 cash = 2;
inline bool ScienceSpeedCdResp::has_cash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScienceSpeedCdResp::set_has_cash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScienceSpeedCdResp::clear_has_cash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScienceSpeedCdResp::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 ScienceSpeedCdResp::cash() const {
  // @@protoc_insertion_point(field_get:ProtoScience.ScienceSpeedCdResp.cash)
  return cash_;
}
inline void ScienceSpeedCdResp::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:ProtoScience.ScienceSpeedCdResp.cash)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoScience

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoScience_2eproto__INCLUDED
