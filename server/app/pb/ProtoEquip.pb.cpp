// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoEquip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoEquip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoEquip {

namespace {

const ::google::protobuf::Descriptor* SoldEquipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoldEquipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoldEquipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoldEquipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenRepurchaseWindowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenRepurchaseWindowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenRepurchaseWindowResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenRepurchaseWindowResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoEquip_2eproto() {
  protobuf_AddDesc_ProtoEquip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoEquip.proto");
  GOOGLE_CHECK(file != NULL);
  SoldEquipReq_descriptor_ = file->message_type(0);
  static const int SoldEquipReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldEquipReq, equd_),
  };
  SoldEquipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoldEquipReq_descriptor_,
      SoldEquipReq::default_instance_,
      SoldEquipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldEquipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldEquipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoldEquipReq));
  SoldEquipResp_descriptor_ = file->message_type(1);
  static const int SoldEquipResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldEquipResp, soldequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldEquipResp, coin_),
  };
  SoldEquipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoldEquipResp_descriptor_,
      SoldEquipResp::default_instance_,
      SoldEquipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldEquipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoldEquipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoldEquipResp));
  OpenRepurchaseWindowReq_descriptor_ = file->message_type(2);
  static const int OpenRepurchaseWindowReq_offsets_[1] = {
  };
  OpenRepurchaseWindowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenRepurchaseWindowReq_descriptor_,
      OpenRepurchaseWindowReq::default_instance_,
      OpenRepurchaseWindowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRepurchaseWindowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRepurchaseWindowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenRepurchaseWindowReq));
  OpenRepurchaseWindowResp_descriptor_ = file->message_type(3);
  static const int OpenRepurchaseWindowResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRepurchaseWindowResp, equips_),
  };
  OpenRepurchaseWindowResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenRepurchaseWindowResp_descriptor_,
      OpenRepurchaseWindowResp::default_instance_,
      OpenRepurchaseWindowResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRepurchaseWindowResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenRepurchaseWindowResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenRepurchaseWindowResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoEquip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoldEquipReq_descriptor_, &SoldEquipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoldEquipResp_descriptor_, &SoldEquipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenRepurchaseWindowReq_descriptor_, &OpenRepurchaseWindowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenRepurchaseWindowResp_descriptor_, &OpenRepurchaseWindowResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoEquip_2eproto() {
  delete SoldEquipReq::default_instance_;
  delete SoldEquipReq_reflection_;
  delete SoldEquipResp::default_instance_;
  delete SoldEquipResp_reflection_;
  delete OpenRepurchaseWindowReq::default_instance_;
  delete OpenRepurchaseWindowReq_reflection_;
  delete OpenRepurchaseWindowResp::default_instance_;
  delete OpenRepurchaseWindowResp_reflection_;
}

void protobuf_AddDesc_ProtoEquip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ProtoEquip.proto\022\nProtoEquip\032\020DataComm"
    "on.proto\"\034\n\014SoldEquipReq\022\014\n\004equd\030\001 \002(\r\"J"
    "\n\rSoldEquipResp\022+\n\tsoldequip\030\001 \002(\0132\030.Dat"
    "aCommon.EquipmentCPP\022\014\n\004coin\030\002 \002(\r\"\031\n\027Op"
    "enRepurchaseWindowReq\"D\n\030OpenRepurchaseW"
    "indowResp\022(\n\006equips\030\001 \003(\0132\030.DataCommon.E"
    "quipmentCPP", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoEquip.proto", &protobuf_RegisterTypes);
  SoldEquipReq::default_instance_ = new SoldEquipReq();
  SoldEquipResp::default_instance_ = new SoldEquipResp();
  OpenRepurchaseWindowReq::default_instance_ = new OpenRepurchaseWindowReq();
  OpenRepurchaseWindowResp::default_instance_ = new OpenRepurchaseWindowResp();
  SoldEquipReq::default_instance_->InitAsDefaultInstance();
  SoldEquipResp::default_instance_->InitAsDefaultInstance();
  OpenRepurchaseWindowReq::default_instance_->InitAsDefaultInstance();
  OpenRepurchaseWindowResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoEquip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoEquip_2eproto {
  StaticDescriptorInitializer_ProtoEquip_2eproto() {
    protobuf_AddDesc_ProtoEquip_2eproto();
  }
} static_descriptor_initializer_ProtoEquip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SoldEquipReq::kEqudFieldNumber;
#endif  // !_MSC_VER

SoldEquipReq::SoldEquipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoEquip.SoldEquipReq)
}

void SoldEquipReq::InitAsDefaultInstance() {
}

SoldEquipReq::SoldEquipReq(const SoldEquipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoEquip.SoldEquipReq)
}

void SoldEquipReq::SharedCtor() {
  _cached_size_ = 0;
  equd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoldEquipReq::~SoldEquipReq() {
  // @@protoc_insertion_point(destructor:ProtoEquip.SoldEquipReq)
  SharedDtor();
}

void SoldEquipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoldEquipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoldEquipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoldEquipReq_descriptor_;
}

const SoldEquipReq& SoldEquipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquip_2eproto();
  return *default_instance_;
}

SoldEquipReq* SoldEquipReq::default_instance_ = NULL;

SoldEquipReq* SoldEquipReq::New() const {
  return new SoldEquipReq;
}

void SoldEquipReq::Clear() {
  equd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoldEquipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoEquip.SoldEquipReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equd_)));
          set_has_equd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoEquip.SoldEquipReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoEquip.SoldEquipReq)
  return false;
#undef DO_
}

void SoldEquipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoEquip.SoldEquipReq)
  // required uint32 equd = 1;
  if (has_equd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoEquip.SoldEquipReq)
}

::google::protobuf::uint8* SoldEquipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoEquip.SoldEquipReq)
  // required uint32 equd = 1;
  if (has_equd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoEquip.SoldEquipReq)
  return target;
}

int SoldEquipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equd = 1;
    if (has_equd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoldEquipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoldEquipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoldEquipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoldEquipReq::MergeFrom(const SoldEquipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equd()) {
      set_equd(from.equd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoldEquipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoldEquipReq::CopyFrom(const SoldEquipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoldEquipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SoldEquipReq::Swap(SoldEquipReq* other) {
  if (other != this) {
    std::swap(equd_, other->equd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoldEquipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoldEquipReq_descriptor_;
  metadata.reflection = SoldEquipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoldEquipResp::kSoldequipFieldNumber;
const int SoldEquipResp::kCoinFieldNumber;
#endif  // !_MSC_VER

SoldEquipResp::SoldEquipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoEquip.SoldEquipResp)
}

void SoldEquipResp::InitAsDefaultInstance() {
  soldequip_ = const_cast< ::DataCommon::EquipmentCPP*>(&::DataCommon::EquipmentCPP::default_instance());
}

SoldEquipResp::SoldEquipResp(const SoldEquipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoEquip.SoldEquipResp)
}

void SoldEquipResp::SharedCtor() {
  _cached_size_ = 0;
  soldequip_ = NULL;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoldEquipResp::~SoldEquipResp() {
  // @@protoc_insertion_point(destructor:ProtoEquip.SoldEquipResp)
  SharedDtor();
}

void SoldEquipResp::SharedDtor() {
  if (this != default_instance_) {
    delete soldequip_;
  }
}

void SoldEquipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoldEquipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoldEquipResp_descriptor_;
}

const SoldEquipResp& SoldEquipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquip_2eproto();
  return *default_instance_;
}

SoldEquipResp* SoldEquipResp::default_instance_ = NULL;

SoldEquipResp* SoldEquipResp::New() const {
  return new SoldEquipResp;
}

void SoldEquipResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_soldequip()) {
      if (soldequip_ != NULL) soldequip_->::DataCommon::EquipmentCPP::Clear();
    }
    coin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoldEquipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoEquip.SoldEquipResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.EquipmentCPP soldequip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soldequip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coin;
        break;
      }

      // required uint32 coin = 2;
      case 2: {
        if (tag == 16) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoEquip.SoldEquipResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoEquip.SoldEquipResp)
  return false;
#undef DO_
}

void SoldEquipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoEquip.SoldEquipResp)
  // required .DataCommon.EquipmentCPP soldequip = 1;
  if (has_soldequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->soldequip(), output);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoEquip.SoldEquipResp)
}

::google::protobuf::uint8* SoldEquipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoEquip.SoldEquipResp)
  // required .DataCommon.EquipmentCPP soldequip = 1;
  if (has_soldequip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->soldequip(), target);
  }

  // required uint32 coin = 2;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoEquip.SoldEquipResp)
  return target;
}

int SoldEquipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.EquipmentCPP soldequip = 1;
    if (has_soldequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soldequip());
    }

    // required uint32 coin = 2;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoldEquipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoldEquipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoldEquipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoldEquipResp::MergeFrom(const SoldEquipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soldequip()) {
      mutable_soldequip()->::DataCommon::EquipmentCPP::MergeFrom(from.soldequip());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoldEquipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoldEquipResp::CopyFrom(const SoldEquipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoldEquipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_soldequip()) {
    if (!this->soldequip().IsInitialized()) return false;
  }
  return true;
}

void SoldEquipResp::Swap(SoldEquipResp* other) {
  if (other != this) {
    std::swap(soldequip_, other->soldequip_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoldEquipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoldEquipResp_descriptor_;
  metadata.reflection = SoldEquipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenRepurchaseWindowReq::OpenRepurchaseWindowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoEquip.OpenRepurchaseWindowReq)
}

void OpenRepurchaseWindowReq::InitAsDefaultInstance() {
}

OpenRepurchaseWindowReq::OpenRepurchaseWindowReq(const OpenRepurchaseWindowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoEquip.OpenRepurchaseWindowReq)
}

void OpenRepurchaseWindowReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenRepurchaseWindowReq::~OpenRepurchaseWindowReq() {
  // @@protoc_insertion_point(destructor:ProtoEquip.OpenRepurchaseWindowReq)
  SharedDtor();
}

void OpenRepurchaseWindowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenRepurchaseWindowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenRepurchaseWindowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenRepurchaseWindowReq_descriptor_;
}

const OpenRepurchaseWindowReq& OpenRepurchaseWindowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquip_2eproto();
  return *default_instance_;
}

OpenRepurchaseWindowReq* OpenRepurchaseWindowReq::default_instance_ = NULL;

OpenRepurchaseWindowReq* OpenRepurchaseWindowReq::New() const {
  return new OpenRepurchaseWindowReq;
}

void OpenRepurchaseWindowReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenRepurchaseWindowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoEquip.OpenRepurchaseWindowReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoEquip.OpenRepurchaseWindowReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoEquip.OpenRepurchaseWindowReq)
  return false;
#undef DO_
}

void OpenRepurchaseWindowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoEquip.OpenRepurchaseWindowReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoEquip.OpenRepurchaseWindowReq)
}

::google::protobuf::uint8* OpenRepurchaseWindowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoEquip.OpenRepurchaseWindowReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoEquip.OpenRepurchaseWindowReq)
  return target;
}

int OpenRepurchaseWindowReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenRepurchaseWindowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenRepurchaseWindowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenRepurchaseWindowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenRepurchaseWindowReq::MergeFrom(const OpenRepurchaseWindowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenRepurchaseWindowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRepurchaseWindowReq::CopyFrom(const OpenRepurchaseWindowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRepurchaseWindowReq::IsInitialized() const {

  return true;
}

void OpenRepurchaseWindowReq::Swap(OpenRepurchaseWindowReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenRepurchaseWindowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenRepurchaseWindowReq_descriptor_;
  metadata.reflection = OpenRepurchaseWindowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenRepurchaseWindowResp::kEquipsFieldNumber;
#endif  // !_MSC_VER

OpenRepurchaseWindowResp::OpenRepurchaseWindowResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoEquip.OpenRepurchaseWindowResp)
}

void OpenRepurchaseWindowResp::InitAsDefaultInstance() {
}

OpenRepurchaseWindowResp::OpenRepurchaseWindowResp(const OpenRepurchaseWindowResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoEquip.OpenRepurchaseWindowResp)
}

void OpenRepurchaseWindowResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenRepurchaseWindowResp::~OpenRepurchaseWindowResp() {
  // @@protoc_insertion_point(destructor:ProtoEquip.OpenRepurchaseWindowResp)
  SharedDtor();
}

void OpenRepurchaseWindowResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenRepurchaseWindowResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenRepurchaseWindowResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenRepurchaseWindowResp_descriptor_;
}

const OpenRepurchaseWindowResp& OpenRepurchaseWindowResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoEquip_2eproto();
  return *default_instance_;
}

OpenRepurchaseWindowResp* OpenRepurchaseWindowResp::default_instance_ = NULL;

OpenRepurchaseWindowResp* OpenRepurchaseWindowResp::New() const {
  return new OpenRepurchaseWindowResp;
}

void OpenRepurchaseWindowResp::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenRepurchaseWindowResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoEquip.OpenRepurchaseWindowResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DataCommon.EquipmentCPP equips = 1;
      case 1: {
        if (tag == 10) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoEquip.OpenRepurchaseWindowResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoEquip.OpenRepurchaseWindowResp)
  return false;
#undef DO_
}

void OpenRepurchaseWindowResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoEquip.OpenRepurchaseWindowResp)
  // repeated .DataCommon.EquipmentCPP equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoEquip.OpenRepurchaseWindowResp)
}

::google::protobuf::uint8* OpenRepurchaseWindowResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoEquip.OpenRepurchaseWindowResp)
  // repeated .DataCommon.EquipmentCPP equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoEquip.OpenRepurchaseWindowResp)
  return target;
}

int OpenRepurchaseWindowResp::ByteSize() const {
  int total_size = 0;

  // repeated .DataCommon.EquipmentCPP equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenRepurchaseWindowResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenRepurchaseWindowResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenRepurchaseWindowResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenRepurchaseWindowResp::MergeFrom(const OpenRepurchaseWindowResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenRepurchaseWindowResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenRepurchaseWindowResp::CopyFrom(const OpenRepurchaseWindowResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenRepurchaseWindowResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->equips())) return false;
  return true;
}

void OpenRepurchaseWindowResp::Swap(OpenRepurchaseWindowResp* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenRepurchaseWindowResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenRepurchaseWindowResp_descriptor_;
  metadata.reflection = OpenRepurchaseWindowResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoEquip

// @@protoc_insertion_point(global_scope)
