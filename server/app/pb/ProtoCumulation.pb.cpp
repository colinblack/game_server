// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoCumulation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoCumulation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoCumulation {

namespace {

const ::google::protobuf::Descriptor* CumulationCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CumulationCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CumulationRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CumulationRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CumulationRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CumulationRewardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoCumulation_2eproto() {
  protobuf_AddDesc_ProtoCumulation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoCumulation.proto");
  GOOGLE_CHECK(file != NULL);
  CumulationCPP_descriptor_ = file->message_type(0);
  static const int CumulationCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationCPP, status_),
  };
  CumulationCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CumulationCPP_descriptor_,
      CumulationCPP::default_instance_,
      CumulationCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CumulationCPP));
  CumulationRewardReq_descriptor_ = file->message_type(1);
  static const int CumulationRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationRewardReq, rindex_),
  };
  CumulationRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CumulationRewardReq_descriptor_,
      CumulationRewardReq::default_instance_,
      CumulationRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CumulationRewardReq));
  CumulationRewardResp_descriptor_ = file->message_type(2);
  static const int CumulationRewardResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationRewardResp, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationRewardResp, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationRewardResp, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationRewardResp, status_),
  };
  CumulationRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CumulationRewardResp_descriptor_,
      CumulationRewardResp::default_instance_,
      CumulationRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CumulationRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CumulationRewardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoCumulation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CumulationCPP_descriptor_, &CumulationCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CumulationRewardReq_descriptor_, &CumulationRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CumulationRewardResp_descriptor_, &CumulationRewardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoCumulation_2eproto() {
  delete CumulationCPP::default_instance_;
  delete CumulationCPP_reflection_;
  delete CumulationRewardReq::default_instance_;
  delete CumulationRewardReq_reflection_;
  delete CumulationRewardResp::default_instance_;
  delete CumulationRewardResp_reflection_;
}

void protobuf_AddDesc_ProtoCumulation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoHero::protobuf_AddDesc_ProtoHero_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025ProtoCumulation.proto\022\017ProtoCumulation"
    "\032\020DataCommon.proto\032\017ProtoHero.proto\"\037\n\rC"
    "umulationCPP\022\016\n\006status\030\001 \002(\r\"%\n\023Cumulati"
    "onRewardReq\022\016\n\006rindex\030\001 \002(\r\"\254\001\n\024Cumulati"
    "onRewardResp\022+\n\006equips\030\001 \001(\0132\033.DataCommo"
    "n.EquipmentAllCPP\022-\n\004base\030\002 \001(\0132\037.DataCo"
    "mmon.CommonBaseRewardCPP\022(\n\004hero\030\003 \001(\0132\032"
    ".ProtoHero.HeroBaseInfoCPP\022\016\n\006status\030\004 \002"
    "(\r", 322);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoCumulation.proto", &protobuf_RegisterTypes);
  CumulationCPP::default_instance_ = new CumulationCPP();
  CumulationRewardReq::default_instance_ = new CumulationRewardReq();
  CumulationRewardResp::default_instance_ = new CumulationRewardResp();
  CumulationCPP::default_instance_->InitAsDefaultInstance();
  CumulationRewardReq::default_instance_->InitAsDefaultInstance();
  CumulationRewardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoCumulation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoCumulation_2eproto {
  StaticDescriptorInitializer_ProtoCumulation_2eproto() {
    protobuf_AddDesc_ProtoCumulation_2eproto();
  }
} static_descriptor_initializer_ProtoCumulation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CumulationCPP::kStatusFieldNumber;
#endif  // !_MSC_VER

CumulationCPP::CumulationCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCumulation.CumulationCPP)
}

void CumulationCPP::InitAsDefaultInstance() {
}

CumulationCPP::CumulationCPP(const CumulationCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCumulation.CumulationCPP)
}

void CumulationCPP::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CumulationCPP::~CumulationCPP() {
  // @@protoc_insertion_point(destructor:ProtoCumulation.CumulationCPP)
  SharedDtor();
}

void CumulationCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CumulationCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CumulationCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CumulationCPP_descriptor_;
}

const CumulationCPP& CumulationCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCumulation_2eproto();
  return *default_instance_;
}

CumulationCPP* CumulationCPP::default_instance_ = NULL;

CumulationCPP* CumulationCPP::New() const {
  return new CumulationCPP;
}

void CumulationCPP::Clear() {
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CumulationCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCumulation.CumulationCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCumulation.CumulationCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCumulation.CumulationCPP)
  return false;
#undef DO_
}

void CumulationCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCumulation.CumulationCPP)
  // required uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCumulation.CumulationCPP)
}

::google::protobuf::uint8* CumulationCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCumulation.CumulationCPP)
  // required uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCumulation.CumulationCPP)
  return target;
}

int CumulationCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CumulationCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CumulationCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CumulationCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CumulationCPP::MergeFrom(const CumulationCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CumulationCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CumulationCPP::CopyFrom(const CumulationCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CumulationCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CumulationCPP::Swap(CumulationCPP* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CumulationCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CumulationCPP_descriptor_;
  metadata.reflection = CumulationCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CumulationRewardReq::kRindexFieldNumber;
#endif  // !_MSC_VER

CumulationRewardReq::CumulationRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCumulation.CumulationRewardReq)
}

void CumulationRewardReq::InitAsDefaultInstance() {
}

CumulationRewardReq::CumulationRewardReq(const CumulationRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCumulation.CumulationRewardReq)
}

void CumulationRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CumulationRewardReq::~CumulationRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoCumulation.CumulationRewardReq)
  SharedDtor();
}

void CumulationRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CumulationRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CumulationRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CumulationRewardReq_descriptor_;
}

const CumulationRewardReq& CumulationRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCumulation_2eproto();
  return *default_instance_;
}

CumulationRewardReq* CumulationRewardReq::default_instance_ = NULL;

CumulationRewardReq* CumulationRewardReq::New() const {
  return new CumulationRewardReq;
}

void CumulationRewardReq::Clear() {
  rindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CumulationRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCumulation.CumulationRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rindex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rindex_)));
          set_has_rindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCumulation.CumulationRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCumulation.CumulationRewardReq)
  return false;
#undef DO_
}

void CumulationRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCumulation.CumulationRewardReq)
  // required uint32 rindex = 1;
  if (has_rindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCumulation.CumulationRewardReq)
}

::google::protobuf::uint8* CumulationRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCumulation.CumulationRewardReq)
  // required uint32 rindex = 1;
  if (has_rindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCumulation.CumulationRewardReq)
  return target;
}

int CumulationRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rindex = 1;
    if (has_rindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CumulationRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CumulationRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CumulationRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CumulationRewardReq::MergeFrom(const CumulationRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rindex()) {
      set_rindex(from.rindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CumulationRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CumulationRewardReq::CopyFrom(const CumulationRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CumulationRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CumulationRewardReq::Swap(CumulationRewardReq* other) {
  if (other != this) {
    std::swap(rindex_, other->rindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CumulationRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CumulationRewardReq_descriptor_;
  metadata.reflection = CumulationRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CumulationRewardResp::kEquipsFieldNumber;
const int CumulationRewardResp::kBaseFieldNumber;
const int CumulationRewardResp::kHeroFieldNumber;
const int CumulationRewardResp::kStatusFieldNumber;
#endif  // !_MSC_VER

CumulationRewardResp::CumulationRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCumulation.CumulationRewardResp)
}

void CumulationRewardResp::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
}

CumulationRewardResp::CumulationRewardResp(const CumulationRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCumulation.CumulationRewardResp)
}

void CumulationRewardResp::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  hero_ = NULL;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CumulationRewardResp::~CumulationRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoCumulation.CumulationRewardResp)
  SharedDtor();
}

void CumulationRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
    delete hero_;
  }
}

void CumulationRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CumulationRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CumulationRewardResp_descriptor_;
}

const CumulationRewardResp& CumulationRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoCumulation_2eproto();
  return *default_instance_;
}

CumulationRewardResp* CumulationRewardResp::default_instance_ = NULL;

CumulationRewardResp* CumulationRewardResp::New() const {
  return new CumulationRewardResp;
}

void CumulationRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CumulationRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCumulation.CumulationRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.EquipmentAllCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .DataCommon.CommonBaseRewardCPP base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hero;
        break;
      }

      // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
      case 3: {
        if (tag == 26) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCumulation.CumulationRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCumulation.CumulationRewardResp)
  return false;
#undef DO_
}

void CumulationRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCumulation.CumulationRewardResp)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCumulation.CumulationRewardResp)
}

::google::protobuf::uint8* CumulationRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCumulation.CumulationRewardResp)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero(), target);
  }

  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCumulation.CumulationRewardResp)
  return target;
}

int CumulationRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.EquipmentAllCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .DataCommon.CommonBaseRewardCPP base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CumulationRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CumulationRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CumulationRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CumulationRewardResp::MergeFrom(const CumulationRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CumulationRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CumulationRewardResp::CopyFrom(const CumulationRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CumulationRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  return true;
}

void CumulationRewardResp::Swap(CumulationRewardResp* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(base_, other->base_);
    std::swap(hero_, other->hero_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CumulationRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CumulationRewardResp_descriptor_;
  metadata.reflection = CumulationRewardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCumulation

// @@protoc_insertion_point(global_scope)
