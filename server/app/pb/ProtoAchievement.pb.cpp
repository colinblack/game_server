// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoAchievement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoAchievement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoAchievement {

namespace {

const ::google::protobuf::Descriptor* AchievementCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchievementAllCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementAllCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyAchievementReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyAchievementReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushAchievementReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushAchievementReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAchievementRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAchievementRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAchievementRewardResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAchievementRewardResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoAchievement_2eproto() {
  protobuf_AddDesc_ProtoAchievement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoAchievement.proto");
  GOOGLE_CHECK(file != NULL);
  AchievementCPP_descriptor_ = file->message_type(0);
  static const int AchievementCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementCPP, current_),
  };
  AchievementCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchievementCPP_descriptor_,
      AchievementCPP::default_instance_,
      AchievementCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchievementCPP));
  AchievementAllCPP_descriptor_ = file->message_type(1);
  static const int AchievementAllCPP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementAllCPP, achievement_),
  };
  AchievementAllCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchievementAllCPP_descriptor_,
      AchievementAllCPP::default_instance_,
      AchievementAllCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementAllCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementAllCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchievementAllCPP));
  VerifyAchievementReq_descriptor_ = file->message_type(2);
  static const int VerifyAchievementReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAchievementReq, type_),
  };
  VerifyAchievementReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyAchievementReq_descriptor_,
      VerifyAchievementReq::default_instance_,
      VerifyAchievementReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAchievementReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyAchievementReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyAchievementReq));
  PushAchievementReq_descriptor_ = file->message_type(3);
  static const int PushAchievementReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAchievementReq, achievements_),
  };
  PushAchievementReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushAchievementReq_descriptor_,
      PushAchievementReq::default_instance_,
      PushAchievementReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAchievementReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAchievementReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushAchievementReq));
  GetAchievementRewardReq_descriptor_ = file->message_type(4);
  static const int GetAchievementRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchievementRewardReq, id_),
  };
  GetAchievementRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAchievementRewardReq_descriptor_,
      GetAchievementRewardReq::default_instance_,
      GetAchievementRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchievementRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchievementRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAchievementRewardReq));
  GetAchievementRewardResp_descriptor_ = file->message_type(5);
  static const int GetAchievementRewardResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchievementRewardResp, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchievementRewardResp, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchievementRewardResp, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchievementRewardResp, achievement_),
  };
  GetAchievementRewardResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAchievementRewardResp_descriptor_,
      GetAchievementRewardResp::default_instance_,
      GetAchievementRewardResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchievementRewardResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchievementRewardResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAchievementRewardResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoAchievement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchievementCPP_descriptor_, &AchievementCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchievementAllCPP_descriptor_, &AchievementAllCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyAchievementReq_descriptor_, &VerifyAchievementReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushAchievementReq_descriptor_, &PushAchievementReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAchievementRewardReq_descriptor_, &GetAchievementRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAchievementRewardResp_descriptor_, &GetAchievementRewardResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoAchievement_2eproto() {
  delete AchievementCPP::default_instance_;
  delete AchievementCPP_reflection_;
  delete AchievementAllCPP::default_instance_;
  delete AchievementAllCPP_reflection_;
  delete VerifyAchievementReq::default_instance_;
  delete VerifyAchievementReq_reflection_;
  delete PushAchievementReq::default_instance_;
  delete PushAchievementReq_reflection_;
  delete GetAchievementRewardReq::default_instance_;
  delete GetAchievementRewardReq_reflection_;
  delete GetAchievementRewardResp::default_instance_;
  delete GetAchievementRewardResp_reflection_;
}

void protobuf_AddDesc_ProtoAchievement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoHero::protobuf_AddDesc_ProtoHero_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtoAchievement.proto\022\020ProtoAchieveme"
    "nt\032\020DataCommon.proto\032\017ProtoHero.proto\"=\n"
    "\016AchievementCPP\022\n\n\002id\030\001 \002(\r\022\016\n\006status\030\002 "
    "\002(\r\022\017\n\007current\030\003 \003(\r\"J\n\021AchievementAllCP"
    "P\0225\n\013achievement\030\001 \003(\0132 .ProtoAchievemen"
    "t.AchievementCPP\"$\n\024VerifyAchievementReq"
    "\022\014\n\004type\030\001 \002(\r\"O\n\022PushAchievementReq\0229\n\014"
    "achievements\030\001 \002(\0132#.ProtoAchievement.Ac"
    "hievementAllCPP\"%\n\027GetAchievementRewardR"
    "eq\022\n\n\002id\030\001 \002(\r\"\327\001\n\030GetAchievementRewardR"
    "esp\022+\n\006equips\030\001 \001(\0132\033.DataCommon.Equipme"
    "ntAllCPP\022-\n\004base\030\002 \001(\0132\037.DataCommon.Comm"
    "onBaseRewardCPP\022(\n\004hero\030\003 \001(\0132\032.ProtoHer"
    "o.HeroBaseInfoCPP\0225\n\013achievement\030\004 \002(\0132 "
    ".ProtoAchievement.AchievementCPP", 592);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoAchievement.proto", &protobuf_RegisterTypes);
  AchievementCPP::default_instance_ = new AchievementCPP();
  AchievementAllCPP::default_instance_ = new AchievementAllCPP();
  VerifyAchievementReq::default_instance_ = new VerifyAchievementReq();
  PushAchievementReq::default_instance_ = new PushAchievementReq();
  GetAchievementRewardReq::default_instance_ = new GetAchievementRewardReq();
  GetAchievementRewardResp::default_instance_ = new GetAchievementRewardResp();
  AchievementCPP::default_instance_->InitAsDefaultInstance();
  AchievementAllCPP::default_instance_->InitAsDefaultInstance();
  VerifyAchievementReq::default_instance_->InitAsDefaultInstance();
  PushAchievementReq::default_instance_->InitAsDefaultInstance();
  GetAchievementRewardReq::default_instance_->InitAsDefaultInstance();
  GetAchievementRewardResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoAchievement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoAchievement_2eproto {
  StaticDescriptorInitializer_ProtoAchievement_2eproto() {
    protobuf_AddDesc_ProtoAchievement_2eproto();
  }
} static_descriptor_initializer_ProtoAchievement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AchievementCPP::kIdFieldNumber;
const int AchievementCPP::kStatusFieldNumber;
const int AchievementCPP::kCurrentFieldNumber;
#endif  // !_MSC_VER

AchievementCPP::AchievementCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAchievement.AchievementCPP)
}

void AchievementCPP::InitAsDefaultInstance() {
}

AchievementCPP::AchievementCPP(const AchievementCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAchievement.AchievementCPP)
}

void AchievementCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementCPP::~AchievementCPP() {
  // @@protoc_insertion_point(destructor:ProtoAchievement.AchievementCPP)
  SharedDtor();
}

void AchievementCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchievementCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementCPP_descriptor_;
}

const AchievementCPP& AchievementCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
  return *default_instance_;
}

AchievementCPP* AchievementCPP::default_instance_ = NULL;

AchievementCPP* AchievementCPP::New() const {
  return new AchievementCPP;
}

void AchievementCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AchievementCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  current_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchievementCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAchievement.AchievementCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current;
        break;
      }

      // repeated uint32 current = 3;
      case 3: {
        if (tag == 24) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_current())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_current())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAchievement.AchievementCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAchievement.AchievementCPP)
  return false;
#undef DO_
}

void AchievementCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAchievement.AchievementCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // repeated uint32 current = 3;
  for (int i = 0; i < this->current_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->current(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAchievement.AchievementCPP)
}

::google::protobuf::uint8* AchievementCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAchievement.AchievementCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // repeated uint32 current = 3;
  for (int i = 0; i < this->current_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->current(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAchievement.AchievementCPP)
  return target;
}

int AchievementCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  // repeated uint32 current = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->current_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->current(i));
    }
    total_size += 1 * this->current_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchievementCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementCPP::MergeFrom(const AchievementCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  current_.MergeFrom(from.current_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchievementCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementCPP::CopyFrom(const AchievementCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AchievementCPP::Swap(AchievementCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    current_.Swap(&other->current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchievementCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementCPP_descriptor_;
  metadata.reflection = AchievementCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchievementAllCPP::kAchievementFieldNumber;
#endif  // !_MSC_VER

AchievementAllCPP::AchievementAllCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAchievement.AchievementAllCPP)
}

void AchievementAllCPP::InitAsDefaultInstance() {
}

AchievementAllCPP::AchievementAllCPP(const AchievementAllCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAchievement.AchievementAllCPP)
}

void AchievementAllCPP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementAllCPP::~AchievementAllCPP() {
  // @@protoc_insertion_point(destructor:ProtoAchievement.AchievementAllCPP)
  SharedDtor();
}

void AchievementAllCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchievementAllCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementAllCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementAllCPP_descriptor_;
}

const AchievementAllCPP& AchievementAllCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
  return *default_instance_;
}

AchievementAllCPP* AchievementAllCPP::default_instance_ = NULL;

AchievementAllCPP* AchievementAllCPP::New() const {
  return new AchievementAllCPP;
}

void AchievementAllCPP::Clear() {
  achievement_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchievementAllCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAchievement.AchievementAllCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoAchievement.AchievementCPP achievement = 1;
      case 1: {
        if (tag == 10) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_achievement;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAchievement.AchievementAllCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAchievement.AchievementAllCPP)
  return false;
#undef DO_
}

void AchievementAllCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAchievement.AchievementAllCPP)
  // repeated .ProtoAchievement.AchievementCPP achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievement(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAchievement.AchievementAllCPP)
}

::google::protobuf::uint8* AchievementAllCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAchievement.AchievementAllCPP)
  // repeated .ProtoAchievement.AchievementCPP achievement = 1;
  for (int i = 0; i < this->achievement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievement(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAchievement.AchievementAllCPP)
  return target;
}

int AchievementAllCPP::ByteSize() const {
  int total_size = 0;

  // repeated .ProtoAchievement.AchievementCPP achievement = 1;
  total_size += 1 * this->achievement_size();
  for (int i = 0; i < this->achievement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementAllCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchievementAllCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementAllCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementAllCPP::MergeFrom(const AchievementAllCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_.MergeFrom(from.achievement_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchievementAllCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementAllCPP::CopyFrom(const AchievementAllCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementAllCPP::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->achievement())) return false;
  return true;
}

void AchievementAllCPP::Swap(AchievementAllCPP* other) {
  if (other != this) {
    achievement_.Swap(&other->achievement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchievementAllCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementAllCPP_descriptor_;
  metadata.reflection = AchievementAllCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyAchievementReq::kTypeFieldNumber;
#endif  // !_MSC_VER

VerifyAchievementReq::VerifyAchievementReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAchievement.VerifyAchievementReq)
}

void VerifyAchievementReq::InitAsDefaultInstance() {
}

VerifyAchievementReq::VerifyAchievementReq(const VerifyAchievementReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAchievement.VerifyAchievementReq)
}

void VerifyAchievementReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyAchievementReq::~VerifyAchievementReq() {
  // @@protoc_insertion_point(destructor:ProtoAchievement.VerifyAchievementReq)
  SharedDtor();
}

void VerifyAchievementReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VerifyAchievementReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyAchievementReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyAchievementReq_descriptor_;
}

const VerifyAchievementReq& VerifyAchievementReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
  return *default_instance_;
}

VerifyAchievementReq* VerifyAchievementReq::default_instance_ = NULL;

VerifyAchievementReq* VerifyAchievementReq::New() const {
  return new VerifyAchievementReq;
}

void VerifyAchievementReq::Clear() {
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyAchievementReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAchievement.VerifyAchievementReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAchievement.VerifyAchievementReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAchievement.VerifyAchievementReq)
  return false;
#undef DO_
}

void VerifyAchievementReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAchievement.VerifyAchievementReq)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAchievement.VerifyAchievementReq)
}

::google::protobuf::uint8* VerifyAchievementReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAchievement.VerifyAchievementReq)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAchievement.VerifyAchievementReq)
  return target;
}

int VerifyAchievementReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyAchievementReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyAchievementReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyAchievementReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyAchievementReq::MergeFrom(const VerifyAchievementReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyAchievementReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyAchievementReq::CopyFrom(const VerifyAchievementReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyAchievementReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VerifyAchievementReq::Swap(VerifyAchievementReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyAchievementReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyAchievementReq_descriptor_;
  metadata.reflection = VerifyAchievementReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushAchievementReq::kAchievementsFieldNumber;
#endif  // !_MSC_VER

PushAchievementReq::PushAchievementReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAchievement.PushAchievementReq)
}

void PushAchievementReq::InitAsDefaultInstance() {
  achievements_ = const_cast< ::ProtoAchievement::AchievementAllCPP*>(&::ProtoAchievement::AchievementAllCPP::default_instance());
}

PushAchievementReq::PushAchievementReq(const PushAchievementReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAchievement.PushAchievementReq)
}

void PushAchievementReq::SharedCtor() {
  _cached_size_ = 0;
  achievements_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushAchievementReq::~PushAchievementReq() {
  // @@protoc_insertion_point(destructor:ProtoAchievement.PushAchievementReq)
  SharedDtor();
}

void PushAchievementReq::SharedDtor() {
  if (this != default_instance_) {
    delete achievements_;
  }
}

void PushAchievementReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushAchievementReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushAchievementReq_descriptor_;
}

const PushAchievementReq& PushAchievementReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
  return *default_instance_;
}

PushAchievementReq* PushAchievementReq::default_instance_ = NULL;

PushAchievementReq* PushAchievementReq::New() const {
  return new PushAchievementReq;
}

void PushAchievementReq::Clear() {
  if (has_achievements()) {
    if (achievements_ != NULL) achievements_->::ProtoAchievement::AchievementAllCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushAchievementReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAchievement.PushAchievementReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoAchievement.AchievementAllCPP achievements = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAchievement.PushAchievementReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAchievement.PushAchievementReq)
  return false;
#undef DO_
}

void PushAchievementReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAchievement.PushAchievementReq)
  // required .ProtoAchievement.AchievementAllCPP achievements = 1;
  if (has_achievements()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievements(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAchievement.PushAchievementReq)
}

::google::protobuf::uint8* PushAchievementReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAchievement.PushAchievementReq)
  // required .ProtoAchievement.AchievementAllCPP achievements = 1;
  if (has_achievements()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievements(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAchievement.PushAchievementReq)
  return target;
}

int PushAchievementReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoAchievement.AchievementAllCPP achievements = 1;
    if (has_achievements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievements());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushAchievementReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushAchievementReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushAchievementReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushAchievementReq::MergeFrom(const PushAchievementReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievements()) {
      mutable_achievements()->::ProtoAchievement::AchievementAllCPP::MergeFrom(from.achievements());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushAchievementReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushAchievementReq::CopyFrom(const PushAchievementReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAchievementReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_achievements()) {
    if (!this->achievements().IsInitialized()) return false;
  }
  return true;
}

void PushAchievementReq::Swap(PushAchievementReq* other) {
  if (other != this) {
    std::swap(achievements_, other->achievements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushAchievementReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushAchievementReq_descriptor_;
  metadata.reflection = PushAchievementReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAchievementRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

GetAchievementRewardReq::GetAchievementRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAchievement.GetAchievementRewardReq)
}

void GetAchievementRewardReq::InitAsDefaultInstance() {
}

GetAchievementRewardReq::GetAchievementRewardReq(const GetAchievementRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAchievement.GetAchievementRewardReq)
}

void GetAchievementRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAchievementRewardReq::~GetAchievementRewardReq() {
  // @@protoc_insertion_point(destructor:ProtoAchievement.GetAchievementRewardReq)
  SharedDtor();
}

void GetAchievementRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAchievementRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAchievementRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAchievementRewardReq_descriptor_;
}

const GetAchievementRewardReq& GetAchievementRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
  return *default_instance_;
}

GetAchievementRewardReq* GetAchievementRewardReq::default_instance_ = NULL;

GetAchievementRewardReq* GetAchievementRewardReq::New() const {
  return new GetAchievementRewardReq;
}

void GetAchievementRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAchievementRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAchievement.GetAchievementRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAchievement.GetAchievementRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAchievement.GetAchievementRewardReq)
  return false;
#undef DO_
}

void GetAchievementRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAchievement.GetAchievementRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAchievement.GetAchievementRewardReq)
}

::google::protobuf::uint8* GetAchievementRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAchievement.GetAchievementRewardReq)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAchievement.GetAchievementRewardReq)
  return target;
}

int GetAchievementRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAchievementRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAchievementRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAchievementRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAchievementRewardReq::MergeFrom(const GetAchievementRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAchievementRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAchievementRewardReq::CopyFrom(const GetAchievementRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAchievementRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetAchievementRewardReq::Swap(GetAchievementRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAchievementRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAchievementRewardReq_descriptor_;
  metadata.reflection = GetAchievementRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAchievementRewardResp::kEquipsFieldNumber;
const int GetAchievementRewardResp::kBaseFieldNumber;
const int GetAchievementRewardResp::kHeroFieldNumber;
const int GetAchievementRewardResp::kAchievementFieldNumber;
#endif  // !_MSC_VER

GetAchievementRewardResp::GetAchievementRewardResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoAchievement.GetAchievementRewardResp)
}

void GetAchievementRewardResp::InitAsDefaultInstance() {
  equips_ = const_cast< ::DataCommon::EquipmentAllCPP*>(&::DataCommon::EquipmentAllCPP::default_instance());
  base_ = const_cast< ::DataCommon::CommonBaseRewardCPP*>(&::DataCommon::CommonBaseRewardCPP::default_instance());
  hero_ = const_cast< ::ProtoHero::HeroBaseInfoCPP*>(&::ProtoHero::HeroBaseInfoCPP::default_instance());
  achievement_ = const_cast< ::ProtoAchievement::AchievementCPP*>(&::ProtoAchievement::AchievementCPP::default_instance());
}

GetAchievementRewardResp::GetAchievementRewardResp(const GetAchievementRewardResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoAchievement.GetAchievementRewardResp)
}

void GetAchievementRewardResp::SharedCtor() {
  _cached_size_ = 0;
  equips_ = NULL;
  base_ = NULL;
  hero_ = NULL;
  achievement_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAchievementRewardResp::~GetAchievementRewardResp() {
  // @@protoc_insertion_point(destructor:ProtoAchievement.GetAchievementRewardResp)
  SharedDtor();
}

void GetAchievementRewardResp::SharedDtor() {
  if (this != default_instance_) {
    delete equips_;
    delete base_;
    delete hero_;
    delete achievement_;
  }
}

void GetAchievementRewardResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAchievementRewardResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAchievementRewardResp_descriptor_;
}

const GetAchievementRewardResp& GetAchievementRewardResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoAchievement_2eproto();
  return *default_instance_;
}

GetAchievementRewardResp* GetAchievementRewardResp::default_instance_ = NULL;

GetAchievementRewardResp* GetAchievementRewardResp::New() const {
  return new GetAchievementRewardResp;
}

void GetAchievementRewardResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_equips()) {
      if (equips_ != NULL) equips_->::DataCommon::EquipmentAllCPP::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::DataCommon::CommonBaseRewardCPP::Clear();
    }
    if (has_hero()) {
      if (hero_ != NULL) hero_->::ProtoHero::HeroBaseInfoCPP::Clear();
    }
    if (has_achievement()) {
      if (achievement_ != NULL) achievement_->::ProtoAchievement::AchievementCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAchievementRewardResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoAchievement.GetAchievementRewardResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.EquipmentAllCPP equips = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equips()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .DataCommon.CommonBaseRewardCPP base = 2;
      case 2: {
        if (tag == 18) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hero;
        break;
      }

      // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
      case 3: {
        if (tag == 26) {
         parse_hero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_achievement;
        break;
      }

      // required .ProtoAchievement.AchievementCPP achievement = 4;
      case 4: {
        if (tag == 34) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoAchievement.GetAchievementRewardResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoAchievement.GetAchievementRewardResp)
  return false;
#undef DO_
}

void GetAchievementRewardResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoAchievement.GetAchievementRewardResp)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(), output);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hero(), output);
  }

  // required .ProtoAchievement.AchievementCPP achievement = 4;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->achievement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoAchievement.GetAchievementRewardResp)
}

::google::protobuf::uint8* GetAchievementRewardResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoAchievement.GetAchievementRewardResp)
  // optional .DataCommon.EquipmentAllCPP equips = 1;
  if (has_equips()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(), target);
  }

  // optional .DataCommon.CommonBaseRewardCPP base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hero(), target);
  }

  // required .ProtoAchievement.AchievementCPP achievement = 4;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->achievement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoAchievement.GetAchievementRewardResp)
  return target;
}

int GetAchievementRewardResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.EquipmentAllCPP equips = 1;
    if (has_equips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equips());
    }

    // optional .DataCommon.CommonBaseRewardCPP base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .ProtoHero.HeroBaseInfoCPP hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero());
    }

    // required .ProtoAchievement.AchievementCPP achievement = 4;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAchievementRewardResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAchievementRewardResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAchievementRewardResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAchievementRewardResp::MergeFrom(const GetAchievementRewardResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equips()) {
      mutable_equips()->::DataCommon::EquipmentAllCPP::MergeFrom(from.equips());
    }
    if (from.has_base()) {
      mutable_base()->::DataCommon::CommonBaseRewardCPP::MergeFrom(from.base());
    }
    if (from.has_hero()) {
      mutable_hero()->::ProtoHero::HeroBaseInfoCPP::MergeFrom(from.hero());
    }
    if (from.has_achievement()) {
      mutable_achievement()->::ProtoAchievement::AchievementCPP::MergeFrom(from.achievement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAchievementRewardResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAchievementRewardResp::CopyFrom(const GetAchievementRewardResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAchievementRewardResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_equips()) {
    if (!this->equips().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_hero()) {
    if (!this->hero().IsInitialized()) return false;
  }
  if (has_achievement()) {
    if (!this->achievement().IsInitialized()) return false;
  }
  return true;
}

void GetAchievementRewardResp::Swap(GetAchievementRewardResp* other) {
  if (other != this) {
    std::swap(equips_, other->equips_);
    std::swap(base_, other->base_);
    std::swap(hero_, other->hero_);
    std::swap(achievement_, other->achievement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAchievementRewardResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAchievementRewardResp_descriptor_;
  metadata.reflection = GetAchievementRewardResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoAchievement

// @@protoc_insertion_point(global_scope)
